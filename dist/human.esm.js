/*
  Human
  homepage: <https://github.com/vladmandic/human>
  author: <https://github.com/vladmandic>'
*/

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all2) => {
  for (var name in all2)
    __defProp(target, name, { get: all2[name], enumerable: true });
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// src/util/util.ts
function log(...msg) {
  const dt2 = new Date();
  const ts2 = `${dt2.getHours().toString().padStart(2, "0")}:${dt2.getMinutes().toString().padStart(2, "0")}:${dt2.getSeconds().toString().padStart(2, "0")}.${dt2.getMilliseconds().toString().padStart(3, "0")}`;
  if (msg)
    console.log(ts2, "Human:", ...msg);
}
function join(folder, file) {
  const separator = folder.endsWith("/") ? "" : "/";
  const skipJoin = file.startsWith(".") || file.startsWith("/") || file.startsWith("http:") || file.startsWith("https:") || file.startsWith("file:");
  const path = skipJoin ? `${file}` : `${folder}${separator}${file}`;
  if (!path.toLocaleLowerCase().includes(".json"))
    throw new Error(`modelpath error: expecting json file: ${path}`);
  return path;
}
var now = () => {
  if (typeof performance !== "undefined")
    return performance.now();
  return parseInt((Number(process.hrtime.bigint()) / 1e3 / 1e3).toString());
};
function validate(defaults, config3, parent = "config", msgs = []) {
  for (const key of Object.keys(config3)) {
    if (typeof config3[key] === "object") {
      validate(defaults[key], config3[key], key, msgs);
    } else {
      const defined = defaults && typeof defaults[key] !== "undefined";
      if (!defined)
        msgs.push({ reason: "unknown property", where: `${parent}.${key} = ${config3[key]}` });
      const same = defaults && typeof defaults[key] === typeof config3[key];
      if (defined && !same)
        msgs.push({ reason: "property type mismatch", where: `${parent}.${key} = ${config3[key]}`, expected: typeof defaults[key] });
    }
  }
  if (config3.debug && parent === "config" && msgs.length > 0)
    log("invalid configuration", msgs);
  return msgs;
}
function mergeDeep(...objects) {
  const isObject = (obj) => obj && typeof obj === "object";
  return objects.reduce((prev, obj) => {
    Object.keys(obj || {}).forEach((key) => {
      const pVal = prev[key];
      const oVal = obj[key];
      if (Array.isArray(pVal) && Array.isArray(oVal))
        prev[key] = pVal.concat(...oVal);
      else if (isObject(pVal) && isObject(oVal))
        prev[key] = mergeDeep(pVal, oVal);
      else
        prev[key] = oVal;
    });
    return prev;
  }, {});
}

// src/config.ts
var config = {
  backend: "",
  modelBasePath: "",
  cacheModels: true,
  wasmPath: "",
  wasmPlatformFetch: false,
  debug: true,
  async: true,
  warmup: "full",
  cacheSensitivity: 0.7,
  skipAllowed: false,
  deallocate: false,
  filter: {
    enabled: true,
    equalization: false,
    width: 0,
    height: 0,
    flip: false,
    return: true,
    brightness: 0,
    contrast: 0,
    sharpness: 0,
    blur: 0,
    saturation: 0,
    hue: 0,
    negative: false,
    sepia: false,
    vintage: false,
    kodachrome: false,
    technicolor: false,
    polaroid: false,
    pixelate: 0
  },
  gesture: {
    enabled: true
  },
  face: {
    enabled: true,
    detector: {
      modelPath: "blazeface.json",
      rotation: true,
      maxDetected: 1,
      skipFrames: 99,
      skipTime: 2500,
      minConfidence: 0.2,
      iouThreshold: 0.1,
      mask: false,
      return: false
    },
    mesh: {
      enabled: true,
      modelPath: "facemesh.json"
    },
    attention: {
      enabled: false,
      modelPath: "facemesh-attention.json"
    },
    iris: {
      enabled: true,
      modelPath: "iris.json"
    },
    emotion: {
      enabled: true,
      minConfidence: 0.1,
      skipFrames: 99,
      skipTime: 1500,
      modelPath: "emotion.json"
    },
    description: {
      enabled: true,
      modelPath: "faceres.json",
      skipFrames: 99,
      skipTime: 3e3,
      minConfidence: 0.1
    },
    antispoof: {
      enabled: false,
      skipFrames: 99,
      skipTime: 4e3,
      modelPath: "antispoof.json"
    },
    liveness: {
      enabled: false,
      skipFrames: 99,
      skipTime: 4e3,
      modelPath: "liveness.json"
    }
  },
  body: {
    enabled: true,
    modelPath: "movenet-lightning.json",
    maxDetected: -1,
    minConfidence: 0.3,
    skipFrames: 1,
    skipTime: 200
  },
  hand: {
    enabled: true,
    rotation: true,
    skipFrames: 99,
    skipTime: 1e3,
    minConfidence: 0.5,
    iouThreshold: 0.2,
    maxDetected: -1,
    landmarks: true,
    detector: {
      modelPath: "handtrack.json"
    },
    skeleton: {
      modelPath: "handlandmark-full.json"
    }
  },
  object: {
    enabled: false,
    modelPath: "mb3-centernet.json",
    minConfidence: 0.2,
    iouThreshold: 0.4,
    maxDetected: 10,
    skipFrames: 99,
    skipTime: 2e3
  },
  segmentation: {
    enabled: false,
    modelPath: "selfie.json",
    blur: 8
  }
};

// dist/tfjs.esm.js
var tfjs_esm_exports = {};
__export(tfjs_esm_exports, {
  Abs: () => uo,
  Acos: () => rl,
  Acosh: () => al,
  AdadeltaOptimizer: () => gb,
  AdagradOptimizer: () => bb,
  AdamOptimizer: () => yb,
  AdamaxOptimizer: () => vb,
  Add: () => Sr,
  AddN: () => Ia,
  All: () => il,
  Any: () => ol,
  ArgMax: () => Sa,
  ArgMin: () => ul,
  Asin: () => ll,
  Asinh: () => cl,
  Atan: () => dl,
  Atan2: () => hl,
  Atanh: () => pl,
  AvgPool: () => Ca,
  AvgPool3D: () => Kd,
  AvgPool3DGrad: () => lg,
  AvgPoolGrad: () => ug,
  BackendWasm: () => Pde,
  BatchMatMul: () => Na,
  BatchToSpaceND: () => lo,
  Bincount: () => cg,
  BroadcastArgs: () => dg,
  BroadcastTo: () => O$,
  Callback: () => FW,
  CallbackList: () => YL,
  Cast: () => Ta,
  Ceil: () => $a,
  ClipByValue: () => Cr,
  Complex: () => Xd,
  ComplexAbs: () => Yd,
  Concat: () => co,
  Conv2D: () => _a,
  Conv2DBackpropFilter: () => pg,
  Conv2DBackpropInput: () => Aa,
  Conv3D: () => Qd,
  Conv3DBackpropFilterV2: () => hg,
  Conv3DBackpropInputV2: () => fg,
  Cos: () => Ea,
  Cosh: () => Ra,
  CropAndResize: () => ho,
  Cumprod: () => po,
  Cumsum: () => Da,
  CustomCallback: () => JL,
  DataStorage: () => Hd,
  DenseBincount: () => mg,
  DepthToSpace: () => fo,
  DepthwiseConv2dNative: () => Fa,
  DepthwiseConv2dNativeBackpropFilter: () => gg,
  DepthwiseConv2dNativeBackpropInput: () => bg,
  Diag: () => yg,
  Dilation2D: () => Zd,
  Dilation2DBackpropFilter: () => Zf,
  Dilation2DBackpropInput: () => Qf,
  ENV: () => rk,
  EarlyStopping: () => OW,
  Einsum: () => Jd,
  Elu: () => Pa,
  EluGrad: () => vg,
  Environment: () => _$,
  Equal: () => mo,
  Erf: () => fl,
  Exp: () => za,
  ExpandDims: () => go,
  Expm1: () => bo,
  FFT: () => xg,
  Fill: () => ml,
  FlipLeftRight: () => yo,
  Floor: () => Ma,
  FloorDiv: () => La,
  FromPixels: () => fd,
  FusedBatchNorm: () => Ba,
  FusedConv2D: () => ia,
  FusedDepthwiseConv2D: () => oa,
  GPGPUContext: () => Xf,
  GatherNd: () => xo,
  GatherV2: () => vo,
  GraphModel: () => B4,
  Greater: () => wo,
  GreaterEqual: () => Va,
  History: () => ZL,
  IFFT: () => wg,
  Identity: () => Wa,
  Imag: () => ep,
  InputSpec: () => Dt,
  IsFinite: () => gl,
  IsInf: () => bl,
  IsNan: () => yl,
  KernelBackend: () => sl,
  LRN: () => np,
  LRNGrad: () => Ig,
  LayerVariable: () => dz,
  LayersModel: () => hr,
  LeakyRelu: () => Ua,
  Less: () => ko,
  LessEqual: () => Io,
  LinSpace: () => kg,
  Log: () => Ga,
  Log1p: () => vl,
  LogSoftmax: () => P$,
  LogicalAnd: () => So,
  LogicalNot: () => xl,
  LogicalOr: () => tp,
  MathBackendCPU: () => HS,
  MathBackendWebGL: () => G1,
  Max: () => Ha,
  MaxPool: () => ja,
  MaxPool3D: () => sp,
  MaxPool3DGrad: () => Cg,
  MaxPoolGrad: () => Sg,
  MaxPoolWithArgmax: () => Ng,
  Maximum: () => qa,
  Mean: () => Ka,
  Min: () => Xa,
  Minimum: () => Ya,
  MirrorPad: () => Qa,
  Mod: () => wl,
  MomentumOptimizer: () => xb,
  Multinomial: () => Tg,
  Multiply: () => Za,
  Neg: () => Co,
  NonMaxSuppressionV3: () => To,
  NonMaxSuppressionV4: () => kl,
  NonMaxSuppressionV5: () => $o,
  NotEqual: () => No,
  OP_SCOPE_SUFFIX: () => f_,
  OneHot: () => Ao,
  OnesLike: () => _o,
  Optimizer: () => Ar,
  OptimizerConstructors: () => Ur,
  Pack: () => Eo,
  PadV2: () => Ja,
  Pool: () => Wde,
  Pow: () => ei,
  Prelu: () => ti,
  Prod: () => ni,
  RMSPropOptimizer: () => wb,
  RNN: () => Er,
  Range: () => Il,
  Rank: () => a_,
  Real: () => rp,
  RealDiv: () => Oa,
  Reciprocal: () => Sl,
  Reduction: () => dO,
  Relu: () => si,
  Relu6: () => ai,
  Reshape: () => Ro,
  ResizeBilinear: () => ri,
  ResizeBilinearGrad: () => _g,
  ResizeNearestNeighbor: () => Cl,
  ResizeNearestNeighborGrad: () => $g,
  Reverse: () => Do,
  RotateWithOffset: () => jo,
  Round: () => Fo,
  Rsqrt: () => ii,
  SGDOptimizer: () => Cp,
  ScatterNd: () => Oo,
  Select: () => Po,
  Selu: () => Nl,
  Sequential: () => Hb,
  Sigmoid: () => ui,
  Sign: () => Tl,
  Sin: () => oi,
  Sinh: () => Mo,
  Slice: () => zo,
  Softmax: () => di,
  Softplus: () => $l,
  SpaceToBatchND: () => Lo,
  SparseFillEmptyRows: () => ap,
  SparseReshape: () => _l,
  SparseSegmentMean: () => ip,
  SparseSegmentSum: () => op,
  SparseToDense: () => up,
  SplitV: () => Bo,
  Sqrt: () => li,
  Square: () => Al,
  SquaredDifference: () => pi,
  Step: () => gi,
  StridedSlice: () => Vo,
  StringNGrams: () => lp,
  StringSplit: () => Ag,
  StringToHashBucketFast: () => Eg,
  Sub: () => hi,
  Sum: () => ci,
  SymbolicTensor: () => $s,
  Tan: () => Wo,
  Tanh: () => fi,
  Tensor: () => et,
  TensorBuffer: () => Vt,
  Tile: () => Nr,
  TopK: () => Uo,
  Transform: () => Go,
  Transpose: () => mi,
  Unique: () => Rg,
  Unpack: () => Ho,
  UnsortedSegmentSum: () => cp,
  Variable: () => gd,
  ZerosLike: () => qo,
  _FusedMatMul: () => aa,
  abs: () => Mt,
  acos: () => XA,
  acosh: () => QA,
  add: () => ie,
  addN: () => JA,
  all: () => Qk,
  any: () => hm,
  argMax: () => qu,
  argMin: () => rE,
  asin: () => iE,
  asinh: () => uE,
  atan: () => cE,
  atan2: () => pE,
  atanh: () => fE,
  avgPool: () => qg,
  avgPool3d: () => tI,
  backend: () => WA,
  backend_util: () => C,
  basicLSTMCell: () => ipe,
  batchNorm: () => Ku,
  batchNorm2d: () => DE,
  batchNorm3d: () => OE,
  batchNorm4d: () => zE,
  batchToSpaceND: () => jg,
  bincount: () => nI,
  booleanMaskAsync: () => Fpe,
  broadcastArgs: () => BE,
  broadcastTo: () => nd,
  broadcast_util: () => Ko,
  browser: () => Ek,
  buffer: () => De,
  callbacks: () => Gpe,
  cast: () => ce,
  ceil: () => UE,
  clipByValue: () => Vn,
  clone: () => cr,
  complex: () => ua,
  concat: () => Ft,
  concat1d: () => qE,
  concat2d: () => KE,
  concat3d: () => YE,
  concat4d: () => ZE,
  constraints: () => TL,
  conv1d: () => sI,
  conv2d: () => da,
  conv2dTranspose: () => rI,
  conv3d: () => aI,
  conv3dTranspose: () => iR,
  copyRegisteredKernels: () => Hde,
  cos: () => Xg,
  cosh: () => oI,
  cosineWindow: () => RI,
  cumprod: () => mm,
  cumsum: () => uI,
  customGrad: () => js,
  data: () => V4,
  denseBincount: () => pR,
  deprecationWarn: () => Xk,
  depthToSpace: () => fR,
  depthwiseConv2d: () => mp,
  deregisterOp: () => qpe,
  device_util: () => hp,
  diag: () => ope,
  dilation2d: () => yR,
  disableDeprecationWarnings: () => Xde,
  dispose: () => Re,
  disposeVariables: () => Yde,
  div: () => xe,
  divNoNan: () => IR,
  dot: () => upe,
  dropout: () => iF,
  einsum: () => NR,
  elu: () => gp,
  enableDebugMode: () => Kde,
  enableProdMode: () => jde,
  enclosingPowerOfTwo: () => oF,
  engine: () => Ss,
  env: () => X,
  equal: () => Xn,
  erf: () => _R,
  exp: () => Yn,
  expandDims: () => Pn,
  expm1: () => DR,
  eye: () => lI,
  fft: () => db,
  fill: () => Pl,
  findBackend: () => spe,
  findBackendFactory: () => rpe,
  floor: () => bp,
  floorDiv: () => Yk,
  forceHalfFloat: () => JX,
  fused: () => fa,
  gather: () => Xu,
  gatherND: () => sF,
  gather_util: () => Dk,
  getBackend: () => tpe,
  getGradient: () => rx,
  getKernel: () => Jf,
  getKernelsForBackend: () => em,
  getThreadsCount: () => nhe,
  gpgpu_util: () => VK,
  grad: () => dpe,
  grads: () => ppe,
  greater: () => Un,
  greaterEqual: () => Xo,
  ifft: () => Id,
  imag: () => Yg,
  image: () => jn,
  inTopKAsync: () => Ppe,
  initializers: () => RL,
  input: () => GB,
  io: () => An,
  irfft: () => CI,
  isFinite: () => lpe,
  isInf: () => cpe,
  isNaN: () => GR,
  keep: () => Ht,
  kernel_impls: () => xs,
  layers: () => KL,
  leakyRelu: () => Qg,
  less: () => cI,
  lessEqual: () => Yo,
  linalg: () => HO,
  linspace: () => KR,
  loadGraphModel: () => jpe,
  loadLayersModel: () => Wpe,
  localResponseNormalization: () => YR,
  log: () => Qn,
  log1p: () => Zg,
  logSigmoid: () => mpe,
  logSoftmax: () => dI,
  logSumExp: () => cD,
  logicalAnd: () => Ds,
  logicalNot: () => tb,
  logicalOr: () => mI,
  logicalXor: () => gpe,
  losses: () => Lpe,
  matMul: () => We,
  math: () => dA,
  max: () => As,
  maxPool: () => nb,
  maxPool3d: () => gI,
  maxPoolWithArgmax: () => yD,
  maximum: () => _r,
  mean: () => St,
  memory: () => pm,
  meshgrid: () => bpe,
  metrics: () => hW,
  min: () => gm,
  minimum: () => vp,
  mirrorPad: () => SD,
  mod: () => ND,
  model: () => Bpe,
  models: () => _W,
  moments: () => sb,
  movingAverage: () => Ope,
  mul: () => V,
  multiRNNCell: () => ype,
  multinomial: () => ED,
  neg: () => kt,
  nextFrame: () => BI,
  norm: () => AI,
  notEqual: () => Yu,
  oneHot: () => vd,
  ones: () => Mn,
  onesLike: () => Zn,
  op: () => L,
  outerProduct: () => vpe,
  pad: () => bi,
  pad1d: () => xpe,
  pad2d: () => wpe,
  pad3d: () => kpe,
  pad4d: () => Ipe,
  pool: () => Spe,
  pow: () => ha,
  prelu: () => ab,
  print: () => K_,
  prod: () => bI,
  profile: () => Qde,
  rand: () => Cpe,
  randomGamma: () => Npe,
  randomNormal: () => ZD,
  randomUniform: () => Ml,
  range: () => Qu,
  ready: () => epe,
  real: () => wd,
  reciprocal: () => n3,
  registerBackend: () => fp,
  registerCallbackConstructor: () => Upe,
  registerGradient: () => M$,
  registerKernel: () => El,
  registerOp: () => Hpe,
  regularizers: () => AW,
  relu: () => Ys,
  relu6: () => yI,
  removeBackend: () => npe,
  reshape: () => G,
  reverse: () => Jn,
  reverse1d: () => Tpe,
  reverse2d: () => $pe,
  reverse3d: () => _pe,
  reverse4d: () => Ape,
  rfft: () => pb,
  round: () => vI,
  rsqrt: () => xI,
  scalar: () => we,
  scatterND: () => J3,
  scatter_util: () => Ok,
  selu: () => wI,
  separableConv2d: () => f3,
  sequential: () => Vpe,
  serialization: () => ae,
  setBackend: () => Jde,
  setPlatform: () => ape,
  setThreadsCount: () => the,
  setWasmPath: () => Jpe,
  setWasmPaths: () => ehe,
  setWebGLContext: () => D5,
  setdiff1dAsync: () => g3,
  shared: () => ev,
  sigmoid: () => qs,
  sign: () => y3,
  signal: () => Mpe,
  sin: () => kI,
  sinh: () => II,
  slice: () => qe,
  slice1d: () => ub,
  slice2d: () => SI,
  slice3d: () => lb,
  slice4d: () => kd,
  slice_util: () => wt,
  softmax: () => cb,
  softplus: () => zl,
  spaceToBatchND: () => rb,
  sparse: () => Wc,
  sparseToDense: () => EI,
  spectral: () => zpe,
  split: () => Bn,
  sqrt: () => cn,
  square: () => ct,
  squaredDifference: () => NI,
  squeeze: () => gr,
  stack: () => es,
  step: () => xp,
  stridedSlice: () => z3,
  string: () => Bf,
  sub: () => ge,
  sum: () => ve,
  sumOutType: () => pp,
  tan: () => L3,
  tanh: () => ju,
  tensor: () => fs,
  tensor1d: () => Qt,
  tensor2d: () => Yi,
  tensor3d: () => bA,
  tensor4d: () => Epe,
  tensor5d: () => Rpe,
  tensor6d: () => Dpe,
  tensor_util: () => _s,
  test_util: () => FA,
  tidy: () => j,
  tile: () => ps,
  time: () => Zde,
  topk: () => V3,
  train: () => Mi,
  transpose: () => Ge,
  truncatedNormal: () => hb,
  unique: () => mx,
  unregisterGradient: () => Gde,
  unregisterKernel: () => Ude,
  unsortedSegmentSum: () => H3,
  unstack: () => Fs,
  upcastType: () => ln,
  util: () => w,
  valueAndGrad: () => hpe,
  valueAndGrads: () => fpe,
  variable: () => j3,
  variableGrads: () => JR,
  version: () => rhe,
  version_converter: () => Kpe,
  version_core: () => qde,
  version_cpu: () => Xpe,
  version_layers: () => f0,
  version_wasm: () => she,
  version_webgl: () => Ype,
  webgl: () => Qpe,
  webgl_util: () => R5,
  webgpu: () => yoe,
  where: () => vn,
  whereAsync: () => $I,
  zeros: () => $t,
  zerosLike: () => je
});
var GT = Object.create;
var Ud = Object.defineProperty;
var HT = Object.getOwnPropertyDescriptor;
var qw = Object.getOwnPropertyNames;
var qT = Object.getPrototypeOf;
var jT = Object.prototype.hasOwnProperty;
var KT = (e) => Ud(e, "__esModule", { value: true });
var zt = (e, t) => function() {
  return t || (0, e[qw(e)[0]])((t = { exports: {} }).exports, t), t.exports;
};
var Ae = (e, t) => {
  for (var n in t)
    Ud(e, n, { get: t[n], enumerable: true });
};
var XT = (e, t, n, s) => {
  if (t && typeof t == "object" || typeof t == "function")
    for (let r of qw(t))
      !jT.call(e, r) && (n || r !== "default") && Ud(e, r, { get: () => t[r], enumerable: !(s = HT(t, r)) || s.enumerable });
  return e;
};
var wa = (e, t) => XT(KT(Ud(e != null ? GT(qT(e)) : {}, "default", !t && e && e.__esModule ? { get: () => e.default, enumerable: true } : { value: e, enumerable: true })), e);
var YT = zt({ "src/node_modules/long/src/long.js"(e, t) {
  t.exports = s;
  var n = null;
  try {
    n = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
  } catch (F) {
  }
  function s(F, T, z) {
    this.low = F | 0, this.high = T | 0, this.unsigned = !!z;
  }
  s.prototype.__isLong__, Object.defineProperty(s.prototype, "__isLong__", { value: true });
  function r(F) {
    return (F && F.__isLong__) === true;
  }
  s.isLong = r;
  var a = {}, i = {};
  function o(F, T) {
    var z, W, q;
    return T ? (F >>>= 0, (q = 0 <= F && F < 256) && (W = i[F], W) ? W : (z = l(F, (F | 0) < 0 ? -1 : 0, true), q && (i[F] = z), z)) : (F |= 0, (q = -128 <= F && F < 128) && (W = a[F], W) ? W : (z = l(F, F < 0 ? -1 : 0, false), q && (a[F] = z), z));
  }
  s.fromInt = o;
  function u(F, T) {
    if (isNaN(F))
      return T ? x : v;
    if (T) {
      if (F < 0)
        return x;
      if (F >= g)
        return A;
    } else {
      if (F <= -b)
        return P;
      if (F + 1 >= b)
        return E;
    }
    return F < 0 ? u(-F, T).neg() : l(F % m | 0, F / m | 0, T);
  }
  s.fromNumber = u;
  function l(F, T, z) {
    return new s(F, T, z);
  }
  s.fromBits = l;
  var c = Math.pow;
  function p(F, T, z) {
    if (F.length === 0)
      throw Error("empty string");
    if (F === "NaN" || F === "Infinity" || F === "+Infinity" || F === "-Infinity")
      return v;
    if (typeof T == "number" ? (z = T, T = false) : T = !!T, z = z || 10, z < 2 || 36 < z)
      throw RangeError("radix");
    var W;
    if ((W = F.indexOf("-")) > 0)
      throw Error("interior hyphen");
    if (W === 0)
      return p(F.substring(1), T, z).neg();
    for (var q = u(c(z, 8)), K = v, Y = 0; Y < F.length; Y += 8) {
      var Z = Math.min(8, F.length - Y), te = parseInt(F.substring(Y, Y + Z), z);
      if (Z < 8) {
        var ee = u(c(z, Z));
        K = K.mul(ee).add(u(te));
      } else
        K = K.mul(q), K = K.add(u(te));
    }
    return K.unsigned = T, K;
  }
  s.fromString = p;
  function d(F, T) {
    return typeof F == "number" ? u(F, T) : typeof F == "string" ? p(F, T) : l(F.low, F.high, typeof T == "boolean" ? T : F.unsigned);
  }
  s.fromValue = d;
  var h = 1 << 16, f = 1 << 24, m = h * h, g = m * m, b = g / 2, y = o(f), v = o(0);
  s.ZERO = v;
  var x = o(0, true);
  s.UZERO = x;
  var k = o(1);
  s.ONE = k;
  var S = o(1, true);
  s.UONE = S;
  var $ = o(-1);
  s.NEG_ONE = $;
  var E = l(-1, 2147483647, false);
  s.MAX_VALUE = E;
  var A = l(-1, -1, true);
  s.MAX_UNSIGNED_VALUE = A;
  var P = l(0, -2147483648, false);
  s.MIN_VALUE = P;
  var R = s.prototype;
  R.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  }, R.toNumber = function() {
    return this.unsigned ? (this.high >>> 0) * m + (this.low >>> 0) : this.high * m + (this.low >>> 0);
  }, R.toString = function(T) {
    if (T = T || 10, T < 2 || 36 < T)
      throw RangeError("radix");
    if (this.isZero())
      return "0";
    if (this.isNegative())
      if (this.eq(P)) {
        var z = u(T), W = this.div(z), q = W.mul(z).sub(this);
        return W.toString(T) + q.toInt().toString(T);
      } else
        return "-" + this.neg().toString(T);
    for (var K = u(c(T, 6), this.unsigned), Y = this, Z = ""; ; ) {
      var te = Y.div(K), ee = Y.sub(te.mul(K)).toInt() >>> 0, se = ee.toString(T);
      if (Y = te, Y.isZero())
        return se + Z;
      for (; se.length < 6; )
        se = "0" + se;
      Z = "" + se + Z;
    }
  }, R.getHighBits = function() {
    return this.high;
  }, R.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  }, R.getLowBits = function() {
    return this.low;
  }, R.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  }, R.getNumBitsAbs = function() {
    if (this.isNegative())
      return this.eq(P) ? 64 : this.neg().getNumBitsAbs();
    for (var T = this.high != 0 ? this.high : this.low, z = 31; z > 0 && (T & 1 << z) == 0; z--)
      ;
    return this.high != 0 ? z + 33 : z + 1;
  }, R.isZero = function() {
    return this.high === 0 && this.low === 0;
  }, R.eqz = R.isZero, R.isNegative = function() {
    return !this.unsigned && this.high < 0;
  }, R.isPositive = function() {
    return this.unsigned || this.high >= 0;
  }, R.isOdd = function() {
    return (this.low & 1) === 1;
  }, R.isEven = function() {
    return (this.low & 1) === 0;
  }, R.equals = function(T) {
    return r(T) || (T = d(T)), this.unsigned !== T.unsigned && this.high >>> 31 === 1 && T.high >>> 31 === 1 ? false : this.high === T.high && this.low === T.low;
  }, R.eq = R.equals, R.notEquals = function(T) {
    return !this.eq(T);
  }, R.neq = R.notEquals, R.ne = R.notEquals, R.lessThan = function(T) {
    return this.comp(T) < 0;
  }, R.lt = R.lessThan, R.lessThanOrEqual = function(T) {
    return this.comp(T) <= 0;
  }, R.lte = R.lessThanOrEqual, R.le = R.lessThanOrEqual, R.greaterThan = function(T) {
    return this.comp(T) > 0;
  }, R.gt = R.greaterThan, R.greaterThanOrEqual = function(T) {
    return this.comp(T) >= 0;
  }, R.gte = R.greaterThanOrEqual, R.ge = R.greaterThanOrEqual, R.compare = function(T) {
    if (r(T) || (T = d(T)), this.eq(T))
      return 0;
    var z = this.isNegative(), W = T.isNegative();
    return z && !W ? -1 : !z && W ? 1 : this.unsigned ? T.high >>> 0 > this.high >>> 0 || T.high === this.high && T.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(T).isNegative() ? -1 : 1;
  }, R.comp = R.compare, R.negate = function() {
    return !this.unsigned && this.eq(P) ? P : this.not().add(k);
  }, R.neg = R.negate, R.add = function(T) {
    r(T) || (T = d(T));
    var z = this.high >>> 16, W = this.high & 65535, q = this.low >>> 16, K = this.low & 65535, Y = T.high >>> 16, Z = T.high & 65535, te = T.low >>> 16, ee = T.low & 65535, se = 0, ne = 0, oe = 0, re = 0;
    return re += K + ee, oe += re >>> 16, re &= 65535, oe += q + te, ne += oe >>> 16, oe &= 65535, ne += W + Z, se += ne >>> 16, ne &= 65535, se += z + Y, se &= 65535, l(oe << 16 | re, se << 16 | ne, this.unsigned);
  }, R.subtract = function(T) {
    return r(T) || (T = d(T)), this.add(T.neg());
  }, R.sub = R.subtract, R.multiply = function(T) {
    if (this.isZero())
      return v;
    if (r(T) || (T = d(T)), n) {
      var z = n.mul(this.low, this.high, T.low, T.high);
      return l(z, n.get_high(), this.unsigned);
    }
    if (T.isZero())
      return v;
    if (this.eq(P))
      return T.isOdd() ? P : v;
    if (T.eq(P))
      return this.isOdd() ? P : v;
    if (this.isNegative())
      return T.isNegative() ? this.neg().mul(T.neg()) : this.neg().mul(T).neg();
    if (T.isNegative())
      return this.mul(T.neg()).neg();
    if (this.lt(y) && T.lt(y))
      return u(this.toNumber() * T.toNumber(), this.unsigned);
    var W = this.high >>> 16, q = this.high & 65535, K = this.low >>> 16, Y = this.low & 65535, Z = T.high >>> 16, te = T.high & 65535, ee = T.low >>> 16, se = T.low & 65535, ne = 0, oe = 0, re = 0, le = 0;
    return le += Y * se, re += le >>> 16, le &= 65535, re += K * se, oe += re >>> 16, re &= 65535, re += Y * ee, oe += re >>> 16, re &= 65535, oe += q * se, ne += oe >>> 16, oe &= 65535, oe += K * ee, ne += oe >>> 16, oe &= 65535, oe += Y * te, ne += oe >>> 16, oe &= 65535, ne += W * se + q * ee + K * te + Y * Z, ne &= 65535, l(re << 16 | le, ne << 16 | oe, this.unsigned);
  }, R.mul = R.multiply, R.divide = function(T) {
    if (r(T) || (T = d(T)), T.isZero())
      throw Error("division by zero");
    if (n) {
      if (!this.unsigned && this.high === -2147483648 && T.low === -1 && T.high === -1)
        return this;
      var z = (this.unsigned ? n.div_u : n.div_s)(this.low, this.high, T.low, T.high);
      return l(z, n.get_high(), this.unsigned);
    }
    if (this.isZero())
      return this.unsigned ? x : v;
    var W, q, K;
    if (this.unsigned) {
      if (T.unsigned || (T = T.toUnsigned()), T.gt(this))
        return x;
      if (T.gt(this.shru(1)))
        return S;
      K = x;
    } else {
      if (this.eq(P)) {
        if (T.eq(k) || T.eq($))
          return P;
        if (T.eq(P))
          return k;
        var Y = this.shr(1);
        return W = Y.div(T).shl(1), W.eq(v) ? T.isNegative() ? k : $ : (q = this.sub(T.mul(W)), K = W.add(q.div(T)), K);
      } else if (T.eq(P))
        return this.unsigned ? x : v;
      if (this.isNegative())
        return T.isNegative() ? this.neg().div(T.neg()) : this.neg().div(T).neg();
      if (T.isNegative())
        return this.div(T.neg()).neg();
      K = v;
    }
    for (q = this; q.gte(T); ) {
      W = Math.max(1, Math.floor(q.toNumber() / T.toNumber()));
      for (var Z = Math.ceil(Math.log(W) / Math.LN2), te = Z <= 48 ? 1 : c(2, Z - 48), ee = u(W), se = ee.mul(T); se.isNegative() || se.gt(q); )
        W -= te, ee = u(W, this.unsigned), se = ee.mul(T);
      ee.isZero() && (ee = k), K = K.add(ee), q = q.sub(se);
    }
    return K;
  }, R.div = R.divide, R.modulo = function(T) {
    if (r(T) || (T = d(T)), n) {
      var z = (this.unsigned ? n.rem_u : n.rem_s)(this.low, this.high, T.low, T.high);
      return l(z, n.get_high(), this.unsigned);
    }
    return this.sub(this.div(T).mul(T));
  }, R.mod = R.modulo, R.rem = R.modulo, R.not = function() {
    return l(~this.low, ~this.high, this.unsigned);
  }, R.and = function(T) {
    return r(T) || (T = d(T)), l(this.low & T.low, this.high & T.high, this.unsigned);
  }, R.or = function(T) {
    return r(T) || (T = d(T)), l(this.low | T.low, this.high | T.high, this.unsigned);
  }, R.xor = function(T) {
    return r(T) || (T = d(T)), l(this.low ^ T.low, this.high ^ T.high, this.unsigned);
  }, R.shiftLeft = function(T) {
    return r(T) && (T = T.toInt()), (T &= 63) === 0 ? this : T < 32 ? l(this.low << T, this.high << T | this.low >>> 32 - T, this.unsigned) : l(0, this.low << T - 32, this.unsigned);
  }, R.shl = R.shiftLeft, R.shiftRight = function(T) {
    return r(T) && (T = T.toInt()), (T &= 63) === 0 ? this : T < 32 ? l(this.low >>> T | this.high << 32 - T, this.high >> T, this.unsigned) : l(this.high >> T - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  }, R.shr = R.shiftRight, R.shiftRightUnsigned = function(T) {
    if (r(T) && (T = T.toInt()), T &= 63, T === 0)
      return this;
    var z = this.high;
    if (T < 32) {
      var W = this.low;
      return l(W >>> T | z << 32 - T, z >>> T, this.unsigned);
    } else
      return T === 32 ? l(z, 0, this.unsigned) : l(z >>> T - 32, 0, this.unsigned);
  }, R.shru = R.shiftRightUnsigned, R.shr_u = R.shiftRightUnsigned, R.toSigned = function() {
    return this.unsigned ? l(this.low, this.high, false) : this;
  }, R.toUnsigned = function() {
    return this.unsigned ? this : l(this.low, this.high, true);
  }, R.toBytes = function(T) {
    return T ? this.toBytesLE() : this.toBytesBE();
  }, R.toBytesLE = function() {
    var T = this.high, z = this.low;
    return [z & 255, z >>> 8 & 255, z >>> 16 & 255, z >>> 24, T & 255, T >>> 8 & 255, T >>> 16 & 255, T >>> 24];
  }, R.toBytesBE = function() {
    var T = this.high, z = this.low;
    return [T >>> 24, T >>> 16 & 255, T >>> 8 & 255, T & 255, z >>> 24, z >>> 16 & 255, z >>> 8 & 255, z & 255];
  }, s.fromBytes = function(T, z, W) {
    return W ? s.fromBytesLE(T, z) : s.fromBytesBE(T, z);
  }, s.fromBytesLE = function(T, z) {
    return new s(T[0] | T[1] << 8 | T[2] << 16 | T[3] << 24, T[4] | T[5] << 8 | T[6] << 16 | T[7] << 24, z);
  }, s.fromBytesBE = function(T, z) {
    return new s(T[4] << 24 | T[5] << 16 | T[6] << 8 | T[7], T[0] << 24 | T[1] << 16 | T[2] << 8 | T[3], z);
  };
} });
var QT = zt({ "(disabled):src/node_modules/node-fetch/browser.js"() {
} });
var ZT = zt({ "(disabled):util"() {
} });
var JT = zt({ "src/node_modules/seedrandom/lib/alea.js"(e, t) {
  (function(n, s, r) {
    function a(l) {
      var c = this, p = u();
      c.next = function() {
        var d = 2091639 * c.s0 + c.c * 23283064365386963e-26;
        return c.s0 = c.s1, c.s1 = c.s2, c.s2 = d - (c.c = d | 0);
      }, c.c = 1, c.s0 = p(" "), c.s1 = p(" "), c.s2 = p(" "), c.s0 -= p(l), c.s0 < 0 && (c.s0 += 1), c.s1 -= p(l), c.s1 < 0 && (c.s1 += 1), c.s2 -= p(l), c.s2 < 0 && (c.s2 += 1), p = null;
    }
    function i(l, c) {
      return c.c = l.c, c.s0 = l.s0, c.s1 = l.s1, c.s2 = l.s2, c;
    }
    function o(l, c) {
      var p = new a(l), d = c && c.state, h = p.next;
      return h.int32 = function() {
        return p.next() * 4294967296 | 0;
      }, h.double = function() {
        return h() + (h() * 2097152 | 0) * 11102230246251565e-32;
      }, h.quick = h, d && (typeof d == "object" && i(d, p), h.state = function() {
        return i(p, {});
      }), h;
    }
    function u() {
      var l = 4022871197, c = function(p) {
        p = String(p);
        for (var d = 0; d < p.length; d++) {
          l += p.charCodeAt(d);
          var h = 0.02519603282416938 * l;
          l = h >>> 0, h -= l, h *= l, l = h >>> 0, h -= l, l += h * 4294967296;
        }
        return (l >>> 0) * 23283064365386963e-26;
      };
      return c;
    }
    s && s.exports ? s.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.alea = o;
  })(e, typeof t == "object" && t, typeof define == "function" && define);
} });
var e$ = zt({ "src/node_modules/seedrandom/lib/xor128.js"(e, t) {
  (function(n, s, r) {
    function a(u) {
      var l = this, c = "";
      l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.next = function() {
        var d = l.x ^ l.x << 11;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w ^= l.w >>> 19 ^ d ^ d >>> 8;
      }, u === (u | 0) ? l.x = u : c += u;
      for (var p = 0; p < c.length + 64; p++)
        l.x ^= c.charCodeAt(p) | 0, l.next();
    }
    function i(u, l) {
      return l.x = u.x, l.y = u.y, l.z = u.z, l.w = u.w, l;
    }
    function o(u, l) {
      var c = new a(u), p = l && l.state, d = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return d.double = function() {
        do
          var h = c.next() >>> 11, f = (c.next() >>> 0) / 4294967296, m = (h + f) / (1 << 21);
        while (m === 0);
        return m;
      }, d.int32 = c.next, d.quick = d, p && (typeof p == "object" && i(p, c), d.state = function() {
        return i(c, {});
      }), d;
    }
    s && s.exports ? s.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.xor128 = o;
  })(e, typeof t == "object" && t, typeof define == "function" && define);
} });
var t$ = zt({ "src/node_modules/seedrandom/lib/xorwow.js"(e, t) {
  (function(n, s, r) {
    function a(u) {
      var l = this, c = "";
      l.next = function() {
        var d = l.x ^ l.x >>> 2;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w = l.v, (l.d = l.d + 362437 | 0) + (l.v = l.v ^ l.v << 4 ^ (d ^ d << 1)) | 0;
      }, l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.v = 0, u === (u | 0) ? l.x = u : c += u;
      for (var p = 0; p < c.length + 64; p++)
        l.x ^= c.charCodeAt(p) | 0, p == c.length && (l.d = l.x << 10 ^ l.x >>> 4), l.next();
    }
    function i(u, l) {
      return l.x = u.x, l.y = u.y, l.z = u.z, l.w = u.w, l.v = u.v, l.d = u.d, l;
    }
    function o(u, l) {
      var c = new a(u), p = l && l.state, d = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return d.double = function() {
        do
          var h = c.next() >>> 11, f = (c.next() >>> 0) / 4294967296, m = (h + f) / (1 << 21);
        while (m === 0);
        return m;
      }, d.int32 = c.next, d.quick = d, p && (typeof p == "object" && i(p, c), d.state = function() {
        return i(c, {});
      }), d;
    }
    s && s.exports ? s.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.xorwow = o;
  })(e, typeof t == "object" && t, typeof define == "function" && define);
} });
var n$ = zt({ "src/node_modules/seedrandom/lib/xorshift7.js"(e, t) {
  (function(n, s, r) {
    function a(u) {
      var l = this;
      l.next = function() {
        var p = l.x, d = l.i, h, f, m;
        return h = p[d], h ^= h >>> 7, f = h ^ h << 24, h = p[d + 1 & 7], f ^= h ^ h >>> 10, h = p[d + 3 & 7], f ^= h ^ h >>> 3, h = p[d + 4 & 7], f ^= h ^ h << 7, h = p[d + 7 & 7], h = h ^ h << 13, f ^= h ^ h << 9, p[d] = f, l.i = d + 1 & 7, f;
      };
      function c(p, d) {
        var h, f, m = [];
        if (d === (d | 0))
          f = m[0] = d;
        else
          for (d = "" + d, h = 0; h < d.length; ++h)
            m[h & 7] = m[h & 7] << 15 ^ d.charCodeAt(h) + m[h + 1 & 7] << 13;
        for (; m.length < 8; )
          m.push(0);
        for (h = 0; h < 8 && m[h] === 0; ++h)
          ;
        for (h == 8 ? f = m[7] = -1 : f = m[h], p.x = m, p.i = 0, h = 256; h > 0; --h)
          p.next();
      }
      c(l, u);
    }
    function i(u, l) {
      return l.x = u.x.slice(), l.i = u.i, l;
    }
    function o(u, l) {
      u == null && (u = +new Date());
      var c = new a(u), p = l && l.state, d = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return d.double = function() {
        do
          var h = c.next() >>> 11, f = (c.next() >>> 0) / 4294967296, m = (h + f) / (1 << 21);
        while (m === 0);
        return m;
      }, d.int32 = c.next, d.quick = d, p && (p.x && i(p, c), d.state = function() {
        return i(c, {});
      }), d;
    }
    s && s.exports ? s.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.xorshift7 = o;
  })(e, typeof t == "object" && t, typeof define == "function" && define);
} });
var s$ = zt({ "src/node_modules/seedrandom/lib/xor4096.js"(e, t) {
  (function(n, s, r) {
    function a(u) {
      var l = this;
      l.next = function() {
        var p = l.w, d = l.X, h = l.i, f, m;
        return l.w = p = p + 1640531527 | 0, m = d[h + 34 & 127], f = d[h = h + 1 & 127], m ^= m << 13, f ^= f << 17, m ^= m >>> 15, f ^= f >>> 12, m = d[h] = m ^ f, l.i = h, m + (p ^ p >>> 16) | 0;
      };
      function c(p, d) {
        var h, f, m, g, b, y = [], v = 128;
        for (d === (d | 0) ? (f = d, d = null) : (d = d + "\0", f = 0, v = Math.max(v, d.length)), m = 0, g = -32; g < v; ++g)
          d && (f ^= d.charCodeAt((g + 32) % d.length)), g === 0 && (b = f), f ^= f << 10, f ^= f >>> 15, f ^= f << 4, f ^= f >>> 13, g >= 0 && (b = b + 1640531527 | 0, h = y[g & 127] ^= f + b, m = h == 0 ? m + 1 : 0);
        for (m >= 128 && (y[(d && d.length || 0) & 127] = -1), m = 127, g = 4 * 128; g > 0; --g)
          f = y[m + 34 & 127], h = y[m = m + 1 & 127], f ^= f << 13, h ^= h << 17, f ^= f >>> 15, h ^= h >>> 12, y[m] = f ^ h;
        p.w = b, p.X = y, p.i = m;
      }
      c(l, u);
    }
    function i(u, l) {
      return l.i = u.i, l.w = u.w, l.X = u.X.slice(), l;
    }
    function o(u, l) {
      u == null && (u = +new Date());
      var c = new a(u), p = l && l.state, d = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return d.double = function() {
        do
          var h = c.next() >>> 11, f = (c.next() >>> 0) / 4294967296, m = (h + f) / (1 << 21);
        while (m === 0);
        return m;
      }, d.int32 = c.next, d.quick = d, p && (p.X && i(p, c), d.state = function() {
        return i(c, {});
      }), d;
    }
    s && s.exports ? s.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.xor4096 = o;
  })(e, typeof t == "object" && t, typeof define == "function" && define);
} });
var r$ = zt({ "src/node_modules/seedrandom/lib/tychei.js"(e, t) {
  (function(n, s, r) {
    function a(u) {
      var l = this, c = "";
      l.next = function() {
        var d = l.b, h = l.c, f = l.d, m = l.a;
        return d = d << 25 ^ d >>> 7 ^ h, h = h - f | 0, f = f << 24 ^ f >>> 8 ^ m, m = m - d | 0, l.b = d = d << 20 ^ d >>> 12 ^ h, l.c = h = h - f | 0, l.d = f << 16 ^ h >>> 16 ^ m, l.a = m - d | 0;
      }, l.a = 0, l.b = 0, l.c = -1640531527, l.d = 1367130551, u === Math.floor(u) ? (l.a = u / 4294967296 | 0, l.b = u | 0) : c += u;
      for (var p = 0; p < c.length + 20; p++)
        l.b ^= c.charCodeAt(p) | 0, l.next();
    }
    function i(u, l) {
      return l.a = u.a, l.b = u.b, l.c = u.c, l.d = u.d, l;
    }
    function o(u, l) {
      var c = new a(u), p = l && l.state, d = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return d.double = function() {
        do
          var h = c.next() >>> 11, f = (c.next() >>> 0) / 4294967296, m = (h + f) / (1 << 21);
        while (m === 0);
        return m;
      }, d.int32 = c.next, d.quick = d, p && (typeof p == "object" && i(p, c), d.state = function() {
        return i(c, {});
      }), d;
    }
    s && s.exports ? s.exports = o : r && r.amd ? r(function() {
      return o;
    }) : this.tychei = o;
  })(e, typeof t == "object" && t, typeof define == "function" && define);
} });
var a$ = zt({ "(disabled):crypto"() {
} });
var i$ = zt({ "src/node_modules/seedrandom/seedrandom.js"(e, t) {
  (function(n, s, r) {
    var a = 256, i = 6, o = 52, u = "random", l = r.pow(a, i), c = r.pow(2, o), p = c * 2, d = a - 1, h;
    function f(k, S, $) {
      var E = [];
      S = S == true ? { entropy: true } : S || {};
      var A = y(b(S.entropy ? [k, x(s)] : k == null ? v() : k, 3), E), P = new m(E), R = function() {
        for (var F = P.g(i), T = l, z = 0; F < c; )
          F = (F + z) * a, T *= a, z = P.g(1);
        for (; F >= p; )
          F /= 2, T /= 2, z >>>= 1;
        return (F + z) / T;
      };
      return R.int32 = function() {
        return P.g(4) | 0;
      }, R.quick = function() {
        return P.g(4) / 4294967296;
      }, R.double = R, y(x(P.S), s), (S.pass || $ || function(F, T, z, W) {
        return W && (W.S && g(W, P), F.state = function() {
          return g(P, {});
        }), z ? (r[u] = F, T) : F;
      })(R, A, "global" in S ? S.global : this == r, S.state);
    }
    function m(k) {
      var S, $ = k.length, E = this, A = 0, P = E.i = E.j = 0, R = E.S = [];
      for ($ || (k = [$++]); A < a; )
        R[A] = A++;
      for (A = 0; A < a; A++)
        R[A] = R[P = d & P + k[A % $] + (S = R[A])], R[P] = S;
      (E.g = function(F) {
        for (var T, z = 0, W = E.i, q = E.j, K = E.S; F--; )
          T = K[W = d & W + 1], z = z * a + K[d & (K[W] = K[q = d & q + T]) + (K[q] = T)];
        return E.i = W, E.j = q, z;
      })(a);
    }
    function g(k, S) {
      return S.i = k.i, S.j = k.j, S.S = k.S.slice(), S;
    }
    function b(k, S) {
      var $ = [], E = typeof k, A;
      if (S && E == "object")
        for (A in k)
          try {
            $.push(b(k[A], S - 1));
          } catch (P) {
          }
      return $.length ? $ : E == "string" ? k : k + "\0";
    }
    function y(k, S) {
      for (var $ = k + "", E, A = 0; A < $.length; )
        S[d & A] = d & (E ^= S[d & A] * 19) + $.charCodeAt(A++);
      return x(S);
    }
    function v() {
      try {
        var k;
        return h && (k = h.randomBytes) ? k = k(a) : (k = new Uint8Array(a), (n.crypto || n.msCrypto).getRandomValues(k)), x(k);
      } catch (E) {
        var S = n.navigator, $ = S && S.plugins;
        return [+new Date(), n, $, n.screen, x(s)];
      }
    }
    function x(k) {
      return String.fromCharCode.apply(0, k);
    }
    if (y(r.random(), s), typeof t == "object" && t.exports) {
      t.exports = f;
      try {
        h = a$();
      } catch (k) {
      }
    } else
      typeof define == "function" && define.amd ? define(function() {
        return f;
      }) : r["seed" + u] = f;
  })(typeof self != "undefined" ? self : e, [], Math);
} });
var Gd = zt({ "src/node_modules/seedrandom/index.js"(e, t) {
  var n = JT(), s = e$(), r = t$(), a = n$(), i = s$(), o = r$(), u = i$();
  u.alea = n, u.xor128 = s, u.xorwow = r, u.xorshift7 = a, u.xor4096 = i, u.tychei = o, t.exports = u;
} });
var jw = zt({ "(disabled):src/node_modules/string_decoder/index.js"() {
} });
var sg = zt({ "(disabled):fs"() {
} });
var dd = zt({ "(disabled):path"() {
} });
var o$ = zt({ "(disabled):worker_threads"() {
} });
var u$ = zt({ "(disabled):perf_hooks"() {
} });
var l$ = zt({ "(disabled):os"() {
} });
var c$ = zt({ "src/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm-threaded-simd.js"(e, t) {
  var n = (() => {
    var s = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0;
    return typeof __filename != "undefined" && (s = s || __filename), function(r) {
      r = r || {};
      function a() {
        return Ce.buffer != tn && rs(Ce.buffer), ic;
      }
      function i() {
        return Ce.buffer != tn && rs(Ce.buffer), oc;
      }
      function o() {
        return Ce.buffer != tn && rs(Ce.buffer), fu;
      }
      function u() {
        return Ce.buffer != tn && rs(Ce.buffer), uc;
      }
      function l() {
        return Ce.buffer != tn && rs(Ce.buffer), lc;
      }
      function c() {
        return Ce.buffer != tn && rs(Ce.buffer), cc;
      }
      function p() {
        return Ce.buffer != tn && rs(Ce.buffer), dc;
      }
      var d = typeof r != "undefined" ? r : {}, h, f;
      d.ready = new Promise(function(N, D) {
        h = N, f = D;
      });
      var m;
      typeof process != "undefined" && process.listeners && (m = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") });
      var g = Object.assign({}, d), b = [], y = "./this.program", v = (N, D) => {
        throw D;
      }, x = typeof window == "object", k = typeof importScripts == "function", S = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", $ = d.ENVIRONMENT_IS_PTHREAD || false, E = "";
      function A(N) {
        return d.locateFile ? d.locateFile(N, E) : E + N;
      }
      var P, R, F, T;
      function z(N) {
        if (N instanceof Iu)
          return;
        ee("exiting due to exception: " + N);
      }
      var W, q, K;
      if (S) {
        k ? E = dd().dirname(E) + "/" : E = __dirname + "/", K = () => {
          q || (W = sg(), q = dd());
        }, P = function(B, Q) {
          return K(), B = q.normalize(B), W.readFileSync(B, Q ? void 0 : "utf8");
        }, F = (D) => {
          var B = P(D, true);
          return B.buffer || (B = new Uint8Array(B)), B;
        }, R = (D, B, Q) => {
          K(), D = q.normalize(D), W.readFile(D, function(ue, pe) {
            ue ? Q(ue) : B(pe.buffer);
          });
        }, process.argv.length > 1 && (y = process.argv[1].replace(/\\/g, "/")), b = process.argv.slice(2), process.on("uncaughtException", function(D) {
          if (!(D instanceof Iu))
            throw D;
        }), process.on("unhandledRejection", function(D) {
          throw D;
        }), v = (D, B) => {
          if (zr())
            throw process.exitCode = D, B;
          z(B), process.exit(D);
        }, d.inspect = function() {
          return "[Emscripten Module object]";
        };
        let N;
        try {
          N = o$();
        } catch (D) {
          throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), D;
        }
        global.Worker = N.Worker;
      } else
        (x || k) && (k ? E = self.location.href : typeof document != "undefined" && document.currentScript && (E = document.currentScript.src), typeof s != "undefined" && s && (E = s), E.indexOf("blob:") !== 0 ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", S || (P = (N) => {
          var D = new XMLHttpRequest();
          return D.open("GET", N, false), D.send(null), D.responseText;
        }, k && (F = (N) => {
          var D = new XMLHttpRequest();
          return D.open("GET", N, false), D.responseType = "arraybuffer", D.send(null), new Uint8Array(D.response);
        }), R = (N, D, B) => {
          var Q = new XMLHttpRequest();
          Q.open("GET", N, true), Q.responseType = "arraybuffer", Q.onload = () => {
            if (Q.status == 200 || Q.status == 0 && Q.response) {
              D(Q.response);
              return;
            }
            B();
          }, Q.onerror = B, Q.send(null);
        }), T = (N) => document.title = N);
      S && typeof performance == "undefined" && (global.performance = u$().performance);
      var Y = console.log.bind(console), Z = console.warn.bind(console);
      S && (K(), Y = (N) => W.writeSync(1, N + `
`), Z = (N) => W.writeSync(2, N + `
`));
      var te = d.print || Y, ee = d.printErr || Z;
      Object.assign(d, g), g = null, d.arguments && (b = d.arguments), d.thisProgram && (y = d.thisProgram), d.quit && (v = d.quit);
      var se = 4;
      function ne(N) {
        ne.shown || (ne.shown = {}), ne.shown[N] || (ne.shown[N] = 1, ee(N));
      }
      function oe(N, D) {
        if (typeof WebAssembly.Function == "function") {
          for (var B = { i: "i32", j: "i64", f: "f32", d: "f64" }, Q = { parameters: [], results: D[0] == "v" ? [] : [B[D[0]]] }, ue = 1; ue < D.length; ++ue)
            Q.parameters.push(B[D[ue]]);
          return new WebAssembly.Function(Q, N);
        }
        var pe = [1, 0, 1, 96], ye = D.slice(0, 1), Te = D.slice(1), bt = { i: 127, j: 126, f: 125, d: 124 };
        pe.push(Te.length);
        for (var ue = 0; ue < Te.length; ++ue)
          pe.push(bt[Te[ue]]);
        ye == "v" ? pe.push(0) : pe = pe.concat([1, bt[ye]]), pe[1] = pe.length - 2;
        var us = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0].concat(pe, [2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0])), ls = new WebAssembly.Module(us), Bc = new WebAssembly.Instance(ls, { e: { f: N } }), Su = Bc.exports.f;
        return Su;
      }
      var re = [], le;
      function me() {
        if (re.length)
          return re.pop();
        try {
          Fn.grow(1);
        } catch (N) {
          throw N instanceof RangeError ? "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH." : N;
        }
        return Fn.length - 1;
      }
      function ke(N, D) {
        for (var B = N; B < N + D; B++) {
          var Q = Ai(B);
          Q && le.set(Q, B);
        }
      }
      var Se = 0, Ee = (N) => {
        Se = N;
      }, Pe = Atomics.load, Xe = Atomics.store, Je = Atomics.compareExchange, Ye;
      d.wasmBinary && (Ye = d.wasmBinary);
      var tt = d.noExitRuntime || true;
      typeof WebAssembly != "object" && Ti("no native wasm support detected");
      var Ce, ut, rt = false, Zt;
      function Nt(N, D) {
        N || Ti(D);
      }
      function Sn(N) {
        var D = d["_" + N];
        return D;
      }
      function Et(N, D, B, Q, ue) {
        var pe = { string: function(Tn) {
          var zi = 0;
          if (Tn != null && Tn !== 0) {
            var nx = (Tn.length << 2) + 1;
            zi = Pi(nx), Ls(Tn, zi, nx);
          }
          return zi;
        }, array: function(Tn) {
          var zi = Pi(Tn.length);
          return Bs(Tn, zi), zi;
        } };
        function ye(Tn) {
          return D === "string" ? en(Tn) : D === "boolean" ? Boolean(Tn) : Tn;
        }
        var Te = Sn(N), bt = [], us = 0;
        if (Q)
          for (var ls = 0; ls < Q.length; ls++) {
            var Bc = pe[B[ls]];
            Bc ? (us === 0 && (us = Df()), bt[ls] = Bc(Q[ls])) : bt[ls] = Q[ls];
          }
        var Su = Te.apply(null, bt);
        function UT(Tn) {
          return us !== 0 && Pc(us), ye(Tn);
        }
        return Su = UT(Su), Su;
      }
      function Jt(N, D, B, Q) {
        B = B || [];
        var ue = B.every(function(ye) {
          return ye === "number";
        }), pe = D !== "string";
        return pe && ue && !Q ? Sn(N) : function() {
          return Et(N, D, B, arguments, Q);
        };
      }
      var Cn = 1;
      function Nn(N) {
        var D = new TextDecoder(N);
        this.decode = (B) => (B.buffer instanceof SharedArrayBuffer && (B = new Uint8Array(B)), D.decode.call(D, B));
      }
      var Xt = typeof TextDecoder != "undefined" ? new Nn("utf8") : void 0;
      function Dn(N, D, B) {
        for (var Q = D + B, ue = D; N[ue] && !(ue >= Q); )
          ++ue;
        if (ue - D > 16 && N.subarray && Xt)
          return Xt.decode(N.subarray(D, ue));
        for (var pe = ""; D < ue; ) {
          var ye = N[D++];
          if (!(ye & 128)) {
            pe += String.fromCharCode(ye);
            continue;
          }
          var Te = N[D++] & 63;
          if ((ye & 224) == 192) {
            pe += String.fromCharCode((ye & 31) << 6 | Te);
            continue;
          }
          var bt = N[D++] & 63;
          if ((ye & 240) == 224 ? ye = (ye & 15) << 12 | Te << 6 | bt : ye = (ye & 7) << 18 | Te << 12 | bt << 6 | N[D++] & 63, ye < 65536)
            pe += String.fromCharCode(ye);
          else {
            var us = ye - 65536;
            pe += String.fromCharCode(55296 | us >> 10, 56320 | us & 1023);
          }
        }
        return pe;
      }
      function en(N, D) {
        return N ? Dn(i(), N, D) : "";
      }
      function Ms(N, D, B, Q) {
        if (!(Q > 0))
          return 0;
        for (var ue = B, pe = B + Q - 1, ye = 0; ye < N.length; ++ye) {
          var Te = N.charCodeAt(ye);
          if (Te >= 55296 && Te <= 57343) {
            var bt = N.charCodeAt(++ye);
            Te = 65536 + ((Te & 1023) << 10) | bt & 1023;
          }
          if (Te <= 127) {
            if (B >= pe)
              break;
            D[B++] = Te;
          } else if (Te <= 2047) {
            if (B + 1 >= pe)
              break;
            D[B++] = 192 | Te >> 6, D[B++] = 128 | Te & 63;
          } else if (Te <= 65535) {
            if (B + 2 >= pe)
              break;
            D[B++] = 224 | Te >> 12, D[B++] = 128 | Te >> 6 & 63, D[B++] = 128 | Te & 63;
          } else {
            if (B + 3 >= pe)
              break;
            D[B++] = 240 | Te >> 18, D[B++] = 128 | Te >> 12 & 63, D[B++] = 128 | Te >> 6 & 63, D[B++] = 128 | Te & 63;
          }
        }
        return D[B] = 0, B - ue;
      }
      function Ls(N, D, B) {
        return Ms(N, i(), D, B);
      }
      function Si(N) {
        for (var D = 0, B = 0; B < N.length; ++B) {
          var Q = N.charCodeAt(B);
          Q >= 55296 && Q <= 57343 && (Q = 65536 + ((Q & 1023) << 10) | N.charCodeAt(++B) & 1023), Q <= 127 ? ++D : Q <= 2047 ? D += 2 : Q <= 65535 ? D += 3 : D += 4;
        }
        return D;
      }
      var er = typeof TextDecoder != "undefined" ? new Nn("utf-16le") : void 0;
      function Bs(N, D) {
        a().set(N, D);
      }
      function hu(N, D, B) {
        for (var Q = 0; Q < N.length; ++Q)
          a()[D++ >> 0] = N.charCodeAt(Q);
        B || (a()[D >> 0] = 0);
      }
      function Ci(N, D) {
        return N % D > 0 && (N += D - N % D), N;
      }
      var tn, ic, oc, fu, uc, lc, Pv, cc, dc;
      $ && (tn = d.buffer);
      function rs(N) {
        tn = N, d.HEAP8 = ic = new Int8Array(N), d.HEAP16 = fu = new Int16Array(N), d.HEAP32 = lc = new Int32Array(N), d.HEAPU8 = oc = new Uint8Array(N), d.HEAPU16 = uc = new Uint16Array(N), d.HEAPU32 = Pv = new Uint32Array(N), d.HEAPF32 = cc = new Float32Array(N), d.HEAPF64 = dc = new Float64Array(N);
      }
      var pc = d.INITIAL_MEMORY || 16777216;
      if ($)
        Ce = d.wasmMemory, tn = d.buffer;
      else if (d.wasmMemory)
        Ce = d.wasmMemory;
      else if (Ce = new WebAssembly.Memory({ initial: pc / 65536, maximum: 32768, shared: true }), !(Ce.buffer instanceof SharedArrayBuffer))
        throw ee("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), S && console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"), Error("bad memory");
      Ce && (tn = Ce.buffer), pc = tn.byteLength, rs(tn);
      var Fn, Ni = [], tr = [], sh = [], hc = [], Pr = false, rh = false, fc = 0;
      function zr() {
        return tt || fc > 0;
      }
      function nn() {
        if (d.preRun)
          for (typeof d.preRun == "function" && (d.preRun = [d.preRun]); d.preRun.length; )
            zv(d.preRun.shift());
        vc(Ni);
      }
      function mu() {
        Pr = true, !$ && vc(tr);
      }
      function ah() {
        $ || (_e.terminateAllThreads(), rh = true);
      }
      function ih() {
        if (!$) {
          if (d.postRun)
            for (typeof d.postRun == "function" && (d.postRun = [d.postRun]); d.postRun.length; )
              gu(d.postRun.shift());
          vc(hc);
        }
      }
      function zv(N) {
        Ni.unshift(N);
      }
      function Mv(N) {
        tr.unshift(N);
      }
      function gu(N) {
        hc.unshift(N);
      }
      var nr = 0, mc = null, as = null;
      function bu(N) {
        nr++, d.monitorRunDependencies && d.monitorRunDependencies(nr);
      }
      function Lv(N) {
        if (nr--, d.monitorRunDependencies && d.monitorRunDependencies(nr), nr == 0 && (mc !== null && (clearInterval(mc), mc = null), as)) {
          var D = as;
          as = null, D();
        }
      }
      d.preloadedImages = {}, d.preloadedAudios = {};
      function Ti(N) {
        $ ? postMessage({ cmd: "onAbort", arg: N }) : d.onAbort && d.onAbort(N), N = "Aborted(" + N + ")", ee(N), rt = true, Zt = 1, N += ". Build with -s ASSERTIONS=1 for more info.";
        var D = new WebAssembly.RuntimeError(N);
        throw f(D), D;
      }
      var oh = "data:application/octet-stream;base64,";
      function gc(N) {
        return N.startsWith(oh);
      }
      function bc(N) {
        return N.startsWith("file://");
      }
      var sn;
      sn = "tfjs-backend-wasm-threaded-simd.wasm", gc(sn) || (sn = A(sn));
      function yc(N) {
        try {
          if (N == sn && Ye)
            return new Uint8Array(Ye);
          if (F)
            return F(N);
          throw "both async and sync fetching of the wasm failed";
        } catch (D) {
          Ti(D);
        }
      }
      function $i() {
        if (!Ye && (x || k)) {
          if (typeof fetch == "function" && !bc(sn))
            return fetch(sn, { credentials: "same-origin" }).then(function(N) {
              if (!N.ok)
                throw "failed to load wasm binary file at '" + sn + "'";
              return N.arrayBuffer();
            }).catch(function() {
              return yc(sn);
            });
          if (R)
            return new Promise(function(N, D) {
              R(sn, function(B) {
                N(new Uint8Array(B));
              }, D);
            });
        }
        return Promise.resolve().then(function() {
          return yc(sn);
        });
      }
      function uh() {
        var N = { env: Ec, wasi_snapshot_preview1: Ec };
        function D(ye, Te) {
          var bt = ye.exports;
          if (d.asm = bt, mh(d.asm.emscripten_tls_init), Fn = d.asm.__indirect_function_table, Mv(d.asm.__wasm_call_ctors), ut = Te, !$) {
            var us = _e.unusedWorkers.length;
            _e.unusedWorkers.forEach(function(ls) {
              _e.loadWasmModuleToWorker(ls, function() {
                --us || Lv("wasm-instantiate");
              });
            });
          }
        }
        $ || bu("wasm-instantiate");
        function B(ye) {
          D(ye.instance, ye.module);
        }
        function Q(ye) {
          return $i().then(function(Te) {
            return WebAssembly.instantiate(Te, N);
          }).then(function(Te) {
            return Te;
          }).then(ye, function(Te) {
            ee("failed to asynchronously prepare wasm: " + Te), Ti(Te);
          });
        }
        function ue() {
          return !Ye && typeof WebAssembly.instantiateStreaming == "function" && !gc(sn) && !bc(sn) && typeof fetch == "function" ? fetch(sn, { credentials: "same-origin" }).then(function(ye) {
            var Te = WebAssembly.instantiateStreaming(ye, N);
            return Te.then(B, function(bt) {
              return ee("wasm streaming compile failed: " + bt), ee("falling back to ArrayBuffer instantiation"), Q(B);
            });
          }) : Q(B);
        }
        if (d.instantiateWasm)
          try {
            var pe = d.instantiateWasm(N, D);
            return pe;
          } catch (ye) {
            return ee("Module.instantiateWasm callback failed with error: " + ye), false;
          }
        return ue().catch(f), {};
      }
      var Bv, Vv, lh = {};
      function vc(N) {
        for (; N.length > 0; ) {
          var D = N.shift();
          if (typeof D == "function") {
            D(d);
            continue;
          }
          var B = D.func;
          typeof B == "number" ? D.arg === void 0 ? Ai(B)() : Ai(B)(D.arg) : B(D.arg === void 0 ? null : D.arg);
        }
      }
      function _i(N) {
        var D = Df(), B = N();
        return Pc(D), B;
      }
      function QN(N) {
        return N;
      }
      function Wv(N) {
        var D = /\b_Z[\w\d_]+/g;
        return N.replace(D, function(B) {
          var Q = B;
          return B === Q ? B : Q + " [" + B + "]";
        });
      }
      function ch(N) {
        l()[N >> 2] = 0;
        var D = _e.pthreads[N];
        delete _e.pthreads[N], D.worker.terminate(), Rf(N), _e.runningWorkers.splice(_e.runningWorkers.indexOf(D.worker), 1), D.worker.pthread = void 0;
      }
      function dh(N) {
        var D = _e.pthreads[N];
        D.worker.postMessage({ cmd: "cancel" });
      }
      function xc(N) {
        var D = _e.pthreads[N];
        if (D) {
          l()[N >> 2] = 0;
          var B = D.worker;
          _e.returnWorkerToPool(B);
        }
      }
      function wc(N) {
        BT(N);
      }
      function ph(N) {
        if (N instanceof Iu || N == "unwind")
          return Zt;
        v(1, N);
      }
      var _e = { unusedWorkers: [], runningWorkers: [], tlsInitFunctions: [], init: function() {
        $ ? _e.initWorker() : _e.initMainThread();
      }, initMainThread: function() {
        for (var N = 8, D = 0; D < N; ++D)
          _e.allocateUnusedWorker();
      }, initWorker: function() {
        tt = false;
      }, pthreads: {}, setExitStatus: function(N) {
        Zt = N;
      }, terminateAllThreads: function() {
        for (var N in _e.pthreads) {
          var D = _e.pthreads[N];
          D && D.worker && _e.returnWorkerToPool(D.worker);
        }
        for (var B = 0; B < _e.unusedWorkers.length; ++B) {
          var Q = _e.unusedWorkers[B];
          Q.terminate();
        }
        _e.unusedWorkers = [];
      }, returnWorkerToPool: function(N) {
        _e.runWithoutMainThreadQueuedCalls(function() {
          delete _e.pthreads[N.pthread.threadInfoStruct], _e.unusedWorkers.push(N), _e.runningWorkers.splice(_e.runningWorkers.indexOf(N), 1), Rf(N.pthread.threadInfoStruct), N.pthread = void 0;
        });
      }, runWithoutMainThreadQueuedCalls: function(N) {
        l()[tx >> 2] = 0;
        try {
          N();
        } finally {
          l()[tx >> 2] = 1;
        }
      }, receiveObjectTransfer: function(N) {
      }, threadInit: function() {
        for (var N in _e.tlsInitFunctions)
          _e.tlsInitFunctions[N]();
      }, loadWasmModuleToWorker: function(N, D) {
        N.onmessage = (B) => {
          var Q = B.data, ue = Q.cmd;
          if (N.pthread && (_e.currentProxiedOperationCallerThread = N.pthread.threadInfoStruct), Q.targetThread && Q.targetThread != Oc()) {
            var pe = _e.pthreads[Q.targetThread];
            pe ? pe.worker.postMessage(Q, Q.transferList) : ee('Internal error! Worker sent a message "' + ue + '" to target pthread ' + Q.targetThread + ", but that thread no longer exists!"), _e.currentProxiedOperationCallerThread = void 0;
            return;
          }
          ue === "processQueuedMainThreadWork" ? Yv() : ue === "spawnThread" ? Ic(Q) : ue === "cleanupThread" ? xc(Q.thread) : ue === "killThread" ? ch(Q.thread) : ue === "cancelThread" ? dh(Q.thread) : ue === "loaded" ? (N.loaded = true, D && D(N), N.runPthread && (N.runPthread(), delete N.runPthread)) : ue === "print" ? te("Thread " + Q.threadId + ": " + Q.text) : ue === "printErr" ? ee("Thread " + Q.threadId + ": " + Q.text) : ue === "alert" ? alert("Thread " + Q.threadId + ": " + Q.text) : Q.target === "setimmediate" ? N.postMessage(Q) : ue === "onAbort" ? d.onAbort && d.onAbort(Q.arg) : ee("worker sent an unknown command " + ue), _e.currentProxiedOperationCallerThread = void 0;
        }, N.onerror = (B) => {
          var Q = "worker sent an error!";
          throw ee(Q + " " + B.filename + ":" + B.lineno + ": " + B.message), B;
        }, S && (N.on("message", function(B) {
          N.onmessage({ data: B });
        }), N.on("error", function(B) {
          N.onerror(B);
        }), N.on("detachedExit", function() {
        })), N.postMessage({ cmd: "load", urlOrBlob: d.mainScriptUrlOrBlob || s, wasmMemory: Ce, wasmModule: ut });
      }, allocateUnusedWorker: function() {
        var N = A("tfjs-backend-wasm-threaded-simd.worker.js");
        _e.unusedWorkers.push(new Worker(N));
      }, getNewWorker: function() {
        return _e.unusedWorkers.length == 0 && (_e.allocateUnusedWorker(), _e.loadWasmModuleToWorker(_e.unusedWorkers[0])), _e.unusedWorkers.pop();
      } };
      function hh() {
        var N = Oc(), D = l()[N + 44 >> 2], B = l()[N + 48 >> 2], Q = D - B;
        ex(D, Q), Pc(D);
      }
      d.establishStackSpace = hh;
      function kc(N) {
        if ($)
          return Br(1, 0, N);
        try {
          wc(N);
        } catch (D) {
          ph(D);
        }
      }
      var Mr = [];
      function Ai(N) {
        var D = Mr[N];
        return D || (N >= Mr.length && (Mr.length = N + 1), Mr[N] = D = Fn.get(N)), D;
      }
      function fh(N, D) {
        return Ai(N)(D);
      }
      d.invokeEntryPoint = fh;
      function Uv() {
        var N = new Error();
        if (!N.stack) {
          try {
            throw new Error();
          } catch (D) {
            N = D;
          }
          if (!N.stack)
            return "(no stack trace available)";
        }
        return N.stack.toString();
      }
      function mh(N, D, B) {
        _e.tlsInitFunctions.push(N);
      }
      function Gv(N, D) {
        Fn.set(N, D), Mr[N] = D;
      }
      var Lr;
      S ? Lr = () => {
        var N = process.hrtime();
        return N[0] * 1e3 + N[1] / 1e6;
      } : $ ? Lr = () => performance.now() - d.__performance_now_clock_drift : Lr = () => performance.now();
      var gh = true;
      function bh(N) {
        return l()[Xv() >> 2] = N, N;
      }
      function yh(N, D) {
        var B;
        if (N === 0)
          B = Date.now();
        else if ((N === 1 || N === 4) && gh)
          B = Lr();
        else
          return bh(28), -1;
        return l()[D >> 2] = B / 1e3 | 0, l()[D + 4 >> 2] = B % 1e3 * 1e3 * 1e3 | 0, 0;
      }
      function vh(N, D) {
        return yh(N, D);
      }
      function xh(N) {
        Qv(N, !k, 1, !x), _e.threadInit();
      }
      function wh(N) {
        $ ? postMessage({ cmd: "cleanupThread", thread: N }) : xc(N);
      }
      function Ic(N) {
        var D = _e.getNewWorker();
        if (!D)
          return 6;
        _e.runningWorkers.push(D);
        var B = _e.pthreads[N.pthread_ptr] = { worker: D, threadInfoStruct: N.pthread_ptr };
        D.pthread = B;
        var Q = { cmd: "run", start_routine: N.startRoutine, arg: N.arg, threadInfoStruct: N.pthread_ptr };
        return D.runPthread = () => {
          Q.time = performance.now(), D.postMessage(Q, N.transferList);
        }, D.loaded && (D.runPthread(), delete D.runPthread), 0;
      }
      function kh(N, D, B, Q) {
        if (typeof SharedArrayBuffer == "undefined")
          return ee("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
        var ue = [], pe = 0;
        if ($ && (ue.length === 0 || pe))
          return Zv(687865856, N, D, B, Q);
        if (pe)
          return pe;
        var ye = { startRoutine: B, pthread_ptr: N, arg: Q, transferList: ue };
        return $ ? (ye.cmd = "spawnThread", postMessage(ye, ue), 0) : Ic(ye);
      }
      function Ih() {
        return 2097152;
      }
      function Sh(N, D) {
        if (N == D)
          postMessage({ cmd: "processQueuedMainThreadWork" });
        else if ($)
          postMessage({ targetThread: N, cmd: "processThreadQueue" });
        else {
          var B = _e.pthreads[N], Q = B && B.worker;
          if (!Q)
            return;
          Q.postMessage({ cmd: "processThreadQueue" });
        }
        return 1;
      }
      function Ch() {
        Ti("");
      }
      function Nh() {
        S || k || ne("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread");
      }
      function Sc() {
        return 2147483648;
      }
      function Th(N, D, B) {
        i().copyWithin(N, D, D + B);
      }
      function $h() {
        return S ? l$().cpus().length : navigator.hardwareConcurrency;
      }
      function Br(N, D) {
        var B = arguments.length - 2, Q = arguments;
        return _i(function() {
          for (var ue = B, pe = Pi(ue * 8), ye = pe >> 3, Te = 0; Te < B; Te++) {
            var bt = Q[2 + Te];
            p()[ye + Te] = bt;
          }
          return Jv(N, ue, pe, D);
        });
      }
      var yu = [];
      function _h(N, D, B) {
        yu.length = D;
        for (var Q = B >> 3, ue = 0; ue < D; ue++)
          yu[ue] = p()[Q + ue];
        var pe = N < 0, ye = pe ? lh[-N - 1] : Kh[N];
        return ye.apply(null, yu);
      }
      function Ah(N) {
        try {
          return Ce.grow(N - tn.byteLength + 65535 >>> 16), rs(Ce.buffer), 1;
        } catch (D) {
        }
      }
      function Eh(N) {
        var D = i().length;
        if (N = N >>> 0, N <= D)
          return false;
        var B = Sc();
        if (N > B)
          return false;
        for (var Q = 1; Q <= 4; Q *= 2) {
          var ue = D * (1 + 0.2 / Q);
          ue = Math.min(ue, N + 100663296);
          var pe = Math.min(B, Ci(Math.max(N, ue), 65536)), ye = Ah(pe);
          if (ye)
            return true;
        }
        return false;
      }
      var Be = { inEventHandler: 0, removeAllEventListeners: function() {
        for (var N = Be.eventHandlers.length - 1; N >= 0; --N)
          Be._removeHandler(N);
        Be.eventHandlers = [], Be.deferredCalls = [];
      }, registerRemoveEventListeners: function() {
        Be.removeEventListenersRegistered || (sh.push(Be.removeAllEventListeners), Be.removeEventListenersRegistered = true);
      }, deferredCalls: [], deferCall: function(N, D, B) {
        function Q(ye, Te) {
          if (ye.length != Te.length)
            return false;
          for (var bt in ye)
            if (ye[bt] != Te[bt])
              return false;
          return true;
        }
        for (var ue in Be.deferredCalls) {
          var pe = Be.deferredCalls[ue];
          if (pe.targetFunction == N && Q(pe.argsList, B))
            return;
        }
        Be.deferredCalls.push({ targetFunction: N, precedence: D, argsList: B }), Be.deferredCalls.sort(function(ye, Te) {
          return ye.precedence < Te.precedence;
        });
      }, removeDeferredCalls: function(N) {
        for (var D = 0; D < Be.deferredCalls.length; ++D)
          Be.deferredCalls[D].targetFunction == N && (Be.deferredCalls.splice(D, 1), --D);
      }, canPerformEventHandlerRequests: function() {
        return Be.inEventHandler && Be.currentEventHandler.allowsDeferredCalls;
      }, runDeferredCalls: function() {
        if (!!Be.canPerformEventHandlerRequests())
          for (var N = 0; N < Be.deferredCalls.length; ++N) {
            var D = Be.deferredCalls[N];
            Be.deferredCalls.splice(N, 1), --N, D.targetFunction.apply(null, D.argsList);
          }
      }, eventHandlers: [], removeAllHandlersOnTarget: function(N, D) {
        for (var B = 0; B < Be.eventHandlers.length; ++B)
          Be.eventHandlers[B].target == N && (!D || D == Be.eventHandlers[B].eventTypeString) && Be._removeHandler(B--);
      }, _removeHandler: function(N) {
        var D = Be.eventHandlers[N];
        D.target.removeEventListener(D.eventTypeString, D.eventListenerFunc, D.useCapture), Be.eventHandlers.splice(N, 1);
      }, registerOrRemoveHandler: function(N) {
        var D = function(ue) {
          ++Be.inEventHandler, Be.currentEventHandler = N, Be.runDeferredCalls(), N.handlerFunc(ue), Be.runDeferredCalls(), --Be.inEventHandler;
        };
        if (N.callbackfunc)
          N.eventListenerFunc = D, N.target.addEventListener(N.eventTypeString, D, N.useCapture), Be.eventHandlers.push(N), Be.registerRemoveEventListeners();
        else
          for (var B = 0; B < Be.eventHandlers.length; ++B)
            Be.eventHandlers[B].target == N.target && Be.eventHandlers[B].eventTypeString == N.eventTypeString && Be._removeHandler(B--);
      }, queueEventHandlerOnThread_iiii: function(N, D, B, Q, ue) {
        _i(function() {
          var pe = Pi(12);
          l()[pe >> 2] = B, l()[pe + 4 >> 2] = Q, l()[pe + 8 >> 2] = ue, Ef(N, 637534208, D, Q, pe);
        });
      }, getTargetThreadForEventCallback: function(N) {
        switch (N) {
          case 1:
            return 0;
          case 2:
            return _e.currentProxiedOperationCallerThread;
          default:
            return N;
        }
      }, getNodeNameForTarget: function(N) {
        return N ? N == window ? "#window" : N == screen ? "#screen" : N && N.nodeName ? N.nodeName : "" : "";
      }, fullscreenEnabled: function() {
        return document.fullscreenEnabled || document.webkitFullscreenEnabled;
      } };
      function Rh(N) {
        var D = Si(N) + 1, B = Af(D);
        return Ls(N, B, D), B;
      }
      function Dh(N, D, B, Q) {
        _i(function() {
          var ue = Pi(12), pe = 0;
          D && (pe = Rh(D)), l()[ue >> 2] = pe, l()[ue + 4 >> 2] = B, l()[ue + 8 >> 2] = Q, Ef(N, 657457152, 0, pe, ue);
        });
      }
      function Fh(N, D, B, Q) {
        D = D ? en(D) : "", Dh(N, D, B, Q);
      }
      function Oh(N) {
        return N > 2 ? en(N) : N;
      }
      var Ph = [0, typeof document != "undefined" ? document : 0, typeof window != "undefined" ? window : 0];
      function zh(N) {
        N = Oh(N);
        var D = Ph[N] || (typeof document != "undefined" ? document.querySelector(N) : void 0);
        return D;
      }
      function vu(N) {
        return zh(N);
      }
      function Cc(N, D, B) {
        var Q = vu(N);
        if (!Q)
          return -4;
        if (Q.canvasSharedPtr && (l()[Q.canvasSharedPtr >> 2] = D, l()[Q.canvasSharedPtr + 4 >> 2] = B), Q.offscreenCanvas || !Q.controlTransferredOffscreen) {
          Q.offscreenCanvas && (Q = Q.offscreenCanvas);
          var ue = false;
          if (Q.GLctxObject && Q.GLctxObject.GLctx) {
            var pe = Q.GLctxObject.GLctx.getParameter(2978);
            ue = pe[0] === 0 && pe[1] === 0 && pe[2] === Q.width && pe[3] === Q.height;
          }
          Q.width = D, Q.height = B, ue && Q.GLctxObject.GLctx.viewport(0, 0, D, B);
        } else if (Q.canvasSharedPtr) {
          var ye = l()[Q.canvasSharedPtr + 8 >> 2];
          return Fh(ye, N, D, B), 1;
        } else
          return -4;
        return 0;
      }
      function Nc(N, D, B) {
        return $ ? Br(2, 1, N, D, B) : Cc(N, D, B);
      }
      function Mh(N, D, B) {
        var Q = vu(N);
        return Q ? Cc(N, D, B) : Nc(N, D, B);
      }
      function Lh() {
        throw "unwind";
      }
      function Bh(N) {
        var D = N.getExtension("ANGLE_instanced_arrays");
        if (D)
          return N.vertexAttribDivisor = function(B, Q) {
            D.vertexAttribDivisorANGLE(B, Q);
          }, N.drawArraysInstanced = function(B, Q, ue, pe) {
            D.drawArraysInstancedANGLE(B, Q, ue, pe);
          }, N.drawElementsInstanced = function(B, Q, ue, pe, ye) {
            D.drawElementsInstancedANGLE(B, Q, ue, pe, ye);
          }, 1;
      }
      function Vh(N) {
        var D = N.getExtension("OES_vertex_array_object");
        if (D)
          return N.createVertexArray = function() {
            return D.createVertexArrayOES();
          }, N.deleteVertexArray = function(B) {
            D.deleteVertexArrayOES(B);
          }, N.bindVertexArray = function(B) {
            D.bindVertexArrayOES(B);
          }, N.isVertexArray = function(B) {
            return D.isVertexArrayOES(B);
          }, 1;
      }
      function Wh(N) {
        var D = N.getExtension("WEBGL_draw_buffers");
        if (D)
          return N.drawBuffers = function(B, Q) {
            D.drawBuffersWEBGL(B, Q);
          }, 1;
      }
      function Uh(N) {
        return !!(N.multiDrawWebgl = N.getExtension("WEBGL_multi_draw"));
      }
      var gt = { counter: 1, buffers: [], programs: [], framebuffers: [], renderbuffers: [], textures: [], shaders: [], vaos: [], contexts: {}, offscreenCanvases: {}, queries: [], stringCache: {}, unpackAlignment: 4, recordError: function(D) {
        gt.lastError || (gt.lastError = D);
      }, getNewId: function(N) {
        for (var D = gt.counter++, B = N.length; B < D; B++)
          N[B] = null;
        return D;
      }, getSource: function(N, D, B, Q) {
        for (var ue = "", pe = 0; pe < D; ++pe) {
          var ye = Q ? l()[Q + pe * 4 >> 2] : -1;
          ue += en(l()[B + pe * 4 >> 2], ye < 0 ? void 0 : ye);
        }
        return ue;
      }, createContext: function(N, D) {
        N.getContextSafariWebGL2Fixed || (N.getContextSafariWebGL2Fixed = N.getContext, N.getContext = function(ue, pe) {
          var ye = N.getContextSafariWebGL2Fixed(ue, pe);
          return ue == "webgl" == ye instanceof WebGLRenderingContext ? ye : null;
        });
        var B = N.getContext("webgl", D);
        if (!B)
          return 0;
        var Q = gt.registerContext(B, D);
        return Q;
      }, registerContext: function(N, D) {
        var B = Af(8);
        l()[B + 4 >> 2] = Oc();
        var Q = { handle: B, attributes: D, version: D.majorVersion, GLctx: N };
        return N.canvas && (N.canvas.GLctxObject = Q), gt.contexts[B] = Q, (typeof D.enableExtensionsByDefault == "undefined" || D.enableExtensionsByDefault) && gt.initExtensions(Q), B;
      }, makeContextCurrent: function(N) {
        return gt.currentContext = gt.contexts[N], d.ctx = Ac = gt.currentContext && gt.currentContext.GLctx, !(N && !Ac);
      }, getContext: function(N) {
        return gt.contexts[N];
      }, deleteContext: function(N) {
        gt.currentContext === gt.contexts[N] && (gt.currentContext = null), typeof Be == "object" && Be.removeAllHandlersOnTarget(gt.contexts[N].GLctx.canvas), gt.contexts[N] && gt.contexts[N].GLctx.canvas && (gt.contexts[N].GLctx.canvas.GLctxObject = void 0), Kv(gt.contexts[N].handle), gt.contexts[N] = null;
      }, initExtensions: function(N) {
        if (N || (N = gt.currentContext), !N.initExtensionsDone) {
          N.initExtensionsDone = true;
          var D = N.GLctx;
          Bh(D), Vh(D), Wh(D), D.disjointTimerQueryExt = D.getExtension("EXT_disjoint_timer_query"), Uh(D);
          var B = D.getSupportedExtensions() || [];
          B.forEach(function(Q) {
            !Q.includes("lose_context") && !Q.includes("debug") && D.getExtension(Q);
          });
        }
      } }, Gh = ["default", "low-power", "high-performance"];
      function Hh(N, D) {
        var B = D >> 2, Q = l()[B + 6], ue = { alpha: !!l()[B + 0], depth: !!l()[B + 1], stencil: !!l()[B + 2], antialias: !!l()[B + 3], premultipliedAlpha: !!l()[B + 4], preserveDrawingBuffer: !!l()[B + 5], powerPreference: Gh[Q], failIfMajorPerformanceCaveat: !!l()[B + 7], majorVersion: l()[B + 8], minorVersion: l()[B + 9], enableExtensionsByDefault: l()[B + 10], explicitSwapControl: l()[B + 11], proxyContextToMainThread: l()[B + 12], renderViaOffscreenBackBuffer: l()[B + 13] }, pe = vu(N);
        if (!pe || ue.explicitSwapControl)
          return 0;
        var ye = gt.createContext(pe, ue);
        return ye;
      }
      function qh(N, D) {
        return Hh(N, D);
      }
      var Ei = { mappings: {}, buffers: [null, [], []], printChar: function(N, D) {
        var B = Ei.buffers[N];
        D === 0 || D === 10 ? ((N === 1 ? te : ee)(Dn(B, 0)), B.length = 0) : B.push(D);
      }, varargs: void 0, get: function() {
        Ei.varargs += 4;
        var N = l()[Ei.varargs - 4 >> 2];
        return N;
      }, getStr: function(N) {
        var D = en(N);
        return D;
      }, get64: function(N, D) {
        return N;
      } };
      function Tc(N) {
        return $ ? Br(3, 1, N) : 0;
      }
      function $c(N, D, B, Q, ue) {
        if ($)
          return Br(4, 1, N, D, B, Q, ue);
      }
      function _c(N, D, B, Q) {
        if ($)
          return Br(5, 1, N, D, B, Q);
        for (var ue = 0, pe = 0; pe < B; pe++) {
          var ye = l()[D >> 2], Te = l()[D + 4 >> 2];
          D += 8;
          for (var bt = 0; bt < Te; bt++)
            Ei.printChar(N, i()[ye + bt]);
          ue += Te;
        }
        return l()[Q >> 2] = ue, 0;
      }
      function jh(N) {
        Ee(N);
      }
      _e.init();
      var Ac, Kh = [null, kc, Nc, Tc, $c, _c], Hv = false, Ec = { __clock_gettime: vh, __emscripten_init_main_thread_js: xh, __emscripten_thread_cleanup: wh, __pthread_create_js: kh, _emscripten_default_pthread_stack_size: Ih, _emscripten_notify_thread_queue: Sh, abort: Ch, emscripten_check_blocking_allowed: Nh, emscripten_get_heap_max: Sc, emscripten_get_now: Lr, emscripten_memcpy_big: Th, emscripten_num_logical_cores: $h, emscripten_receive_on_main_thread_js: _h, emscripten_resize_heap: Eh, emscripten_set_canvas_element_size: Mh, emscripten_unwind_to_js_event_loop: Lh, emscripten_webgl_create_context: qh, exit: wc, fd_close: Tc, fd_seek: $c, fd_write: _c, memory: Ce || d.wasmMemory, setTempRet0: jh }, qv = uh(), Xh = d.___wasm_call_ctors = function() {
        return (Xh = d.___wasm_call_ctors = d.asm.__wasm_call_ctors).apply(null, arguments);
      }, Yh = d._init = function() {
        return (Yh = d._init = d.asm.init).apply(null, arguments);
      }, Qh = d._init_with_threads_count = function() {
        return (Qh = d._init_with_threads_count = d.asm.init_with_threads_count).apply(null, arguments);
      }, Zh = d._get_threads_count = function() {
        return (Zh = d._get_threads_count = d.asm.get_threads_count).apply(null, arguments);
      }, Jh = d._register_tensor = function() {
        return (Jh = d._register_tensor = d.asm.register_tensor).apply(null, arguments);
      }, ef = d._dispose_data = function() {
        return (ef = d._dispose_data = d.asm.dispose_data).apply(null, arguments);
      }, tf = d._dispose = function() {
        return (tf = d._dispose = d.asm.dispose).apply(null, arguments);
      }, nf = d._Abs = function() {
        return (nf = d._Abs = d.asm.Abs).apply(null, arguments);
      }, sf = d._Add = function() {
        return (sf = d._Add = d.asm.Add).apply(null, arguments);
      }, rf = d._AddN = function() {
        return (rf = d._AddN = d.asm.AddN).apply(null, arguments);
      }, af = d._All = function() {
        return (af = d._All = d.asm.All).apply(null, arguments);
      }, of = d._Any = function() {
        return (of = d._Any = d.asm.Any).apply(null, arguments);
      }, uf = d._ArgMax = function() {
        return (uf = d._ArgMax = d.asm.ArgMax).apply(null, arguments);
      }, lf = d._AvgPool = function() {
        return (lf = d._AvgPool = d.asm.AvgPool).apply(null, arguments);
      }, cf = d._BatchMatMul = function() {
        return (cf = d._BatchMatMul = d.asm.BatchMatMul).apply(null, arguments);
      }, df = d._Ceil = function() {
        return (df = d._Ceil = d.asm.Ceil).apply(null, arguments);
      }, pf = d._ClipByValue = function() {
        return (pf = d._ClipByValue = d.asm.ClipByValue).apply(null, arguments);
      }, hf = d._Conv2D = function() {
        return (hf = d._Conv2D = d.asm.Conv2D).apply(null, arguments);
      }, ff = d._Conv2DBackpropInput = function() {
        return (ff = d._Conv2DBackpropInput = d.asm.Conv2DBackpropInput).apply(null, arguments);
      }, mf = d._Cos = function() {
        return (mf = d._Cos = d.asm.Cos).apply(null, arguments);
      }, gf = d._Cosh = function() {
        return (gf = d._Cosh = d.asm.Cosh).apply(null, arguments);
      }, bf = d._CropAndResize = function() {
        return (bf = d._CropAndResize = d.asm.CropAndResize).apply(null, arguments);
      }, yf = d._Cumprod = function() {
        return (yf = d._Cumprod = d.asm.Cumprod).apply(null, arguments);
      }, vf = d._Cumsum = function() {
        return (vf = d._Cumsum = d.asm.Cumsum).apply(null, arguments);
      }, xf = d._DepthToSpace = function() {
        return (xf = d._DepthToSpace = d.asm.DepthToSpace).apply(null, arguments);
      }, wf = d._DepthwiseConv2dNative = function() {
        return (wf = d._DepthwiseConv2dNative = d.asm.DepthwiseConv2dNative).apply(null, arguments);
      }, kf = d._Elu = function() {
        return (kf = d._Elu = d.asm.Elu).apply(null, arguments);
      }, If = d._Equal = function() {
        return (If = d._Equal = d.asm.Equal).apply(null, arguments);
      }, Sf = d._Exp = function() {
        return (Sf = d._Exp = d.asm.Exp).apply(null, arguments);
      }, Cf = d._FlipLeftRight = function() {
        return (Cf = d._FlipLeftRight = d.asm.FlipLeftRight).apply(null, arguments);
      }, Rc = d._Floor = function() {
        return (Rc = d._Floor = d.asm.Floor).apply(null, arguments);
      }, Dc = d._FloorDiv = function() {
        return (Dc = d._FloorDiv = d.asm.FloorDiv).apply(null, arguments);
      }, xu = d._FusedBatchNorm = function() {
        return (xu = d._FusedBatchNorm = d.asm.FusedBatchNorm).apply(null, arguments);
      }, Nf = d._FusedConv2D = function() {
        return (Nf = d._FusedConv2D = d.asm.FusedConv2D).apply(null, arguments);
      }, Tf = d._FusedDepthwiseConv2D = function() {
        return (Tf = d._FusedDepthwiseConv2D = d.asm.FusedDepthwiseConv2D).apply(null, arguments);
      }, Ri = d._Gather = function() {
        return (Ri = d._Gather = d.asm.Gather).apply(null, arguments);
      }, wu = d._GatherNd = function() {
        return (wu = d._GatherNd = d.asm.GatherNd).apply(null, arguments);
      }, ku = d._Greater = function() {
        return (ku = d._Greater = d.asm.Greater).apply(null, arguments);
      }, jv = d._GreaterEqual = function() {
        return (jv = d._GreaterEqual = d.asm.GreaterEqual).apply(null, arguments);
      }, Di = d._LeakyRelu = function() {
        return (Di = d._LeakyRelu = d.asm.LeakyRelu).apply(null, arguments);
      }, Fi = d._Less = function() {
        return (Fi = d._Less = d.asm.Less).apply(null, arguments);
      }, $f = d._LessEqual = function() {
        return ($f = d._LessEqual = d.asm.LessEqual).apply(null, arguments);
      }, H = d._Log = function() {
        return (H = d._Log = d.asm.Log).apply(null, arguments);
      }, J = d._LogicalAnd = function() {
        return (J = d._LogicalAnd = d.asm.LogicalAnd).apply(null, arguments);
      }, de = d._Max = function() {
        return (de = d._Max = d.asm.Max).apply(null, arguments);
      }, Ie = d._MaxPool = function() {
        return (Ie = d._MaxPool = d.asm.MaxPool).apply(null, arguments);
      }, Qe = d._Maximum = function() {
        return (Qe = d._Maximum = d.asm.Maximum).apply(null, arguments);
      }, Ze = d._Mean = function() {
        return (Ze = d._Mean = d.asm.Mean).apply(null, arguments);
      }, Ve = d._Min = function() {
        return (Ve = d._Min = d.asm.Min).apply(null, arguments);
      }, ze = d._Minimum = function() {
        return (ze = d._Minimum = d.asm.Minimum).apply(null, arguments);
      }, Tt = d._MirrorPad = function() {
        return (Tt = d._MirrorPad = d.asm.MirrorPad).apply(null, arguments);
      }, is = d._Multiply = function() {
        return (is = d._Multiply = d.asm.Multiply).apply(null, arguments);
      }, os = d._Neg = function() {
        return (os = d._Neg = d.asm.Neg).apply(null, arguments);
      }, Oi = d._NonMaxSuppressionV3 = function() {
        return (Oi = d._NonMaxSuppressionV3 = d.asm.NonMaxSuppressionV3).apply(null, arguments);
      }, Vr = d._NonMaxSuppressionV4 = function() {
        return (Vr = d._NonMaxSuppressionV4 = d.asm.NonMaxSuppressionV4).apply(null, arguments);
      }, _f = d._NonMaxSuppressionV5 = function() {
        return (_f = d._NonMaxSuppressionV5 = d.asm.NonMaxSuppressionV5).apply(null, arguments);
      }, rn = d._NotEqual = function() {
        return (rn = d._NotEqual = d.asm.NotEqual).apply(null, arguments);
      }, sr = d._OneHot = function() {
        return (sr = d._OneHot = d.asm.OneHot).apply(null, arguments);
      }, Fc = d._PadV2 = function() {
        return (Fc = d._PadV2 = d.asm.PadV2).apply(null, arguments);
      }, ZN = d._Pow = function() {
        return (ZN = d._Pow = d.asm.Pow).apply(null, arguments);
      }, JN = d._Prelu = function() {
        return (JN = d._Prelu = d.asm.Prelu).apply(null, arguments);
      }, eT = d._Prod = function() {
        return (eT = d._Prod = d.asm.Prod).apply(null, arguments);
      }, tT = d._RealDiv = function() {
        return (tT = d._RealDiv = d.asm.RealDiv).apply(null, arguments);
      }, nT = d._Relu = function() {
        return (nT = d._Relu = d.asm.Relu).apply(null, arguments);
      }, sT = d._Relu6 = function() {
        return (sT = d._Relu6 = d.asm.Relu6).apply(null, arguments);
      }, rT = d._ResizeBilinear = function() {
        return (rT = d._ResizeBilinear = d.asm.ResizeBilinear).apply(null, arguments);
      }, aT = d._Reverse = function() {
        return (aT = d._Reverse = d.asm.Reverse).apply(null, arguments);
      }, iT = d._RotateWithOffset = function() {
        return (iT = d._RotateWithOffset = d.asm.RotateWithOffset).apply(null, arguments);
      }, oT = d._Round = function() {
        return (oT = d._Round = d.asm.Round).apply(null, arguments);
      }, uT = d._Rsqrt = function() {
        return (uT = d._Rsqrt = d.asm.Rsqrt).apply(null, arguments);
      }, lT = d._ScatterNd = function() {
        return (lT = d._ScatterNd = d.asm.ScatterNd).apply(null, arguments);
      }, cT = d._SelectV2 = function() {
        return (cT = d._SelectV2 = d.asm.SelectV2).apply(null, arguments);
      }, dT = d._Sigmoid = function() {
        return (dT = d._Sigmoid = d.asm.Sigmoid).apply(null, arguments);
      }, pT = d._Sin = function() {
        return (pT = d._Sin = d.asm.Sin).apply(null, arguments);
      }, hT = d._Softmax = function() {
        return (hT = d._Softmax = d.asm.Softmax).apply(null, arguments);
      }, fT = d._SparseFillEmptyRows = function() {
        return (fT = d._SparseFillEmptyRows = d.asm.SparseFillEmptyRows).apply(null, arguments);
      }, mT = d._SparseReshape = function() {
        return (mT = d._SparseReshape = d.asm.SparseReshape).apply(null, arguments);
      }, gT = d._SparseSegmentReduction = function() {
        return (gT = d._SparseSegmentReduction = d.asm.SparseSegmentReduction).apply(null, arguments);
      }, bT = d._Sqrt = function() {
        return (bT = d._Sqrt = d.asm.Sqrt).apply(null, arguments);
      }, yT = d._Square = function() {
        return (yT = d._Square = d.asm.Square).apply(null, arguments);
      }, vT = d._SquaredDifference = function() {
        return (vT = d._SquaredDifference = d.asm.SquaredDifference).apply(null, arguments);
      }, xT = d._Step = function() {
        return (xT = d._Step = d.asm.Step).apply(null, arguments);
      }, wT = d._StridedSlice = function() {
        return (wT = d._StridedSlice = d.asm.StridedSlice).apply(null, arguments);
      }, kT = d._Sub = function() {
        return (kT = d._Sub = d.asm.Sub).apply(null, arguments);
      }, IT = d._Sum = function() {
        return (IT = d._Sum = d.asm.Sum).apply(null, arguments);
      }, ST = d._Tan = function() {
        return (ST = d._Tan = d.asm.Tan).apply(null, arguments);
      }, CT = d._Tanh = function() {
        return (CT = d._Tanh = d.asm.Tanh).apply(null, arguments);
      }, NT = d._Tile = function() {
        return (NT = d._Tile = d.asm.Tile).apply(null, arguments);
      }, TT = d._TopK = function() {
        return (TT = d._TopK = d.asm.TopK).apply(null, arguments);
      }, $T = d._Transform = function() {
        return ($T = d._Transform = d.asm.Transform).apply(null, arguments);
      }, _T = d._Transpose = function() {
        return (_T = d._Transpose = d.asm.Transpose).apply(null, arguments);
      }, AT = d.__FusedMatMul = function() {
        return (AT = d.__FusedMatMul = d.asm._FusedMatMul).apply(null, arguments);
      }, Af = d._malloc = function() {
        return (Af = d._malloc = d.asm.malloc).apply(null, arguments);
      }, Kv = d._free = function() {
        return (Kv = d._free = d.asm.free).apply(null, arguments);
      }, ET = d._emscripten_tls_init = function() {
        return (ET = d._emscripten_tls_init = d.asm.emscripten_tls_init).apply(null, arguments);
      }, Xv = d.___errno_location = function() {
        return (Xv = d.___errno_location = d.asm.__errno_location).apply(null, arguments);
      }, Oc = d._pthread_self = function() {
        return (Oc = d._pthread_self = d.asm.pthread_self).apply(null, arguments);
      }, Yv = d._emscripten_main_thread_process_queued_calls = function() {
        return (Yv = d._emscripten_main_thread_process_queued_calls = d.asm.emscripten_main_thread_process_queued_calls).apply(null, arguments);
      }, RT = d.__emscripten_thread_crashed = function() {
        return (RT = d.__emscripten_thread_crashed = d.asm._emscripten_thread_crashed).apply(null, arguments);
      }, Qv = d.__emscripten_thread_init = function() {
        return (Qv = d.__emscripten_thread_init = d.asm._emscripten_thread_init).apply(null, arguments);
      }, DT = d._emscripten_current_thread_process_queued_calls = function() {
        return (DT = d._emscripten_current_thread_process_queued_calls = d.asm.emscripten_current_thread_process_queued_calls).apply(null, arguments);
      }, FT = d._emscripten_main_browser_thread_id = function() {
        return (FT = d._emscripten_main_browser_thread_id = d.asm.emscripten_main_browser_thread_id).apply(null, arguments);
      }, OT = d._emscripten_sync_run_in_main_thread_2 = function() {
        return (OT = d._emscripten_sync_run_in_main_thread_2 = d.asm.emscripten_sync_run_in_main_thread_2).apply(null, arguments);
      }, Zv = d._emscripten_sync_run_in_main_thread_4 = function() {
        return (Zv = d._emscripten_sync_run_in_main_thread_4 = d.asm.emscripten_sync_run_in_main_thread_4).apply(null, arguments);
      }, Jv = d._emscripten_run_in_main_runtime_thread_js = function() {
        return (Jv = d._emscripten_run_in_main_runtime_thread_js = d.asm.emscripten_run_in_main_runtime_thread_js).apply(null, arguments);
      }, Ef = d._emscripten_dispatch_to_thread_ = function() {
        return (Ef = d._emscripten_dispatch_to_thread_ = d.asm.emscripten_dispatch_to_thread_).apply(null, arguments);
      }, Rf = d.__emscripten_thread_free_data = function() {
        return (Rf = d.__emscripten_thread_free_data = d.asm._emscripten_thread_free_data).apply(null, arguments);
      }, PT = d.__emscripten_thread_exit = function() {
        return (PT = d.__emscripten_thread_exit = d.asm._emscripten_thread_exit).apply(null, arguments);
      }, zT = d._memalign = function() {
        return (zT = d._memalign = d.asm.memalign).apply(null, arguments);
      }, ex = d._emscripten_stack_set_limits = function() {
        return (ex = d._emscripten_stack_set_limits = d.asm.emscripten_stack_set_limits).apply(null, arguments);
      }, Df = d.stackSave = function() {
        return (Df = d.stackSave = d.asm.stackSave).apply(null, arguments);
      }, Pc = d.stackRestore = function() {
        return (Pc = d.stackRestore = d.asm.stackRestore).apply(null, arguments);
      }, Pi = d.stackAlloc = function() {
        return (Pi = d.stackAlloc = d.asm.stackAlloc).apply(null, arguments);
      }, MT = d.dynCall_iijjiiii = function() {
        return (MT = d.dynCall_iijjiiii = d.asm.dynCall_iijjiiii).apply(null, arguments);
      }, LT = d.dynCall_jiji = function() {
        return (LT = d.dynCall_jiji = d.asm.dynCall_jiji).apply(null, arguments);
      }, tx = d.__emscripten_allow_main_runtime_queued_calls = 21456;
      d.cwrap = Jt, d.keepRuntimeAlive = zr, d.PThread = _e, d.PThread = _e, d.wasmMemory = Ce, d.ExitStatus = Iu;
      var zc;
      function Iu(N) {
        this.name = "ExitStatus", this.message = "Program terminated with exit(" + N + ")", this.status = N;
      }
      as = function N() {
        zc || Ff(), zc || (as = N);
      };
      function Ff(N) {
        if (N = N || b, nr > 0)
          return;
        if ($) {
          h(d), mu(), postMessage({ cmd: "loaded" });
          return;
        }
        if (nn(), nr > 0)
          return;
        function D() {
          zc || (zc = true, d.calledRun = true, !rt && (mu(), h(d), d.onRuntimeInitialized && d.onRuntimeInitialized(), ih()));
        }
        d.setStatus ? (d.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            d.setStatus("");
          }, 1), D();
        }, 1)) : D();
      }
      d.run = Ff;
      function BT(N, D) {
        if (Zt = N, !D && $)
          throw kc(N), "unwind";
        zr() || ah(), VT(N);
      }
      function VT(N) {
        Zt = N, zr() || (_e.terminateAllThreads(), d.onExit && d.onExit(N), rt = true), v(N, new Iu(N));
      }
      if (d.preInit)
        for (typeof d.preInit == "function" && (d.preInit = [d.preInit]); d.preInit.length > 0; )
          d.preInit.pop()();
      Ff();
      var Mc;
      m && (Mc = { uncaughtException: process.listeners("uncaughtException").filter(function(N) {
        return !m.uncaughtException.indexOf(N) > -1;
      }), unhandledRejection: process.listeners("unhandledRejection").filter(function(N) {
        return !m.unhandledRejection.indexOf(N) > -1;
      }) });
      var Lc;
      if (typeof WasmBackendModule != "undefined")
        Lc = WasmBackendModule;
      else if (typeof r != "undefined")
        Lc = r;
      else
        throw new Error("Could not find wasm module in post.js");
      if (Mc) {
        var WT = Lc._dispose;
        Lc._dispose = function() {
          WT(), Mc.uncaughtException.forEach(function(N) {
            process.removeListener("uncaughtException", N);
          }), Mc.unhandledRejection.forEach(function(N) {
            process.removeListener("unhandledRejection", N);
          });
        };
      }
      return r.ready;
    };
  })();
  typeof e == "object" && typeof t == "object" ? t.exports = n : typeof define == "function" && define.amd ? define([], function() {
    return n;
  }) : typeof e == "object" && (e.WasmBackendModuleThreadedSimd = n);
} });
var d$ = zt({ "src/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm.js"(e, t) {
  var n = (() => {
    var s = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0;
    return typeof __filename != "undefined" && (s = s || __filename), function(r) {
      r = r || {};
      var a = typeof r != "undefined" ? r : {}, i, o;
      a.ready = new Promise(function(H, J) {
        i = H, o = J;
      });
      var u;
      typeof process != "undefined" && process.listeners && (u = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") });
      var l = Object.assign({}, a), c = [], p = "./this.program", d = (H, J) => {
        throw J;
      }, h = typeof window == "object", f = typeof importScripts == "function", m = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", g = "";
      function b(H) {
        return a.locateFile ? a.locateFile(H, g) : g + H;
      }
      var y, v, x, k;
      function S(H) {
        if (H instanceof wu)
          return;
        R("exiting due to exception: " + H);
      }
      var $, E, A;
      m ? (f ? g = dd().dirname(g) + "/" : g = __dirname + "/", A = () => {
        E || ($ = sg(), E = dd());
      }, y = function(J, de) {
        return A(), J = E.normalize(J), $.readFileSync(J, de ? void 0 : "utf8");
      }, x = (H) => {
        var J = y(H, true);
        return J.buffer || (J = new Uint8Array(J)), J;
      }, v = (H, J, de) => {
        A(), H = E.normalize(H), $.readFile(H, function(Ie, Qe) {
          Ie ? de(Ie) : J(Qe.buffer);
        });
      }, process.argv.length > 1 && (p = process.argv[1].replace(/\\/g, "/")), c = process.argv.slice(2), process.on("uncaughtException", function(H) {
        if (!(H instanceof wu))
          throw H;
      }), process.on("unhandledRejection", function(H) {
        throw H;
      }), d = (H, J) => {
        if (fu())
          throw process.exitCode = H, J;
        S(J), process.exit(H);
      }, a.inspect = function() {
        return "[Emscripten Module object]";
      }) : (h || f) && (f ? g = self.location.href : typeof document != "undefined" && document.currentScript && (g = document.currentScript.src), s && (g = s), g.indexOf("blob:") !== 0 ? g = g.substr(0, g.replace(/[?#].*/, "").lastIndexOf("/") + 1) : g = "", y = (H) => {
        var J = new XMLHttpRequest();
        return J.open("GET", H, false), J.send(null), J.responseText;
      }, f && (x = (H) => {
        var J = new XMLHttpRequest();
        return J.open("GET", H, false), J.responseType = "arraybuffer", J.send(null), new Uint8Array(J.response);
      }), v = (H, J, de) => {
        var Ie = new XMLHttpRequest();
        Ie.open("GET", H, true), Ie.responseType = "arraybuffer", Ie.onload = () => {
          if (Ie.status == 200 || Ie.status == 0 && Ie.response) {
            J(Ie.response);
            return;
          }
          de();
        }, Ie.onerror = de, Ie.send(null);
      }, k = (H) => document.title = H);
      var P = a.print || console.log.bind(console), R = a.printErr || console.warn.bind(console);
      Object.assign(a, l), l = null, a.arguments && (c = a.arguments), a.thisProgram && (p = a.thisProgram), a.quit && (d = a.quit);
      var F = 4;
      function T(H) {
        T.shown || (T.shown = {}), T.shown[H] || (T.shown[H] = 1, R(H));
      }
      function z(H, J) {
        if (typeof WebAssembly.Function == "function") {
          for (var de = { i: "i32", j: "i64", f: "f32", d: "f64" }, Ie = { parameters: [], results: J[0] == "v" ? [] : [de[J[0]]] }, Qe = 1; Qe < J.length; ++Qe)
            Ie.parameters.push(de[J[Qe]]);
          return new WebAssembly.Function(Ie, H);
        }
        var Ze = [1, 0, 1, 96], Ve = J.slice(0, 1), ze = J.slice(1), Tt = { i: 127, j: 126, f: 125, d: 124 };
        Ze.push(ze.length);
        for (var Qe = 0; Qe < ze.length; ++Qe)
          Ze.push(Tt[ze[Qe]]);
        Ve == "v" ? Ze.push(0) : Ze = Ze.concat([1, Tt[Ve]]), Ze[1] = Ze.length - 2;
        var is = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0].concat(Ze, [2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0])), os = new WebAssembly.Module(is), Oi = new WebAssembly.Instance(os, { e: { f: H } }), Vr = Oi.exports.f;
        return Vr;
      }
      var W = [], q;
      function K() {
        if (W.length)
          return W.pop();
        try {
          er.grow(1);
        } catch (H) {
          throw H instanceof RangeError ? "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH." : H;
        }
        return er.length - 1;
      }
      function Y(H, J) {
        for (var de = H; de < H + J; de++) {
          var Ie = bu(de);
          Ie && q.set(Ie, de);
        }
      }
      var Z = 0, te = (H) => {
        Z = H;
      }, ee;
      a.wasmBinary && (ee = a.wasmBinary);
      var se = a.noExitRuntime || true;
      typeof WebAssembly != "object" && Pr("no native wasm support detected");
      var ne, oe = false, re;
      function le(H, J) {
        H || Pr(J);
      }
      function me(H) {
        var J = a["_" + H];
        return J;
      }
      function ke(H, J, de, Ie, Qe) {
        var Ze = { string: function(rn) {
          var sr = 0;
          if (rn != null && rn !== 0) {
            var Fc = (rn.length << 2) + 1;
            sr = xu(Fc), tt(rn, sr, Fc);
          }
          return sr;
        }, array: function(rn) {
          var sr = xu(rn.length);
          return rt(rn, sr), sr;
        } };
        function Ve(rn) {
          return J === "string" ? Je(rn) : J === "boolean" ? Boolean(rn) : rn;
        }
        var ze = me(H), Tt = [], is = 0;
        if (Ie)
          for (var os = 0; os < Ie.length; os++) {
            var Oi = Ze[de[os]];
            Oi ? (is === 0 && (is = Rc()), Tt[os] = Oi(Ie[os])) : Tt[os] = Ie[os];
          }
        var Vr = ze.apply(null, Tt);
        function _f(rn) {
          return is !== 0 && Dc(is), Ve(rn);
        }
        return Vr = _f(Vr), Vr;
      }
      function Se(H, J, de, Ie) {
        de = de || [];
        var Qe = de.every(function(Ve) {
          return Ve === "number";
        }), Ze = J !== "string";
        return Ze && Qe && !Ie ? me(H) : function() {
          return ke(H, J, de, arguments, Ie);
        };
      }
      var Ee = 1, Pe = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
      function Xe(H, J, de) {
        for (var Ie = J + de, Qe = J; H[Qe] && !(Qe >= Ie); )
          ++Qe;
        if (Qe - J > 16 && H.subarray && Pe)
          return Pe.decode(H.subarray(J, Qe));
        for (var Ze = ""; J < Qe; ) {
          var Ve = H[J++];
          if (!(Ve & 128)) {
            Ze += String.fromCharCode(Ve);
            continue;
          }
          var ze = H[J++] & 63;
          if ((Ve & 224) == 192) {
            Ze += String.fromCharCode((Ve & 31) << 6 | ze);
            continue;
          }
          var Tt = H[J++] & 63;
          if ((Ve & 240) == 224 ? Ve = (Ve & 15) << 12 | ze << 6 | Tt : Ve = (Ve & 7) << 18 | ze << 12 | Tt << 6 | H[J++] & 63, Ve < 65536)
            Ze += String.fromCharCode(Ve);
          else {
            var is = Ve - 65536;
            Ze += String.fromCharCode(55296 | is >> 10, 56320 | is & 1023);
          }
        }
        return Ze;
      }
      function Je(H, J) {
        return H ? Xe(Jt, H, J) : "";
      }
      function Ye(H, J, de, Ie) {
        if (!(Ie > 0))
          return 0;
        for (var Qe = de, Ze = de + Ie - 1, Ve = 0; Ve < H.length; ++Ve) {
          var ze = H.charCodeAt(Ve);
          if (ze >= 55296 && ze <= 57343) {
            var Tt = H.charCodeAt(++Ve);
            ze = 65536 + ((ze & 1023) << 10) | Tt & 1023;
          }
          if (ze <= 127) {
            if (de >= Ze)
              break;
            J[de++] = ze;
          } else if (ze <= 2047) {
            if (de + 1 >= Ze)
              break;
            J[de++] = 192 | ze >> 6, J[de++] = 128 | ze & 63;
          } else if (ze <= 65535) {
            if (de + 2 >= Ze)
              break;
            J[de++] = 224 | ze >> 12, J[de++] = 128 | ze >> 6 & 63, J[de++] = 128 | ze & 63;
          } else {
            if (de + 3 >= Ze)
              break;
            J[de++] = 240 | ze >> 18, J[de++] = 128 | ze >> 12 & 63, J[de++] = 128 | ze >> 6 & 63, J[de++] = 128 | ze & 63;
          }
        }
        return J[de] = 0, de - Qe;
      }
      function tt(H, J, de) {
        return Ye(H, Jt, J, de);
      }
      function Ce(H) {
        for (var J = 0, de = 0; de < H.length; ++de) {
          var Ie = H.charCodeAt(de);
          Ie >= 55296 && Ie <= 57343 && (Ie = 65536 + ((Ie & 1023) << 10) | H.charCodeAt(++de) & 1023), Ie <= 127 ? ++J : Ie <= 2047 ? J += 2 : Ie <= 65535 ? J += 3 : J += 4;
        }
        return J;
      }
      var ut = typeof TextDecoder != "undefined" ? new TextDecoder("utf-16le") : void 0;
      function rt(H, J) {
        Et.set(H, J);
      }
      function Zt(H, J, de) {
        for (var Ie = 0; Ie < H.length; ++Ie)
          Et[J++ >> 0] = H.charCodeAt(Ie);
        de || (Et[J >> 0] = 0);
      }
      function Nt(H, J) {
        return H % J > 0 && (H += J - H % J), H;
      }
      var Sn, Et, Jt, Cn, Nn, Xt, Dn, en, Ms;
      function Ls(H) {
        Sn = H, a.HEAP8 = Et = new Int8Array(H), a.HEAP16 = Cn = new Int16Array(H), a.HEAP32 = Xt = new Int32Array(H), a.HEAPU8 = Jt = new Uint8Array(H), a.HEAPU16 = Nn = new Uint16Array(H), a.HEAPU32 = Dn = new Uint32Array(H), a.HEAPF32 = en = new Float32Array(H), a.HEAPF64 = Ms = new Float64Array(H);
      }
      var Si = a.INITIAL_MEMORY || 16777216, er, Bs = [], hu = [], Ci = [], tn = false, ic = false, oc = 0;
      function fu() {
        return se || oc > 0;
      }
      function uc() {
        if (a.preRun)
          for (typeof a.preRun == "function" && (a.preRun = [a.preRun]); a.preRun.length; )
            dc(a.preRun.shift());
        gu(Bs);
      }
      function lc() {
        tn = true, gu(hu);
      }
      function Pv() {
        ic = true;
      }
      function cc() {
        if (a.postRun)
          for (typeof a.postRun == "function" && (a.postRun = [a.postRun]); a.postRun.length; )
            pc(a.postRun.shift());
        gu(Ci);
      }
      function dc(H) {
        Bs.unshift(H);
      }
      function rs(H) {
        hu.unshift(H);
      }
      function pc(H) {
        Ci.unshift(H);
      }
      var Fn = 0, Ni = null, tr = null;
      function sh(H) {
        Fn++, a.monitorRunDependencies && a.monitorRunDependencies(Fn);
      }
      function hc(H) {
        if (Fn--, a.monitorRunDependencies && a.monitorRunDependencies(Fn), Fn == 0 && (Ni !== null && (clearInterval(Ni), Ni = null), tr)) {
          var J = tr;
          tr = null, J();
        }
      }
      a.preloadedImages = {}, a.preloadedAudios = {};
      function Pr(H) {
        a.onAbort && a.onAbort(H), H = "Aborted(" + H + ")", R(H), oe = true, re = 1, H += ". Build with -s ASSERTIONS=1 for more info.";
        var J = new WebAssembly.RuntimeError(H);
        throw o(J), J;
      }
      var rh = "data:application/octet-stream;base64,";
      function fc(H) {
        return H.startsWith(rh);
      }
      function zr(H) {
        return H.startsWith("file://");
      }
      var nn;
      nn = "tfjs-backend-wasm.wasm", fc(nn) || (nn = b(nn));
      function mu(H) {
        try {
          if (H == nn && ee)
            return new Uint8Array(ee);
          if (x)
            return x(H);
          throw "both async and sync fetching of the wasm failed";
        } catch (J) {
          Pr(J);
        }
      }
      function ah() {
        if (!ee && (h || f)) {
          if (typeof fetch == "function" && !zr(nn))
            return fetch(nn, { credentials: "same-origin" }).then(function(H) {
              if (!H.ok)
                throw "failed to load wasm binary file at '" + nn + "'";
              return H.arrayBuffer();
            }).catch(function() {
              return mu(nn);
            });
          if (v)
            return new Promise(function(H, J) {
              v(nn, function(de) {
                H(new Uint8Array(de));
              }, J);
            });
        }
        return Promise.resolve().then(function() {
          return mu(nn);
        });
      }
      function ih() {
        var H = { env: _i, wasi_snapshot_preview1: _i };
        function J(Ve, ze) {
          var Tt = Ve.exports;
          a.asm = Tt, ne = a.asm.memory, Ls(ne.buffer), er = a.asm.__indirect_function_table, rs(a.asm.__wasm_call_ctors), hc("wasm-instantiate");
        }
        sh("wasm-instantiate");
        function de(Ve) {
          J(Ve.instance);
        }
        function Ie(Ve) {
          return ah().then(function(ze) {
            return WebAssembly.instantiate(ze, H);
          }).then(function(ze) {
            return ze;
          }).then(Ve, function(ze) {
            R("failed to asynchronously prepare wasm: " + ze), Pr(ze);
          });
        }
        function Qe() {
          return !ee && typeof WebAssembly.instantiateStreaming == "function" && !fc(nn) && !zr(nn) && typeof fetch == "function" ? fetch(nn, { credentials: "same-origin" }).then(function(Ve) {
            var ze = WebAssembly.instantiateStreaming(Ve, H);
            return ze.then(de, function(Tt) {
              return R("wasm streaming compile failed: " + Tt), R("falling back to ArrayBuffer instantiation"), Ie(de);
            });
          }) : Ie(de);
        }
        if (a.instantiateWasm)
          try {
            var Ze = a.instantiateWasm(H, J);
            return Ze;
          } catch (Ve) {
            return R("Module.instantiateWasm callback failed with error: " + Ve), false;
          }
        return Qe().catch(o), {};
      }
      var zv, Mv;
      function gu(H) {
        for (; H.length > 0; ) {
          var J = H.shift();
          if (typeof J == "function") {
            J(a);
            continue;
          }
          var de = J.func;
          typeof de == "number" ? J.arg === void 0 ? bu(de)() : bu(de)(J.arg) : de(J.arg === void 0 ? null : J.arg);
        }
      }
      function nr(H) {
        return H;
      }
      function mc(H) {
        var J = /\b_Z[\w\d_]+/g;
        return H.replace(J, function(de) {
          var Ie = de;
          return de === Ie ? de : Ie + " [" + de + "]";
        });
      }
      var as = [];
      function bu(H) {
        var J = as[H];
        return J || (H >= as.length && (as.length = H + 1), as[H] = J = er.get(H)), J;
      }
      function Lv() {
        var H = new Error();
        if (!H.stack) {
          try {
            throw new Error();
          } catch (J) {
            H = J;
          }
          if (!H.stack)
            return "(no stack trace available)";
        }
        return H.stack.toString();
      }
      function Ti(H, J) {
        er.set(H, J), as[H] = J;
      }
      function oh() {
        Pr("");
      }
      function gc(H, J, de) {
        Jt.copyWithin(H, J, J + de);
      }
      function bc() {
        return 2147483648;
      }
      function sn(H) {
        try {
          return ne.grow(H - Sn.byteLength + 65535 >>> 16), Ls(ne.buffer), 1;
        } catch (J) {
        }
      }
      function yc(H) {
        var J = Jt.length;
        H = H >>> 0;
        var de = bc();
        if (H > de)
          return false;
        for (var Ie = 1; Ie <= 4; Ie *= 2) {
          var Qe = J * (1 + 0.2 / Ie);
          Qe = Math.min(Qe, H + 100663296);
          var Ze = Math.min(de, Nt(Math.max(H, Qe), 65536)), Ve = sn(Ze);
          if (Ve)
            return true;
        }
        return false;
      }
      var $i = { mappings: {}, buffers: [null, [], []], printChar: function(H, J) {
        var de = $i.buffers[H];
        J === 0 || J === 10 ? ((H === 1 ? P : R)(Xe(de, 0)), de.length = 0) : de.push(J);
      }, varargs: void 0, get: function() {
        $i.varargs += 4;
        var H = Xt[$i.varargs - 4 >> 2];
        return H;
      }, getStr: function(H) {
        var J = Je(H);
        return J;
      }, get64: function(H, J) {
        return H;
      } };
      function uh(H) {
        return 0;
      }
      function Bv(H, J, de, Ie, Qe) {
      }
      function Vv(H, J, de, Ie) {
        for (var Qe = 0, Ze = 0; Ze < de; Ze++) {
          var Ve = Xt[J >> 2], ze = Xt[J + 4 >> 2];
          J += 8;
          for (var Tt = 0; Tt < ze; Tt++)
            $i.printChar(H, Jt[Ve + Tt]);
          Qe += ze;
        }
        return Xt[Ie >> 2] = Qe, 0;
      }
      function lh(H) {
        te(H);
      }
      var vc = false, _i = { abort: oh, emscripten_memcpy_big: gc, emscripten_resize_heap: yc, fd_close: uh, fd_seek: Bv, fd_write: Vv, setTempRet0: lh }, QN = ih(), Wv = a.___wasm_call_ctors = function() {
        return (Wv = a.___wasm_call_ctors = a.asm.__wasm_call_ctors).apply(null, arguments);
      }, ch = a._init = function() {
        return (ch = a._init = a.asm.init).apply(null, arguments);
      }, dh = a._init_with_threads_count = function() {
        return (dh = a._init_with_threads_count = a.asm.init_with_threads_count).apply(null, arguments);
      }, xc = a._get_threads_count = function() {
        return (xc = a._get_threads_count = a.asm.get_threads_count).apply(null, arguments);
      }, wc = a._register_tensor = function() {
        return (wc = a._register_tensor = a.asm.register_tensor).apply(null, arguments);
      }, ph = a._dispose_data = function() {
        return (ph = a._dispose_data = a.asm.dispose_data).apply(null, arguments);
      }, _e = a._dispose = function() {
        return (_e = a._dispose = a.asm.dispose).apply(null, arguments);
      }, hh = a._Abs = function() {
        return (hh = a._Abs = a.asm.Abs).apply(null, arguments);
      }, kc = a._Add = function() {
        return (kc = a._Add = a.asm.Add).apply(null, arguments);
      }, Mr = a._AddN = function() {
        return (Mr = a._AddN = a.asm.AddN).apply(null, arguments);
      }, Ai = a._All = function() {
        return (Ai = a._All = a.asm.All).apply(null, arguments);
      }, fh = a._Any = function() {
        return (fh = a._Any = a.asm.Any).apply(null, arguments);
      }, Uv = a._ArgMax = function() {
        return (Uv = a._ArgMax = a.asm.ArgMax).apply(null, arguments);
      }, mh = a._AvgPool = function() {
        return (mh = a._AvgPool = a.asm.AvgPool).apply(null, arguments);
      }, Gv = a._BatchMatMul = function() {
        return (Gv = a._BatchMatMul = a.asm.BatchMatMul).apply(null, arguments);
      }, Lr = a._Ceil = function() {
        return (Lr = a._Ceil = a.asm.Ceil).apply(null, arguments);
      }, gh = a._ClipByValue = function() {
        return (gh = a._ClipByValue = a.asm.ClipByValue).apply(null, arguments);
      }, bh = a._Conv2D = function() {
        return (bh = a._Conv2D = a.asm.Conv2D).apply(null, arguments);
      }, yh = a._Conv2DBackpropInput = function() {
        return (yh = a._Conv2DBackpropInput = a.asm.Conv2DBackpropInput).apply(null, arguments);
      }, vh = a._Cos = function() {
        return (vh = a._Cos = a.asm.Cos).apply(null, arguments);
      }, xh = a._Cosh = function() {
        return (xh = a._Cosh = a.asm.Cosh).apply(null, arguments);
      }, wh = a._CropAndResize = function() {
        return (wh = a._CropAndResize = a.asm.CropAndResize).apply(null, arguments);
      }, Ic = a._Cumprod = function() {
        return (Ic = a._Cumprod = a.asm.Cumprod).apply(null, arguments);
      }, kh = a._Cumsum = function() {
        return (kh = a._Cumsum = a.asm.Cumsum).apply(null, arguments);
      }, Ih = a._DepthToSpace = function() {
        return (Ih = a._DepthToSpace = a.asm.DepthToSpace).apply(null, arguments);
      }, Sh = a._DepthwiseConv2dNative = function() {
        return (Sh = a._DepthwiseConv2dNative = a.asm.DepthwiseConv2dNative).apply(null, arguments);
      }, Ch = a._Elu = function() {
        return (Ch = a._Elu = a.asm.Elu).apply(null, arguments);
      }, Nh = a._Equal = function() {
        return (Nh = a._Equal = a.asm.Equal).apply(null, arguments);
      }, Sc = a._Exp = function() {
        return (Sc = a._Exp = a.asm.Exp).apply(null, arguments);
      }, Th = a._FlipLeftRight = function() {
        return (Th = a._FlipLeftRight = a.asm.FlipLeftRight).apply(null, arguments);
      }, $h = a._Floor = function() {
        return ($h = a._Floor = a.asm.Floor).apply(null, arguments);
      }, Br = a._FloorDiv = function() {
        return (Br = a._FloorDiv = a.asm.FloorDiv).apply(null, arguments);
      }, yu = a._FusedBatchNorm = function() {
        return (yu = a._FusedBatchNorm = a.asm.FusedBatchNorm).apply(null, arguments);
      }, _h = a._FusedConv2D = function() {
        return (_h = a._FusedConv2D = a.asm.FusedConv2D).apply(null, arguments);
      }, Ah = a._FusedDepthwiseConv2D = function() {
        return (Ah = a._FusedDepthwiseConv2D = a.asm.FusedDepthwiseConv2D).apply(null, arguments);
      }, Eh = a._Gather = function() {
        return (Eh = a._Gather = a.asm.Gather).apply(null, arguments);
      }, Be = a._GatherNd = function() {
        return (Be = a._GatherNd = a.asm.GatherNd).apply(null, arguments);
      }, Rh = a._Greater = function() {
        return (Rh = a._Greater = a.asm.Greater).apply(null, arguments);
      }, Dh = a._GreaterEqual = function() {
        return (Dh = a._GreaterEqual = a.asm.GreaterEqual).apply(null, arguments);
      }, Fh = a._LeakyRelu = function() {
        return (Fh = a._LeakyRelu = a.asm.LeakyRelu).apply(null, arguments);
      }, Oh = a._Less = function() {
        return (Oh = a._Less = a.asm.Less).apply(null, arguments);
      }, Ph = a._LessEqual = function() {
        return (Ph = a._LessEqual = a.asm.LessEqual).apply(null, arguments);
      }, zh = a._Log = function() {
        return (zh = a._Log = a.asm.Log).apply(null, arguments);
      }, vu = a._LogicalAnd = function() {
        return (vu = a._LogicalAnd = a.asm.LogicalAnd).apply(null, arguments);
      }, Cc = a._Max = function() {
        return (Cc = a._Max = a.asm.Max).apply(null, arguments);
      }, Nc = a._MaxPool = function() {
        return (Nc = a._MaxPool = a.asm.MaxPool).apply(null, arguments);
      }, Mh = a._Maximum = function() {
        return (Mh = a._Maximum = a.asm.Maximum).apply(null, arguments);
      }, Lh = a._Mean = function() {
        return (Lh = a._Mean = a.asm.Mean).apply(null, arguments);
      }, Bh = a._Min = function() {
        return (Bh = a._Min = a.asm.Min).apply(null, arguments);
      }, Vh = a._Minimum = function() {
        return (Vh = a._Minimum = a.asm.Minimum).apply(null, arguments);
      }, Wh = a._MirrorPad = function() {
        return (Wh = a._MirrorPad = a.asm.MirrorPad).apply(null, arguments);
      }, Uh = a._Multiply = function() {
        return (Uh = a._Multiply = a.asm.Multiply).apply(null, arguments);
      }, gt = a._Neg = function() {
        return (gt = a._Neg = a.asm.Neg).apply(null, arguments);
      }, Gh = a._NonMaxSuppressionV3 = function() {
        return (Gh = a._NonMaxSuppressionV3 = a.asm.NonMaxSuppressionV3).apply(null, arguments);
      }, Hh = a._NonMaxSuppressionV4 = function() {
        return (Hh = a._NonMaxSuppressionV4 = a.asm.NonMaxSuppressionV4).apply(null, arguments);
      }, qh = a._NonMaxSuppressionV5 = function() {
        return (qh = a._NonMaxSuppressionV5 = a.asm.NonMaxSuppressionV5).apply(null, arguments);
      }, Ei = a._NotEqual = function() {
        return (Ei = a._NotEqual = a.asm.NotEqual).apply(null, arguments);
      }, Tc = a._OneHot = function() {
        return (Tc = a._OneHot = a.asm.OneHot).apply(null, arguments);
      }, $c = a._PadV2 = function() {
        return ($c = a._PadV2 = a.asm.PadV2).apply(null, arguments);
      }, _c = a._Pow = function() {
        return (_c = a._Pow = a.asm.Pow).apply(null, arguments);
      }, jh = a._Prelu = function() {
        return (jh = a._Prelu = a.asm.Prelu).apply(null, arguments);
      }, Ac = a._Prod = function() {
        return (Ac = a._Prod = a.asm.Prod).apply(null, arguments);
      }, Kh = a._RealDiv = function() {
        return (Kh = a._RealDiv = a.asm.RealDiv).apply(null, arguments);
      }, Hv = a._Relu = function() {
        return (Hv = a._Relu = a.asm.Relu).apply(null, arguments);
      }, Ec = a._Relu6 = function() {
        return (Ec = a._Relu6 = a.asm.Relu6).apply(null, arguments);
      }, qv = a._ResizeBilinear = function() {
        return (qv = a._ResizeBilinear = a.asm.ResizeBilinear).apply(null, arguments);
      }, Xh = a._Reverse = function() {
        return (Xh = a._Reverse = a.asm.Reverse).apply(null, arguments);
      }, Yh = a._RotateWithOffset = function() {
        return (Yh = a._RotateWithOffset = a.asm.RotateWithOffset).apply(null, arguments);
      }, Qh = a._Round = function() {
        return (Qh = a._Round = a.asm.Round).apply(null, arguments);
      }, Zh = a._Rsqrt = function() {
        return (Zh = a._Rsqrt = a.asm.Rsqrt).apply(null, arguments);
      }, Jh = a._ScatterNd = function() {
        return (Jh = a._ScatterNd = a.asm.ScatterNd).apply(null, arguments);
      }, ef = a._SelectV2 = function() {
        return (ef = a._SelectV2 = a.asm.SelectV2).apply(null, arguments);
      }, tf = a._Sigmoid = function() {
        return (tf = a._Sigmoid = a.asm.Sigmoid).apply(null, arguments);
      }, nf = a._Sin = function() {
        return (nf = a._Sin = a.asm.Sin).apply(null, arguments);
      }, sf = a._Softmax = function() {
        return (sf = a._Softmax = a.asm.Softmax).apply(null, arguments);
      }, rf = a._SparseFillEmptyRows = function() {
        return (rf = a._SparseFillEmptyRows = a.asm.SparseFillEmptyRows).apply(null, arguments);
      }, af = a._SparseReshape = function() {
        return (af = a._SparseReshape = a.asm.SparseReshape).apply(null, arguments);
      }, of = a._SparseSegmentReduction = function() {
        return (of = a._SparseSegmentReduction = a.asm.SparseSegmentReduction).apply(null, arguments);
      }, uf = a._Sqrt = function() {
        return (uf = a._Sqrt = a.asm.Sqrt).apply(null, arguments);
      }, lf = a._Square = function() {
        return (lf = a._Square = a.asm.Square).apply(null, arguments);
      }, cf = a._SquaredDifference = function() {
        return (cf = a._SquaredDifference = a.asm.SquaredDifference).apply(null, arguments);
      }, df = a._Step = function() {
        return (df = a._Step = a.asm.Step).apply(null, arguments);
      }, pf = a._StridedSlice = function() {
        return (pf = a._StridedSlice = a.asm.StridedSlice).apply(null, arguments);
      }, hf = a._Sub = function() {
        return (hf = a._Sub = a.asm.Sub).apply(null, arguments);
      }, ff = a._Sum = function() {
        return (ff = a._Sum = a.asm.Sum).apply(null, arguments);
      }, mf = a._Tan = function() {
        return (mf = a._Tan = a.asm.Tan).apply(null, arguments);
      }, gf = a._Tanh = function() {
        return (gf = a._Tanh = a.asm.Tanh).apply(null, arguments);
      }, bf = a._Tile = function() {
        return (bf = a._Tile = a.asm.Tile).apply(null, arguments);
      }, yf = a._TopK = function() {
        return (yf = a._TopK = a.asm.TopK).apply(null, arguments);
      }, vf = a._Transform = function() {
        return (vf = a._Transform = a.asm.Transform).apply(null, arguments);
      }, xf = a._Transpose = function() {
        return (xf = a._Transpose = a.asm.Transpose).apply(null, arguments);
      }, wf = a.__FusedMatMul = function() {
        return (wf = a.__FusedMatMul = a.asm._FusedMatMul).apply(null, arguments);
      }, kf = a._malloc = function() {
        return (kf = a._malloc = a.asm.malloc).apply(null, arguments);
      }, If = a._free = function() {
        return (If = a._free = a.asm.free).apply(null, arguments);
      }, Sf = a.___errno_location = function() {
        return (Sf = a.___errno_location = a.asm.__errno_location).apply(null, arguments);
      }, Cf = a._emscripten_main_thread_process_queued_calls = function() {
        return (Cf = a._emscripten_main_thread_process_queued_calls = a.asm.emscripten_main_thread_process_queued_calls).apply(null, arguments);
      }, Rc = a.stackSave = function() {
        return (Rc = a.stackSave = a.asm.stackSave).apply(null, arguments);
      }, Dc = a.stackRestore = function() {
        return (Dc = a.stackRestore = a.asm.stackRestore).apply(null, arguments);
      }, xu = a.stackAlloc = function() {
        return (xu = a.stackAlloc = a.asm.stackAlloc).apply(null, arguments);
      }, Nf = a.dynCall_iijjiiii = function() {
        return (Nf = a.dynCall_iijjiiii = a.asm.dynCall_iijjiiii).apply(null, arguments);
      }, Tf = a.dynCall_jiji = function() {
        return (Tf = a.dynCall_jiji = a.asm.dynCall_jiji).apply(null, arguments);
      };
      a.cwrap = Se;
      var Ri;
      function wu(H) {
        this.name = "ExitStatus", this.message = "Program terminated with exit(" + H + ")", this.status = H;
      }
      tr = function H() {
        Ri || ku(), Ri || (tr = H);
      };
      function ku(H) {
        if (H = H || c, Fn > 0 || (uc(), Fn > 0))
          return;
        function J() {
          Ri || (Ri = true, a.calledRun = true, !oe && (lc(), i(a), a.onRuntimeInitialized && a.onRuntimeInitialized(), cc()));
        }
        a.setStatus ? (a.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            a.setStatus("");
          }, 1), J();
        }, 1)) : J();
      }
      a.run = ku;
      function jv(H) {
        re = H, fu() || (a.onExit && a.onExit(H), oe = true), d(H, new wu(H));
      }
      if (a.preInit)
        for (typeof a.preInit == "function" && (a.preInit = [a.preInit]); a.preInit.length > 0; )
          a.preInit.pop()();
      ku();
      var Di;
      u && (Di = { uncaughtException: process.listeners("uncaughtException").filter(function(H) {
        return !u.uncaughtException.indexOf(H) > -1;
      }), unhandledRejection: process.listeners("unhandledRejection").filter(function(H) {
        return !u.unhandledRejection.indexOf(H) > -1;
      }) });
      var Fi;
      if (typeof r != "undefined")
        Fi = r;
      else if (typeof WasmBackendModuleThreadedSimd != "undefined")
        Fi = WasmBackendModuleThreadedSimd;
      else
        throw new Error("Could not find wasm module in post.js");
      if (Di) {
        var $f = Fi._dispose;
        Fi._dispose = function() {
          $f(), Di.uncaughtException.forEach(function(H) {
            process.removeListener("uncaughtException", H);
          }), Di.unhandledRejection.forEach(function(H) {
            process.removeListener("unhandledRejection", H);
          });
        };
      }
      return r.ready;
    };
  })();
  typeof e == "object" && typeof t == "object" ? t.exports = n : typeof define == "function" && define.amd ? define([], function() {
    return n;
  }) : typeof e == "object" && (e.WasmBackendModule = n);
} });
var p$ = 1e-7;
var h$ = 1e-4;
var Hd = class {
  constructor(e, t) {
    this.backend = e, this.dataMover = t, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(e) {
    return this.data.has(e) || this.dataMover.moveData(this.backend, e), this.data.get(e);
  }
  set(e, t) {
    this.dataIdsCount++, this.data.set(e, t);
  }
  has(e) {
    return this.data.has(e);
  }
  delete(e) {
    return this.dataIdsCount--, this.data.delete(e);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
};
var sl = class {
  refCount(e) {
    return On("refCount");
  }
  incRef(e) {
    return On("incRef");
  }
  timerAvailable() {
    return true;
  }
  time(e) {
    return On("time");
  }
  read(e) {
    return On("read");
  }
  readSync(e) {
    return On("readSync");
  }
  readToGPU(e, t) {
    return On("readToGPU");
  }
  numDataIds() {
    return On("numDataIds");
  }
  disposeData(e, t) {
    return On("disposeData");
  }
  write(e, t, n) {
    return On("write");
  }
  move(e, t, n, s, r) {
    return On("move");
  }
  memory() {
    return On("memory");
  }
  floatPrecision() {
    return On("floatPrecision");
  }
  epsilon() {
    return this.floatPrecision() === 32 ? p$ : h$;
  }
  dispose() {
    return On("dispose");
  }
};
function On(e) {
  throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
function Kw(e) {
  let t = e.length, n = 0;
  for (; t > 0; )
    n = Math.random() * t | 0, t--, pd(e, t, n);
}
function f$(e, t) {
  if (e.length !== t.length)
    throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);
  let n = e.length, s = 0;
  for (; n > 0; )
    s = Math.random() * n | 0, n--, pd(e, n, s), pd(t, n, s);
}
function Wu(e, t, n) {
  return Math.max(e, Math.min(t, n));
}
function m$(e) {
  return e % 2 === 0 ? e : e + 1;
}
function pd(e, t, n) {
  let s = e[t];
  e[t] = e[n], e[n] = s;
}
function g$(e) {
  let t = 0;
  for (let n = 0; n < e.length; n++)
    t += e[n];
  return t;
}
function b$(e, t) {
  let n = Math.random();
  return t * n + (1 - n) * e;
}
function y$(e, t) {
  let n = 0;
  for (let s = 0; s < e.length; s++) {
    let r = Number(e[s]) - Number(t[s]);
    n += r * r;
  }
  return n;
}
function O(e, t) {
  if (!e)
    throw new Error(typeof t == "string" ? t : t());
}
function pn(e, t, n = "") {
  O(Ir(e, t), () => n + ` Shapes ${e} and ${t} must match`);
}
function ka(e) {
  O(e != null, () => "The input to the tensor constructor must be a non-null value.");
}
function ra(e, t = [], n = false) {
  if (t == null && (t = []), Array.isArray(e) || Yt(e) && !n)
    for (let s = 0; s < e.length; ++s)
      ra(e[s], t, n);
  else
    t.push(e);
  return t;
}
function pt(e) {
  if (e.length === 0)
    return 1;
  let t = e[0];
  for (let n = 1; n < e.length; n++)
    t *= e[n];
  return t;
}
function v$(e) {
  return e.length === 0;
}
function Ir(e, t) {
  if (e === t)
    return true;
  if (e == null || t == null || e.length !== t.length)
    return false;
  for (let n = 0; n < e.length; n++)
    if (e[n] !== t[n])
      return false;
  return true;
}
function Zi(e) {
  return e % 1 === 0;
}
function x$(e) {
  if (Math.tanh != null)
    return Math.tanh(e);
  if (e === 1 / 0)
    return 1;
  if (e === -1 / 0)
    return -1;
  {
    let t = Math.exp(2 * e);
    return (t - 1) / (t + 1);
  }
}
function w$(e) {
  let t = Math.ceil(Math.sqrt(e));
  return [t, Math.ceil(e / t)];
}
function k$(e) {
  let t = new Uint32Array(e);
  for (let n = 0; n < e; ++n)
    t[n] = n;
  return Kw(t), t;
}
function Mu(e, t) {
  return t <= e.length ? e : e + " ".repeat(t - e.length);
}
function I$(e, t = (s) => 0, n) {
  return new Promise((s, r) => {
    let a = 0, i = () => {
      if (e()) {
        s();
        return;
      }
      a++;
      let o = t(a);
      if (n != null && a >= n) {
        r();
        return;
      }
      setTimeout(i, o);
    };
    i();
  });
}
function S$(e, t) {
  let n = 1, s = -1;
  for (let a = 0; a < e.length; ++a)
    if (e[a] >= 0)
      n *= e[a];
    else if (e[a] === -1) {
      if (s !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${a}`);
      s = a;
    } else if (e[a] < 0)
      throw Error(`Shapes can not be < 0. Found ${e[a]} at dim ${a}`);
  if (s === -1) {
    if (t > 0 && t !== n)
      throw Error(`Size(${t}) must match the product of shape ${e}`);
    return e;
  }
  if (n === 0)
    throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);
  if (t % n !== 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);
  let r = e.slice();
  return r[s] = t / n, r;
}
function ts(e, t) {
  let n = t.length;
  return e = e == null ? t.map((s, r) => r) : [].concat(e), O(e.every((s) => s >= -n && s < n), () => `All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`), O(e.every((s) => Zi(s)), () => `All values in axis param must be integers but got axis ${e}`), e.map((s) => s < 0 ? n + s : s);
}
function Xw(e, t) {
  let n = [], s = [], r = t != null && Array.isArray(t) && t.length === 0, a = t == null || r ? null : ts(t, e).sort(), i = 0;
  for (let o = 0; o < e.length; ++o) {
    if (a != null) {
      if (a[i] === o && e[o] !== 1)
        throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`);
      (a[i] == null || a[i] > o) && e[o] === 1 && (n.push(e[o]), s.push(o)), a[i] <= o && i++;
    }
    e[o] !== 1 && (n.push(e[o]), s.push(o));
  }
  return { newShape: n, keptDims: s };
}
function Yw(e, t) {
  let n = null;
  if (e == null || e === "float32")
    n = new Float32Array(t);
  else if (e === "int32")
    n = new Int32Array(t);
  else if (e === "bool")
    n = new Uint8Array(t);
  else
    throw new Error(`Unknown data type ${e}`);
  return n;
}
function Qw(e, t) {
  let n = null;
  if (e == null || e === "float32")
    n = new Float32Array(t);
  else if (e === "int32")
    n = new Int32Array(t);
  else if (e === "bool")
    n = new Uint8Array(t);
  else if (e === "string")
    n = new Array(t);
  else
    throw new Error(`Unknown data type ${e}`);
  return n;
}
function Zw(e, t) {
  for (let n = 0; n < e.length; n++) {
    let s = e[n];
    if (isNaN(s) || !isFinite(s))
      throw Error(`A tensor of type ${t} being uploaded contains ${s}.`);
  }
}
function Jw(e) {
  return e === "bool" || e === "complex64" || e === "float32" || e === "int32" || e === "string";
}
function C$(e, t) {
  return !(t === "complex64" || t === "float32" && e !== "complex64" || t === "int32" && e !== "float32" && e !== "complex64" || t === "bool" && e === "bool");
}
function Yt(e) {
  return e instanceof Float32Array || e instanceof Int32Array || e instanceof Uint8Array || e instanceof Uint8ClampedArray;
}
function Yf(e) {
  if (e === "float32" || e === "int32")
    return 4;
  if (e === "complex64")
    return 8;
  if (e === "bool")
    return 1;
  throw new Error(`Unknown dtype ${e}`);
}
function ek(e) {
  if (e == null)
    return 0;
  let t = 0;
  return e.forEach((n) => t += n.length), t;
}
function or(e) {
  return typeof e == "string" || e instanceof String;
}
function tk(e) {
  return typeof e == "boolean";
}
function nk(e) {
  return typeof e == "number";
}
function qd(e) {
  return Array.isArray(e) ? qd(e[0]) : e instanceof Float32Array ? "float32" : e instanceof Int32Array || e instanceof Uint8Array || e instanceof Uint8ClampedArray ? "int32" : nk(e) ? "float32" : or(e) ? "string" : tk(e) ? "bool" : "float32";
}
function fr(e) {
  return !!(e && e.constructor && e.call && e.apply);
}
function hd(e, t) {
  for (let n = t; n < e; ++n)
    if (e % n === 0)
      return n;
  return e;
}
function oo(e) {
  let t = e.length;
  if (t < 2)
    return [];
  let n = new Array(t - 1);
  n[t - 2] = e[t - 1];
  for (let s = t - 3; s >= 0; --s)
    n[s] = n[s + 1] * e[s + 1];
  return n;
}
function sk(e, t, n, s = false) {
  let r = new Array();
  if (t.length === 1) {
    let a = t[0] * (s ? 2 : 1);
    for (let i = 0; i < a; i++)
      r[i] = n[e + i];
  } else {
    let a = t[0], i = t.slice(1), o = i.reduce((u, l) => u * l) * (s ? 2 : 1);
    for (let u = 0; u < a; u++)
      r[u] = sk(e + u * o, i, n, s);
  }
  return r;
}
function ji(e, t, n = false) {
  if (e.length === 0)
    return t[0];
  let s = e.reduce((r, a) => r * a) * (n ? 2 : 1);
  if (s === 0)
    return [];
  if (s !== t.length)
    throw new Error(`[${e}] does not match the input size ${t.length}${n ? " for a complex tensor" : ""}.`);
  return sk(0, e, t, n);
}
function rg(e, t) {
  let n = jd(e, t);
  for (let s = 0; s < n.length; s++)
    n[s] = 1;
  return n;
}
function jd(e, t) {
  if (t == null || t === "float32" || t === "complex64")
    return new Float32Array(e);
  if (t === "int32")
    return new Int32Array(e);
  if (t === "bool")
    return new Uint8Array(e);
  throw new Error(`Unknown data type ${t}`);
}
function N$(e, t) {
  let n = e.reduce((s, r) => s * r, 1);
  if (t == null || t === "float32")
    return ji(e, new Float32Array(n));
  if (t === "int32")
    return ji(e, new Int32Array(n));
  if (t === "bool")
    return ji(e, new Uint8Array(n));
  throw new Error(`Unknown data type ${t}`);
}
function ag(e) {
  e.forEach((t) => {
    O(Number.isInteger(t) && t >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${e}].`);
  });
}
function T$(e, t, n) {
  if (t === 0)
    return 0;
  if (t === 1)
    return e[0];
  let s = e[e.length - 1];
  for (let r = 0; r < e.length - 1; ++r)
    s += n[r] * e[r];
  return s;
}
function $$(e, t, n) {
  if (t === 0)
    return [];
  if (t === 1)
    return [e];
  let s = new Array(t);
  for (let r = 0; r < s.length - 1; ++r)
    s[r] = Math.floor(e / n[r]), e -= s[r] * n[r];
  return s[s.length - 1] = e, s;
}
function ig(e) {
  return e && e.then && typeof e.then == "function";
}
var sx = "tfjsflags";
var _$ = class {
  constructor(e) {
    this.global = e, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = A$, this.populateURLFlags();
  }
  setPlatform(e, t) {
    this.platform != null && (X().getBool("IS_TEST") || X().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)), this.platformName = e, this.platform = t;
  }
  registerFlag(e, t, n) {
    if (this.flagRegistry[e] = { evaluationFn: t, setHook: n }, this.urlFlags[e] != null) {
      let s = this.urlFlags[e];
      X().getBool("IS_TEST") || X().getBool("PROD") || console.warn(`Setting feature override from URL ${e}: ${s}.`), this.set(e, s);
    }
  }
  async getAsync(e) {
    return e in this.flags ? this.flags[e] : (this.flags[e] = await this.evaluateFlag(e), this.flags[e]);
  }
  get(e) {
    if (e in this.flags)
      return this.flags[e];
    let t = this.evaluateFlag(e);
    if (ig(t))
      throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[e] = t, this.flags[e];
  }
  getNumber(e) {
    return this.get(e);
  }
  getBool(e) {
    return this.get(e);
  }
  getFlags() {
    return this.flags;
  }
  get features() {
    return this.flags;
  }
  set(e, t) {
    if (this.flagRegistry[e] == null)
      throw new Error(`Cannot set flag ${e} as it has not been registered.`);
    this.flags[e] = t, this.flagRegistry[e].setHook != null && this.flagRegistry[e].setHook(t);
  }
  evaluateFlag(e) {
    if (this.flagRegistry[e] == null)
      throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);
    return this.flagRegistry[e].evaluationFn();
  }
  setFlags(e) {
    this.flags = Object.assign({}, e);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global == "undefined" || typeof this.global.location == "undefined" || typeof this.global.location.search == "undefined")
      return;
    let e = this.getQueryParams(this.global.location.search);
    sx in e && e[sx].split(",").forEach((n) => {
      let [s, r] = n.split(":");
      this.urlFlags[s] = R$(s, r);
    });
  }
};
function A$(e) {
  let t = {};
  return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (n, ...s) => (E$(t, s[0], s[1]), s.join("="))), t;
}
function E$(e, t, n) {
  e[decodeURIComponent(t)] = decodeURIComponent(n || "");
}
function R$(e, t) {
  if (t = t.toLowerCase(), t === "true" || t === "false")
    return t === "true";
  if (`${+t}` === t)
    return +t;
  throw new Error(`Could not parse value flag value ${t} for flag ${e}.`);
}
function X() {
  return rk;
}
var rk = null;
function D$(e) {
  rk = e;
}
var Of;
function ak() {
  if (Of == null) {
    let e;
    if (typeof window != "undefined")
      e = window;
    else if (typeof global != "undefined")
      e = global;
    else if (typeof process != "undefined")
      e = process;
    else if (typeof self != "undefined")
      e = self;
    else
      throw new Error("Could not find a global object");
    Of = e;
  }
  return Of;
}
function F$() {
  let e = ak();
  return e._tfGlobals == null && (e._tfGlobals = /* @__PURE__ */ new Map()), e._tfGlobals;
}
function og(e, t) {
  let n = F$();
  if (n.has(e))
    return n.get(e);
  {
    let s = t();
    return n.set(e, s), n.get(e);
  }
}
var uo = "Abs";
var rl = "Acos";
var al = "Acosh";
var Sr = "Add";
var Ia = "AddN";
var il = "All";
var ol = "Any";
var Sa = "ArgMax";
var ul = "ArgMin";
var ll = "Asin";
var cl = "Asinh";
var dl = "Atan";
var pl = "Atanh";
var hl = "Atan2";
var Ca = "AvgPool";
var ug = "AvgPoolGrad";
var Kd = "AvgPool3D";
var lg = "AvgPool3DGrad";
var Na = "BatchMatMul";
var lo = "BatchToSpaceND";
var cg = "Bincount";
var O$ = "BroadcastTo";
var dg = "BroadcastArgs";
var Ta = "Cast";
var $a = "Ceil";
var Cr = "ClipByValue";
var Xd = "Complex";
var Yd = "ComplexAbs";
var co = "Concat";
var _a = "Conv2D";
var pg = "Conv2DBackpropFilter";
var Aa = "Conv2DBackpropInput";
var Qd = "Conv3D";
var hg = "Conv3DBackpropFilterV2";
var fg = "Conv3DBackpropInputV2";
var Ea = "Cos";
var Ra = "Cosh";
var po = "Cumprod";
var Da = "Cumsum";
var ho = "CropAndResize";
var mg = "DenseBincount";
var fo = "DepthToSpace";
var Fa = "DepthwiseConv2dNative";
var gg = "DepthwiseConv2dNativeBackpropFilter";
var bg = "DepthwiseConv2dNativeBackpropInput";
var yg = "Diag";
var Zd = "Dilation2D";
var Qf = "Dilation2DBackpropInput";
var Zf = "Dilation2DBackpropFilter";
var Oa = "RealDiv";
var Jd = "Einsum";
var Pa = "Elu";
var vg = "EluGrad";
var fl = "Erf";
var mo = "Equal";
var za = "Exp";
var go = "ExpandDims";
var bo = "Expm1";
var xg = "FFT";
var ml = "Fill";
var yo = "FlipLeftRight";
var Ma = "Floor";
var La = "FloorDiv";
var Ba = "FusedBatchNorm";
var vo = "GatherV2";
var xo = "GatherNd";
var wo = "Greater";
var Va = "GreaterEqual";
var Wa = "Identity";
var wg = "IFFT";
var ep = "Imag";
var gl = "IsFinite";
var bl = "IsInf";
var yl = "IsNan";
var Ua = "LeakyRelu";
var ko = "Less";
var Io = "LessEqual";
var kg = "LinSpace";
var Ga = "Log";
var vl = "Log1p";
var So = "LogicalAnd";
var xl = "LogicalNot";
var tp = "LogicalOr";
var P$ = "LogSoftmax";
var np = "LRN";
var Ig = "LRNGrad";
var Ha = "Max";
var qa = "Maximum";
var ja = "MaxPool";
var Sg = "MaxPoolGrad";
var sp = "MaxPool3D";
var Cg = "MaxPool3DGrad";
var Ng = "MaxPoolWithArgmax";
var Ka = "Mean";
var Xa = "Min";
var Ya = "Minimum";
var Qa = "MirrorPad";
var wl = "Mod";
var Tg = "Multinomial";
var Za = "Multiply";
var Co = "Neg";
var No = "NotEqual";
var To = "NonMaxSuppressionV3";
var kl = "NonMaxSuppressionV4";
var $o = "NonMaxSuppressionV5";
var _o = "OnesLike";
var Ao = "OneHot";
var Eo = "Pack";
var Ja = "PadV2";
var Wde = "Pool";
var ei = "Pow";
var ti = "Prelu";
var ni = "Prod";
var Il = "Range";
var rp = "Real";
var Sl = "Reciprocal";
var si = "Relu";
var Ro = "Reshape";
var Cl = "ResizeNearestNeighbor";
var $g = "ResizeNearestNeighborGrad";
var ri = "ResizeBilinear";
var _g = "ResizeBilinearGrad";
var ai = "Relu6";
var Do = "Reverse";
var Fo = "Round";
var ii = "Rsqrt";
var Oo = "ScatterNd";
var Po = "Select";
var Nl = "Selu";
var zo = "Slice";
var oi = "Sin";
var Mo = "Sinh";
var Tl = "Sign";
var ui = "Sigmoid";
var $l = "Softplus";
var li = "Sqrt";
var ci = "Sum";
var Lo = "SpaceToBatchND";
var Bo = "SplitV";
var di = "Softmax";
var ap = "SparseFillEmptyRows";
var _l = "SparseReshape";
var ip = "SparseSegmentMean";
var op = "SparseSegmentSum";
var up = "SparseToDense";
var pi = "SquaredDifference";
var Al = "Square";
var Vo = "StridedSlice";
var lp = "StringNGrams";
var Ag = "StringSplit";
var Eg = "StringToHashBucketFast";
var hi = "Sub";
var Wo = "Tan";
var fi = "Tanh";
var Nr = "Tile";
var Uo = "TopK";
var Go = "Transform";
var mi = "Transpose";
var Rg = "Unique";
var Ho = "Unpack";
var cp = "UnsortedSegmentSum";
var qo = "ZerosLike";
var gi = "Step";
var fd = "FromPixels";
var jo = "RotateWithOffset";
var aa = "_FusedMatMul";
var ia = "FusedConv2D";
var oa = "FusedDepthwiseConv2D";
function ir(...e) {
  X().getBool("IS_TEST") || X().getBool("PROD") || console.warn(...e);
}
function z$(...e) {
  X().getBool("IS_TEST") || X().getBool("PROD") || console.log(...e);
}
var Ji = og("kernelRegistry", () => /* @__PURE__ */ new Map());
var Uu = og("gradRegistry", () => /* @__PURE__ */ new Map());
function Jf(e, t) {
  let n = Dg(e, t);
  return Ji.get(n);
}
function rx(e) {
  return Uu.get(e);
}
function em(e) {
  let t = Ji.entries(), n = [];
  for (; ; ) {
    let { done: s, value: r } = t.next();
    if (s)
      break;
    let [a, i] = r, [o] = a.split("_");
    o === e && n.push(i);
  }
  return n;
}
function El(e) {
  let { kernelName: t, backendName: n } = e, s = Dg(t, n);
  Ji.has(s) && ir(`The kernel '${t}' for backend '${n}' is already registered`), Ji.set(s, e);
}
function M$(e) {
  let { kernelName: t } = e;
  Uu.has(t) && X().getBool("DEBUG") && ir(`Overriding the gradient for '${t}'`), Uu.set(t, e);
}
function Ude(e, t) {
  let n = Dg(e, t);
  if (!Ji.has(n))
    throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);
  Ji.delete(n);
}
function Gde(e) {
  if (!Uu.has(e))
    throw new Error(`The gradient '${e}' for backend is not registered`);
  Uu.delete(e);
}
function Hde(e, t) {
  em(e).forEach((s) => {
    let r = Object.assign({}, s, { backendName: t });
    El(r);
  });
}
function Dg(e, t) {
  return `${t}_${e}`;
}
var w = {};
Ae(w, { arraysEqual: () => Ir, assert: () => O, assertNonNegativeIntegerDimensions: () => ag, assertNonNull: () => ka, assertShapesMatch: () => pn, bytesFromStringArray: () => ek, bytesPerElement: () => Yf, checkConversionForErrors: () => Zw, clamp: () => Wu, computeStrides: () => oo, createScalarValue: () => G$, createShuffledIndices: () => k$, decodeString: () => md, distSquared: () => y$, encodeString: () => Dl, fetch: () => q$, fingerPrint64: () => U$, flatten: () => ra, getArrayFromDType: () => Qw, getTypedArrayFromDType: () => Yw, hasEncodingLoss: () => C$, hexToLong: () => Rl, indexToLoc: () => $$, inferDtype: () => qd, inferFromImplicitShape: () => S$, isBoolean: () => tk, isFunction: () => fr, isInt: () => Zi, isNumber: () => nk, isPromise: () => ig, isScalarShape: () => v$, isString: () => or, isTypedArray: () => Yt, isValidDtype: () => Jw, locToIndex: () => T$, makeOnesTypedArray: () => rg, makeZerosNestedTypedArray: () => N$, makeZerosTypedArray: () => jd, nearestDivisor: () => hd, nearestLargerEven: () => m$, now: () => Gu, parseAxisParam: () => ts, randUniform: () => b$, repeatedTry: () => I$, rightPad: () => Mu, shuffle: () => Kw, shuffleCombo: () => f$, sizeFromShape: () => pt, sizeToSquarishShape: () => w$, squeezeShape: () => Xw, sum: () => g$, swap: () => pd, tanh: () => x$, toNestedArray: () => ji, toTypedArray: () => dp });
var ax = wa(YT());
var jr = ax.default || ax;
function Rl(e) {
  return jr.fromString(e, true, 16);
}
var ik = Rl("c3a5c85c97cb3127");
var Hr = Rl("b492b66fbe98f273");
var an = Rl("9ae16a3b2f90404f");
function tm(e) {
  return e.xor(e.shru(47));
}
function ok(e, t, n) {
  let s = e.slice(t, t + n);
  return jr.fromBytes(Array.from(s), true, true);
}
function lt(e, t) {
  return ok(e, t, 8);
}
function ix(e, t) {
  return ok(e, t, 4);
}
function Lt(e, t) {
  return t === 0 ? e : e.shru(t).or(e.shl(64 - t));
}
function lr(e, t, n = Rl("9ddfea08eb382d69")) {
  let s = e.xor(t).mul(n);
  s = s.xor(s.shru(47));
  let r = t.xor(s).mul(n);
  return r = r.xor(r.shru(47)), r = r.mul(n), r;
}
function L$(e, t, n, s, r, a) {
  r = r.add(e), a = Lt(a.add(r).add(s), 21);
  let i = r;
  return r = r.add(t), r = r.add(n), a = a.add(Lt(r, 44)), [r.add(s), a.add(i)];
}
function Vc(e, t, n, s) {
  return L$(lt(e, t), lt(e, t + 8), lt(e, t + 16), lt(e, t + 24), n, s);
}
function B$(e, t = e.length) {
  if (t >= 8) {
    let n = an.add(t * 2), s = lt(e, 0).add(an), r = lt(e, t - 8), a = Lt(r, 37).mul(n).add(s), i = Lt(s, 25).add(r).mul(n);
    return lr(a, i, n);
  }
  if (t >= 4) {
    let n = an.add(t * 2), s = ix(e, 0);
    return lr(s.shl(3).add(t), ix(e, t - 4), n);
  }
  if (t > 0) {
    let n = e[0], s = e[t >> 1], r = e[t - 1], a = n + (s << 8), i = t + (r << 2);
    return tm(an.mul(a).xor(ik.mul(i))).mul(an);
  }
  return an;
}
function V$(e, t = e.length) {
  let n = an.add(t * 2), s = lt(e, 0).mul(Hr), r = lt(e, 8), a = lt(e, t - 8).mul(n), i = lt(e, t - 16).mul(an);
  return lr(Lt(s.add(r), 43).add(Lt(a, 30)).add(i), s.add(Lt(r.add(an), 18)).add(a), n);
}
function W$(e, t = e.length) {
  let n = an.add(t * 2), s = lt(e, 0).mul(an), r = lt(e, 8), a = lt(e, t - 8).mul(n), i = lt(e, t - 16).mul(an), o = Lt(s.add(r), 43).add(Lt(a, 30)).add(i), u = lr(o, s.add(Lt(r.add(an), 18)).add(a), n), l = lt(e, 16).mul(n), c = lt(e, 24), p = o.add(lt(e, t - 32)).mul(n), d = u.add(lt(e, t - 24)).mul(n);
  return lr(Lt(l.add(c), 43).add(Lt(p, 30)).add(d), l.add(Lt(c.add(s), 18)).add(p), n);
}
function U$(e, t = e.length) {
  let n = jr.fromNumber(81, true);
  if (t <= 32)
    return t <= 16 ? B$(e, t) : V$(e, t);
  if (t <= 64)
    return W$(e, t);
  let s = n, r = n.mul(Hr).add(113), a = tm(r.mul(an).add(113)).mul(an), i = [jr.UZERO, jr.UZERO], o = [jr.UZERO, jr.UZERO];
  s = s.mul(an).add(lt(e, 0));
  let u = 0, l = (t - 1 >> 6) * 64, c = l + (t - 1 & 63) - 63;
  do
    s = Lt(s.add(r).add(i[0]).add(lt(e, u + 8)), 37).mul(Hr), r = Lt(r.add(i[1]).add(lt(e, u + 48)), 42).mul(Hr), s = s.xor(o[1]), r = r.add(i[0]).add(lt(e, u + 40)), a = Lt(a.add(o[0]), 33).mul(Hr), i = Vc(e, u, i[1].mul(Hr), s.add(o[0])), o = Vc(e, u + 32, a.add(o[1]), r.add(lt(e, u + 16))), [a, s] = [s, a], u += 64;
  while (u !== l);
  let p = Hr.add(a.and(255).shl(1));
  return u = c, o[0] = o[0].add(t - 1 & 63), i[0] = i[0].add(o[0]), o[0] = o[0].add(i[0]), s = Lt(s.add(r).add(i[0]).add(lt(e, u + 8)), 37).mul(p), r = Lt(r.add(i[1]).add(lt(e, u + 48)), 42).mul(p), s = s.xor(o[1].mul(9)), r = r.add(i[0].mul(9).add(lt(e, u + 40))), a = Lt(a.add(o[0]), 33).mul(p), i = Vc(e, u, i[1].mul(p), s.add(o[0])), o = Vc(e, u + 32, a.add(o[1]), r.add(lt(e, u + 16))), [a, s] = [s, a], lr(lr(i[0], o[0], p).add(tm(r).mul(ik)).add(a), lr(i[1], o[1], p).add(s), p);
}
function G$(e, t) {
  return t === "string" ? Dl(e) : dp([e], t);
}
function H$(e, t) {
  return e instanceof Float32Array && t === "float32" || e instanceof Int32Array && t === "int32" || e instanceof Uint8Array && t === "bool";
}
function dp(e, t) {
  if (t === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(e) && (e = ra(e)), X().getBool("DEBUG") && Zw(e, t), H$(e, t))
    return e;
  if (t == null || t === "float32" || t === "complex64")
    return new Float32Array(e);
  if (t === "int32")
    return new Int32Array(e);
  if (t === "bool") {
    let n = new Uint8Array(e.length);
    for (let s = 0; s < n.length; ++s)
      Math.round(e[s]) !== 0 && (n[s] = 1);
    return n;
  } else
    throw new Error(`Unknown data type ${t}`);
}
function Gu() {
  return X().platform.now();
}
function q$(e, t) {
  return X().platform.fetch(e, t);
}
function Dl(e, t = "utf-8") {
  return t = t || "utf-8", X().platform.encode(e, t);
}
function md(e, t = "utf-8") {
  return t = t || "utf-8", X().platform.decode(e, t);
}
var j$ = class {
  constructor(e, t) {
    this.backendTimer = e, this.logger = t, t == null && (this.logger = new X$());
  }
  profileKernel(e, t, n) {
    let s, r = () => {
      s = n();
    }, a, i = Gu();
    if (this.backendTimer.timerAvailable())
      a = this.backendTimer.time(r);
    else {
      r();
      for (let u of s)
        u.dataSync();
      a = Promise.resolve({ kernelMs: Gu() - i });
    }
    if (X().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let u = 0; u < s.length; u++) {
        let l = s[u];
        l.data().then((c) => {
          K$(c, l.dtype, e);
        });
      }
    return { kernelName: e, outputs: s, inputs: t, timeMs: a.then((u) => u.kernelMs), extraInfo: a.then((u) => u.getExtraProfileInfo != null ? u.getExtraProfileInfo() : "") };
  }
  logKernelProfile(e) {
    let { kernelName: t, outputs: n, timeMs: s, inputs: r, extraInfo: a } = e;
    n.forEach((i) => {
      Promise.all([i.data(), s, a]).then((o) => {
        this.logger.logKernelProfile(t, i, o[0], o[1], r, o[2]);
      });
    });
  }
};
function K$(e, t, n) {
  if (t !== "float32")
    return false;
  for (let s = 0; s < e.length; s++) {
    let r = e[s];
    if (isNaN(r) || !isFinite(r))
      return console.warn(`Found ${r} in the result of '${n}'`), true;
  }
  return false;
}
var X$ = class {
  logKernelProfile(e, t, n, s, r, a) {
    let i = typeof s == "number" ? Mu(`${s}ms`, 9) : s.error, o = Mu(e, 25), u = t.rank, l = t.size, c = Mu(t.shape.toString(), 14), p = "";
    for (let d in r) {
      let h = r[d];
      if (h != null) {
        let f = h.shape || t.shape, m = f.length;
        p += `${d}: ${m}D ${m > 0 ? f : ""} `;
      }
    }
    console.log(`%c${o}	%c${i}	%c${u}D ${c}	%c${l}	%c${p}	%c${a}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
};
function Y$(e, t, n) {
  let s = {}, r = {};
  for (let u = 0; u < t.length; u++)
    s[t[u].id] = true;
  for (let u = 0; u < e.length; u++) {
    let l = e[u], c = l.inputs;
    for (let p in c) {
      let d = c[p], h = false;
      for (let f = 0; f < t.length; f++)
        if (s[d.id]) {
          l.outputs.forEach((m) => s[m.id] = true), h = true, r[l.id] = true;
          break;
        }
      if (h)
        break;
    }
  }
  let a = {};
  a[n.id] = true;
  let i = {};
  for (let u = e.length - 1; u >= 0; u--) {
    let l = e[u], c = l.inputs;
    for (let p = 0; p < l.outputs.length; p++)
      if (a[l.outputs[p].id]) {
        for (let d in c)
          a[c[d].id] = true, i[l.id] = true;
        break;
      }
  }
  let o = [];
  for (let u = 0; u < e.length; u++) {
    let l = e[u];
    if (r[l.id] && i[l.id]) {
      let c = {};
      for (let d in l.inputs) {
        let h = l.inputs[d];
        s[h.id] && (c[d] = h);
      }
      let p = Object.assign({}, l);
      p.inputs = c, p.outputs = l.outputs, o.push(p);
    }
  }
  return o;
}
function Q$(e, t, n, s) {
  for (let r = t.length - 1; r >= 0; r--) {
    let a = t[r], i = [];
    if (a.outputs.forEach((u) => {
      let l = e[u.id];
      l != null ? i.push(l) : i.push(null);
    }), a.gradient == null)
      throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);
    let o = a.gradient(i);
    for (let u in a.inputs) {
      if (!(u in o))
        throw new Error(`Cannot backprop through input ${u}. Available gradients found: ${Object.keys(o)}.`);
      let l = n(() => o[u]());
      if (l.dtype !== "float32")
        throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${u} must have 'float32' dtype, but has '${l.dtype}'`);
      let c = a.inputs[u];
      if (!Ir(l.shape, c.shape))
        throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${u}' has shape '${l.shape}', which does not match the shape of the input '${c.shape}'`);
      if (e[c.id] == null)
        e[c.id] = l;
      else {
        let p = e[c.id];
        e[c.id] = s(p, l), p.dispose();
      }
    }
  }
}
var ox = 20;
var Cu = 3;
var Pf = 7;
function Z$(e, t, n, s) {
  let r = oo(t), a = J$(e, t, n, r), i = t.length, o = ed(e, t, n, r, a), u = ["Tensor"];
  return s && (u.push(`  dtype: ${n}`), u.push(`  rank: ${i}`), u.push(`  shape: [${t}]`), u.push("  values:")), u.push(o.map((l) => "    " + l).join(`
`)), u.join(`
`);
}
function J$(e, t, n, s) {
  let r = pt(t), a = s[s.length - 1], i = new Array(a).fill(0), o = t.length, u = n === "complex64" ? Au(e) : e;
  if (o > 1)
    for (let l = 0; l < r / a; l++) {
      let c = l * a;
      for (let p = 0; p < a; p++)
        i[p] = Math.max(i[p], _u(u[c + p], 0, n).length);
    }
  return i;
}
function _u(e, t, n) {
  let s;
  return Array.isArray(e) ? s = `${parseFloat(e[0].toFixed(Pf))} + ${parseFloat(e[1].toFixed(Pf))}j` : or(e) ? s = `'${e}'` : n === "bool" ? s = uk(e) : s = parseFloat(e.toFixed(Pf)).toString(), Mu(s, t);
}
function uk(e) {
  return e === 0 ? "false" : "true";
}
function ed(e, t, n, s, r, a = true) {
  let i = n === "complex64" ? 2 : 1, o = t[0], u = t.length;
  if (u === 0) {
    if (n === "complex64") {
      let m = Au(e);
      return [_u(m[0], 0, n)];
    }
    return n === "bool" ? [uk(e[0])] : [e[0].toString()];
  }
  if (u === 1) {
    if (o > ox) {
      let g = Cu * i, b = Array.from(e.slice(0, g)), y = Array.from(e.slice((o - Cu) * i, o * i));
      return n === "complex64" && (b = Au(b), y = Au(y)), ["[" + b.map((v, x) => _u(v, r[x], n)).join(", ") + ", ..., " + y.map((v, x) => _u(v, r[o - Cu + x], n)).join(", ") + "]"];
    }
    let m = n === "complex64" ? Au(e) : Array.from(e);
    return ["[" + m.map((g, b) => _u(g, r[b], n)).join(", ") + "]"];
  }
  let l = t.slice(1), c = s.slice(1), p = s[0] * i, d = [];
  if (o > ox) {
    for (let m = 0; m < Cu; m++) {
      let g = m * p, b = g + p;
      d.push(...ed(e.slice(g, b), l, n, c, r, false));
    }
    d.push("...");
    for (let m = o - Cu; m < o; m++) {
      let g = m * p, b = g + p;
      d.push(...ed(e.slice(g, b), l, n, c, r, m === o - 1));
    }
  } else
    for (let m = 0; m < o; m++) {
      let g = m * p, b = g + p;
      d.push(...ed(e.slice(g, b), l, n, c, r, m === o - 1));
    }
  let h = u === 2 ? "," : "";
  d[0] = "[" + d[0] + h;
  for (let m = 1; m < d.length - 1; m++)
    d[m] = " " + d[m] + h;
  let f = `,
`;
  for (let m = 2; m < u; m++)
    f += `
`;
  return d[d.length - 1] = " " + d[d.length - 1] + "]" + (a ? "" : f), d;
}
function Au(e) {
  let t = [];
  for (let n = 0; n < e.length; n += 2)
    t.push([e[n], e[n + 1]]);
  return t;
}
var Vt = class {
  constructor(e, t, n) {
    if (this.dtype = t, this.shape = e.slice(), this.size = pt(e), n != null) {
      let s = n.length;
      O(s === this.size, () => `Length of values '${s}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (t === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = n || Qw(t, this.size), this.strides = oo(e);
  }
  set(e, ...t) {
    t.length === 0 && (t = [0]), O(t.length === this.rank, () => `The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);
    let n = this.locToIndex(t);
    this.values[n] = e;
  }
  get(...e) {
    e.length === 0 && (e = [0]);
    let t = 0;
    for (let s of e) {
      if (s < 0 || s >= this.shape[t]) {
        let r = `Requested out of range element at ${e}.   Buffer shape=${this.shape}`;
        throw new Error(r);
      }
      t++;
    }
    let n = e[e.length - 1];
    for (let s = 0; s < e.length - 1; ++s)
      n += this.strides[s] * e[s];
    return this.values[n];
  }
  locToIndex(e) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return e[0];
    let t = e[e.length - 1];
    for (let n = 0; n < e.length - 1; ++n)
      t += this.strides[n] * e[n];
    return t;
  }
  indexToLoc(e) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [e];
    let t = new Array(this.shape.length);
    for (let n = 0; n < t.length - 1; ++n)
      t[n] = Math.floor(e / this.strides[n]), e -= t[n] * this.strides[n];
    return t[t.length - 1] = e, t;
  }
  get rank() {
    return this.shape.length;
  }
  toTensor() {
    return cs().makeTensor(this.values, this.shape, this.dtype);
  }
};
var cs = null;
var Gi = null;
var e_ = null;
function t_(e) {
  cs = e;
}
function n_(e) {
  Gi = e;
}
function s_(e) {
  e_ = e;
}
var et = class {
  constructor(e, t, n, s) {
    this.kept = false, this.isDisposedInternal = false, this.shape = e.slice(), this.dtype = t || "float32", this.size = pt(e), this.strides = oo(e), this.dataId = n, this.id = s, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  async buffer() {
    let e = await this.data();
    return Gi.buffer(this.shape, this.dtype, e);
  }
  bufferSync() {
    return Gi.buffer(this.shape, this.dtype, this.dataSync());
  }
  async array() {
    let e = await this.data();
    return ji(this.shape, e, this.dtype === "complex64");
  }
  arraySync() {
    return ji(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  async data() {
    this.throwIfDisposed();
    let e = cs().read(this.dataId);
    if (this.dtype === "string") {
      let t = await e;
      try {
        return t.map((n) => md(n));
      } catch (n) {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return e;
  }
  dataToGPU(e) {
    return this.throwIfDisposed(), cs().readToGPU(this.dataId, e);
  }
  dataSync() {
    this.throwIfDisposed();
    let e = cs().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return e.map((t) => md(t));
      } catch (t) {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return e;
  }
  async bytes() {
    this.throwIfDisposed();
    let e = await cs().read(this.dataId);
    return this.dtype === "string" ? e : new Uint8Array(e.buffer);
  }
  dispose() {
    this.isDisposed || (cs().disposeTensor(this), this.isDisposedInternal = true);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  print(e = false) {
    return Gi.print(this, e);
  }
  clone() {
    return this.throwIfDisposed(), Gi.clone(this);
  }
  toString(e = false) {
    let t = this.dataSync();
    return Z$(t, this.shape, this.dtype, e);
  }
  cast(e) {
    return this.throwIfDisposed(), Gi.cast(this, e);
  }
  variable(e = true, t, n) {
    return this.throwIfDisposed(), cs().makeVariable(this, e, t, n);
  }
};
Object.defineProperty(et, Symbol.hasInstance, { value: (e) => !!e && e.data != null && e.dataSync != null && e.throwIfDisposed != null });
function r_() {
  return og("Tensor", () => et);
}
r_();
var gd = class extends et {
  constructor(e, t, n, s) {
    super(e.shape, e.dtype, e.dataId, s), this.trainable = t, this.name = n;
  }
  assign(e) {
    if (e.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);
    if (!Ir(e.shape, this.shape))
      throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);
    cs().disposeTensor(this), this.dataId = e.dataId, cs().incRef(this, null);
  }
  dispose() {
    cs().disposeVariable(this), this.isDisposedInternal = true;
  }
};
Object.defineProperty(gd, Symbol.hasInstance, { value: (e) => e instanceof et && e.assign != null && e.assign instanceof Function });
var _s = {};
Ae(_s, { assertTypesMatch: () => hk, getTensorsInContainer: () => Fg, isTensorInList: () => o_, makeTypesMatch: () => vt });
var a_ = ((e) => (e.R0 = "R0", e.R1 = "R1", e.R2 = "R2", e.R3 = "R3", e.R4 = "R4", e.R5 = "R5", e.R6 = "R6", e))(a_ || {});
var lk = ((e) => (e.float32 = "float32", e.int32 = "int32", e.bool = "int32", e.complex64 = "complex64", e))(lk || {});
var ck = ((e) => (e.float32 = "float32", e.int32 = "int32", e.bool = "bool", e.complex64 = "complex64", e))(ck || {});
var dk = ((e) => (e.float32 = "float32", e.int32 = "float32", e.bool = "float32", e.complex64 = "complex64", e))(dk || {});
var pk = ((e) => (e.float32 = "complex64", e.int32 = "complex64", e.bool = "complex64", e.complex64 = "complex64", e))(pk || {});
var i_ = { float32: dk, int32: lk, bool: ck, complex64: pk };
function ln(e, t) {
  if (e === "string" || t === "string") {
    if (e === "string" && t === "string")
      return "string";
    throw new Error(`Can not upcast ${e} with ${t}`);
  }
  return i_[e][t];
}
function pp(e) {
  return ln(e, "int32");
}
function vt(e, t) {
  if (e.dtype === t.dtype)
    return [e, t];
  let n = ln(e.dtype, t.dtype);
  return [e.cast(n), t.cast(n)];
}
function hk(e, t) {
  O(e.dtype === t.dtype, () => `The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`);
}
function o_(e, t) {
  return t.some((n) => n.id === e.id);
}
function Fg(e) {
  let t = [];
  return fk(e, t, /* @__PURE__ */ new Set()), t;
}
function fk(e, t, n) {
  if (e == null)
    return;
  if (e instanceof et) {
    t.push(e);
    return;
  }
  if (!u_(e))
    return;
  let s = e;
  for (let r in s) {
    let a = s[r];
    n.has(a) || (n.add(a), fk(a, t, n));
  }
}
function u_(e) {
  return Array.isArray(e) || typeof e == "object";
}
function zf(e) {
  return e.kernelName != null;
}
var ux = class {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = false, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null, get kernelNames() {
      return Array.from(new Set(this.kernels.map((e) => e.name)));
    } };
  }
  dispose() {
    for (let e in this.registeredVariables)
      this.registeredVariables[e].dispose();
  }
};
var nm = class {
  constructor(e) {
    this.ENV = e, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new ux();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    let e = this.getSortedBackends();
    for (let t = 0; t < e.length; t++) {
      let n = e[t];
      if (await this.initializeBackend(n).success) {
        await this.setBackend(n);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      let { name: e, asyncInit: t } = this.initializeBackendsAndReturnBest();
      if (t)
        throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(e);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(e) {
    if (!(e in this.registry))
      if (e in this.registryFactory) {
        let { asyncInit: t } = this.initializeBackend(e);
        if (t)
          return null;
      } else
        return null;
    return this.registry[e];
  }
  findBackendFactory(e) {
    return e in this.registryFactory ? this.registryFactory[e].factory : null;
  }
  registerBackend(e, t, n = 1) {
    return e in this.registryFactory ? (ir(`${e} backend was already registered. Reusing existing backend factory.`), false) : (this.registryFactory[e] = { factory: t, priority: n }, true);
  }
  async setBackend(e) {
    if (this.registryFactory[e] == null)
      throw new Error(`Backend name '${e}' not found in registry`);
    if (this.backendName = e, this.registry[e] == null) {
      this.backendInstance = null;
      let { success: t, asyncInit: n } = this.initializeBackend(e);
      if (!(n ? await t : t))
        return false;
    }
    return this.backendInstance = this.registry[e], this.setupRegisteredKernels(), this.profiler = new j$(this.backendInstance), true;
  }
  setupRegisteredKernels() {
    em(this.backendName).forEach((t) => {
      t.setupFunc != null && t.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(e) {
    em(e).forEach((n) => {
      n.disposeFunc != null && n.disposeFunc(this.registry[e]);
    });
  }
  initializeBackend(e) {
    let t = this.registryFactory[e];
    if (t == null)
      throw new Error(`Cannot initialize backend ${e}, no registration found.`);
    try {
      let n = t.factory();
      if (n && !(n instanceof sl) && typeof n.then == "function") {
        let s = ++this.pendingBackendInitId, r = n.then((a) => s < this.pendingBackendInitId ? false : (this.registry[e] = a, this.pendingBackendInit = null, true)).catch((a) => (s < this.pendingBackendInitId || (this.pendingBackendInit = null, ir(`Initialization of backend ${e} failed`), ir(a.stack || a.message)), false));
        return this.pendingBackendInit = r, { success: r, asyncInit: true };
      } else
        return this.registry[e] = n, { success: true, asyncInit: false };
    } catch (n) {
      return ir(`Initialization of backend ${e} failed`), ir(n.stack || n.message), { success: false, asyncInit: false };
    }
  }
  removeBackend(e) {
    if (!(e in this.registryFactory))
      throw new Error(`${e} backend not found in registry`);
    this.backendName === e && this.pendingBackendInit != null && this.pendingBackendInitId++, e in this.registry && (this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e]), delete this.registryFactory[e], this.backendName === e && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((e, t) => this.registryFactory[t].priority - this.registryFactory[e].priority);
  }
  initializeBackendsAndReturnBest() {
    let e = this.getSortedBackends();
    for (let t = 0; t < e.length; t++) {
      let n = e[t], { success: s, asyncInit: r } = this.initializeBackend(n);
      if (r || s)
        return { name: n, asyncInit: r };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(e, t) {
    let n = this.state.tensorInfo.get(t), s = n.backend, r = this.readSync(t), a = s.refCount(t);
    s.disposeData(t, true), n.backend = e, e.move(t, r, n.shape, n.dtype, a), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(e, t) {
    let n = null;
    if (t == null) {
      if (typeof e != "function")
        throw new Error("Please provide a function to tidy()");
      t = e;
    } else {
      if (typeof e != "string" && !(e instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof t != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      n = e;
    }
    let s;
    return this.scopedRun(() => this.startScope(n), () => this.endScope(s), () => (s = t(), s instanceof Promise && console.error("Cannot return a Promise inside of tidy."), s));
  }
  scopedRun(e, t, n) {
    e();
    try {
      let s = n();
      return t(), s;
    } catch (s) {
      throw t(), s;
    }
  }
  nextTensorId() {
    return nm.nextTensorId++;
  }
  nextVariableId() {
    return nm.nextVariableId++;
  }
  clone(e) {
    let t = M.runKernel(Wa, { x: e }), n = { x: e }, s = (a) => ({ x: () => {
      let i = "float32", o = { x: a }, u = { dtype: i };
      return M.runKernel(Ta, o, u);
    } }), r = [];
    return this.addTapeNode(this.state.activeScope.name, n, [t], s, r, {}), t;
  }
  runKernel(e, t, n) {
    if (this.backendName == null && this.backend, !(Jf(e, this.backendName) != null))
      throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: e, inputs: t, attrs: n });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(e, t, n) {
    let s = this.backend.numDataIds(), r = 0;
    n.forEach((o) => {
      r += o.dtype === "complex64" ? 3 : 1;
    });
    let a = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i = s - t - r - a;
    if (i > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`);
  }
  runKernelFunc(e) {
    let t, n = [], s = this.isTapeOn(), r = this.state.numBytes, a = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let i;
    this.backendName == null && this.backend;
    let o, u = zf(e) ? e.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (zf(e)) {
      let { kernelName: h, inputs: f, attrs: m } = e;
      this.backendName == null && this.backend;
      let g = Jf(h, this.backendName);
      O(g != null, () => `Cannot find registered kernel '${h}' for backend '${this.backendName}'`), i = () => {
        let b = this.backend.numDataIds();
        o = g.kernelFunc({ inputs: f, attrs: m, backend: this.backend });
        let y = Array.isArray(o) ? o : [o];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(h, b, y);
        let v = y.map((x) => {
          if (x.rank != null)
            return x;
          let { dataId: k, shape: S, dtype: $ } = x;
          return this.makeTensorFromDataId(k, S, $);
        });
        if (s) {
          let x = this.getTensorsForGradient(h, f, v);
          n = this.saveTensorsForBackwardMode(x);
        }
        return v;
      };
    } else {
      let { forwardFunc: h } = e, f = (m) => {
        !s || (n = m.map((g) => this.keep(this.clone(g))));
      };
      i = () => {
        let m = this.backend.numDataIds();
        o = this.tidy(() => h(this.backend, f));
        let g = Array.isArray(o) ? o : [o];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(u, m, g), g;
      };
    }
    let { inputs: l, attrs: c } = e, p = zf(e) ? null : e.backwardsFunc, d;
    return this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
      !this.ENV.getBool("DEBUG") && !this.state.profiling ? t = i() : (d = this.profiler.profileKernel(u, l, () => i()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(d), t = d.outputs);
    }), s && this.addTapeNode(u, l, t, p, n, c), this.state.profiling && this.state.activeProfile.kernels.push({ name: u, bytesAdded: this.state.numBytes - r, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - a, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(l).map((h) => l[h] != null ? l[h].shape : null), outputShapes: t.map((h) => h.shape), kernelTimeMs: d.timeMs, extraInfo: d.extraInfo }), Array.isArray(o) ? t : t[0];
  }
  saveTensorsForBackwardMode(e) {
    return e.map((n) => this.keep(this.clone(n)));
  }
  getTensorsForGradient(e, t, n) {
    let s = rx(e);
    if (s != null) {
      let r = s.inputsToSave || [], a = s.outputsToSave || [], i;
      s.saveAllInputs ? (O(Array.isArray(t), () => "saveAllInputs is true, expected inputs to be an array."), i = Object.keys(t).map((u) => t[u])) : i = r.map((u) => t[u]);
      let o = n.filter((u, l) => a[l]);
      return i.concat(o);
    }
    return [];
  }
  makeTensor(e, t, n, s) {
    if (e == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    n = n || "float32", s = s || this.backend;
    let r = e;
    n === "string" && or(e[0]) && (r = e.map((o) => Dl(o)));
    let a = s.write(r, t, n), i = new et(t, n, a, this.nextTensorId());
    if (this.trackTensor(i, s), n === "string") {
      let o = this.state.tensorInfo.get(a), u = ek(r);
      this.state.numBytes += u - o.bytes, o.bytes = u;
    }
    return i;
  }
  makeTensorFromDataId(e, t, n, s) {
    n = n || "float32";
    let r = new et(t, n, e, this.nextTensorId());
    return this.trackTensor(r, s), r;
  }
  makeVariable(e, t = true, n, s) {
    n = n || this.nextVariableId().toString(), s != null && s !== e.dtype && (e = e.cast(s));
    let r = new gd(e, t, n, this.nextTensorId());
    if (this.state.registeredVariables[r.name] != null)
      throw new Error(`Variable with name ${r.name} was already registered`);
    return this.state.registeredVariables[r.name] = r, this.incRef(r, this.backend), r;
  }
  trackTensor(e, t) {
    this.state.numTensors++, e.dtype === "string" && this.state.numStringTensors++;
    let n = 0;
    e.dtype !== "complex64" && e.dtype !== "string" && (n = e.size * Yf(e.dtype)), this.state.numBytes += n, this.state.tensorInfo.has(e.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(e.dataId, { backend: t || this.backend, dtype: e.dtype, shape: e.shape, bytes: n })), e instanceof gd || this.track(e);
  }
  incRef(e, t) {
    this.trackTensor(e, t), this.backend.incRef(e.dataId);
  }
  removeDataId(e, t) {
    this.state.tensorInfo.has(e) && this.state.tensorInfo.get(e).backend === t && (this.state.tensorInfo.delete(e), this.state.numDataBuffers--);
  }
  disposeTensor(e) {
    if (!this.state.tensorInfo.has(e.dataId))
      return;
    let t = this.state.tensorInfo.get(e.dataId);
    if (this.state.numTensors--, e.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= t.bytes), e.dtype !== "complex64" && e.dtype !== "string") {
      let n = e.size * Yf(e.dtype);
      this.state.numBytes -= n;
    }
    t.backend.disposeData(e.dataId) && this.removeDataId(e.dataId, t.backend);
  }
  disposeVariables() {
    for (let e in this.state.registeredVariables) {
      let t = this.state.registeredVariables[e];
      this.disposeVariable(t);
    }
  }
  disposeVariable(e) {
    this.disposeTensor(e), this.state.registeredVariables[e.name] != null && delete this.state.registeredVariables[e.name];
  }
  memory() {
    let e = this.backend.memory();
    return e.numTensors = this.state.numTensors, e.numDataBuffers = this.state.numDataBuffers, e.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (e.unreliable = true, e.reasons == null && (e.reasons = []), e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), e;
  }
  async profile(e) {
    this.state.profiling = true;
    let t = this.state.numBytes, n = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await e(), this.state.profiling = false, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((s) => s.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - t, this.state.activeProfile.newTensors = this.state.numTensors - n;
    for (let s of this.state.activeProfile.kernels)
      s.kernelTimeMs = await s.kernelTimeMs, s.extraInfo = await s.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(e, t, n, s, r, a) {
    let i = { id: this.state.nextTapeNodeId++, kernelName: e, inputs: t, outputs: n, saved: r }, o = rx(e);
    o != null && (s = o.gradFunc), s != null && (i.gradient = (u) => (u = u.map((l, c) => {
      if (l == null) {
        let p = n[c], d = jd(p.size, p.dtype);
        return this.makeTensor(d, p.shape, p.dtype);
      }
      return l;
    }), s(u.length > 1 ? u : u[0], r, a))), this.state.activeTape.push(i);
  }
  keep(e) {
    return e.kept = true, e;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  startScope(e) {
    let t = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
    e && (t.name = e), this.state.scopeStack.push(t), this.state.activeScope = t;
  }
  endScope(e) {
    let t = Fg(e), n = new Set(t.map((r) => r.id));
    for (let r = 0; r < this.state.activeScope.track.length; r++) {
      let a = this.state.activeScope.track[r];
      !a.kept && !n.has(a.id) && a.dispose();
    }
    let s = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], t.forEach((r) => {
      !r.kept && r.scopeId === s.id && this.track(r);
    });
  }
  gradients(e, t, n, s = false) {
    if (O(t.length > 0, () => "gradients() received an empty list of xs."), n != null && n.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);
    let r = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", e));
    O(r instanceof et, () => "The result y returned by f() must be a tensor.");
    let a = Y$(this.state.activeTape, t, r);
    if (!s && a.length === 0 && t.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      let i = {};
      i[r.id] = n == null ? l_(r.shape) : n, Q$(i, a, (u) => this.tidy(u), c_);
      let o = t.map((u) => i[u.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((u) => {
        for (let l of u.saved)
          l.dispose();
      }), this.state.activeTape = null), { value: r, grads: o };
    });
  }
  customGrad(e) {
    return O(fr(e), () => "The f passed in customGrad(f) must be a function."), (...t) => {
      O(t.every((i) => i instanceof et), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let n, s = {};
      t.forEach((i, o) => {
        s[o] = i;
      });
      let r = (i, o) => (n = e(...t, o), O(n.value instanceof et, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), O(fr(n.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), n.value), a = (i, o) => {
        let u = n.gradFunc(i, o), l = Array.isArray(u) ? u : [u];
        O(l.length === t.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), O(l.every((p) => p instanceof et), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        let c = {};
        return l.forEach((p, d) => {
          c[d] = () => p;
        }), c;
      };
      return this.runKernelFunc({ forwardFunc: r, backwardsFunc: a, inputs: s });
    };
  }
  readSync(e) {
    return this.state.tensorInfo.get(e).backend.readSync(e);
  }
  read(e) {
    return this.state.tensorInfo.get(e).backend.read(e);
  }
  readToGPU(e, t) {
    return this.state.tensorInfo.get(e).backend.readToGPU(e, t);
  }
  async time(e) {
    let t = Gu(), n = await this.backend.time(e);
    return n.wallMs = Gu() - t, n;
  }
  track(e) {
    return this.state.activeScope != null && (e.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(e)), e;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new ux();
    for (let e in this.registry)
      this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
};
var Og = nm;
Og.nextTensorId = 0;
Og.nextVariableId = 0;
function l_(e) {
  let t = rg(pt(e), "float32");
  return M.makeTensor(t, e, "float32");
}
function mk() {
  let e = ak();
  if (e._tfengine == null) {
    let t = new _$(e);
    e._tfengine = new Og(t);
  }
  return D$(e._tfengine.ENV), t_(() => e._tfengine), e._tfengine;
}
var M = mk();
function c_(e, t) {
  let n = { a: e, b: t };
  return M.runKernel(Sr, n);
}
var hp = {};
Ae(hp, { isBrowser: () => gk, isMobile: () => h_, mockIsMobile: () => p_ });
function d_() {
  return typeof navigator != "undefined" && navigator != null;
}
var sm;
function p_(e) {
  sm = e;
}
function h_(e) {
  if (sm !== void 0)
    return sm;
  if (e || d_()) {
    if (e || (e = navigator), e.product === "ReactNative")
      return true;
    let t = e.userAgent || e.vendor || (typeof window != "undefined" ? window.opera : "");
    if (!t) {
      let n = e;
      return n.userAgentData && n.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4));
  }
  return false;
}
function gk() {
  return typeof window != "undefined" && window.document != null || typeof WorkerGlobalScope != "undefined";
}
var Kn = X();
Kn.registerFlag("DEBUG", () => false, (e) => {
  e && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
Kn.registerFlag("IS_BROWSER", () => gk());
Kn.registerFlag("IS_NODE", () => typeof process != "undefined" && typeof process.versions != "undefined" && typeof process.versions.node != "undefined");
Kn.registerFlag("IS_CHROME", () => typeof navigator != "undefined" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
Kn.registerFlag("PROD", () => false);
Kn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => Kn.getBool("DEBUG"));
Kn.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => true);
Kn.registerFlag("IS_TEST", () => false);
Kn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => true);
Kn.registerFlag("WRAP_TO_IMAGEBITMAP", () => false);
Kn.registerFlag("ENGINE_COMPILE_ONLY", () => false);
function Rs(e, t) {
  let n = e;
  if (Yt(e))
    return t === "string" ? [] : [e.length];
  if (!Array.isArray(e))
    return [];
  let s = [];
  for (; Array.isArray(n) || Yt(n) && t !== "string"; )
    s.push(n.length), n = n[0];
  return Array.isArray(e) && X().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && bk(e, s, []), s;
}
function bk(e, t, n) {
  if (n = n || [], !Array.isArray(e) && !Yt(e)) {
    O(t.length === 0, () => `Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);
    return;
  }
  O(t.length > 0, () => `Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`), O(e.length === t[0], () => `Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`);
  let s = t.slice(1);
  for (let r = 0; r < e.length; ++r)
    bk(e[r], s, n.concat(r));
}
function lx(e, t, n, s) {
  if (e !== "string_or_numeric") {
    if (e == null)
      throw new Error("Expected dtype cannot be null.");
    if (e !== "numeric" && e !== t || e === "numeric" && t === "string")
      throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`);
  }
}
function _(e, t, n, s = "numeric") {
  if (e instanceof et)
    return lx(s, e.dtype, t, n), e;
  let r = qd(e);
  if (r !== "string" && ["bool", "int32", "float32"].indexOf(s) >= 0 && (r = s), lx(s, r, t, n), e == null || !Yt(e) && !Array.isArray(e) && typeof e != "number" && typeof e != "boolean" && typeof e != "string") {
    let u = e == null ? "null" : e.constructor.name;
    throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${u}'`);
  }
  let a = Rs(e, r);
  !Yt(e) && !Array.isArray(e) && (e = [e]);
  let o = r !== "string" ? dp(e, r) : ra(e, [], true);
  return M.makeTensor(o, a, r);
}
function Hu(e, t, n, s = "numeric") {
  if (!Array.isArray(e))
    throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return e.map((a, i) => _(a, `${t}[${i}]`, n, s));
}
var f_ = "__op";
function L(e) {
  let t = Object.keys(e);
  if (t.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);
  let n = t[0], s = e[n];
  n.endsWith("_") && (n = n.substring(0, n.length - 1)), n = n + f_;
  let r = (...a) => {
    M.startScope(n);
    try {
      let i = s(...a);
      return ig(i) && console.error("Cannot return a Promise inside of tidy."), M.endScope(i), i;
    } catch (i) {
      throw M.endScope(null), i;
    }
  };
  return Object.defineProperty(r, "name", { value: n, configurable: true }), r;
}
function m_(e, t) {
  let n = _(e, "real", "complex"), s = _(t, "imag", "complex");
  pn(n.shape, s.shape, `real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);
  let r = { real: n, imag: s };
  return M.runKernel(Xd, r);
}
var ua = L({ complex_: m_ });
function Tr(e, t, n, s) {
  if (s == null && (s = qd(e)), s === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (!Yt(e) && !Array.isArray(e) && typeof e != "number" && typeof e != "boolean" && typeof e != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (t != null) {
    ag(t);
    let r = pt(t), a = pt(n);
    O(r === a, () => `Based on the provided shape, [${t}], the tensor should have ${r} values but has ${a}`);
    for (let i = 0; i < n.length; ++i) {
      let o = n[i], u = i === n.length - 1 ? o !== pt(t.slice(i)) : true;
      O(n[i] === t[i] || !u, () => `Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `);
    }
  }
  return !Yt(e) && !Array.isArray(e) && (e = [e]), t = t || n, e = s !== "string" ? dp(e, s) : ra(e, [], true), M.makeTensor(e, t, s);
}
function fs(e, t, n) {
  let s = Rs(e, n);
  return Tr(e, t, s, n);
}
var rm = { float32: 4, float16: 2, int32: 4, uint16: 2, uint8: 1, bool: 1, complex64: 8 };
var bd = 4;
async function g_(e, t) {
  let n = [], s = [], r = Array.isArray(e) ? e.map((i) => i.name) : Object.keys(e);
  for (let i = 0; i < r.length; ++i) {
    let o = r[i], u = Array.isArray(e) ? e[i].tensor : e[o];
    if (u.dtype !== "float32" && u.dtype !== "int32" && u.dtype !== "bool" && u.dtype !== "string" && u.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${o}': ${u.dtype}`);
    let l = { name: o, shape: u.shape, dtype: u.dtype };
    if (u.dtype === "string") {
      let c = new Promise(async (p) => {
        let d = await u.bytes(), h = d.reduce((g, b) => g + b.length, 0) + bd * d.length, f = new Uint8Array(h), m = 0;
        for (let g = 0; g < d.length; g++) {
          let b = d[g], y = new Uint8Array(new Uint32Array([b.length]).buffer);
          f.set(y, m), m += bd, f.set(b, m), m += b.length;
        }
        p(f);
      });
      s.push(c);
    } else
      s.push(u.data());
    t != null && (l.group = t), n.push(l);
  }
  let a = await Promise.all(s);
  return { data: b_(a), specs: n };
}
function yk(e, t) {
  let n = {}, s, r = 0;
  for (let a of t) {
    let i = a.name, o = a.dtype, u = a.shape, l = pt(u), c;
    if ("quantization" in a) {
      let p = a.quantization;
      if (p.dtype === "uint8" || p.dtype === "uint16") {
        if (!("min" in p && "scale" in p))
          throw new Error(`Weight ${a.name} with quantization ${p.dtype} doesn't have corresponding metadata min and scale.`);
      } else if (p.dtype === "float16") {
        if (o !== "float32")
          throw new Error(`Weight ${a.name} is quantized with ${p.dtype} which only supports weights of type float32 not ${o}.`);
      } else
        throw new Error(`Weight ${a.name} has unknown quantization dtype ${p.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
      let d = rm[p.dtype], h = e.slice(r, r + l * d), f = p.dtype === "uint8" ? new Uint8Array(h) : new Uint16Array(h);
      if (o === "float32")
        if (p.dtype === "uint8" || p.dtype === "uint16") {
          c = new Float32Array(f.length);
          for (let m = 0; m < f.length; m++) {
            let g = f[m];
            c[m] = g * p.scale + p.min;
          }
        } else if (p.dtype === "float16")
          s === void 0 && (s = I_()), c = s(f);
        else
          throw new Error(`Unsupported quantization type ${p.dtype} for weight type float32.`);
      else if (o === "int32") {
        if (p.dtype !== "uint8" && p.dtype !== "uint16")
          throw new Error(`Unsupported quantization type ${p.dtype} for weight type int32.`);
        c = new Int32Array(f.length);
        for (let m = 0; m < f.length; m++) {
          let g = f[m];
          c[m] = Math.round(g * p.scale + p.min);
        }
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${o}`);
      r += l * d;
    } else if (o === "string") {
      let p = pt(a.shape);
      c = [];
      for (let d = 0; d < p; d++) {
        let h = new Uint32Array(e.slice(r, r + bd))[0];
        r += bd;
        let f = new Uint8Array(e.slice(r, r + h));
        c.push(f), r += h;
      }
    } else {
      let p = rm[o], d = e.slice(r, r + l * p);
      if (o === "float32")
        c = new Float32Array(d);
      else if (o === "int32")
        c = new Int32Array(d);
      else if (o === "bool")
        c = new Uint8Array(d);
      else if (o === "complex64") {
        c = new Float32Array(d);
        let h = new Float32Array(c.length / 2), f = new Float32Array(c.length / 2);
        for (let b = 0; b < h.length; b++)
          h[b] = c[b * 2], f[b] = c[b * 2 + 1];
        let m = fs(h, u, "float32"), g = fs(f, u, "float32");
        n[i] = ua(m, g), m.dispose(), g.dispose();
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${o}`);
      r += l * p;
    }
    o !== "complex64" && (n[i] = fs(c, u, o));
  }
  return n;
}
function b_(e) {
  if (e === null)
    throw new Error(`Invalid input value: ${JSON.stringify(e)}`);
  let t = 0, n = [];
  e.forEach((a) => {
    if (t += a.byteLength, n.push(a.byteLength === a.buffer.byteLength ? a : new a.constructor(a)), !(a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${a.constructor.name}`);
  });
  let s = new Uint8Array(t), r = 0;
  return n.forEach((a) => {
    s.set(new Uint8Array(a.buffer), r), r += a.byteLength;
  }), s.buffer;
}
var Pg = typeof Buffer != "undefined" && (typeof Blob == "undefined" || typeof atob == "undefined" || typeof btoa == "undefined");
function cx(e) {
  return Pg ? Buffer.byteLength(e) : new Blob([e]).size;
}
function y_(e) {
  if (Pg)
    return Buffer.from(e).toString("base64");
  let t = new Uint8Array(e), n = "";
  for (let s = 0, r = t.length; s < r; s++)
    n += String.fromCharCode(t[s]);
  return btoa(n);
}
function v_(e) {
  if (Pg) {
    let s = Buffer.from(e, "base64");
    return s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength);
  }
  let t = atob(e), n = new Uint8Array(t.length);
  for (let s = 0; s < t.length; ++s)
    n.set([t.charCodeAt(s)], s);
  return n.buffer;
}
function zg(e) {
  if (e.length === 1)
    return e[0];
  let t = 0;
  e.forEach((r) => {
    t += r.byteLength;
  });
  let n = new Uint8Array(t), s = 0;
  return e.forEach((r) => {
    n.set(new Uint8Array(r), s), s += r.byteLength;
  }), n.buffer;
}
function dx(e) {
  let t = "/";
  for (e = e.trim(); e.endsWith(t); )
    e = e.slice(0, e.length - 1);
  let n = e.split(t);
  return n[n.length - 1];
}
function vk(e, t) {
  let n = { modelTopology: e.modelTopology, format: e.format, generatedBy: e.generatedBy, convertedBy: e.convertedBy, weightsManifest: t };
  return e.signature != null && (n.signature = e.signature), e.userDefinedMetadata != null && (n.userDefinedMetadata = e.userDefinedMetadata), e.modelInitializer != null && (n.modelInitializer = e.modelInitializer), e.trainingConfig != null && (n.trainingConfig = e.trainingConfig), n;
}
async function Mg(e, t) {
  let n = { modelTopology: e.modelTopology, format: e.format, generatedBy: e.generatedBy, convertedBy: e.convertedBy };
  if (e.trainingConfig != null && (n.trainingConfig = e.trainingConfig), e.weightsManifest != null) {
    let [s, r] = await t(e.weightsManifest);
    n.weightSpecs = s, n.weightData = r;
  }
  return e.signature != null && (n.signature = e.signature), e.userDefinedMetadata != null && (n.userDefinedMetadata = e.userDefinedMetadata), e.modelInitializer != null && (n.modelInitializer = e.modelInitializer), n;
}
function Fl(e) {
  if (e.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return { dateSaved: new Date(), modelTopologyType: "JSON", modelTopologyBytes: e.modelTopology == null ? 0 : cx(JSON.stringify(e.modelTopology)), weightSpecsBytes: e.weightSpecs == null ? 0 : cx(JSON.stringify(e.weightSpecs)), weightDataBytes: e.weightData == null ? 0 : e.weightData.byteLength };
}
function x_() {
  let e = (n) => {
    let s = n << 13, r = 0;
    for (; (s & 8388608) === 0; )
      r -= 8388608, s <<= 1;
    return s &= -8388609, r += 947912704, s | r;
  }, t = new Uint32Array(2048);
  t[0] = 0;
  for (let n = 1; n < 1024; n++)
    t[n] = e(n);
  for (let n = 1024; n < 2048; n++)
    t[n] = 939524096 + (n - 1024 << 13);
  return t;
}
function w_() {
  let e = new Uint32Array(64);
  e[0] = 0, e[31] = 1199570944, e[32] = 2147483648, e[63] = 3347054592;
  for (let t = 1; t < 31; t++)
    e[t] = t << 23;
  for (let t = 33; t < 63; t++)
    e[t] = 2147483648 + (t - 32 << 23);
  return e;
}
function k_() {
  let e = new Uint32Array(64);
  for (let t = 0; t < 64; t++)
    e[t] = 1024;
  return e[0] = e[32] = 0, e;
}
function I_() {
  let e = x_(), t = w_(), n = k_();
  return (s) => {
    let r = new ArrayBuffer(4 * s.length), a = new Uint32Array(r);
    for (let i = 0; i < s.length; i++) {
      let o = s[i], u = e[n[o >> 10] + (o & 1023)] + t[o >> 10];
      a[i] = u;
    }
    return new Float32Array(r);
  };
}
var xt = class {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return xt.instance == null && (xt.instance = new xt()), xt.instance;
  }
  static registerSaveRouter(e) {
    xt.getInstance().saveRouters.push(e);
  }
  static registerLoadRouter(e) {
    xt.getInstance().loadRouters.push(e);
  }
  static getSaveHandlers(e) {
    return xt.getHandlers(e, "save");
  }
  static getLoadHandlers(e, t) {
    return xt.getHandlers(e, "load", t);
  }
  static getHandlers(e, t, n) {
    let s = [];
    return (t === "load" ? xt.getInstance().loadRouters : xt.getInstance().saveRouters).forEach((a) => {
      let i = a(e, n);
      i !== null && s.push(i);
    }), s;
  }
};
var S_ = (e) => xt.registerSaveRouter(e);
var C_ = (e) => xt.registerLoadRouter(e);
var N_ = (e) => xt.getSaveHandlers(e);
var T_ = (e, t) => xt.getLoadHandlers(e, t);
var am = "tensorflowjs";
var im = 1;
var Qr = "models_store";
var ur = "model_info_store";
function xk() {
  if (!X().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  let e = typeof window == "undefined" ? self : window, t = e.indexedDB || e.mozIndexedDB || e.webkitIndexedDB || e.msIndexedDB || e.shimIndexedDB;
  if (t == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return t;
}
function om(e) {
  let t = e.result;
  t.createObjectStore(Qr, { keyPath: "modelPath" }), t.createObjectStore(ur, { keyPath: "modelPath" });
}
var la = class {
  constructor(e) {
    if (this.indexedDB = xk(), e == null || !e)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = e;
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, e);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  databaseAction(e, t) {
    return new Promise((n, s) => {
      let r = this.indexedDB.open(am, im);
      r.onupgradeneeded = () => om(r), r.onsuccess = () => {
        let a = r.result;
        if (t == null) {
          let i = a.transaction(Qr, "readonly"), u = i.objectStore(Qr).get(this.modelPath);
          u.onsuccess = () => {
            if (u.result == null)
              return a.close(), s(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            n(u.result.modelArtifacts);
          }, u.onerror = (l) => (a.close(), s(u.error)), i.oncomplete = () => a.close();
        } else {
          let i = Fl(t), o = a.transaction(ur, "readwrite"), u = o.objectStore(ur), l = u.put({ modelPath: this.modelPath, modelArtifactsInfo: i }), c;
          l.onsuccess = () => {
            c = a.transaction(Qr, "readwrite");
            let d = c.objectStore(Qr).put({ modelPath: this.modelPath, modelArtifacts: t, modelArtifactsInfo: i });
            d.onsuccess = () => n({ modelArtifactsInfo: i }), d.onerror = (h) => {
              u = o.objectStore(ur);
              let f = u.delete(this.modelPath);
              f.onsuccess = () => (a.close(), s(d.error)), f.onerror = (m) => (a.close(), s(d.error));
            };
          }, l.onerror = (p) => (a.close(), s(l.error)), o.oncomplete = () => {
            c == null ? a.close() : c.oncomplete = () => a.close();
          };
        }
      }, r.onerror = (a) => s(r.error);
    });
  }
};
la.URL_SCHEME = "indexeddb://";
var wk = (e) => X().getBool("IS_BROWSER") && !Array.isArray(e) && e.startsWith(la.URL_SCHEME) ? $_(e.slice(la.URL_SCHEME.length)) : null;
xt.registerSaveRouter(wk);
xt.registerLoadRouter(wk);
function $_(e) {
  return new la(e);
}
function __(e) {
  return e.startsWith(la.URL_SCHEME) ? e.slice(la.URL_SCHEME.length) : e;
}
var A_ = class {
  constructor() {
    this.indexedDB = xk();
  }
  async listModels() {
    return new Promise((e, t) => {
      let n = this.indexedDB.open(am, im);
      n.onupgradeneeded = () => om(n), n.onsuccess = () => {
        let s = n.result, r = s.transaction(ur, "readonly"), i = r.objectStore(ur).getAll();
        i.onsuccess = () => {
          let o = {};
          for (let u of i.result)
            o[u.modelPath] = u.modelArtifactsInfo;
          e(o);
        }, i.onerror = (o) => (s.close(), t(i.error)), r.oncomplete = () => s.close();
      }, n.onerror = (s) => t(n.error);
    });
  }
  async removeModel(e) {
    return e = __(e), new Promise((t, n) => {
      let s = this.indexedDB.open(am, im);
      s.onupgradeneeded = () => om(s), s.onsuccess = () => {
        let r = s.result, a = r.transaction(ur, "readwrite"), i = a.objectStore(ur), o = i.get(e), u;
        o.onsuccess = () => {
          if (o.result == null)
            return r.close(), n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));
          {
            let l = i.delete(e), c = () => {
              u = r.transaction(Qr, "readwrite");
              let d = u.objectStore(Qr).delete(e);
              d.onsuccess = () => t(o.result.modelArtifactsInfo), d.onerror = (h) => n(o.error);
            };
            l.onsuccess = c, l.onerror = (p) => (c(), r.close(), n(o.error));
          }
        }, o.onerror = (l) => (r.close(), n(o.error)), a.oncomplete = () => {
          u == null ? r.close() : u.oncomplete = () => r.close();
        };
      }, s.onerror = (r) => n(s.error);
    });
  }
};
var Gs = "/";
var Hi = "tensorflowjs_models";
var kk = "info";
var E_ = "model_topology";
var R_ = "weight_specs";
var D_ = "weight_data";
var F_ = "model_metadata";
function Ik(e) {
  return { info: [Hi, e, kk].join(Gs), topology: [Hi, e, E_].join(Gs), weightSpecs: [Hi, e, R_].join(Gs), weightData: [Hi, e, D_].join(Gs), modelMetadata: [Hi, e, F_].join(Gs) };
}
function Sk(e) {
  for (let t of Object.values(e))
    window.localStorage.removeItem(t);
}
function O_(e) {
  let t = e.split(Gs);
  if (t.length < 3)
    throw new Error(`Invalid key format: ${e}`);
  return t.slice(1, t.length - 1).join(Gs);
}
function P_(e) {
  return e.startsWith(ca.URL_SCHEME) ? e.slice(ca.URL_SCHEME.length) : e;
}
var ca = class {
  constructor(e) {
    if (!X().getBool("IS_BROWSER") || typeof window == "undefined" || typeof window.localStorage == "undefined")
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, e == null || !e)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = e, this.keys = Ik(this.modelPath);
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      let t = JSON.stringify(e.modelTopology), n = JSON.stringify(e.weightSpecs), s = Fl(e);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(s)), this.LS.setItem(this.keys.topology, t), this.LS.setItem(this.keys.weightSpecs, n), this.LS.setItem(this.keys.weightData, y_(e.weightData));
        let r = { format: e.format, generatedBy: e.generatedBy, convertedBy: e.convertedBy, signature: e.signature != null ? e.signature : void 0, userDefinedMetadata: e.userDefinedMetadata != null ? e.userDefinedMetadata : void 0, modelInitializer: e.modelInitializer != null ? e.modelInitializer : void 0, trainingConfig: e.trainingConfig != null ? e.trainingConfig : void 0 };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(r)), { modelArtifactsInfo: s };
      } catch (r) {
        throw Sk(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`);
      }
    }
  }
  async load() {
    let e = JSON.parse(this.LS.getItem(this.keys.info));
    if (e == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (e.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    let t = {}, n = JSON.parse(this.LS.getItem(this.keys.topology));
    if (n == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    t.modelTopology = n;
    let s = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (s == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    t.weightSpecs = s;
    let r = this.LS.getItem(this.keys.modelMetadata);
    if (r != null) {
      let i = JSON.parse(r);
      t.format = i.format, t.generatedBy = i.generatedBy, t.convertedBy = i.convertedBy, i.signature != null && (t.signature = i.signature), i.userDefinedMetadata != null && (t.userDefinedMetadata = i.userDefinedMetadata), i.modelInitializer != null && (t.modelInitializer = i.modelInitializer), i.trainingConfig != null && (t.trainingConfig = i.trainingConfig);
    }
    let a = this.LS.getItem(this.keys.weightData);
    if (a == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return t.weightData = v_(a), t;
  }
};
ca.URL_SCHEME = "localstorage://";
var Ck = (e) => X().getBool("IS_BROWSER") && !Array.isArray(e) && e.startsWith(ca.URL_SCHEME) ? z_(e.slice(ca.URL_SCHEME.length)) : null;
xt.registerSaveRouter(Ck);
xt.registerLoadRouter(Ck);
function z_(e) {
  return new ca(e);
}
var M_ = class {
  constructor() {
    O(X().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), O(typeof window == "undefined" || typeof window.localStorage != "undefined", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    let e = {}, t = Hi + Gs, n = Gs + kk;
    for (let s = 0; s < this.LS.length; ++s) {
      let r = this.LS.key(s);
      if (r.startsWith(t) && r.endsWith(n)) {
        let a = O_(r);
        e[a] = JSON.parse(this.LS.getItem(r));
      }
    }
    return e;
  }
  async removeModel(e) {
    e = P_(e);
    let t = Ik(e);
    if (this.LS.getItem(t.info) == null)
      throw new Error(`Cannot find model at path '${e}'`);
    let n = JSON.parse(this.LS.getItem(t.info));
    return Sk(t), n;
  }
};
var Ki = "://";
var zn = class {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return zn.instance == null && (zn.instance = new zn()), zn.instance;
  }
  static registerManager(e, t) {
    O(e != null, () => "scheme must not be undefined or null."), e.endsWith(Ki) && (e = e.slice(0, e.indexOf(Ki))), O(e.length > 0, () => "scheme must not be an empty string.");
    let n = zn.getInstance();
    O(n.managers[e] == null, () => `A model store manager is already registered for scheme '${e}'.`), n.managers[e] = t;
  }
  static getManager(e) {
    let t = this.getInstance().managers[e];
    if (t == null)
      throw new Error(`Cannot find model manager for scheme '${e}'`);
    return t;
  }
  static getSchemes() {
    return Object.keys(this.getInstance().managers);
  }
};
function td(e) {
  if (e.indexOf(Ki) === -1)
    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${zn.getSchemes().join(",")}`);
  return { scheme: e.split(Ki)[0], path: e.split(Ki)[1] };
}
async function Nk(e, t, n = false) {
  O(e !== t, () => `Old path and new path are the same: '${e}'`);
  let s = xt.getLoadHandlers(e);
  O(s.length > 0, () => `Copying failed because no load handler is found for source URL ${e}.`), O(s.length < 2, () => `Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`);
  let r = s[0], a = xt.getSaveHandlers(t);
  O(a.length > 0, () => `Copying failed because no save handler is found for destination URL ${t}.`), O(a.length < 2, () => `Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);
  let i = a[0], o = td(e).scheme, u = td(e).path, l = o === td(e).scheme, c = await r.load();
  n && l && await zn.getManager(o).removeModel(u);
  let p = await i.save(c);
  return n && !l && await zn.getManager(o).removeModel(u), p.modelArtifactsInfo;
}
async function L_() {
  let e = zn.getSchemes(), t = {};
  for (let n of e) {
    let s = await zn.getManager(n).listModels();
    for (let r in s) {
      let a = n + Ki + r;
      t[a] = s[r];
    }
  }
  return t;
}
async function B_(e) {
  let t = td(e);
  return zn.getManager(t.scheme).removeModel(t.path);
}
async function V_(e, t) {
  return Nk(e, t, false);
}
async function W_(e, t) {
  return Nk(e, t, true);
}
var U_ = class {
  fetch(e, t) {
    return fetch(e, t);
  }
  now() {
    return performance.now();
  }
  encode(e, t) {
    if (t !== "utf-8" && t !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(e);
  }
  decode(e, t) {
    return new TextDecoder(t).decode(e);
  }
};
if (X().get("IS_BROWSER")) {
  X().setPlatform("browser", new U_());
  try {
    zn.registerManager(ca.URL_SCHEME, new M_());
  } catch (e) {
  }
  try {
    zn.registerManager(la.URL_SCHEME, new A_());
  } catch (e) {
  }
}
var G_ = { importFetch: () => QT() };
var Mf;
var H_ = class {
  constructor() {
    this.util = ZT(), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(e, t) {
    return X().global.fetch != null ? X().global.fetch(e, t) : (Mf == null && (Mf = G_.importFetch()), Mf(e, t));
  }
  now() {
    let e = process.hrtime();
    return e[0] * 1e3 + e[1] / 1e6;
  }
  encode(e, t) {
    if (t !== "utf-8" && t !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);
    return this.textEncoder.encode(e);
  }
  decode(e, t) {
    return e.length === 0 ? "" : new this.util.TextDecoder(t).decode(e);
  }
};
X().get("IS_NODE") && !X().get("IS_BROWSER") && X().setPlatform("node", new H_());
function De(e, t = "float32", n) {
  return t = t || "float32", ag(e), new Vt(e, t, n);
}
function q_(e, t) {
  let n = _(e, "x", "cast");
  if (!Jw(t))
    throw new Error(`Failed to cast to unknown dtype ${t}`);
  if (t === "string" && n.dtype !== "string" || t !== "string" && n.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  let s = { x: n }, r = { dtype: t };
  return M.runKernel(Ta, s, r);
}
var ce = L({ cast_: q_ });
function j_(e) {
  let n = { x: _(e, "x", "clone", "string_or_numeric") };
  return M.runKernel(Wa, n);
}
var cr = L({ clone_: j_ });
function K_(e, t = false) {
  console.log(e.toString(t));
}
mk();
var X_ = { buffer: De, cast: ce, clone: cr, print: K_ };
n_(X_);
var An = {};
Ae(An, { browserFiles: () => nA, browserHTTPRequest: () => oA, concatenateArrayBuffers: () => zg, copyModel: () => V_, decodeWeights: () => yk, encodeWeights: () => g_, fromMemory: () => lA, getLoadHandlers: () => T_, getModelArtifactsForJSON: () => Mg, getModelArtifactsInfoForJSON: () => Fl, getSaveHandlers: () => N_, http: () => Bg, isHTTPScheme: () => lm, listModels: () => L_, loadWeights: () => sA, moveModel: () => W_, registerLoadRouter: () => C_, registerSaveRouter: () => S_, removeModel: () => B_, weightsLoaderFactory: () => $k, withSaveHandler: () => cA });
var Y_ = "model";
var Q_ = ".json";
var Z_ = ".weights.bin";
function px(e) {
  return new Promise((t) => setTimeout(t)).then(e);
}
var um = class {
  constructor(e) {
    if (!X().getBool("IS_BROWSER"))
      throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    e.startsWith(um.URL_SCHEME) && (e = e.slice(um.URL_SCHEME.length)), (e == null || e.length === 0) && (e = Y_), this.modelJsonFileName = e + Q_, this.weightDataFileName = e + Z_;
  }
  async save(e) {
    if (typeof document == "undefined")
      throw new Error("Browser downloads are not supported in this environment since `document` is not present");
    let t = window.URL.createObjectURL(new Blob([e.weightData], { type: "application/octet-stream" }));
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
    {
      let n = [{ paths: ["./" + this.weightDataFileName], weights: e.weightSpecs }], s = vk(e, n), r = window.URL.createObjectURL(new Blob([JSON.stringify(s)], { type: "application/json" })), a = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
      if (a.download = this.modelJsonFileName, a.href = r, await px(() => a.dispatchEvent(new MouseEvent("click"))), e.weightData != null) {
        let i = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
        i.download = this.weightDataFileName, i.href = t, await px(() => i.dispatchEvent(new MouseEvent("click")));
      }
      return { modelArtifactsInfo: Fl(e) };
    }
  }
};
var yd = um;
yd.URL_SCHEME = "downloads://";
var J_ = class {
  constructor(e) {
    if (e == null || e.length < 1)
      throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);
    this.jsonFile = e[0], this.weightsFiles = e.slice(1);
  }
  async load() {
    return new Promise((e, t) => {
      let n = new FileReader();
      n.onload = (s) => {
        let r = JSON.parse(s.target.result), a = r.modelTopology;
        if (a == null) {
          t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (r.weightsManifest == null) {
          t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (this.weightsFiles.length === 0) {
          e({ modelTopology: a });
          return;
        }
        let o = Mg(r, (u) => this.loadWeights(u));
        e(o);
      }, n.onerror = (s) => t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), n.readAsText(this.jsonFile);
    });
  }
  loadWeights(e) {
    let t = [], n = [];
    for (let a of e)
      t.push(...a.weights), n.push(...a.paths);
    let s = this.checkManifestAndWeightFiles(e), r = n.map((a) => this.loadWeightsFile(a, s[a]));
    return Promise.all(r).then((a) => [t, zg(a)]);
  }
  loadWeightsFile(e, t) {
    return new Promise((n, s) => {
      let r = new FileReader();
      r.onload = (a) => {
        let i = a.target.result;
        n(i);
      }, r.onerror = (a) => s(`Failed to weights data from file of path '${e}'.`), r.readAsArrayBuffer(t);
    });
  }
  checkManifestAndWeightFiles(e) {
    let t = [], n = this.weightsFiles.map((r) => dx(r.name)), s = {};
    for (let r of e)
      r.paths.forEach((a) => {
        let i = dx(a);
        if (t.indexOf(i) !== -1)
          throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);
        if (t.push(i), n.indexOf(i) === -1)
          throw new Error(`Weight file with basename '${i}' is not provided.`);
        s[a] = this.weightsFiles[n.indexOf(i)];
      });
    if (t.length !== this.weightsFiles.length)
      throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
    return s;
  }
};
var eA = (e) => X().getBool("IS_BROWSER") && !Array.isArray(e) && e.startsWith(yd.URL_SCHEME) ? tA(e.slice(yd.URL_SCHEME.length)) : null;
xt.registerSaveRouter(eA);
function tA(e = "model") {
  return new yd(e);
}
function nA(e) {
  return new J_(e);
}
function hx(e, t, n, s) {
  i(e), n = n == null ? 0 : n, s = s == null ? 1 : s, o(n, s);
  let r = 0, a = (u) => (u.then((l) => {
    let c = n + ++r / e.length * (s - n);
    return t(c), l;
  }), u);
  function i(u) {
    O(u != null && Array.isArray(u) && u.length > 0, () => "promises must be a none empty array");
  }
  function o(u, l) {
    O(u >= 0 && u <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${u}`), O(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${l}`), O(l >= u, () => `startFraction must be no more than endFraction, but got startFraction ${u} and endFraction ${l}`);
  }
  return Promise.all(e.map(a));
}
async function Tk(e, t) {
  t == null && (t = {});
  let n = t.fetchFunc == null ? X().platform.fetch : t.fetchFunc, s = e.map((p) => n(p, t.requestInit, { isBinary: true })), r = 0, a = 0.5, o = (t.onProgress == null ? await Promise.all(s) : await hx(s, t.onProgress, r, a)).map((p) => p.arrayBuffer()), u = 0.5, l = 1;
  return t.onProgress == null ? await Promise.all(o) : await hx(o, t.onProgress, u, l);
}
async function sA(e, t = "", n, s) {
  return $k((i) => Tk(i, { requestInit: s }))(e, t, n);
}
function $k(e) {
  return async (t, n = "", s) => {
    let r = t.map(() => false), a = {}, i = s != null ? s.map(() => false) : [], o = [];
    if (t.forEach((h, f) => {
      let m = 0;
      h.weights.forEach((g) => {
        let b = "quantization" in g ? g.quantization.dtype : g.dtype, y = rm[b] * pt(g.shape), v = () => {
          r[f] = true, a[f] == null && (a[f] = []), a[f].push({ manifestEntry: g, groupOffset: m, sizeBytes: y });
        };
        s != null ? s.forEach((x, k) => {
          x === g.name && (v(), i[k] = true);
        }) : v(), o.push(g.name), m += y;
      });
    }), !i.every((h) => h)) {
      let h = s.filter((f, m) => !i[m]);
      throw new Error(`Could not find weights in manifest with names: ${h.join(", ")}. 
Manifest JSON has weights with names: ${o.join(", ")}.`);
    }
    let u = r.reduce((h, f, m) => (f && h.push(m), h), []), l = [];
    u.forEach((h) => {
      t[h].paths.forEach((f) => {
        let m = n + (n.endsWith("/") ? "" : "/") + f;
        l.push(m);
      });
    });
    let c = await e(l), p = {}, d = 0;
    return u.forEach((h) => {
      let f = t[h].paths.length, m = 0;
      for (let x = 0; x < f; x++)
        m += c[d + x].byteLength;
      let g = new ArrayBuffer(m), b = new Uint8Array(g), y = 0;
      for (let x = 0; x < f; x++) {
        let k = new Uint8Array(c[d + x]);
        b.set(k, y), y += k.byteLength;
      }
      a[h].forEach((x) => {
        let k = g.slice(x.groupOffset, x.groupOffset + x.sizeBytes), S = yk(k, [x.manifestEntry]);
        for (let $ in S)
          p[$] = S[$];
      }), d += f;
    }), p;
  };
}
var rA = "application/octet-stream";
var aA = "application/json";
var Lg = class {
  constructor(e, t) {
    if (this.DEFAULT_METHOD = "POST", t == null && (t = {}), this.weightPathPrefix = t.weightPathPrefix, this.onProgress = t.onProgress, this.weightUrlConverter = t.weightUrlConverter, t.fetchFunc != null ? (O(typeof t.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = t.fetchFunc) : this.fetch = X().platform.fetch, O(e != null && e.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(e) && O(e.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${e.length}).`), this.path = e, t.requestInit != null && t.requestInit.body != null)
      throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = t.requestInit || {};
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    let t = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    t.body = new FormData();
    let n = [{ paths: ["./model.weights.bin"], weights: e.weightSpecs }], s = vk(e, n);
    t.body.append("model.json", new Blob([JSON.stringify(s)], { type: aA }), "model.json"), e.weightData != null && t.body.append("model.weights.bin", new Blob([e.weightData], { type: rA }), "model.weights.bin");
    let r = await this.fetch(this.path, t);
    if (r.ok)
      return { modelArtifactsInfo: Fl(e), responses: [r] };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`);
  }
  async load() {
    let e = await this.fetch(this.path, this.requestInit);
    if (!e.ok)
      throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);
    let t;
    try {
      t = await e.json();
    } catch (r) {
      let a = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? a += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : a += " Please make sure the server is serving valid JSON for this request.", new Error(a);
    }
    let n = t.modelTopology, s = t.weightsManifest;
    if (n == null && s == null)
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return Mg(t, (r) => this.loadWeights(r));
  }
  async loadWeights(e) {
    let t = Array.isArray(this.path) ? this.path[1] : this.path, [n, s] = iA(t), r = this.weightPathPrefix || n, a = [];
    for (let l of e)
      a.push(...l.weights);
    let i = [], o = [];
    for (let l of e)
      for (let c of l.paths)
        this.weightUrlConverter != null ? o.push(this.weightUrlConverter(c)) : i.push(r + c + s);
    this.weightUrlConverter && i.push(...await Promise.all(o));
    let u = await Tk(i, { requestInit: this.requestInit, fetchFunc: this.fetch, onProgress: this.onProgress });
    return [a, zg(u)];
  }
};
Lg.URL_SCHEME_REGEX = /^https?:\/\//;
function iA(e) {
  let t = e.lastIndexOf("/"), n = e.lastIndexOf("?"), s = e.substring(0, t), r = n > t ? e.substring(n) : "";
  return [s + "/", r];
}
function lm(e) {
  return e.match(Lg.URL_SCHEME_REGEX) != null;
}
var _k = (e, t) => {
  if (typeof fetch == "undefined" && (t == null || t.fetchFunc == null))
    return null;
  {
    let n = true;
    if (Array.isArray(e) ? n = e.every((s) => lm(s)) : n = lm(e), n)
      return Bg(e, t);
  }
  return null;
};
xt.registerSaveRouter(_k);
xt.registerLoadRouter(_k);
function Bg(e, t) {
  return new Lg(e, t);
}
function oA(e, t) {
  return Bg(e, t);
}
var Lf = class {
  constructor(e) {
    this.modelArtifacts = e;
  }
  async load() {
    return this.modelArtifacts;
  }
};
var uA = class {
  constructor(e) {
    this.saveHandler = e;
  }
  async save(e) {
    return this.saveHandler(e);
  }
};
function lA(e, t, n, s) {
  return arguments.length === 1 ? e.modelTopology != null || e.weightSpecs != null ? new Lf(e) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Lf({ modelTopology: e })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Lf({ modelTopology: e, weightSpecs: t, weightData: n, trainingConfig: s }));
}
function cA(e) {
  return new uA(e);
}
var dA = {};
Ae(dA, { confusionMatrix: () => gA });
function pA(e, t, n = false, s = false) {
  let r = _(e, "a", "matMul"), a = _(t, "b", "matMul");
  [r, a] = vt(r, a);
  let i = { a: r, b: a }, o = { transposeA: n, transposeB: s };
  return M.runKernel(Na, i, o);
}
var We = L({ matMul_: pA });
function hA(e, t, n = 1, s = 0) {
  if (t < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);
  let a = { indices: _(e, "indices", "oneHot", "int32") }, i = { depth: t, onValue: n, offValue: s };
  return M.runKernel(Ao, a, i);
}
var vd = L({ oneHot_: hA });
function fA(e, t) {
  let n = _(e, "x", "transpose");
  if (t == null && (t = n.shape.map((a, i) => i).reverse()), O(n.rank === t.length, () => `Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`), t.forEach((a) => {
    O(a >= 0 && a < n.rank, () => `All entries in 'perm' must be between 0 and ${n.rank - 1} but got ${t}`);
  }), n.rank <= 1)
    return n.clone();
  let s = { x: n }, r = { perm: t };
  return M.runKernel(mi, s, r);
}
var Ge = L({ transpose_: fA });
function mA(e, t, n) {
  let s = _(e, "labels", "confusionMatrix"), r = _(t, "predictions", "confusionMatrix");
  O(n == null || n > 0 && Number.isInteger(n), () => `If provided, numClasses must be a positive integer, but got ${n}`), O(s.rank === 1, () => `Expected the rank of labels to be 1, but got ${s.rank}`), O(r.rank === 1, () => `Expected the rank of predictions to be 1, but got ${r.rank}`), O(s.shape[0] === r.shape[0], () => `Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`), O(n > 0 && Number.isInteger(n), () => `numClasses is required to be a positive integer, but got ${n}`);
  let a = vd(ce(s, "int32"), n), i = vd(ce(r, "int32"), n), o = Ge(a), u = We(o, i);
  return ce(u, "int32");
}
var gA = L({ confusionMatrix_: mA });
var Ko = {};
Ae(Ko, { assertAndGetBroadcastShape: () => it, getBroadcastDims: () => Ak, getReductionAxes: () => _t });
function Ak(e, t) {
  let n = e.length, s = [];
  for (let r = 0; r < n; r++) {
    let a = n - 1 - r, i = e[a] || 1;
    (t[t.length - 1 - r] || 1) > 1 && i === 1 && s.unshift(a);
  }
  return s;
}
function _t(e, t) {
  let n = [];
  for (let s = 0; s < t.length; s++) {
    let r = e[e.length - s - 1], a = t.length - s - 1, i = t[a];
    (r == null || r === 1 && i > 1) && n.unshift(a);
  }
  return n;
}
function it(e, t) {
  let n = [], s = Math.max(e.length, t.length);
  for (let r = 0; r < s; r++) {
    let a = e[e.length - r - 1];
    a == null && (a = 1);
    let i = t[t.length - r - 1];
    if (i == null && (i = 1), a === 1)
      n.unshift(i);
    else if (i === 1)
      n.unshift(a);
    else if (a !== i) {
      let o = `Operands could not be broadcast together with shapes ${e} and ${t}.`;
      throw Error(o);
    } else
      n.unshift(a);
  }
  return n;
}
var Ek = {};
Ae(Ek, { fromPixels: () => SA, fromPixelsAsync: () => kA, toPixels: () => IA });
function bA(e, t, n) {
  if (ka(e), t != null && t.length !== 3)
    throw new Error("tensor3d() requires shape to have three numbers");
  let s = Rs(e, n);
  if (s.length !== 3 && s.length !== 1)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return Tr(e, t, s, n);
}
var Wr;
function Rk(e, t = 3) {
  if (t > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (e == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let n = false, s = false, r = false, a = false, i = false, o = false;
  if (e.data instanceof Uint8Array)
    n = true;
  else if (typeof ImageData != "undefined" && e instanceof ImageData)
    s = true;
  else if (typeof HTMLVideoElement != "undefined" && e instanceof HTMLVideoElement)
    r = true;
  else if (typeof HTMLImageElement != "undefined" && e instanceof HTMLImageElement)
    a = true;
  else if (e.getContext != null)
    i = true;
  else if (typeof ImageBitmap != "undefined" && e instanceof ImageBitmap)
    o = true;
  else
    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);
  if (r && r && e.readyState < 2)
    throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");
  if (Jf(fd, M.backendName) != null) {
    let f = { pixels: e }, m = { numChannels: t };
    return M.runKernel(fd, f, m);
  }
  let [l, c] = r ? [e.videoWidth, e.videoHeight] : [e.width, e.height], p;
  if (i)
    p = e.getContext("2d").getImageData(0, 0, l, c).data;
  else if (s || n)
    p = e.data;
  else if (a || r || o) {
    if (Wr == null)
      if (typeof document == "undefined")
        if (typeof OffscreenCanvas != "undefined" && typeof OffscreenCanvasRenderingContext2D != "undefined")
          Wr = new OffscreenCanvas(1, 1).getContext("2d");
        else
          throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
      else
        Wr = document.createElement("canvas").getContext("2d");
    Wr.canvas.width = l, Wr.canvas.height = c, Wr.drawImage(e, 0, 0, l, c), p = Wr.getImageData(0, 0, l, c).data;
  }
  let d;
  if (t === 4)
    d = new Int32Array(p);
  else {
    let f = l * c;
    d = new Int32Array(f * t);
    for (let m = 0; m < f; m++)
      for (let g = 0; g < t; ++g)
        d[m * t + g] = p[m * 4 + g];
  }
  return bA(d, [c, l, t], "int32");
}
function yA(e) {
  return e != null && e.data instanceof Uint8Array;
}
function vA() {
  return typeof window != "undefined" && typeof ImageBitmap != "undefined" && window.hasOwnProperty("createImageBitmap");
}
function xA(e) {
  return e != null && e.width !== 0 && e.height !== 0;
}
function wA(e) {
  return vA() && !(e instanceof ImageBitmap) && xA(e) && !yA(e);
}
async function kA(e, t = 3) {
  let n = null;
  if (X().getBool("WRAP_TO_IMAGEBITMAP") && wA(e)) {
    let s;
    try {
      s = await createImageBitmap(e, { premultiplyAlpha: "none" });
    } catch (r) {
      s = null;
    }
    s != null && s.width === e.width && s.height === e.height ? n = s : n = e;
  } else
    n = e;
  return Rk(n, t);
}
async function IA(e, t) {
  let n = _(e, "img", "toPixels");
  if (!(e instanceof et)) {
    let l = n;
    n = ce(l, "int32"), l.dispose();
  }
  if (n.rank !== 2 && n.rank !== 3)
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);
  let [s, r] = n.shape.slice(0, 2), a = n.rank === 2 ? 1 : n.shape[2];
  if (a > 4 || a === 2)
    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);
  if (n.dtype !== "float32" && n.dtype !== "int32")
    throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);
  let i = await n.data(), o = n.dtype === "float32" ? 255 : 1, u = new Uint8ClampedArray(r * s * 4);
  for (let l = 0; l < s * r; ++l) {
    let c = [0, 0, 0, 255];
    for (let d = 0; d < a; d++) {
      let h = i[l * a + d];
      if (n.dtype === "float32") {
        if (h < 0 || h > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${h}.`);
      } else if (n.dtype === "int32" && (h < 0 || h > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${h}.`);
      a === 1 ? (c[0] = h * o, c[1] = h * o, c[2] = h * o) : c[d] = h * o;
    }
    let p = l * 4;
    u[p + 0] = Math.round(c[0]), u[p + 1] = Math.round(c[1]), u[p + 2] = Math.round(c[2]), u[p + 3] = Math.round(c[3]);
  }
  if (t != null) {
    t.width = r, t.height = s;
    let l = t.getContext("2d"), c = new ImageData(u, r, s);
    l.putImageData(c, 0, 0);
  }
  return n !== e && n.dispose(), u;
}
var SA = L({ fromPixels_: Rk });
var Dk = {};
Ae(Dk, { prepareAndValidate: () => Fk });
function Fk(e, t) {
  let n = e.shape.length, s = t.shape.length;
  if (n < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);
  if (s < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);
  if (t.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);
  if (t.shape[s - 1] > n)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s - 1]} vs. ${n}`);
  if (pt(e.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);
  let r = t.shape, a = r[r.length - 1], i = 1;
  for (let p = 0; p < r.length - 1; ++p)
    i *= r[p];
  let o = e.shape, u = r.slice();
  u.pop();
  let l = 1;
  for (let p = a; p < n; ++p)
    l *= o[p], u.push(o[p]);
  let c = [...oo(e.shape).map((p) => p / l), 1].slice(0, a);
  return [u, i, l, c];
}
var Ok = {};
Ae(Ok, { calculateShapes: () => Pk, validateInput: () => Wg, validateUpdateShape: () => Vg });
function Vg(e, t, n) {
  let s = t.rank > 1 ? t.shape[t.rank - 1] : 1, r = t.rank > 1 ? t.rank - 1 : 1, a = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;
  if (n.rank < r)
    throw new Error(a + ` update.rank < ${r}. `);
  if (e.length < s + (n.rank - r))
    throw new Error(a + ` Output shape length < ${s + (n.rank - r)}`);
  if (n.rank !== r + e.length - s)
    throw new Error(a + ` update.rank != ${r + e.length - s}`);
  for (let i = 0; i < r; ++i)
    if (n.shape[i] !== t.shape[i])
      throw new Error(a + ` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);
  for (let i = 0; i < n.rank - r; ++i)
    if (n.shape[i + r] !== e[i + s])
      throw new Error(a + ` updates.shape[${i + r}] (${n.shape[i + r]}) != shape[${i + r}] (${e[i + r]})`);
}
function Wg(e, t, n) {
  if (t.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);
  if (e.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);
  if (t.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);
  if (n.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);
  if (n.length === 0) {
    if (t.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);
    if (e.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`);
  }
  Vg(n, t, e);
}
function Pk(e, t, n) {
  let s = t.shape.length, r = s > 1 ? t.shape[s - 1] : 1, a = n.length, i = 1;
  for (let p = r; p < a; ++p)
    i *= n[p];
  let o = r < 1 ? 1 : r, u = pt(t.shape) / o, l = [...oo(n.slice(0, r)), 1], c = pt(n);
  return { sliceRank: r, numUpdates: u, sliceSize: i, strides: l, outputSize: c };
}
var wt = {};
Ae(wt, { assertParamsValid: () => NA, computeFlatOffset: () => EA, computeOutShape: () => $A, getNormalizedAxes: () => _A, isSliceContinous: () => AA, maskToAxes: () => TA, parseSliceParams: () => Hk, sliceInfo: () => RA, startForAxis: () => Uk, startIndicesWithElidedDims: () => Bk, stopForAxis: () => Gk, stopIndicesWithElidedDims: () => Vk, stridesForAxis: () => Wk, stridesWithElidedDims: () => zk });
var cm = -2;
var CA = -1;
function NA(e, t, n) {
  let s = e.shape.length;
  O(s === t.length, () => `Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`), O(s === n.length, () => `Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`);
  for (let r = 0; r < s; ++r)
    O(t[r] + n[r] <= e.shape[r], () => `Error in slice${s}D: begin[${r}] + size[${r}] (${t[r] + n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`);
}
function TA(e) {
  let t = [], n = 0;
  for (; e > 0; )
    e & 1 && t.push(n), e /= 2, n++;
  return t;
}
function $A(e, t, n) {
  let s = [];
  for (let r = 0; r < e.length; r++)
    s[r] = Math.ceil((t[r] - e[r]) / n[r]);
  return s;
}
function zk(e, t, n, s) {
  let r = [...e];
  for (let a = r.length; a < s.length; a++)
    r.push(1);
  for (let a = 0; a < n; a++)
    a === 0 ? r[t] = 1 : (r.splice(t, 0, 1), r.pop());
  return r;
}
function Mk(e, t, n) {
  return n <= e ? n : n - (t - 1);
}
function Lk(e, t) {
  let n = [];
  for (let s = 0; s < e; s++)
    n.push(t + s);
  return n;
}
function _A(e, t, n, s, r, a, i, o, u) {
  let l = e.length, c = new Array(l), p = new Array(l), d = new Array(l);
  if (t.length && n > 0) {
    let h = t[0], f = n + 1;
    c = Bk(i, h, f, s, e), p = Vk(o, h, f, r, e), d = zk(a, h, f, e);
  } else
    for (let h = 0; h < l; h++)
      c[h] = Uk(i, s, a, e, h, u), p[h] = Gk(o, r, a, e, h, u), d[h] = Wk(a, h, u);
  return { begin: c, end: p, strides: d };
}
function Bk(e, t, n, s, r) {
  let a = [...r], i = Lk(n, t);
  for (let o = 0; o < a.length; o++)
    if (i.indexOf(o) > -1)
      a[o] = 0;
    else {
      let u = Mk(t, n, o), l = s[u];
      e & 1 << u && (l = 0), a[o] = l;
    }
  return a;
}
function Vk(e, t, n, s, r) {
  let a = [...r], i = Lk(n, t);
  for (let o = 0; o < a.length; o++)
    if (i.indexOf(o) > -1)
      a[o] = Number.MAX_SAFE_INTEGER;
    else {
      let u = Mk(t, n, o), l = s[u];
      e & 1 << u && (l = Number.MAX_SAFE_INTEGER), a[o] = l;
    }
  for (let o = 0; o < a.length; o++) {
    let u = r[o];
    a[o] < 0 && (a[o] += u), a[o] = Wu(0, a[o], r[o]);
  }
  return a;
}
function Wk(e, t, n) {
  let s = e[t];
  return (n & 1 << t || s == null) && (s = 1), s;
}
function Uk(e, t, n, s, r, a) {
  let i = t[r], o = n[r] || 1;
  (e & 1 << r || a & 1 << r || i == null) && (o > 0 ? i = Number.MIN_SAFE_INTEGER : i = Number.MAX_SAFE_INTEGER);
  let u = s[r];
  return i < 0 && (i += u), i = Wu(0, i, u - 1), i;
}
function Gk(e, t, n, s, r, a) {
  let i = t[r], o = n[r] || 1;
  (e & 1 << r || a & 1 << r || i == null) && (o > 0 ? i = Number.MAX_SAFE_INTEGER : i = Number.MIN_SAFE_INTEGER);
  let u = s[r];
  return i < 0 && (i += u), o > 0 ? i = Wu(0, i, u) : i = Wu(-1, i, u - 1), i;
}
function AA(e, t, n) {
  let s = n.length;
  for (let r = 0; r < n.length; r++)
    if (n[r] > 1) {
      s = r;
      break;
    }
  for (let r = s + 1; r < n.length; r++)
    if (t[r] > 0 || n[r] !== e[r])
      return false;
  return true;
}
function EA(e, t) {
  let n = e.length > 0 ? e[e.length - 1] : 1;
  for (let s = 0; s < e.length - 1; s++)
    n += e[s] * t[s];
  return n;
}
function Hk(e, t, n) {
  let s, r = e.shape.length;
  typeof t == "number" ? s = [t, ...new Array(r - 1).fill(0)] : t.length < r ? s = t.concat(new Array(r - t.length).fill(0)) : s = t.slice(), s.forEach((i) => {
    O(i !== -1, () => "slice() does not support negative begin indexing.");
  });
  let a;
  return n == null ? a = new Array(r).fill(-1) : typeof n == "number" ? a = [n, ...new Array(r - 1).fill(-1)] : n.length < r ? a = n.concat(new Array(r - n.length).fill(-1)) : a = n, a = a.map((i, o) => i >= 0 ? i : (O(i === -1, () => `Negative size values should be exactly -1 but got ${i} for the slice() size at index ${o}.`), e.shape[o] - s[o])), [s, a];
}
function RA(e, t, n, s, r, a, i, o, u) {
  let l;
  if (s == null ? (l = new Array(t.length), l.fill(1)) : l = s, i != null && (i & i - 1) !== 0)
    throw new Error("Multiple ellipses in slice is not allowed.");
  let c = false, p = { dims: l.length, numAddAxisAfterEllipsis: 0, begin: t.slice(), end: n.slice(), strides: l.slice(), beginMask: r, endMask: a, ellipsisMask: i, newAxisMask: o, shrinkAxisMask: u };
  for (let v = 0; v < p.dims; v++)
    c && (1 << v & o) !== 0 && p.numAddAxisAfterEllipsis++, 1 << v & i && (c = true);
  c || (p.ellipsisMask |= 1 << p.dims, p.dims++);
  let d = { dims: e.length, beginMask: 0, endMask: 0, beginValid: false, endValid: false };
  DA(p, d);
  let h = true, f = true, m = true, g = [], b = [];
  for (let v = 0; v < e.length; ++v) {
    if (d.strides[v] === 0)
      throw Error(`strides[${v}] must be non-zero`);
    let x = !!(d.shrinkAxisMask & 1 << v), k = e[v];
    if (k === -1) {
      g.push(x ? 1 : -1);
      continue;
    }
    let S = [d.beginMask & 1 << v, d.endMask & 1 << v], $ = [d.strides[v] > 0 ? 0 : -1, d.strides[v] > 0 ? k : k - 1];
    if (x && d.strides[v] <= 0)
      throw Error("only stride 1 allowed on non-range indexing.");
    m = m && d.strides[v] === 1;
    let E = !!(d.beginMask & 1 << v && d.endMask & 1 << v);
    if (d.beginValid && d.endValid) {
      if (x) {
        let F = d.begin[v] < 0 ? k + d.begin[v] : d.begin[v];
        if (d.begin[v] = F, d.end[v] = d.begin[v] + 1, F < 0 || F >= k)
          throw Error(`slice index ${d.begin[v]} of dimension ${v} out of bounds.`);
      } else
        d.begin[v] = fx(d.begin[v], 0, d.strides[v], k, S, $), d.end[v] = fx(d.end[v], 1, d.strides[v], k, S, $);
      let R = d.strides[v] === 1 && d.begin[v] === 0 && d.end[v] === k;
      h = h && R, f = f && (v === 0 && d.strides[v] === 1 || R);
    } else
      h = h && d.strides[v] === 1 && E, f = f && (v === 0 && d.strides[v] === 1 || E);
    let A, P = false;
    if (d.beginValid && d.endValid ? (A = d.end[v] - d.begin[v], P = true) : x ? (A = 1, P = true) : E && k >= 0 && (d.strides[v] < 0 ? A = -k : A = k, P = true), P) {
      let R;
      A === 0 || A < 0 != d.strides[v] < 0 ? R = 0 : R = Math.trunc(A / d.strides[v]) + (A % d.strides[v] !== 0 ? 1 : 0), g.push(R);
    } else
      g.push(-1);
  }
  for (let v = 0; v < d.finalShapeGatherIndices.length; ++v) {
    let x = d.finalShapeGatherIndices[v];
    x >= 0 ? b.push(g[x]) : x === cm && b.push(1);
  }
  return { finalShapeSparse: b.filter((v, x) => d.finalShapeGatherIndices[x] !== cm), finalShape: b, isIdentity: h, sliceDim0: f, isSimpleSlice: m, begin: d.begin, end: d.end, strides: d.strides };
}
function DA(e, t) {
  t.beginMask = 0, t.endMask = 0, t.shrinkAxisMask = 0;
  let n = 0;
  t.beginValid = e.begin != null, t.endValid = e.end != null, t.begin = new Array(t.dims), t.end = new Array(t.dims), t.strides = new Array(t.dims), t.finalShapeGatherIndices = [], t.finalShapeGatherIndicesSparse = [], t.inputShapeGatherIndicesSparse = new Array(t.dims);
  for (let s = 0; s < e.dims; s++)
    if (1 << s & e.ellipsisMask) {
      let r = Math.min(t.dims - (e.dims - s) + 1 + e.numAddAxisAfterEllipsis, t.dims);
      for (; n < r; n++)
        t.begin[n] = 0, t.end[n] = 0, t.strides[n] = 1, t.beginMask |= 1 << n, t.endMask |= 1 << n, t.finalShapeGatherIndices.push(n), t.finalShapeGatherIndicesSparse.push(-1), t.inputShapeGatherIndicesSparse[n] = s;
    } else if (1 << s & e.newAxisMask)
      t.finalShapeGatherIndices.push(cm), t.finalShapeGatherIndicesSparse.push(-1);
    else {
      if (n === t.begin.length)
        throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);
      e.begin != null && (t.begin[n] = e.begin[s]), e.end != null && (t.end[n] = e.end[s]), t.strides[n] = e.strides[s], e.beginMask & 1 << s && (t.beginMask |= 1 << n), e.endMask & 1 << s && (t.endMask |= 1 << n), e.shrinkAxisMask & 1 << s ? (t.finalShapeGatherIndices.push(CA), t.finalShapeGatherIndicesSparse.push(-1), t.shrinkAxisMask |= 1 << n) : (t.finalShapeGatherIndices.push(n), t.finalShapeGatherIndicesSparse.push(s)), t.inputShapeGatherIndicesSparse[n] = s, n++;
    }
}
function fx(e, t, n, s, r, a) {
  if (r[t])
    return n > 0 ? a[t] : a[t + 1 & 1];
  {
    let i = e < 0 ? s + e : e;
    return i < a[0] ? a[0] : i > a[1] ? a[1] : i;
  }
}
var ae = {};
Ae(ae, { Serializable: () => qk, SerializationMap: () => Kr, registerClass: () => $r });
var qk = class {
  getClassName() {
    return this.constructor.className;
  }
  static fromConfig(e, t) {
    return new e(t);
  }
};
var Kr = class {
  constructor() {
    this.classNameMap = {};
  }
  static getMap() {
    return Kr.instance == null && (Kr.instance = new Kr()), Kr.instance;
  }
  static register(e) {
    Kr.getMap().classNameMap[e.className] = [e, e.fromConfig];
  }
};
function $r(e) {
  O(e.className != null, () => "Class being registered does not have the static className property defined."), O(typeof e.className == "string", () => "className is required to be a string, but got type " + typeof e.className), O(e.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), Kr.register(e);
}
var FA = {};
Ae(FA, { TEST_EPSILON_FLOAT16: () => jk, encodeStrings: () => Kk, expectArrayBuffersEqual: () => VA, expectArraysClose: () => PA, expectArraysEqual: () => MA, expectNumbersClose: () => LA, expectPromiseToFail: () => zA, expectValuesInRange: () => BA, testEpsilon: () => Ug });
var OA = 1e-3;
var jk = 0.1;
function PA(e, t, n) {
  return n == null && (n = Ug()), dm(e, t, (s, r) => Gg(s, r, n));
}
function Ug() {
  return M.backend.floatPrecision() === 32 ? OA : jk;
}
function dm(e, t, n) {
  let s = true;
  if ((Yt(e) || Yt(t)) && (s = false), Yt(e) && Yt(t) && (s = true), s) {
    let i = e.constructor.name, o = t.constructor.name;
    if (i !== o)
      throw new Error(`Arrays are of different type. Actual: ${i}. Expected: ${o}`);
  }
  if (Array.isArray(e) && Array.isArray(t)) {
    let i = Rs(e), o = Rs(t);
    if (!Ir(i, o))
      throw new Error(`Arrays have different shapes. Actual: [${i}]. Expected: [${o}]`);
  }
  let r = Yt(e) ? e : ra(e), a = Yt(t) ? t : ra(t);
  if (r.length !== a.length)
    throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.
Actual:   ${r}.
Expected: ${a}.`);
  for (let i = 0; i < a.length; ++i) {
    let o = r[i], u = a[i];
    if (!n(o, u))
      throw new Error(`Arrays differ: actual[${i}] = ${o}, expected[${i}] = ${u}.
Actual:   ${r}.
Expected: ${a}.`);
  }
}
function zA(e, t) {
  e().then(() => t.fail(), () => t());
}
function MA(e, t) {
  let n = typeof t == "string" || typeof t == "number" || typeof t == "boolean" ? [t] : t;
  return or(e) || or(e[0]) || or(t) || or(t[0]) ? dm(e, n, (s, r) => s == r) : dm(e, t, (s, r) => Gg(s, r, 0));
}
function LA(e, t, n) {
  if (n == null && (n = Ug()), !Gg(e, t, n))
    throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);
}
function Gg(e, t, n) {
  return !isFinite(e) && !isFinite(t) ? true : !(isNaN(e) || isNaN(t) || Math.abs(e - t) > n);
}
function BA(e, t, n) {
  for (let s = 0; s < e.length; s++)
    if (e[s] < t || e[s] > n)
      throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`);
}
function VA(e, t) {
  let n = new Float32Array(e), s = new Float32Array(t);
  if (n.length !== s.length)
    throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${n.length}`);
  for (let r = 0; r < s.length; r++)
    if (n[r] !== s[r])
      throw new Error(`Expected ArrayBuffer value at ${r} to be ${s[r]} but got ${n[r]} instead`);
}
function Kk(e) {
  for (let t = 0; t < e.length; t++) {
    let n = e[t];
    Array.isArray(n) ? Kk(n) : e[t] = Dl(n);
  }
  return e;
}
var qde = "0.0.0";
function jde() {
  X().set("PROD", true);
}
function Kde() {
  X().set("DEBUG", true);
}
function Xde() {
  X().set("DEPRECATION_WARNINGS_ENABLED", false), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function Xk(e) {
  X().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(e + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
s_(Xk);
function Yde() {
  M.disposeVariables();
}
function Ss() {
  return M;
}
function pm() {
  return M.memory();
}
function Qde(e) {
  return M.profile(e);
}
function j(e, t) {
  return M.tidy(e, t);
}
function Re(e) {
  Fg(e).forEach((n) => n.dispose());
}
function Ht(e) {
  return M.keep(e);
}
function Zde(e) {
  return M.time(e);
}
function Jde(e) {
  return M.setBackend(e);
}
function epe() {
  return M.ready();
}
function tpe() {
  return M.backendName;
}
function npe(e) {
  M.removeBackend(e);
}
function spe(e) {
  return M.findBackend(e);
}
function rpe(e) {
  return M.findBackendFactory(e);
}
function fp(e, t, n = 1) {
  return M.registerBackend(e, t, n);
}
function WA() {
  return M.backend;
}
function ape(e, t) {
  X().setPlatform(e, t);
}
function UA(e, t) {
  let n = _(e, "a", "add"), s = _(t, "b", "add");
  [n, s] = vt(n, s);
  let r = { a: n, b: s };
  return M.runKernel(Sr, r);
}
var ie = L({ add_: UA });
function GA(e, t) {
  let n = _(e, "a", "floorDiv"), s = _(t, "b", "floorDiv");
  [n, s] = vt(n, s);
  let r = { a: n, b: s };
  return M.runKernel(La, r);
}
var Yk = L({ floorDiv_: GA });
function HA(e, t) {
  let n = _(e, "a", "div"), s = _(t, "b", "div");
  if ([n, s] = vt(n, s), n.dtype === "int32" && s.dtype === "int32")
    return Yk(n, s);
  let r = { a: n, b: s }, a = {};
  return M.runKernel(Oa, r, a);
}
var xe = L({ div_: HA });
function qA(e, t) {
  let n = _(e, "a", "mul"), s = _(t, "b", "mul");
  [n, s] = vt(n, s);
  let r = { a: n, b: s };
  return M.runKernel(Za, r);
}
var V = L({ mul_: qA });
function jA(e) {
  let t = _(e, "x", "abs");
  if (t.dtype === "complex64") {
    let n = { x: t };
    return M.runKernel(Yd, n);
  } else {
    let n = { x: t };
    return M.runKernel(uo, n);
  }
}
var Mt = L({ abs_: jA });
function KA(e) {
  let n = { x: _(e, "x", "acos") };
  return M.runKernel(rl, n);
}
var XA = L({ acos_: KA });
function YA(e) {
  let n = { x: _(e, "x", "acosh") };
  return M.runKernel(al, n);
}
var QA = L({ acosh_: YA });
function ZA(e) {
  O(Array.isArray(e), () => "The argument passed to tf.addN() must be a list of tensors"), O(e.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${e.length}`);
  let t = e.map((r, a) => _(r, `tensors${a}`, "addN")), n = t[0];
  t.forEach((r) => {
    if (r.dtype !== n.dtype)
      throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), t.forEach((r) => {
    if (!Ir(r.shape, n.shape))
      throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  let s = t;
  return M.runKernel(Ia, s);
}
var JA = L({ addN_: ZA });
function eE(e, t = null, n = false) {
  let r = { x: _(e, "x", "all", "bool") }, a = { axis: t, keepDims: n };
  return M.runKernel(il, r, a);
}
var Qk = L({ all_: eE });
function tE(e, t = null, n = false) {
  let r = { x: _(e, "x", "any", "bool") }, a = { axis: t, keepDims: n };
  return M.runKernel(ol, r, a);
}
var hm = L({ any_: tE });
function nE(e, t = 0) {
  let s = { x: _(e, "x", "argMax") }, r = { axis: t };
  return M.runKernel(Sa, s, r);
}
var qu = L({ argMax_: nE });
function sE(e, t = 0) {
  let s = { x: _(e, "x", "argMin") }, r = { axis: t };
  return M.runKernel(ul, s, r);
}
var rE = L({ argMin_: sE });
function aE(e) {
  let n = { x: _(e, "x", "asin") };
  return M.runKernel(ll, n);
}
var iE = L({ asin_: aE });
function oE(e) {
  let n = { x: _(e, "x", "asinh") };
  return M.runKernel(cl, n);
}
var uE = L({ asinh_: oE });
function lE(e) {
  let n = { x: _(e, "x", "atan") };
  return M.runKernel(dl, n);
}
var cE = L({ atan_: lE });
function dE(e, t) {
  let n = _(e, "a", "atan2"), s = _(t, "b", "atan2");
  [n, s] = vt(n, s);
  let r = { a: n, b: s };
  return M.runKernel(hl, r);
}
var pE = L({ atan2_: dE });
function hE(e) {
  let n = { x: _(e, "x", "atanh") };
  return M.runKernel(pl, n);
}
var fE = L({ atanh_: hE });
function mE(e, t, n, s, r = "NHWC", a) {
  let i = e[3], o = [...t, i], u = eI(r);
  return Ol(e, o, n, a, s, null, null, u);
}
function Zk(e, t, n, s, r, a, i = "channelsLast") {
  let [o, u] = xd(t), l;
  if (i === "channelsLast")
    l = [o, u, e[3], e[3]];
  else if (i === "channelsFirst")
    l = [o, u, e[1], e[1]];
  else
    throw new Error(`Unknown dataFormat ${i}`);
  return Ol(e, l, n, s, r, a, false, i);
}
function gE(e, t, n, s, r, a, i = "NDHWC") {
  let [o, u, l] = fm(t), c, p;
  if (i === "NDHWC")
    p = "channelsLast", c = [o, u, l, e[4], e[4]];
  else if (i === "NCDHW")
    p = "channelsFirst", c = [o, u, l, e[1], e[1]];
  else
    throw new Error(`Unknown dataFormat ${i}`);
  return Jk(e, c, n, s, r, false, p, a);
}
function Ol(e, t, n, s, r, a, i = false, o = "channelsLast") {
  let [u, l, c, p] = [-1, -1, -1, -1];
  if (o === "channelsLast")
    [u, l, c, p] = e;
  else if (o === "channelsFirst")
    [u, p, l, c] = e;
  else
    throw new Error(`Unknown dataFormat ${o}`);
  let [d, h, , f] = t, [m, g] = xd(n), [b, y] = xd(s), v = Xi(d, b), x = Xi(h, y), { padInfo: k, outHeight: S, outWidth: $ } = vE(r, l, c, m, g, v, x, a, o), E = i ? f * p : f, A;
  return o === "channelsFirst" ? A = [u, E, S, $] : o === "channelsLast" && (A = [u, S, $, E]), { batchSize: u, dataFormat: o, inHeight: l, inWidth: c, inChannels: p, outHeight: S, outWidth: $, outChannels: E, padInfo: k, strideHeight: m, strideWidth: g, filterHeight: d, filterWidth: h, effectiveFilterHeight: v, effectiveFilterWidth: x, dilationHeight: b, dilationWidth: y, inShape: e, outShape: A, filterShape: t };
}
function Jk(e, t, n, s, r, a = false, i = "channelsLast", o) {
  let [u, l, c, p, d] = [-1, -1, -1, -1, -1];
  if (i === "channelsLast")
    [u, l, c, p, d] = e;
  else if (i === "channelsFirst")
    [u, d, l, c, p] = e;
  else
    throw new Error(`Unknown dataFormat ${i}`);
  let [h, f, m, , g] = t, [b, y, v] = fm(n), [x, k, S] = fm(s), $ = Xi(h, x), E = Xi(f, k), A = Xi(m, S), { padInfo: P, outDepth: R, outHeight: F, outWidth: T } = xE(r, l, c, p, b, y, v, $, E, A, o), z = a ? g * d : g, W;
  return i === "channelsFirst" ? W = [u, z, R, F, T] : i === "channelsLast" && (W = [u, R, F, T, z]), { batchSize: u, dataFormat: i, inDepth: l, inHeight: c, inWidth: p, inChannels: d, outDepth: R, outHeight: F, outWidth: T, outChannels: z, padInfo: P, strideDepth: b, strideHeight: y, strideWidth: v, filterDepth: h, filterHeight: f, filterWidth: m, effectiveFilterDepth: $, effectiveFilterHeight: E, effectiveFilterWidth: A, dilationDepth: x, dilationHeight: k, dilationWidth: S, inShape: e, outShape: W, filterShape: t };
}
function bE(e, t, n, s, r) {
  s == null && (s = Hg(e, t, n));
  let a = e[0], i = e[1], o = ea((a - t + 2 * s) / n + 1, r), u = ea((i - t + 2 * s) / n + 1, r);
  return [o, u];
}
function yE(e, t, n, s, r, a) {
  r == null && (r = Hg(e, t, s));
  let i = e[0], o = e[1], u = e[2], l = ea((i - t + 2 * r) / s + 1, a), c = ea((o - t + 2 * r) / s + 1, a), p = ea((u - t + 2 * r) / s + 1, a);
  return [l, c, p, n];
}
function Hg(e, t, n, s = 1) {
  let r = Xi(t, s);
  return Math.floor((e[0] * (n - 1) - n + r) / 2);
}
function xd(e) {
  return typeof e == "number" ? [e, e, e] : e.length === 2 ? [e[0], e[1], 1] : e;
}
function fm(e) {
  return typeof e == "number" ? [e, e, e] : e;
}
function Xi(e, t) {
  return t <= 1 ? e : e + (e - 1) * (t - 1);
}
function vE(e, t, n, s, r, a, i, o, u) {
  let l, c, p;
  if (typeof e == "number") {
    l = { top: e, bottom: e, left: e, right: e, type: e === 0 ? "VALID" : "NUMBER" };
    let h = bE([t, n], a, s, e, o);
    c = h[0], p = h[1];
  } else if (e === "same") {
    c = Math.ceil(t / s), p = Math.ceil(n / r);
    let d = Math.max(0, (c - 1) * s + a - t), h = Math.max(0, (p - 1) * r + i - n), f = Math.floor(d / 2), m = d - f, g = Math.floor(h / 2), b = h - g;
    l = { top: f, bottom: m, left: g, right: b, type: "SAME" };
  } else if (e === "valid")
    l = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, c = Math.ceil((t - a + 1) / s), p = Math.ceil((n - i + 1) / r);
  else if (typeof e == "object") {
    let d = u === "channelsLast" ? e[1][0] : e[2][0], h = u === "channelsLast" ? e[1][1] : e[2][1], f = u === "channelsLast" ? e[2][0] : e[3][0], m = u === "channelsLast" ? e[2][1] : e[3][1];
    l = { top: d, bottom: h, left: f, right: m, type: d === 0 && h === 0 && f === 0 && m === 0 ? "VALID" : "EXPLICIT" }, c = ea((t - a + d + h) / s + 1, o), p = ea((n - i + f + m) / r + 1, o);
  } else
    throw Error(`Unknown padding parameter: ${e}`);
  return { padInfo: l, outHeight: c, outWidth: p };
}
function xE(e, t, n, s, r, a, i, o, u, l, c) {
  let p, d, h, f;
  if (typeof e == "number") {
    p = { top: e, bottom: e, left: e, right: e, front: e, back: e, type: e === 0 ? "VALID" : "NUMBER" };
    let g = yE([t, n, s, 1], o, 1, r, e, c);
    d = g[0], h = g[1], f = g[2];
  } else if (e === "same") {
    d = Math.ceil(t / r), h = Math.ceil(n / a), f = Math.ceil(s / i);
    let m = (d - 1) * r + o - t, g = (h - 1) * a + u - n, b = (f - 1) * i + l - s, y = Math.floor(m / 2), v = m - y, x = Math.floor(g / 2), k = g - x, S = Math.floor(b / 2), $ = b - S;
    p = { top: x, bottom: k, left: S, right: $, front: y, back: v, type: "SAME" };
  } else if (e === "valid")
    p = { top: 0, bottom: 0, left: 0, right: 0, front: 0, back: 0, type: "VALID" }, d = Math.ceil((t - o + 1) / r), h = Math.ceil((n - u + 1) / a), f = Math.ceil((s - l + 1) / i);
  else
    throw Error(`Unknown padding parameter: ${e}`);
  return { padInfo: p, outDepth: d, outHeight: h, outWidth: f };
}
function ea(e, t) {
  if (!t)
    return Math.trunc(e);
  switch (t) {
    case "round":
      return Math.round(e);
    case "ceil":
      return Math.ceil(e);
    case "floor":
      return Math.floor(e);
    default:
      throw new Error(`Unknown roundingMode ${t}`);
  }
}
function mr(e) {
  let [t, n, s] = xd(e);
  return t === 1 && n === 1 && s === 1;
}
function Ps(e, t) {
  return mr(e) || mr(t);
}
function eI(e) {
  if (e === "NHWC")
    return "channelsLast";
  if (e === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${e}`);
}
function hn(e, t, n) {
  if (n != null) {
    if (typeof t == "string")
      throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);
    if (typeof t == "number")
      O(Zi(t), () => `Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);
    else if (typeof t == "object")
      t.forEach((s) => {
        s.forEach((r) => {
          O(Zi(r), () => `Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${r}.`);
        });
      });
    else
      throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);
  }
}
function wE(e, t) {
  let s = { x: _(e, "x", "reshape", "string_or_numeric") }, r = { shape: t };
  return M.runKernel(Ro, s, r);
}
var G = L({ reshape_: wE });
function kE(e, t, n, s, r) {
  let a = _(e, "x", "avgPool", "float32"), i = 1;
  O(Ps(n, i), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`);
  let o = a, u = false;
  a.rank === 3 && (u = true, o = G(a, [1, a.shape[0], a.shape[1], a.shape[2]])), O(o.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${o.rank}.`), hn("avgPool", s, r);
  let l = { x: o }, c = { filterSize: t, strides: n, pad: s, dimRoundingMode: r }, p = M.runKernel(Ca, l, c);
  return p = ce(p, a.dtype), u ? G(p, [p.shape[1], p.shape[2], p.shape[3]]) : p;
}
var qg = L({ avgPool_: kE });
function IE(e, t, n, s, r, a = "NDHWC") {
  let i = _(e, "x", "avgPool3d", "float32"), o = i, u = false;
  i.rank === 4 && (u = true, o = G(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), O(o.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`), O(a === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`), hn("avgPool3d", s, r);
  let l = { x: o }, c = { filterSize: t, strides: n, pad: s, dimRoundingMode: r, dataFormat: a }, p = M.runKernel(Kd, l, c);
  return p = ce(p, o.dtype), u ? G(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
var tI = L({ avgPool3d_: IE });
function SE(e, t = 0) {
  O(e.length >= 1, () => "Pass at least one tensor to concat");
  let n = Hu(e, "tensors", "concat", "string_or_numeric");
  if (n[0].dtype === "complex64" && n.forEach((a) => {
    if (a.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${a.dtype}. `);
  }), n.length === 1)
    return cr(n[0]);
  let s = n, r = { axis: t };
  return M.runKernel(co, s, r);
}
var Ft = L({ concat_: SE });
function CE(e) {
  let n = { x: _(e, "x", "sigmoid", "float32") };
  return M.runKernel(ui, n);
}
var qs = L({ sigmoid_: CE });
function NE(e, t, n) {
  let s = _(e, "x", "slice", "string_or_numeric");
  if (s.rank === 0)
    throw new Error("Slicing scalar is not possible");
  let r = { x: s }, a = { begin: t, size: n };
  return M.runKernel(zo, r, a);
}
var qe = L({ slice_: NE });
function TE(e) {
  let n = { x: _(e, "x", "tanh", "float32") };
  return M.runKernel(fi, n);
}
var ju = L({ tanh_: TE });
function $E(e, t, n, s, r, a) {
  let i = _(e, "forgetBias", "basicLSTMCell"), o = _(t, "lstmKernel", "basicLSTMCell"), u = _(n, "lstmBias", "basicLSTMCell"), l = _(s, "data", "basicLSTMCell"), c = _(r, "c", "basicLSTMCell"), p = _(a, "h", "basicLSTMCell"), d = Ft([l, p], 1), h = We(d, o), f = ie(h, u), m = f.shape[0], g = f.shape[1] / 4, b = [m, g], y = qe(f, [0, 0], b), v = qe(f, [0, g], b), x = qe(f, [0, g * 2], b), k = qe(f, [0, g * 3], b), S = ie(V(qs(y), ju(v)), V(c, qs(ie(i, x)))), $ = V(ju(S), qs(k));
  return [S, $];
}
var ipe = L({ basicLSTMCell_: $E });
function _E(e, t, n) {
  let s = _(e, "x", "batchToSpaceND"), r = t.reduce((o, u) => o * u);
  O(s.rank >= 1 + t.length, () => `input rank is ${s.rank} but should be > than blockShape.length ${t.length}`), O(n.length === t.length, () => `crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`), O(s.shape[0] % r === 0, () => `input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`);
  let a = { x: s }, i = { blockShape: t, crops: n };
  return M.runKernel(lo, a, i);
}
var jg = L({ batchToSpaceND_: _E });
function AE(e) {
  let t;
  return e.rank === 0 || e.rank === 1 ? t = G(e, [1, 1, 1, e.size]) : e.rank === 2 ? t = G(e, [1, 1, e.shape[0], e.shape[1]]) : e.rank === 3 ? t = G(e, [1, e.shape[0], e.shape[1], e.shape[2]]) : t = e, t;
}
function EE(e, t, n, s, r, a) {
  a == null && (a = 1e-3);
  let i = _(e, "x", "batchNorm"), o = _(t, "mean", "batchNorm"), u = _(n, "variance", "batchNorm"), l;
  r != null && (l = _(r, "scale", "batchNorm"));
  let c;
  s != null && (c = _(s, "offset", "batchNorm")), O(o.rank === u.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), O(c == null || o.rank === c.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), O(l == null || o.rank === l.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let d = { x: AE(i), scale: l, offset: c, mean: o, variance: u }, h = { varianceEpsilon: a }, f = M.runKernel(Ba, d, h);
  return G(f, i.shape);
}
var Ku = L({ batchNorm_: EE });
function RE(e, t, n, s, r, a) {
  let i = _(e, "x", "batchNorm"), o = _(t, "mean", "batchNorm"), u = _(n, "variance", "batchNorm"), l;
  r != null && (l = _(r, "scale", "batchNorm"));
  let c;
  return s != null && (c = _(s, "offset", "batchNorm")), O(i.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`), O(o.rank === 2 || o.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`), O(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`), l != null && O(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`), c != null && O(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`), Ku(i, o, u, c, l, a);
}
var DE = L({ batchNorm2d_: RE });
function FE(e, t, n, s, r, a) {
  let i = _(e, "x", "batchNorm"), o = _(t, "mean", "batchNorm"), u = _(n, "variance", "batchNorm"), l;
  r != null && (l = _(r, "scale", "batchNorm"));
  let c;
  return s != null && (c = _(s, "offset", "batchNorm")), O(i.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`), O(o.rank === 3 || o.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`), O(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`), l != null && O(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`), c != null && O(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`), Ku(i, o, u, c, l, a);
}
var OE = L({ batchNorm3d_: FE });
function PE(e, t, n, s, r, a) {
  let i = _(e, "x", "batchNorm"), o = _(t, "mean", "batchNorm"), u = _(n, "variance", "batchNorm"), l;
  r != null && (l = _(r, "scale", "batchNorm"));
  let c;
  return s != null && (c = _(s, "offset", "batchNorm")), O(i.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`), O(o.rank === 4 || o.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`), O(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`), l != null && O(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`), c != null && O(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`), Ku(i, o, u, c, l, a);
}
var zE = L({ batchNorm4d_: PE });
function ME(e, t, n) {
  let s = _(e, "x", "bincount"), r = _(t, "weights", "bincount");
  O(s.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${s.dtype}`), O(n >= 0, () => `size must be non-negative, but got ${n}.`), O(r.size === s.size || r.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`);
  let a = { x: s, weights: r }, i = { size: n };
  return M.runKernel(cg, a, i);
}
var nI = L({ bincount_: ME });
function LE(e, t) {
  let n = _(e, "s0", "broadcastArgs", "int32"), s = _(t, "s1", "broadcastArgs", "int32");
  if (n.rank !== 1)
    throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);
  if (s.rank !== 1)
    throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);
  let r = { s0: n, s1: s };
  return M.runKernel(dg, r);
}
var BE = L({ broadcastArgs_: LE });
function VE(e, t) {
  let n = _(e, "broadcastTo", "x"), s = n.shape;
  if (t.some((l) => !(l > 0) || l % 1 !== 0))
    throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);
  if (t.length < n.rank)
    throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);
  if (t.length > n.rank) {
    let l = n.shape.slice();
    for (; l.length < t.length; )
      l.unshift(1);
    n = G(n, l);
  }
  let r = n.shape, a = Array.from(t);
  for (let l = t.length - 1; l >= 0; l--)
    if (r[l] === t[l])
      a[l] = 1;
    else if (n.shape[l] !== 1)
      throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);
  if (a.map((l, c) => l > 1 ? c : -1).filter((l) => l >= 0).length === 0)
    return cr(n);
  let o = { x: n }, u = { reps: a };
  return M.runKernel(Nr, o, u);
}
var nd = L({ broadcastTo_: VE });
function WE(e) {
  let n = { x: _(e, "x", "ceil", "float32") };
  return M.runKernel($a, n);
}
var UE = L({ ceil_: WE });
function GE(e, t, n) {
  let s = _(e, "x", "clipByValue");
  O(t <= n, () => `Error in clip: min (${t}) must be less than or equal to max (${n}).`);
  let r = { x: s }, a = { clipValueMin: t, clipValueMax: n };
  return M.runKernel(Cr, r, a);
}
var Vn = L({ clipByValue_: GE });
function HE(e) {
  return Ft(e, 0);
}
var qE = L({ concat1d_: HE });
function jE(e, t) {
  return Ft(e, t);
}
var KE = L({ concat2d_: jE });
function XE(e, t) {
  return Ft(e, t);
}
var YE = L({ concat3d_: XE });
function QE(e, t) {
  return Ft(e, t);
}
var ZE = L({ concat4d_: QE });
function JE(e, t, n, s, r = "NHWC", a = [1, 1], i) {
  let o = _(e, "x", "conv2d", "float32"), u = _(t, "filter", "conv2d", "float32"), l = o, c = false;
  o.rank === 3 && (c = true, l = G(o, [1, o.shape[0], o.shape[1], o.shape[2]])), O(l.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${l.rank}.`), O(u.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`), hn("conv2d", s, i);
  let p = r === "NHWC" ? l.shape[3] : l.shape[1];
  O(p === u.shape[2], () => `Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`), O(Ps(n, a), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);
  let d = { x: l, filter: u }, h = { strides: n, pad: s, dataFormat: r, dilations: a, dimRoundingMode: i }, f = M.runKernel(_a, d, h);
  return c ? G(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var da = L({ conv2d_: JE });
function eR(e, t, n, s, r = "NWC", a = 1, i) {
  let o = _(e, "x", "conv1d"), u = _(t, "filter", "conv1d"), l = o, c = false;
  o.rank === 2 && (c = true, l = G(o, [1, o.shape[0], o.shape[1]])), O(l.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${l.rank}.`), O(u.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`), hn("conv1d", s, i), O(l.shape[2] === u.shape[1], () => `Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`), O(Ps(n, a), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`), O(r === "NWC", () => `Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);
  let p = G(u, [1, u.shape[0], u.shape[1], u.shape[2]]), d = G(l, [l.shape[0], 1, l.shape[1], l.shape[2]]), g = da(d, p, [1, n], s, "NHWC", [1, a], i);
  return c ? G(g, [g.shape[2], g.shape[3]]) : G(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
var sI = L({ conv1d_: eR });
function tR(e, t, n, s, r, a = "NHWC", i) {
  O(e.length === t.rank, () => `Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);
  let o = e, u = t, l = false;
  t.rank === 3 && (l = true, u = G(t, [1, t.shape[0], t.shape[1], t.shape[2]]), o = [1, e[0], e[1], e[2]]), O(o.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`), O(u.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`), O(n.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`);
  let c = a === "NHWC" ? o[3] : o[1], p = a === "NHWC" ? u.shape[3] : u.shape[1];
  O(c === n.shape[2], () => `Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`), O(p === n.shape[3], () => `Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`), hn("conv2dDerInput", r, i);
  let d = { dy: u, filter: n }, h = { strides: s, pad: r, dataFormat: a, dimRoundingMode: i, inputShape: o }, f = M.runKernel(Aa, d, h);
  return l ? G(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var Kg = L({ conv2DBackpropInput_: tR });
function nR(e, t, n, s, r, a) {
  let i = _(e, "x", "conv2dTranspose"), o = _(t, "filter", "conv2dTranspose");
  return Kg(n, i, o, s, r, "NHWC", a);
}
var rI = L({ conv2dTranspose_: nR });
function sR(e, t, n, s, r = "NDHWC", a = [1, 1, 1]) {
  let i = _(e, "x", "conv3d"), o = _(t, "filter", "conv3d"), u = i, l = false;
  i.rank === 4 && (l = true, u = G(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), O(u.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${u.rank}.`), O(o.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`), O(u.shape[4] === o.shape[3], () => `Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`), O(Ps(n, a), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`), O(r === "NDHWC", () => `Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`);
  let c = { x: u, filter: o }, p = { strides: n, pad: s, dataFormat: r, dilations: a }, d = M.runKernel(Qd, c, p);
  return l ? G(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
var aI = L({ conv3d_: sR });
function rR(e, t, n, s, r) {
  O(e.length === t.rank, () => `Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);
  let a = e, i = t, o = false;
  t.rank === 4 && (o = true, i = G(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]]), a = [1, e[0], e[1], e[2], e[3]]);
  let u = a[4], l = i.shape[4];
  O(a.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`), O(i.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`), O(n.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`), O(u === n.shape[3], () => `Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`), O(l === n.shape[4], () => `Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`);
  let c = { dy: i, filter: n }, p = { pad: r, strides: s, inputShape: a }, d = M.runKernel(fg, c, p);
  return o ? G(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
var iI = L({ conv3DBackpropInput_: rR });
function aR(e, t, n, s, r) {
  let a = _(e, "x", "conv3dTranspose"), i = _(t, "filter", "conv3dTranspose");
  return iI(n, a, i, s, r);
}
var iR = L({ conv3dTranspose_: aR });
function oR(e) {
  let n = { x: _(e, "x", "cos", "float32") };
  return M.runKernel(Ea, n);
}
var Xg = L({ cos_: oR });
function uR(e) {
  let n = { x: _(e, "x", "cosh", "float32") };
  return M.runKernel(Ra, n);
}
var oI = L({ cosh_: uR });
function lR(e, t = 0, n = false, s = false) {
  let a = { x: _(e, "x", "cumprod") }, i = { axis: t, exclusive: n, reverse: s };
  return M.runKernel(po, a, i);
}
var mm = L({ cumprod_: lR });
function cR(e, t = 0, n = false, s = false) {
  let a = { x: _(e, "x", "cumsum") }, i = { axis: t, exclusive: n, reverse: s };
  return M.runKernel(Da, a, i);
}
var uI = L({ cumsum_: cR });
function dR(e, t, n, s = false) {
  let r = _(e, "x", "denseBincount"), a = _(t, "weights", "denseBincount");
  O(r.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${r.dtype}`), O(r.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`), O(n >= 0, () => `size must be non-negative, but got ${n}.`), O(a.size === r.size || a.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`);
  let i = { x: r, weights: a }, o = { size: n, binaryOutput: s };
  return M.runKernel(mg, i, o);
}
var pR = L({ denseBincount_: dR });
function hR(e, t, n = "NHWC") {
  let s = _(e, "x", "depthToSpace", "float32"), r = n === "NHWC" ? s.shape[1] : s.shape[2], a = n === "NHWC" ? s.shape[2] : s.shape[3], i = n === "NHWC" ? s.shape[3] : s.shape[1];
  O(t > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t}`), O(r * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${t}  for depthToSpace with input shape
    ${s.shape}`), O(a * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${a} and ${t} for depthToSpace with input shape
        ${s.shape}`), O(i % (t * t) === 0, () => `Dimension size must be evenly divisible by ${t * t} but is ${i} for depthToSpace with input shape ${s.shape}`);
  let o = { x: s }, u = { blockSize: t, dataFormat: n };
  return M.runKernel(fo, o, u);
}
var fR = L({ depthToSpace_: hR });
function mR(e, t, n, s, r = "NHWC", a = [1, 1], i) {
  let o = _(e, "x", "depthwiseConv2d", "float32"), u = _(t, "filter", "depthwiseConv2d", "float32"), l = o, c = false;
  o.rank === 3 && (c = true, l = G(o, [1, o.shape[0], o.shape[1], o.shape[2]])), O(l.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`), O(u.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`), O(l.shape[3] === u.shape[2], () => `Error in depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`), hn("depthwiseConv2d", s, i);
  let p = { x: l, filter: u }, d = { strides: n, pad: s, dataFormat: r, dilations: a, dimRoundingMode: i }, h = M.runKernel(Fa, p, d);
  return c ? G(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
var mp = L({ depthwiseConv2d_: mR });
function gR(e) {
  let n = { x: _(e, "x", "diag") };
  return M.runKernel(yg, n);
}
var ope = L({ diag_: gR });
function bR(e, t, n, s, r = [1, 1], a = "NHWC") {
  let i = _(e, "x", "dilation2d"), o = _(t, "filter", "dilation2d");
  O(i.rank === 3 || i.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`), O(o.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`), O(a === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`);
  let u = i, l = false;
  i.rank === 3 && (u = G(i, [1, i.shape[0], i.shape[1], i.shape[2]]), l = true);
  let c = { x: u, filter: o }, p = { strides: n, pad: s, dilations: r }, d = M.runKernel(Zd, c, p);
  return l ? G(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
var yR = L({ dilation2d_: bR });
function vR(e, t) {
  let n = _(e, "a", "equal", "string_or_numeric"), s = _(t, "b", "equal", "string_or_numeric");
  [n, s] = vt(n, s), it(n.shape, s.shape);
  let r = { a: n, b: s };
  return M.runKernel(mo, r);
}
var Xn = L({ equal_: vR });
function xR(e, t, n) {
  let s = _(t, "a", "where"), r = _(n, "b", "where"), a = _(e, "condition", "where", "bool"), i = it(it(a.shape, s.shape), r.shape), o = nd(a, i), u = nd(s, i), l = nd(r, i), c = { condition: o, t: u, e: l };
  return M.runKernel(Po, c);
}
var vn = L({ where_: xR });
function wR(e) {
  let n = { x: _(e, "x", "zerosLike") };
  return M.runKernel(qo, n);
}
var je = L({ zerosLike_: wR });
function kR(e, t) {
  let n = _(e, "a", "div"), s = _(t, "b", "div");
  [n, s] = vt(n, s);
  let r = xe(n, s), a = je(r), i = Xn(s, a);
  return vn(i, a, r);
}
var IR = L({ divNoNan_: kR });
function SR(e, t) {
  let n = _(e, "t1", "dot"), s = _(t, "t2", "dot");
  O((n.rank === 1 || n.rank === 2) && (s.rank === 1 || s.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`);
  let r = n.rank === 1 ? n.size : n.shape[1], a = s.rank === 1 ? s.size : s.shape[0];
  if (O(r === a, () => `Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`), n.rank === 1 && s.rank === 1) {
    let i = G(n, [1, -1]), o = G(s, [-1, 1]), u = We(i, o);
    return G(u, []);
  } else if (n.rank === 1 && s.rank === 2) {
    let i = G(n, [1, -1]), o = G(s, [s.shape[0], s.shape[1]]), u = We(i, o);
    return G(u, [u.size]);
  } else if (n.rank === 2 && s.rank === 1) {
    let i = G(s, [-1, 1]), o = We(n, i);
    return G(o, [o.size]);
  } else {
    let i = G(s, [s.shape[0], s.shape[1]]);
    return We(n, i);
  }
}
var upe = L({ dot_: SR });
function CR(e, ...t) {
  let n = t.map((r, a) => _(r, `tensors${a}`, "einsum")), s = { equation: e };
  return M.runKernel(Jd, n, s);
}
var NR = L({ einsum_: CR });
function TR(e) {
  let n = { x: _(e, "x", "elu", "float32") };
  return M.runKernel(Pa, n);
}
var gp = L({ elu_: TR });
function $R(e) {
  let t = _(e, "x", "erf");
  O(t.dtype === "int32" || t.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), t.dtype === "int32" && (t = ce(t, "float32"));
  let n = { x: t };
  return M.runKernel(fl, n);
}
var _R = L({ erf_: $R });
function AR(e) {
  let n = { x: _(e, "x", "exp") };
  return M.runKernel(za, n);
}
var Yn = L({ exp_: AR });
function ER(e, t = 0) {
  let n = _(e, "x", "expandDims", "string_or_numeric");
  O(t <= n.rank, () => "Axis must be <= rank of the tensor");
  let s = { input: n }, r = { dim: t };
  return M.runKernel(go, s, r);
}
var Pn = L({ expandDims_: ER });
function RR(e) {
  let n = { x: _(e, "x", "expm1") };
  return M.runKernel(bo, n);
}
var DR = L({ expm1_: RR });
function FR(e, t) {
  let n = _(e, "x", "tile", "string_or_numeric");
  O(n.rank === t.length, () => `Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`);
  let s = { x: n }, r = { reps: t };
  return M.runKernel(Nr, s, r);
}
var ps = L({ tile_: FR });
function OR(e, t, n, s = "float32") {
  t == null && (t = e);
  let r = De([e, t], s), a = e <= t ? e : t;
  for (let o = 0; o < a; ++o)
    r.set(1, o, o);
  let i = G(r.toTensor(), [e, t]);
  if (n == null)
    return i;
  if (n.length === 1)
    return ps(Pn(i, 0), [n[0], 1, 1]);
  if (n.length === 2)
    return ps(Pn(Pn(i, 0), 0), [n[0], n[1], 1, 1]);
  if (n.length === 3)
    return ps(Pn(Pn(Pn(i, 0), 0), 0), [n[0], n[1], n[2], 1, 1]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`);
}
var lI = L({ eye_: OR });
function Pl(e, t, n) {
  let s = { shape: e, value: t, dtype: n };
  return M.runKernel(ml, {}, s);
}
function PR(e) {
  let n = { x: _(e, "x", "floor", "float32") };
  return M.runKernel(Ma, n);
}
var bp = L({ floor_: PR });
function zR(e, t, n = 0, s = 0) {
  let r = _(e, "x", "gather"), a = _(t, "indices", "gather", "int32"), i = { x: r, indices: a }, o = { axis: n, batchDims: s };
  return M.runKernel(vo, i, o);
}
var Xu = L({ gather_: zR });
function MR(e, t) {
  let n = _(e, "a", "greater", "string_or_numeric"), s = _(t, "b", "greater", "string_or_numeric");
  [n, s] = vt(n, s), it(n.shape, s.shape);
  let r = { a: n, b: s };
  return M.runKernel(wo, r);
}
var Un = L({ greater_: MR });
function LR(e, t) {
  let n = _(e, "a", "greaterEqual", "string_or_numeric"), s = _(t, "b", "greaterEqual", "string_or_numeric");
  [n, s] = vt(n, s), it(n.shape, s.shape);
  let r = { a: n, b: s };
  return M.runKernel(Va, r);
}
var Xo = L({ greaterEqual_: LR });
function BR(e) {
  let n = { input: _(e, "input", "imag") };
  return M.runKernel(ep, n);
}
var Yg = L({ imag_: BR });
function VR(e) {
  let n = { x: _(e, "x", "isFinite") };
  return M.runKernel(gl, n);
}
var lpe = L({ isFinite_: VR });
function WR(e) {
  let n = { x: _(e, "x", "isInf") };
  return M.runKernel(bl, n);
}
var cpe = L({ isInf_: WR });
function UR(e) {
  let n = { x: _(e, "x", "isNaN") };
  return M.runKernel(yl, n);
}
var GR = L({ isNaN_: UR });
function HR(e, t = 0.2) {
  let s = { x: _(e, "x", "leakyRelu") }, r = { alpha: t };
  return M.runKernel(Ua, s, r);
}
var Qg = L({ leakyRelu_: HR });
function qR(e, t) {
  let n = _(e, "a", "less", "string_or_numeric"), s = _(t, "b", "less", "string_or_numeric");
  [n, s] = vt(n, s), it(n.shape, s.shape);
  let r = { a: n, b: s };
  return M.runKernel(ko, r);
}
var cI = L({ less_: qR });
function jR(e, t) {
  let n = _(e, "a", "lessEqual", "string_or_numeric"), s = _(t, "b", "lessEqual", "string_or_numeric");
  [n, s] = vt(n, s), it(n.shape, s.shape);
  let r = { a: n, b: s };
  return M.runKernel(Io, r);
}
var Yo = L({ lessEqual_: jR });
function KR(e, t, n) {
  if (n <= 0)
    throw new Error("The number of values should be positive.");
  let s = { start: e, stop: t, num: n };
  return M.runKernel(kg, {}, s);
}
function XR(e, t = 5, n = 1, s = 1, r = 0.5) {
  let a = _(e, "x", "localResponseNormalization");
  O(a.rank === 4 || a.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${a.rank}.`), O(Zi(t), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);
  let i = a, o = false;
  a.rank === 3 && (o = true, i = G(a, [1, a.shape[0], a.shape[1], a.shape[2]]));
  let u = { x: i }, l = { depthRadius: t, bias: n, alpha: s, beta: r }, c = M.runKernel(np, u, l);
  return o ? G(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
var YR = L({ localResponseNormalization_: XR });
function QR(e) {
  let n = { x: _(e, "x", "log", "float32") };
  return M.runKernel(Ga, n);
}
var Qn = L({ log_: QR });
function ZR(e) {
  let n = { x: _(e, "x", "log1p") };
  return M.runKernel(vl, n);
}
var Zg = L({ log1p_: ZR });
function dpe(e) {
  return O(fr(e), () => "The f passed in grad(f) must be a function"), (t, n) => {
    let s = _(t, "x", "tf.grad", "string_or_numeric"), r = n != null ? _(n, "dy", "tf.grad") : null;
    return M.tidy(() => {
      let { value: a, grads: i } = M.gradients(() => e(s), [s], r);
      return r != null && pn(a.shape, r.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), yp(i), i[0];
    });
  };
}
function ppe(e) {
  return O(fr(e), () => "The f passed in grads(f) must be a function"), (t, n) => {
    O(Array.isArray(t), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    let s = Hu(t, "args", "tf.grads", "string_or_numeric"), r = n != null ? _(n, "dy", "tf.grads") : null;
    return M.tidy(() => {
      let { value: a, grads: i } = M.gradients(() => e(...s), s, r);
      return r != null && pn(a.shape, r.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), yp(i), i;
    });
  };
}
function hpe(e) {
  return O(fr(e), () => "The f passed in valueAndGrad(f) must be a function"), (t, n) => {
    O(t instanceof et, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), O(n == null || n instanceof et, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    let { grads: s, value: r } = M.gradients(() => e(t), [t], n);
    return yp(s), { grad: s[0], value: r };
  };
}
function fpe(e) {
  return O(fr(e), () => "The f passed in valueAndGrads(f) must be a function"), (t, n) => {
    O(Array.isArray(t) && t.every((r) => r instanceof et), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), O(n == null || n instanceof et, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    let s = M.gradients(() => e(...t), t, n);
    return n != null && pn(s.value.shape, n.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), yp(s.grads), s;
  };
}
function JR(e, t) {
  O(fr(e), () => "The f passed in variableGrads(f) must be a function"), O(t == null || Array.isArray(t) && t.every((l) => l instanceof gd), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  let n = t != null;
  if (!n) {
    t = [];
    for (let l in M.registeredVariables)
      t.push(M.registeredVariables[l]);
  }
  let s = n ? t.filter((l) => !l.trainable) : null, r = t.length;
  t = t.filter((l) => l.trainable), O(t.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);
  let a = true, { value: i, grads: o } = M.gradients(e, t, null, a);
  O(o.some((l) => l != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), O(i.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);
  let u = {};
  return t.forEach((l, c) => {
    o[c] != null && (u[l.name] = o[c]);
  }), s != null && s.forEach((l) => u[l.name] = null), { value: i, grads: u };
}
function js(e) {
  return M.customGrad(e);
}
function yp(e) {
  if (e.filter((n) => n == null).length > 0)
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
function eD(e) {
  let n = { x: _(e, "x", "neg") };
  return M.runKernel(Co, n);
}
var kt = L({ neg_: eD });
function tD(e) {
  let n = { x: _(e, "x", "softplus") };
  return M.runKernel($l, n);
}
var zl = L({ softplus_: tD });
function nD(e) {
  let t = _(e, "x", "logSigmoid");
  return js((s) => ({ value: kt(zl(kt(s))), gradFunc: (i) => V(i, qs(kt(s))) }))(t);
}
var mpe = L({ logSigmoid_: nD });
function sD(e, t = null, n = false) {
  let r = { x: _(e, "x", "max") }, a = { reductionIndices: t, keepDims: n };
  return M.runKernel(Ha, r, a);
}
var As = L({ max_: sD });
function rD(e, t) {
  let n = _(e, "a", "sub"), s = _(t, "b", "sub");
  [n, s] = vt(n, s);
  let r = { a: n, b: s };
  return M.runKernel(hi, r);
}
var ge = L({ sub_: rD });
function aD(e, t = null, n = false) {
  let s = _(e, "x", "sum");
  s.dtype === "bool" && (s = ce(s, "int32"));
  let r = { x: s }, a = { axis: t, keepDims: n };
  return M.runKernel(ci, r, a);
}
var ve = L({ sum_: aD });
function iD(e, t = -1) {
  let n = _(e, "logits", "logSoftmax");
  if (t === -1 && (t = n.rank - 1), t !== n.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);
  return js((r, a) => {
    let o = As(r, t, true), u = ge(r, o), l = ge(ce(u, "float32"), Qn(ve(Yn(u), t, true)));
    return a([l]), { value: l, gradFunc: (p, d) => {
      let [h] = d, f = true, m = Yn(h);
      return ge(p, V(ve(p, t, f), m));
    } };
  })(n);
}
var dI = L({ logSoftmax_: iD });
function Jg(e, t) {
  for (let n = 0; n < e.length; ++n)
    if (e[e.length - n - 1] !== t - 1 - n)
      return false;
  return true;
}
function pI(e, t, n) {
  let s = e.length + t.length, r = [], a = 0, i = 0;
  for (let o = 0; o < s; o++)
    n.indexOf(o) === -1 ? r.push(e[a++]) : r.push(t[i++]);
  return r;
}
function hI(e, t) {
  let n = [], s = e.length;
  for (let a = 0; a < s; a++)
    t.indexOf(a) === -1 && n.push(e[a]);
  let r = t.map((a) => e[a]);
  return [n, r];
}
function pa(e, t) {
  let n = t.map((s) => 1);
  return pI(e, n, t);
}
function oD(e, t, n) {
  O(Jg(t, n), () => `${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`);
}
function fI(e, t) {
  if (Jg(e, t))
    return null;
  let n = [];
  for (let s = 0; s < t; ++s)
    e.indexOf(s) === -1 && n.push(s);
  return e.forEach((s) => n.push(s)), n;
}
function eb(e) {
  return e.map((t, n) => [n, t]).sort((t, n) => t[1] - n[1]).map((t) => t[0]);
}
function uD(e, t) {
  let n = [];
  for (let s = t - e; s < t; ++s)
    n.push(s);
  return n;
}
function lD(e, t = null, n = false) {
  let s = _(e, "x", "logSumExp"), r = ts(t, s.shape), a = As(s, r, true), i = ge(s, a), o = Yn(i), u = ve(o, r), l = Qn(u), c = ie(G(a, l.shape), l);
  if (n) {
    let p = pa(c.shape, r);
    return G(c, p);
  }
  return c;
}
var cD = L({ logSumExp_: lD });
function dD(e, t) {
  let n = _(e, "a", "logicalAnd", "bool"), s = _(t, "b", "logicalAnd", "bool");
  it(n.shape, s.shape);
  let r = { a: n, b: s };
  return M.runKernel(So, r);
}
var Ds = L({ logicalAnd_: dD });
function pD(e) {
  let n = { x: _(e, "x", "logicalNot", "bool") };
  return M.runKernel(xl, n);
}
var tb = L({ logicalNot_: pD });
function hD(e, t) {
  let n = _(e, "a", "logicalOr", "bool"), s = _(t, "b", "logicalOr", "bool");
  it(n.shape, s.shape);
  let r = { a: n, b: s };
  return M.runKernel(tp, r);
}
var mI = L({ logicalOr_: hD });
function fD(e, t) {
  let n = _(e, "a", "logicalXor", "bool"), s = _(t, "b", "logicalXor", "bool");
  return it(n.shape, s.shape), Ds(mI(e, t), tb(Ds(e, t)));
}
var gpe = L({ logicalXor_: fD });
function mD(e, t, n, s, r) {
  let a = _(e, "x", "maxPool"), i = 1, o = a, u = false;
  a.rank === 3 && (u = true, o = G(a, [1, a.shape[0], a.shape[1], a.shape[2]])), O(o.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${o.rank}.`), O(Ps(n, i), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`), hn("maxPool", s, r);
  let l = { x: o }, c = { filterSize: t, strides: n, pad: s, dimRoundingMode: r }, p = M.runKernel(ja, l, c);
  return u ? G(p, [p.shape[1], p.shape[2], p.shape[3]]) : p;
}
var nb = L({ maxPool_: mD });
function gD(e, t = [1, 1, 1], n, s, r, a = "NDHWC") {
  let i = _(e, "x", "maxPool3d"), o = i, u = false;
  i.rank === 4 && (u = true, o = G(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), O(o.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`), O(a === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`), hn("maxPool3d", s, r);
  let l = { x: o }, c = { filterSize: t, strides: n, pad: s, dimRoundingMode: r, dataFormat: a }, p = M.runKernel(sp, l, c);
  return u ? G(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
var gI = L({ maxPool3d_: gD });
function bD(e, t, n, s, r = false) {
  let i = { x: _(e, "x", "maxPoolWithArgmax") }, o = { filterSize: t, strides: n, pad: s, includeBatchInIndex: r }, u = M.runKernel(Ng, i, o);
  return { result: u[0], indexes: u[1] };
}
var yD = L({ maxPoolWithArgmax_: bD });
function vD(e, t) {
  let n = _(e, "a", "maximum"), s = _(t, "b", "maximum");
  [n, s] = vt(n, s), n.dtype === "bool" && (n = ce(n, "int32"), s = ce(s, "int32")), it(n.shape, s.shape);
  let r = { a: n, b: s };
  return M.runKernel(qa, r);
}
var _r = L({ maximum_: vD });
function xD(e, t = null, n = false) {
  let r = { x: _(e, "x", "mean") }, a = { axis: t, keepDims: n };
  return M.runKernel(Ka, r, a);
}
var St = L({ mean_: xD });
function $t(e, t = "float32") {
  if (t === "complex64") {
    let s = $t(e, "float32"), r = $t(e, "float32");
    return ua(s, r);
  }
  let n = jd(pt(e), t);
  return M.makeTensor(n, e, t);
}
function Mn(e, t = "float32") {
  if (t === "complex64") {
    let s = Mn(e, "float32"), r = $t(e, "float32");
    return ua(s, r);
  }
  let n = rg(pt(e), t);
  return M.makeTensor(n, e, t);
}
function bpe(e, t, { indexing: n = "xy" } = {}) {
  if (n !== "xy" && n !== "ij")
    throw new TypeError(`${n} is not a valid third argument to meshgrid`);
  if (e === void 0)
    return [];
  let s = _(e, "x", "meshgrid", e instanceof et ? e.dtype : "float32");
  if (t === void 0)
    return [s];
  let r = _(t, "y", "meshgrid", t instanceof et ? t.dtype : "float32"), a = pt(s.shape), i = pt(r.shape);
  return n === "xy" ? (s = G(s, [1, -1]), r = G(r, [-1, 1]), [We(Mn([i, 1], s.dtype), s), We(r, Mn([1, a], r.dtype))]) : (s = G(s, [-1, 1]), r = G(r, [1, -1]), [We(s, Mn([1, i], s.dtype)), We(Mn([a, 1], r.dtype), r)]);
}
function wD(e, t = null, n = false) {
  let r = { x: _(e, "x", "min") }, a = { axis: t, keepDims: n };
  return M.runKernel(Xa, r, a);
}
var gm = L({ min_: wD });
function kD(e, t) {
  let n = _(e, "a", "minimum"), s = _(t, "b", "minimum");
  [n, s] = vt(n, s), n.dtype === "bool" && (n = ce(n, "int32"), s = ce(s, "int32")), it(n.shape, s.shape);
  let r = { a: n, b: s };
  return M.runKernel(Ya, r);
}
var vp = L({ minimum_: kD });
function ID(e, t, n) {
  O(n === "reflect" || n === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);
  let s = _(e, "x", "mirrorPad");
  if (s.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  O(t.length === s.rank, () => `Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);
  let r = n === "reflect" ? 1 : 0;
  for (let o = 0; o < s.rank; o++)
    O(t[o].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), O(t[o][0] >= 0 && t[o][0] <= s.shape[o] - r && t[o][1] >= 0 && t[o][1] <= s.shape[o] - r, () => `Padding in dimension ${o} cannot be greater than or equal to ${s.shape[o] - r} or less than 0 for input of shape ${s.shape}`);
  let a = { paddings: t, mode: n }, i = { x: s };
  return M.runKernel(Qa, i, a);
}
var SD = L({ mirrorPad_: ID });
function CD(e, t) {
  let n = _(e, "a", "mod"), s = _(t, "b", "mod");
  [n, s] = vt(n, s);
  let r = { a: n, b: s };
  return M.runKernel(wl, r);
}
var ND = L({ mod_: CD });
function TD(e) {
  let t = _(e, "x", "square"), n = {};
  return M.runKernel("Square", { x: t }, n);
}
var ct = L({ square_: TD });
function $D(e, t = null, n = false) {
  e = _(e, "x", "moments");
  let s = ts(t, e.shape), r = St(e, s, n), a = r.shape;
  n || (a = pa(r.shape, s));
  let i = ct(ge(ce(e, "float32"), G(r, a))), o = St(i, s, n);
  return { mean: r, variance: o };
}
var sb = L({ moments_: $D });
function _D(e, t, n, s) {
  let r = _(t, "data", "multiRNNCell"), a = Hu(n, "c", "multiRNNCell"), i = Hu(s, "h", "multiRNNCell"), o = r, u = [];
  for (let p = 0; p < e.length; p++) {
    let d = e[p](o, a[p], i[p]);
    u.push(d[0]), u.push(d[1]), o = d[1];
  }
  let l = [], c = [];
  for (let p = 0; p < u.length; p += 2)
    l.push(u[p]), c.push(u[p + 1]);
  return [l, c];
}
var ype = L({ multiRNNCell_: _D });
function AD(e, t, n, s = false) {
  let r = _(e, "logits", "multinomial"), a = r.size, i = r.rank;
  if (a < 2)
    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);
  if (i > 2)
    throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);
  n = n || Math.random();
  let u = { logits: i === 1 ? G(r, [1, -1]) : r }, l = { numSamples: t, seed: n, normalized: s }, c = M.runKernel(Tg, u, l);
  return i === 1 ? G(c, [c.size]) : c;
}
var ED = L({ multinomial_: AD });
function RD(e, t) {
  let n = _(e, "a", "notEqual", "string_or_numeric"), s = _(t, "b", "notEqual", "string_or_numeric");
  [n, s] = vt(n, s), it(n.shape, s.shape);
  let r = { a: n, b: s };
  return M.runKernel(No, r);
}
var Yu = L({ notEqual_: RD });
function DD(e) {
  let n = { x: _(e, "x", "onesLike") };
  return M.runKernel(_o, n);
}
var Zn = L({ onesLike_: DD });
function FD(e, t) {
  let n = _(e, "v1", "outerProduct"), s = _(t, "v2", "outerProduct");
  O(n.rank === 1 && s.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`);
  let r = G(n, [-1, 1]), a = G(s, [1, -1]);
  return We(r, a);
}
var vpe = L({ outerProduct_: FD });
function OD(e, t, n = 0) {
  let s = _(e, "x", "pad");
  if (s.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  let r = { paddings: t, constantValue: n }, a = { x: s };
  return M.runKernel(Ja, a, r);
}
var bi = L({ pad_: OD });
function PD(e, t, n = 0) {
  return O(t.length === 2, () => "Invalid number of paddings. Must be length of 2."), bi(e, [t], n);
}
var xpe = L({ pad1d_: PD });
function zD(e, t, n = 0) {
  return O(t.length === 2 && t[0].length === 2 && t[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), bi(e, t, n);
}
var wpe = L({ pad2d_: zD });
function MD(e, t, n = 0) {
  return O(t.length === 3 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), bi(e, t, n);
}
var kpe = L({ pad3d_: MD });
function LD(e, t, n = 0) {
  return O(t.length === 4 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2 && t[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), bi(e, t, n);
}
var Ipe = L({ pad4d_: LD });
function BD(e, t, n) {
  let s = _(e, "x", "spaceToBatchND");
  O(s.rank >= 1 + t.length, () => `input rank ${s.rank} should be > than [blockShape] ${t.length}`), O(n.length === t.length, () => `paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`), O(s.shape.reduce((i, o, u) => u > 0 && u <= t.length ? i && (o + n[u - 1][0] + n[u - 1][1]) % t[u - 1] === 0 : i, true), () => `input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`);
  let r = { x: s }, a = { blockShape: t, paddings: n };
  return M.runKernel(Lo, r, a);
}
var rb = L({ spaceToBatchND_: BD });
function VD(e, t, n, s, r, a, i) {
  r == null && (r = [1, 1]), a == null && (a = 1), s === 0 && (s = "valid");
  let o = _(e, "x", "maxPool"), u = o, l = false;
  o.rank === 3 && (l = true, u = G(o, [1, o.shape[0], o.shape[1], o.shape[2]])), O(Ps(a, r), () => `Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`);
  let c = Zk(u.shape, t, a, r, s), p = [c.dilationHeight, c.dilationWidth], d;
  s === "same" ? d = UD([c.filterHeight, c.filterWidth], p) : d = [[0, 0], [0, 0]];
  let h = p[0] === 1 && p[1] === 1, [f, m] = WD([c.inHeight, c.inWidth], p, d), g = h ? s : "valid", b = h ? u : rb(u, p, f), v = (n === "avg" ? () => qg(b, t, a, g, i) : () => nb(b, t, a, g, i))(), x = h ? v : jg(v, p, m);
  return l ? G(x, [x.shape[1], x.shape[2], x.shape[3]]) : x;
}
function WD(e, t, n) {
  let s = n.map((c) => c[0]), r = n.map((c) => c[1]), a = e.concat(s, r), i = t.map((c, p) => (c - a[p] % c) % c), o = r.map((c, p) => c + i[p]), u = t.map((c, p) => [s[p], o[p]]), l = t.map((c, p) => [0, i[p]]);
  return [u, l];
}
function UD(e, t) {
  let s = e.map((i, o) => i + (i - 1) * (t[o] - 1)).map((i) => i - 1), r = s.map((i) => Math.floor(i / 2)), a = s.map((i, o) => i - r[o]);
  return s.map((i, o) => [r[o], a[o]]);
}
var Spe = L({ pool_: VD });
function GD(e, t) {
  let n = _(e, "base", "pow"), s = _(t, "exp", "pow");
  [n, s] = vt(n, s);
  let r = { a: n, b: s };
  return M.runKernel(ei, r);
}
var ha = L({ pow_: GD });
function HD(e, t) {
  let n = _(e, "x", "prelu"), s = _(t, "alpha", "prelu"), r = { x: n, alpha: s };
  return M.runKernel(ti, r);
}
var ab = L({ prelu_: HD });
function qD(e, t = null, n = false) {
  let s = _(e, "x", "prod");
  s.dtype === "bool" && (s = ce(s, "int32"));
  let r = { x: s }, a = { axis: t, keepDims: n };
  return M.runKernel(ni, r, a);
}
var bI = L({ prod_: qD });
function jD(e, t, n) {
  let s = pt(e), r = null;
  if (n == null || n === "float32")
    r = new Float32Array(s);
  else if (n === "int32")
    r = new Int32Array(s);
  else if (n === "bool")
    r = new Uint8Array(s);
  else
    throw new Error(`Unknown data type ${n}`);
  for (let a = 0; a < s; a++)
    r[a] = t();
  return M.makeTensor(r, e, n);
}
var Cpe = L({ rand_: jD });
var ib = wa(Gd());
var ob = class {
  constructor(e, t, n, s, r) {
    this.mean = e, this.stdDev = t, this.dtype = n, this.nextVal = NaN, this.truncated = s, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    let a = r || Math.random();
    this.random = ib.alea(a.toString());
  }
  nextValue() {
    if (!isNaN(this.nextVal)) {
      let s = this.nextVal;
      return this.nextVal = NaN, s;
    }
    let e, t, n = false;
    for (; !n; ) {
      let s, r, a;
      do
        s = 2 * this.random() - 1, r = 2 * this.random() - 1, a = s * s + r * r;
      while (a >= 1 || a === 0);
      let i = Math.sqrt(-2 * Math.log(a) / a);
      e = this.mean + this.stdDev * s * i, t = this.mean + this.stdDev * r * i, (!this.truncated || this.isValidTruncated(e)) && (n = true);
    }
    return (!this.truncated || this.isValidTruncated(t)) && (this.nextVal = this.convertValue(t)), this.convertValue(e);
  }
  convertValue(e) {
    return this.dtype == null || this.dtype === "float32" ? e : Math.round(e);
  }
  isValidTruncated(e) {
    return e <= this.upper && e >= this.lower;
  }
};
var KD = class {
  constructor(e, t, n, s) {
    this.alpha = e, this.beta = 1 / t, this.dtype = n;
    let r = s || Math.random();
    this.randu = ib.alea(r.toString()), this.randn = new ob(0, 1, n, false, this.randu()), e < 1 ? this.d = e + 2 / 3 : this.d = e - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  nextValue() {
    let e, t, n, s, r, a;
    for (; ; ) {
      do
        s = this.randn.nextValue(), a = 1 + this.c * s;
      while (a <= 0);
      if (a *= a * a, e = s * s, t = 1 - 0.331 * e * e, n = 0.5 * e + this.d * (1 - a + Math.log(a)), r = this.randu(), r < t || Math.log(r) < n)
        break;
    }
    return a = 1 / this.beta * this.d * a, this.alpha < 1 && (a *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a);
  }
  convertValue(e) {
    return this.dtype === "float32" ? e : Math.round(e);
  }
};
var XD = class {
  constructor(e = 0, t = 1, n, s) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = e, this.range = t - e, this.dtype = n, s == null && (s = Math.random()), typeof s == "number" && (s = s.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);
    this.random = ib.alea(s);
  }
  convertValue(e) {
    return this.canReturnFloat() ? e : Math.round(e);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
};
function YD(e, t, n = 1, s = "float32", r) {
  if (n == null && (n = 1), s == null && (s = "float32"), s !== "float32" && s !== "int32")
    throw new Error(`Unsupported data type ${s}`);
  let a = new KD(t, n, s, r), i = De(e, s);
  for (let o = 0; o < i.values.length; o++)
    i.values[o] = a.nextValue();
  return i.toTensor();
}
var Npe = L({ randomGamma_: YD });
function QD(e, t = 0, n = 1, s, r) {
  if (s != null && s === "bool")
    throw new Error(`Unsupported data type ${s}`);
  let a = new ob(t, n, s, false, r), i = De(e, s);
  for (let o = 0; o < i.values.length; o++)
    i.values[o] = a.nextValue();
  return i.toTensor();
}
var ZD = L({ randomNormal_: QD });
function JD(e, t = 0, n = 1, s = "float32", r) {
  let a = De(e, s), i = new XD(t, n, null, r);
  for (let o = 0; o < a.values.length; o++)
    a.values[o] = i.nextValue();
  return a.toTensor();
}
var Ml = L({ randomUniform_: JD });
function Qu(e, t, n = 1, s = "float32") {
  if (n === 0)
    throw new Error("Cannot have a step of zero");
  let r = { start: e, stop: t, step: n, dtype: s };
  return M.runKernel(Il, {}, r);
}
function e3(e) {
  let n = { input: _(e, "input", "real") };
  return M.runKernel(rp, n);
}
var wd = L({ real_: e3 });
function t3(e) {
  let n = { x: _(e, "x", "reciprocal") };
  return M.runKernel(Sl, n);
}
var n3 = L({ reciprocal_: t3 });
function s3(e) {
  let n = { x: _(e, "x", "relu") };
  return M.runKernel(si, n);
}
var Ys = L({ relu_: s3 });
function r3(e) {
  let n = { x: _(e, "x", "relu6") };
  return M.runKernel(ai, n);
}
var yI = L({ relu6_: r3 });
function a3(e, t) {
  let s = { x: _(e, "x", "reverse") }, r = { dims: t };
  return M.runKernel(Do, s, r);
}
var Jn = L({ reverse_: a3 });
function i3(e) {
  let t = _(e, "x", "reverse");
  return O(t.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`), Jn(t, 0);
}
var Tpe = L({ reverse1d_: i3 });
function o3(e, t) {
  let n = _(e, "x", "reverse");
  return O(n.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`), Jn(n, t);
}
var $pe = L({ reverse2d_: o3 });
function u3(e, t) {
  let n = _(e, "x", "reverse");
  return O(n.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`), Jn(n, t);
}
var _pe = L({ reverse3d_: u3 });
function l3(e, t) {
  let n = _(e, "x", "reverse");
  return O(n.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`), Jn(n, t);
}
var Ape = L({ reverse4d_: l3 });
function c3(e) {
  let n = { x: _(e, "x", "round") };
  return M.runKernel(Fo, n);
}
var vI = L({ round_: c3 });
function d3(e) {
  let n = { x: _(e, "x", "rsqrt", "float32") };
  return M.runKernel(ii, n);
}
var xI = L({ rsqrt_: d3 });
function we(e, t) {
  if ((Yt(e) && t !== "string" || Array.isArray(e)) && t !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (t === "string" && Yt(e) && !(e instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return Tr(e, [], [], t);
}
function p3(e) {
  let n = { x: _(e, "x", "selu") };
  return M.runKernel(Nl, n);
}
var wI = L({ selu_: p3 });
function h3(e, t, n, s, r, a = [1, 1], i = "NHWC") {
  let o = _(e, "x", "separableConv2d"), u = _(t, "depthwiseFilter", "separableConv2d"), l = _(n, "pointwiseFilter", "separableConv2d"), c = o, p = false;
  if (o.rank === 3 && (p = true, c = G(o, [1, o.shape[0], o.shape[1], o.shape[2]])), i === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  O(c.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`), O(u.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`), O(l.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`), O(l.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`), O(l.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`);
  let d = u.shape[2], h = u.shape[3];
  O(l.shape[2] === d * h, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${d * h}, but got ${l.shape[2]}.`);
  let f = mp(c, u, s, r, i, a), g = da(f, l, 1, "valid", i);
  return p ? G(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
var f3 = L({ separableConv2d_: h3 });
async function m3(e, t) {
  let n = _(e, "x", "setdiff1d"), s = _(t, "y", "setdiff1d");
  O(n.dtype === s.dtype, () => `x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`), O(n.rank === 1, () => `x should be 1D tensor, but got x (${n.shape}).`), O(s.rank === 1, () => `y should be 1D tensor, but got y (${s.shape}).`);
  let r = await n.data(), a = await s.data(), i = new Set(a), o = 0;
  for (let c = 0; c < r.length; c++)
    i.has(r[c]) || o++;
  let u = new Vt([o], n.dtype), l = new Vt([o], "int32");
  for (let c = 0, p = 0; c < r.length; c++)
    i.has(r[c]) || (u.values[p] = r[c], l.values[p] = c, p++);
  return [u.toTensor(), l.toTensor()];
}
var g3 = m3;
function b3(e) {
  let n = { x: _(e, "x", "sign") };
  return M.runKernel(Tl, n);
}
var y3 = L({ sign_: b3 });
function v3(e) {
  let n = { x: _(e, "x", "sin", "float32") };
  return M.runKernel(oi, n);
}
var kI = L({ sin_: v3 });
function x3(e) {
  let n = { x: _(e, "x", "sinh") };
  return M.runKernel(Mo, n);
}
var II = L({ sinh_: x3 });
function w3(e, t, n) {
  let s = _(e, "x", "slice1d");
  return O(s.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`), qe(s, [t], [n]);
}
var ub = L({ slice1d_: w3 });
function k3(e, t, n) {
  let s = _(e, "x", "slice2d");
  return O(s.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`), qe(s, t, n);
}
var SI = L({ slice2d_: k3 });
function I3(e, t, n) {
  let s = _(e, "x", "slice3d");
  return O(s.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`), qe(s, t, n);
}
var lb = L({ slice3d_: I3 });
function S3(e, t, n) {
  let s = _(e, "x", "slice4d");
  return O(s.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`), qe(s, t, n);
}
var kd = L({ slice4d_: S3 });
function C3(e, t = -1) {
  let n = _(e, "logits", "softmax", "float32");
  if (t === -1 && (t = n.rank - 1), t !== n.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);
  let s = { logits: n }, r = { dim: t };
  return M.runKernel(di, s, r);
}
var cb = L({ softmax_: C3 });
function N3(e) {
  O(e.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`);
  let t = { input: e };
  return M.runKernel(xg, t);
}
var db = L({ fft_: N3 });
function T3(e) {
  O(e.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`);
  let t = { input: e };
  return M.runKernel(wg, t);
}
var Id = L({ ifft_: T3 });
function $3(e) {
  let t = e.shape[e.shape.length - 1], n = e.size / t, s;
  if (t <= 2) {
    let r = G(e, [n, t]);
    s = Id(r);
  } else {
    let r = [n, 2 * (t - 1)], a = G(wd(e), [n, t]), i = G(Yg(e), [n, t]), o = Jn(qe(a, [0, 1], [n, t - 2]), 1), u = V(Jn(qe(i, [0, 1], [n, t - 2]), 1), we(-1)), l = Ft([a, o], 1), c = Ft([i, u], 1), p = G(ua(l, c), [r[0], r[1]]);
    s = Id(p);
  }
  if (s = wd(s), e.rank === 3 && e.shape[0] !== 0) {
    let r = s, a = e.shape[0];
    s = G(s, [a, s.shape[0] / a, s.shape[1]]), r.dispose();
  }
  return s;
}
var CI = L({ irfft_: $3 });
function _3(e, t, n = 0) {
  let r = { x: _(e, "x", "split") }, a = { numOrSizeSplits: t, axis: n };
  return M.runKernel(Bo, r, a);
}
var Bn = L({ split_: _3 });
function A3(e, t) {
  O(e.dtype === "float32", () => `The dtype for rfft() must be real value but got ${e.dtype}`);
  let n = e.shape[e.shape.length - 1], s = e.size / n, r;
  if (t != null && t < n) {
    let f = e.shape.map((g) => 0), m = e.shape.map((g) => g);
    m[e.shape.length - 1] = t, r = qe(e, f, m), n = t;
  } else if (t != null && t > n) {
    let f = e.shape.map((m) => m);
    f[e.shape.length - 1] = t - n, r = Ft([e, $t(f)], e.shape.length - 1), n = t;
  } else
    r = e;
  let a = je(r), i = G(ua(r, a), [s, n]), o = db(i), u = Math.floor(n / 2) + 1, l = wd(o), c = Yg(o), p = Bn(l, [u, n - u], l.shape.length - 1), d = Bn(c, [u, n - u], c.shape.length - 1), h = r.shape.slice();
  return h[r.shape.length - 1] = u, G(ua(p[0], d[0]), h);
}
var pb = L({ rfft_: A3 });
function E3(e) {
  let n = { x: _(e, "x", "sqrt", "float32") };
  return M.runKernel(li, n);
}
var cn = L({ sqrt_: E3 });
function R3(e, t) {
  let n = _(e, "a", "squaredDifference"), s = _(t, "b", "squaredDifference");
  [n, s] = vt(n, s), it(n.shape, s.shape);
  let r = { a: n, b: s }, a = {};
  return M.runKernel(pi, r, a);
}
var NI = L({ squaredDifference_: R3 });
function D3(e, t) {
  let n = _(e, "x", "squeeze");
  return G(n, Xw(n.shape, t).newShape);
}
var gr = L({ squeeze_: D3 });
function F3(e, t = 0) {
  let n = Hu(e, "tensors", "stack", "string_or_numeric");
  O(n.length >= 1, () => "Pass at least one tensor to tf.stack"), n.length > 0 && O(t <= n[0].rank, () => "Axis must be <= rank of the tensor");
  let s = n, r = { axis: t };
  return M.runKernel(Eo, s, r);
}
var es = L({ stack_: F3 });
function O3(e, t = 0) {
  let s = { x: _(e, "x", "step") }, r = { alpha: t };
  return M.runKernel(gi, s, r);
}
var xp = L({ step_: O3 });
function P3(e, t, n, s, r = 0, a = 0, i = 0, o = 0, u = 0) {
  let c = { x: _(e, "x", "stridedSlice", "string_or_numeric") }, p = { begin: t, end: n, strides: s, beginMask: r, endMask: a, ellipsisMask: i, newAxisMask: o, shrinkAxisMask: u };
  return M.runKernel(Vo, c, p);
}
var z3 = L({ stridedSlice_: P3 });
function M3(e) {
  let n = { x: _(e, "x", "tan", "float32") };
  return M.runKernel(Wo, n);
}
var L3 = L({ tan_: M3 });
function Qt(e, t) {
  ka(e);
  let n = Rs(e, t);
  if (n.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return Tr(e, null, n, t);
}
function Yi(e, t, n) {
  if (ka(e), t != null && t.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  let s = Rs(e, n);
  if (s.length !== 2 && s.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return Tr(e, t, s, n);
}
function Epe(e, t, n) {
  if (ka(e), t != null && t.length !== 4)
    throw new Error("tensor4d() requires shape to have four numbers");
  let s = Rs(e, n);
  if (s.length !== 4 && s.length !== 1)
    throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return Tr(e, t, s, n);
}
function Rpe(e, t, n) {
  if (ka(e), t != null && t.length !== 5)
    throw new Error("tensor5d() requires shape to have five numbers");
  let s = Rs(e, n);
  if (s.length !== 5 && s.length !== 1)
    throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return Tr(e, t, s, n);
}
function Dpe(e, t, n) {
  if (ka(e), t != null && t.length !== 6)
    throw new Error("tensor6d() requires shape to have six numbers");
  let s = Rs(e, n);
  if (s.length !== 6 && s.length !== 1)
    throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return t = t || s, Tr(e, t, s, n);
}
function B3(e, t = 1, n = true) {
  let s = _(e, "x", "topk");
  if (s.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  let r = s.shape[s.shape.length - 1];
  if (t < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);
  if (t > r)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);
  let a = { x: s }, i = { k: t, sorted: n }, [o, u] = M.runKernel(Uo, a, i);
  return { values: o, indices: u };
}
var V3 = L({ topk_: B3 });
function W3(e, t = 0, n = 1, s, r) {
  if (s != null && s === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  let a = new ob(t, n, s, true, r), i = De(e, s);
  for (let o = 0; o < i.values.length; o++)
    i.values[o] = a.nextValue();
  return i.toTensor();
}
var hb = L({ truncatedNormal_: W3 });
function U3(e, t = 0) {
  let n = _(e, "x", "unique", "string_or_numeric");
  O(n.rank > 0, () => "The input tensor must be at least 1D");
  let s = { x: n }, r = { axis: t }, [a, i] = M.runKernel(Rg, s, r);
  return { values: a, indices: i };
}
var mx = L({ unique_: U3 });
function G3(e, t, n) {
  let s = _(e, "x", "unsortedSegmentSum"), r = _(t, "segmentIds", "unsortedSegmentSum", "int32");
  O(Zi(n), () => "numSegments must be of dtype int");
  let a = { x: s, segmentIds: r }, i = { numSegments: n };
  return M.runKernel(cp, a, i);
}
var H3 = L({ unsortedSegmentSum_: G3 });
function q3(e, t = 0) {
  let n = _(e, "x", "unstack", "string_or_numeric");
  O(t >= -n.shape.length && t < n.shape.length, () => `Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`);
  let s = { value: n }, r = { axis: t };
  return M.runKernel(Ho, s, r);
}
var Fs = L({ unstack_: q3 });
function j3(e, t = true, n, s) {
  return M.makeVariable(e, t, n, s);
}
function TI(e, t) {
  let n = [];
  for (let a = 0; a < t.length; a++)
    t[a] && n.push(a);
  let s = De(e, "int32"), r = De([n.length, e.length], "int32");
  for (let a = 0; a < n.length; a++) {
    let i = s.indexToLoc(n[a]), o = a * e.length;
    r.values.set(i, o);
  }
  return r.toTensor();
}
async function K3(e) {
  let t = _(e, "condition", "whereAsync", "bool"), n = await t.data(), s = TI(t.shape, n);
  return e !== t && t.dispose(), s;
}
var $I = K3;
async function X3(e, t, n) {
  let s = _(e, "tensor", "boolMask"), r = _(t, "mask", "boolMask", "bool"), a = n == null ? 0 : n, i = r.rank, o = s.shape;
  O(i > 0, () => "mask cannot be scalar"), pn(o.slice(a, a + i), r.shape, "mask's shape must match the first K dimensions of tensor's shape,");
  let u = 1;
  for (let m = a; m < a + i; m++)
    u *= o[m];
  let l = o.slice(0, a).concat([u], o.slice(a + i)), c = G(s, l), p = G(r, [-1]), d = await $I(p), h = gr(d, [1]), f = Xu(c, h, a);
  return e !== s && s.dispose(), t !== r && r.dispose(), h.dispose(), c.dispose(), p.dispose(), d.dispose(), f;
}
var Fpe = X3;
function Y3(e, t = "euclidean", n = null, s = false) {
  e = _(e, "x", "norm");
  let r = _I(e, t, n), a = r.shape;
  if (s) {
    let i = ts(n, e.shape);
    a = pa(r.shape, i);
  }
  return G(r, a);
}
function _I(e, t, n = null) {
  if (e.rank === 0)
    return Mt(e);
  if (e.rank !== 1 && n === null)
    return _I(G(e, [-1]), t, n);
  if (e.rank === 1 || typeof n == "number" || Array.isArray(n) && n.length === 1) {
    if (t === 1)
      return ve(Mt(e), n);
    if (t === 1 / 0)
      return As(Mt(e), n);
    if (t === -1 / 0)
      return gm(Mt(e), n);
    if (t === "euclidean" || t === 2)
      return cn(ve(ha(Mt(e), we(2, "int32")), n));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  if (Array.isArray(n) && n.length === 2) {
    if (t === 1)
      return As(ve(Mt(e), n[0]), n[1] - 1);
    if (t === 1 / 0)
      return As(ve(Mt(e), n[1]), n[0]);
    if (t === -1 / 0)
      return gm(ve(Mt(e), n[1]), n[0]);
    if (t === "fro" || t === "euclidean")
      return cn(ve(ct(e), n));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  throw new Error(`Error in norm: invalid axis: ${n}`);
}
var AI = L({ norm_: Y3 });
function Q3(e, t, n, s, r = true) {
  let a = _(e, "v", "movingAverage"), i = _(t, "x", "movingAverage"), o = _(n, "decay", "movingAverage");
  hk(a, i), O(Ir(a.shape, i.shape), () => "Shape mismatch in v and x");
  let u = we(1), l = ge(u, o), c = V(ge(i, a), l);
  if (r) {
    O(s != null, () => "When using zeroDebias: true, step is required.");
    let p = _(s, "step", "movingAverage");
    c = xe(c, ge(u, ha(o, p)));
  }
  return ie(a, c);
}
var Ope = L({ movingAverage_: Q3 });
function Z3(e, t, n) {
  let s = _(e, "indices", "scatterND", "int32"), r = _(t, "updates", "scatterND");
  Wg(r, s, n);
  let a = { indices: s, updates: r }, i = { shape: n };
  return M.runKernel(Oo, a, i);
}
var J3 = L({ scatterND_: Z3 });
function eF(e, t, n, s) {
  if (e.dtype !== "int32")
    throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);
  if (e.rank > 2)
    throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);
  let r = e.rank > 0 ? e.shape[0] : 1, a = e.rank > 1 ? e.shape[1] : 1;
  if (n.length !== a)
    throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);
  let i = t.size;
  if (!(t.rank === 0 || t.rank === 1 && i === r))
    throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);
  if (t.dtype !== s.dtype)
    throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
function tF(e, t, n, s = 0) {
  let r = _(e, "sparseIndices", "sparseToDense", "int32"), a = _(t, "sparseValues", "sparseToDense"), i = _(s, "defaultValue", "sparseToDense", a.dtype);
  eF(r, a, n, i);
  let o = { sparseIndices: r, sparseValues: a, defaultValue: i }, u = { outputShape: n };
  return M.runKernel(up, o, u);
}
var EI = L({ sparseToDense_: tF });
function nF(e, t) {
  let n = _(t, "indices", "gatherND", "int32"), r = { params: _(e, "x", "gatherND", "string_or_numeric"), indices: n };
  return M.runKernel(xo, r);
}
var sF = L({ gatherND_: nF });
function rF(e, t) {
  if (t == null)
    return e.shape.slice();
  if (Ir(e.shape, t))
    return t;
  if (e.shape.length === t.length) {
    let n = [];
    for (let s = 0; s < e.shape.length; s++)
      t[s] == null && e.shape[s] != null ? n.push(e.shape[s]) : n.push(t[s]);
    return n;
  }
  return t;
}
function aF(e, t, n, s) {
  let r = _(e, "x", "dropout");
  if (O(r.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`), O(t >= 0 && t < 1, () => `rate must be a float in the range [0, 1), but got ${t}.`), t === 0)
    return e instanceof et ? r.clone() : r;
  let a = rF(r, n), i = 1 - t, o = xe(bp(ie(Ml(a, 0, 1, "float32", s), i)), i);
  return V(r, o);
}
var iF = L({ dropout_: aF });
function oF(e) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(e) / Math.log(2))));
}
function RI(e, t, n) {
  let s = 1 - e % 2, r = new Float32Array(e);
  for (let a = 0; a < e; ++a) {
    let i = 2 * Math.PI * a / (e + s - 1);
    r[a] = t - n * Math.cos(i);
  }
  return Qt(r, "float32");
}
async function uF(e, t, n = 1) {
  let s = _(e, "predictions", "inTopK"), r = _(t, "targets", "inTopK");
  O(s.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`), O(s.rank - 1 === r.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`), pn(s.shape.slice(0, s.shape.length - 1), r.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
  let a = s.shape[s.shape.length - 1];
  O(n > 0 && n <= a, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);
  let i = await s.data(), o = await r.data(), [u, l] = [i.length / a, a], c = Yw("bool", u);
  for (let p = 0; p < u; p++) {
    let d = p * l, h = i.subarray(d, d + l), f = [];
    for (let m = 0; m < h.length; m++)
      f.push({ value: h[m], index: m });
    f.sort((m, g) => g.value - m.value), c[p] = 0;
    for (let m = 0; m < n; m++)
      if (f[m].index === o[p]) {
        c[p] = 1;
        break;
      }
  }
  return e !== s && s.dispose(), t !== r && r.dispose(), fs(c, r.shape, "bool");
}
var Ppe = uF;
var fa = {};
Ae(fa, { conv2d: () => dF, depthwiseConv2d: () => mF, matMul: () => bF });
function lF(e, t, n, s, r, a = "NHWC", i) {
  let o = e;
  e.rank === 3 && (o = G(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  let u = t;
  u.rank === 3 && (u = G(t, [1, t.shape[0], t.shape[1], t.shape[2]])), O(o.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`), O(u.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`), O(n.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`);
  let l = a === "NHWC" ? o.shape[3] : o.shape[1], c = a === "NHWC" ? u.shape[3] : u.shape[1];
  O(l === n[2], () => `Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`), O(c === n[3], () => `Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`), hn("conv2dDerFilter", r, i);
  let p = { x: o, dy: u }, d = { strides: s, pad: r, dataFormat: a, dimRoundingMode: i, filterShape: n };
  return M.runKernel(pg, p, d);
}
var fb = L({ conv2DBackpropFilter_: lF });
function wp(e, t, n) {
  if (n == null || n === "linear")
    return e;
  if (n === "relu")
    return V(e, xp(t));
  throw new Error(`Cannot compute gradient for fused activation ${n}.`);
}
function kp(e, t) {
  let n = t, s = _t(e.shape, t.shape);
  return s.length > 0 && (n = ve(n, s)), G(n, e.shape);
}
function Ip(e, t, n, s) {
  if (t === "linear")
    return e;
  if (t === "relu")
    return Ys(e);
  if (t === "elu")
    return gp(e);
  if (t === "relu6")
    return yI(e);
  if (t === "prelu")
    return ab(e, n);
  if (t === "leakyrelu")
    return Qg(e, s);
  if (t === "sigmoid")
    return qs(e);
  throw new Error(`Unknown fused activation ${t}.`);
}
var Sp = (e, t) => !(e > 0) || t === "linear";
function cF({ x: e, filter: t, strides: n, pad: s, dataFormat: r = "NHWC", dilations: a = [1, 1], dimRoundingMode: i, bias: o, activation: u = "linear", preluActivationWeights: l, leakyreluAlpha: c }) {
  if (u = u || "linear", Sp(M.state.gradientDepth, u) === false) {
    let k = da(e, t, n, s, r, a, i);
    return o != null && (k = ie(k, o)), Ip(k, u, l, c);
  }
  let p = _(e, "x", "conv2d", "float32"), d = _(t, "filter", "conv2d", "float32"), h = p, f = false;
  p.rank === 3 && (f = true, h = G(p, [1, p.shape[0], p.shape[1], p.shape[2]])), O(h.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${h.rank}.`), O(d.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`), hn("fused conv2d", s, i), O(h.shape[3] === d.shape[2], () => `Error in conv2d: depth of input (${h.shape[3]}) must match input depth for filter ${d.shape[2]}.`), O(Ps(n, a), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`), O(r === "NHWC", () => `Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`);
  let m = Ol(h.shape, d.shape, n, a, s, i), g;
  o != null && (g = _(o, "bias", "fused conv2d"), [g] = vt(g, p), it(m.outShape, g.shape));
  let b;
  l != null && (b = _(l, "prelu weights", "fused conv2d"));
  let y = (k, S) => {
    let [$, E, A, P] = S, R = wp(k, A, u);
    O(mr(a), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);
    let F = Kg(E.shape, R, $, n, s), T = fb(E, R, $.shape, n, s), z = [F, T];
    if (P != null) {
      let W = kp(P, R);
      z.push(W);
    }
    return z;
  }, v = { x: h, filter: d, bias: g, preluActivationWeights: b }, x = { strides: n, pad: s, dataFormat: r, dilations: a, dimRoundingMode: i, activation: u, leakyreluAlpha: c };
  return o == null ? js((S, $, E) => {
    let A = M.runKernel(ia, v, x);
    return E([$, S, A]), f && (A = G(A, [A.shape[1], A.shape[2], A.shape[3]])), { value: A, gradFunc: y };
  })(h, d) : js((S, $, E, A) => {
    let P = M.runKernel(ia, v, x);
    return A([$, S, P, E]), f && (P = G(P, [P.shape[1], P.shape[2], P.shape[3]])), { value: P, gradFunc: y };
  })(h, d, g);
}
var dF = L({ fusedConv2d_: cF });
function pF(e, t, n, s, r, a = [1, 1], i) {
  let o = e;
  e.rank === 3 && (o = G(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  let u = t;
  u.rank === 3 && (u = G(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  let l = { x: o, dy: u }, c = { strides: s, pad: r, dimRoundingMode: i, dilations: a, filterShape: n };
  return M.runKernel(gg, l, c);
}
var DI = L({ depthwiseConv2dNativeBackpropFilter_: pF });
function hF(e, t, n, s, r, a = [1, 1], i) {
  let o = t, u = false;
  t.rank === 3 && (u = true, o = G(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  let l = { dy: o, filter: n }, c = { strides: s, pad: r, dimRoundingMode: i, dilations: a, inputShape: e }, p = M.runKernel(bg, l, c);
  return u ? G(p, [p.shape[1], p.shape[2], p.shape[3]]) : p;
}
var FI = L({ depthwiseConv2dNativeBackpropInput_: hF });
function fF({ x: e, filter: t, strides: n, pad: s, dataFormat: r = "NHWC", dilations: a = [1, 1], dimRoundingMode: i, bias: o, activation: u = "linear", preluActivationWeights: l, leakyreluAlpha: c }) {
  if (Sp(M.state.gradientDepth, u) === false) {
    let k = mp(e, t, n, s, r, a, i);
    return o != null && (k = ie(k, o)), Ip(k, u, l, c);
  }
  let p = _(e, "x", "depthwiseConv2d", "float32"), d = _(t, "filter", "depthwiseConv2d", "float32"), h = p, f = false;
  p.rank === 3 && (f = true, h = G(p, [1, p.shape[0], p.shape[1], p.shape[2]])), O(h.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${h.rank}.`), O(d.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`), O(h.shape[3] === d.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${h.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`), a == null && (a = [1, 1]), O(Ps(n, a), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`), hn("fused depthwiseConv2d", s, i);
  let m = Ol(h.shape, d.shape, n, a, s, i, true), g;
  o != null && (g = _(o, "bias", "fused conv2d"), [g] = vt(g, p), it(m.outShape, g.shape));
  let b;
  l != null && (b = _(l, "prelu weights", "fused depthwiseConv2d"));
  let y = (k, S) => {
    O(mr(a), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);
    let [$, E, A, P] = S, R = wp(k, A, u), F = FI(E.shape, R, $, n, s, a, i), T = DI(E, R, $.shape, n, s, a, i);
    if (P != null) {
      let z = kp(g, R);
      return [F, T, z];
    }
    return [F, T];
  }, v = { x: h, filter: d, bias: g, preluActivationWeights: b }, x = { strides: n, pad: s, dataFormat: r, dilations: a, dimRoundingMode: i, activation: u, leakyreluAlpha: c };
  return o == null ? js((S, $, E) => {
    let A = M.runKernel(oa, v, x);
    return E([$, S, A]), f && (A = G(A, [A.shape[1], A.shape[2], A.shape[3]])), { value: A, gradFunc: y };
  })(h, d) : js((S, $, E, A) => {
    let P = M.runKernel(oa, v, x);
    return A([$, S, P, E]), f && (P = G(P, [P.shape[1], P.shape[2], P.shape[3]])), { value: P, gradFunc: y };
  })(h, d, g);
}
var mF = L({ fusedDepthwiseConv2d_: fF });
function gF({ a: e, b: t, transposeA: n = false, transposeB: s = false, bias: r, activation: a = "linear", preluActivationWeights: i, leakyreluAlpha: o }) {
  if (Sp(M.state.gradientDepth, a) === false) {
    let R = We(e, t, n, s);
    return r != null && (R = ie(R, r)), Ip(R, a, i, o);
  }
  let u = _(e, "a", "fused matMul"), l = _(t, "b", "fused matMul");
  [u, l] = vt(u, l);
  let c = n ? u.shape[u.rank - 2] : u.shape[u.rank - 1], p = s ? l.shape[l.rank - 1] : l.shape[l.rank - 2], d = n ? u.shape[u.rank - 1] : u.shape[u.rank - 2], h = s ? l.shape[l.rank - 2] : l.shape[l.rank - 1], f = u.shape.slice(0, -2), m = l.shape.slice(0, -2), g = pt(f), b = pt(m);
  O(c === p, () => `Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${s} must match.`);
  let v = it(u.shape.slice(0, -2), l.shape.slice(0, -2)).concat([d, h]), x = n ? G(u, [g, c, d]) : G(u, [g, d, c]), k = s ? G(l, [b, h, p]) : G(l, [b, p, h]), S;
  r != null && (S = _(r, "bias", "fused matMul"), [S] = vt(S, u), it(v, S.shape));
  let $;
  i != null && ($ = _(i, "prelu weights", "fused matMul"));
  let E = (R, F) => {
    let [T, z, W, q] = F, K = wp(G(R, W.shape), W, a), Y, Z;
    if (!n && !s ? (Y = We(K, z, false, true), Z = We(T, K, true, false)) : !n && s ? (Y = We(K, z, false, false), Z = We(K, T, true, false)) : n && !s ? (Y = We(z, K, false, true), Z = We(T, K, false, false)) : (Y = We(z, K, true, true), Z = We(K, T, true, true)), r != null) {
      let te = kp(q, K);
      return [Y, Z, te];
    } else
      return [Y, Z];
  }, A = { a: x, b: k, bias: S, preluActivationWeights: $ }, P = { transposeA: n, transposeB: s, activation: a, leakyreluAlpha: o };
  return r == null ? js((F, T, z) => {
    let W = M.runKernel(aa, A, P);
    return z([F, T, W]), { value: G(W, v), gradFunc: E };
  })(x, k) : js((F, T, z, W) => {
    let q = M.runKernel(aa, A, P);
    return W([F, T, q, z]), { value: G(q, v), gradFunc: E };
  })(x, k, S);
}
var bF = L({ fusedMatMul_: gF });
function yF(e) {
  return RI(e, 0.54, 0.46);
}
var vF = L({ hammingWindow_: yF });
function xF(e) {
  return RI(e, 0.5, 0.5);
}
var OI = L({ hannWindow_: xF });
function wF(e, t, n, s = false, r = 0) {
  let a = 0, i = [];
  for (; a + t <= e.size; )
    i.push(qe(e, a, t)), a += n;
  if (s)
    for (; a < e.size; ) {
      let o = a + t - e.size, u = Ft([qe(e, a, t - o), Pl([o], r)]);
      i.push(u), a += n;
    }
  return i.length === 0 ? Yi([], [0, t]) : G(Ft(i), [i.length, t]);
}
var PI = L({ frame_: wF });
function kF(e, t, n, s, r = OI) {
  s == null && (s = oF(t));
  let a = PI(e, t, n), i = V(a, r(t));
  return pb(i, s);
}
var IF = L({ stft_: kF });
function SF(e, t, n, s, r = "bilinear", a = 0) {
  let i = _(e, "image", "cropAndResize"), o = _(t, "boxes", "cropAndResize", "float32"), u = _(n, "boxInd", "cropAndResize", "int32"), l = o.shape[0];
  O(i.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`), O(o.rank === 2 && o.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${l},4] but had shape ${o.shape}.`), O(u.rank === 1 && u.shape[0] === l, () => `Error in cropAndResize: boxInd must be have size [${l}] but had shape ${o.shape}.`), O(s.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`), O(s[0] >= 1 && s[1] >= 1, () => `cropSize must be atleast [1,1], but was ${s}`), O(r === "bilinear" || r === "nearest", () => `method must be bilinear or nearest, but was ${r}`);
  let c = { image: i, boxes: o, boxInd: u }, p = { method: r, extrapolationValue: a, cropSize: s };
  return M.runKernel(ho, c, p);
}
var CF = L({ cropAndResize_: SF });
function NF(e) {
  let t = _(e, "image", "flipLeftRight", "float32");
  O(t.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);
  let n = { image: t };
  return M.runKernel(yo, n, {});
}
var TF = L({ flipLeftRight_: NF });
function $F(e) {
  let t = _(e, "image", "grayscaleToRGB"), n = t.rank - 1, s = t.shape[n];
  O(t.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`), O(s === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);
  let r = new Array(t.rank);
  return r.fill(1, 0, n), r[n] = 3, ps(t, r);
}
var _F = L({ grayscaleToRGB_: $F });
function AF(e, t, n = 0, s = 0.5) {
  let r = _(e, "image", "rotateWithOffset", "float32");
  O(r.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);
  let a = { image: r }, i = { radians: t, fillValue: n, center: s };
  return M.runKernel(jo, a, i);
}
var EF = L({ rotateWithOffset_: AF });
function Qo(e, t, n, s, r, a) {
  s == null && (s = 0.5), r == null && (r = Number.NEGATIVE_INFINITY), a == null && (a = 0);
  let i = e.shape[0];
  return n = Math.min(n, i), O(0 <= s && s <= 1, () => `iouThreshold must be in [0, 1], but was '${s}'`), O(e.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${e.rank}'`), O(e.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`), O(t.rank === 1, () => "scores must be a 1D tensor"), O(t.shape[0] === i, () => `scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`), O(0 <= a && a <= 1, () => `softNmsSigma must be in [0, 1], but was '${a}'`), { maxOutputSize: n, iouThreshold: s, scoreThreshold: r, softNmsSigma: a };
}
function RF(e, t, n, s = 0.5, r = Number.NEGATIVE_INFINITY) {
  let a = _(e, "boxes", "nonMaxSuppression", "float32"), i = _(t, "scores", "nonMaxSuppression", "float32"), o = Qo(a, i, n, s, r);
  n = o.maxOutputSize, s = o.iouThreshold, r = o.scoreThreshold;
  let u = { maxOutputSize: n, iouThreshold: s, scoreThreshold: r };
  return M.runKernel(To, { boxes: a, scores: i }, u);
}
var DF = L({ nonMaxSuppression_: RF });
function FF(e, t, n) {
  let s = OF(e, t, n), r = s < 0 ? -(s + 1) : s;
  e.splice(r, 0, t);
}
function OF(e, t, n) {
  return zF(e, t, n || PF);
}
function PF(e, t) {
  return e > t ? 1 : e < t ? -1 : 0;
}
function zF(e, t, n) {
  let s = 0, r = e.length, a = 0, i = false;
  for (; s < r; ) {
    a = s + (r - s >>> 1);
    let o = n(t, e[a]);
    o > 0 ? s = a + 1 : (r = a, i = !o);
  }
  return i ? s : -s - 1;
}
function zI(e, t, n, s, r) {
  return mb(e, t, n, s, r, 0);
}
function MI(e, t, n, s, r, a) {
  return mb(e, t, n, s, r, 0, false, a, true);
}
function LI(e, t, n, s, r, a) {
  return mb(e, t, n, s, r, a, true);
}
function mb(e, t, n, s, r, a, i = false, o = false, u = false) {
  let l = [];
  for (let g = 0; g < t.length; g++)
    t[g] > r && l.push({ score: t[g], boxIndex: g, suppressBeginIndex: 0 });
  l.sort(gx);
  let c = a > 0 ? -0.5 / a : 0, p = [], d = [];
  for (; p.length < n && l.length > 0; ) {
    let g = l.pop(), { score: b, boxIndex: y, suppressBeginIndex: v } = g;
    if (b < r)
      break;
    let x = false;
    for (let k = p.length - 1; k >= v; --k) {
      let S = MF(e, y, p[k]);
      if (S >= s) {
        x = true;
        break;
      }
      if (g.score = g.score * LF(s, c, S), g.score <= r)
        break;
    }
    g.suppressBeginIndex = p.length, x || (g.score === b ? (p.push(y), d.push(g.score)) : g.score > r && FF(l, g, gx));
  }
  let h = p.length, f = n - h;
  o && f > 0 && (p.push(...new Array(f).fill(0)), d.push(...new Array(f).fill(0)));
  let m = { selectedIndices: p };
  return i && (m.selectedScores = d), u && (m.validOutputs = h), m;
}
function MF(e, t, n) {
  let s = e.subarray(t * 4, t * 4 + 4), r = e.subarray(n * 4, n * 4 + 4), a = Math.min(s[0], s[2]), i = Math.min(s[1], s[3]), o = Math.max(s[0], s[2]), u = Math.max(s[1], s[3]), l = Math.min(r[0], r[2]), c = Math.min(r[1], r[3]), p = Math.max(r[0], r[2]), d = Math.max(r[1], r[3]), h = (o - a) * (u - i), f = (p - l) * (d - c);
  if (h <= 0 || f <= 0)
    return 0;
  let m = Math.max(a, l), g = Math.max(i, c), b = Math.min(o, p), y = Math.min(u, d), v = Math.max(b - m, 0) * Math.max(y - g, 0);
  return v / (h + f - v);
}
function LF(e, t, n) {
  let s = Math.exp(t * n * n);
  return n <= e ? s : 0;
}
function gx(e, t) {
  return e.score - t.score || e.score === t.score && t.boxIndex - e.boxIndex;
}
async function BF(e, t, n, s = 0.5, r = Number.NEGATIVE_INFINITY) {
  let a = _(e, "boxes", "nonMaxSuppressionAsync"), i = _(t, "scores", "nonMaxSuppressionAsync"), o = Qo(a, i, n, s, r);
  n = o.maxOutputSize, s = o.iouThreshold, r = o.scoreThreshold;
  let u = await Promise.all([a.data(), i.data()]), l = u[0], c = u[1], { selectedIndices: p } = zI(l, c, n, s, r);
  return a !== e && a.dispose(), i !== t && i.dispose(), Qt(p, "int32");
}
var VF = BF;
function WF(e, t, n, s = 0.5, r = Number.NEGATIVE_INFINITY, a = 0) {
  let i = _(e, "boxes", "nonMaxSuppression"), o = _(t, "scores", "nonMaxSuppression"), u = Qo(i, o, n, s, r, a);
  n = u.maxOutputSize, s = u.iouThreshold, r = u.scoreThreshold, a = u.softNmsSigma;
  let l = { boxes: i, scores: o }, c = { maxOutputSize: n, iouThreshold: s, scoreThreshold: r, softNmsSigma: a }, p = M.runKernel($o, l, c);
  return { selectedIndices: p[0], selectedScores: p[1] };
}
var UF = L({ nonMaxSuppressionWithScore_: WF });
async function GF(e, t, n, s = 0.5, r = Number.NEGATIVE_INFINITY, a = 0) {
  let i = _(e, "boxes", "nonMaxSuppressionAsync"), o = _(t, "scores", "nonMaxSuppressionAsync"), u = Qo(i, o, n, s, r, a);
  n = u.maxOutputSize, s = u.iouThreshold, r = u.scoreThreshold, a = u.softNmsSigma;
  let l = await Promise.all([i.data(), o.data()]), c = l[0], p = l[1], { selectedIndices: d, selectedScores: h } = LI(c, p, n, s, r, a);
  return i !== e && i.dispose(), o !== t && o.dispose(), { selectedIndices: Qt(d, "int32"), selectedScores: Qt(h) };
}
var HF = GF;
function qF(e, t, n, s = 0.5, r = Number.NEGATIVE_INFINITY, a = false) {
  let i = _(e, "boxes", "nonMaxSuppression"), o = _(t, "scores", "nonMaxSuppression"), u = Qo(i, o, n, s, r, null), l = u.maxOutputSize, c = u.iouThreshold, p = u.scoreThreshold, d = { boxes: i, scores: o }, h = { maxOutputSize: l, iouThreshold: c, scoreThreshold: p, padToMaxOutputSize: a }, f = M.runKernel(kl, d, h);
  return { selectedIndices: f[0], validOutputs: f[1] };
}
var jF = L({ nonMaxSuppressionPadded_: qF });
async function KF(e, t, n, s = 0.5, r = Number.NEGATIVE_INFINITY, a = false) {
  let i = _(e, "boxes", "nonMaxSuppressionAsync"), o = _(t, "scores", "nonMaxSuppressionAsync"), u = Qo(i, o, n, s, r, null), l = u.maxOutputSize, c = u.iouThreshold, p = u.scoreThreshold, [d, h] = await Promise.all([i.data(), o.data()]), { selectedIndices: f, validOutputs: m } = MI(d, h, l, c, p, a);
  return i !== e && i.dispose(), o !== t && o.dispose(), { selectedIndices: Qt(f, "int32"), validOutputs: we(m, "int32") };
}
var XF = KF;
function YF(e, t, n = false, s = false) {
  let r = _(e, "images", "resizeBilinear");
  O(r.rank === 3 || r.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`), O(t.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`), O(s === false || n === false, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let a = r, i = false;
  r.rank === 3 && (i = true, a = G(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let [] = t, o = { images: a }, u = { alignCorners: n, halfPixelCenters: s, size: t }, l = M.runKernel(ri, o, u);
  return i ? G(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
var QF = L({ resizeBilinear_: YF });
function ZF(e, t, n = false, s = false) {
  let r = _(e, "images", "resizeNearestNeighbor");
  O(r.rank === 3 || r.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`), O(t.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`), O(r.dtype === "float32" || r.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), O(s === false || n === false, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let a = r, i = false;
  r.rank === 3 && (i = true, a = G(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let [] = t, o = { images: a }, u = { alignCorners: n, halfPixelCenters: s, size: t }, l = M.runKernel(Cl, o, u);
  return i ? G(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
var JF = L({ resizeNearestNeighbor_: ZF });
function eO(e, t = "binary", n = false, s = 0.5) {
  let r = _(e, "image", "threshold"), a = 0.2989, i = 0.587, o = 0.114, u = r.shape[0] * r.shape[1], l = V(Qt([s]), 255), c, p, d, h;
  if (O(r.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${r.rank}.`), O(r.shape[2] === 3 || r.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`), O(r.dtype === "int32" || r.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`), O(t === "otsu" || t === "binary", () => `Method must be binary or otsu, but was ${t}`), r.shape[2] === 3) {
    [c, p, d] = Bn(r, [1, 1, 1], -1);
    let g = V(c, a), b = V(p, i), y = V(d, o);
    h = ie(ie(g, b), y);
  } else
    h = e;
  if (t === "otsu") {
    let g = nI(ce(vI(h), "int32"), fs([]), 256);
    l = tO(g, u);
  }
  let f = n ? Yo(h, l) : Un(h, l);
  return ce(V(f, 255), "int32");
}
function tO(e, t) {
  let n = Qt([-1]), s = Qt([0]), r = Qt([0]), a, i, o, u, l, c;
  for (let p = 0; p < e.size - 1; p++) {
    a = qe(e, 0, p + 1), i = qe(e, p + 1), l = xe(ve(a), t), c = xe(ve(i), t);
    let d = ve(V(a, Qu(0, a.size)));
    o = xe(d, ve(a));
    let h = Pl(i.shape, a.size), f = ie(Qu(0, i.size), h), m = V(i, f);
    u = xe(ve(m), ve(i));
    let g = ge(o, u), b = ge(o, u), y = V(l, c);
    r = V(V(y, g), b);
    let v = Un(r, s);
    s = vn(v, r, s), n = vn(v, Qt([p]), n);
  }
  return n;
}
var nO = L({ threshold_: eO });
function sO(e, t, n = "nearest", s = "constant", r = 0, a) {
  let i = _(e, "image", "transform", "float32"), o = _(t, "transforms", "transform", "float32");
  O(i.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${i.rank}.`), O(o.rank === 2 && (o.shape[0] === i.shape[0] || o.shape[0] === 1) && o.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), O(a == null || a.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${a}.`);
  let u = { image: i, transforms: o }, l = { interpolation: n, fillMode: s, fillValue: r, outputShape: a };
  return M.runKernel(Go, u, l);
}
var rO = L({ transform_: sO });
function aO(e, t, n) {
  O(t % 1 === 0, () => `bandPart(): numLower must be an integer, got ${t}.`), O(n % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${n}.`);
  let s = _(e, "a", "bandPart");
  O(s.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${s.rank}.`);
  let r = s.shape, [a, i] = s.shape.slice(-2);
  if (!(t <= a))
    throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);
  if (!(n <= i))
    throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);
  t < 0 && (t = a), n < 0 && (n = i);
  let o = G(Qu(0, a, 1, "int32"), [-1, 1]), u = Qu(0, i, 1, "int32"), l = ge(o, u), c = Ds(Yo(l, we(+t, "int32")), Xo(l, we(-n, "int32"))), p = $t([a, i], s.dtype);
  return G(es(Fs(G(s, [-1, a, i])).map((d) => vn(c, d, p))), r);
}
var iO = L({ bandPart_: aO });
function oO(e) {
  let t;
  if (Array.isArray(e)) {
    t = false, O(e != null && e.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    let r = e[0].shape[0];
    for (let a = 1; a < e.length; ++a)
      O(e[a].shape[0] === r, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[a].shape[0]} vs. ${r})`);
  } else
    t = true, e = Bn(e, e.shape[0], 0).map((r) => gr(r, [0]));
  O(e.length <= e[0].shape[0], () => `Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);
  let n = [], s = e;
  for (let r = 0; r < e.length; ++r)
    n.push(M.tidy(() => {
      let a = s[r];
      if (r > 0)
        for (let i = 0; i < r; ++i) {
          let o = V(ve(V(n[i], a)), n[i]);
          a = ge(a, o);
        }
      return xe(a, AI(a, "euclidean"));
    }));
  return t ? es(n, 0) : n;
}
var uO = L({ gramSchmidt_: oO });
function lO(e, t = false) {
  if (O(e.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`), e.rank === 2)
    return bx(e, t);
  {
    let n = e.shape.slice(0, e.shape.length - 2).reduce((u, l) => u * l), s = Fs(G(e, [n, e.shape[e.shape.length - 2], e.shape[e.shape.length - 1]]), 0), r = [], a = [];
    s.forEach((u) => {
      let [l, c] = bx(u, t);
      r.push(l), a.push(c);
    });
    let i = G(es(r, 0), e.shape), o = G(es(a, 0), e.shape);
    return [i, o];
  }
}
function bx(e, t = false) {
  return M.tidy(() => {
    O(e.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);
    let n = e.shape[0], s = e.shape[1], r = lI(n), a = cr(e), i = Yi([[1]], [1, 1]), o = cr(i), u = n >= s ? s : n;
    for (let l = 0; l < u; ++l) {
      let c = a, p = o, d = r;
      [o, a, r] = M.tidy(() => {
        let h = qe(a, [l, l], [n - l, 1]), f = AI(h), m = qe(a, [l, l], [1, 1]), g = vn(Un(m, 0), Yi([[-1]]), Yi([[1]])), b = ge(m, V(g, f)), y = xe(h, b);
        y.shape[0] === 1 ? o = cr(i) : o = Ft([i, qe(y, [1, 0], [y.shape[0] - 1, y.shape[1]])], 0);
        let v = kt(xe(We(g, b), f)), x = qe(a, [l, 0], [n - l, s]), k = V(v, o), S = Ge(o);
        if (l === 0)
          a = ge(x, We(k, We(S, x)));
        else {
          let A = ge(x, We(k, We(S, x)));
          a = Ft([qe(a, [0, 0], [l, s]), A], 0);
        }
        let $ = Ge(k), E = qe(r, [0, l], [n, r.shape[1] - l]);
        if (l === 0)
          r = ge(E, We(We(E, o), $));
        else {
          let A = ge(E, We(We(E, o), $));
          r = Ft([qe(r, [0, 0], [n, l]), A], 1);
        }
        return [o, a, r];
      }), Re([c, p, d]);
    }
    return !t && n > s && (r = qe(r, [0, 0], [n, s]), a = qe(a, [0, 0], [s, s])), [r, a];
  });
}
var cO = L({ qr_: lO });
var dO = ((e) => (e[e.NONE = 0] = "NONE", e[e.MEAN = 1] = "MEAN", e[e.SUM = 2] = "SUM", e[e.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS", e))(dO || {});
function pO(e, t, n = 3) {
  let s = _(e, "losses", "computeWeightedLoss"), r = null;
  t != null && (r = _(t, "weights", "computeWeightedLoss"));
  let a = r == null ? s : V(s, r);
  if (n === 0)
    return a;
  if (n === 2)
    return ve(a);
  if (n === 1) {
    if (r == null)
      return St(a);
    {
      let i = s.size / r.size, o = xe(ve(a), ve(r));
      return i > 1 ? xe(o, we(i)) : o;
    }
  }
  if (n === 3) {
    if (r == null)
      return xe(ve(a), we(s.size));
    {
      let i = V(r, Mn(s.shape)), o = ce(ve(Yu(i, we(0))), "float32");
      return xe(ve(a), o);
    }
  }
  throw Error(`Unknown reduction: ${n}`);
}
var Qs = L({ computeWeightedLoss_: pO });
function hO(e, t, n, s = 3) {
  let r = _(e, "labels", "absoluteDifference"), a = _(t, "predictions", "absoluteDifference"), i = null;
  n != null && (i = _(n, "weights", "absoluteDifference")), pn(r.shape, a.shape, "Error in absoluteDifference: ");
  let o = Mt(ge(r, a));
  return Qs(o, i, s);
}
var fO = L({ absoluteDifference_: hO });
function mO(e, t, n, s, r = 3) {
  let a = _(e, "labels", "cosineDistance"), i = _(t, "predictions", "cosineDistance"), o = null;
  s != null && (o = _(s, "weights", "cosineDistance")), pn(a.shape, i.shape, "Error in cosineDistance: ");
  let u = we(1), l = ge(u, ve(V(a, i), n, true));
  return Qs(l, o, r);
}
var gO = L({ cosineDistance_: mO });
function bO(e, t, n, s = 3) {
  let r = _(e, "labels", "hingeLoss"), a = _(t, "predictions", "hingeLoss"), i = null;
  n != null && (i = _(n, "weights", "hingeLoss")), pn(r.shape, a.shape, "Error in hingeLoss: ");
  let o = we(1);
  r = ge(V(we(2), r), o);
  let u = Ys(ge(o, V(r, a)));
  return Qs(u, i, s);
}
var yO = L({ hingeLoss_: bO });
function vO(e, t, n, s = 1, r = 3) {
  let a = _(e, "labels", "huberLoss"), i = _(t, "predictions", "huberLoss"), o = null;
  n != null && (o = _(n, "weights", "huberLoss")), pn(a.shape, i.shape, "Error in huberLoss: ");
  let u = we(s), l = Mt(ge(i, a)), c = vp(l, u), p = ge(l, c), d = ie(V(we(0.5), ct(c)), V(u, p));
  return Qs(d, o, r);
}
var xO = L({ huberLoss_: vO });
function wO(e, t, n, s = 1e-7, r = 3) {
  let a = _(e, "labels", "logLoss"), i = _(t, "predictions", "logLoss"), o = null;
  n != null && (o = _(n, "weights", "logLoss")), pn(a.shape, i.shape, "Error in logLoss: ");
  let u = we(1), l = we(s), c = kt(V(a, Qn(ie(i, l)))), p = V(ge(u, a), Qn(ie(ge(u, i), l))), d = ge(c, p);
  return Qs(d, o, r);
}
var kO = L({ logLoss_: wO });
function IO(e, t, n, s = 3) {
  let r = _(e, "labels", "meanSquaredError"), a = _(t, "predictions", "meanSquaredError"), i = null;
  n != null && (i = _(n, "weights", "meanSquaredError")), pn(r.shape, a.shape, "Error in meanSquaredError: ");
  let o = NI(r, a);
  return Qs(o, i, s);
}
var SO = L({ meanSquaredError_: IO });
function CO(e, t) {
  let n = _(e, "labels", "sigmoidCrossEntropyWithLogits"), s = _(t, "logits", "sigmoidCrossEntropyWithLogits");
  pn(n.shape, s.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  let r = Ys(s), a = V(s, n), i = Zg(Yn(kt(Mt(s))));
  return ie(ge(r, a), i);
}
function NO(e, t, n, s = 0, r = 3) {
  let a = _(e, "multiClassLabels", "sigmoidCrossEntropy"), i = _(t, "logits", "sigmoidCrossEntropy"), o = null;
  if (n != null && (o = _(n, "weights", "sigmoidCrossEntropy")), pn(a.shape, i.shape, "Error in sigmoidCrossEntropy: "), s > 0) {
    let l = we(s), c = we(1), p = we(0.5);
    a = ie(V(a, ge(c, l)), V(p, l));
  }
  let u = CO(a, i);
  return Qs(u, o, r);
}
var TO = L({ sigmoidCrossEntropy_: NO });
function $O(e, t, n = -1) {
  if (n === -1 && (n = t.rank - 1), n !== t.rank - 1)
    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);
  return js((r, a, i) => {
    let u = cD(a, [n], true), l = ge(ce(a, "float32"), u);
    i([r, l]);
    let c = kt(V(l, r));
    return { value: ve(c, [n]), gradFunc: (h, f) => {
      let [m, g] = f, b = pa(h.shape, [n]);
      return [V(G(h, b), ge(ce(m, "float32"), Yn(g))), V(G(h, b), ge(Yn(g), ce(m, "float32")))];
    } };
  })(e, t);
}
function _O(e, t, n, s = 0, r = 3) {
  let a = _(e, "onehotLabels", "softmaxCrossEntropy"), i = _(t, "logits", "softmaxCrossEntropy"), o = null;
  if (n != null && (o = _(n, "weights", "softmaxCrossEntropy")), pn(a.shape, i.shape, "Error in softmaxCrossEntropy: "), s > 0) {
    let l = we(s), c = we(1), p = we(a.shape[1]);
    a = ie(V(a, ge(c, l)), xe(l, p));
  }
  let u = $O(a, i);
  return Qs(u, o, r);
}
var AO = L({ softmaxCrossEntropy_: _O });
function EO(e, t, n, s) {
  let r = _(e, "indices", "sparseFillEmptyRows", "int32"), a = _(t, "values", "sparseFillEmptyRows"), i = _(n, "denseShape", "sparseFillEmptyRows", "int32"), o = _(s, "defaultValue", "sparseFillEmptyRows", a.dtype);
  if (r.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${r.shape}`);
  if (a.rank !== 1)
    throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);
  if (i.rank !== 1)
    throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);
  if (o.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${o.shape}`);
  let u = { indices: r, values: a, denseShape: i, defaultValue: o }, l = M.runKernel(ap, u);
  return { outputIndices: l[0], outputValues: l[1], emptyRowIndicator: l[2], reverseIndexMap: l[3] };
}
var RO = L({ sparseFillEmptyRows_: EO });
function DO(e, t, n) {
  let s = _(e, "inputIndices", "sparseReshape", "int32"), r = _(t, "inputShape", "sparseReshape", "int32"), a = _(n, "newShape", "sparseReshape", "int32");
  if (s.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);
  if (r.rank !== 1)
    throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);
  if (a.rank !== 1)
    throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);
  let i = { inputIndices: s, inputShape: r, newShape: a }, o = M.runKernel(_l, i);
  return { outputIndices: o[0], outputShape: o[1] };
}
var FO = L({ sparseReshape_: DO });
function OO(e, t, n) {
  let s = _(e, "data", "sparseSegmentMean"), r = _(t, "indices", "sparseSegmentMean", "int32"), a = _(n, "segmentIds", "sparseSegmentMean", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${r.shape}`);
  if (a.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${a.shape}`);
  let i = { data: s, indices: r, segmentIds: a };
  return M.runKernel(ip, i);
}
var PO = L({ sparseSegmentMean_: OO });
function zO(e, t, n) {
  let s = _(e, "data", "sparseSegmentSum"), r = _(t, "indices", "sparseSegmentSum", "int32"), a = _(n, "segmentIds", "sparseSegmentSum", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${r.shape}`);
  if (a.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${a.shape}`);
  let i = { data: s, indices: r, segmentIds: a };
  return M.runKernel(op, i);
}
var MO = L({ sparseSegmentSum_: zO });
function LO(e, t, n, s, r, a, i, o) {
  let u = _(e, "data", "stringNGrams", "string");
  if (u.dtype !== "string")
    throw new Error("Data must be of datatype string");
  if (u.shape.length !== 1)
    throw new Error(`Data must be a vector, saw: ${u.shape}`);
  let l = _(t, "dataSplits", "stringNGrams");
  if (l.dtype !== "int32")
    throw new Error("Data splits must be of datatype int32");
  let c = { separator: n, nGramWidths: s, leftPad: r, rightPad: a, padWidth: i, preserveShortSequences: o }, p = { data: u, dataSplits: l }, d = M.runKernel(lp, p, c);
  return { nGrams: d[0], nGramsSplits: d[1] };
}
var BO = L({ stringNGrams_: LO });
function VO(e, t, n = true) {
  let s = _(e, "input", "stringSplit", "string"), r = _(t, "delimiter", "stringSplit", "string");
  if (s.rank !== 1)
    throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);
  if (r.rank !== 0)
    throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);
  let a = { skipEmpty: n }, i = { input: s, delimiter: r }, o = M.runKernel(Ag, i, a);
  return { indices: o[0], values: o[1], shape: o[2] };
}
var WO = L({ stringSplit_: VO });
function UO(e, t) {
  let n = _(e, "input", "stringToHashBucketFast", "string"), s = { numBuckets: t };
  if (t <= 0)
    throw new Error("Number of buckets must be at least 1");
  let r = { input: n };
  return M.runKernel(Eg, r, s);
}
var GO = L({ stringToHashBucketFast_: UO });
var zpe = { fft: db, ifft: Id, rfft: pb, irfft: CI };
var Mpe = { hammingWindow: vF, hannWindow: OI, frame: PI, stft: IF };
var jn = { flipLeftRight: TF, grayscaleToRGB: _F, resizeNearestNeighbor: JF, resizeBilinear: QF, rotateWithOffset: EF, cropAndResize: CF, nonMaxSuppression: DF, nonMaxSuppressionAsync: VF, nonMaxSuppressionWithScore: UF, nonMaxSuppressionWithScoreAsync: HF, nonMaxSuppressionPadded: jF, nonMaxSuppressionPaddedAsync: XF, threshold: nO, transform: rO };
var HO = { bandPart: iO, gramSchmidt: uO, qr: cO };
var Lpe = { absoluteDifference: fO, computeWeightedLoss: Qs, cosineDistance: gO, hingeLoss: yO, huberLoss: xO, logLoss: kO, meanSquaredError: SO, sigmoidCrossEntropy: TO, softmaxCrossEntropy: AO };
var Wc = { sparseFillEmptyRows: RO, sparseReshape: FO, sparseSegmentMean: PO, sparseSegmentSum: MO };
var Bf = { stringNGrams: BO, stringSplit: WO, stringToHashBucketFast: GO };
var Ar = class extends qk {
  minimize(e, t = false, n) {
    let { value: s, grads: r } = this.computeGradients(e, n);
    if (n != null) {
      let a = n.map((i) => ({ name: i.name, tensor: r[i.name] }));
      this.applyGradients(a);
    } else
      this.applyGradients(r);
    return Re(r), t ? s : (s.dispose(), null);
  }
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  computeGradients(e, t) {
    return JR(e, t);
  }
  dispose() {
    this.iterations_ != null && Re(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), { name: "iter", tensor: we(this.iterations_, "int32") };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(e) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  async extractIterations(e) {
    return this.iterations_ = (await e[0].tensor.data())[0], e.slice(1);
  }
};
Object.defineProperty(Ar, Symbol.hasInstance, { value: (e) => e.minimize != null && e.computeGradients != null && e.applyGradients != null });
var gb = class extends Ar {
  constructor(e, t, n = null) {
    super(), this.learningRate = e, this.rho = t, this.epsilon = n, this.accumulatedGrads = [], this.accumulatedUpdates = [], n == null && (this.epsilon = M.backend.epsilon());
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, s) => {
      let r = M.registeredVariables[n], a = false;
      this.accumulatedGrads[s] == null && (this.accumulatedGrads[s] = { originalName: `${n}/accum_grad`, variable: j(() => je(r).variable(a)) }), this.accumulatedUpdates[s] == null && (this.accumulatedUpdates[s] = { originalName: `${n}/accum_var`, variable: j(() => je(r).variable(a)) });
      let i = Array.isArray(e) ? e[s].tensor : e[n];
      if (i == null)
        return;
      let o = this.accumulatedGrads[s].variable, u = this.accumulatedUpdates[s].variable;
      j(() => {
        let l = ie(V(o, this.rho), V(ct(i), 1 - this.rho)), c = V(xe(cn(ie(u, this.epsilon)), cn(ie(o, this.epsilon))), i), p = ie(V(u, this.rho), V(ct(c), 1 - this.rho));
        o.assign(l), u.assign(p);
        let d = ie(V(c, -this.learningRate), r);
        r.assign(d);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (Re(this.accumulatedGrads.map((e) => e.variable)), Re(this.accumulatedUpdates.map((e) => e.variable)));
  }
  async getWeights() {
    let e = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = e.length / 2, n = false;
    this.accumulatedGrads = e.slice(0, t).map((s) => ({ originalName: s.name, variable: s.tensor.variable(n) })), this.accumulatedUpdates = e.slice(t, t * 2).map((s) => ({ originalName: s.name, variable: s.tensor.variable(n) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.rho, t.epsilon);
  }
};
gb.className = "Adadelta";
$r(gb);
var bb = class extends Ar {
  constructor(e, t = 0.1) {
    super(), this.learningRate = e, this.initialAccumulatorValue = t, this.accumulatedGrads = [];
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, s) => {
      let r = M.registeredVariables[n];
      this.accumulatedGrads[s] == null && (this.accumulatedGrads[s] = { originalName: `${n}/accumulator`, variable: j(() => Pl(r.shape, this.initialAccumulatorValue).variable(false)) });
      let a = Array.isArray(e) ? e[s].tensor : e[n];
      if (a == null)
        return;
      let i = this.accumulatedGrads[s].variable;
      j(() => {
        let o = ie(i, ct(a));
        i.assign(o);
        let u = ie(V(xe(a, cn(ie(o, M.backend.epsilon()))), -this.learningRate), r);
        r.assign(u);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Re(this.accumulatedGrads.map((e) => e.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = false;
    this.accumulatedGrads = e.map((n) => ({ originalName: n.name, variable: n.tensor.variable(t) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.initialAccumulatorValue);
  }
};
bb.className = "Adagrad";
$r(bb);
var yb = class extends Ar {
  constructor(e, t, n, s = null) {
    super(), this.learningRate = e, this.beta1 = t, this.beta2 = n, this.epsilon = s, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], j(() => {
      this.accBeta1 = we(t).variable(), this.accBeta2 = we(n).variable();
    }), s == null && (this.epsilon = M.backend.epsilon());
  }
  applyGradients(e) {
    let t = Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e);
    j(() => {
      let n = ge(1, this.accBeta1), s = ge(1, this.accBeta2);
      t.forEach((r, a) => {
        let i = M.registeredVariables[r], o = false;
        this.accumulatedFirstMoment[a] == null && (this.accumulatedFirstMoment[a] = { originalName: `${r}/m`, variable: j(() => je(i).variable(o)) }), this.accumulatedSecondMoment[a] == null && (this.accumulatedSecondMoment[a] = { originalName: `${r}/v`, variable: j(() => je(i).variable(o)) });
        let u = Array.isArray(e) ? e[a].tensor : e[r];
        if (u == null)
          return;
        let l = this.accumulatedFirstMoment[a].variable, c = this.accumulatedSecondMoment[a].variable, p = ie(V(l, this.beta1), V(u, 1 - this.beta1)), d = ie(V(c, this.beta2), V(ct(u), 1 - this.beta2)), h = xe(p, n), f = xe(d, s);
        l.assign(p), c.assign(d);
        let m = ie(V(xe(h, ie(cn(f), this.epsilon)), -this.learningRate), i);
        i.assign(m);
      }), this.accBeta1.assign(V(this.accBeta1, this.beta1)), this.accBeta2.assign(V(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Re(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedSecondMoment != null && Re(this.accumulatedSecondMoment.map((e) => e.variable));
  }
  async getWeights() {
    let e = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e), j(() => {
      this.accBeta1.assign(ha(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(ha(this.beta2, this.iterations_ + 1));
    });
    let t = e.length / 2, n = false;
    this.accumulatedFirstMoment = e.slice(0, t).map((s) => ({ originalName: s.name, variable: s.tensor.variable(n) })), this.accumulatedSecondMoment = e.slice(t, t * 2).map((s) => ({ originalName: s.name, variable: s.tensor.variable(n) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon);
  }
};
yb.className = "Adam";
$r(yb);
var vb = class extends Ar {
  constructor(e, t, n, s = null, r = 0) {
    super(), this.learningRate = e, this.beta1 = t, this.beta2 = n, this.epsilon = s, this.decay = r, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], j(() => {
      this.iteration = we(0).variable(), this.accBeta1 = we(t).variable();
    }), s == null && (this.epsilon = M.backend.epsilon());
  }
  applyGradients(e) {
    let t = Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e);
    j(() => {
      let n = ge(1, this.accBeta1), s = xe(-this.learningRate, ie(V(this.iteration, this.decay), 1));
      t.forEach((r, a) => {
        let i = M.registeredVariables[r], o = false;
        this.accumulatedFirstMoment[a] == null && (this.accumulatedFirstMoment[a] = { originalName: `${r}/m`, variable: je(i).variable(o) }), this.accumulatedWeightedInfNorm[a] == null && (this.accumulatedWeightedInfNorm[a] = { originalName: `${r}/v`, variable: je(i).variable(o) });
        let u = Array.isArray(e) ? e[a].tensor : e[r];
        if (u == null)
          return;
        let l = this.accumulatedFirstMoment[a].variable, c = this.accumulatedWeightedInfNorm[a].variable, p = ie(V(l, this.beta1), V(u, 1 - this.beta1)), d = V(c, this.beta2), h = Mt(u), f = _r(d, h);
        l.assign(p), c.assign(f);
        let m = ie(V(xe(s, n), xe(p, ie(f, this.epsilon))), i);
        i.assign(m);
      }), this.iteration.assign(ie(this.iteration, 1)), this.accBeta1.assign(V(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Re(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedWeightedInfNorm != null && Re(this.accumulatedWeightedInfNorm.map((e) => e.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(e) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay);
  }
};
vb.className = "Adamax";
$r(vb);
var Cp = class extends Ar {
  constructor(e) {
    super(), this.learningRate = e, this.setLearningRate(e);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, s) => {
      let r = Array.isArray(e) ? e[s].tensor : e[n];
      if (r == null)
        return;
      let a = M.registeredVariables[n];
      j(() => {
        let i = ie(V(this.c, r), a);
        a.assign(i);
      });
    }), this.incrementIterations();
  }
  setLearningRate(e) {
    this.learningRate = e, this.c != null && this.c.dispose(), this.c = Ht(we(-e));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(e) {
    if (e = await this.extractIterations(e), e.length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate);
  }
};
Cp.className = "SGD";
$r(Cp);
var xb = class extends Cp {
  constructor(e, t, n = false) {
    super(e), this.learningRate = e, this.momentum = t, this.useNesterov = n, this.accumulations = [], this.m = we(this.momentum);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, s) => {
      let r = M.registeredVariables[n];
      this.accumulations[s] == null && (this.accumulations[s] = { originalName: `${n}/momentum`, variable: j(() => je(r).variable(false)) });
      let a = this.accumulations[s].variable, i = Array.isArray(e) ? e[s].tensor : e[n];
      i != null && j(() => {
        let o, u = ie(V(this.m, a), i);
        this.useNesterov ? o = ie(V(this.c, ie(i, V(u, this.m))), r) : o = ie(V(this.c, u), r), a.assign(u), r.assign(o);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Re(this.accumulations.map((e) => e.variable));
  }
  setMomentum(e) {
    this.momentum = e;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = false;
    this.accumulations = e.map((n) => ({ originalName: n.name, variable: n.tensor.variable(t) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.momentum, t.useNesterov);
  }
};
xb.className = "Momentum";
$r(xb);
var wb = class extends Ar {
  constructor(e, t = 0.9, n = 0, s = null, r = false) {
    if (super(), this.learningRate = e, this.decay = t, this.momentum = n, this.epsilon = s, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = r, s == null && (this.epsilon = M.backend.epsilon()), e == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, s) => {
      let r = M.registeredVariables[n], a = false;
      this.accumulatedMeanSquares[s] == null && (this.accumulatedMeanSquares[s] = { originalName: `${n}/rms`, variable: j(() => je(r).variable(a)) }), this.accumulatedMoments[s] == null && (this.accumulatedMoments[s] = { originalName: `${n}/momentum`, variable: j(() => je(r).variable(a)) }), this.accumulatedMeanGrads[s] == null && this.centered && (this.accumulatedMeanGrads[s] = { originalName: `${n}/mg`, variable: j(() => je(r).variable(a)) });
      let i = Array.isArray(e) ? e[s].tensor : e[n];
      if (i == null)
        return;
      let o = this.accumulatedMeanSquares[s].variable, u = this.accumulatedMoments[s].variable;
      j(() => {
        let l = ie(V(o, this.decay), V(ct(i), 1 - this.decay));
        if (this.centered) {
          let c = this.accumulatedMeanGrads[s].variable, p = ie(V(c, this.decay), V(i, 1 - this.decay)), d = xe(V(i, this.learningRate), cn(ge(l, ie(ct(p), this.epsilon)))), h = ie(V(u, this.momentum), d);
          o.assign(l), c.assign(p), u.assign(h);
          let f = ge(r, h);
          r.assign(f);
        } else {
          let c = ie(V(o, this.decay), V(ct(i), 1 - this.decay)), p = ie(V(u, this.momentum), xe(V(i, this.learningRate), cn(ie(c, this.epsilon))));
          o.assign(c), u.assign(p);
          let d = ge(r, p);
          r.assign(d);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Re(this.accumulatedMeanSquares.map((e) => e.variable)), this.accumulatedMeanGrads != null && this.centered && Re(this.accumulatedMeanGrads.map((e) => e.variable)), this.accumulatedMoments != null && Re(this.accumulatedMoments.map((e) => e.variable));
  }
  async getWeights() {
    let e = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && e.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = this.centered ? e.length / 3 : e.length / 2, n = false;
    this.accumulatedMeanSquares = e.slice(0, t).map((s) => ({ originalName: s.name, variable: s.tensor.variable(n) })), this.accumulatedMoments = e.slice(t, t * 2).map((s) => ({ originalName: s.name, variable: s.tensor.variable(n) })), this.centered && (this.accumulatedMeanGrads = e.slice(t * 2, t * 3).map((s) => ({ originalName: s.name, variable: s.tensor.variable(n) })));
  }
  getConfig() {
    return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered);
  }
};
wb.className = "RMSProp";
$r(wb);
var Ur = class {
  static sgd(e) {
    return new Cp(e);
  }
  static momentum(e, t, n = false) {
    return new xb(e, t, n);
  }
  static rmsprop(e, t = 0.9, n = 0, s = null, r = false) {
    return new wb(e, t, n, s, r);
  }
  static adam(e = 1e-3, t = 0.9, n = 0.999, s = null) {
    return new yb(e, t, n, s);
  }
  static adadelta(e = 1e-3, t = 0.95, n = null) {
    return new gb(e, t, n);
  }
  static adamax(e = 2e-3, t = 0.9, n = 0.999, s = null, r = 0) {
    return new vb(e, t, n, s, r);
  }
  static adagrad(e, t = 0.1) {
    return new bb(e, t);
  }
};
var Mi = { sgd: Ur.sgd, momentum: Ur.momentum, adadelta: Ur.adadelta, adagrad: Ur.adagrad, rmsprop: Ur.rmsprop, adamax: Ur.adamax, adam: Ur.adam };
var qO = (() => typeof requestAnimationFrame != "undefined" ? requestAnimationFrame : typeof setImmediate != "undefined" ? setImmediate : (e) => e())();
function BI() {
  return new Promise((e) => qO(() => e()));
}
var C = {};
Ae(C, { ERF_A1: () => sP, ERF_A2: () => rP, ERF_A3: () => aP, ERF_A4: () => iP, ERF_A5: () => oP, ERF_P: () => nP, PARALLELIZE_THRESHOLD: () => kb, SELU_SCALE: () => WI, SELU_SCALEALPHA: () => VI, applyActivation: () => Ip, assertAndGetBroadcastShape: () => it, assertAxesAreInnerMostDims: () => oD, assertParamsConsistent: () => jO, assignToTypedArray: () => hP, axesAreInnerMostDims: () => Jg, calculateShapes: () => Pk, checkEinsumDimSizes: () => vP, checkPadOnDimRoundingMode: () => hn, combineLocations: () => pI, complexWithEvenIndex: () => cP, complexWithOddIndex: () => dP, computeConv2DInfo: () => Ol, computeConv3DInfo: () => Jk, computeDefaultPad: () => Hg, computeDilation2DInfo: () => mE, computeOptimalWindowSize: () => XO, computeOutAndReduceShapes: () => hI, computeOutShape: () => KO, computePool2DInfo: () => Zk, computePool3DInfo: () => gE, convertConv2DDataFormat: () => eI, decodeEinsumEquation: () => bP, eitherStridesOrDilationsAreOne: () => Ps, expandShapeToKeepDim: () => pa, exponent: () => mP, exponents: () => fP, fromStringArrayToUint8: () => BP, fromUint8ToStringArray: () => LP, getAxesPermutation: () => fI, getBroadcastDims: () => Ak, getComplexWithIndex: () => pP, getEinsumComputePath: () => xP, getEinsumPermutation: () => yP, getFusedBiasGradient: () => kp, getFusedDyActivation: () => wp, getImageCenter: () => YO, getInnerMostAxes: () => uD, getPermuted: () => ZO, getReductionAxes: () => _t, getReshaped: () => QO, getReshapedPermuted: () => JO, getSliceBeginCoords: () => eP, getSliceSize: () => tP, getSparseFillEmptyRowsIndicesDenseShapeMismatch: () => SP, getSparseFillEmptyRowsNegativeIndexErrorMessage: () => CP, getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: () => NP, getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: () => _P, getSparseReshapeInputOutputMismatchErrorMessage: () => EP, getSparseReshapeInputOutputMultipleErrorMessage: () => AP, getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: () => TP, getSparseReshapeNegativeOutputDimErrorMessage: () => $P, getSparseSegmentReductionIndicesOutOfRangeErrorMessage: () => OP, getSparseSegmentReductionNegativeSegmentIdsErrorMessage: () => RP, getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: () => DP, getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: () => FP, getUndoAxesPermutation: () => eb, isIdentityPermutation: () => wP, log: () => z$, mergeRealAndImagArrays: () => uP, prepareAndValidate: () => Fk, prepareSplitSize: () => IP, segment_util: () => UI, shouldFuse: () => Sp, slice_util: () => wt, splitRealAndImagArrays: () => lP, tupleValuesAreOne: () => mr, upcastType: () => ln, validateInput: () => Wg, validateUpdateShape: () => Vg, warn: () => ir });
function jO(e, t) {
  let n = e[0].length;
  e.forEach((r, a) => {
    O(r.length === n, () => `Error in concat${n}D: rank of tensors[${a}] must be the same as the rank of the rest (${n})`);
  }), O(t >= 0 && t < n, () => `Error in concat${n}D: axis must be between 0 and ${n - 1}.`);
  let s = e[0];
  e.forEach((r, a) => {
    for (let i = 0; i < n; i++)
      O(i === t || r[i] === s[i], () => `Error in concat${n}D: Shape of tensors[${a}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`);
  });
}
function KO(e, t) {
  let n = e[0].slice();
  for (let s = 1; s < e.length; s++)
    n[t] += e[s][t];
  return n;
}
var kb = 30;
function XO(e) {
  return e <= kb ? e : hd(e, Math.floor(Math.sqrt(e)));
}
function YO(e, t, n) {
  let s = n * (typeof e == "number" ? e : e[0]), r = t * (typeof e == "number" ? e : e[1]);
  return [s, r];
}
function QO(e, t, n, s = true) {
  let r = [];
  if (s)
    r = r.concat(t.slice(0)), r.push(e[0] / n), r = r.concat(e.slice(1));
  else {
    r = r.concat(e[0]);
    let a = t.length;
    for (let i = 0; i < a; ++i)
      r = r.concat([e[i + 1] / t[i], t[i]]);
    r = r.concat(e.slice(a + 1));
  }
  return r;
}
function ZO(e, t, n = true) {
  let s = [];
  if (n) {
    s.push(t);
    for (let r = t + 1; r < e; ++r)
      r <= 2 * t ? (s.push(r), s.push(r - (t + 1))) : s.push(r);
  } else {
    let r = [], a = [];
    for (let i = 1; i < e; ++i)
      i >= t * 2 + 1 || i % 2 === 1 ? a.push(i) : r.push(i);
    s.push(...r), s.push(0), s.push(...a);
  }
  return s;
}
function JO(e, t, n, s = true) {
  let r = [];
  s ? r.push(e[0] / n) : r.push(e[0] * n);
  for (let a = 1; a < e.length; ++a)
    a <= t.length ? s ? r.push(t[a - 1] * e[a]) : r.push(e[a] / t[a - 1]) : r.push(e[a]);
  return r;
}
function eP(e, t) {
  let n = [0];
  for (let s = 0; s < t; ++s)
    n.push(e[s][0]);
  return n;
}
function tP(e, t, n) {
  let s = e.slice(0, 1);
  for (let r = 0; r < n; ++r)
    s.push(e[r + 1] - t[r][0] - t[r][1]);
  return s;
}
var VI = 1.7580993408473768;
var WI = 1.0507009873554805;
var nP = 0.3275911;
var sP = 0.254829592;
var rP = -0.284496736;
var aP = 1.421413741;
var iP = -1.453152027;
var oP = 1.061405429;
function uP(e, t) {
  if (e.length !== t.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);
  let n = new Float32Array(e.length * 2);
  for (let s = 0; s < n.length; s += 2)
    n[s] = e[s / 2], n[s + 1] = t[s / 2];
  return n;
}
function lP(e) {
  let t = new Float32Array(e.length / 2), n = new Float32Array(e.length / 2);
  for (let s = 0; s < e.length; s += 2)
    t[s / 2] = e[s], n[s / 2] = e[s + 1];
  return { real: t, imag: n };
}
function cP(e) {
  let t = Math.ceil(e.length / 4), n = new Float32Array(t), s = new Float32Array(t);
  for (let r = 0; r < e.length; r += 4)
    n[Math.floor(r / 4)] = e[r], s[Math.floor(r / 4)] = e[r + 1];
  return { real: n, imag: s };
}
function dP(e) {
  let t = Math.floor(e.length / 4), n = new Float32Array(t), s = new Float32Array(t);
  for (let r = 2; r < e.length; r += 4)
    n[Math.floor(r / 4)] = e[r], s[Math.floor(r / 4)] = e[r + 1];
  return { real: n, imag: s };
}
function pP(e, t) {
  let n = e[t * 2], s = e[t * 2 + 1];
  return { real: n, imag: s };
}
function hP(e, t, n, s) {
  e[s * 2] = t, e[s * 2 + 1] = n;
}
function fP(e, t) {
  let n = new Float32Array(e / 2), s = new Float32Array(e / 2);
  for (let r = 0; r < Math.ceil(e / 2); r++) {
    let a = (t ? 2 : -2) * Math.PI * (r / e);
    n[r] = Math.cos(a), s[r] = Math.sin(a);
  }
  return { real: n, imag: s };
}
function mP(e, t, n) {
  let s = (n ? 2 : -2) * Math.PI * (e / t), r = Math.cos(s), a = Math.sin(s);
  return { real: r, imag: a };
}
var Vf = "->";
var gP = /->/g;
var yx = ",";
var vx = "...";
function bP(e, t) {
  e = e.replace(/\s/g, "");
  let n = (e.length - e.replace(gP, "").length) / Vf.length;
  if (n < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (n > 1)
    throw new Error(`Equation must contain exactly one arrow ("${Vf}").`);
  let [s, r] = e.split(Vf);
  O(s.indexOf(vx) === -1, () => `The ellipsis notation ("${vx}") is not supported yet.`);
  let a = s.split(yx), i = a.length;
  if (t !== i)
    throw new Error(`Expected ${i} input tensors, received ${t}`);
  if (i > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  let o = [];
  for (let d = 0; d < r.length; ++d) {
    let h = r[d];
    if (!a.some((f) => f.indexOf(h) !== -1))
      throw new Error(`Output subscripts contain the label ${h} not present in the input subscripts.`);
    o.indexOf(h) === -1 && o.push(h);
  }
  for (let d = 0; d < s.length; ++d) {
    let h = s[d];
    o.indexOf(h) === -1 && h !== yx && o.push(h);
  }
  let u = new Array(a.length);
  for (let d = 0; d < i; ++d) {
    if (new Set(a[d].split("")).size !== a[d].length)
      throw new Error(`Found duplicate axes in input component ${a[d]}. Support for duplicate axes in input is not implemented yet.`);
    u[d] = [];
    for (let h = 0; h < a[d].length; ++h)
      u[d].push(o.indexOf(a[d][h]));
  }
  let l = o.length, c = r.length, p = [];
  for (let d = c; d < l; ++d)
    p.push(d);
  return { allDims: o, summedDims: p, idDims: u };
}
function yP(e, t) {
  let n = new Array(e);
  n.fill(-1);
  for (let r = 0; r < t.length; ++r)
    n[t[r]] = r;
  let s = [];
  for (let r = 0; r < e; ++r)
    n[r] === -1 && s.push(r);
  return n = n.filter((r) => r !== -1), { permutationIndices: n, expandDims: s };
}
function vP(e, t, n) {
  let s = new Array(e);
  for (let r = 0; r < n.length; ++r) {
    let a = n[r].shape;
    for (let i = 0; i < t[r].length; ++i)
      s[t[r][i]] === void 0 ? s[t[r][i]] = a[i] : O(s[t[r][i]] === a[i], () => `Expected dimension ${s[t[r][i]]} at axis ${i} of input shaped ${JSON.stringify(a)}, but got dimension ${a[i]}`);
  }
}
function xP(e, t) {
  let n = e, s = [], r = 0;
  e.length === 0 && n.push(-1), r = e.length + 1;
  for (let i = 0; i < r; ++i)
    s.push([]);
  let a = [];
  for (let i = 0; i < n.length; ++i) {
    let o = n[i], u = kP(t, o);
    for (let l of u)
      a.indexOf(l) === -1 && (s[i].push(l), a.push(l));
  }
  return { path: n, steps: s };
}
function wP(e) {
  return e.every((t, n) => t === n);
}
function kP(e, t) {
  let n = [];
  for (let s = 0; s < e.length; ++s)
    (e[s].length === 0 || e[s].indexOf(t) !== -1 || t === -1) && n.push(s);
  return n;
}
function IP(e, t, n = 0) {
  let s = [];
  if (typeof t == "number")
    O(e.shape[n] % t === 0, () => "Number of splits must evenly divide the axis."), s = new Array(t).fill(e.shape[n] / t);
  else {
    let r = t.reduce((i, o) => (o === -1 && (i += 1), i), 0);
    O(r <= 1, () => "There should be only one negative value in split array.");
    let a = t.indexOf(-1);
    if (a !== -1) {
      let i = t.reduce((o, u) => u > 0 ? o + u : o);
      t[a] = e.shape[n] - i;
    }
    O(e.shape[n] === t.reduce((i, o) => i + o), () => "The sum of sizes must match the size of the axis dimension."), s = t;
  }
  return s;
}
function SP(e) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${e}`;
}
function CP(e, t) {
  return `indices(${e}, 0) is invalid: ${t} < 0`;
}
function NP(e, t, n) {
  return `indices(${e}, 0) is invalid: ${t} >= ${n}`;
}
function TP(e, t) {
  return `only one output dimension may be -1, not both ${e} and ${t}`;
}
function $P(e, t) {
  return `size ${e} must be non-negative, not ${t}`;
}
function _P() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function AP(e, t) {
  let n = pt(e), s = pt(t);
  return `Input to reshape is a SparseTensor with ${n}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${e} outputShape= ${t}`;
}
function EP(e, t) {
  let n = pt(e), s = pt(t);
  return `Input to reshape is a tensor with ${n} dense values, but the requested shape has ${s}. inputShape=${e} outputShape=${t}`;
}
function RP() {
  return "segment ids must be >= 0";
}
function DP() {
  return "segment ids are not increasing";
}
function FP(e, t) {
  return `Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`;
}
function OP(e, t, n) {
  return `Bad: indices[${e}] == ${t} out of range [0, ${n})`;
}
var UI = {};
Ae(UI, { collectGatherOpShapeInfo: () => MP, computeOutShape: () => zP, segOpComputeOptimalWindowSize: () => PP });
function PP(e, t) {
  let n = false, s;
  for (e <= kb ? (s = e, n = true) : s = hd(e, Math.floor(Math.sqrt(e))); !n; )
    s > t || s === e ? n = true : s = hd(e, s + 1);
  return s;
}
function zP(e, t, n) {
  let s = [], r = e.length;
  for (let a = 0; a < r; a++)
    a !== t ? s.push(e[a]) : s.push(n);
  return s;
}
function MP(e, t, n, s) {
  let r = t.shape.length, a = e.shape.length;
  if (s !== 0 && (s < -r || s > r))
    throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);
  if (s < 0 && (s += r), s > a)
    throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${a}).`);
  if (n < s)
    throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);
  for (let p = 0; p < s; ++p)
    if (e.shape[p] !== t.shape[p])
      throw new Error(`x.shape[${p}]: ${e.shape[p]} should be equal to indices.shape[${p}]: ${t.shape[p]}.`);
  let i = e.shape[n], o = [], u = 1, l = 1, c = 1;
  for (let p = 0; p < s; ++p)
    o.push(e.shape[p]), u *= e.shape[p];
  for (let p = s; p < n; p++)
    o.push(e.shape[p]), l *= e.shape[p];
  for (let p = s; p < r; p++)
    o.push(t.shape[p]);
  for (let p = n + 1; p < a; p++)
    o.push(e.shape[p]), c *= e.shape[p];
  return { batchSize: u, sliceSize: c, outerSize: l, dimSize: i, outputShape: o };
}
function LP(e) {
  try {
    return e.map((t) => md(t));
  } catch (t) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`);
  }
}
function BP(e) {
  return e.map((t) => Dl(t));
}
var xs = {};
Ae(xs, { nonMaxSuppressionV3Impl: () => zI, nonMaxSuppressionV4Impl: () => MI, nonMaxSuppressionV5Impl: () => LI, whereImpl: () => TI });
var Vs = class extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, Vs.prototype);
  }
};
var hs = class extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, hs.prototype);
  }
};
var U = class extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, U.prototype);
  }
};
var Fe = class extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, Fe.prototype);
  }
};
var GI = class extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, GI.prototype);
  }
};
var HI = class {
  constructor(e) {
    this.maxEntries = e || 100, this.cache = /* @__PURE__ */ new Map();
  }
  get(e) {
    let t;
    return this.cache.has(e) && (t = this.cache.get(e), this.cache.delete(e), this.cache.set(e, t)), t;
  }
  put(e, t) {
    if (this.cache.has(e))
      this.cache.delete(e);
    else if (this.cache.size >= this.maxEntries) {
      let n = this.cache.keys().next().value;
      this.cache.delete(n);
    }
    this.cache.set(e, t);
  }
  getMaxEntries() {
    return this.maxEntries;
  }
  setMaxEntries(e) {
    if (e < 0)
      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);
    if (this.maxEntries > e)
      for (let t = 0; t < this.maxEntries - e; t++) {
        let n = this.cache.keys().next().value;
        this.cache.delete(n);
      }
    this.maxEntries = e;
  }
};
function ma(e, t) {
  if (Array.isArray(e)) {
    let n = [];
    for (let s = 0; s < t; s++)
      n = n.concat(e);
    return n;
  } else {
    let n = new Array(t);
    return n.fill(e), n;
  }
}
function Cs(e, t) {
  if (!e)
    throw new GI(t);
}
function xx(e, t) {
  let n = 0;
  for (let s of e)
    s === t && n++;
  return n;
}
function bn(e) {
  return e.length === 1 ? e[0] : e;
}
function dt(e) {
  return Array.isArray(e) ? e : [e];
}
function Ws(e) {
  let n = e.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return n[0] !== "_" ? n : "private" + n;
}
function Xr(e) {
  return e.length <= 1 || e.indexOf("_") === -1 ? e : e.replace(/[_]+(\w|$)/g, (t, n) => n.toUpperCase());
}
var Hn = {};
function Ib(e) {
  if (e == null)
    return null;
  let t = {};
  return t.className = e.getClassName(), t.config = e.getConfig(), t;
}
function bm(e) {
  if (!(e == null || typeof e != "object"))
    if (Array.isArray(e))
      e.forEach((t) => bm(t));
    else {
      let t = Object.keys(e);
      for (let n of t) {
        let s = e[n];
        s != null && typeof s == "object" && (!Array.isArray(s) && s.type === "ndarray" && typeof s.value == "number" ? e[n] = s.value : bm(s));
      }
    }
}
function Ll(e, t = {}, n = {}, s = "object", r = false) {
  if (typeof e == "string") {
    let a = e, i;
    if (a in n)
      i = n[a];
    else if (a in Hn)
      i = Hn[a];
    else if (i = t[a], i == null)
      throw new U(`Unknown ${s}: ${e}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return i;
  } else {
    let a = e;
    if (a.className == null || a.config == null)
      throw new U(`${s}: Improper config format: ${JSON.stringify(a)}.
'className' and 'config' must set.`);
    let i = a.className, o, u;
    if (i in n ? [o, u] = n[i] : i in Hn ? [o, u] = Hn.className : i in t && ([o, u] = t[i]), o == null)
      throw new U(`Unknown ${s}: ${i}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (u != null) {
      let l = {};
      for (let h of Object.keys(Hn))
        l[h] = Hn[h];
      for (let h of Object.keys(n))
        l[h] = n[h];
      let c = a.config;
      c.customObjects = l;
      let p = { ...Hn };
      for (let h of Object.keys(n))
        Hn[h] = n[h];
      bm(a.config);
      let d = u(o, a.config, n, r);
      return Hn = { ...p }, d;
    } else {
      let l = { ...Hn };
      for (let p of Object.keys(n))
        Hn[p] = n[p];
      let c = new o(a.config);
      return Hn = { ...l }, c;
    }
  }
}
function VP(e, t) {
  return e < t ? -1 : e > t ? 1 : 0;
}
function Uc(e, t) {
  return -1 * VP(e, t);
}
function dr(e) {
  if (e == null)
    return e;
  let t = [];
  for (let n of e)
    t.indexOf(n) === -1 && t.push(n);
  return t;
}
function WP(e) {
  if (e == null)
    throw new U(`Invalid value in obj: ${JSON.stringify(e)}`);
  for (let t in e)
    if (e.hasOwnProperty(t))
      return false;
  return true;
}
function yi(e, t, n) {
  if (n != null && e.indexOf(n) < 0)
    throw new U(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`);
}
function Sb(e, t, n = 0, s = 1 / 0) {
  return Cs(n >= 0), Cs(s >= n), Array.isArray(e) && e.length >= n && e.length <= s && e.every((r) => typeof r === t);
}
function Bt(e, t) {
  Array.isArray(e) ? (w.assert(e.length > 0, () => `${t} is unexpectedly an empty array.`), e.forEach((n, s) => Bt(n, `element ${s + 1} of ${t}`))) : w.assert(Number.isInteger(e) && e > 0, () => `Expected ${t} to be a positive integer, but got ${qI(e)}.`);
}
function qI(e) {
  return e === null ? "null" : Array.isArray(e) ? "[" + e.map((t) => qI(t)).join(",") + "]" : typeof e == "string" ? `"${e}"` : `${e}`;
}
function UP(e, t, n) {
  let s = n != null ? n() : w.now(), r;
  return (...i) => {
    let o = n != null ? n() : w.now();
    return o - s < t || (s = o, r = e(...i)), r;
  };
}
function jI(e) {
  return e === "relu" ? "relu" : e === "linear" ? "linear" : e === "elu" ? "elu" : null;
}
var GP = 0;
function KI() {
  return GP++;
}
var Gc = {};
function Np(e = "") {
  return e in Gc || (Gc[e] = 0), Gc[e] += 1, e + Gc[e].toString();
}
var HP = ["channelsFirst", "channelsLast"];
var qP = ["nearest", "bilinear"];
var jP = ["valid", "same", "causal"];
var KP = ["max", "avg"];
var XP = ["sum", "mul", "concat", "ave"];
var Li = /* @__PURE__ */ new Map();
function Ct(e) {
  yi(HP, "DataFormat", e);
}
function YP(e) {
  yi(qP, "InterpolationFormat", e);
}
function Gn(e) {
  yi(jP, "PaddingMode", e);
}
function XI(e) {
  yi(KP, "PoolMode", e);
}
var Lu = [];
var wx = "/";
function ta(e, t) {
  Lu.push(e);
  try {
    let n = t();
    return Lu.pop(), n;
  } catch (n) {
    throw Lu.pop(), n;
  }
}
function QP() {
  return Lu.length === 0 ? "" : Lu.join(wx) + wx;
}
function YI(e) {
  if (!ZI(e))
    throw new Error("Not a valid tensor name: '" + e + "'");
  return QP() + e;
}
function QI(e) {
  if (!ZI(e))
    throw new Error("Not a valid tensor name: '" + e + "'");
  Li.has(e) || Li.set(e, 0);
  let t = Li.get(e);
  if (Li.set(e, Li.get(e) + 1), t > 0) {
    let n = `${e}_${t}`;
    return Li.set(n, 1), n;
  } else
    return e;
}
var ZP = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function ZI(e) {
  return !!e.match(ZP);
}
function JP(e) {
  return e === parseInt(e.toString(), 10);
}
function pr(e, t, n) {
  t == null && (t = 0), n == null && (n = e.length);
  let s = 1;
  for (let r = t; r < n; ++r)
    s *= e[r];
  return s;
}
function eo(e) {
  if (e.length === 0)
    return Number.NaN;
  let t = Number.POSITIVE_INFINITY;
  for (let n = 0; n < e.length; n++) {
    let s = e[n];
    s < t && (t = s);
  }
  return t;
}
function br(e) {
  if (e.length === 0)
    return Number.NaN;
  let t = Number.NEGATIVE_INFINITY;
  for (let n = 0; n < e.length; n++) {
    let s = e[n];
    s > t && (t = s);
  }
  return t;
}
function bs(e, t) {
  if (t < e)
    throw new U(`end (${t}) < begin (${e}) is forbidden.`);
  let n = [];
  for (let s = e; s < t; ++s)
    n.push(s);
  return n;
}
var Wf;
function Rt() {
  return Wf == null && (Wf = WA().epsilon()), Wf;
}
function ys() {
  return "channelsLast";
}
function Tp(e, t) {
  return ce(e, t);
}
function Bl(e, t = -1) {
  let n = e.shape.slice();
  return t < 0 && (t = n.length + t + 1), n.splice(t, 0, 1), G(e, n);
}
function ez(e, t) {
  return j(() => {
    if (e.shape.length !== 2)
      throw new U(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);
    let n = Bl(e, 1);
    return ym(n, [1, t, 1]);
  });
}
function tz(e) {
  let t = [pr(e.shape)];
  return G(e, t);
}
function nz(e) {
  if (e.rank <= 1)
    throw new U(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);
  let t = [e.shape[0], pr(e.shape, 1)];
  return G(e, t);
}
function na(e, t, n) {
  return j(() => {
    switch (e.rank) {
      case 1:
        return ub(e, t, n);
      case 2:
        return SI(e, [t, 0], [n, e.shape[1]]);
      case 3:
        return lb(e, [t, 0, 0], [n, e.shape[1], e.shape[2]]);
      case 4:
        return kd(e, [t, 0, 0, 0], [n, e.shape[1], e.shape[2], e.shape[3]]);
      case 5:
        return qe(e, [t, 0, 0, 0, 0], [n, e.shape[1], e.shape[2], e.shape[3], e.shape[4]]);
      case 6:
        return qe(e, [t, 0, 0, 0, 0, 0], [n, e.shape[1], e.shape[2], e.shape[3], e.shape[4], e.shape[5]]);
      default:
        throw new U(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`);
    }
  });
}
function Uf(e, t, n) {
  return j(() => {
    switch (e.rank) {
      case 1:
        return ub(e, t, n);
      case 2:
        return SI(e, [0, t], [e.shape[0], n]);
      case 3:
        return lb(e, [0, 0, t], [e.shape[0], e.shape[1], n]);
      case 4:
        return kd(e, [0, 0, 0, t], [e.shape[0], e.shape[1], e.shape[2], n]);
      default:
        throw new U(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`);
    }
  });
}
function Hc(e, t, n, s) {
  return j(() => {
    switch (e.rank) {
      case 1:
        return ub(e, t, n);
      case 2:
        switch (s) {
          case 1:
            return na(e, t, n);
          case 2:
            return Uf(e, t, n);
          default:
            throw new U(`The axis is not within the rank of the tensor ${s}`);
        }
      case 3:
        switch (s) {
          case 1:
            return na(e, t, n);
          case 2:
            return lb(e, [0, t, 0], [e.shape[0], n, e.shape[2]]);
          case 3:
            return Uf(e, t, n);
          default:
            throw new U(`The axis is not within the rank of the tensor ${s}`);
        }
      case 4:
        switch (s) {
          case 1:
            return na(e, t, n);
          case 2:
            return kd(e, [0, t, 0, 0], [e.shape[0], n, e.shape[2], e.shape[3]]);
          case 3:
            return kd(e, [0, 0, t, 0], [e.shape[0], e.shape[1], n, e.shape[3]]);
          case 4:
            return Uf(e, t, n);
          default:
            throw new U(`The axis is not within the rank of the tensor ${s}`);
        }
      default:
        throw new U(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`);
    }
  });
}
function Cb(e, t = -1) {
  let n;
  return t < 0 && (n = e[0].rank, n !== 0 ? t = n : t = 0), t === e[0].rank && (t = -1), Ft(e, t);
}
function kx(e, t) {
  switch (e.rank) {
    case 1:
      return qE([e, t]);
    case 2:
      return KE([e, t], 0);
    case 3:
      return YE([e, t], 0);
    case 4:
      return ZE([e, t], 0);
    default:
      throw new U(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`);
  }
}
function ym(e, t) {
  if (Array.isArray(t) || (t = [t]), e.rank !== t.length)
    throw new U(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);
  return ps(e, t);
}
function $p(e, t = 0, n = 1, s, r) {
  return ZD(e, t, n, s, r);
}
function Es(e, t, n, s) {
  if (e.rank < 2 || t.rank < 2)
    throw new Fe(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);
  if (t.rank >= 3) {
    let r = e.shape.slice(-1)[0], a = t.shape.slice(-2)[0];
    if (r !== a)
      throw new Fe(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);
  }
  if (e.rank === 2 && t.rank === 2)
    return fa.matMul({ a: e, b: t, transposeA: false, transposeB: false, bias: s ? vm(e.rank, s, ys()) : null, activation: n });
  {
    let r = e.shape.slice(), a = r.pop();
    e = G(e, [-1, a]);
    let i = t.shape.slice(), o = i.pop(), u = i.pop(), l = [...i, o], c = Array.from({ length: t.rank }, (f, m) => m === 0 ? t.rank - 2 : m <= t.rank - 2 ? m - 1 : m);
    t = G(Ge(t, c), [u, -1]);
    let p = [...r, ...l], d = false, h = false;
    return G(fa.matMul({ a: e, b: t, transposeA: d, transposeB: h, bias: s ? vm(e.rank, s, ys()) : null, activation: n }), p);
  }
}
function JI(e, t, n) {
  return j(() => (Array.isArray(t) ? t = Qt(t, "int32") : t = ce(t, "int32"), Xu(e, t, n)));
}
function Vl(e) {
  return V(e, e);
}
function vm(e, t, n) {
  let s = t.shape;
  if (t.rank !== 1 && t.rank !== e)
    throw new U(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);
  if (e === 5) {
    if (n === "channelsFirst")
      return s.length === 1 ? G(t, [1, s[0], 1, 1, 1]) : G(t, [1, s[3], s[0], s[1], s[2]]);
    if (n === "channelsLast")
      return s.length === 1 ? G(t, [1, 1, 1, 1, s[0]]) : G(t, [1].concat(s));
  } else if (e === 4) {
    if (n === "channelsFirst")
      return s.length === 1 ? G(t, [1, s[0], 1, 1]) : G(t, [1, s[2], s[0], s[1]]);
    if (n === "channelsLast")
      return s.length === 1 ? G(t, [1, 1, 1, s[0]]) : G(t, [1].concat(s));
  } else if (e === 3) {
    if (n === "channelsFirst")
      return s.length === 1 ? G(t, [1, s[0], 1]) : G(t, [1, s[1], s[0]]);
    if (n === "channelsLast")
      return s.length === 1 ? G(t, [1, 1, s[0]]) : G(t, [1].concat(s));
  } else if (e < 3)
    return t;
  throw new U(`Unsupported input rank by biasAdd: ${t.rank}`);
}
function ws(e, t, n) {
  return j(() => (n == null && (n = ys()), Ct(n), ie(e, vm(e.rank, t, n))));
}
function sz(e, t = 1) {
  if (t !== 1)
    throw new Fe(`Support for alpha values other than 1 (${t}) is not implemented yet.`);
  return gp(e);
}
function rz(e) {
  return j(() => xe(e, ie(Mt(e), 1)));
}
function e0(e, t, n, s) {
  return j(() => iF(e, t, n, s));
}
function az(e) {
  return j(() => {
    let t = ie(0.5, V(0.2, e));
    return Vn(t, 0, 1);
  });
}
function Wl(e, t, n = false) {
  return n ? e() : t();
}
var iz = ["fanIn", "fanOut", "fanAvg"];
var oz = ["normal", "uniform", "truncatedNormal"];
function uz(e) {
  yi(iz, "FanMode", e);
}
function lz(e) {
  yi(oz, "Distribution", e);
}
var ns = class extends ae.Serializable {
  fromConfigUsesCustomObjects() {
    return false;
  }
  getConfig() {
    return {};
  }
};
var Nb = class extends ns {
  apply(e, t) {
    return $t(e, t);
  }
};
Nb.className = "Zeros";
ae.registerClass(Nb);
var _p = class extends ns {
  apply(e, t) {
    return Mn(e, t);
  }
};
_p.className = "Ones";
ae.registerClass(_p);
var Tb = class extends ns {
  constructor(e) {
    if (super(), typeof e != "object")
      throw new U(`Expected argument of type ConstantConfig but got ${e}`);
    if (e.value === void 0)
      throw new U(`config must have value set but got ${e}`);
    this.value = e.value;
  }
  apply(e, t) {
    return j(() => V(we(this.value), Mn(e, t)));
  }
  getConfig() {
    return { value: this.value };
  }
};
Tb.className = "Constant";
ae.registerClass(Tb);
var $b = class extends ns {
  constructor(e) {
    super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = e.minval || this.DEFAULT_MINVAL, this.maxval = e.maxval || this.DEFAULT_MAXVAL, this.seed = e.seed;
  }
  apply(e, t) {
    return Ml(e, this.minval, this.maxval, t);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
};
$b.className = "RandomUniform";
ae.registerClass($b);
var _b = class extends ns {
  constructor(e) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
  }
  apply(e, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32")
      throw new Fe(`randomNormal does not support dType ${t}.`);
    return $p(e, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
};
_b.className = "RandomNormal";
ae.registerClass(_b);
var Ab = class extends ns {
  constructor(e) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
  }
  apply(e, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32")
      throw new Fe(`truncatedNormal does not support dType ${t}.`);
    return hb(e, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
};
Ab.className = "TruncatedNormal";
ae.registerClass(Ab);
var Eb = class extends ns {
  constructor(e) {
    super(), this.gain = e.gain != null ? e.gain : 1;
  }
  apply(e, t) {
    return j(() => {
      if (e.length !== 2 || e[0] !== e[1])
        throw new U("Identity matrix initializer can only be used for 2D square matrices.");
      return V(this.gain, lI(e[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
};
Eb.className = "Identity";
ae.registerClass(Eb);
function cz(e, t = "channelsLast") {
  let n, s;
  if (Ct(t), e.length === 2)
    n = e[0], s = e[1];
  else if ([3, 4, 5].indexOf(e.length) !== -1) {
    if (t === "channelsFirst") {
      let r = pr(e, 2);
      n = e[1] * r, s = e[0] * r;
    } else if (t === "channelsLast") {
      let r = pr(e, 0, e.length - 2);
      n = e[e.length - 2] * r, s = e[e.length - 1] * r;
    }
  } else {
    let r = pr(e);
    n = Math.sqrt(r), s = Math.sqrt(r);
  }
  return [n, s];
}
var xn = class extends ns {
  constructor(e) {
    if (super(), e.scale < 0)
      throw new U(`scale must be a positive float. Got: ${e.scale}`);
    this.scale = e.scale == null ? 1 : e.scale, this.mode = e.mode == null ? "fanIn" : e.mode, uz(this.mode), this.distribution = e.distribution == null ? "normal" : e.distribution, lz(this.distribution), this.seed = e.seed;
  }
  apply(e, t) {
    let n = cz(e), s = n[0], r = n[1], a = this.scale;
    if (this.mode === "fanIn" ? a /= Math.max(1, s) : this.mode === "fanOut" ? a /= Math.max(1, r) : a /= Math.max(1, (s + r) / 2), this.distribution === "normal") {
      let i = Math.sqrt(a);
      if (t = t || "float32", t !== "float32" && t !== "int32")
        throw new Fe(`${this.getClassName()} does not support dType ${t}.`);
      return hb(e, 0, i, t, this.seed);
    } else {
      let i = Math.sqrt(3 * a);
      return Ml(e, -i, i, t);
    }
  }
  getConfig() {
    return { scale: this.scale, mode: this.mode, distribution: this.distribution, seed: this.seed };
  }
};
xn.className = "VarianceScaling";
ae.registerClass(xn);
var Ap = class extends xn {
  constructor(e) {
    super({ scale: 1, mode: "fanAvg", distribution: "uniform", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return xn.className;
  }
};
Ap.className = "GlorotUniform";
ae.registerClass(Ap);
var Ep = class extends xn {
  constructor(e) {
    super({ scale: 1, mode: "fanAvg", distribution: "normal", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return xn.className;
  }
};
Ep.className = "GlorotNormal";
ae.registerClass(Ep);
var Rp = class extends xn {
  constructor(e) {
    super({ scale: 2, mode: "fanIn", distribution: "normal", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return xn.className;
  }
};
Rp.className = "HeNormal";
ae.registerClass(Rp);
var Dp = class extends xn {
  constructor(e) {
    super({ scale: 2, mode: "fanIn", distribution: "uniform", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return xn.className;
  }
};
Dp.className = "HeUniform";
ae.registerClass(Dp);
var Fp = class extends xn {
  constructor(e) {
    super({ scale: 1, mode: "fanIn", distribution: "normal", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return xn.className;
  }
};
Fp.className = "LeCunNormal";
ae.registerClass(Fp);
var Op = class extends xn {
  constructor(e) {
    super({ scale: 1, mode: "fanIn", distribution: "uniform", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return xn.className;
  }
};
Op.className = "LeCunNormal";
ae.registerClass(Op);
var Rb = class extends ns {
  constructor(e) {
    if (super(), this.DEFAULT_GAIN = 1, this.gain = e.gain == null ? this.DEFAULT_GAIN : e.gain, this.seed = e.seed, this.seed != null)
      throw new Fe("Random seed is not implemented for Orthogonal Initializer yet.");
  }
  apply(e, t) {
    return j(() => {
      if (e.length < 2)
        throw new Fe("Shape must be at least 2D.");
      e[0] * e[1] > 2e3 && console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0] * e[1]}) elements: Slowness may result.`);
      let n = e[0] > e[1] ? [e[1], e[0]] : e, s = $p(n, 0, 1, "float32"), r = HO.gramSchmidt(s);
      return e[0] > e[1] && (r = Ge(r)), V(this.gain, r);
    });
  }
  getConfig() {
    return { gain: this.gain, seed: this.seed };
  }
};
Rb.className = "Orthogonal";
ae.registerClass(Rb);
var Ix = { constant: "Constant", glorotNormal: "GlorotNormal", glorotUniform: "GlorotUniform", heNormal: "HeNormal", heUniform: "HeUniform", identity: "Identity", leCunNormal: "LeCunNormal", leCunUniform: "LeCunUniform", ones: "Ones", orthogonal: "Orthogonal", randomNormal: "RandomNormal", randomUniform: "RandomUniform", truncatedNormal: "TruncatedNormal", varianceScaling: "VarianceScaling", zeros: "Zeros" };
function Sx(e, t = {}) {
  return Ll(e, ae.SerializationMap.getMap().classNameMap, t, "initializer");
}
function yt(e) {
  return Ib(e);
}
function ht(e) {
  if (typeof e == "string") {
    let t = e in Ix ? Ix[e] : e;
    if (t === "GlorotNormal")
      return new Ep();
    if (t === "GlorotUniform")
      return new Ap();
    if (t === "HeNormal")
      return new Rp();
    if (t === "HeUniform")
      return new Dp();
    if (t === "LeCunNormal")
      return new Fp();
    if (t === "LeCunUniform")
      return new Op();
    {
      let n = {};
      return n.className = t, n.config = {}, Sx(n);
    }
  } else
    return e instanceof ns ? e : Sx(e);
}
function xm(e) {
  return Array.isArray(e) && Array.isArray(e[0]);
}
function Sd(e) {
  return e.length === 0 ? [] : Array.isArray(e[0]) ? e : [e];
}
function Oe(e) {
  let t;
  if (Array.isArray(e)) {
    if (e.length !== 1)
      throw new U(`Expected Tensor length to be 1; got ${e.length}`);
    t = e[0];
  } else
    t = e;
  return t;
}
function nt(e) {
  if (Array.isArray(e) && Array.isArray(e[0])) {
    if (e.length === 1)
      return e = e, e[0];
    throw new U(`Expected exactly 1 Shape; got ${e.length}`);
  } else
    return e;
}
function Cd(e) {
  let t = 0;
  for (let n of e)
    n.shape.length === 0 ? t += 1 : t += n.shape.reduce((s, r) => s * r);
  return t;
}
var Cx = "Variable";
var dz = class {
  constructor(e, t = "float32", n = Cx, s = true, r = null) {
    this.dtype = t == null ? "float32" : t, this.shape = e.shape, this.id = KI(), n = n == null ? Cx : n, this.originalName = YI(n), this.name = QI(this.originalName), this.trainable_ = s, this.constraint = r, this.val = j3(e, this.trainable_, this.name, this.dtype);
  }
  read() {
    return this.assertNotDisposed(), this.val;
  }
  write(e) {
    return this.assertNotDisposed(), pz(this.val, e), this.val.id !== e.id && (this.val.assign(e), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed)
      throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this.trainable_ = e, this.val.trainable = e;
  }
};
function pz(e, t) {
  if (e.shape.toString() !== t.shape.toString())
    throw new Error("Shape mismatch: " + JSON.stringify(e.shape) + " vs. " + JSON.stringify(t.shape));
}
function wm(e) {
  return e.map((t) => t.read());
}
function Db(e) {
  e.forEach((t) => {
    t[0].write(t[1]);
  });
}
var Dt = class {
  constructor(e) {
    this.dtype = e.dtype, this.shape = e.shape, e.shape != null ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {};
  }
};
var $s = class {
  constructor(e, t, n, s, r, a, i) {
    this.dtype = e, this.shape = t, this.sourceLayer = n, this.inputs = s, this.callArgs = r, this.outputTensorIndex = i, this.id = KI(), a != null && (this.originalName = YI(a), this.name = QI(this.originalName)), this.rank = t.length;
  }
};
var hz = 0;
var Pp = class {
  constructor(e, t) {
    this.callArgs = t, this.id = hz++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes;
    for (let n of e.inboundLayers)
      n != null && n.outboundNodes.push(this);
    e.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    let e = [];
    for (let t of this.inboundLayers)
      t != null ? e.push(t.name) : e.push(null);
    return { outboundLayer: this.outboundLayer ? this.outboundLayer.name : null, inboundLayers: e, nodeIndices: this.nodeIndices, tensorIndices: this.tensorIndices };
  }
};
var fz = 0;
var He = class extends ae.Serializable {
  constructor(e = {}) {
    super(), this._callHook = null, this._addedWeightNames = [], this._stateful = false, this.id = fz++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = false, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = false, this.inboundNodes = [], this.outboundNodes = [];
    let t = e.name;
    if (!t) {
      let n = this.getClassName();
      t = Ws(n) + "_" + Np(n);
    }
    if (this.name = t, this.trainable_ = e.trainable == null ? true : e.trainable, e.inputShape != null || e.batchInputShape != null) {
      let n;
      if (e.batchInputShape != null)
        n = e.batchInputShape;
      else if (e.inputShape != null) {
        let r = null;
        e.batchSize != null && (r = e.batchSize), n = [r].concat(e.inputShape);
      }
      this.batchInputShape = n;
      let s = e.dtype;
      s == null && (s = e.inputDType), s == null && (s = "float32"), this.dtype = s;
    }
    e.weights != null ? this.initialWeights = e.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = false;
  }
  static nodeKey(e, t) {
    return e.name + "_ib-" + t.toString();
  }
  getNodeAtIndex(e, t) {
    if (this.inboundNodes.length === 0)
      throw new hs(`The layer has never been called and thus has no defined ${t}.`);
    if (this.inboundNodes.length <= e)
      throw new U(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[e];
  }
  getInputAt(e) {
    return bn(this.getNodeAtIndex(e, "input").inputTensors);
  }
  getOutputAt(e) {
    return bn(this.getNodeAtIndex(e, "output").outputTensors);
  }
  get input() {
    if (this.inboundNodes.length > 1)
      throw new Vs(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0)
      throw new Vs(`Layer ${this.name} is not connected, no input to return.`);
    return bn(this.getNodeAtIndex(0, "input").inputTensors);
  }
  get output() {
    if (this.inboundNodes.length === 0)
      throw new Vs(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1)
      throw new Vs(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return bn(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  calculateLosses() {
    return this.losses.map((e) => e());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(e) {
    this._built = e;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this._trainableWeights.forEach((t) => t.trainable = e), this.trainable_ = e;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((e) => e.trainable) : [];
  }
  set trainableWeights(e) {
    this._trainableWeights = e;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((e) => !e.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(e) {
    this._nonTrainableWeights = e;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  resetStates() {
    if (!this.stateful)
      throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  assertInputCompatibility(e) {
    if (e = dt(e), this.inputSpec == null || this.inputSpec.length === 0)
      return;
    let t = dt(this.inputSpec);
    if (e.length !== t.length)
      throw new U(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);
    for (let n = 0; n < e.length; n++) {
      let s = e[n], r = t[n];
      if (r == null)
        continue;
      let a = s.rank;
      if (r.ndim != null && a !== r.ndim)
        throw new U(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);
      if (r.maxNDim != null && a > r.maxNDim)
        throw new U(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);
      if (r.minNDim != null && a < r.minNDim)
        throw new U(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);
      if (r.dtype != null && s.dtype !== r.dtype)
        throw new U(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);
      if (r.axes) {
        let i = s.shape;
        for (let o in r.axes) {
          let u = Number(o), l = r.axes[o], c = u >= 0 ? i[u] : i[i.length + u];
          if (l != null && [l, null].indexOf(c) === -1)
            throw new U(`Input ${n} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${l} but got shape ${i}.`);
        }
      }
      if (r.shape != null)
        for (let i = 0; i < r.shape.length; ++i) {
          let o = r.shape[i], u = s.shape[i];
          if (o != null && u != null && o !== u)
            throw new U(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`);
        }
    }
  }
  call(e, t) {
    return e;
  }
  invokeCallHook(e, t) {
    this._callHook != null && this._callHook(e, t);
  }
  setCallHook(e) {
    this._callHook = e;
  }
  clearCallHook() {
    this._callHook = null;
  }
  apply(e, t) {
    t = t || {}, this.assertNotDisposed();
    let n = dt(e), s = true;
    for (let a of n)
      if (!(a instanceof $s)) {
        s = false;
        break;
      }
    let r = true;
    for (let a of n)
      if (a instanceof $s) {
        r = false;
        break;
      }
    if (s === r)
      throw new U("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return ta(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(e);
        let a = [];
        for (let i of dt(e))
          a.push(i.shape);
        this.build(bn(a)), this.built = true, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && r && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(e), r) {
        let a = this.call(e, t), i = dt(a), o = [];
        for (let u of i)
          n.indexOf(u) !== -1 && (u = u.clone()), o.push(u);
        if (a = bn(o), this.activityRegularizer != null)
          throw new Fe("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return a;
      } else {
        let a = mz(e), i = this.computeOutputShape(a), o, u = gz(e);
        if (this.warnOnIncompatibleInputShape(Array.isArray(e) ? a[0] : a), i != null && i.length > 0 && Array.isArray(i[0]) ? o = i.map((l, c) => new $s(u, l, this, dt(e), t, this.name, c)) : o = new $s(u, i, this, dt(e), t, this.name), this.addInboundNode(e, o, null, null, a, i, t), this._refCount++, this.activityRegularizer != null)
          throw new Fe("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return o;
      }
    });
  }
  warnOnIncompatibleInputShape(e) {
    if (this.batchInputShape != null)
      if (e.length !== this.batchInputShape.length)
        console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
      else {
        let t = false;
        this.batchInputShape.forEach((n, s) => {
          n != null && e[s] != null && e[s] !== n && (t = true);
        }), t && console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
      }
  }
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0)
      throw new Vs(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    let e = [];
    for (let t of this.inboundNodes) {
      let n = JSON.stringify(t.outputShapes);
      e.indexOf(n) === -1 && e.push(n);
    }
    if (e.length === 1) {
      let t = this.inboundNodes[0].outputShapes;
      return Array.isArray(t) && Array.isArray(t[0]) && t.length === 1 ? t[0] : t;
    } else
      throw new Vs(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  countParams() {
    if (!this.built)
      throw new hs(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return Cd(this.weights);
  }
  build(e) {
    this.built = true;
  }
  getWeights(e = false) {
    return wm(e ? this.trainableWeights : this.weights);
  }
  setWeights(e) {
    j(() => {
      let t = this.weights;
      if (t.length !== e.length)
        throw new U(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);
      if (t.length === 0)
        return;
      let n = [], s = wm(t);
      for (let r = 0; r < s.length; ++r) {
        let a = s[r], i = t[r], o = e[r];
        if (!w.arraysEqual(a.shape, o.shape))
          throw new U(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);
        n.push([i, o]);
      }
      Db(n);
    });
  }
  addWeight(e, t, n, s, r, a, i, o) {
    if (this._addedWeightNames.indexOf(e) !== -1)
      throw new U(`Duplicate weight name ${e} for layer ${this.name}`);
    this._addedWeightNames.push(e), n == null && (n = "float32"), this.fastWeightInitDuringBuild && (s = o != null ? o() : ht("zeros"));
    let u = s.apply(t, n), l = new dz(u, n, e, a, i);
    return u.dispose(), r != null && this.addLoss(() => r.apply(l.read())), a == null && (a = true), a ? this._trainableWeights.push(l) : this._nonTrainableWeights.push(l), l;
  }
  setFastWeightInitDuringBuild(e) {
    this.fastWeightInitDuringBuild = e;
  }
  addLoss(e) {
    e == null || Array.isArray(e) && e.length === 0 || (e = dt(e), this._losses !== void 0 && this._losses !== null && this.losses.push(...e));
  }
  computeOutputShape(e) {
    return e;
  }
  computeMask(e, t) {
    if (!this.supportsMasking) {
      if (t != null)
        if (Array.isArray(t))
          t.forEach((n) => {
            if (n != null)
              throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
          });
        else
          throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      return null;
    }
    return t;
  }
  addInboundNode(e, t, n, s, r, a, i = null) {
    let o = dt(e);
    t = dt(t), n = dt(n), s = dt(s), r = Sd(r), a = Sd(a);
    let u = [], l = [], c = [];
    for (let p of o)
      u.push(p.sourceLayer), l.push(p.nodeIndex), c.push(p.tensorIndex);
    new Pp({ outboundLayer: this, inboundLayers: u, nodeIndices: l, tensorIndices: c, inputTensors: o, outputTensors: t, inputMasks: n, outputMasks: s, inputShapes: r, outputShapes: a }, i);
    for (let p = 0; p < t.length; p++)
      t[p].sourceLayer = this, t[p].nodeIndex = this.inboundNodes.length - 1, t[p].tensorIndex = p;
  }
  getConfig() {
    let e = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (e.batchInputShape = this.batchInputShape), this.dtype != null && (e.dtype = this.dtype), e;
  }
  disposeWeights() {
    return this.weights.forEach((e) => e.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  dispose() {
    if (!this.built)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let e = 0;
    return --this._refCount === 0 && (e = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: e };
  }
};
function mz(e) {
  e = dt(e);
  let t = [];
  for (let n of e)
    t.push(n.shape);
  return bn(t);
}
function gz(e) {
  return "float32";
}
function t0(e, t, n) {
  if ((t == null || n != null && n > 0) && (t = e.sourceLayer, n = e.nodeIndex), t.inboundNodes.length === 0)
    return [e];
  {
    let s = t.inboundNodes[n];
    if (s.inboundLayers.length === 0)
      return s.inputTensors;
    {
      let r = [];
      for (let a = 0; a < s.inboundLayers.length; a++) {
        let i = s.inputTensors[a], o = s.inboundLayers[a], u = s.nodeIndices[a], l = t0(i, o, u);
        for (let c of l)
          r.indexOf(c) === -1 && r.push(c);
      }
      return r;
    }
  }
}
var Zo = class extends He {
  constructor(e) {
    if (super({ dtype: e.dtype, name: e.name != null ? e.name : Np("input").toString() }), e.batchSize == null && (e.batchSize = null), e.sparse == null && (e.sparse = false), this.trainable = false, this.built = true, this.sparse = e.sparse, e.inputShape != null && e.batchInputShape != null)
      throw new U("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let t = e.batchInputShape;
    if (t == null) {
      if (e.inputShape == null)
        throw new U("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      t = [e.batchSize].concat(e.inputShape);
    } else if (e.batchSize != null)
      throw new U("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    let n = e.dtype || "float32";
    this.batchInputShape = t, this.dtype = n, this.inputSpec = [{ shape: t }];
    let s = new $s(this.dtype, this.batchInputShape, this, [], {}, this.name);
    s.nodeIndex = 0, s.tensorIndex = 0, new Pp({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: [s], outputTensors: [s], inputMasks: [null], outputMasks: [null], inputShapes: [t], outputShapes: [t] });
  }
  apply(e, t) {
    throw new U(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return { batchInputShape: this.batchInputShape, dtype: this.dtype, sparse: this.sparse, name: this.name };
  }
};
Zo.className = "InputLayer";
ae.registerClass(Zo);
function n0(e) {
  if (e.batchShape == null && e.shape == null)
    throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (e.batchShape != null && e.shape != null)
    throw new U("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  let t = e.batchShape;
  e.shape != null && t == null && (t = [null].concat(e.shape));
  let n = e.dtype;
  return n == null && (n = "float32"), new Zo({ batchInputShape: t, name: e.name, dtype: n, sparse: e.sparse }).inboundNodes[0].outputTensors[0];
}
function bz(e, t) {
  if (e.dtype == null || e.dtype === t.dtype)
    return t;
  try {
    return ce(t, e.dtype);
  } catch (n) {
    throw new U(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`);
  }
}
var Zr = class {
  constructor(e) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, e instanceof Zr)
      for (let t in e.id2Value)
        this.id2Value[t] = e.id2Value[t], t in e.id2Mask && (this.id2Mask[t] = e.id2Mask[t]);
    else {
      if (e == null)
        return;
      for (let t of e)
        this.add(t.key, t.value);
    }
  }
  add(e, t, n) {
    if (this.id2Value[e.id] == null)
      this.id2Value[e.id] = bz(e, t), this.name2Id[e.name] = e.id, n != null && (this.id2Mask[e.id] = n);
    else
      throw new U(`Duplicate key: name=${e.name}, id=${e.id}`);
    return this;
  }
  addFeed(e) {
    this.add(e.key, e.value);
  }
  hasKey(e) {
    return this.id2Value[e.id] != null;
  }
  names() {
    return Object.keys(this.name2Id);
  }
  getValue(e) {
    if (e instanceof $s) {
      if (this.id2Value[e.id] == null)
        throw new U(`Nonexistent key: ${e.name}`);
      return this.id2Value[e.id];
    } else {
      let t = this.name2Id[e];
      if (t == null)
        throw new U(`Feed dict has no SymbolicTensor name: ${e}`);
      return this.id2Value[t];
    }
  }
  getMask(e) {
    if (e instanceof $s) {
      if (this.id2Value[e.id] == null)
        throw new U(`Nonexistent key: ${e.name}`);
      return this.id2Mask[e.id];
    } else {
      let t = this.name2Id[e];
      if (t == null)
        throw new U(`Feed dict has no SymbolicTensor name: ${e}`);
      return this.id2Mask[t];
    }
  }
  disposeMasks() {
    this.id2Mask != null && Re(this.id2Mask);
  }
};
var Nd = new HI();
var Td = new HI();
function yz(e) {
  Nd != null && Nd.setMaxEntries(e), Td != null && Td.setMaxEntries(e);
}
function Eu(e, t, n, s) {
  let r = n == null ? false : n.training, a = Array.isArray(e), i = a ? e : [e], o = i.map((f) => f.name), u = [], l = t.names();
  for (let f of o)
    l.indexOf(f) !== -1 ? u.push(t.getValue(f)) : u.push(null);
  s != null && (s.maxNumTensors = -1 / 0, s.minNumTensors = 1 / 0);
  let c = o.join(",") + "|" + t.names().join(","), p = Nd.get(c), d;
  if (p == null) {
    let f = vz(i, t);
    p = f.sorted, d = f.recipientCounts, Nd.put(c, p), Td.put(c, d);
  }
  d = {}, r || Object.assign(d, Td.get(c));
  let h = new Zr(t);
  for (let f = 0; f < p.length; ++f) {
    if (s != null) {
      let A = pm().numTensors;
      A > s.maxNumTensors && (s.maxNumTensors = A), A < s.minNumTensors && (s.minNumTensors = A);
    }
    let m = p[f], g = m.sourceLayer;
    if (g instanceof Zo)
      continue;
    let b = [], y = [], v = [], x = false;
    for (let A of m.inputs) {
      let P = h.getValue(A), R = h.getMask(A);
      b.push(P), y.push(R), R != null && (x = true), r || (d[A.name]--, d[A.name] === 0 && !t.hasKey(A) && o.indexOf(A.name) === -1 && !P.isDisposed && A.sourceLayer.stateful !== true && v.push(P));
    }
    x && (n = n || {}, n.mask = y[0]);
    let k = dt(g.apply(b, n)), S = null;
    g.supportsMasking && (S = g.computeMask(b, y));
    let $ = wz(m), E = Array.isArray($) ? $ : [$];
    for (let A = 0; A < E.length; ++A) {
      h.hasKey(E[A]) || h.add(E[A], k[A], Array.isArray(S) ? S[0] : S);
      let P = o.indexOf(E[A].name);
      P !== -1 && (u[P] = k[A]);
    }
    r || Re(v);
  }
  return h.disposeMasks(), a ? u : u[0];
}
function vz(e, t) {
  w.assert(e != null && e.length > 0, () => "Expected at least one fetch, got none");
  let n = [], s = {};
  if (e.length === 1) {
    let r = Nx(e[0], t);
    n = r.sorted, s = r.recipientMap;
  } else {
    let r = /* @__PURE__ */ new Set();
    for (let a of e) {
      let { sorted: i, recipientMap: o } = Nx(a, t);
      for (let u of i)
        r.has(u.name) || (n.push(u), r.add(u.name));
      for (let u in o)
        s[u] == null && (s[u] = /* @__PURE__ */ new Set()), o[u].forEach((l) => s[u].add(l));
    }
  }
  return { sorted: n, recipientCounts: xz(s) };
}
function xz(e) {
  let t = {};
  for (let n in e)
    t[n] = e[n].size;
  return t;
}
function Nx(e, t) {
  let n = /* @__PURE__ */ new Set(), s = [], r = {};
  for (let o of t.names())
    n.add(o);
  let a = [], i = [];
  for (a.push(e); a.length > 0; ) {
    let o = a[a.length - 1];
    if (n.has(o.name)) {
      a.pop();
      continue;
    }
    let u = i[i.length - 1] === a.length - 1;
    if (o.inputs.length === 0 || u)
      a.pop(), s.push(o), n.add(o.name), u && i.pop();
    else {
      i.push(a.length - 1);
      for (let l of o.inputs)
        r[l.name] == null && (r[l.name] = /* @__PURE__ */ new Set()), r[l.name].add(o.name), !n.has(l.name) && a.push(l);
    }
  }
  return { sorted: s, recipientMap: r };
}
function wz(e) {
  let t;
  if (e.sourceLayer.inboundNodes.length === 1)
    t = e.sourceLayer.output;
  else {
    let n = null;
    for (let s = 0; s < e.sourceLayer.inboundNodes.length; ++s)
      for (let r of e.sourceLayer.inboundNodes[s].outputTensors)
        if (r.id === e.id) {
          n = s;
          break;
        }
    t = e.sourceLayer.getOutputAt(n);
  }
  return t;
}
var kz = X();
kz.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, yz);
var s0 = { kernelName: uo, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(e, xp(ce(n, "float32"), -1)) };
} };
var Iz = { kernelName: rl, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => {
    let s = ct(ce(n, "float32")), r = cn(ge(we(1), s));
    return kt(xe(e, r));
  } };
} };
var Sz = { kernelName: al, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => {
    let s = cn(ge(ct(ce(n, "float32")), 1));
    return xe(e, s);
  } };
} };
var Cz = { kernelName: Sr, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t, r = it(n.shape, s.shape);
  return { a: () => {
    let o = e, u = _t(n.shape, r);
    return u.length > 0 && (o = ve(o, u)), G(o, n.shape);
  }, b: () => {
    let o = e, u = _t(s.shape, r);
    return u.length > 0 && (o = ve(o, u)), G(o, s.shape);
  } };
} };
var Nz = { kernelName: Ia, saveAllInputs: true, gradFunc: (e, t) => {
  let n = {};
  return t.forEach((s, r) => {
    n[r] = () => e.clone();
  }), n;
} };
var Tz = { kernelName: Sa, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => je(n) };
} };
var $z = { kernelName: ul, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => je(n) };
} };
var _z = { kernelName: ll, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => xe(e, cn(ge(we(1), ct(ce(n, "float32"))))) };
} };
var Az = { kernelName: cl, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => {
    let s = cn(ie(we(1), ct(ce(n, "float32"))));
    return xe(e, s);
  } };
} };
var Ez = { kernelName: hl, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t, r = it(n.shape, s.shape);
  return { a: () => {
    let o = ie(ct(n), ct(s)), u = V(e, xe(s, o)), l = _t(n.shape, r);
    return l.length > 0 && (u = ve(u, l)), G(u, n.shape);
  }, b: () => {
    let o = ie(ct(n), ct(s)), u = kt(V(e, xe(n, o))), l = _t(s.shape, r);
    return l.length > 0 && (u = ve(u, l)), G(u, s.shape);
  } };
} };
var Rz = { kernelName: dl, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => xe(e, ie(ct(ce(n, "float32")), 1)) };
} };
var Dz = { kernelName: pl, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => xe(e, ge(we(1), ct(ce(n, "float32")))) };
} };
function Fz(e, t, n, s, r, a) {
  let i = _(e, "dy", "avgPool3dGrad"), o = _(t, "input", "avgPool3dGrad"), u = i, l = o, c = false;
  o.rank === 4 && (c = true, u = G(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), l = G(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]])), O(u.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`), O(l.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${l.rank}.`), hn("avgPool3dGrad", r, a);
  let p = { dy: u, input: l }, d = { filterSize: n, strides: s, pad: r, dimRoundingMode: a }, h = M.runKernel(lg, p, d);
  return c ? G(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
var Oz = L({ avgPool3dGrad_: Fz });
var Pz = { kernelName: Kd, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let [s] = t, { filterSize: r, strides: a, pad: i, dimRoundingMode: o } = n;
  return { x: () => Oz(e, s, r, a, i, o) };
} };
function zz(e, t, n, s, r) {
  let a = _(e, "dy", "avgPoolGrad"), i = _(t, "input", "avgPoolGrad");
  O(i.rank === a.rank, () => `Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);
  let o = i, u = a, l = false;
  i.rank === 3 && (l = true, o = G(i, [1, i.shape[0], i.shape[1], i.shape[2]]), u = G(a, [1, a.shape[0], a.shape[1], a.shape[2]])), O(u.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`), O(o.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`);
  let c = { dy: u, input: o }, p = { filterSize: n, strides: s, pad: r }, d = M.runKernel(ug, c, p);
  return l ? G(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
var Mz = L({ avgPoolGrad_: zz });
var Lz = { kernelName: Ca, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let [s] = t, { filterSize: r, strides: a, pad: i } = n;
  return { x: () => Mz(e, s, r, a, i) };
} };
var Bz = { kernelName: Na, inputsToSave: ["a", "b"], gradFunc: (e, t, n) => {
  let [s, r] = t, { transposeA: a, transposeB: i } = n;
  return !a && !i ? { a: () => We(e, r, false, true), b: () => We(s, e, true, false) } : !a && i ? { a: () => We(e, r, false, false), b: () => We(e, s, true, false) } : a && !i ? { a: () => We(r, e, false, true), b: () => We(s, e, false, false) } : { a: () => We(r, e, true, true), b: () => We(e, s, true, true) };
} };
var Vz = { kernelName: lo, gradFunc: (e, t, n) => {
  let { blockShape: s, crops: r } = n;
  return { x: () => rb(e, s, r) };
} };
var Wz = { kernelName: O$, gradFunc: (e, t, n) => {
  let s = n, r = s.inputShape, a = s.shape, i = Array.from(a);
  for (let u = r.length - 1; u >= 0; u--)
    if (r[u] === a[u])
      i[u] = 1;
    else if (r[u] !== 1)
      throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);
  let o = [];
  for (let u = 0; u < i.length; u++)
    i[u] > 1 && o.push(u);
  return { x: () => ve(e, o, true) };
} };
var Uz = { kernelName: Ta, gradFunc: (e) => ({ x: () => e.clone() }) };
var Gz = { kernelName: $a, gradFunc: (e) => ({ x: () => je(e) }) };
var Hz = { kernelName: Cr, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let [s] = t, { clipValueMin: r, clipValueMax: a } = n;
  return { x: () => vn(Ds(Xo(s, r), Yo(s, a)), e, je(e)) };
} };
var qz = { kernelName: Yd, inputsToSave: ["x"], gradFunc: s0.gradFunc };
var jz = { kernelName: co, saveAllInputs: true, gradFunc: (e, t, n) => {
  let s = t.map((u) => u.shape), { axis: r } = n, a = ts(r, t[0].shape)[0], i = s.map((u) => u[a]);
  return Bn(e, i, a).map((u) => () => u);
} };
var Kz = { kernelName: _a, inputsToSave: ["x", "filter"], gradFunc: (e, t, n) => {
  let [s, r] = t, { dilations: a, strides: i, pad: o, dataFormat: u } = n;
  return O(mr(a), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`), { x: () => Kg(s.shape, e, r, i, o, u), filter: () => fb(s, e, r.shape, i, o, u) };
} };
var Xz = { kernelName: Aa, inputsToSave: ["dy", "filter"], gradFunc: (e, t, n) => {
  let [s, r] = t, { strides: a, pad: i, dataFormat: o, dimRoundingMode: u } = n;
  return { dy: () => da(e, r, a, i, o, 1, u), filter: () => fb(e, s, r.shape, a, i, o, u) };
} };
function Yz(e, t, n, s, r) {
  let a = e;
  e.rank === 4 && (a = G(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]]));
  let i = t;
  i.rank === 4 && (i = G(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])), O(a.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`), O(i.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`), O(n.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`), O(a.shape[4] === n[3], () => `Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`), O(i.shape[4] === n[4], () => `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);
  let o = { x: a, dy: i }, u = { strides: s, pad: r, filterShape: n };
  return M.runKernel(hg, o, u);
}
var Qz = L({ conv3DBackpropFilter_: Yz });
var Zz = { kernelName: Qd, inputsToSave: ["x", "filter"], gradFunc: (e, t, n) => {
  let { dilations: s, strides: r, pad: a } = n;
  O(mr(s), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
  let [i, o] = t;
  return { x: () => iI(i.shape, e, o, r, a), filter: () => Qz(i, e, o.shape, r, a) };
} };
var Jz = { kernelName: Ea, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(kt(kI(ce(n, "float32"))), e) };
} };
var eM = { kernelName: Ra, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(II(ce(n, "float32")), e) };
} };
var tM = { kernelName: Da, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let [s] = t, { axis: r, exclusive: a, reverse: i } = n;
  return { x: () => {
    let o = fI([r], s.rank), u = uI(e, r, a, !i);
    return o != null && (u = Ge(u, o)), u;
  } };
} };
var nM = { kernelName: Fa, inputsToSave: ["x", "filter"], gradFunc: (e, t, n) => {
  let { dilations: s, strides: r, pad: a, dimRoundingMode: i } = n, o = s == null ? [1, 1] : s;
  O(mr(o), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);
  let [u, l] = t;
  return O(u.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`), O(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`), O(u.shape[3] === l.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`), O(Ps(r, o), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`), hn("depthwiseConv2d", a, i), { x: () => FI(u.shape, e, l, r, a, o, i), filter: () => DI(u, e, l.shape, r, a, o, i) };
} };
var sM = { kernelName: Zd, inputsToSave: ["x", "filter"], gradFunc: (e, t, n) => {
  let [s, r] = t, a = { x: s, filter: r, dy: e }, i = { x: s, filter: r, dy: e };
  return { x: () => M.runKernel(Qf, a, n), filter: () => M.runKernel(Zf, i, n) };
} };
var rM = { kernelName: Pa, outputsToSave: [true], gradFunc: (e, t) => {
  let [n] = t, s = { dy: e, y: n };
  return { x: () => M.runKernel(vg, s) };
} };
var aM = { kernelName: fl, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t, s = V(Yn(kt(ct(n))), 2 / Math.sqrt(Math.PI));
  return { x: () => V(e, s) };
} };
var iM = { kernelName: za, outputsToSave: [true], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(e, n) };
} };
var oM = { kernelName: go, inputsToSave: ["input"], gradFunc: (e, t) => {
  let [n] = t;
  return { input: () => G(e, n.shape) };
} };
var uM = { kernelName: bo, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(e, Yn(n)) };
} };
var lM = { kernelName: Ma, gradFunc: (e) => ({ x: () => je(e) }) };
var cM = { kernelName: La, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t, r = it(n.shape, s.shape);
  return { a: () => {
    let o = xe(e, ce(s, "float32")), u = _t(n.shape, r);
    return u.length > 0 ? G(ve(o, u), n.shape) : o;
  }, b: () => {
    let o = V(e, ce(n, "float32")), u = _t(s.shape, r);
    u.length > 0 && (o = G(ve(o, u), s.shape));
    let l = ct(s);
    return kt(xe(o, ce(l, "float32")));
  } };
} };
var dM = { kernelName: Ba, inputsToSave: ["x", "mean", "variance", "scale"], gradFunc: (e, t, n) => {
  let { varianceEpsilon: s } = n, [r, a, i, o] = t, u = o == null ? we(1) : o, l = _t(a.shape, r.shape), c = [];
  if (a.rank === 1) {
    for (let x = 0; x < r.shape.length - 1; ++x)
      c.push(r.shape[x]);
    c.push(1);
  }
  let p = ge(r, a), d = V(e, u), h = xI(ie(i, we(s))), f = V(V(V(h, h), h), we(-0.5));
  return { x: () => a.rank === 1 ? G(V(V(e, ps(G(h, [1, 1, 1, a.shape[0]]), c)), u), r.shape) : G(V(V(e, h), u), r.shape), mean: () => {
    let x = V(V(h, we(-1)), d);
    return a.rank === 1 && (x = ve(x, l)), G(x, a.shape);
  }, variance: () => {
    let x = V(V(f, p), d);
    return a.rank === 1 && (x = ve(x, l)), G(x, a.shape);
  }, scale: () => {
    let x = V(p, h), k = V(e, x);
    return a.rank === 1 && (k = ve(k, l)), G(k, a.shape);
  }, offset: () => {
    let x = e;
    return a.rank === 1 && (x = ve(x, l)), G(x, a.shape);
  } };
} };
var pM = { kernelName: vo, inputsToSave: ["x", "indices"], gradFunc: (e, t, n) => {
  let [s, r] = t, { axis: a } = n, i = ts(a, s.shape)[0];
  return { x: () => {
    let u = s.shape, l = r.size, c = u.slice(0, i), p = c.length, d = u.slice(a, u.length).slice(1), h = d.length, f = Tx(0, p), m = Tx(p + 1, p + 1 + h), g = $x([c, [l], d]), b = G(e, g), y = G(r, [l]), v = $x([[p], f, m]), x = Ge(b, v), k = H3(x, y, s.shape[i]), S = eb(v);
    return k = Ge(k, S), k;
  }, indices: () => r };
} };
function Tx(e, t) {
  let n = [];
  for (let s = e; s < t; ++s)
    n.push(s);
  return n;
}
function $x(e) {
  let t = [];
  for (let n = 0; n < e.length; ++n)
    for (let s = 0; s < e[n].length; ++s)
      t.push(e[n][s]);
  return t;
}
var hM = { kernelName: Va, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t;
  return { a: () => je(n), b: () => je(s) };
} };
var fM = { kernelName: Wa, gradFunc: (e) => ({ x: () => ce(e, "float32") }) };
var mM = { kernelName: gl, gradFunc: (e) => ({ x: () => je(e) }) };
var gM = { kernelName: bl, gradFunc: (e) => ({ x: () => je(e) }) };
var bM = { kernelName: yl, gradFunc: (e) => ({ x: () => je(e) }) };
var yM = { kernelName: Ua, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let [s] = t, { alpha: r } = n, a = Un(s, 0);
  return { x: () => vn(a, e, V(e, r)) };
} };
var vM = { kernelName: vl, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => xe(e, ie(n, 1)) };
} };
var xM = { kernelName: Ga, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => xe(e, ce(n, "float32")) };
} };
var wM = { kernelName: P$, inputsToSave: [], outputsToSave: [true], gradFunc: (e, t, n) => {
  let [s] = t, { axis: r } = n;
  return { logits: () => {
    let i = Yn(s);
    return ge(e, V(ve(e, r, true), i));
  } };
} };
function kM(e, t, n, s = 5, r = 1, a = 1, i = 0.5) {
  let o = { x: e, y: t, dy: n }, u = { depthRadius: s, bias: r, alpha: a, beta: i };
  return M.runKernel(Ig, o, u);
}
var IM = L({ localResponseNormalizationBackprop_: kM });
var SM = { kernelName: np, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (e, t, n) => {
  let [s, r] = t, { depthRadius: a, bias: i, alpha: o, beta: u } = n;
  return { x: () => IM(s, r, e, a, i, o, u) };
} };
function r0(e, t, n, s) {
  return t.rank < n.rank && (t = G(t, pa(t.shape, s))), e.rank < n.rank && (e = G(e, pa(e.shape, s))), { x: () => V(e, ce(Xn(n, t), e.dtype)) };
}
var _x = { kernelName: Ha, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (e, t, n) => {
  let s = n, { reductionIndices: r } = s, a = t[0], i = t[1], o = ts(r, a.shape), u = r0(e, i, a, o);
  return { x: () => u.x() };
} };
var CM = { kernelName: qa, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t;
  return { a: () => V(e, ce(Xo(n, s), "float32")), b: () => V(e, ce(cI(n, s), "float32")) };
} };
function NM(e, t, n, s, r, a, i) {
  let o = _(e, "dy", "maxPool3dGrad"), u = _(t, "input", "maxPool3dGrad"), l = _(n, "output", "maxPool3dGrad"), c = o, p = u, d = l, h = false;
  u.rank === 4 && (h = true, c = G(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]]), p = G(u, [1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]]), d = G(l, [1, l.shape[0], l.shape[1], l.shape[2], l.shape[3]])), O(c.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`), O(p.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`), O(d.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`), hn("maxPool3dGrad", a, i);
  let f = { dy: c, input: p, output: d }, m = { filterSize: s, strides: r, pad: a, dimRoundingMode: i }, g = M.runKernel(Cg, f, m);
  return h ? G(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g;
}
var TM = L({ maxPool3dGrad_: NM });
var $M = { kernelName: sp, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (e, t, n) => {
  let [s, r] = t, { filterSize: a, strides: i, pad: o, dimRoundingMode: u } = n;
  return { x: () => TM(e, s, r, a, i, o, u) };
} };
function _M(e, t, n, s, r, a, i) {
  let o = _(e, "dy", "maxPoolGrad"), u = _(t, "input", "maxPoolGrad"), l = _(n, "output", "maxPoolGrad");
  O(u.rank === o.rank, () => `Rank of input (${u.rank}) does not match rank of dy (${o.rank})`), O(o.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`), O(u.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`), hn("maxPoolGrad", a, i);
  let c = { dy: o, input: u, output: l }, p = { filterSize: s, strides: r, pad: a, dimRoundingMode: i };
  return M.runKernel(Sg, c, p);
}
var AM = L({ maxPoolGrad_: _M });
var EM = { kernelName: ja, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (e, t, n) => {
  let [s, r] = t, { filterSize: a, strides: i, pad: o } = n;
  return { x: () => AM(e, s, r, a, i, o) };
} };
var RM = { kernelName: Ka, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let [s] = t, { axis: r } = n, a = ts(r, s.shape), o = hI(s.shape, a)[1], u = pt(o);
  return { x: () => {
    let c = s.shape.slice();
    a.forEach((h) => {
      c[h] = 1;
    });
    let p = G(e, c);
    return xe(V(p, Mn(s.shape, "float32")), u);
  } };
} };
var DM = { kernelName: Xa, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (e, t, n) => {
  let s = n, { axis: r } = s, [a, i] = t, o = ts(r, a.shape), u = r0(e, i, a, o);
  return { x: () => u.x() };
} };
var FM = { kernelName: Ya, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t;
  return { a: () => V(e, ce(Yo(n, s), "float32")), b: () => V(e, ce(Un(n, s), "float32")) };
} };
var OM = { kernelName: Qa, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let s = t[0], { paddings: r } = n, a = r.map((i) => i[0]);
  return { x: () => qe(e, a, s.shape) };
} };
var PM = { kernelName: wl, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t, r = it(n.shape, s.shape);
  return { a: () => {
    let o = _t(n.shape, r);
    return o.length > 0 ? G(ve(e, o), n.shape) : e;
  }, b: () => {
    let o = V(e, kt(bp(xe(n, s)))), u = _t(s.shape, r);
    return u.length > 0 ? G(ve(o, u), s.shape) : o;
  } };
} };
var zM = { kernelName: Za, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t, r = it(n.shape, s.shape);
  return { a: () => {
    let o = V(e, ce(s, "float32")), u = _t(n.shape, r);
    return u.length > 0 ? G(ve(o, u), n.shape) : o;
  }, b: () => {
    let o = V(e, ce(n, "float32")), u = _t(s.shape, r);
    return u.length > 0 ? G(ve(o, u), s.shape) : o;
  } };
} };
var MM = { kernelName: Co, gradFunc: (e) => ({ x: () => kt(e) }) };
var LM = { kernelName: Ao, inputsToSave: ["indices"], gradFunc: (e, t) => {
  let n = t[0];
  return { indices: () => $t(n.shape, "float32") };
} };
var BM = { kernelName: _o, gradFunc: (e) => ({ x: () => je(e) }) };
var VM = { kernelName: Eo, saveAllInputs: true, gradFunc: (e, t, n) => {
  let { axis: s } = n;
  return Fs(e, s).map((a) => () => a);
} };
var Ax = { kernelName: Ja, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let s = t[0], { paddings: r } = n, a = r.map((i) => i[0]);
  return { x: () => qe(e, a, s.shape) };
} };
var WM = { kernelName: ei, inputsToSave: ["a", "b"], outputsToSave: [true], gradFunc: (e, t) => {
  let [n, s, r] = t, a = n, i = s, o = it(a.shape, i.shape);
  return { a: () => {
    let c = ce(i, "float32"), p = V(e, V(c, ha(a, ge(c, we(1))))), d = _t(a.shape, o);
    return d.length > 0 && (p = ve(p, d)), G(p, a.shape);
  }, b: () => {
    let c = Un(a, 0), p = vn(c, Qn(a), je(a)), d = V(e, V(r, p)), h = _t(i.shape, o);
    return h.length > 0 && (d = ve(d, h)), G(d, i.shape);
  } };
} };
var UM = { kernelName: ti, inputsToSave: ["x", "alpha"], gradFunc: (e, t) => {
  let [n, s] = t, r = Un(n, 0);
  return { x: () => vn(r, e, V(e, s)), alpha: () => {
    let a = vn(r, je(e), V(e, n)), i = _t(s.shape, e.shape);
    return i.length > 0 && (a = ve(a, i)), G(a, s.shape);
  } };
} };
function GM(e, t, n) {
  let s = e.shape.slice();
  s[n] = 1;
  let r = G(t, s), a = mm(e, n, true, false), i = mm(e, n, true, true), o = V(a, i);
  return V(r, o);
}
function HM(e, t, n) {
  let s = e.shape.length, r = s - n.length, a = C.getAxesPermutation(n, s), i = e;
  a != null && (i = Ge(e, a));
  let o = i.shape.slice(), l = o.splice(s - n.length, n.length).reduce((d, h) => d * h, 1);
  o.push(l);
  let c = i.reshape(o), p = GM(c, t, r);
  if (p = p.reshape(i.shape), a != null) {
    let d = C.getUndoAxesPermutation(a);
    p = Ge(p, d);
  }
  return p;
}
var qM = { kernelName: ni, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let [s] = t, { axis: r } = n, a = [];
  return r == null ? a = s.shape.map((i, o) => o) : typeof r == "number" ? a = [r] : a = r, { x: () => HM(s, e, a) };
} };
var jM = { kernelName: Oa, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t, r = it(n.shape, s.shape);
  return { a: () => {
    let o = xe(e, ce(s, "float32")), u = _t(n.shape, r);
    return u.length > 0 ? G(ve(o, u), n.shape) : o;
  }, b: () => {
    let o = V(e, ce(n, "float32")), u = _t(s.shape, r);
    u.length > 0 && (o = G(ve(o, u), s.shape));
    let l = ct(s);
    return kt(xe(o, ce(l, "float32")));
  } };
} };
var KM = { kernelName: Sl, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => xe(e, kt(ct(n))) };
} };
var XM = { kernelName: ai, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t, s = V(Yo(n, 6), xp(n));
  return { x: () => V(e, ce(s, "float32")) };
} };
var YM = { kernelName: si, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(e, ce(xp(n), "float32")) };
} };
var QM = { kernelName: Ro, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => G(e, n.shape) };
} };
var ZM = { kernelName: ri, inputsToSave: ["images"], gradFunc: (e, t, n) => {
  let [s] = t, r = { dy: e, images: s };
  return { images: () => M.runKernel(_g, r, n) };
} };
var JM = { kernelName: Cl, inputsToSave: ["images"], gradFunc: (e, t, n) => {
  let [s] = t, r = { dy: e, images: s };
  return { images: () => M.runKernel($g, r, n) };
} };
var eL = { kernelName: Do, gradFunc: (e, t, n) => {
  let { dims: s } = n, r = ts(s, e.shape);
  return { x: () => Jn(e, r) };
} };
var tL = { kernelName: Fo, gradFunc: (e) => ({ x: () => je(e) }) };
var nL = { kernelName: ii, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => kt(xe(e, V(ha(n, 1.5), 2))) };
} };
var sL = { kernelName: Po, inputsToSave: ["condition"], gradFunc: (e, t) => {
  let [n] = t;
  return { condition: () => ce(je(n), "float32"), t: () => V(e, ce(n, e.dtype)), e: () => V(e, ce(tb(n), e.dtype)) };
} };
var rL = { kernelName: Nl, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => {
    let s = Un(n, we(0)), r = we(VI), a = we(WI), i = V(e, a), o = V(V(e, r), Yn(ce(n, "float32")));
    return vn(s, i, o);
  } };
} };
var aL = { kernelName: ui, outputsToSave: [true], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(e, V(n, ge(we(1), n))) };
} };
var iL = { kernelName: Tl, gradFunc: (e) => ({ x: () => je(e) }) };
var oL = { kernelName: oi, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(Xg(ce(n, "float32")), e) };
} };
var uL = { kernelName: Mo, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(oI(ce(n, "float32")), e) };
} };
var lL = { kernelName: zo, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let [s] = t, { begin: r, size: a } = n, i = s.shape, [o, u] = Hk(s, r, a), l = [];
  for (let c = 0; c < e.rank; c++)
    l.push([o[c], i[c] - o[c] - u[c]]);
  return { x: () => bi(e, l) };
} };
var cL = { kernelName: di, outputsToSave: [true], gradFunc: (e, t, n) => {
  let [s] = t, { dim: r } = n, a = true, i = V(e, s);
  return { logits: () => ge(i, V(ve(i, [r], a), s)) };
} };
var dL = { kernelName: $l, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(e, qs(n)) };
} };
var Ex = { kernelName: Lo, gradFunc: (e, t, n) => {
  let { blockShape: s, paddings: r } = n;
  return { x: () => jg(e, s, r) };
} };
var Rx = { kernelName: Bo, gradFunc: (e, t, n) => {
  let { axis: s } = n;
  return { x: () => Ft(e, s) };
} };
var pL = { kernelName: li, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => xe(e, V(cn(ce(n, "float32")), 2)) };
} };
var hL = { kernelName: Al, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(e, V(ce(n, "float32"), 2)) };
} };
var fL = { kernelName: pi, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t, r = we(2);
  return { a: () => V(e, V(r, ge(n, s))), b: () => V(e, V(r, ge(s, n))) };
} };
var mL = { kernelName: gi, gradFunc: (e) => ({ x: () => je(e) }) };
var gL = { kernelName: hi, inputsToSave: ["a", "b"], gradFunc: (e, t) => {
  let [n, s] = t, r = it(n.shape, s.shape);
  return { a: () => {
    let o = e, u = _t(n.shape, r);
    return u.length > 0 && (o = ve(o, u)), G(o, n.shape);
  }, b: () => {
    let o = e, u = _t(s.shape, r);
    return u.length > 0 && (o = ve(o, u)), G(kt(o), s.shape);
  } };
} };
var bL = { kernelName: ci, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let [s] = t, r = s.shape.slice(), { axis: a } = n;
  ts(a, s.shape).forEach((l) => {
    r[l] = 1;
  });
  let o = G(e, r), u = V(o, Mn(s.shape, "float32"));
  return { x: () => u };
} };
var yL = { kernelName: Wo, inputsToSave: ["x"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => xe(e, ct(Xg(n))) };
} };
var vL = { kernelName: fi, outputsToSave: [true], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => V(ge(we(1), ct(n)), e) };
} };
var xL = { kernelName: Nr, inputsToSave: ["x"], gradFunc: (e, t, n) => {
  let [s] = t, { reps: r } = n;
  return { x: () => {
    let i = je(s);
    if (s.rank === 1)
      for (let o = 0; o < r[0]; ++o)
        i = ie(i, qe(e, [o * s.shape[0]], [s.shape[0]]));
    else if (s.rank === 2)
      for (let o = 0; o < r[0]; ++o)
        for (let u = 0; u < r[1]; ++u)
          i = ie(i, qe(e, [o * s.shape[0], u * s.shape[1]], [s.shape[0], s.shape[1]]));
    else if (s.rank === 3)
      for (let o = 0; o < r[0]; ++o)
        for (let u = 0; u < r[1]; ++u)
          for (let l = 0; l < r[2]; ++l)
            i = ie(i, qe(e, [o * s.shape[0], u * s.shape[1], l * s.shape[2]], [s.shape[0], s.shape[1], s.shape[2]]));
    else if (s.rank === 4)
      for (let o = 0; o < r[0]; ++o)
        for (let u = 0; u < r[1]; ++u)
          for (let l = 0; l < r[2]; ++l)
            for (let c = 0; c < r[3]; ++c)
              i = ie(i, qe(e, [o * s.shape[0], u * s.shape[1], l * s.shape[2], c * s.shape[3]], [s.shape[0], s.shape[1], s.shape[2], s.shape[3]]));
    else
      throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);
    return i;
  } };
} };
var wL = { kernelName: mi, gradFunc: (e, t, n) => {
  let s = n, { perm: r } = s, a = eb(r);
  return { x: () => Ge(e, a) };
} };
var kL = { kernelName: Ho, gradFunc: (e, t, n) => {
  let s = n, { axis: r } = s;
  return { value: () => es(e, r) };
} };
var IL = { kernelName: cp, inputsToSave: ["segmentIds"], gradFunc: (e, t) => {
  let [n] = t;
  return { x: () => SL(e, n) };
} };
function SL(e, t) {
  let n = _r(t, je(t)), s = Xu(e, n), r = Xo(t, we(0, "int32")), a = s.rank - r.rank;
  for (let o = 0; o < a; ++o)
    r = Pn(r, o + 1);
  r = Ds(r, Mn(s.shape, "bool"));
  let i = je(s);
  return vn(r, s, i);
}
var CL = { kernelName: qo, gradFunc: (e) => ({ x: () => je(e) }) };
var NL = [s0, Iz, Sz, Cz, Nz, Tz, $z, _z, Az, Ez, Rz, Dz, Pz, Lz, Bz, Vz, Wz, Uz, Gz, Hz, qz, jz, Xz, Kz, Zz, Jz, eM, tM, nM, sM, jM, rM, aM, iM, oM, uM, cM, lM, dM, pM, hM, fM, mM, gM, bM, yM, vM, xM, wM, SM, _x, _x, CM, $M, EM, RM, DM, FM, OM, PM, zM, MM, LM, BM, VM, Ax, Ax, WM, UM, qM, KM, XM, YM, QM, ZM, JM, eL, tL, nL, sL, rL, aL, iL, oL, uL, lL, cL, dL, Ex, Ex, Rx, Rx, pL, fL, hL, mL, gL, bL, yL, vL, xL, wL, kL, IL, CL];
for (let e of NL)
  M$(e);
var TL = {};
Ae(TL, { maxNorm: () => $L, minMaxNorm: () => EL, nonNeg: () => AL, unitNorm: () => _L });
function Fb(e, t) {
  return j(() => cn(ve(V(e, e), t, true)));
}
var Ul = class extends ae.Serializable {
  getConfig() {
    return {};
  }
};
var Ob = class extends Ul {
  constructor(e) {
    super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return j(() => {
      let t = Fb(e, this.axis), n = Vn(t, 0, this.maxValue);
      return V(e, xe(n, ie(Rt(), t)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
};
Ob.className = "MaxNorm";
ae.registerClass(Ob);
var Pb = class extends Ul {
  constructor(e) {
    super(), this.defaultAxis = 0, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return j(() => xe(e, ie(Rt(), Fb(e, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
};
Pb.className = "UnitNorm";
ae.registerClass(Pb);
var zb = class extends Ul {
  apply(e) {
    return Ys(e);
  }
};
zb.className = "NonNeg";
ae.registerClass(zb);
var Mb = class extends Ul {
  constructor(e) {
    super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = e.minValue != null ? e.minValue : this.defaultMinValue, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.rate = e.rate != null ? e.rate : this.defaultRate, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return j(() => {
      let t = Fb(e, this.axis), n = ie(V(this.rate, Vn(t, this.minValue, this.maxValue)), V(1 - this.rate, t));
      return V(e, xe(n, ie(Rt(), t)));
    });
  }
  getConfig() {
    return { minValue: this.minValue, maxValue: this.maxValue, rate: this.rate, axis: this.axis };
  }
};
Mb.className = "MinMaxNorm";
ae.registerClass(Mb);
var Dx = { maxNorm: "MaxNorm", minMaxNorm: "MinMaxNorm", nonNeg: "NonNeg", unitNorm: "UnitNorm" };
function Ot(e) {
  return Ib(e);
}
function Fx(e, t = {}) {
  return Ll(e, ae.SerializationMap.getMap().classNameMap, t, "constraint");
}
function Pt(e) {
  if (e == null)
    return null;
  if (typeof e == "string") {
    let n = { className: e in Dx ? Dx[e] : e, config: {} };
    return Fx(n);
  } else
    return e instanceof Ul ? e : Fx(e);
}
function $L(e) {
  return new Ob(e);
}
function _L(e) {
  return new Pb(e);
}
function AL() {
  return new zb();
}
function EL(e) {
  return new Mb(e);
}
var RL = {};
Ae(RL, { constant: () => OL, glorotNormal: () => WL, glorotUniform: () => VL, heNormal: () => UL, heUniform: () => GL, identity: () => LL, leCunNormal: () => HL, leCunUniform: () => qL, ones: () => FL, orthogonal: () => jL, randomNormal: () => zL, randomUniform: () => PL, truncatedNormal: () => ML, varianceScaling: () => BL, zeros: () => DL });
function DL() {
  return new Nb();
}
function FL() {
  return new _p();
}
function OL(e) {
  return new Tb(e);
}
function PL(e) {
  return new $b(e);
}
function zL(e) {
  return new _b(e);
}
function ML(e) {
  return new Ab(e);
}
function LL(e) {
  return new Eb(e);
}
function BL(e) {
  return new xn(e);
}
function VL(e) {
  return new Ap(e);
}
function WL(e) {
  return new Ep(e);
}
function UL(e) {
  return new Rp(e);
}
function GL(e) {
  return new Dp(e);
}
function HL(e) {
  return new Fp(e);
}
function qL(e) {
  return new Op(e);
}
function jL(e) {
  return new Rb(e);
}
var KL = {};
Ae(KL, { Layer: () => He, RNN: () => Er, RNNCell: () => ql, activation: () => vV, add: () => $V, alphaDropout: () => dW, average: () => _V, averagePooling1d: () => jy, averagePooling2d: () => Ky, averagePooling3d: () => Xy, avgPool1d: () => MV, avgPool2d: () => BV, avgPool3d: () => WV, avgPooling1d: () => LV, avgPooling2d: () => VV, avgPooling3d: () => UV, batchNormalization: () => OV, bidirectional: () => sW, concatenate: () => AV, conv1d: () => cV, conv2d: () => dV, conv2dTranspose: () => pV, conv3d: () => hV, conv3dTranspose: () => fV, convLstm2d: () => JV, convLstm2dCell: () => eW, cropping2D: () => gV, dense: () => xV, depthwiseConv2d: () => yV, dot: () => FV, dropout: () => wV, elu: () => rV, embedding: () => TV, flatten: () => IV, gaussianDropout: () => cW, gaussianNoise: () => lW, globalAveragePooling1d: () => GV, globalAveragePooling2d: () => HV, globalMaxPool1d: () => aW, globalMaxPool2d: () => iW, globalMaxPooling1d: () => Y0, globalMaxPooling2d: () => Q0, gru: () => jV, gruCell: () => KV, input: () => GB, inputLayer: () => sV, layerNormalization: () => PV, leakyReLU: () => iV, lstm: () => XV, lstmCell: () => YV, masking: () => pW, maxPool1d: () => oW, maxPool2d: () => uW, maxPooling1d: () => Z0, maxPooling2d: () => J0, maxPooling3d: () => qV, maximum: () => EV, minimum: () => RV, multiply: () => DV, permute: () => NV, prelu: () => oV, reLU: () => aV, repeatVector: () => SV, reshape: () => CV, rnn: () => tW, separableConv2d: () => mV, simpleRNN: () => QV, simpleRNNCell: () => ZV, softmax: () => uV, spatialDropout1d: () => kV, stackedRNNCells: () => nW, thresholdedReLU: () => lV, timeDistributed: () => rW, upSampling2d: () => bV, zeroPadding2d: () => zV });
async function ar(e) {
  if (e == null)
    return;
  let t = [], n = [], s = [];
  for (let r in e) {
    let a = e[r];
    if (typeof a != "number") {
      let i = a;
      t.push(i.data()), n.push(r), s.push(i);
    }
  }
  if (t.length > 0) {
    let r = await Promise.all(t);
    for (let a = 0; a < r.length; ++a)
      e[n[a]] = r[a][0];
    Re(s);
  }
}
function a0(e) {
  if (e != null)
    for (let t in e) {
      let n = e[t];
      typeof n != "number" && n.dispose();
    }
}
var XL = 125;
var to = class {
  constructor() {
    this.validationData = null;
  }
  setParams(e) {
    this.params = e;
  }
  async onEpochBegin(e, t) {
  }
  async onEpochEnd(e, t) {
  }
  async onBatchBegin(e, t) {
  }
  async onBatchEnd(e, t) {
  }
  async onTrainBegin(e) {
  }
  async onTrainEnd(e) {
  }
  setModel(e) {
  }
};
var YL = class {
  constructor(e, t = 10) {
    e == null && (e = []), this.callbacks = e, this.queueLength = t;
  }
  append(e) {
    this.callbacks.push(e);
  }
  setParams(e) {
    for (let t of this.callbacks)
      t.setParams(e);
  }
  setModel(e) {
    for (let t of this.callbacks)
      t.setModel(e);
  }
  async onEpochBegin(e, t) {
    t == null && (t = {});
    for (let n of this.callbacks)
      await n.onEpochBegin(e, t);
  }
  async onEpochEnd(e, t) {
    t == null && (t = {});
    for (let n of this.callbacks)
      await n.onEpochEnd(e, t);
  }
  async onBatchBegin(e, t) {
    t == null && (t = {});
    for (let n of this.callbacks)
      await n.onBatchBegin(e, t);
  }
  async onBatchEnd(e, t) {
    t == null && (t = {});
    for (let n of this.callbacks)
      await n.onBatchEnd(e, t);
  }
  async onTrainBegin(e) {
    e == null && (e = {});
    for (let t of this.callbacks)
      await t.onTrainBegin(e);
  }
  async onTrainEnd(e) {
    e == null && (e = {});
    for (let t of this.callbacks)
      await t.onTrainEnd(e);
  }
};
var QL = class extends to {
  constructor() {
    super();
  }
  async onEpochBegin(e) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(e, t) {
    t == null && (t = {});
    let n = t.size == null ? 0 : t.size;
    this.seen += n;
    for (let s in t) {
      let r = t[s];
      if (typeof r == "number")
        this.totals.hasOwnProperty(s) || (this.totals[s] = 0), this.totals[s] = this.totals[s] + r * n;
      else {
        let a;
        s in this.totals ? a = this.totals[s] : this.totals[s] = 0;
        let i = j(() => ie(this.totals[s], V(r, n)));
        this.totals[s] = i, a != null && a.dispose();
      }
    }
  }
  async onEpochEnd(e, t) {
    if (t != null)
      for (let n of this.params.metrics)
        this.totals[n] != null && (typeof this.totals[n] == "number" ? t[n] = this.totals[n] / this.seen : j(() => {
          let s = V(xe(1, this.seen), this.totals[n]);
          t[n] = s, this.totals[n].dispose(), Ht(t[n]);
        }));
  }
};
var ZL = class extends to {
  async onTrainBegin(e) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(e, t) {
    t == null && (t = {}), this.epoch.push(e);
    for (let n in t)
      this.history[n] == null && (this.history[n] = []), this.history[n].push(t[n]);
  }
  async syncData() {
    let e = [], t = [], n = [];
    for (let r in this.history) {
      let a = this.history[r];
      for (let i = 0; i < a.length; ++i)
        if (typeof a[i] != "number") {
          let o = a[i];
          e.push(o.data()), t.push(r), n.push(i);
        }
    }
    let s = await Promise.all(e);
    for (let r = 0; r < s.length; ++r)
      this.history[t[r]][n[r]].dispose(), this.history[t[r]][n[r]] = s[r][0];
  }
};
var JL = class extends to {
  constructor(e, t) {
    if (super(), this.currentEpoch = 0, this.nowFunc = e.nowFunc, this.nextFrameFunc = e.nextFrameFunc || BI, this.yieldEvery = t || "auto", this.yieldEvery === "auto" && (this.yieldEvery = XL), this.yieldEvery === "never" && e.onYield != null)
      throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    w.isNumber(this.yieldEvery) && (this.maybeWait = UP(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = e.onTrainBegin, this.trainEnd = e.onTrainEnd, this.epochBegin = e.onEpochBegin, this.epochEnd = e.onEpochEnd, this.batchBegin = e.onBatchBegin, this.batchEnd = e.onBatchEnd, this.yield = e.onYield;
  }
  async maybeWait(e, t, n) {
    let s = [];
    this.yield != null && (await ar(n), s.push(this.yield(e, t, n))), s.push(this.nextFrameFunc()), await Promise.all(s);
  }
  async onEpochBegin(e, t) {
    this.currentEpoch = e, this.epochBegin != null && (await ar(t), await this.epochBegin(e, t));
  }
  async onEpochEnd(e, t) {
    let n = [];
    this.epochEnd != null && (await ar(t), n.push(this.epochEnd(e, t))), this.yieldEvery === "epoch" && n.push(this.nextFrameFunc()), await Promise.all(n);
  }
  async onBatchBegin(e, t) {
    this.batchBegin != null && (await ar(t), await this.batchBegin(e, t));
  }
  async onBatchEnd(e, t) {
    let n = [];
    this.batchEnd != null && (await ar(t), n.push(this.batchEnd(e, t))), this.yieldEvery === "batch" ? n.push(this.nextFrameFunc()) : w.isNumber(this.yieldEvery) && n.push(this.maybeWait(this.currentEpoch, e, t)), await Promise.all(n);
  }
  async onTrainBegin(e) {
    this.trainBegin != null && (await ar(e), await this.trainBegin(e));
  }
  async onTrainEnd(e) {
    this.trainEnd != null && (await ar(e), await this.trainEnd(e));
  }
};
function i0(e, t) {
  return e == null && (e = {}), e instanceof to ? [e] : Array.isArray(e) && e[0] instanceof to ? e : dt(e).map((s) => new JL(s, t));
}
var ks = class {
  constructor() {
  }
  static registerCallbackConstructor(e, t) {
    w.assert(e >= 0 && Number.isInteger(e), () => `Verbosity level is expected to be an integer >= 0, but got ${e}`), ks.checkForDuplicate(t), ks.constructors[e] == null && (ks.constructors[e] = []), ks.constructors[e].push(t);
  }
  static checkForDuplicate(e) {
    for (let t in ks.constructors)
      ks.constructors[+t].forEach((s) => {
        if (s === e)
          throw new U("Duplicate callback constructor.");
      });
  }
  static clear() {
    ks.constructors = {};
  }
  static createCallbacks(e) {
    let t = [];
    for (let n in ks.constructors) {
      let s = +n;
      e >= s && t.push(...ks.constructors[s]);
    }
    return t.map((n) => new n());
  }
};
var Lb = ks;
Lb.constructors = {};
function o0(e, t, n, s, r, a, i, o, u) {
  let l = new ZL(), c = [new QL(), ...Lb.createCallbacks(t)];
  e != null && c.push(...e), c.push(l);
  let p = new YL(c);
  return p.setParams({ epochs: n, initialEpoch: s, samples: r, steps: a, batchSize: i, verbose: t, doValidation: o, metrics: u }), { callbackList: p, history: l };
}
function ms(e, t = {}, n = false) {
  return Ll(e, ae.SerializationMap.getMap().classNameMap, t, "layer", n);
}
function $d(e, t) {
  return j(() => {
    e.dtype !== "float32" && (e = ce(e, "float32"));
    let n = ve(Vl(e), t, true), s = Pl(n.shape, Rt()), r = cn(_r(n, s));
    return xe(e, r);
  });
}
function vi(e, t) {
  return j(() => St(Vl(ge(t, e)), -1));
}
function zp(e, t) {
  return j(() => St(Mt(ge(t, e)), -1));
}
function Jo(e, t) {
  return j(() => {
    let n = ge(e, t), s = Vn(Mt(e), Rt(), Number.MAX_VALUE), r = Mt(xe(n, s));
    return V(100, St(r, -1));
  });
}
function eB(e, t) {
  return j(() => {
    let n = Vn(t, Rt(), Number.MAX_VALUE), s = Qn(ie(1, n)), r = Vn(e, Rt(), Number.MAX_VALUE), a = Qn(ie(1, r));
    return St(Vl(ge(s, a)), -1);
  });
}
function tB(e, t) {
  return j(() => {
    let n = _r(0, ge(1, V(e, t)));
    return St(Vl(n), -1);
  });
}
function nB(e, t) {
  return j(() => {
    let n = _r(0, ge(1, V(e, t)));
    return St(n, -1);
  });
}
function sB(e, t) {
  return j(() => {
    let n = ve(V(e, t), -1), s = As(V(ge(1, e), t), -1);
    return _r(0, ie(1, ge(s, n)));
  });
}
function rB(e, t) {
  return j(() => {
    let n = Math.log(2), s = ge(t, e), r = ge(ie(s, zl(V(-2, s))), n);
    return St(r, -1);
  });
}
function Zu(e, t, n = false) {
  return j(() => {
    if (n)
      t = cb(t);
    else {
      let s = ve(t, t.shape.length - 1, true);
      t = xe(t, s);
    }
    return t = Vn(t, Rt(), 1 - Rt()), kt(ve(V(ce(e, "float32"), Qn(t)), t.shape.length - 1));
  });
}
function _d(e, t, n = false) {
  return j(() => {
    let s = ce(bp(tz(e)), "int32");
    t = Vn(t, Rt(), 1 - Rt());
    let r = t.shape, a = G(vd(s, r[r.length - 1]), r);
    return Zu(a, t, n);
  });
}
function aB(e, t) {
  if (!w.arraysEqual(e.shape, t.shape))
    throw new U(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);
  return j(() => {
    let n = Ys(t), s = kt(Mt(t));
    return ie(ge(n, V(t, e)), Zg(Yn(s)));
  });
}
function Mp(e, t) {
  return j(() => {
    let n;
    return n = Vn(t, Rt(), 1 - Rt()), n = Qn(xe(n, ge(1, n))), St(aB(e, n), -1);
  });
}
function iB(e, t) {
  return j(() => {
    let n = Vn(e, Rt(), 1), s = Vn(t, Rt(), 1);
    return ve(V(e, Qn(xe(n, s))), -1);
  });
}
function oB(e, t) {
  return j(() => {
    let n = Qn(ie(Rt(), t));
    return St(ge(t, V(e, n)), -1);
  });
}
function Bb(e, t) {
  return j(() => {
    let n = $d(e, -1), s = $d(t, -1), r = V(n, s);
    return kt(ve(r, -1));
  });
}
var Ad = { meanSquaredError: vi, meanAbsoluteError: zp, meanAbsolutePercentageError: Jo, meanSquaredLogarithmicError: eB, squaredHinge: tB, hinge: nB, categoricalHinge: sB, logcosh: rB, categoricalCrossentropy: Zu, sparseCategoricalCrossentropy: _d, binaryCrossentropy: Mp, kullbackLeiblerDivergence: iB, poisson: oB, cosineProximity: Bb };
function Gf(e) {
  if (typeof e == "string") {
    if (e in Ad)
      return Ad[e];
    let t = `Unknown loss ${e}`;
    throw e.toLowerCase().includes("softmaxcrossentropy") && (t = `Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new U(t);
  } else
    return e;
}
function Vb(e, t) {
  return j(() => {
    let n = V(0.5, Zn(t)), s = Tp(Un(t, n), e.dtype);
    return St(Xn(e, s), -1);
  });
}
function Wb(e, t) {
  return j(() => Tp(Xn(qu(e, -1), qu(t, -1)), "float32"));
}
function u0(e, t) {
  return j(() => ce(ve(Ds(Xn(e, 1), Xn(t, 1))), "float32"));
}
function uB(e, t) {
  return j(() => ce(ve(Ds(Xn(e, 1), Xn(t, 0))), "float32"));
}
function lB(e, t) {
  return j(() => ce(ve(Ds(Xn(e, 0), Xn(t, 1))), "float32"));
}
function l0(e, t) {
  return j(() => {
    let n = u0(e, t), s = lB(e, t), r = ie(n, s);
    return ce(vn(Un(r, 0), xe(n, r), 0), "float32");
  });
}
function cB(e, t) {
  return j(() => {
    let n = u0(e, t), s = uB(e, t), r = ie(n, s);
    return ce(vn(Un(r, 0), xe(n, r), 0), "float32");
  });
}
function c0(e, t) {
  return Mp(e, t);
}
function d0(e, t) {
  return e.rank === t.rank && (e = gr(e, [e.rank - 1])), t = qu(t, -1), t.dtype !== e.dtype && (t = ce(t, e.dtype)), ce(Xn(e, t), "float32");
}
var dB = vi;
var pB = vi;
var hB = zp;
var fB = zp;
var mB = Jo;
var gB = Jo;
var Ub = Zu;
var bB = Bb;
var p0 = _d;
var Ed = { binaryAccuracy: Vb, categoricalAccuracy: Wb, precision: l0, categoricalCrossentropy: Ub, sparseCategoricalCrossentropy: p0, mse: dB, MSE: pB, mae: hB, MAE: fB, mape: mB, MAPE: gB, cosine: bB };
function yB(e) {
  if (typeof e == "string" && e in Ed)
    return Ed[e];
  if (typeof e != "string" && e != null)
    return e;
  throw new U(`Unknown metric ${e}`);
}
function qc(e) {
  if (Cs(e !== null, `Unknown LossOrMetricFn ${e}`), typeof e == "string")
    return e;
  {
    let t;
    for (let n of Object.keys(Ad))
      if (Ad[n] === e) {
        t = n;
        break;
      }
    if (t !== void 0)
      return t;
    for (let n of Object.keys(Ed))
      if (Ed[n] === e) {
        t = n;
        break;
      }
    return t !== void 0 ? t : e.name;
  }
}
function vB(e) {
  let t = { Adagrad: () => Mi.adagrad(0.01), Adadelta: () => Mi.adadelta(1, 0.95, Rt()), Adam: () => Mi.adam(1e-3, 0.9, 0.999, Rt()), Adamax: () => Mi.adamax(2e-3, 0.9, 0.999, Rt(), 0), RMSProp: () => Mi.rmsprop(1e-3, 0.9, 0, Rt()), SGD: () => Mi.sgd(0.01) };
  if (t.adagrad = t.Adagrad, t.adadelta = t.Adadelta, t.adam = t.Adam, t.adamax = t.Adamax, t.rmsprop = t.RMSProp, t.sgd = t.SGD, e in t)
    return t[e]();
  throw new U(`Unknown Optimizer ${e}`);
}
var Ox = 1 * 1024 * 1024;
function Px(e, t, n = false) {
  if (e == null || typeof e != "object" || Object.getPrototypeOf(e) !== Object.prototype || !km(e))
    throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (n) {
    let s = JSON.stringify(e);
    s.length > Ox && console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${Ox}.`);
  }
}
function km(e) {
  if (e === null)
    return true;
  if (typeof e == "object")
    if (Object.getPrototypeOf(e) === Object.prototype) {
      let t = Object.keys(e);
      for (let n of t)
        if (typeof n != "string" || !km(e[n]))
          return false;
      return true;
    } else if (Array.isArray(e)) {
      for (let t of e)
        if (!km(t))
          return false;
      return true;
    } else
      return false;
  else {
    let t = typeof e;
    return t === "string" || t === "number" || t === "boolean";
  }
}
function xB(e, t, n, s = console.log) {
  let r = kB(e), a = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
  r ? (t = t || 90, n = n || [0.32, 0.61, 0.89, 1]) : (t = t || 115, n = n || [0.24, 0.48, 0.7, 0.8, 1]), n[n.length - 1] <= 1 && (n = n.map((c) => Math.floor(t * c)));
  let i;
  if (!r) {
    a.push("Receives inputs"), i = [];
    for (let c in e.nodesByDepth)
      i.push(...e.nodesByDepth[c]);
  }
  s("_".repeat(t)), Rd(a, n, s), s("=".repeat(t));
  let o = e.layers;
  for (let c = 0; c < o.length; ++c)
    r ? IB(o[c], n, s) : SB(o[c], n, i, s), s((c === o.length - 1 ? "=" : "_").repeat(t));
  e.checkTrainableWeightsConsistency();
  let u = wB(e), l = Cd(e.nonTrainableWeights);
  s(`Total params: ${u + l}`), s(`Trainable params: ${u}`), s(`Non-trainable params: ${l}`), s("_".repeat(t));
}
function wB(e) {
  let t;
  return e.collectedTrainableWeights != null ? t = Cd(e.collectedTrainableWeights) : t = Cd(e.trainableWeights), t;
}
function kB(e) {
  let t = true, n = [], s = [];
  for (let r in e.nodesByDepth)
    n.push(e.nodesByDepth[r]);
  for (let r of n) {
    if (r.length > 1 || r.length === 1 && r[0].inboundLayers.length > 1) {
      t = false;
      break;
    }
    s.push(...r);
  }
  if (t)
    for (let r of e.layers) {
      let a = false;
      for (let i of r.inboundNodes)
        if (s.indexOf(i) !== -1)
          if (a) {
            t = false;
            break;
          } else
            a = true;
      if (!t)
        break;
    }
  return t;
}
function Rd(e, t, n = console.log) {
  let s = "";
  for (let r = 0; r < e.length; ++r)
    r > 0 && (s = s.slice(0, s.length - 1) + " "), s += e[r], s = s.slice(0, t[r]), s += " ".repeat(t[r] - s.length);
  n(s);
}
function IB(e, t, n) {
  let s, r;
  try {
    r = e.inboundNodes.map((u) => JSON.stringify(u.inputShapes)).join(",");
  } catch (u) {
    r = "multiple";
  }
  try {
    s = JSON.stringify(e.outputShape);
  } catch (u) {
    s = "multiple";
  }
  let a = e.name, i = e.getClassName(), o = [`${a} (${i})`, r, s, e.countParams().toString()];
  Rd(o, t, n);
}
function SB(e, t, n, s) {
  let r, a;
  try {
    a = e.inboundNodes.map((p) => JSON.stringify(p.inputShapes)).join(",");
  } catch (p) {
    a = "multiple";
  }
  try {
    r = JSON.stringify(e.outputShape);
  } catch (p) {
    r = "multiple";
  }
  let i = [];
  for (let p of e.inboundNodes)
    if (!(n != null && n.length > 0 && n.indexOf(p) === -1))
      for (let d = 0; d < p.inboundLayers.length; ++d) {
        let h = p.inboundLayers[d].name, f = p.nodeIndices[d], m = p.tensorIndices[d];
        i.push(`${h}[${f}][${m}]`);
      }
  let o = e.name, u = e.getClassName(), l = i.length === 0 ? "" : i[0], c = [`${o} (${u})`, a, r, e.countParams().toString(), l];
  Rd(c, t, s);
  for (let p = 1; p < i.length; ++p)
    Rd(["", "", "", "", i[p]], t, s);
}
function h0(e, t, n) {
  return (e === "inboundNodes" || e === "outputLayers" || e === "inputLayers") && t === 0 && typeof n == "string";
}
function Ju(e, t) {
  if (e === null)
    return null;
  if (typeof e == "string")
    return Xr(e);
  if (typeof e == "number" || typeof e == "boolean")
    return e;
  if (e instanceof Array) {
    let n = [], s = e.length;
    for (let r = 0; r < s; ++r) {
      let a = e[r];
      h0(t, r, a) ? n.push(a) : n.push(Ju(a, t));
    }
    return n;
  } else {
    let n = {};
    for (let s of Object.keys(e)) {
      let r = e[s];
      if (s === "name" && typeof r == "string")
        n[s] = r;
      else {
        let a = Xr(s);
        n[a] = Ju(r, a);
      }
    }
    return n;
  }
}
function Im(e, t) {
  if (e == null)
    return null;
  if (typeof e == "string")
    return Ws(e);
  if (typeof e == "number" || typeof e == "boolean")
    return e;
  if (e instanceof Array) {
    let n = [], s = e.length;
    for (let r = 0; r < s; ++r) {
      let a = e[r];
      h0(t, r, a) ? n.push(a) : n.push(Im(a, t));
    }
    return n;
  } else {
    let n = {};
    for (let s of Object.keys(e)) {
      let r = e[s], a = Ws(s);
      (s === "name" || s === "className") && typeof r == "string" ? n[a] = r : n[a] = Im(r, s);
    }
    return n;
  }
}
var f0 = "0.0.0";
var Is = class extends He {
  constructor(e) {
    if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = e.name, this.name == null) {
      let b = this.getClassName().toLowerCase();
      this.name = Np(b);
    }
    if (this.supportsMasking = false, this.trainable_ = true, Array.isArray(e.inputs) ? this.inputs = e.inputs.slice() : this.inputs = [e.inputs], Array.isArray(e.outputs) ? this.outputs = e.outputs.slice() : this.outputs = [e.outputs], dr(this.inputs).length !== this.inputs.length)
      throw new U(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((b) => b.name)}`);
    dr(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((b) => b.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (let b of this.outputs) {
      let y = b.sourceLayer, v = b.nodeIndex, x = b.tensorIndex;
      this.outputLayers.push(y), this.outputLayersNodeIndices.push(v), this.outputLayersTensorIndices.push(x);
    }
    for (let b of this.inputs) {
      let y = b.sourceLayer, v = b.nodeIndex, x = b.tensorIndex;
      Cs(v === 0, "input layer has >1 nodes"), Cs(x === 0, "input layer has >1 tensors"), this.inputLayers.push(y), this.inputLayersNodeIndices.push(v), this.inputLayersTensorIndices.push(x);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let b = 0; b < this.inputLayers.length; b++) {
      let y = this.inputLayers[b];
      if (!(y instanceof Zo))
        throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${b} (0-based) originates from layer type ${y.getClassName()}.`);
      this.inputNames.push(y.name), this.feedInputShapes.push(y.batchInputShape), this.feedInputNames.push(y.name);
    }
    for (let b of this.outputLayers)
      this.outputNames.push(b.name);
    this.internalInputShapes = this.inputs.map((b) => b.shape), this.internalOutputShapes = this.outputs.map((b) => b.shape);
    let t = {}, n = {}, s = {}, r = {}, a = {}, i = [], o = (b, y, v, x, k, S) => {
      (x == null || k == null || S == null) && (x = b.sourceLayer, k = b.nodeIndex, S = b.tensorIndex);
      let $ = x.inboundNodes[k];
      if (v.indexOf($) !== -1)
        throw new hs(`The tensor ${b.name} at layer "${x.name}" is part of a cycle.`);
      if (y.indexOf($) !== -1)
        return;
      this.containerNodes.add(Is.nodeKey(x, k)), x.id in a || (a[x.id] = Object.keys(a).length), v.indexOf($) === -1 && v.push($);
      let E = $.inboundLayers.length;
      for (let A = 0; A < E; A++) {
        let P = $.inputTensors[A], R = $.inboundLayers[A], F = $.nodeIndices[A], T = $.tensorIndices[A];
        o(P, y, v, R, F, T);
      }
      for (y.push($); v.indexOf($) >= 0; )
        v.splice(v.indexOf($), 1);
      i.push($);
    }, u = [], l = [];
    for (let b of this.outputs)
      o(b, u, l);
    let c = i.slice().reverse();
    for (let b of c) {
      n[b.id] = b, b.id in t || (t[b.id] = 0);
      let y = t[b.id], v = s[b.outboundLayer.id] == null ? 0 : s[b.outboundLayer.id];
      y = Math.max(y, v), s[b.outboundLayer.id] = y, r[b.outboundLayer.id] = b.outboundLayer, t[b.id] = y;
      for (let x = 0; x < b.inboundLayers.length; x++) {
        let k = b.inboundLayers[x], S = b.nodeIndices[x], $ = k.inboundNodes[S], E = t[$.id] == null ? 0 : t[$.id];
        t[$.id] = Math.max(y + 1, E), n[$.id] = $;
      }
    }
    let p = {};
    for (let b in t) {
      let y = t[b];
      y in p || (p[y] = []), p[y].push(n[b]);
    }
    let d = {};
    for (let b in s) {
      let y = s[b];
      y in d || (d[y] = []), d[y].push(r[b]);
    }
    let h = Object.keys(d).map((b) => parseInt(b, 10)).sort(Uc);
    this.layers = [];
    for (let b of h) {
      let y = d[b];
      y.sort((v, x) => {
        let k = a[v.id], S = a[x.id];
        return k < S ? -1 : k > S ? 1 : 0;
      });
      for (let v of y)
        v instanceof Is && this.internalContainerRefs.push(v), this.layers.push(v);
    }
    this.layersByDepth = d, h = Object.keys(p).map((b) => parseInt(b, 10)).sort(Uc);
    let f = this.inputs.slice(), m = [];
    for (let b of h)
      for (let y of p[b]) {
        let v = y.outboundLayer;
        if (v != null) {
          for (let x of y.inputTensors)
            if (f.indexOf(x) === -1)
              throw new hs(`Graph disconnected: cannot obtain value for tensor ${x} at layer "${v.name}". The following previous layers were accessed without issue: ${m}`);
          for (let x of y.outputTensors)
            f.push(x);
          m.push(v.name);
        }
      }
    this.nodesByDepth = p;
    let g = this.layers.map((b) => b.name);
    for (let b of g) {
      let y = g.filter((v) => v === b).length;
      if (y !== 1)
        throw new hs(`The name "${b}" is used ${y} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(g));
    }
    this.outboundNodes = [], this.inboundNodes = [], new Pp({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: this.inputs.map((b) => null), outputMasks: this.outputs.map((b) => null), inputShapes: this.inputs.map((b) => b.shape), outputShapes: this.outputs.map((b) => b.shape) }), this.built = true, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Container '${this.name}' is already disposed.`);
  }
  dispose() {
    this.assertNotDisposed();
    let e = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount === 0) {
      for (let t of this.layers)
        e.numDisposedVariables += t.dispose().numDisposedVariables;
      for (let t of this.internalContainerRefs)
        e.numDisposedVariables += t.dispose().numDisposedVariables;
    }
    return e.refCountAfterDispose = this._refCount, e;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this.layers.forEach((t) => {
      t._trainableWeights.forEach((n) => n.trainable = e);
    }), this.trainable_ = e;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0)
      throw new U("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable)
      return [];
    let e = [];
    for (let t of this.layers)
      e = e.concat(t.trainableWeights);
    return e;
  }
  get nonTrainableWeights() {
    let e = [];
    for (let t of this.layers)
      e.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      let t = [];
      for (let n of this.layers)
        t.push(...n.trainableWeights);
      return t.concat(e);
    }
    return e;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  loadWeights(e, t = true) {
    let n = {}, s = 0;
    for (let a of this.layers)
      for (let i of a.weights) {
        if (n[i.originalName] != null)
          throw new U(`Duplicate weight name: ${i.originalName}`);
        n[i.originalName] = i, s++;
      }
    let r = [];
    for (let a in e) {
      let i = a;
      if (n[a] == null) {
        let o = a.split("/");
        i = o.slice(0, -2).concat([o[o.length - 1]]).join("/");
      }
      if (n[i] != null)
        r.push([n[i], e[a]]);
      else if (t)
        throw new U(`Provided weight data has no target variable: ${a}`);
      delete n[i];
    }
    if (t) {
      let a = [];
      for (let i in n)
        a.push(i);
      if (a.length > 0)
        throw new U(`${a.length} of ${s} weights are not set: ${a}`);
    }
    Db(r);
  }
  updatedConfig() {
    let e = this.getConfig(), t = {};
    return t.className = this.getClassName(), t.config = e, t.kerasVersion = `tfjs-layers ${f0}`, t.backend = "TensorFlow.js", t;
  }
  toJSON(e, t = true) {
    let n = Im(this.updatedConfig());
    return t ? JSON.stringify(n) : n;
  }
  call(e, t) {
    return j(() => {
      e = dt(e);
      let n = new Zr();
      for (let s = 0; s < this.inputs.length; ++s)
        n.add(this.inputs[s], e[s]);
      return Eu(this.outputs, n, t);
    });
  }
  computeMask(e, t) {
    return j(() => {
      e = dt(e);
      let n;
      return t == null ? n = ma(null, e.length) : n = dt(t), this.runInternalGraph(e, n)[1];
    });
  }
  computeOutputShape(e) {
    let t = Sd(e);
    if (t.length !== this.inputLayers.length)
      throw new U(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);
    let n = {};
    for (let i = 0; i < t.length; i++) {
      let o = this.inputLayers[i], u = t[i], l = o.name + "_0_0";
      n[l] = u;
    }
    let s = Object.keys(this.nodesByDepth).map((i) => parseInt(i, 10)).sort(Uc);
    if (s.length > 1)
      for (let i of s) {
        let o = this.nodesByDepth[i];
        for (let u of o) {
          let l = u.outboundLayer;
          if (this.inputLayers.map((f) => f.id).indexOf(l.id) !== -1)
            continue;
          let c = [];
          for (let f = 0; f < u.inboundLayers.length; f++) {
            let m = u.inboundLayers[f], g = u.nodeIndices[f], b = u.tensorIndices[f], y = `${m.name}_${g}_${b}`, v = n[y];
            c.push(v);
          }
          let p = l.computeOutputShape(bn(c)), d = Sd(p), h = l.inboundNodes.indexOf(u);
          for (let f = 0; f < d.length; f++) {
            let m = `${l.name}_${h}_${f}`;
            n[m] = d[f];
          }
        }
      }
    let r = [], a = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      let o = this.outputLayers[i], u = this.outputLayersNodeIndices[i], l = this.outputLayersTensorIndices[i], c = `${o.name}_${u}_${l}`;
      a.push(c);
    }
    for (let i = 0; i < a.length; i++) {
      let o = a[i];
      Cs(o in n), r.push(n[o]);
    }
    return bn(r);
  }
  runInternalGraph(e, t) {
    t == null && (t = ma(null, e.length));
    let n = {};
    for (let o = 0; o < this.inputs.length; ++o) {
      let u = this.inputs[o], l = e[o], c = t[o];
      n[u.id] = [l, c];
    }
    let s = Object.keys(this.nodesByDepth).map((o) => parseInt(o, 10)).sort(Uc);
    for (let o of s) {
      let u = this.nodesByDepth[o];
      for (let l of u) {
        let c = l.outboundLayer, p = l.inputTensors, d = l.outputTensors, h = new Array();
        for (let f of p)
          f.id in n && h.push(n[f.id]);
        if (h.length === p.length) {
          let f = {}, m, g, b, y;
          if (l.callArgs != null && (f = l.callArgs), h.length === 1) {
            let [v, x] = h[0];
            f.mask == null && (f.mask = x), b = dt(c.call(v, f)), y = dt(c.computeMask(v, x)), m = [v], g = [x];
          } else
            m = h.map((v) => v[0]), g = h.map((v) => v[1]), f.mask == null && (f.mask = g), b = dt(c.call(m, f)), y = dt(c.computeMask(m, g));
          if (c.activityRegularizer)
            throw new Fe("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let v = 0; v < d.length; ++v) {
            let x = d[v], k = b[v], S = y[v];
            n[x.id] = [k, S];
          }
        }
      }
    }
    let r = [], a = [], i = [];
    for (let o of this.outputs) {
      Cs(o.id in n, `Could not compute output ${o.name} : ${o.id}`);
      let [u, l] = n[o.id];
      i.push(u.shape), r.push(u), a.push(l);
    }
    return [r, a, i];
  }
  buildNodeConversionMap(e) {
    let t = {}, n;
    for (let s of this.layers) {
      n = s instanceof Is ? 1 : 0;
      for (let r = 0; r < s.inboundNodes.length; r++) {
        let a = Is.nodeKey(s, r);
        this.containerNodes.has(a) && (t[a] = n, n += 1);
      }
    }
    return t;
  }
  getLayer(e, t) {
    if (t != null) {
      if (this.layers.length <= t)
        throw new U(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);
      return this.layers[t];
    } else if (e == null)
      throw new U("Provide either a layer name or layer index");
    for (let n of this.layers)
      if (n.name === e)
        return n;
    throw new U(`No such layer: ${e}`);
  }
  calculateLosses() {
    return j(() => {
      let e = [];
      for (let t of this.layers)
        for (let n = 0; n < t.inboundNodes.length; ++n) {
          let s = Is.nodeKey(t, n);
          this.containerNodes.has(s) && e.push(...t.calculateLosses());
        }
      return e;
    });
  }
  getConfig() {
    let e = { name: this.name }, t = this.buildNodeConversionMap(this.layers), n = [];
    for (let a of this.layers) {
      let i = a.getClassName(), o = a.getConfig(), u = [];
      for (let c = 0; c < a.inboundNodes.length; c++) {
        let p = a.inboundNodes[c], d = Is.nodeKey(a, c), h = {};
        if (this.containerNodes.has(d)) {
          if (p.callArgs)
            try {
              JSON.stringify(p.callArgs), h = p.callArgs;
            } catch (f) {
              console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${p.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), h = {};
            }
          if (p.inboundLayers.length > 0) {
            let f = [];
            for (let m = 0; m < p.inboundLayers.length; m++) {
              let g = p.inboundLayers[m], b = p.nodeIndices[m], y = p.tensorIndices[m], v = Is.nodeKey(g, b), x = t[v];
              x == null && (x = 0), f.push([g.name, x, y, h]);
            }
            u.push(f);
          }
        }
      }
      let l = {};
      l.name = a.name, l.className = i, l.config = o, l.inboundNodes = u, n.push(l);
    }
    e.layers = n;
    let s = [];
    for (let a = 0; a < this.inputLayers.length; a++) {
      let i = this.inputLayers[a], o = this.inputLayersNodeIndices[a], u = Is.nodeKey(i, o);
      if (!this.containerNodes.has(u))
        continue;
      let l = t[u];
      l == null && (l = 0);
      let c = this.inputLayersTensorIndices[a];
      s.push([i.name, l, c]);
    }
    e.inputLayers = s;
    let r = [];
    for (let a = 0; a < this.outputLayers.length; a++) {
      let i = this.outputLayers[a], o = this.outputLayersNodeIndices[a], u = Is.nodeKey(i, o);
      if (!this.containerNodes.has(u))
        continue;
      let l = t[u];
      l == null && (l = 0);
      let c = this.outputLayersTensorIndices[a];
      r.push([i.name, l, c]);
    }
    return e.outputLayers = r, e;
  }
  static fromConfig(e, t, n = {}, s = false) {
    let r = {}, a = {};
    function i(m, g) {
      m.name in a ? a[m.name].push(g) : a[m.name] = [g];
    }
    function o(m, g) {
      let b = [], y;
      for (let v of g) {
        let x = v[0], k = v[1], S = v[2];
        if (y = v[3] == null ? {} : v[3], !(x in r)) {
          i(m, g);
          return;
        }
        let $ = r[x];
        if ($.inboundNodes.length <= k) {
          i(m, g);
          return;
        }
        let E = $.inboundNodes[k];
        b.push(E.outputTensors[S]);
      }
      b.length > 0 && m.apply(bn(b), y);
    }
    function u(m) {
      let g = m.name, b = ms(m, t.customObjects != null ? t.customObjects : {});
      b.setFastWeightInitDuringBuild(s), r[g] = b, m.inboundNodes.forEach((v) => {
        if (!(v instanceof Array))
          throw new U(`Corrupted configuration, expected array for nodeData: ${v}`);
        i(b, v);
      });
    }
    let l = t.name, c = t.layers;
    for (let m of c)
      u(m);
    for (; !WP(a); )
      for (let m of c) {
        let g = r[m.name];
        if (g.name in a) {
          let b = a[g.name];
          delete a[g.name];
          for (let y of b)
            o(g, y);
        }
      }
    let p = [], d = [], h = t.inputLayers;
    for (let m of h) {
      let g = m[0], b = m[1], y = m[2];
      Cs(g in r);
      let x = r[g].inboundNodes[b].outputTensors;
      p.push(x[y]);
    }
    let f = t.outputLayers;
    for (let m of f) {
      let g = m[0], b = m[1], y = m[2];
      Cs(g in r);
      let x = r[g].inboundNodes[b].outputTensors;
      d.push(x[y]);
    }
    return new e({ inputs: p, outputs: d, name: l });
  }
  get stateful() {
    if (this._stateful)
      throw new U("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (let e of this.layers)
      if (e.stateful)
        return true;
    return false;
  }
  resetStates() {
    j(() => {
      this.layers.forEach((e) => {
        e.stateful && e.resetStates();
      });
    });
  }
};
function CB(e, t, n) {
  let s = t.length;
  if (e == null || Array.isArray(e) && e.length === 0)
    return t.map((r) => null);
  if (s === 1)
    return Array.isArray(e) && e.length === 1 ? e : typeof e == "object" && t[0] in e ? [e[t[0]]] : [e];
  if (Array.isArray(e)) {
    if (e.length !== s)
      throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);
    return e;
  } else if (typeof e == "object" && Object.keys(e).length > 0 && typeof e[Object.keys(e)[0]] == "object") {
    let r = [];
    return t.forEach((a) => {
      a in e ? r.push(e[a]) : r.push(null);
    }), r;
  } else
    throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`);
}
function m0(e, t) {
  return CB(e, t, "classWeight");
}
async function g0(e, t, n, s) {
  if (t != null || s != null)
    throw new Error("Support sampleWeight is not implemented yet");
  if (n != null) {
    let r = j(() => {
      if (e.shape.length === 1)
        return cr(e);
      if (e.shape.length === 2) {
        if (e.shape[1] > 1)
          return qu(e, 1);
        if (e.shape[1] === 1)
          return G(e, [e.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      } else
        throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), a = Array.from(await r.data());
    Re(r);
    let i = [];
    return a.forEach((o) => {
      if (n[o] == null)
        throw new Error(`classWeight must contain all classes in the training data. The class ${o} exists in the data but not in classWeight`);
      i.push(n[o]);
    }), Qt(i, "float32");
  } else
    return null;
}
function NB(e, t) {
  return V(e, t);
}
var TB = 32;
function b0(e, t) {
  let n, s, r = t;
  n = r.xs, s = r.ys, w.assert(n != null && s != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);
  let a = zx("input", e.inputNames, n), i = zx("output", e.outputNames, s), o = a[0].shape[0];
  w.assert(a.length === e.inputs.length, () => `LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`), w.assert(i.length === e.outputs.length, () => `LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`);
  for (let u = 0; u < a.length; u++)
    w.assert(a[u].shape[0] === o, () => `Batch size mismatch: input ${e.inputNames[u]} has ${a[u].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);
  for (let u = 0; u < i.length; u++)
    w.assert(i[u].shape[0] === o, () => `Batch size mismatch: output ${e.outputNames[u]} has ${i[u].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);
  return { xs: a, ys: i };
}
function zx(e, t, n) {
  if (n instanceof et)
    return [n];
  if (Array.isArray(n))
    return w.assert(n.length === t.length, () => `Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`), n;
  {
    let s = [];
    for (let r of t) {
      if (n[r] == null)
        throw new U(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);
      s.push(n[r]);
    }
    return s;
  }
}
function $B(e) {
  if (e.length === 3)
    throw new Fe("Validation with sample weights is not implemented yet.");
  return { xs: e[0], ys: e[1] };
}
async function _B(e, t, n) {
  let s = n.batchesPerEpoch != null;
  if (w.assert(e.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), w.assert(n != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), w.assert(n.epochs != null && n.epochs > 0 && Number.isInteger(n.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`), w.assert(!s || n.batchesPerEpoch > 0 && Number.isInteger(n.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`), w.assert(n.validationSplit == null, () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."), e.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  e.isTraining = true;
  try {
    let r = n.validationData != null, a, i;
    if (r)
      if (Mx(n.validationData))
        w.assert(n.validationBatches == null || n.validationBatches > 0 && Number.isInteger(n.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`);
      else {
        let g = $B(n.validationData);
        a = g.xs, i = g.ys;
      }
    let o = e.makeTrainFunction(), u = e.getDedupedMetricsNames(), l;
    r ? l = u.slice().concat(u.map((g) => "val_" + g)) : l = u.slice();
    let c = i0(n.callbacks, n.yieldEvery), p = n.verbose == null ? 1 : n.verbose, { callbackList: d, history: h } = o0(c, p, n.epochs, null, null, AB(t, n), null, r, l);
    d.setModel(e), e.history = h, await d.onTrainBegin(), e.stopTraining_ = false;
    let f = n.initialEpoch == null ? 0 : n.initialEpoch, m = await t.iterator();
    for (; f < n.epochs; ) {
      let g = {};
      await d.onEpochBegin(f);
      let b = 0, y = 0;
      for (s || (m = await t.iterator()); !s || b < n.batchesPerEpoch; ) {
        let v = await m.next();
        if (s && v.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${b} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${n.batchesPerEpoch * n.epochs} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
        if (v.value != null) {
          let { xs: x, ys: k } = b0(e, v.value), S = {};
          S.batch = y, S.size = x[0].shape[0], await d.onBatchBegin(y, S);
          let $ = [];
          if (n.classWeight != null) {
            let P = m0(n.classWeight, e.outputNames);
            for (let R = 0; R < P.length; ++R)
              $.push(await g0(k[R], null, P[R]));
          }
          let E = x.concat(k).concat($), A = o(E);
          Re(E);
          for (let P = 0; P < u.length; ++P) {
            let R = u[P], F = A[P];
            S[R] = F, Ht(F);
          }
          await d.onBatchEnd(y, S), a0(S), y++, b++;
        }
        if (s ? b >= n.batchesPerEpoch : v.done) {
          if (r) {
            let x;
            Mx(n.validationData) ? x = dt(await e.evaluateDataset(n.validationData, { batches: n.validationBatches })) : x = dt(e.evaluate(a, i, { batchSize: n.validationBatchSize == null ? TB : n.validationBatchSize, verbose: 0 }));
            for (let k = 0; k < e.metricsNames.length; ++k)
              g[`val_${e.metricsNames[k]}`] = x[k];
          }
          break;
        }
        if (e.stopTraining_)
          break;
      }
      if (await d.onEpochEnd(f, g), f++, e.stopTraining_)
        break;
    }
    return await d.onTrainEnd(), await e.history.syncData(), e.history;
  } finally {
    e.isTraining = false;
  }
}
function AB(e, t) {
  let n = null;
  return t.batchesPerEpoch != null ? n = t.batchesPerEpoch : Number.isFinite(e.size) && (n = e.size), n;
}
function Mx(e) {
  return typeof e.iterator == "function";
}
function EB(e) {
  return typeof e.next == "function";
}
async function RB(e, t, n) {
  n = n || {};
  let s = n.batches != null, r = e.testFunction, a = [];
  if (n.verbose > 0)
    throw new Fe("Verbose mode is not implemented yet.");
  w.assert(!s || n.batches > 0 && Number.isInteger(n.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`);
  let i = EB(t) ? t : await t.iterator(), o = 0, u = 0;
  for (; !s || u < n.batches; ) {
    let l = await i.next();
    if (a = j(() => {
      if (l.value) {
        let { xs: c, ys: p } = b0(e, l.value), d = c.concat(p), h = j(() => r(d));
        if (Re(d), u === 0)
          for (let m = 0; m < h.length; ++m)
            a.push(we(0));
        let f = d[0].shape[0];
        for (let m = 0; m < h.length; ++m) {
          let g = h[m], b = a[m];
          a[m] = j(() => ie(a[m], V(f, g))), u > 0 && Re(b);
        }
        Re(h), o += f, ++u;
      }
      return a;
    }), l.done) {
      s && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);
      break;
    }
  }
  for (let l = 0; l < a.length; ++l) {
    let c = a[l];
    a[l] = xe(a[l], o), Re(c);
  }
  return bn(a);
}
function Sm(e) {
  w.assert(e > 0 && Number.isInteger(e), () => `batchSize is required to be a positive integer, but got ${e}`);
}
function Ru(e, t, n) {
  return e == null ? [null] : Array.isArray(e) ? e.map((s) => na(s, t, n - t)) : na(e, t, n - t);
}
function Gb(e, t) {
  return j(() => e == null ? null : Array.isArray(e) ? e.map((n) => Gb(n, t)) : JI(e, t.dtype === "int32" ? t : ce(t, "int32")));
}
function Cm(e, t) {
  let n = [], s = 0, r = null;
  for (; s < e; )
    r = s + t, r >= e && (r = e), n.push([s, r]), s = r;
  return n;
}
async function DB(e, t, n, s, r, a, i, o, u, l, c, p, d, h, f) {
  r == null && (r = 32), a == null && (a = 1), c == null && (c = true), d == null && (d = 0);
  let m = false;
  if (u != null && l != null && (m = true), f != null && (m = true, h == null))
    throw new U("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
  let g = e.checkNumSamples(n, r, h, "steps_per_epoch"), b;
  g != null && (b = bs(0, g)), i == null && (i = 1);
  let { callbackList: y, history: v } = o0(o, i, a, d, g, h, r, m, p);
  y.setModel(e), e.history = v, await y.onTrainBegin(), e.stopTraining_ = false;
  for (let x = d; x < a; ++x) {
    await y.onEpochBegin(x);
    let k = {};
    if (h != null)
      throw new Fe("stepsPerEpoch mode is not implemented yet.");
    {
      if (c === "batch")
        throw new Fe("batch shuffling is not implemneted yet");
      c && w.shuffle(b);
      let S = Qt(b), $ = Cm(g, r);
      for (let E = 0; E < $.length; ++E) {
        let A = {};
        if (await y.onBatchBegin(E, A), j(() => {
          let P = $[E][0], R = $[E][1], F = na(S, P, R - P);
          A.batch = E, A.size = R - P;
          let T = Gb(n, F), z = t(T);
          for (let W = 0; W < s.length; ++W) {
            let q = s[W], K = z[W];
            A[q] = K, Ht(K);
          }
          if (E === $.length - 1 && m) {
            let W = e.testLoop(u, l, r);
            for (let q = 0; q < s.length; ++q) {
              let K = s[q], Y = W[q];
              Ht(Y), k["val_" + K] = Y;
            }
          }
        }), await y.onBatchEnd(E, A), a0(A), e.stopTraining_)
          break;
      }
      S.dispose();
    }
    if (await y.onEpochEnd(x, k), e.stopTraining_)
      break;
  }
  return await y.onTrainEnd(), await e.history.syncData(), e.history;
}
async function FB(e, t, n, s = {}) {
  if (e.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  e.isTraining = true;
  let r, a, i, o, u, l, c, p, d;
  try {
    let h = s.batchSize == null ? 32 : s.batchSize;
    Sm(h);
    let f = false, m = await e.standardizeUserData(t, n, s.sampleWeight, s.classWeight, f, h);
    r = m[0], a = m[1], d = m[2];
    let g = false, b;
    if (s.validationData != null && s.validationData.length > 0) {
      if (g = true, s.validationData.length === 2)
        u = s.validationData[0], l = s.validationData[1];
      else
        throw s.validationData.length === 3 ? new Fe("validationData including sample weights is not supported yet.") : new U(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);
      let A = true, P = await e.standardizeUserData(u, l, null, null, A, h);
      c = P[0], p = P[1], b = c.concat(p);
    } else if (s.validationSplit != null && s.validationSplit > 0 && s.validationSplit < 1) {
      g = true;
      let A = Math.floor(r[0].shape[0] * (1 - s.validationSplit)), P = r[0].shape[0];
      c = Ru(r, A, P), i = r, r = Ru(r, 0, A), p = Ru(a, A, P), o = a, a = Ru(a, 0, A), b = c.concat(p);
    } else
      s.validationSteps != null && (g = true);
    let y = r.concat(a).concat(d);
    e.checkTrainableWeightsConsistency();
    let v = e.makeTrainFunction(), x = e.getDedupedMetricsNames(), k, S;
    g ? (e.makeTestFunction(), k = e.testFunction, S = x.slice().concat(x.map((A) => "val_" + A))) : (k = null, b = [], S = x.slice());
    let $ = i0(s.callbacks, s.yieldEvery);
    return await DB(e, v, y, x, h, s.epochs, s.verbose, $, k, b, s.shuffle, S, s.initialEpoch, null, null);
  } finally {
    e.isTraining = false, ds(r, t), ds(a, n), ds(i, t), ds(o, n), ds(c, u), ds(p, l), d != null && Re(d);
  }
}
function y0(e) {
  let t = [];
  e instanceof et && (e = [e]);
  for (let n = 0; n < e.length; ++n) {
    let s = e[n];
    if (s.rank === 1)
      t.push(Bl(s, 1));
    else {
      if (s.rank === 0)
        throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      t.push(s);
    }
  }
  return t;
}
function ds(e, t) {
  if (e == null)
    return;
  let n = [];
  if (t instanceof et)
    n.push(t.id);
  else if (Array.isArray(t))
    t.forEach((r) => n.push(r.id));
  else if (t != null)
    for (let r in t) {
      let a = t[r];
      n.push(a.id);
    }
  let s = [];
  if (e instanceof et)
    n.indexOf(e.id) === -1 && s.push(e);
  else if (Array.isArray(e))
    e.forEach((r) => {
      n.indexOf(r.id) === -1 && s.push(r);
    });
  else if (e != null)
    for (let r in e) {
      let a = e[r];
      n.indexOf(a.id) === -1 && s.push(a);
    }
  s.forEach((r) => {
    r.isDisposed || r.dispose();
  });
}
function OB(e) {
  return e instanceof et;
}
function Nm(e) {
  return Array.isArray(e);
}
function Lx(e) {
  return !OB(e) && !Nm(e);
}
function Bx(e, t, n, s = true, r = "") {
  if (t == null || t.length === 0) {
    if (e != null) {
      let i = false;
      if (Nm(e) && e.length > 0)
        i = true;
      else if (Lx(e)) {
        for (let o in e)
          if (e.hasOwnProperty(o)) {
            i = true;
            break;
          }
      } else
        i = true;
      if (i)
        throw new U(`Error when checking model ${r} expected no data, but got ${e}`);
    }
    return [];
  }
  if (e == null)
    return t.map((i) => null);
  let a;
  if (Lx(e)) {
    e = e, a = [];
    for (let i of t) {
      if (e[i] == null)
        throw new U(`No data provided for "${i}". Need data for each key in: ${t}`);
      a.push(e[i]);
    }
  } else if (Nm(e)) {
    if (e = e, e.length !== t.length)
      throw new U(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);
    a = e;
  } else {
    if (e = e, t.length > 1)
      throw new U(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);
    a = [e];
  }
  if (a = y0(a), n != null)
    for (let i = 0; i < t.length; ++i) {
      if (n[i] == null)
        continue;
      let o = a[i];
      if (o.shape.length !== n[i].length)
        throw new U(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s). but got array with shape ${o.shape}`);
      for (let u = 0; u < n[i].length; ++u) {
        if (u === 0 && !s)
          continue;
        let l = o.shape[u], c = n[i][u];
        if (c != null && c >= 0 && l !== c)
          throw new U(`${r} expected a batch of elements where each example has shape [${n[i].slice(1, n[i].length)}] (i.e.,tensor shape [*,${n[i].slice(1, n[i].length)}]) but the ${r} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1, o.shape.length)}] (tensor shape [${o.shape}])`);
      }
    }
  return a;
}
function PB(e, t, n) {
  let s = dr(e.map((a) => a.shape[0]));
  s.sort();
  let r = dr(t.map((a) => a.shape[0]));
  if (r.sort(), s.length > 1)
    throw new U(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((a) => a.shape))}`);
  if (r.length > 1)
    throw new U(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((a) => a.shape))}`);
  if (s.length > 0 && r.length > 0 && !w.arraysEqual(s, r))
    throw new U(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`);
}
function zB(e, t, n) {
  let s = [vi, Mp, Zu];
  for (let r = 0; r < e.length; ++r) {
    let a = e[r], i = t[r], o = n[r];
    if (i != null) {
      if (i === Zu && a.shape[a.shape.length - 1] === 1)
        throw new U(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
      if (s.indexOf(i) !== -1) {
        let u = a.shape.slice(1), l = o.slice(1);
        for (let c = 0; c < u.length; ++c) {
          let p = u[c], d = l[c];
          if (d != null && p !== d)
            throw new U(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
function Vx(e, t, n, s = true, r = "") {
  let a;
  if (Array.isArray(e)) {
    if (e.length !== t.length)
      throw new U(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);
    a = e;
  } else {
    if (t.length > 1)
      throw new U(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);
    a = [e];
  }
  if (n != null)
    for (let i = 0; i < t.length; ++i) {
      if (n[i] == null)
        continue;
      let o = a[i];
      if (o.shape.length !== n[i].length)
        throw new U(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);
      for (let u = 0; u < n[i].length; ++u) {
        if (u === 0 && !s)
          continue;
        let l = o.shape[u], c = n[i][u];
        if (c != null && c !== l)
          throw new U(`Error when checking ${r}: expected ${t[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(o.shape)}.`);
      }
    }
}
function MB(e, t) {
  if (e == null || Array.isArray(e) && e.length === 0)
    return t.map((s) => []);
  let n;
  if (typeof e == "string" || typeof e == "function")
    n = [e];
  else if (Array.isArray(e) || typeof e == "object")
    n = e;
  else
    throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);
  if (Array.isArray(n))
    return t.map((s) => n);
  {
    let s = [];
    for (let r of t) {
      let a = n.hasOwnProperty(r) ? n[r] : [];
      Array.isArray(a) || (a = [a]), s.push(a);
    }
    return s;
  }
}
var LB = "layers-model";
var hr = class extends Is {
  constructor(e) {
    super(e), this.isTraining = false;
  }
  summary(e, t, n = console.log) {
    if (!this.built)
      throw new U("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    xB(this, e, t, n);
  }
  compile(e) {
    if (e.loss == null && (e.loss = []), this.loss = e.loss, typeof e.optimizer == "string")
      this.optimizer_ = vB(e.optimizer), this.isOptimizerOwned = true;
    else {
      if (!(e.optimizer instanceof Ar))
        throw new U("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = e.optimizer, this.isOptimizerOwned = false;
    }
    let t = [];
    if (!Array.isArray(e.loss) && typeof e.loss != "string" && typeof e.loss != "function") {
      e.loss = e.loss;
      for (let a in e.loss)
        if (this.outputNames.indexOf(a) === -1)
          throw new U(`Unknown entry in loss dictionary: "${a}". Only expected the following keys: ${this.outputNames}`);
      for (let a of this.outputNames)
        e.loss[a] == null && console.warn(`Output "${a}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${a} during training`), t.push(Gf(e.loss[a]));
    } else if (Array.isArray(e.loss)) {
      if (e.loss.length !== this.outputs.length)
        throw new U(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);
      t = e.loss.map((i) => Gf(i));
    } else {
      let a = Gf(e.loss);
      this.outputs.forEach((i) => {
        t.push(a);
      });
    }
    this.lossFunctions = t, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let a = 0; a < this.outputs.length; ++a) {
      let i = this.internalOutputShapes[a], o = this.outputNames[a];
      this.feedOutputNames.push(o), this.feedOutputShapes.push(i), this.feedLossFns.push(this.lossFunctions[a]);
    }
    let n = [];
    this.metrics = e.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], ta("loss", () => {
      for (let a = 0; a < this.outputs.length; ++a) {
        if (n.indexOf(a) !== -1)
          continue;
        let i = this.lossFunctions[a];
        this.outputs.length > 1 && (this.metricsTensors.push([i, a]), this.metricsNames.push(this.outputNames[a] + "_loss"));
      }
    });
    let s = MB(e.metrics, this.outputNames), r = (a, i, o) => {
      this.outputNames.length > 1 && (i = this.outputNames[a] + "_" + i), this.metricsNames.push(i), this.metricsTensors.push([o, a]);
    };
    ta("metric", () => {
      for (let a = 0; a < this.outputs.length; ++a) {
        if (n.indexOf(a) !== -1)
          continue;
        let i = s[a];
        ((u) => {
          let l = "", c, p, d;
          for (let h of u) {
            if (typeof h == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(h) !== -1) {
              let m = this.internalOutputShapes[a];
              m[m.length - 1] === 1 || this.lossFunctions[a] === Mp ? ["accuracy", "acc"].indexOf(h) !== -1 ? p = Vb : ["crossentropy", "ce"].indexOf(h) !== -1 && (p = c0) : this.lossFunctions[a] === _d ? ["accuracy", "acc"].indexOf(h) !== -1 ? p = d0 : ["crossentropy", "ce"].indexOf(h) !== -1 && (p = p0) : ["accuracy", "acc"].indexOf(h) !== -1 ? p = Wb : ["crossentropy", "ce"].indexOf(h) !== -1 && (p = Ub);
              let g;
              ["accuracy", "acc"].indexOf(h) !== -1 ? g = "acc" : ["crossentropy", "ce"].indexOf(h) !== -1 && (g = "ce"), d = p, c = l + g;
            } else
              d = yB(h), c = l + qc(h);
            let f;
            ta(c, () => {
              f = d;
            }), r(a, c, f);
          }
        })(i);
      }
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  evaluate(e, t, n = {}) {
    let s = n.batchSize == null ? 32 : n.batchSize;
    Sm(s);
    let r = true, a = this.standardizeUserDataXY(e, t, r, s);
    try {
      let i = a[0].concat(a[1]);
      this.makeTestFunction();
      let o = this.testFunction, u = this.testLoop(o, i, s, n.verbose, n.steps);
      return bn(u);
    } finally {
      ds(a[0], e), ds(a[1], t);
    }
  }
  async evaluateDataset(e, t) {
    return this.makeTestFunction(), RB(this, e, t);
  }
  checkNumSamples(e, t, n, s = "steps") {
    let r;
    if (n != null) {
      if (r = null, t != null)
        throw new U(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`);
    } else if (e != null)
      Array.isArray(e) ? r = e[0].shape[0] : r = e.shape[0];
    else
      throw new U(`Either the input data should have a defined shape, or ${s} shoud be specified.`);
    return r;
  }
  execute(e, t) {
    if (Array.isArray(t) && t.length === 0)
      throw new U("`outputs` is an empty Array, which is not allowed.");
    let n = Array.isArray(t), s = n ? t : [t], r = this.retrieveSymbolicTensors(s), a = new Zr();
    if (e instanceof et && (e = [e]), Array.isArray(e)) {
      if (e.length !== this.inputs.length)
        throw new U(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let o = 0; o < this.inputs.length; ++o)
        a.add(this.inputs[o], e[o]);
    } else
      for (let o of this.inputs) {
        let u = e[o.name];
        if (u == null)
          throw new U(`No value is provided for the model's input ${o.name}`);
        a.add(o, u);
      }
    let i = Eu(r, a);
    return n ? i : i[0];
  }
  retrieveSymbolicTensors(e) {
    let t = ma(null, e.length), n = e.length;
    for (let s of this.layers) {
      let r = Array.isArray(s.output) ? s.output : [s.output], a = r.map((i) => i.name);
      for (let i = 0; i < e.length; ++i) {
        let o = a.indexOf(e[i]);
        if (o !== -1 && (t[i] = r[o], n--), n === 0)
          break;
      }
      if (n === 0)
        break;
    }
    if (n > 0) {
      let s = [];
      throw t.forEach((r, a) => {
        r == null && s.push(e[a]);
      }), new U(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(s)}`);
    }
    return t;
  }
  predictLoop(e, t = 32, n = false) {
    return j(() => {
      let s = this.checkNumSamples(e);
      if (n)
        throw new Fe("Verbose predictLoop() is not implemented yet.");
      let r = Cm(s, t), a = this.outputs.map((i) => []);
      for (let i = 0; i < r.length; ++i)
        j(() => {
          let u = r[i][0], l = r[i][1], c = Ru(e, u, l), p = [];
          if (Array.isArray(c))
            for (let h = 0; h < c.length; ++h)
              p.push({ key: this.inputs[h], value: c[h] });
          else
            p.push({ key: this.inputs[0], value: c });
          let d = new Zr(p);
          return Eu(this.outputs, d);
        }).forEach((u, l) => a[l].push(u));
      return bn(a.map((i) => Ft(i, 0)));
    });
  }
  predict(e, t = {}) {
    let n = y0(e);
    Vx(n, this.inputNames, this.feedInputShapes, false);
    try {
      let s = t.batchSize == null ? 32 : t.batchSize;
      return Sm(s), this.predictLoop(n, s);
    } finally {
      ds(n, e);
    }
  }
  predictOnBatch(e) {
    Vx(e, this.inputNames, this.feedInputShapes, true);
    let t = (Array.isArray(e) ? e[0] : e).shape[0];
    return this.predictLoop(e, t);
  }
  standardizeUserDataXY(e, t, n = true, s) {
    if (this.optimizer_ == null)
      throw new hs("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    let r = [];
    for (let a = 0; a < this.feedOutputShapes.length; ++a) {
      let i = this.feedOutputShapes[a];
      this.feedLossFns[a] === _d ? r.push(i.slice(0, i.length - 1).concat([1])) : r.push(i);
    }
    if (e = Bx(e, this.feedInputNames, this.feedInputShapes, false, "input"), t = Bx(t, this.feedOutputNames, r, false, "target"), PB(e, t, null), zB(t, this.feedLossFns, this.feedOutputShapes), this.stateful && s != null && s > 0 && e[0].shape[0] % s !== 0)
      throw new U(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);
    return [e, t];
  }
  async standardizeUserData(e, t, n, s, r = true, a) {
    let [i, o] = this.standardizeUserDataXY(e, t, r, a);
    if (n != null)
      throw new Error("sample weight is not supported yet.");
    let u = null;
    if (s != null) {
      let l = m0(s, this.outputNames);
      u = [];
      for (let c = 0; c < l.length; ++c)
        u.push(await g0(o[c], null, l[c]));
    }
    return [i, o, u];
  }
  testLoop(e, t, n, s = 0, r) {
    return j(() => {
      let a = this.checkNumSamples(t, n, r, "steps"), i = [];
      if (s > 0)
        throw new Fe("Verbose mode is not implemented yet.");
      if (r != null)
        throw new Fe("steps mode in testLoop() is not implemented yet");
      {
        let o = Cm(a, n), u = Qt(bs(0, a));
        for (let l = 0; l < o.length; ++l) {
          let c = o[l][0], p = o[l][1], d = na(u, c, p - c), h = Gb(t, d), f = e(h);
          if (l === 0)
            for (let m = 0; m < f.length; ++m)
              i.push(we(0));
          for (let m = 0; m < f.length; ++m) {
            let g = f[m];
            i[m] = ie(i[m], V(p - c, g));
          }
        }
        for (let l = 0; l < i.length; ++l)
          i[l] = xe(i[l], a);
      }
      return i;
    });
  }
  getDedupedMetricsNames() {
    let e = this.metricsNames, t = [];
    for (let n = 0; n < e.length; ++n) {
      let s = e[n], r = s;
      xx(e, s) > 1 && (r += `_${xx(e.slice(0, n), s)}`), t.push(r);
    }
    return t;
  }
  makeTrainFunction() {
    return (e) => {
      let t = [], n = e.slice(0, this.inputs.length), s = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), r = e.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), a = [], i = () => {
        let c = [];
        for (let f = 0; f < this.inputs.length; ++f)
          c.push({ key: this.inputs[f], value: n[f] });
        let p = new Zr(c), d = Eu(this.outputs, p, { training: true }), h;
        for (let f = 0; f < this.lossFunctions.length; ++f) {
          let g = this.lossFunctions[f](s[f], d[f]);
          r[f] != null && (g = NB(g, r[f]));
          let b = St(g);
          t.push(b), f === 0 ? h = g : h = ie(h, g);
        }
        for (let f = 0; f < this.metricsTensors.length; ++f) {
          let m;
          if (this.outputs.length > 1 && f < this.outputs.length)
            m = t[f];
          else {
            let g = this.metricsTensors[f][0], b = this.metricsTensors[f][1];
            m = St(g(s[b], d[b]));
          }
          Ht(m), a.push(m);
        }
        return h = St(h), this.calculateLosses().forEach((f) => {
          h = ie(h, f);
        }), h;
      }, o = this.collectedTrainableWeights.map((c) => c.read()), u = true;
      return [this.optimizer_.minimize(i, u, o)].concat(a);
    };
  }
  makeTestFunction() {
    this.testFunction = (e) => j(() => {
      let t = [], n, s = e.slice(0, this.inputs.length), r = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), a = [];
      for (let u = 0; u < this.inputs.length; ++u)
        a.push({ key: this.inputs[u], value: s[u] });
      let i = new Zr(a), o = Eu(this.outputs, i);
      for (let u = 0; u < this.lossFunctions.length; ++u) {
        let l = this.lossFunctions[u], c = St(l(r[u], o[u]));
        u === 0 ? n = c : n = ie(n, c), t.push(n);
      }
      for (let u = 0; u < this.metricsTensors.length; ++u) {
        let l = this.metricsTensors[u][0], c = this.metricsTensors[u][1], p = St(l(r[c], o[c]));
        t.push(p);
      }
      return t;
    });
  }
  async fit(e, t, n = {}) {
    return FB(this, e, t, n);
  }
  async fitDataset(e, t) {
    return _B(this, e, t);
  }
  async trainOnBatch(e, t) {
    let n = await this.standardizeUserData(e, t), s = n[0], r = n[1], i = this.makeTrainFunction()(s.concat(r)), o = [];
    for (let u of i) {
      let l = await u.data();
      o.push(l[0]);
    }
    return Re(i), ds(n[0], e), ds(n[1], t), bn(o);
  }
  getNamedWeights(e) {
    let t = [], n = e != null && e.trainableOnly, s = n ? this.trainableWeights : this.weights, r = this.getWeights(n);
    for (let a = 0; a < s.length; ++a)
      n && !s[a].trainable || t.push({ name: s[a].originalName, tensor: r[a] });
    return t;
  }
  set stopTraining(e) {
    this.stopTraining_ = e;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(e) {
    this.optimizer_ !== e && (this.optimizer_ = e, this.isOptimizerOwned = false);
  }
  dispose() {
    let e = super.dispose();
    if (e.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      let t = pm().numTensors;
      this.optimizer_.dispose(), e.numDisposedVariables += t - pm().numTensors;
    }
    return e;
  }
  getLossIdentifiers() {
    let e;
    if (typeof this.loss == "string")
      e = Ws(this.loss);
    else if (Array.isArray(this.loss)) {
      for (let t of this.loss)
        if (typeof t != "string")
          throw new Error("Serialization of non-string loss is not supported.");
      e = this.loss.map((t) => Ws(t));
    } else {
      let t = Object.keys(this.loss);
      e = {};
      let n = this.loss;
      for (let s of t)
        if (typeof n[s] == "string")
          e[s] = Ws(n[s]);
        else
          throw new Error("Serialization of non-string loss is not supported.");
    }
    return e;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function")
      return [Ws(qc(this.metrics))];
    if (Array.isArray(this.metrics))
      return this.metrics.map((e) => Ws(qc(e)));
    {
      let e = {};
      for (let t in this.metrics)
        e[t] = Ws(qc(this.metrics[t]));
      return e;
    }
  }
  getTrainingConfig() {
    return { loss: this.getLossIdentifiers(), metrics: this.getMetricIdentifiers(), optimizer_config: { class_name: this.optimizer.getClassName(), config: this.optimizer.getConfig() } };
  }
  loadTrainingConfig(e) {
    if (e.weighted_metrics != null)
      throw new Error("Loading weight_metrics is not supported yet.");
    if (e.loss_weights != null)
      throw new Error("Loading loss_weights is not supported yet.");
    if (e.sample_weight_mode != null)
      throw new Error("Loading sample_weight_mode is not supported yet.");
    let t = Ju(e.optimizer_config), n = ms(t), s;
    if (typeof e.loss == "string")
      s = Xr(e.loss);
    else if (Array.isArray(e.loss))
      s = e.loss.map((a) => Xr(a));
    else if (e.loss != null) {
      s = {};
      for (let a in e.loss)
        s[a] = Xr(e.loss[a]);
    }
    let r;
    if (Array.isArray(e.metrics))
      r = e.metrics.map((a) => Xr(a));
    else if (e.metrics != null) {
      r = {};
      for (let a in e.metrics)
        r[a] = Xr(e.metrics[a]);
    }
    this.compile({ loss: s, metrics: r, optimizer: n });
  }
  async save(e, t) {
    if (typeof e == "string") {
      let u = An.getSaveHandlers(e);
      if (u.length === 0)
        throw new U(`Cannot find any save handlers for URL '${e}'`);
      if (u.length > 1)
        throw new U(`Found more than one (${u.length}) save handlers for URL '${e}'`);
      e = u[0];
    }
    if (e.save == null)
      throw new U("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    let n = await An.encodeWeights(this.getNamedWeights(t)), s = false, r = null, i = { modelTopology: this.toJSON(r, s), format: LB, generatedBy: `TensorFlow.js tfjs-layers v${f0}`, convertedBy: null };
    if ((t == null ? false : t.includeOptimizer) && this.optimizer != null) {
      i.trainingConfig = this.getTrainingConfig();
      let u = "optimizer", { data: l, specs: c } = await An.encodeWeights(await this.optimizer.getWeights(), u);
      n.specs.push(...c), n.data = An.concatenateArrayBuffers([n.data, l]);
    }
    return this.userDefinedMetadata != null && (Px(this.userDefinedMetadata, this.name, true), i.userDefinedMetadata = this.userDefinedMetadata), i.weightData = n.data, i.weightSpecs = n.specs, e.save(i);
  }
  setUserDefinedMetadata(e) {
    Px(e, this.name), this.userDefinedMetadata = e;
  }
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
};
hr.className = "Model";
ae.registerClass(hr);
var v0 = class extends hr {
};
v0.className = "Functional";
ae.registerClass(v0);
async function BB(e, t) {
  "modelTopology" in e || (e = { modelTopology: e }), e = e;
  let n = e.modelTopology;
  n.model_config != null && (n = n.model_config);
  let s = Ju(n), r = ms(s, t);
  if (e.weightsManifest != null) {
    let a = await An.loadWeights(e.weightsManifest, e.pathPrefix, r.weights.map((o) => o.originalName)), i = {};
    for (let o of r.weights)
      i[o.originalName] = a[o.originalName];
    r.loadWeights(i), Re(a);
  }
  return r;
}
async function VB(e, t) {
  if (t == null && (t = {}), typeof e == "string") {
    let n = An.getLoadHandlers(e, t);
    if (n.length === 0)
      n.push(An.browserHTTPRequest(e, t));
    else if (n.length > 1)
      throw new U(`Found more than one (${n.length}) load handlers for URL '${e}'`);
    e = n[0];
  }
  return WB(e, void 0, t);
}
async function WB(e, t, n) {
  if (n == null && (n = {}), e.load == null)
    throw new U("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
  let s = await e.load(), r = s.modelTopology;
  r.model_config != null && (r = r.model_config);
  let a = n.strict == null ? true : n.strict, i = s.weightData != null && s.weightSpecs != null && a, o = ms(Ju(r), t, i), u = s.trainingConfig;
  if (u != null && o.loadTrainingConfig(u), s.userDefinedMetadata != null && o.setUserDefinedMetadata(s.userDefinedMetadata), s.weightData != null) {
    if (s.weightSpecs == null)
      throw new U("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
    let { modelWeights: l, optimizerWeights: c } = UB(s.weightData, s.weightSpecs);
    o.loadWeights(l, a), o.optimizer != null && c.length > 0 && await o.optimizer.setWeights(c), Re(l), Re(c.map((p) => p.tensor));
  }
  return o;
}
function UB(e, t) {
  let n = An.decodeWeights(e, t), s = {}, r = [];
  return t.forEach((a) => {
    a.group === "optimizer" ? r.push({ name: a.name, tensor: n[a.name] }) : s[a.name] = n[a.name];
  }), { modelWeights: s, optimizerWeights: r };
}
var Tm = class extends hr {
  constructor(e) {
    if (super({ inputs: [], outputs: [] }), e = e || {}, this.trainable = true, this.built = false, this.name = e.name != null ? e.name : Np("sequential_"), e.layers != null)
      for (let t of e.layers)
        this.add(t);
  }
  checkShape(e) {
    if (e.inboundNodes[0].outputTensors[0].shape.some((n) => n < 0))
      throw new U(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`);
  }
  add(e) {
    let t = e instanceof Tm || e instanceof hr, n;
    if (t) {
      if (n = e, n.outputs.length !== 1)
        throw new U("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (n.inputs.length !== 1)
        throw new U("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (e.inboundNodes.length === 0) {
        if (e.batchInputShape == null)
          throw new U("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        let s = n0({ batchShape: e.batchInputShape, dtype: e.dtype, name: e.name + "_input" });
        e.apply(s);
      }
      if (t)
        this.outputs = n.outputs, this.inputs = n.inputs;
      else {
        if (e.inboundNodes.length !== 1)
          throw new U(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);
        if (e.inboundNodes[0].outputTensors.length !== 1)
          throw new U("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(e), this.outputs = [e.inboundNodes[0].outputTensors[0]], this.inputs = t0(this.outputs[0]);
      }
      this.inboundNodes = [], new Pp({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: ma(null, this.inputs.length), outputMasks: [null], inputShapes: this.inputs.map((s) => s.shape), outputShapes: this.outputs[0].shape });
    } else {
      let s = e.apply(this.outputs[0]);
      if (Array.isArray(s))
        throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(e), this.outputs = [s], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(e), this.built = false;
  }
  pop() {
    if (this.layers.length === 0)
      throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0)
      this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      let e = this.layers.length - 1;
      this.layers[e].outboundNodes = [], this.outputs = [this.layers[e].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(e, t) {
    return this.model == null && this.build(), this.model.call(e, t);
  }
  build(e) {
    if (nt(e), this.inputs.length === 0 || this.outputs.length === 0)
      throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new hr({ inputs: this.inputs, outputs: this.outputs[0], name: this.name + "_model" }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = true;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  summary(e, t, n = console.log) {
    this.built || this.build(), super.summary(e, t, n);
  }
  setWeights(e) {
    this.model == null && this.build(), this.model.setWeights(e);
  }
  evaluate(e, t, n = {}) {
    if (!this.built)
      throw new hs("The model needs to be compiled before being used.");
    return this.model.evaluate(e, t, n);
  }
  async evaluateDataset(e, t) {
    if (!this.built)
      throw new hs("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(e, t);
  }
  predict(e, t = {}) {
    return this.model == null && this.build(), this.model.predict(e, t);
  }
  predictOnBatch(e) {
    return this.model == null && this.build(), this.model.predictOnBatch(e);
  }
  compile(e) {
    this.build(), this.model.compile(e), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(e) {
    this.model.optimizer = e;
  }
  async fit(e, t, n = {}) {
    if (!this.built)
      throw new hs("The model needs to be compiled before being used.");
    return this.model.fit(e, t, n);
  }
  async fitDataset(e, t) {
    if (!this.built)
      throw new hs("The model needs to be compiled before being used.");
    return this.model.fitDataset(e, t);
  }
  async trainOnBatch(e, t) {
    return this.model.trainOnBatch(e, t);
  }
  static fromConfig(e, t, n = {}, s = false) {
    let r, a = {};
    if (t instanceof Array) {
      if (t[0].className == null || t[0].className === "Merge")
        throw new U("Legacy serialization format not supported yet.");
      r = t;
    } else
      w.assert(t.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), r = t.layers, delete t.layers, a = t;
    let i = new e(a);
    if (!(i instanceof Tm))
      throw new Fe(`Sequential.fromConfig called on non-Sequential input: ${i}`);
    for (let o of r) {
      let l = ms(o, void 0, s);
      s && l.setFastWeightInitDuringBuild(true), i.add(l);
    }
    return i;
  }
  set stopTraining(e) {
    if (this.model == null)
      throw new U("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = e;
  }
  get stopTraining() {
    if (this.model == null)
      throw new U("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  getConfig() {
    let e = [];
    for (let t of this.layers) {
      let n = {};
      n.className = t.getClassName(), n.config = t.getConfig(), e.push(n);
    }
    return { name: this.name, layers: e };
  }
};
var Hb = Tm;
Hb.className = "Sequential";
ae.registerClass(Hb);
function Bpe(e) {
  return new hr(e);
}
function Vpe(e) {
  return new Hb(e);
}
function Wpe(e, t) {
  return t == null && (t = {}), VB(e, t);
}
function GB(e) {
  return n0(e);
}
function Upe(e, t) {
  Lb.registerCallbackConstructor(e, t);
}
var kn = class extends ae.Serializable {
  getConfig() {
    return {};
  }
};
var x0 = class extends kn {
  apply(e, t = 1) {
    return sz(e, t);
  }
};
x0.className = "elu";
ae.registerClass(x0);
var w0 = class extends kn {
  apply(e) {
    return wI(e);
  }
};
w0.className = "selu";
ae.registerClass(w0);
var k0 = class extends kn {
  apply(e) {
    return Ys(e);
  }
};
k0.className = "relu";
ae.registerClass(k0);
var I0 = class extends kn {
  apply(e) {
    return j(() => vp(6, Ys(e)));
  }
};
I0.className = "relu6";
ae.registerClass(I0);
var S0 = class extends kn {
  apply(e) {
    return e;
  }
};
S0.className = "linear";
ae.registerClass(S0);
var C0 = class extends kn {
  apply(e) {
    return qs(e);
  }
};
C0.className = "sigmoid";
ae.registerClass(C0);
var N0 = class extends kn {
  apply(e) {
    return az(e);
  }
};
N0.className = "hardSigmoid";
ae.registerClass(N0);
var T0 = class extends kn {
  apply(e) {
    return zl(e);
  }
};
T0.className = "softplus";
ae.registerClass(T0);
var $0 = class extends kn {
  apply(e) {
    return rz(e);
  }
};
$0.className = "softsign";
ae.registerClass($0);
var _0 = class extends kn {
  apply(e) {
    return ju(e);
  }
};
_0.className = "tanh";
ae.registerClass(_0);
var qb = class extends kn {
  apply(e, t = -1) {
    return cb(e, t);
  }
};
qb.className = "softmax";
ae.registerClass(qb);
var A0 = class extends kn {
  apply(e, t = -1) {
    return dI(e, t);
  }
};
A0.className = "logSoftmax";
ae.registerClass(A0);
var E0 = class extends kn {
  apply(e, t = 1) {
    return j(() => V(qs(V(e, t)), e));
  }
};
E0.className = "swish";
ae.registerClass(E0);
var R0 = class extends kn {
  apply(e) {
    return j(() => V(e, ju(zl(e))));
  }
};
R0.className = "mish";
ae.registerClass(R0);
function yr(e) {
  return e.getClassName();
}
function Hf(e, t = {}) {
  return Ll(e, ae.SerializationMap.getMap().classNameMap, t, "activation");
}
function vr(e) {
  if (e == null) {
    let t = {};
    return t.className = "linear", t.config = {}, Hf(t);
  }
  if (typeof e == "string") {
    let t = {};
    return t.className = e, t.config = {}, Hf(t);
  } else
    return e instanceof kn ? e : Hf(e);
}
function jb(e) {
  if (e != null && typeof e != "object")
    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`);
}
var D0 = class extends ae.Serializable {
};
var Gl = class extends D0 {
  constructor(e) {
    super(), jb(e), this.l1 = e == null || e.l1 == null ? 0.01 : e.l1, this.l2 = e == null || e.l2 == null ? 0.01 : e.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  apply(e) {
    return j(() => {
      let t = $t([1]);
      return this.hasL1 && (t = ie(t, ve(V(this.l1, Mt(e))))), this.hasL2 && (t = ie(t, ve(V(this.l2, Vl(e))))), G(t, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  static fromConfig(e, t) {
    return new e({ l1: t.l1, l2: t.l2 });
  }
};
Gl.className = "L1L2";
ae.registerClass(Gl);
function HB(e) {
  return jb(e), new Gl({ l1: e != null ? e.l1 : null, l2: 0 });
}
function qB(e) {
  return jb(e), new Gl({ l2: e != null ? e.l2 : null, l1: 0 });
}
var Wx = { l1l2: "L1L2" };
function at(e) {
  return Ib(e);
}
function Ux(e, t = {}) {
  return Ll(e, ae.SerializationMap.getMap().classNameMap, t, "regularizer");
}
function ft(e) {
  if (e == null)
    return null;
  if (typeof e == "string") {
    let n = { className: e in Wx ? Wx[e] : e, config: {} };
    return Ux(n);
  } else
    return e instanceof D0 ? e : Ux(e);
}
var Kb = class extends He {
  constructor(e) {
    super(e == null ? {} : e), this.supportsMasking = true, e != null && (this.maxValue = e.maxValue);
  }
  call(e, t) {
    e = Oe(e);
    let n = Ys(e);
    return this.maxValue != null && (n = Vn(n, 0, this.maxValue)), n;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = { maxValue: this.maxValue }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Kb.className = "ReLU";
ae.registerClass(Kb);
var Xb = class extends He {
  constructor(e) {
    super(e == null ? {} : e), this.DEFAULT_ALPHA = 0.3, e == null && (e = {}), this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
  }
  call(e, t) {
    let n = Oe(e);
    return Qg(n, this.alpha);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Xb.className = "LeakyReLU";
ae.registerClass(Xb);
var Yb = class extends He {
  constructor(e) {
    if (super(e == null ? {} : e), this.DEFAULT_ALPHA_INITIALIZER = "zeros", e == null && (e = {}), this.supportsMasking = true, this.alphaInitializer = ht(e.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = ft(e.alphaRegularizer), this.alphaConstraint = Pt(e.alphaConstraint), e.sharedAxes == null)
      this.sharedAxes = null;
    else if (Array.isArray(e.sharedAxes))
      this.sharedAxes = e.sharedAxes;
    else if (typeof e.sharedAxes == "number")
      this.sharedAxes = [e.sharedAxes];
    else
      throw new U(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);
  }
  build(e) {
    e = nt(e);
    let t = e.slice(1);
    if (this.sharedAxes != null)
      for (let s of this.sharedAxes)
        t[s - 1] = 1;
    this.alpha = this.addWeight("alpha", t, "float32", this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);
    let n = {};
    if (this.sharedAxes != null)
      for (let s = 1; s < e.length; ++s)
        n[s] = e[s];
    this.inputSpec = [new Dt({ ndim: e.length, axes: n })], this.built = true;
  }
  call(e, t) {
    return e = Oe(e), ab(e, this.alpha.read());
  }
  getConfig() {
    let e = { alphaInitializer: yt(this.alphaInitializer), alphaRegularizer: at(this.alphaRegularizer), alphaConstraint: Ot(this.alphaConstraint), sharedAxes: this.sharedAxes }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Yb.className = "PReLU";
ae.registerClass(Yb);
var Qb = class extends He {
  constructor(e) {
    if (super(e == null ? {} : e), this.DEFAULT_ALPHA = 1, e == null && (e = {}), e.alpha != null && e.alpha !== this.DEFAULT_ALPHA)
      throw new Fe(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
  }
  call(e, t) {
    let n = Oe(e);
    return gp(n);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Qb.className = "ELU";
ae.registerClass(Qb);
var Zb = class extends He {
  constructor(e) {
    super(e == null ? {} : e), this.DEFAULT_THETA = 1, e == null && (e = {}), this.theta = e.theta == null ? this.DEFAULT_THETA : e.theta;
  }
  call(e, t) {
    let n = Oe(e);
    return V(n, ce(Un(n, this.theta), "float32"));
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = { theta: this.theta }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Zb.className = "ThresholdedReLU";
ae.registerClass(Zb);
var Jb = class extends He {
  constructor(e) {
    super(e == null ? {} : e), this.DEFAULT_AXIS = 1, e == null && (e = {}), this.softmax = new qb().apply, this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis;
  }
  call(e, t) {
    let n = Oe(e);
    return this.softmax(n, this.axis);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = { axis: this.axis }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Jb.className = "Softmax";
ae.registerClass(Jb);
function Qi(e, t, n) {
  if (typeof e == "number")
    return ma(e, t);
  if (e.length !== t)
    throw new U(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);
  for (let s = 0; s < t; ++s) {
    let r = e[s];
    if (!JP(r))
      throw new U(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${r}`);
  }
  return e;
}
function gs(e, t, n, s, r = 1) {
  if (e == null)
    return e;
  let a = t + (t - 1) * (r - 1), i;
  return n === "same" ? i = e : i = e - a + 1, Math.floor((i + s - 1) / s);
}
function Ns(e, t, n, s) {
  if (e == null)
    return null;
  if (s === "valid")
    e = e * t + br([n - t, 0]);
  else if (s === "same")
    e = e * t;
  else
    throw new U(`Unsupport padding mode: ${s}.`);
  return e;
}
function ey(e, t) {
  return j(() => (Ct(t), t === "channelsFirst" ? Ge(e, [0, 2, 3, 1]) : e));
}
function F0(e, t) {
  return j(() => (Ct(t), t === "channelsFirst" ? Ge(e, [0, 2, 3, 4, 1]) : e));
}
function jB(e, t, n, s = 1, r = "valid", a, i = 1) {
  return j(() => {
    if (a == null && (a = ys()), Ct(a), e.shape.length !== 3)
      throw new U(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);
    if (t.shape.length !== 3)
      throw new U(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);
    if (n != null && n.shape.length !== 1)
      throw new U(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);
    if (a === "channelsFirst" && (e = Ge(e, [0, 2, 1])), r === "causal")
      throw new Fe("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    let o = sI(e, t, s, r === "same" ? "same" : "valid", "NWC", i);
    return n != null && (o = ws(o, n)), o;
  });
}
function Gx(e, t, n, s = [1, 1], r = "valid", a, i, o = null) {
  return j(() => {
    if (a == null && (a = ys()), Ct(a), e.rank !== 3 && e.rank !== 4)
      throw new U(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);
    if (t.rank !== 3 && t.rank !== 4)
      throw new U(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);
    let u = ey(e, a);
    if (r === "causal")
      throw new Fe("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return u = fa.conv2d({ x: u, filter: t, strides: s, pad: r === "same" ? "same" : "valid", dilations: i, dataFormat: "NHWC", bias: n, activation: o }), a === "channelsFirst" && (u = Ge(u, [0, 3, 1, 2])), u;
  });
}
function KB(e, t, n, s = [1, 1, 1], r = "valid", a, i) {
  return j(() => {
    if (a == null && (a = ys()), Ct(a), e.rank !== 4 && e.rank !== 5)
      throw new U(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);
    if (t.rank !== 4 && t.rank !== 5)
      throw new U(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);
    let o = F0(e, a);
    if (r === "causal")
      throw new Fe("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return o = aI(o, t, s, r === "same" ? "same" : "valid", "NDHWC", i), n != null && (o = ws(o, n)), a === "channelsFirst" && (o = Ge(o, [0, 4, 1, 2, 3])), o;
  });
}
var ty = class extends He {
  constructor(e, t) {
    if (super(t), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", ty.verifyArgs(t), this.rank = e, Bt(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
      throw new Fe(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = Qi(t.kernelSize, e, "kernelSize"), this.strides = Qi(t.strides == null ? 1 : t.strides, e, "strides"), this.padding = t.padding == null ? "valid" : t.padding, Gn(this.padding), this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Ct(this.dataFormat), this.activation = vr(t.activation), this.useBias = t.useBias == null ? true : t.useBias, this.biasInitializer = ht(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = Pt(t.biasConstraint), this.biasRegularizer = ft(t.biasRegularizer), this.activityRegularizer = ft(t.activityRegularizer), this.dilationRate = Qi(t.dilationRate == null ? 1 : t.dilationRate, e, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)
      throw new U(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2)
        throw new U(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3)
        throw new U(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(e) {
    if (Cs("kernelSize" in e, "required key 'kernelSize' not in config"), typeof e.kernelSize != "number" && !Sb(e.kernelSize, "number", 1, 3))
      throw new U(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`);
  }
  getConfig() {
    let e = { kernelSize: this.kernelSize, strides: this.strides, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, activation: yr(this.activation), useBias: this.useBias, biasInitializer: yt(this.biasInitializer), biasRegularizer: at(this.biasRegularizer), activityRegularizer: at(this.activityRegularizer), biasConstraint: Ot(this.biasConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
var Hl = class extends ty {
  constructor(e, t) {
    super(e, t), this.kernel = null, Hl.verifyArgs(t), this.filters = t.filters, Bt(this.filters, "filters"), this.kernelInitializer = ht(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = Pt(t.kernelConstraint), this.kernelRegularizer = ft(t.kernelRegularizer);
  }
  build(e) {
    e = nt(e);
    let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new U(`The channel dimension of the input should be defined. Found ${e[t]}`);
    let n = e[t], s = this.kernelSize.concat([n, this.filters]);
    this.kernel = this.addWeight("kernel", s, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [t]: n } }], this.built = true;
  }
  call(e, t) {
    return j(() => {
      e = Oe(e);
      let n, s = this.bias == null ? null : this.bias.read(), r = jI(this.activation.getClassName());
      if (r != null && this.rank === 2)
        n = Gx(e, this.kernel.read(), s, this.strides, this.padding, this.dataFormat, this.dilationRate, r);
      else {
        if (this.rank === 1)
          n = jB(e, this.kernel.read(), s, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2)
          n = Gx(e, this.kernel.read(), s, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else if (this.rank === 3)
          n = KB(e, this.kernel.read(), s, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else
          throw new Fe("convolutions greater than 3D are not implemented yet.");
        this.activation != null && (n = this.activation.apply(n));
      }
      return n;
    });
  }
  computeOutputShape(e) {
    e = nt(e);
    let t = [], n = this.dataFormat === "channelsLast" ? e.slice(1, e.length - 1) : e.slice(2);
    for (let r = 0; r < n.length; ++r) {
      let a = gs(n[r], this.kernelSize[r], this.padding, this.strides[r], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[r]);
      t.push(a);
    }
    let s = [e[0]];
    return this.dataFormat === "channelsLast" ? (s = s.concat(t), s.push(this.filters)) : (s.push(this.filters), s = s.concat(t)), s;
  }
  getConfig() {
    let e = { filters: this.filters, kernelInitializer: yt(this.kernelInitializer), kernelRegularizer: at(this.kernelRegularizer), kernelConstraint: Ot(this.kernelConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  static verifyArgs(e) {
    if (!("filters" in e) || typeof e.filters != "number" || e.filters < 1)
      throw new U(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`);
  }
};
var O0 = class extends Hl {
  constructor(e) {
    super(2, e), O0.verifyArgs(e);
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.rank, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !Sb(e.kernelSize, "number", 1, 2))
      throw new U(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`);
  }
};
var Lp = O0;
Lp.className = "Conv2D";
ae.registerClass(Lp);
var P0 = class extends Hl {
  constructor(e) {
    super(3, e), P0.verifyArgs(e);
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.rank, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !(Array.isArray(e.kernelSize) && (e.kernelSize.length === 1 || e.kernelSize.length === 3)))
      throw new U(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`);
  }
};
var Bp = P0;
Bp.className = "Conv3D";
ae.registerClass(Bp);
var ny = class extends Lp {
  constructor(e) {
    if (super(e), this.inputSpec = [new Dt({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid")
      throw new U(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e) {
    if (e = nt(e), e.length !== 4)
      throw new U("Input should have rank 4; Received input shape: " + JSON.stringify(e));
    let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new U("The channel dimension of the inputs should be defined. Found `None`.");
    let n = e[t], s = this.kernelSize.concat([this.filters, n]);
    this.kernel = this.addWeight("kernel", s, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [new Dt({ ndim: 4, axes: { [t]: n } })], this.built = true;
  }
  call(e, t) {
    return j(() => {
      let n = Oe(e);
      if (n.shape.length !== 4)
        throw new U(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);
      let s = n.shape, r = s[0], a, i;
      this.dataFormat === "channelsFirst" ? (a = 2, i = 3) : (a = 1, i = 2);
      let o = s[a], u = s[i], l = this.kernelSize[0], c = this.kernelSize[1], p = this.strides[0], d = this.strides[1], h = Ns(o, p, l, this.padding), f = Ns(u, d, c, this.padding), m = [r, h, f, this.filters];
      this.dataFormat !== "channelsLast" && (n = Ge(n, [0, 2, 3, 1]));
      let g = rI(n, this.kernel.read(), m, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (g = Ge(g, [0, 3, 1, 2])), this.bias != null && (g = ws(g, this.bias.read(), this.dataFormat)), this.activation != null && (g = this.activation.apply(g)), g;
    });
  }
  computeOutputShape(e) {
    e = nt(e);
    let t = e.slice(), n, s, r;
    this.dataFormat === "channelsFirst" ? (n = 1, s = 2, r = 3) : (n = 3, s = 1, r = 2);
    let a = this.kernelSize[0], i = this.kernelSize[1], o = this.strides[0], u = this.strides[1];
    return t[n] = this.filters, t[s] = Ns(t[s], o, a, this.padding), t[r] = Ns(t[r], u, i, this.padding), t;
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.dilationRate, e;
  }
};
ny.className = "Conv2DTranspose";
ae.registerClass(ny);
var sy = class extends Bp {
  constructor(e) {
    if (super(e), this.inputSpec = [new Dt({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid")
      throw new U(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e) {
    if (e = nt(e), e.length !== 5)
      throw new U("Input should have rank 5; Received input shape: " + JSON.stringify(e));
    let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new U("The channel dimension of the inputs should be defined. Found `None`.");
    let n = e[t], s = this.kernelSize.concat([this.filters, n]);
    this.kernel = this.addWeight("kernel", s, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [new Dt({ ndim: 5, axes: { [t]: n } })], this.built = true;
  }
  call(e, t) {
    return j(() => {
      let n = Oe(e);
      if (n.shape.length !== 5)
        throw new U(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);
      let s = n.shape, r = s[0], a, i, o;
      this.dataFormat === "channelsFirst" ? (o = 2, a = 3, i = 4) : (o = 1, a = 2, i = 3);
      let u = s[o], l = s[a], c = s[i], p = this.kernelSize[0], d = this.kernelSize[1], h = this.kernelSize[2], f = this.strides[0], m = this.strides[1], g = this.strides[2], b = Ns(u, f, p, this.padding), y = Ns(l, m, d, this.padding), v = Ns(c, g, h, this.padding), x = [r, b, y, v, this.filters];
      this.dataFormat !== "channelsLast" && (n = Ge(n, [0, 2, 3, 4, 1]));
      let k = iR(n, this.kernel.read(), x, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (k = Ge(k, [0, 4, 1, 2, 3])), this.bias !== null && (k = ws(k, this.bias.read(), this.dataFormat)), this.activation !== null && (k = this.activation.apply(k)), k;
    });
  }
  computeOutputShape(e) {
    e = nt(e);
    let t = e.slice(), n, s, r, a;
    this.dataFormat === "channelsFirst" ? (n = 1, s = 2, r = 3, a = 4) : (n = 4, s = 1, r = 2, a = 3);
    let i = this.kernelSize[0], o = this.kernelSize[1], u = this.kernelSize[2], l = this.strides[0], c = this.strides[1], p = this.strides[2];
    return t[n] = this.filters, t[s] = Ns(t[s], l, i, this.padding), t[r] = Ns(t[r], c, o, this.padding), t[a] = Ns(t[a], p, u, this.padding), t;
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.dilationRate, e;
  }
};
sy.className = "Conv3DTranspose";
ae.registerClass(sy);
var z0 = class extends Hl {
  constructor(e, t) {
    if (super(e, t), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, t.filters == null)
      throw new U("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (t.kernelInitializer != null || t.kernelRegularizer != null || t.kernelConstraint != null)
      throw new U("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (t.padding != null && t.padding !== "same" && t.padding !== "valid")
      throw new U(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);
    this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = ht(t.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = ft(t.depthwiseRegularizer), this.depthwiseConstraint = Pt(t.depthwiseConstraint), this.pointwiseInitializer = ht(t.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = ft(t.pointwiseRegularizer), this.pointwiseConstraint = Pt(t.pointwiseConstraint);
  }
  build(e) {
    if (e = nt(e), e.length < this.rank + 2)
      throw new U(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(e)}`);
    let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null || e[t] < 0)
      throw new U(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);
    let n = e[t], s = this.kernelSize.concat([n, this.depthMultiplier]), r = [];
    for (let i = 0; i < this.rank; ++i)
      r.push(1);
    r.push(n * this.depthMultiplier, this.filters);
    let a = true;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", s, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, a, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", r, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, a, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, a, this.biasConstraint) : this.bias = null, this.inputSpec = [new Dt({ ndim: this.rank + 2, axes: { [t]: n } })], this.built = true;
  }
  call(e, t) {
    return j(() => {
      e = Oe(e);
      let n;
      if (this.rank === 1)
        throw new Fe("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (e = Ge(e, [0, 2, 3, 1])), n = f3(e, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (n = ws(n, this.bias.read(), this.dataFormat)), this.activation != null && (n = this.activation.apply(n)), this.dataFormat === "channelsFirst" && (n = Ge(n, [0, 3, 1, 2])), n;
    });
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.rank, delete e.kernelInitializer, delete e.kernelRegularizer, delete e.kernelConstraint, e.depthwiseInitializer = yt(this.depthwiseInitializer), e.pointwiseInitializer = yt(this.pointwiseInitializer), e.depthwiseRegularizer = at(this.depthwiseRegularizer), e.pointwiseRegularizer = at(this.pointwiseRegularizer), e.depthwiseConstraint = Ot(this.depthwiseConstraint), e.pointwiseConstraint = Ot(this.pointwiseConstraint), e;
  }
};
z0.className = "SeparableConv";
var ry = class extends z0 {
  constructor(e) {
    super(2, e);
  }
};
ry.className = "SeparableConv2D";
ae.registerClass(ry);
var M0 = class extends Hl {
  constructor(e) {
    super(1, e), M0.verifyArgs(e), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.rank, delete e.dataFormat, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !Sb(e.kernelSize, "number", 1, 1))
      throw new U(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`);
  }
};
var ay = M0;
ay.className = "Conv1D";
ae.registerClass(ay);
var iy = class extends He {
  constructor(e) {
    super(e), typeof e.cropping == "number" ? this.cropping = [[e.cropping, e.cropping], [e.cropping, e.cropping]] : typeof e.cropping[0] == "number" ? this.cropping = [[e.cropping[0], e.cropping[0]], [e.cropping[1], e.cropping[1]]] : this.cropping = e.cropping, this.dataFormat = e.dataFormat === void 0 ? "channelsLast" : e.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(e) {
    return this.dataFormat === "channelsFirst" ? [e[0], e[1], e[2] - this.cropping[0][0] - this.cropping[0][1], e[3] - this.cropping[1][0] - this.cropping[1][1]] : [e[0], e[1] - this.cropping[0][0] - this.cropping[0][1], e[2] - this.cropping[1][0] - this.cropping[1][1], e[3]];
  }
  call(e, t) {
    return j(() => {
      if (e = Oe(e), this.dataFormat === "channelsLast") {
        let n = Hc(e, this.cropping[0][0], e.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return Hc(n, this.cropping[1][0], e.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        let n = Hc(e, this.cropping[0][0], e.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return Hc(n, this.cropping[1][0], e.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    let e = { cropping: this.cropping, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
iy.className = "Cropping2D";
ae.registerClass(iy);
var oy = class extends He {
  constructor(e) {
    super(e), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = e.size == null ? this.DEFAULT_SIZE : e.size, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Ct(this.dataFormat), this.interpolation = e.interpolation == null ? "nearest" : e.interpolation, YP(this.interpolation);
  }
  computeOutputShape(e) {
    if (this.dataFormat === "channelsFirst") {
      let t = e[2] == null ? null : this.size[0] * e[2], n = e[3] == null ? null : this.size[1] * e[3];
      return [e[0], e[1], t, n];
    } else {
      let t = e[1] == null ? null : this.size[0] * e[1], n = e[2] == null ? null : this.size[1] * e[2];
      return [e[0], t, n, e[3]];
    }
  }
  call(e, t) {
    return j(() => {
      let n = Oe(e), s = n.shape;
      if (this.dataFormat === "channelsFirst") {
        n = Ge(n, [0, 2, 3, 1]);
        let r = this.size[0] * s[2], a = this.size[1] * s[3], i = this.interpolation === "nearest" ? jn.resizeNearestNeighbor(n, [r, a]) : jn.resizeBilinear(n, [r, a]);
        return Ge(i, [0, 3, 1, 2]);
      } else {
        let r = this.size[0] * s[1], a = this.size[1] * s[2];
        return this.interpolation === "nearest" ? jn.resizeNearestNeighbor(n, [r, a]) : jn.resizeBilinear(n, [r, a]);
      }
    });
  }
  getConfig() {
    let e = { size: this.size, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
oy.className = "UpSampling2D";
ae.registerClass(oy);
function XB(e, t, n = [1, 1], s = "valid", r, a) {
  return j(() => {
    r == null && (r = ys()), Ct(r);
    let i = ey(e, r);
    if (e.rank !== 4)
      throw new U(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);
    if (t.rank !== 4)
      throw new U(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);
    return i = mp(i, t, n, s === "same" ? "same" : "valid", "NHWC", a), r === "channelsFirst" && (i = Ge(i, [0, 3, 1, 2])), i;
  });
}
var uy = class extends ty {
  constructor(e) {
    super(2, e), this.depthwiseKernel = null, this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = ht(e.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = Pt(e.depthwiseConstraint), this.depthwiseRegularizer = ft(e.depthwiseRegularizer);
  }
  build(e) {
    if (e = nt(e), e.length < 4)
      throw new U(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);
    let t = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (e[t] == null || e[t] < 0)
      throw new U(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);
    let n = e[t], s = [this.kernelSize[0], this.kernelSize[1], n, this.depthMultiplier];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", s, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [n * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e, t) {
    return j(() => {
      e = Oe(e);
      let n = XB(e, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (n = ws(n, this.bias.read(), this.dataFormat)), this.activation != null && (n = this.activation.apply(n)), n;
    });
  }
  computeOutputShape(e) {
    e = nt(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2], s = this.dataFormat === "channelsFirst" ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier, r = gs(t, this.kernelSize[0], this.padding, this.strides[0]), a = gs(n, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [e[0], s, r, a] : [e[0], r, a, s];
  }
  getConfig() {
    let e = super.getConfig();
    return e.depthMultiplier = this.depthMultiplier, e.depthwiseInitializer = yt(this.depthwiseInitializer), e.depthwiseRegularizer = at(this.depthwiseRegularizer), e.depthwiseConstraint = Ot(this.depthwiseRegularizer), e;
  }
};
uy.className = "DepthwiseConv2D";
ae.registerClass(uy);
function L0(e, t, n, s) {
  if (Array.isArray(e)) {
    if (t != null || n != null)
      throw new U("When inputs is an array, neither initialState or constants should be provided");
    s != null && (n = e.slice(e.length - s, e.length), e = e.slice(0, e.length - s)), e.length > 1 && (t = e.slice(1, e.length)), e = e[0];
  }
  function r(a) {
    return a == null || Array.isArray(a) ? a : [a];
  }
  return t = r(t), n = r(n), { inputs: e, initialState: t, constants: n };
}
function B0(e, t, n, s = false, r, a, i = false, o = false) {
  return j(() => {
    let u = t.shape.length;
    if (u < 3)
      throw new U(`Input should be at least 3D, but is ${u}D.`);
    let l = [1, 0].concat(bs(2, u));
    if (t = Ge(t, l), a != null)
      throw new Fe("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
    i && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), r != null && (r = ce(ce(r, "bool"), "float32"), r.rank === u - 1 && (r = Pn(r, -1)), r = Ge(r, l)), s && (t = Jn(t, 0), r != null && (r = Jn(r, 0)));
    let c = [], p, d = n, h = t.shape[0], f = Fs(t), m;
    r != null && (m = Fs(r));
    for (let b = 0; b < h; ++b) {
      let y = f[b], v = j(() => e(y, d));
      if (r == null)
        p = v[0], d = v[1];
      else {
        let x = j(() => {
          let k = m[b], S = ge(Zn(k), k), $ = ie(V(v[0], k), V(d[0], S)), E = d.map((A, P) => ie(V(v[1][P], k), V(A, S)));
          return { output: $, newStates: E };
        });
        p = x.output, d = x.newStates;
      }
      o && c.push(p);
    }
    let g;
    return o && (g = es(c, 1)), [p, g, d];
  });
}
var V0 = class extends He {
  constructor(e) {
    super(e);
    let t;
    if (e.cell == null)
      throw new U("cell property is missing for the constructor of RNN.");
    if (Array.isArray(e.cell) ? t = new Up({ cells: e.cell }) : t = e.cell, t.stateSize == null)
      throw new U("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = t, this.returnSequences = e.returnSequences == null ? false : e.returnSequences, this.returnState = e.returnState == null ? false : e.returnState, this.goBackwards = e.goBackwards == null ? false : e.goBackwards, this._stateful = e.stateful == null ? false : e.stateful, this.unroll = e.unroll == null ? false : e.unroll, this.supportsMasking = true, this.inputSpec = [new Dt({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  getStates() {
    if (this.states_ == null) {
      let e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return bs(0, e).map((t) => null);
    } else
      return this.states_;
  }
  setStates(e) {
    this.states_ = e;
  }
  computeOutputShape(e) {
    xm(e) && (e = e[0]), e = e;
    let t = this.cell.stateSize;
    Array.isArray(t) || (t = [t]);
    let n = t[0], s;
    if (this.returnSequences ? s = [e[0], e[1], n] : s = [e[0], n], this.returnState) {
      let r = [];
      for (let a of t)
        r.push([e[0], a]);
      return [s].concat(r);
    } else
      return s;
  }
  computeMask(e, t) {
    return j(() => {
      Array.isArray(t) && (t = t[0]);
      let n = this.returnSequences ? t : null;
      if (this.returnState) {
        let s = this.states.map((r) => null);
        return [n].concat(s);
      } else
        return n;
    });
  }
  get states() {
    if (this.states_ == null) {
      let e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, t = [];
      for (let n = 0; n < e; ++n)
        t.push(null);
      return t;
    } else
      return this.states_;
  }
  set states(e) {
    this.states_ = e;
  }
  build(e) {
    if (this.numConstants != null)
      throw new Fe("Constants support is not implemented in RNN yet.");
    xm(e) && (e = e[0]), e = e;
    let n = this.stateful ? e[0] : null, s = e.slice(2);
    this.inputSpec[0] = new Dt({ shape: [n, null, ...s] });
    let r = [e[0]].concat(e.slice(2));
    this.cell.build(r);
    let a;
    if (Array.isArray(this.cell.stateSize) ? a = this.cell.stateSize : a = [this.cell.stateSize], this.stateSpec != null) {
      if (!w.arraysEqual(this.stateSpec.map((i) => i.shape[i.shape.length - 1]), a))
        throw new U(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else
      this.stateSpec = a.map((i) => new Dt({ shape: [null, i] }));
    this.stateful && this.resetStates();
  }
  resetStates(e, t = false) {
    j(() => {
      if (!this.stateful)
        throw new Vs("Cannot call resetStates() on an RNN Layer that is not stateful.");
      let n = this.inputSpec[0].shape[0];
      if (n == null)
        throw new U("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((s) => $t([n, s])) : this.states_ = [$t([n, this.cell.stateSize])];
      else if (e == null)
        Re(this.states_), this.keptStates != null && (Re(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((s) => $t([n, s])) : this.states_[0] = $t([n, this.cell.stateSize]);
      else {
        if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length)
          throw new U(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
        t === true ? this.keptStates.push(this.states_.slice()) : Re(this.states_);
        for (let s = 0; s < this.states_.length; ++s) {
          let r = e[s], a = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[s] : this.cell.stateSize, i = [n, a];
          if (!w.arraysEqual(r.shape, i))
            throw new U(`State ${s} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${r.shape}`);
          this.states_[s] = r;
        }
      }
      this.states_ = this.states_.map((s) => Ht(s.clone()));
    });
  }
  apply(e, t) {
    let n = t == null ? null : t.initialState, s = t == null ? null : t.constants;
    t == null && (t = {});
    let r = L0(e, n, s, this.numConstants);
    e = r.inputs, n = r.initialState, s = r.constants;
    let a = [], i = [];
    if (n != null) {
      t.initialState = n, a = a.concat(n), this.stateSpec = [];
      for (let u of n)
        this.stateSpec.push(new Dt({ shape: u.shape }));
      i = i.concat(this.stateSpec);
    }
    if (s != null && (t.constants = s, a = a.concat(s), this.numConstants = s.length), a[0] instanceof $s) {
      let u = [e].concat(a), l = this.inputSpec.concat(i), c = this.inputSpec;
      this.inputSpec = l;
      let p = super.apply(u, t);
      return this.inputSpec = c, p;
    } else
      return super.apply(e, t);
  }
  call(e, t) {
    return j(() => {
      let n = t == null ? null : t.mask, s = t == null ? null : t.training, r = t == null ? null : t.initialState;
      e = Oe(e), r == null && (this.stateful ? r = this.states_ : r = this.getInitialState(e));
      let a = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (r.length !== a)
        throw new U(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      let i = { training: s }, u = B0((h, f) => {
        let m = this.cell.call([h].concat(f), i);
        return [m[0], m.slice(1)];
      }, e, r, this.goBackwards, n, null, this.unroll, this.returnSequences), l = u[0], c = u[1], p = u[2];
      this.stateful && this.resetStates(p, s);
      let d = this.returnSequences ? c : l;
      return this.returnState ? [d].concat(p) : d;
    });
  }
  getInitialState(e) {
    return j(() => {
      let t = $t(e.shape);
      return t = ve(t, [1, 2]), t = Bl(t), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((n) => n > 1 ? ym(t, [1, n]) : t) : this.cell.stateSize > 1 ? [ym(t, [1, this.cell.stateSize])] : [t];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.cell != null && this.cell.setFastWeightInitDuringBuild(e);
  }
  getConfig() {
    let e = super.getConfig(), t = { returnSequences: this.returnSequences, returnState: this.returnState, goBackwards: this.goBackwards, stateful: this.stateful, unroll: this.unroll };
    this.numConstants != null && (t.numConstants = this.numConstants);
    let n = this.cell.getConfig();
    return this.getClassName() === V0.className && (t.cell = { className: this.cell.getClassName(), config: n }), { ...n, ...e, ...t };
  }
  static fromConfig(e, t, n = {}) {
    let s = t.cell, r = ms(s, n);
    return new e(Object.assign(t, { cell: r }));
  }
};
var Er = V0;
Er.className = "RNN";
ae.registerClass(Er);
var ql = class extends He {
};
var Vp = class extends ql {
  constructor(e) {
    super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, Bt(this.units, "units"), this.activation = vr(e.activation == null ? this.DEFAULT_ACTIVATION : e.activation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = ht(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = ht(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = ht(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = ft(e.kernelRegularizer), this.recurrentRegularizer = ft(e.recurrentRegularizer), this.biasRegularizer = ft(e.biasRegularizer), this.kernelConstraint = Pt(e.kernelConstraint), this.recurrentConstraint = Pt(e.recurrentConstraint), this.biasConstraint = Pt(e.biasConstraint), this.dropout = eo([1, br([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = eo([1, br([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.dropoutFunc = e.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    e = nt(e), this.kernel = this.addWeight("kernel", [e[e.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e, t) {
    return j(() => {
      if (e = e, e.length !== 2)
        throw new U(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);
      let n = e[1];
      e = e[0];
      let s = t.training == null ? false : t.training;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = xr({ ones: () => Zn(e), rate: this.dropout, training: s, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = xr({ ones: () => Zn(n), rate: this.recurrentDropout, training: s, dropoutFunc: this.dropoutFunc }));
      let r, a = this.dropoutMask, i = this.recurrentDropoutMask;
      a != null ? r = Es(V(e, a), this.kernel.read()) : r = Es(e, this.kernel.read()), this.bias != null && (r = ws(r, this.bias.read())), i != null && (n = V(n, i));
      let o = ie(r, Es(n, this.recurrentKernel.read()));
      return this.activation != null && (o = this.activation.apply(o)), [o, o];
    });
  }
  getConfig() {
    let e = super.getConfig(), t = { units: this.units, activation: yr(this.activation), useBias: this.useBias, kernelInitializer: yt(this.kernelInitializer), recurrentInitializer: yt(this.recurrentInitializer), biasInitializer: yt(this.biasInitializer), kernelRegularizer: at(this.kernelRegularizer), recurrentRegularizer: at(this.recurrentRegularizer), biasRegularizer: at(this.biasRegularizer), activityRegularizer: at(this.activityRegularizer), kernelConstraint: Ot(this.kernelConstraint), recurrentConstraint: Ot(this.recurrentConstraint), biasConstraint: Ot(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout };
    return { ...e, ...t };
  }
};
Vp.className = "SimpleRNNCell";
ae.registerClass(Vp);
var ly = class extends Er {
  constructor(e) {
    e.cell = new Vp(e), super(e);
  }
  call(e, t) {
    return j(() => {
      this.cell.dropoutMask != null && (Re(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Re(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      let n = t == null ? null : t.mask, s = t == null ? null : t.training, r = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: s, initialState: r });
    });
  }
  static fromConfig(e, t) {
    return new e(t);
  }
};
ly.className = "SimpleRNN";
ae.registerClass(ly);
var Wp = class extends ql {
  constructor(e) {
    if (super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.resetAfter)
      throw new U("GRUCell does not support reset_after parameter set to true.");
    this.units = e.units, Bt(this.units, "units"), this.activation = vr(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = vr(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = ht(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = ht(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = ht(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = ft(e.kernelRegularizer), this.recurrentRegularizer = ft(e.recurrentRegularizer), this.biasRegularizer = ft(e.biasRegularizer), this.kernelConstraint = Pt(e.kernelConstraint), this.recurrentConstraint = Pt(e.recurrentConstraint), this.biasConstraint = Pt(e.biasConstraint), this.dropout = eo([1, br([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = eo([1, br([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    e = nt(e);
    let t = e[e.length - 1];
    this.kernel = this.addWeight("kernel", [t, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e, t) {
    return j(() => {
      if (e = e, e.length !== 2)
        throw new U(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);
      let n = t.training == null ? false : t.training, s = e[1];
      e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = xr({ ones: () => Zn(e), rate: this.dropout, training: n, count: 3, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = xr({ ones: () => Zn(s), rate: this.recurrentDropout, training: n, count: 3, dropoutFunc: this.dropoutFunc }));
      let r = this.dropoutMask, a = this.recurrentDropoutMask, i, o, u;
      0 < this.dropout && this.dropout < 1 && (e = V(e, r[0]));
      let l = Es(e, this.kernel.read());
      this.useBias && (l = ws(l, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (s = V(s, a[0]));
      let c = this.recurrentKernel.read(), [p, d] = Bn(c, [2 * this.units, this.units], c.rank - 1), h = Es(s, p), [f, m, g] = Bn(l, 3, l.rank - 1), [b, y] = Bn(h, 2, h.rank - 1);
      i = this.recurrentActivation.apply(ie(f, b)), o = this.recurrentActivation.apply(ie(m, y));
      let v = Es(V(o, s), d);
      u = this.activation.apply(ie(g, v));
      let x = ie(V(i, s), V(ie(1, kt(i)), u));
      return [x, x];
    });
  }
  getConfig() {
    let e = super.getConfig(), t = { units: this.units, activation: yr(this.activation), recurrentActivation: yr(this.recurrentActivation), useBias: this.useBias, kernelInitializer: yt(this.kernelInitializer), recurrentInitializer: yt(this.recurrentInitializer), biasInitializer: yt(this.biasInitializer), kernelRegularizer: at(this.kernelRegularizer), recurrentRegularizer: at(this.recurrentRegularizer), biasRegularizer: at(this.biasRegularizer), activityRegularizer: at(this.activityRegularizer), kernelConstraint: Ot(this.kernelConstraint), recurrentConstraint: Ot(this.recurrentConstraint), biasConstraint: Ot(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation, resetAfter: false };
    return { ...e, ...t };
  }
};
Wp.className = "GRUCell";
ae.registerClass(Wp);
var cy = class extends Er {
  constructor(e) {
    e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new Wp(e), super(e);
  }
  call(e, t) {
    return j(() => {
      this.cell.dropoutMask != null && (Re(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Re(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      let n = t == null ? null : t.mask, s = t == null ? null : t.training, r = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: s, initialState: r });
    });
  }
  static fromConfig(e, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e(t);
  }
};
cy.className = "GRU";
ae.registerClass(cy);
var jl = class extends ql {
  constructor(e) {
    super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, Bt(this.units, "units"), this.activation = vr(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = vr(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = ht(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = ht(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = ht(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = e.unitForgetBias, this.kernelRegularizer = ft(e.kernelRegularizer), this.recurrentRegularizer = ft(e.recurrentRegularizer), this.biasRegularizer = ft(e.biasRegularizer), this.kernelConstraint = Pt(e.kernelConstraint), this.recurrentConstraint = Pt(e.recurrentConstraint), this.biasConstraint = Pt(e.biasConstraint), this.dropout = eo([1, br([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = eo([1, br([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    var t;
    e = nt(e);
    let n = e[e.length - 1];
    this.kernel = this.addWeight("kernel", [n, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
    let s;
    if (this.useBias) {
      if (this.unitForgetBias) {
        let r = this.biasInitializer, a = this.units;
        s = new (t = class extends ns {
          apply(i, o) {
            let u = r.apply([a]), l = new _p().apply([a]), c = r.apply([a * 2]);
            return kx(kx(u, l), c);
          }
        }, t.className = "CustomInit", t)();
      } else
        s = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.units * 4], null, s, this.biasRegularizer, true, this.biasConstraint);
    } else
      this.bias = null;
    this.built = true;
  }
  call(e, t) {
    return j(() => {
      let n = t.training == null ? false : t.training;
      if (e = e, e.length !== 3)
        throw new U(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
      let s = e[1], r = e[2];
      e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = xr({ ones: () => Zn(e), rate: this.dropout, training: n, count: 4, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = xr({ ones: () => Zn(s), rate: this.recurrentDropout, training: n, count: 4, dropoutFunc: this.dropoutFunc }));
      let a = this.dropoutMask, i = this.recurrentDropoutMask, o, u, l, c;
      0 < this.dropout && this.dropout < 1 && (e = V(e, a[0]));
      let p = Es(e, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (s = V(s, i[0])), p = ie(p, Es(s, this.recurrentKernel.read())), this.useBias && (p = ws(p, this.bias.read()));
      let [d, h, f, m] = Bn(p, 4, p.rank - 1);
      o = this.recurrentActivation.apply(d), u = this.recurrentActivation.apply(h), l = ie(V(u, r), V(o, this.activation.apply(f))), c = this.recurrentActivation.apply(m);
      let g = V(c, this.activation.apply(l));
      return [g, g, l];
    });
  }
  getConfig() {
    let e = super.getConfig(), t = { units: this.units, activation: yr(this.activation), recurrentActivation: yr(this.recurrentActivation), useBias: this.useBias, kernelInitializer: yt(this.kernelInitializer), recurrentInitializer: yt(this.recurrentInitializer), biasInitializer: yt(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: at(this.kernelRegularizer), recurrentRegularizer: at(this.recurrentRegularizer), biasRegularizer: at(this.biasRegularizer), activityRegularizer: at(this.activityRegularizer), kernelConstraint: Ot(this.kernelConstraint), recurrentConstraint: Ot(this.recurrentConstraint), biasConstraint: Ot(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation };
    return { ...e, ...t };
  }
};
jl.className = "LSTMCell";
ae.registerClass(jl);
var dy = class extends Er {
  constructor(e) {
    e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new jl(e), super(e);
  }
  call(e, t) {
    return j(() => {
      this.cell.dropoutMask != null && (Re(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Re(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      let n = t == null ? null : t.mask, s = t == null ? null : t.training, r = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: s, initialState: r });
    });
  }
  static fromConfig(e, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e(t);
  }
};
dy.className = "LSTM";
ae.registerClass(dy);
var Up = class extends ql {
  constructor(e) {
    super(e), this.cells = e.cells;
  }
  get stateSize() {
    let e = [];
    for (let t of this.cells.slice().reverse())
      Array.isArray(t.stateSize) ? e.push(...t.stateSize) : e.push(t.stateSize);
    return e;
  }
  call(e, t) {
    return j(() => {
      e = e;
      let n = e.slice(1), s = [];
      for (let i of this.cells.slice().reverse())
        Array.isArray(i.stateSize) ? s.push(n.splice(0, i.stateSize.length)) : s.push(n.splice(0, 1));
      s.reverse();
      let r = [], a;
      for (let i = 0; i < this.cells.length; ++i) {
        let o = this.cells[i];
        n = s[i], i === 0 ? a = [e[0]].concat(n) : a = [a[0]].concat(n), a = o.call(a, t), r.push(a.slice(1));
      }
      n = [];
      for (let i of r.slice().reverse())
        n.push(...i);
      return [a[0]].concat(n);
    });
  }
  build(e) {
    xm(e) && (e = e[0]), e = e;
    let t;
    this.cells.forEach((n, s) => {
      ta(`RNNCell_${s}`, () => {
        n.build(e), Array.isArray(n.stateSize) ? t = n.stateSize[0] : t = n.stateSize, e = [e[0], t];
      });
    }), this.built = true;
  }
  getConfig() {
    let e = super.getConfig(), t = (r) => ({ className: r.getClassName(), config: r.getConfig() }), s = { cells: this.cells.map(t) };
    return { ...e, ...s };
  }
  static fromConfig(e, t, n = {}) {
    let s = [];
    for (let r of t.cells)
      s.push(ms(r, n));
    return new e({ cells: s });
  }
  get trainableWeights() {
    if (!this.trainable)
      return [];
    let e = [];
    for (let t of this.cells)
      e.push(...t.trainableWeights);
    return e;
  }
  get nonTrainableWeights() {
    let e = [];
    for (let t of this.cells)
      e.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      let t = [];
      for (let n of this.cells)
        t.push(...n.trainableWeights);
      return t.concat(e);
    }
    return e;
  }
  getWeights() {
    let e = [];
    for (let t of this.cells)
      e.push(...t.weights);
    return wm(e);
  }
  setWeights(e) {
    let t = [];
    for (let n of this.cells) {
      let s = n.weights.length, r = e.splice(s);
      for (let a = 0; a < n.weights.length; ++a)
        t.push([n.weights[a], r[a]]);
    }
    Db(t);
  }
};
Up.className = "StackedRNNCells";
ae.registerClass(Up);
function xr(e) {
  let { ones: t, rate: n, training: s = false, count: r = 1, dropoutFunc: a } = e, i = () => a != null ? a(t(), n) : e0(t(), n), o = () => Wl(i, t, s);
  return !r || r <= 1 ? Ht(o().clone()) : Array(r).fill(void 0).map(o).map((l) => Ht(l.clone()));
}
var W0 = class extends Er {
  constructor(e) {
    if (e.unroll)
      throw new Fe("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(e.cell))
      throw new Fe("It is not possible at the moment to stack convolutional cells.");
    super(e), this.inputSpec = [new Dt({ ndim: 5 })];
  }
  call(e, t) {
    return j(() => {
      if (this.cell.dropoutMask != null && (Re(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Re(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), t && t.constants)
        throw new U("ConvRNN2D cell does not support constants");
      let n = t == null ? null : t.mask, s = t == null ? null : t.training, r = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: s, initialState: r });
    });
  }
  computeOutputShape(e) {
    let t = this.computeSingleOutputShape(e);
    return this.returnSequences || (t = [t[0], ...t.slice(2)]), this.returnState && (t = [t, ...Array(2).fill([e[0], ...t.slice(-3)])]), t;
  }
  getInitialState(e) {
    return j(() => {
      let { stateSize: t } = this.cell, n = e.shape, s = this.computeSingleOutputShape(n), r = [s[0], ...s.slice(2)], a = $t(r);
      return Array.isArray(t) ? Array(t.length).fill(a) : [a];
    });
  }
  resetStates(e, t = false) {
    j(() => {
      if (!this.stateful)
        throw new Vs("Cannot call resetStates() on an RNN Layer that is not stateful.");
      let n = this.inputSpec[0].shape, s = this.computeSingleOutputShape(n), r = [s[0], ...s.slice(2)];
      if (n[0] == null)
        throw new U("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => $t(r)) : this.states_ = [$t(r)];
      else if (e == null)
        Re(this.states_), this.keptStates != null && (Re(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => $t(r)) : this.states_[0] = $t(r);
      else {
        if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length)
          throw new U(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
        t ? this.keptStates.push(this.states_.slice()) : Re(this.states_);
        for (let i = 0; i < this.states_.length; ++i) {
          let o = e[i], u = r;
          if (!w.arraysEqual(o.shape, u))
            throw new U(`State ${i} is incompatible with layer ${this.name}: expected shape=${u}, received shape=${o.shape}`);
          this.states_[i] = o;
        }
      }
      this.states_ = this.states_.map((i) => Ht(i.clone()));
    });
  }
  computeSingleOutputShape(e) {
    let { dataFormat: t, filters: n, kernelSize: s, padding: r, strides: a, dilationRate: i } = this.cell, o = t === "channelsFirst", u = e[o ? 3 : 2], l = e[o ? 4 : 3], c = gs(u, s[0], r, a[0], i[0]), p = gs(l, s[1], r, a[1], i[1]);
    return [...e.slice(0, 2), ...o ? [n, c, p] : [c, p, n]];
  }
};
W0.className = "ConvRNN2D";
var Gp = class extends jl {
  constructor(e) {
    let { filters: t, kernelSize: n, strides: s, padding: r, dataFormat: a, dilationRate: i } = e;
    super({ ...e, units: t }), this.filters = t, Bt(this.filters, "filters"), this.kernelSize = Qi(n, 2, "kernelSize"), this.kernelSize.forEach((o) => Bt(o, "kernelSize")), this.strides = Qi(s || 1, 2, "strides"), this.strides.forEach((o) => Bt(o, "strides")), this.padding = r || "valid", Gn(this.padding), this.dataFormat = a || "channelsLast", Ct(this.dataFormat), this.dilationRate = Qi(i || 1, 2, "dilationRate"), this.dilationRate.forEach((o) => Bt(o, "dilationRate"));
  }
  build(e) {
    var t;
    e = nt(e);
    let n = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[n] == null)
      throw new U(`The channel dimension of the input should be defined. Found ${e[n]}`);
    let s = e[n], r = 4, a = this.kernelSize.concat([s, this.filters * r]);
    this.kernel = this.addWeight("kernel", a, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    let i = this.kernelSize.concat([this.filters, this.filters * r]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", i, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias) {
      let o;
      if (this.unitForgetBias) {
        let u = this.biasInitializer, l = this.filters;
        o = new (t = class extends ns {
          apply(c, p) {
            let d = u.apply([l]), h = Mn([l]), f = u.apply([l * 2]);
            return Cb([d, h, f]);
          }
        }, t.className = "CustomInit", t)();
      } else
        o = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.filters * r], null, o, this.biasRegularizer, true, this.biasConstraint);
    }
    this.built = true;
  }
  call(e, t) {
    return j(() => {
      if (e.length !== 3)
        throw new U(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
      let n = t.training || false, s = e[0], r = e[1], a = e[2], i = 4;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = xr({ ones: () => Zn(s), rate: this.dropout, training: n, count: i, dropoutFunc: this.dropoutFunc }));
      let o = this.dropoutMask, u = (Z, te, ee) => !te || !te[ee] ? Z : V(te[ee], Z), l = u(s, o, 0), c = u(s, o, 1), p = u(s, o, 2), d = u(s, o, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = xr({ ones: () => Zn(r), rate: this.recurrentDropout, training: n, count: i, dropoutFunc: this.dropoutFunc }));
      let h = this.recurrentDropoutMask, f = u(r, h, 0), m = u(r, h, 1), g = u(r, h, 2), b = u(r, h, 3), y = 3, [v, x, k, S] = Bn(this.kernel.read(), i, y), [$, E, A, P] = this.useBias ? Bn(this.bias.read(), i) : [null, null, null, null];
      l = this.inputConv(l, v, $, this.padding), c = this.inputConv(c, x, E, this.padding), p = this.inputConv(p, k, A, this.padding), d = this.inputConv(d, S, P, this.padding);
      let [R, F, T, z] = Bn(this.recurrentKernel.read(), i, y);
      f = this.recurrentConv(f, R), m = this.recurrentConv(m, F), g = this.recurrentConv(g, T), b = this.recurrentConv(b, z);
      let W = this.recurrentActivation.apply(ie(l, f)), q = this.recurrentActivation.apply(ie(c, m)), K = ie(V(q, a), V(W, this.activation.apply(ie(p, g)))), Y = V(this.recurrentActivation.apply(ie(d, b)), this.activation.apply(K));
      return [Y, Y, K];
    });
  }
  getConfig() {
    let { units: e, ...t } = super.getConfig(), n = { filters: this.filters, kernelSize: this.kernelSize, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, strides: this.strides };
    return { ...t, ...n };
  }
  inputConv(e, t, n, s) {
    let r = da(e, t, this.strides, s || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return n ? ws(r, n, this.dataFormat) : r;
  }
  recurrentConv(e, t) {
    return da(e, t, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
};
Gp.className = "ConvLSTM2DCell";
ae.registerClass(Gp);
var py = class extends W0 {
  constructor(e) {
    let t = new Gp(e);
    super({ ...e, cell: t });
  }
  static fromConfig(e, t) {
    return new e(t);
  }
};
py.className = "ConvLSTM2D";
ae.registerClass(py);
var Hp = class extends He {
  constructor(e) {
    super(e), this.rate = Math.max(Math.min(e.rate, 1), 0), this.noiseShape = e.noiseShape, this.seed = e.seed, this.supportsMasking = true;
  }
  getNoiseShape(e) {
    if (this.noiseShape == null)
      return this.noiseShape;
    let t = e.shape, n = [];
    for (let s = 0; s < this.noiseShape.length; ++s)
      n.push(this.noiseShape[s] == null ? t[s] : this.noiseShape[s]);
    return n;
  }
  call(e, t) {
    return j(() => {
      this.invokeCallHook(e, t);
      let n = Oe(e);
      if (0 < this.rate && this.rate < 1) {
        let s = t.training == null ? false : t.training, r = this.getNoiseShape(n);
        return Wl(() => e0(n, this.rate, r, this.seed), () => n, s);
      }
      return e;
    });
  }
  getConfig() {
    let e = { rate: this.rate, noiseShape: this.noiseShape, seed: this.seed }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  dispose() {
    return super.dispose();
  }
};
Hp.className = "Dropout";
ae.registerClass(Hp);
var hy = class extends Hp {
  constructor(e) {
    super(e), this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(e) {
    let t = e.shape;
    return [t[0], 1, t[2]];
  }
};
hy.className = "SpatialDropout1D";
ae.registerClass(hy);
var fy = class extends He {
  constructor(e) {
    if (super(e), this.activation = null, this.useBias = true, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.batchInputShape == null && e.inputShape == null && e.inputDim != null) {
      let t = null;
      e.batchSize != null && (t = e.batchSize), this.batchInputShape = [t, e.inputDim];
    }
    this.units = e.units, Bt(this.units, "units"), this.activation = vr(e.activation), e.useBias != null && (this.useBias = e.useBias), this.kernelInitializer = ht(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = ht(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = Pt(e.kernelConstraint), this.biasConstraint = Pt(e.biasConstraint), this.kernelRegularizer = ft(e.kernelRegularizer), this.biasRegularizer = ft(e.biasRegularizer), this.activityRegularizer = ft(e.activityRegularizer), this.supportsMasking = true, this.inputSpec = [{ minNDim: 2 }];
  }
  build(e) {
    e = nt(e);
    let t = e[e.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [t, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: t } }], this.built = true;
  }
  computeOutputShape(e) {
    e = nt(e);
    let t = e.slice();
    return t[t.length - 1] = this.units, t;
  }
  call(e, t) {
    return j(() => {
      this.invokeCallHook(e, t);
      let n = Oe(e), s = jI(this.activation.getClassName()), r;
      return s != null ? r = Es(n, this.kernel.read(), s, this.bias ? this.bias.read() : null) : (r = Es(n, this.kernel.read()), this.bias != null && (r = ws(r, this.bias.read())), this.activation != null && (r = this.activation.apply(r))), r;
    });
  }
  getConfig() {
    let e = { units: this.units, activation: yr(this.activation), useBias: this.useBias, kernelInitializer: yt(this.kernelInitializer), biasInitializer: yt(this.biasInitializer), kernelRegularizer: at(this.kernelRegularizer), biasRegularizer: at(this.biasRegularizer), activityRegularizer: at(this.activityRegularizer), kernelConstraint: Ot(this.kernelConstraint), biasConstraint: Ot(this.biasConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
fy.className = "Dense";
ae.registerClass(fy);
var my = class extends He {
  constructor(e) {
    e = e || {}, super(e), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = e.dataFormat;
  }
  computeOutputShape(e) {
    e = nt(e);
    for (let t of e.slice(1))
      if (t == null)
        throw new U(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [e[0], pr(e, 1)];
  }
  call(e, t) {
    return j(() => {
      this.invokeCallHook(e, t);
      let n = Oe(e);
      if (this.dataFormat === "channelsFirst" && n.rank > 1) {
        let s = [0];
        for (let r = 2; r < n.rank; ++r)
          s.push(r);
        s.push(1), n = Ge(n, s);
      }
      return nz(n);
    });
  }
  getConfig() {
    let e = {};
    this.dataFormat != null && (e.dataFormat = this.dataFormat);
    let t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
my.className = "Flatten";
ae.registerClass(my);
var gy = class extends He {
  constructor(e) {
    super(e), this.supportsMasking = true, this.activation = vr(e.activation);
  }
  call(e, t) {
    return j(() => {
      this.invokeCallHook(e, t);
      let n = Oe(e);
      return this.activation.apply(n);
    });
  }
  getConfig() {
    let e = { activation: yr(this.activation) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
gy.className = "Activation";
ae.registerClass(gy);
var by = class extends He {
  constructor(e) {
    super(e), this.n = e.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(e) {
    return [e[0], this.n, e[1]];
  }
  call(e, t) {
    return j(() => (e = Oe(e), ez(e, this.n)));
  }
  getConfig() {
    let e = { n: this.n }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
by.className = "RepeatVector";
ae.registerClass(by);
var yy = class extends He {
  constructor(e) {
    super(e), this.targetShape = e.targetShape;
    for (let t = 0; t < this.targetShape.length; ++t)
      this.isUnknown(this.targetShape[t]) && (this.targetShape[t] = null);
  }
  isUnknown(e) {
    return e < 0 || e == null;
  }
  fixUnknownDimension(e, t) {
    let n = "Total size of new array must be unchanged.", s = t.slice(), r = 1, a = null;
    for (let o = 0; o < s.length; ++o) {
      let u = s[o];
      if (this.isUnknown(u))
        if (a === null)
          a = o;
        else
          throw new U("Can only specifiy one unknown dimension.");
      else
        r *= u;
    }
    let i = pr(e);
    if (a !== null) {
      if (r === 0 || i % r !== 0)
        throw new U(n);
      s[a] = i / r;
    } else if (i !== r)
      throw new U(n);
    return s;
  }
  computeOutputShape(e) {
    let t = false;
    for (let n = 0; n < e.length; ++n)
      if (this.isUnknown(e[n])) {
        t = true;
        break;
      }
    return t ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape));
  }
  call(e, t) {
    return j(() => {
      this.invokeCallHook(e, t);
      let n = Oe(e), s = n.shape, r = s.slice(0, 1).concat(this.fixUnknownDimension(s.slice(1), this.targetShape));
      return G(n, r);
    });
  }
  getConfig() {
    let e = { targetShape: this.targetShape }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
yy.className = "Reshape";
ae.registerClass(yy);
var vy = class extends He {
  constructor(e) {
    if (super(e), e.dims == null)
      throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(e.dims))
      throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);
    let t = bs(1, e.dims.length + 1);
    if (!w.arraysEqual(e.dims.slice().sort(), t))
      throw new Error("Invalid permutation `dims`: " + JSON.stringify(e.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = e.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new Dt({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(e) {
    e = nt(e);
    let t = e.slice();
    return this.dims.forEach((n, s) => {
      t[s + 1] = e[n];
    }), t;
  }
  call(e, t) {
    return Ge(Oe(e), this.dimsIncludingBatch);
  }
  getConfig() {
    let e = { dims: this.dims }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
vy.className = "Permute";
ae.registerClass(vy);
var xy = class extends He {
  constructor(e) {
    super(e == null ? {} : e), this.supportsMasking = true, e != null ? this.maskValue = e.maskValue == null ? 0 : e.maskValue : this.maskValue = 0;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = super.getConfig(), t = { maskValue: this.maskValue };
    return Object.assign(t, e), t;
  }
  computeMask(e, t) {
    let n = Oe(e), s = -1;
    return hm(Yu(n, this.maskValue), s);
  }
  call(e, t) {
    return j(() => {
      this.invokeCallHook(e, t);
      let n = Oe(e), s = -1, r = true, a = hm(Yu(n, this.maskValue), s, r);
      return V(n, ce(a, n.dtype));
    });
  }
};
xy.className = "Masking";
ae.registerClass(xy);
var wy = class extends He {
  constructor(e) {
    if (super(e), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", e.batchInputShape == null && e.inputShape == null) {
      let t = null;
      e.batchSize != null && (t = e.batchSize), e.inputLength == null ? this.batchInputShape = [t, null] : this.batchInputShape = [t].concat(dt(e.inputLength));
    }
    this.inputDim = e.inputDim, Bt(this.inputDim, "inputDim"), this.outputDim = e.outputDim, Bt(this.outputDim, "outputDim"), this.embeddingsInitializer = ht(e.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = ft(e.embeddingsRegularizer), this.activityRegularizer = ft(e.activityRegularizer), this.embeddingsConstraint = Pt(e.embeddingsConstraint), this.maskZero = e.maskZero, this.supportsMasking = e.maskZero, this.inputLength = e.inputLength;
  }
  build(e) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint), this.built = true;
  }
  warnOnIncompatibleInputShape(e) {
  }
  computeMask(e, t) {
    return j(() => this.maskZero ? (e = Oe(e), Yu(e, je(e))) : null);
  }
  computeOutputShape(e) {
    if (e = nt(e), this.inputLength == null)
      return [...e, this.outputDim];
    let t = dt(this.inputLength);
    if (t.length !== e.length - 1)
      throw new U(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
    {
      let n = 0;
      for (let s = 0; s < t.length; ++s) {
        let r = t[s], a = e[s + 1];
        if (r != null && a != null && r !== a)
          throw new U(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
        r == null && (t[n] = a), n++;
      }
    }
    return [e[0], ...t, this.outputDim];
  }
  call(e, t) {
    return j(() => {
      this.invokeCallHook(e, t);
      let n = Oe(e);
      n.dtype !== "int32" && (n = Tp(n, "int32"));
      let s = JI(this.embeddings.read(), G(n, [n.size]));
      return G(s, nt(this.computeOutputShape(n.shape)));
    });
  }
  getConfig() {
    let e = { inputDim: this.inputDim, outputDim: this.outputDim, embeddingsInitializer: yt(this.embeddingsInitializer), embeddingsRegularizer: at(this.embeddingsRegularizer), activityRegularizer: at(this.activityRegularizer), embeddingsConstraint: Ot(this.embeddingsConstraint), maskZero: this.maskZero, inputLength: this.inputLength }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
wy.className = "Embedding";
ae.registerClass(wy);
var xi = class extends He {
  constructor(e) {
    super(e || {}), this.supportsMasking = true;
  }
  mergeFunction(e) {
    throw new Fe();
  }
  computeElementwiseOpOutputShape(e, t) {
    if (e == null || t == null)
      return null;
    if (e.length < t.length)
      return this.computeElementwiseOpOutputShape(t, e);
    if (t.length === 0)
      return e;
    let n = e.slice(0, e.length - t.length);
    for (let s = 0; s < t.length; ++s) {
      let r = e[e.length - t.length + s], a = t[s];
      if (r == null || a == null || r < 0 || a < 0)
        n.push(null);
      else if (r === 1)
        n.push(a);
      else if (a === 1)
        n.push(r);
      else {
        if (r !== a)
          throw new U("Operands could not be broadcast together with shapes " + JSON.stringify(e) + " " + JSON.stringify(t));
        n.push(r);
      }
    }
    return n;
  }
  build(e) {
    if (Array.isArray(e) && !Array.isArray(e[0]) && (e = [nt(e)]), e = e, e.length < 2)
      throw new U(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);
    let t = [];
    for (let r of e)
      r != null && r[0] !== null && t.push(r[0]);
    if (t = dr(t), t.length > 1)
      throw new U(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);
    let n = e[0] == null ? null : e[0].slice(1);
    for (let r = 1; r < e.length; ++r) {
      let a = e[r] == null ? null : e[r].slice(1);
      n = this.computeElementwiseOpOutputShape(n, a);
    }
    let s = e.map((r) => r.length);
    e.indexOf(null) === -1 && dr(s).length === 1 ? this.reshapeRequired = false : this.reshapeRequired = true;
  }
  call(e, t) {
    return j(() => {
      if (e = e, this.reshapeRequired) {
        let n = [], s = e.map((r) => r.rank);
        if (s.indexOf(null) === -1) {
          let r = br(s);
          for (let a of e) {
            let i = a.rank;
            for (let o = 0; o < r - i; ++o)
              a = Bl(a, 1);
            n.push(a);
          }
          return this.mergeFunction(n);
        } else {
          let r = false;
          for (let o of e) {
            let u = o.rank;
            if (u == null) {
              let l = o.shape, c = l[0], p = l.slice(1).concat([c]), d = G(o, [c].concat(pr(l.slice(1))));
              d = Ge(d, [1, 0]), d = G(d, p), n.push(d), r = true;
            } else if (u > 1) {
              let l = bs(1, u).concat([0]);
              n.push(Ge(o, l)), r = true;
            } else
              n.push(o);
          }
          let a = this.mergeFunction(n), i = a.rank;
          if (r) {
            if (i == null) {
              let o = a.shape, u = o.length, l = o[u - 1], c = [l].concat(o.slice(0, o.length - 1));
              a = G(Ge(G(a, [-1, l]), [1, 0]), c);
            } else if (i > 1) {
              let o = [i - 1].concat(bs(0, i - 1));
              a = Ge(a, o);
            }
          }
          return a;
        }
      } else
        return this.mergeFunction(e);
    });
  }
  computeOutputShape(e) {
    e = e;
    let t;
    e[0] == null ? t = null : t = e[0].slice(1);
    for (let s = 1; s < e.length; ++s) {
      let r = e[s] == null ? null : e[s].slice(1);
      t = this.computeElementwiseOpOutputShape(t, r);
    }
    let n = [];
    for (let s of e)
      s != null && s[0] !== null && n.push(s[0]);
    return n = dr(n), n.length === 1 ? t = n.concat(t) : t = [null].concat(t), t;
  }
  computeMask(e, t) {
    return j(() => {
      if (t == null)
        return null;
      if (!Array.isArray(t))
        throw new U("`mask` should be an Array");
      if (!Array.isArray(e))
        throw new U("`inputs` should be an Array");
      if (t.length !== e.length)
        throw new U(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);
      if (t.every((s) => s == null))
        return null;
      t = t.map((s) => s == null ? s : Pn(s, 0));
      let n = t[0];
      for (let s = 1; s < t.length - 1; ++s)
        n = Ds(n, t[s]);
      return n;
    });
  }
};
var ky = class extends xi {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return j(() => {
      let t = e[0].clone();
      for (let n = 1; n < e.length; ++n)
        t = ie(t, e[n]);
      return t;
    });
  }
};
ky.className = "Add";
ae.registerClass(ky);
var Iy = class extends xi {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return j(() => {
      let t = e[0].clone();
      for (let n = 1; n < e.length; ++n)
        t = V(t, e[n]);
      return t;
    });
  }
};
Iy.className = "Multiply";
ae.registerClass(Iy);
var Sy = class extends xi {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return j(() => {
      let t = e[0].clone();
      for (let n = 1; n < e.length; ++n)
        t = ie(t, e[n]);
      return V(1 / e.length, t);
    });
  }
};
Sy.className = "Average";
ae.registerClass(Sy);
var Cy = class extends xi {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return j(() => {
      let t = e[0];
      for (let n = 1; n < e.length; ++n)
        t = _r(t, e[n]);
      return t;
    });
  }
};
Cy.className = "Maximum";
ae.registerClass(Cy);
var Ny = class extends xi {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return j(() => {
      let t = e[0];
      for (let n = 1; n < e.length; ++n)
        t = vp(t, e[n]);
      return t;
    });
  }
};
Ny.className = "Minimum";
ae.registerClass(Ny);
var Ty = class extends xi {
  constructor(e) {
    super(e), this.DEFAULT_AXIS = -1, e == null && (e = {}), this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis, this.supportsMasking = true, this.reshapeRequired = false;
  }
  build(e) {
    if (!(Array.isArray(e) && Array.isArray(e[0])) || e.length === 1)
      throw new U("A `Concatenate` layer should be called on a list of at least 2 inputs");
    e = e;
    let t = true;
    for (let s of e)
      if (s != null) {
        t = false;
        break;
      }
    if (t)
      return;
    let n = [];
    for (let s = 0; s < e.length; ++s) {
      let r = e[s].slice();
      r.splice(this.axis, 1);
      let a = false;
      for (let i of n)
        if (w.arraysEqual(i, r)) {
          a = true;
          break;
        }
      a || n.push(r);
    }
    if (n.length > 1)
      throw new U("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e));
  }
  mergeFunction(e) {
    return j(() => Cb(e, this.axis));
  }
  computeOutputShape(e) {
    if (!(Array.isArray(e) && Array.isArray(e[0])))
      throw new U("A `Concatenate` layer should be called on a list of inputs.");
    let t = e, n = t[0].slice(), s = this.axis < 0 ? n.length + this.axis : this.axis;
    for (let r of t.slice(1)) {
      if (n[s] == null || r[s] == null) {
        n[s] = null;
        break;
      }
      n[s] += r[s];
    }
    return n;
  }
  computeMask(e, t) {
    if (t == null)
      return null;
    if (!Array.isArray(t))
      throw new U("`mask` should be an array for Concatenate");
    if (!Array.isArray(e))
      throw new U("`inputs` should be an array for Concatenate");
    if (t.length !== e.length)
      throw new U(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);
    return j(() => {
      let n = true;
      if (t.forEach((a) => {
        if (a != null) {
          n = false;
          return;
        }
      }), n)
        return null;
      let s = [];
      for (let a = 0; a < e.length; ++a)
        t[a] == null ? s.push(ce(Zn(e[a]), "bool")) : t[a].rank < e[a].rank ? s.push(Pn(t[a], -1)) : s.push(t[a]);
      let r = Ft(s, this.axis);
      return Qk(r, -1, false);
    });
  }
  getConfig() {
    let e = { axis: this.axis }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Ty.className = "Concatenate";
ae.registerClass(Ty);
function Nu(e, t) {
  for (; e < 0; )
    e += t;
  return e;
}
function YB(e, t, n) {
  if (e.shape.length > 3 || t.shape.length > 3)
    throw new Fe("batchDot is not implemented for tensors of 4D or higher rank yet");
  if (w.assert(e.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`), w.assert(e.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`), typeof n == "number" && (n = [n, n]), e.dtype === "complex64" || t.dtype === "complex64")
    throw new Fe("batchDot is not implemented for complex64-type Tensors yet.");
  let s = e.shape.length, r = t.shape.length;
  n == null && (n = [s - 1, r - 2]);
  let a = n;
  return j(() => {
    let i;
    if (s > r) {
      i = s - r;
      let u = [];
      for (let l = 0; l < i; ++l)
        u.push(1);
      t = G(t, t.shape.concat(u));
    } else if (r > s) {
      i = r - s;
      let u = [];
      for (let l = 0; l < i; ++l)
        u.push(1);
      e = G(e, e.shape.concat(u));
    } else
      i = 0;
    let o;
    if (e.shape.length === 2 && t.shape.length === 2)
      a[0] === a[1] ? o = ve(V(e, t), a[0]) : o = ve(V(Ge(e, [1, 0]), t), a[1]);
    else {
      let u = a[0] !== e.shape.length - 1, l = a[1] === t.shape.length - 1;
      o = We(e, t, u, l);
    }
    if (i > 0) {
      let u;
      s > r ? u = s + r - 3 : u = s - 1;
      let l = [];
      for (let c = u; c < u + i; ++c)
        l.push(c);
      o = gr(o, l);
    }
    return o.shape.length === 1 && (o = Pn(o, 1)), o;
  });
}
var $y = class extends xi {
  constructor(e) {
    super(e), this.axes = e.axes, this.normalize = e.normalize == null ? false : e.normalize, this.supportsMasking = true, this.reshapeRequired = false;
  }
  build(e) {
    w.assert(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    let t = e[0], n = e[1];
    if (t.length > 3 || n.length > 3)
      throw new Fe("Dot layer does not support tensors of 4D or higher rank yet.");
    let s = this.interpretAxes(t, n);
    if (t[s[0]] !== n[s[1]])
      throw new U(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`);
  }
  mergeFunction(e) {
    if (e.length !== 2)
      throw new U(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);
    let t = e[0], n = e[1], s;
    return Array.isArray(this.axes) ? s = this.axes.map((r, a) => Nu(r, e[a].shape.length)) : s = [Nu(this.axes, t.shape.length), Nu(this.axes, n.shape.length)], this.normalize && (t = $d(t, s[0]), n = $d(n, s[1])), YB(t, n, s);
  }
  interpretAxes(e, t) {
    let n;
    return Array.isArray(this.axes) ? n = this.axes : n = [Nu(this.axes, e.length), Nu(this.axes, t.length)], n;
  }
  computeOutputShape(e) {
    w.assert(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    let t = e[0].slice(), n = e[1].slice();
    if (t.length > 3 || n.length > 3)
      throw new Fe("Dot layer does not support tensors of 4D or higher rank yet.");
    let s = this.interpretAxes(t, n);
    t.splice(s[0], 1), n.splice(s[1], 1), n.splice(0, 1);
    let r = t.concat(n);
    return r.length === 1 && r.push(1), r;
  }
  computeMask(e, t) {
    return null;
  }
  getConfig() {
    let e = { axes: this.axes, normalize: this.normalize }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
$y.className = "Dot";
ae.registerClass($y);
var _y = class extends He {
  constructor(e) {
    super(e), this.supportsMasking = true, this.stddev = e.stddev;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = super.getConfig(), t = { stddev: this.stddev };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return j(() => {
      this.invokeCallHook(e, t);
      let n = Oe(e);
      return Wl(() => ie($p(n.shape, 0, this.stddev), n), () => n, t.training || false);
    });
  }
};
_y.className = "GaussianNoise";
ae.registerClass(_y);
var Ay = class extends He {
  constructor(e) {
    super(e), this.supportsMasking = true, this.rate = e.rate;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return j(() => {
      this.invokeCallHook(e, t);
      let n = Oe(e);
      return this.rate > 0 && this.rate < 1 ? Wl(() => {
        let r = Math.sqrt(this.rate / (1 - this.rate));
        return V(n, $p(n.shape, 1, r));
      }, () => n, t.training || false) : n;
    });
  }
};
Ay.className = "GaussianDropout";
ae.registerClass(Ay);
var Ey = class extends He {
  constructor(e) {
    super(e), this.supportsMasking = true, this.rate = e.rate, this.noiseShape = e.noiseShape;
  }
  _getNoiseShape(e) {
    return this.noiseShape || Oe(e).shape;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return j(() => {
      if (this.rate < 1 && this.rate > 0) {
        let n = this._getNoiseShape(e);
        return Wl(() => {
          let r = Oe(e), a = 1.6732632423543772, i = 1.0507009873554805, o = -a * i, u = Xo(Ml(n), this.rate);
          u = Tp(u, "float32");
          let l = ((1 - this.rate) * (1 + this.rate * o ** 2)) ** -0.5, c = -l * o * this.rate, p = ie(V(r, u), V(ie(u, -1), o));
          return ie(V(p, l), c);
        }, () => Oe(e), t.training || false);
      }
      return e;
    });
  }
};
Ey.className = "AlphaDropout";
ae.registerClass(Ey);
function el(e, t, n, s, r, a = 1e-3) {
  let i;
  if (e.rank === 2)
    i = DE(e, t, n, s, r, a);
  else if (e.rank === 3)
    i = OE(e, t, n, s, r, a);
  else if (e.rank === 4)
    i = zE(e, t, n, s, r, a);
  else
    throw new Fe(`batchNormalization is not implemented for array of rank ${e.rank} yet`);
  return i;
}
function QB(e, t, n, s, r = 1e-3) {
  return j(() => {
    let a = sb(e, s), i = a.mean, o = a.variance;
    return [el(e, i, o, n, t, r), i, o];
  });
}
function ZB(e, t, n, s, r = 1e-3) {
  return j(() => {
    let a = sb(e, s), i = a.mean, o = a.variance, u = [];
    for (let f of bs(0, e.rank))
      s.indexOf(f) !== -1 ? u.push(1) : u.push(e.shape[f]);
    let l = G(i, u), c = G(o, u), p = t == null ? null : G(t, u), d = n == null ? null : G(n, u);
    return [el(e, l, c, d, p, r), i, o];
  });
}
function JB(e, t, n, s, r = 1e-3) {
  return w.arraysEqual(s.slice().sort(), bs(0, e.rank - 1)) ? QB(e, t, n, s, r) : ZB(e, t, n, s, r);
}
var Ry = class extends He {
  constructor(e) {
    e == null && (e = {}), super(e), this.supportsMasking = true, this.axis = e.axis == null ? -1 : e.axis, this.momentum = e.momentum == null ? 0.99 : e.momentum, this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? true : e.center, this.scale = e.scale == null ? true : e.scale, this.betaInitializer = ht(e.betaInitializer || "zeros"), this.gammaInitializer = ht(e.gammaInitializer || "ones"), this.movingMeanInitializer = ht(e.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = ht(e.movingVarianceInitializer || "ones"), this.betaConstraint = Pt(e.betaConstraint), this.gammaConstraint = Pt(e.gammaConstraint), this.betaRegularizer = ft(e.betaRegularizer), this.gammaRegularizer = ft(e.gammaRegularizer);
  }
  build(e) {
    e = nt(e);
    let t = this.axis >= 0 ? this.axis : this.axis + e.length, n = e[t];
    if (n == null)
      throw new U(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);
    this.inputSpec = [new Dt({ ndim: e.length, axes: { [t]: n } })];
    let s = [n];
    this.scale && (this.gamma = this.addWeight("gamma", s, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", s, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", s, null, this.movingMeanInitializer, null, false), this.movingVariance = this.addWeight("moving_variance", s, null, this.movingVarianceInitializer, null, false), this.built = true;
  }
  call(e, t) {
    return j(() => {
      let n = t.training == null ? false : t.training, s = Oe(e), r = s.shape, a = r.length, i = bs(0, a), o = this.axis >= 0 ? this.axis : this.axis + a;
      i.splice(o, 1);
      let u = ma(1, a);
      u[o] = r[o];
      let l = i.slice();
      l.sort();
      let c = !w.arraysEqual(l, bs(0, a).slice(0, a - 1)), p = () => {
        if (c) {
          let b = G(this.movingMean.read(), u), y = G(this.movingVariance.read(), u), v = this.center ? G(this.beta.read(), u) : null, x = this.scale ? G(this.gamma.read(), u) : null;
          return el(s, b, y, v, x, this.epsilon);
        } else
          return el(s, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
      };
      if (!n)
        return p();
      let [d, h, f] = JB(s, this.gamma.read(), this.beta.read(), i, this.epsilon), m = (b, y, v) => {
        j(() => {
          let x = 1 - v, k = b.read(), S = V(ge(k, y), x);
          b.write(ge(k, S));
        });
      };
      return (() => {
        m(this.movingMean, h, this.momentum), m(this.movingVariance, f, this.momentum);
      })(), d;
    });
  }
  getConfig() {
    let e = { axis: this.axis, momentum: this.momentum, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: yt(this.betaInitializer), gammaInitializer: yt(this.gammaInitializer), movingMeanInitializer: yt(this.movingMeanInitializer), movingVarianceInitializer: yt(this.movingVarianceInitializer), betaRegularizer: at(this.betaRegularizer), gammaRegularizer: at(this.gammaRegularizer), betaConstraint: Ot(this.betaConstraint), gammaConstraint: Ot(this.gammaConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Ry.className = "BatchNormalization";
ae.registerClass(Ry);
var Dy = class extends He {
  constructor(e) {
    if (e == null && (e = {}), super(e), this.axis = e.axis == null ? -1 : e.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis))
        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else if (Array.isArray(this.axis)) {
      for (let t of this.axis)
        if (!Number.isInteger(t))
          throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    } else
      throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
    this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? true : e.center, this.scale = e.scale == null ? true : e.scale, this.betaInitializer = ht(e.betaInitializer || "zeros"), this.gammaInitializer = ht(e.gammaInitializer || "ones"), this.betaRegularizer = ft(e.betaRegularizer), this.gammaRegularizer = ft(e.gammaRegularizer), this.supportsMasking = true;
  }
  build(e) {
    e = nt(e);
    let t = e.length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let r = 0; r < this.axis.length; ++r)
      this.axis[r] < 0 && (this.axis[r] += t);
    for (let r of this.axis)
      if (r < 0 || r >= t)
        throw new Error(`Invalid axis: ${r}`);
    if (this.axis.length !== dr(this.axis).length)
      throw new Error(`Found duplicate axes in: ${this.axis}`);
    let n = this.axis.map((r) => e[r]), s = true;
    this.scale ? this.gamma = this.addWeight("gamma", n, "float32", this.gammaInitializer, this.gammaRegularizer, s) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", n, "float32", this.betaInitializer, this.betaRegularizer, s) : this.beta = null, this.built = true;
  }
  call(e, t) {
    let n = Oe(e), s = n.shape, r = s.length;
    return j(() => {
      let { mean: i, variance: o } = sb(n, this.axis, true), u = ma(1, r);
      for (let f of this.axis)
        u[f] = s[f];
      let l = (f) => f != null && f.shape.length !== r ? G(f, u) : f, c = l(this.gamma.read()), p = l(this.beta.read()), d = [], h = [];
      for (let f = 0; f < r; ++f)
        this.axis.indexOf(f) !== -1 ? (d.push(s[f]), h.push(1)) : (d.push(1), h.push(s[f]));
      return i = ps(i, d), o = ps(o, d), c = ps(c, h), p = ps(p, h), el(n, i, o, p, c, this.epsilon);
    });
  }
  getConfig() {
    let e = { axis: this.axis, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: yt(this.betaInitializer), gammaInitializer: yt(this.gammaInitializer), betaRegularizer: at(this.betaRegularizer), gammaRegularizer: at(this.gammaRegularizer) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Dy.className = "LayerNormalization";
ae.registerClass(Dy);
function eV(e, t, n) {
  return j(() => {
    if (e.rank !== 4)
      throw new U(`temporalPadding expects input tensor to be 4-D, but received a ${e.rank}-D tensor.`);
    if (t == null && (t = [[1, 1], [1, 1]]), t.length !== 2 || t[0].length !== 2 || t[1].length !== 2)
      throw new U("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (n == null && (n = ys()), n !== "channelsLast" && n !== "channelsFirst")
      throw new U(`Unknown data format: ${n}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
    let s;
    return n === "channelsFirst" ? s = [[0, 0], [0, 0], t[0], t[1]] : s = [[0, 0], t[0], t[1], [0, 0]], bi(e, s);
  });
}
var Fy = class extends He {
  constructor(e) {
    if (e == null && (e = {}), super(e), this.dataFormat = e.dataFormat == null ? ys() : e.dataFormat, e.padding == null)
      this.padding = [[1, 1], [1, 1]];
    else if (typeof e.padding == "number")
      this.padding = [[e.padding, e.padding], [e.padding, e.padding]];
    else {
      if (e.padding = e.padding, e.padding.length !== 2)
        throw new U(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);
      let t, n;
      if (typeof e.padding[0] == "number")
        t = [e.padding[0], e.padding[0]], n = [e.padding[1], e.padding[1]];
      else {
        if (e.padding = e.padding, e.padding[0].length !== 2)
          throw new U(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);
        if (t = e.padding[0], e.padding[1].length !== 2)
          throw new U(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);
        n = e.padding[1];
      }
      this.padding = [t, n];
    }
    this.inputSpec = [new Dt({ ndim: 4 })];
  }
  computeOutputShape(e) {
    e = nt(e);
    let t, n;
    return this.dataFormat === "channelsFirst" ? (e[2] != null && e[2] >= 0 ? t = e[2] + this.padding[0][0] + this.padding[0][1] : t = null, e[3] != null && e[3] >= 0 ? n = e[3] + this.padding[1][0] + this.padding[1][1] : n = null, [e[0], e[1], t, n]) : (e[1] != null && e[1] >= 0 ? t = e[1] + this.padding[0][0] + this.padding[0][1] : t = null, e[2] != null && e[2] >= 0 ? n = e[2] + this.padding[1][0] + this.padding[1][1] : n = null, [e[0], t, n, e[3]]);
  }
  call(e, t) {
    return j(() => eV(Oe(e), this.padding, this.dataFormat));
  }
  getConfig() {
    let e = { padding: this.padding, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Fy.className = "ZeroPadding2D";
ae.registerClass(Fy);
function qp(e, t, n, s, r, a) {
  return j(() => {
    Ct(r), XI(a), Gn(s), n == null && (n = [1, 1]), s == null && (s = "valid"), r == null && (r = ys()), a == null && (a = "max"), e = ey(e, r);
    let i, o = s === "same" ? "same" : "valid";
    return a === "max" ? i = nb(e, t, n, o) : i = qg(e, t, n, o), r === "channelsFirst" && (i = Ge(i, [0, 3, 1, 2])), i;
  });
}
function U0(e, t, n, s, r, a) {
  return j(() => {
    Ct(r), XI(a), Gn(s), n == null && (n = [1, 1, 1]), s == null && (s = "valid"), r == null && (r = ys()), a == null && (a = "max"), e = F0(e, r);
    let i, o = s === "same" ? "same" : "valid";
    return a === "max" ? i = gI(e, t, n, o) : i = tI(e, t, n, o), r === "channelsFirst" && (i = Ge(i, [0, 4, 1, 2, 3])), i;
  });
}
var G0 = class extends He {
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = 2), super(e), typeof e.poolSize == "number")
      this.poolSize = [e.poolSize];
    else if (Array.isArray(e.poolSize) && e.poolSize.length === 1 && typeof e.poolSize[0] == "number")
      this.poolSize = e.poolSize;
    else
      throw new U(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);
    if (Bt(this.poolSize, "poolSize"), e.strides == null)
      this.strides = this.poolSize;
    else if (typeof e.strides == "number")
      this.strides = [e.strides];
    else if (Array.isArray(e.strides) && e.strides.length === 1 && typeof e.strides[0] == "number")
      this.strides = e.strides;
    else
      throw new U(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);
    Bt(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, Gn(this.padding), this.inputSpec = [new Dt({ ndim: 3 })];
  }
  computeOutputShape(e) {
    e = nt(e);
    let t = gs(e[1], this.poolSize[0], this.padding, this.strides[0]);
    return [e[0], t, e[2]];
  }
  call(e, t) {
    return j(() => {
      this.invokeCallHook(e, t), e = Bl(Oe(e), 2);
      let n = this.poolingFunction(Oe(e), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return gr(n, [2]);
    });
  }
  getConfig() {
    let e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
var Oy = class extends G0 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, r) {
    return Ct(r), Gn(s), qp(e, t, n, s, r, "max");
  }
};
Oy.className = "MaxPooling1D";
ae.registerClass(Oy);
var Py = class extends G0 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, r) {
    return Ct(r), Gn(s), qp(e, t, n, s, r, "avg");
  }
};
Py.className = "AveragePooling1D";
ae.registerClass(Py);
var H0 = class extends He {
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = [2, 2]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize], e.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(e.strides)) {
      if (e.strides.length !== 2)
        throw new U(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);
      this.strides = e.strides;
    } else
      this.strides = [e.strides, e.strides];
    Bt(this.poolSize, "poolSize"), Bt(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Ct(this.dataFormat), Gn(this.padding), this.inputSpec = [new Dt({ ndim: 4 })];
  }
  computeOutputShape(e) {
    e = nt(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2];
    return t = gs(t, this.poolSize[0], this.padding, this.strides[0]), n = gs(n, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, n] : [e[0], t, n, e[3]];
  }
  call(e, t) {
    return j(() => (this.invokeCallHook(e, t), this.poolingFunction(Oe(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    let e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
var zy = class extends H0 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, r) {
    return Ct(r), Gn(s), qp(e, t, n, s, r, "max");
  }
};
zy.className = "MaxPooling2D";
ae.registerClass(zy);
var My = class extends H0 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, r) {
    return Ct(r), Gn(s), qp(e, t, n, s, r, "avg");
  }
};
My.className = "AveragePooling2D";
ae.registerClass(My);
var q0 = class extends He {
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = [2, 2, 2]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize, e.poolSize], e.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(e.strides)) {
      if (e.strides.length !== 3)
        throw new U(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);
      this.strides = e.strides;
    } else
      this.strides = [e.strides, e.strides, e.strides];
    Bt(this.poolSize, "poolSize"), Bt(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Ct(this.dataFormat), Gn(this.padding), this.inputSpec = [new Dt({ ndim: 5 })];
  }
  computeOutputShape(e) {
    e = nt(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2], s = this.dataFormat === "channelsFirst" ? e[4] : e[3];
    return t = gs(t, this.poolSize[0], this.padding, this.strides[0]), n = gs(n, this.poolSize[1], this.padding, this.strides[1]), s = gs(s, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, n, s] : [e[0], t, n, s, e[4]];
  }
  call(e, t) {
    return j(() => (this.invokeCallHook(e, t), this.poolingFunction(Oe(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    let e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
var Ly = class extends q0 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, r) {
    return Ct(r), Gn(s), U0(e, t, n, s, r, "max");
  }
};
Ly.className = "MaxPooling3D";
ae.registerClass(Ly);
var By = class extends q0 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, s, r) {
    return Ct(r), Gn(s), U0(e, t, n, s, r, "avg");
  }
};
By.className = "AveragePooling3D";
ae.registerClass(By);
var j0 = class extends He {
  constructor(e) {
    super(e), this.inputSpec = [new Dt({ ndim: 3 })];
  }
  computeOutputShape(e) {
    return [e[0], e[2]];
  }
  call(e, t) {
    throw new Fe();
  }
};
var Vy = class extends j0 {
  constructor(e) {
    super(e || {});
  }
  call(e, t) {
    return j(() => {
      let n = Oe(e);
      return St(n, 1);
    });
  }
};
Vy.className = "GlobalAveragePooling1D";
ae.registerClass(Vy);
var Wy = class extends j0 {
  constructor(e) {
    super(e || {});
  }
  call(e, t) {
    return j(() => {
      let n = Oe(e);
      return As(n, 1);
    });
  }
};
Wy.className = "GlobalMaxPooling1D";
ae.registerClass(Wy);
var K0 = class extends He {
  constructor(e) {
    super(e), this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Ct(this.dataFormat), this.inputSpec = [new Dt({ ndim: 4 })];
  }
  computeOutputShape(e) {
    return e = e, this.dataFormat === "channelsLast" ? [e[0], e[3]] : [e[0], e[1]];
  }
  call(e, t) {
    throw new Fe();
  }
  getConfig() {
    let e = { dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
var Uy = class extends K0 {
  call(e, t) {
    return j(() => {
      let n = Oe(e);
      return this.dataFormat === "channelsLast" ? St(n, [1, 2]) : St(n, [2, 3]);
    });
  }
};
Uy.className = "GlobalAveragePooling2D";
ae.registerClass(Uy);
var Gy = class extends K0 {
  call(e, t) {
    return j(() => {
      let n = Oe(e);
      return this.dataFormat === "channelsLast" ? As(n, [1, 2]) : As(n, [2, 3]);
    });
  }
};
Gy.className = "GlobalMaxPooling2D";
ae.registerClass(Gy);
var X0 = class extends He {
  constructor(e) {
    super(e), this.layer = e.layer;
  }
  build(e) {
    this.built = true;
  }
  get trainable() {
    return this.layer != null ? this.layer.trainable : false;
  }
  set trainable(e) {
    this.layer != null && (this.layer.trainable = e);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  get updates() {
    return this.layer._updates;
  }
  get losses() {
    return this.layer.losses;
  }
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(e) {
    this.layer.setWeights(e);
  }
  getConfig() {
    let e = { layer: { className: this.layer.getClassName(), config: this.layer.getConfig() } }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.layer != null && this.layer.setFastWeightInitDuringBuild(e);
  }
  static fromConfig(e, t, n = {}) {
    let s = t.layer, r = ms(s, n);
    delete t.layer;
    let a = { layer: r };
    return Object.assign(a, t), new e(a);
  }
};
var Hy = class extends X0 {
  constructor(e) {
    super(e), this.supportsMasking = true;
  }
  build(e) {
    if (e = nt(e), e.length < 3)
      throw new U(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);
    this.inputSpec = [{ shape: e }];
    let t = [e[0]].concat(e.slice(2));
    this.layer.built || (this.layer.build(t), this.layer.built = true), super.build(e);
  }
  computeOutputShape(e) {
    e = nt(e);
    let t = [e[0]].concat(e.slice(2)), n = this.layer.computeOutputShape(t), s = e[1];
    return [n[0], s].concat(n.slice(1));
  }
  call(e, t) {
    return j(() => (e = Oe(e), B0((a, i) => [Oe(this.layer.call(a, t)), []], e, [], false, null, null, false, true)[1]));
  }
};
Hy.className = "TimeDistributed";
ae.registerClass(Hy);
function tV(e) {
  yi(XP, "BidirectionalMergeMode", e);
}
var nV = "concat";
var qy = class extends X0 {
  constructor(e) {
    super(e);
    let t = e.layer.getConfig(), n = {};
    n.className = e.layer.getClassName(), n.config = t, this.forwardLayer = ms(n), t.goBackwards = t.goBackwards !== true;
    let s = {};
    if (s.className = e.layer.getClassName(), s.config = t, this.backwardLayer = ms(s), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = e.mergeMode === void 0 ? nV : e.mergeMode, tV(this.mergeMode), e.weights)
      throw new Fe("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = e.layer.stateful, this.returnSequences = e.layer.returnSequences, this.returnState = e.layer.returnState, this.supportsMasking = true, this._trainable = true, this.inputSpec = e.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(e) {
    this._trainable = e, this.forwardLayer != null && (this.forwardLayer.trainable = e), this.backwardLayer != null && (this.backwardLayer.trainable = e);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(e) {
    let t = e.length, n = Math.floor(t / 2);
    this.forwardLayer.setWeights(e.slice(0, n)), this.backwardLayer.setWeights(e.slice(n));
  }
  computeOutputShape(e) {
    let t = this.forwardLayer.computeOutputShape(e);
    Array.isArray(t) && Array.isArray(t[0]) || (t = [t]), t = t;
    let n, s, r;
    return this.returnState && (r = t.slice(1)), n = t[0], n = n, this.mergeMode === "concat" ? (n[n.length - 1] *= 2, s = [n]) : this.mergeMode == null ? s = [n, n.slice()] : s = [n], this.returnState ? this.mergeMode == null ? s.concat(r).concat(r.slice()) : [n].concat(r).concat(r.slice()) : bn(s);
  }
  apply(e, t) {
    let n = t == null ? null : t.initialState, s = t == null ? null : t.constants;
    t == null && (t = {});
    let r = L0(e, n, s, this.numConstants);
    if (e = r.inputs, n = r.initialState, s = r.constants, Array.isArray(e) && (n = e.slice(1), e = e[0]), (n == null || n.length === 0) && s == null)
      return super.apply(e, t);
    let a = [], i = [];
    if (n != null) {
      let u = n.length;
      if (u % 2 > 0)
        throw new U("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      t.initialState = n, a.push(...n);
      let l = n.map((c) => new Dt({ shape: c.shape }));
      this.forwardLayer.stateSpec = l.slice(0, u / 2), this.backwardLayer.stateSpec = l.slice(u / 2), i.push(...l);
    }
    if (s != null)
      throw new Fe("Support for constants in Bidirectional layers is not implemented yet.");
    let o = a[0] instanceof $s;
    for (let u of a)
      if (u instanceof $s !== o)
        throw new U("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (o) {
      let u = [e].concat(a), l = this.inputSpec.concat(i), c = this.inputSpec;
      this.inputSpec = l;
      let p = super.apply(u, t);
      return this.inputSpec = c, p;
    } else
      return super.apply(e, t);
  }
  call(e, t) {
    return j(() => {
      let n = t.initialState, s, r;
      if (n == null)
        s = this.forwardLayer.call(e, t), r = this.backwardLayer.call(e, t);
      else {
        let o = n.slice(0, n.length / 2), u = n.slice(n.length / 2);
        s = this.forwardLayer.call(e, Object.assign(t, { initialState: o })), r = this.backwardLayer.call(e, Object.assign(t, { initialState: u }));
      }
      let a;
      this.returnState && (Array.isArray(s) && (a = s.slice(1).concat(r.slice(1))), s = s[0], r = r[0]), this.returnSequences && (r = Jn(r, 1));
      let i;
      return this.mergeMode === "concat" ? i = Cb([s, r]) : this.mergeMode === "sum" ? i = ie(s, r) : this.mergeMode === "ave" ? i = V(0.5, ie(s, r)) : this.mergeMode === "mul" ? i = V(s, r) : this.mergeMode == null && (i = [s, r]), this.returnState ? this.mergeMode == null ? i.concat(a) : [i].concat(a) : i;
    });
  }
  resetStates(e) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(e) {
    ta(this.forwardLayer.name, () => {
      this.forwardLayer.build(e);
    }), ta(this.backwardLayer.name, () => {
      this.backwardLayer.build(e);
    }), this.built = true;
  }
  computeMask(e, t) {
    Array.isArray(t) && (t = t[0]);
    let n;
    if (this.returnSequences ? this.mergeMode == null ? n = [t, t] : n = t : this.mergeMode == null ? n = [null, null] : n = null, this.returnState) {
      let r = this.forwardLayer.states.map((a) => null);
      return Array.isArray(n) ? n.concat(r).concat(r) : [n].concat(r).concat(r);
    } else
      return n;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(e), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(e);
  }
  getConfig() {
    let e = { mergeMode: this.mergeMode }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  static fromConfig(e, t) {
    let n = ms(t.layer);
    if (delete t.layer, t.numConstants != null)
      throw new Fe("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    let s = t;
    return s.layer = n, new e(s);
  }
};
qy.className = "Bidirectional";
ae.registerClass(qy);
function sV(e) {
  return new Zo(e);
}
function rV(e) {
  return new Qb(e);
}
function aV(e) {
  return new Kb(e);
}
function iV(e) {
  return new Xb(e);
}
function oV(e) {
  return new Yb(e);
}
function uV(e) {
  return new Jb(e);
}
function lV(e) {
  return new Zb(e);
}
function cV(e) {
  return new ay(e);
}
function dV(e) {
  return new Lp(e);
}
function pV(e) {
  return new ny(e);
}
function hV(e) {
  return new Bp(e);
}
function fV(e) {
  return new sy(e);
}
function mV(e) {
  return new ry(e);
}
function gV(e) {
  return new iy(e);
}
function bV(e) {
  return new oy(e);
}
function yV(e) {
  return new uy(e);
}
function vV(e) {
  return new gy(e);
}
function xV(e) {
  return new fy(e);
}
function wV(e) {
  return new Hp(e);
}
function kV(e) {
  return new hy(e);
}
function IV(e) {
  return new my(e);
}
function SV(e) {
  return new by(e);
}
function CV(e) {
  return new yy(e);
}
function NV(e) {
  return new vy(e);
}
function TV(e) {
  return new wy(e);
}
function $V(e) {
  return new ky(e);
}
function _V(e) {
  return new Sy(e);
}
function AV(e) {
  return new Ty(e);
}
function EV(e) {
  return new Cy(e);
}
function RV(e) {
  return new Ny(e);
}
function DV(e) {
  return new Iy(e);
}
function FV(e) {
  return new $y(e);
}
function OV(e) {
  return new Ry(e);
}
function PV(e) {
  return new Dy(e);
}
function zV(e) {
  return new Fy(e);
}
function jy(e) {
  return new Py(e);
}
function MV(e) {
  return jy(e);
}
function LV(e) {
  return jy(e);
}
function Ky(e) {
  return new My(e);
}
function BV(e) {
  return Ky(e);
}
function VV(e) {
  return Ky(e);
}
function Xy(e) {
  return new By(e);
}
function WV(e) {
  return Xy(e);
}
function UV(e) {
  return Xy(e);
}
function GV(e) {
  return new Vy(e);
}
function HV(e) {
  return new Uy(e);
}
function Y0(e) {
  return new Wy(e);
}
function Q0(e) {
  return new Gy(e);
}
function Z0(e) {
  return new Oy(e);
}
function J0(e) {
  return new zy(e);
}
function qV(e) {
  return new Ly(e);
}
function jV(e) {
  return new cy(e);
}
function KV(e) {
  return new Wp(e);
}
function XV(e) {
  return new dy(e);
}
function YV(e) {
  return new jl(e);
}
function QV(e) {
  return new ly(e);
}
function ZV(e) {
  return new Vp(e);
}
function JV(e) {
  return new py(e);
}
function eW(e) {
  return new Gp(e);
}
function tW(e) {
  return new Er(e);
}
function nW(e) {
  return new Up(e);
}
function sW(e) {
  return new qy(e);
}
function rW(e) {
  return new Hy(e);
}
var aW = Y0;
var iW = Q0;
var oW = Z0;
var uW = J0;
function lW(e) {
  return new _y(e);
}
function cW(e) {
  return new Ay(e);
}
function dW(e) {
  return new Ey(e);
}
function pW(e) {
  return new xy(e);
}
var hW = {};
Ae(hW, { MAPE: () => SW, MSE: () => TW, binaryAccuracy: () => fW, binaryCrossentropy: () => mW, categoricalAccuracy: () => bW, categoricalCrossentropy: () => yW, cosineProximity: () => wW, mape: () => CW, meanAbsoluteError: () => kW, meanAbsolutePercentageError: () => IW, meanSquaredError: () => NW, mse: () => $W, precision: () => vW, recall: () => xW, sparseCategoricalAccuracy: () => gW });
function fW(e, t) {
  return Vb(e, t);
}
function mW(e, t) {
  return c0(e, t);
}
function gW(e, t) {
  return d0(e, t);
}
function bW(e, t) {
  return Wb(e, t);
}
function yW(e, t) {
  return Ub(e, t);
}
function vW(e, t) {
  return l0(e, t);
}
function xW(e, t) {
  return cB(e, t);
}
function wW(e, t) {
  return Bb(e, t);
}
function kW(e, t) {
  return zp(e, t);
}
function IW(e, t) {
  return Jo(e, t);
}
function SW(e, t) {
  return Jo(e, t);
}
function CW(e, t) {
  return Jo(e, t);
}
function NW(e, t) {
  return vi(e, t);
}
function TW(e, t) {
  return vi(e, t);
}
function $W(e, t) {
  return vi(e, t);
}
var _W = {};
Ae(_W, { modelFromJSON: () => BB });
var AW = {};
Ae(AW, { l1: () => RW, l1l2: () => EW, l2: () => DW });
function EW(e) {
  return new Gl(e);
}
function RW(e) {
  return HB(e);
}
function DW(e) {
  return qB(e);
}
var FW = class extends to {
  constructor() {
    super(...arguments), this.model = null;
  }
  setModel(e) {
    if (!(e instanceof hr))
      throw new Error("model must be a LayersModel, not some other Container");
    this.model = e;
  }
};
function jc(e, t) {
  return e < t;
}
function Hx(e, t) {
  return e > t;
}
var OW = class extends FW {
  constructor(e) {
    if (super(), e == null && (e = {}), e.restoreBestWeights)
      throw new Fe("restoreBestWeights = True is not implemented in EarlyStopping yet.");
    this.monitor = e.monitor || "val_loss", this.minDelta = Math.abs(e.minDelta || 0), this.patience = e.patience || 0, this.verbose = e.verbose || 0, this.mode = e.mode || "auto", this.baseline = e.baseline, ["auto", "min", "max"].indexOf(this.mode) === -1 && (console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`), this.mode = "auto"), this.mode === "min" ? this.monitorFunc = jc : this.mode === "max" ? this.monitorFunc = Hx : this.monitor.indexOf("acc") !== -1 ? this.monitorFunc = Hx : this.monitorFunc = jc, this.monitorFunc === jc && (this.minDelta *= -1);
  }
  async onTrainBegin(e) {
    this.wait = 0, this.stoppedEpoch = 0, this.baseline != null ? this.best = this.baseline : this.best = this.monitorFunc === jc ? 1 / 0 : -1 / 0;
  }
  async onEpochEnd(e, t) {
    await ar(t);
    let n = this.getMonitorValue(t);
    n != null && (this.monitorFunc(n - this.minDelta, this.best) ? (this.best = n, this.wait = 0) : (this.wait++, this.wait >= this.patience && (this.stoppedEpoch = e, this.model.stopTraining = true)));
  }
  async onTrainEnd(e) {
    this.stoppedEpoch > 0 && this.verbose && console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);
  }
  getMonitorValue(e) {
    e == null && (e = {});
    let t = e[this.monitor];
    return t == null && console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`), t;
  }
};
function PW(e) {
  return new OW(e);
}
var Gpe = { earlyStopping: PW };
var zW = X();
zW.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => false, (e) => {
  e && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
var eS = ((e) => (e[e.DT_INVALID = 0] = "DT_INVALID", e[e.DT_FLOAT = 1] = "DT_FLOAT", e[e.DT_DOUBLE = 2] = "DT_DOUBLE", e[e.DT_INT32 = 3] = "DT_INT32", e[e.DT_UINT8 = 4] = "DT_UINT8", e[e.DT_INT16 = 5] = "DT_INT16", e[e.DT_INT8 = 6] = "DT_INT8", e[e.DT_STRING = 7] = "DT_STRING", e[e.DT_COMPLEX64 = 8] = "DT_COMPLEX64", e[e.DT_INT64 = 9] = "DT_INT64", e[e.DT_BOOL = 10] = "DT_BOOL", e[e.DT_QINT8 = 11] = "DT_QINT8", e[e.DT_QUINT8 = 12] = "DT_QUINT8", e[e.DT_QINT32 = 13] = "DT_QINT32", e[e.DT_BFLOAT16 = 14] = "DT_BFLOAT16", e[e.DT_QINT16 = 15] = "DT_QINT16", e[e.DT_QUINT16 = 16] = "DT_QUINT16", e[e.DT_UINT16 = 17] = "DT_UINT16", e[e.DT_COMPLEX128 = 18] = "DT_COMPLEX128", e[e.DT_HALF = 19] = "DT_HALF", e[e.DT_RESOURCE = 20] = "DT_RESOURCE", e[e.DT_VARIANT = 21] = "DT_VARIANT", e[e.DT_UINT32 = 22] = "DT_UINT32", e[e.DT_UINT64 = 23] = "DT_UINT64", e[e.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", e[e.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", e[e.DT_INT32_REF = 103] = "DT_INT32_REF", e[e.DT_UINT8_REF = 104] = "DT_UINT8_REF", e[e.DT_INT16_REF = 105] = "DT_INT16_REF", e[e.DT_INT8_REF = 106] = "DT_INT8_REF", e[e.DT_STRING_REF = 107] = "DT_STRING_REF", e[e.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", e[e.DT_INT64_REF = 109] = "DT_INT64_REF", e[e.DT_BOOL_REF = 110] = "DT_BOOL_REF", e[e.DT_QINT8_REF = 111] = "DT_QINT8_REF", e[e.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", e[e.DT_QINT32_REF = 113] = "DT_QINT32_REF", e[e.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", e[e.DT_QINT16_REF = 115] = "DT_QINT16_REF", e[e.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", e[e.DT_UINT16_REF = 117] = "DT_UINT16_REF", e[e.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", e[e.DT_HALF_REF = 119] = "DT_HALF_REF", e[e.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", e[e.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", e[e.DT_UINT32_REF = 122] = "DT_UINT32_REF", e[e.DT_UINT64_REF = 123] = "DT_UINT64_REF", e))(eS || {});
var qx;
((e) => {
  let t;
  ((n) => {
    n[n.LEGACY = 0] = "LEGACY", n[n.V1 = 1] = "V1", n[n.V2 = 2] = "V2";
  })(t = e.CheckpointFormatVersion || (e.CheckpointFormatVersion = {}));
})(qx || (qx = {}));
var Yy = {};
function Hpe(e, t) {
  let n = { tfOpName: e, category: "custom", inputs: [], attrs: [], customExecutor: t };
  Yy[e] = n;
}
function tS(e) {
  return Yy[e];
}
function qpe(e) {
  delete Yy[e];
}
function I(e, t, n, s, r) {
  let a = t.inputParams[e];
  if (a && a.inputIndexStart !== void 0) {
    let o = a.inputIndexStart, u = a.inputIndexEnd === 0 ? void 0 : a.inputIndexEnd === void 0 ? o + 1 : a.inputIndexEnd;
    if (a.type === "tensor")
      return on(t.inputNames[a.inputIndexStart], n, s, r);
    if (a.type === "tensors")
      return t.inputNames.slice(o, u).map((d) => on(d, n, s, r));
    let l = on(t.inputNames.slice(o)[0], n, s, r), c = l.dataSync();
    return a.type === "number" ? c[0] : w.toNestedArray(l.shape, c);
  }
  let i = t.attrParams[e];
  return i && i.value;
}
function on(e, t, n, s) {
  let [r, a] = _n(e);
  if (s != null) {
    let o = s.getHashTableHandleByName(r);
    if (o != null)
      return o;
  }
  let i = n.currentContextIds.find((o) => !!t[Dd(r, o)]);
  return i !== void 0 ? t[Dd(r, i)][a] : void 0;
}
function MW(e, t, n) {
  return t[Dd(e, n.currentContextId)];
}
function Ts(e, t) {
  let [n, s, r] = _n(e);
  return [Dd(n, t && t.currentContextId), s, r];
}
function Dd(e, t) {
  return t ? `${e}-${t}` : e;
}
function _n(e) {
  let t = e.split(":");
  if (t.length === 1)
    return [e, 0, void 0];
  let n = t[0], s = t.length === 3 ? t[1] : void 0, r = Number(t[t.length - 1]);
  return [n, r, s];
}
function sd(e, t, n) {
  let s = I("pad", e, t, n);
  if (s === "explicit") {
    s = I("explicitPaddings", e, t, n);
    let r = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let a = 0; a < 4; a++)
      r[a][0] = s[a * 2], r[a][1] = s[a * 2 + 1];
    return r;
  }
  return s;
}
function Us(e) {
  return e.kept ? e : cr(e);
}
var nS = {};
Ae(nS, { json: () => LW });
var LW = [{ tfOpName: "Add", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddV2", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddN", category: "arithmetic", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "BiasAdd", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "Sub", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "RealDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Div", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "DivNoNan", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mul", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Maximum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Minimum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Pow", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SquaredDifference", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorMod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var sS = {};
Ae(sS, { json: () => BW });
var BW = [{ tfOpName: "Abs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan2", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Ceil", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ClipByValue", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "clipValueMin", type: "number" }, { start: 2, name: "clipValueMax", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Complex", category: "basic_math", inputs: [{ start: 0, name: "real", type: "tensor" }, { start: 1, name: "imag", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ComplexAbs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Elu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Exp", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Floor", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Imag", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Neg", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Real", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Prelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "alpha", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu6", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Selu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sigmoid", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Rsqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Square", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sign", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Round", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Expm1", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log1p", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Reciprocal", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Softplus", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Erf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Prod", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axes", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LeakyRelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "alpha", name: "alpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsNan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var rS = {};
Ae(rS, { json: () => VW });
var VW = [{ tfOpName: "EmptyTensorList", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "maxNumElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "LoopCond", category: "control", inputs: [{ start: 0, name: "pred", type: "tensor" }] }, { tfOpName: "Switch", category: "control", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "pred", type: "tensor" }] }, { tfOpName: "Merge", category: "control", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "Enter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "frame_name", name: "frameName", type: "string" }, { tfName: "is_constant", name: "isConstant", type: "bool" }] }, { tfOpName: "Exit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NextIteration", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayV3", category: "control", inputs: [{ start: 0, name: "size", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "dynamic_size", name: "dynamicSize", type: "bool" }, { tfName: "clear_after_read", name: "clearAfterRead", type: "bool" }, { tfName: "identical_element_shapes", name: "identicalElementShapes", type: "bool" }, { tfName: "tensor_array_name", name: "name", type: "string" }] }, { tfOpName: "TensorArrayWriteV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayReadV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayGatherV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }] }, { tfOpName: "TensorArrayScatterV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArrayConcatV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape_except0", name: "elementShapeExcept0", type: "shape", notSupported: true }] }, { tfOpName: "TensorArraySplitV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }, { start: 2, name: "lengths", type: "number[]" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArraySizeV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }] }, { tfOpName: "TensorArrayCloseV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }] }, { tfOpName: "StatelessIf", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "If", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "StatelessWhile", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "While", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "TensorListScatter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListScatterV2", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }, { start: 3, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGather", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListSetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListReserve", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListFromTensor", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListStack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }, { tfName: "num_elements", name: "numElements", type: "dtype" }] }, { tfOpName: "TensorListSplit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }, { start: 2, name: "lengths", type: "number[]" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcat", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPopBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPushBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListLength", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }] }, { tfOpName: "TensorListResize", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "size", type: "number" }] }];
var aS = {};
Ae(aS, { json: () => WW });
var WW = [{ tfOpName: "AvgPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [], notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPoolWithArgmax", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "include_batch_in_index", name: "includeBatchInIndex", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AvgPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Conv1D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "stride", name: "stride", type: "number" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NWC" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "dilation", name: "dilation", type: "number", defaultValue: 1 }] }, { tfOpName: "Conv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "useCudnnOnGpu", name: "useCudnnOnGpu", type: "bool" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "_FusedConv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "use_cudnn_on_gpu", name: "useCudnnOnGpu", type: "bool", defaultValue: true }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number" }] }, { tfOpName: "Conv2DBackpropInput", category: "convolution", inputs: [{ start: 2, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 0, name: "outputShape", type: "number[]" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]", notSupported: true }] }, { tfOpName: "DepthwiseConv2d", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "DepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "FusedDepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }] }, { tfOpName: "Conv3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "Dilation2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "rates", name: "dilations", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }] }];
var iS = {};
Ae(iS, { json: () => UW });
var UW = [{ tfOpName: "Fill", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }, { start: 1, name: "value", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "LinSpace", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "num", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "OneHot", category: "creation", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "depth", type: "number" }, { start: 2, name: "onValue", type: "number", defaultValue: 1 }, { start: 3, name: "offValue", type: "number", defaultValue: 0 }], attrs: [{ tfName: "axis", name: "axis", type: "number", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Ones", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "OnesLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "RandomUniform", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number", defaultValue: 0 }, { tfName: "maxval", name: "maxval", type: "number", defaultValue: 1 }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Range", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "step", type: "number", defaultValue: 0 }], attrs: [{ tfName: "Tidx", name: "dtype", type: "dtype" }] }, { tfOpName: "TruncatedNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "means", name: "mean", type: "number", defaultValue: 0 }, { tfName: "stddev", name: "stdDev", type: "number", defaultValue: 1 }, { tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Zeros", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "ZerosLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Multinomial", category: "creation", inputs: [{ start: 0, name: "logits", type: "tensor" }, { start: 1, name: "numSamples", type: "number" }], attrs: [{ tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number" }, { tfName: "T", name: "dtype", type: "dtype" }, { tfName: "output_dtype", name: "output_dtype", type: "dtype" }] }];
var oS = {};
Ae(oS, { json: () => GW });
var GW = [{ tfOpName: "NonMaxSuppressionV2", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV3", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV4", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "T_threshold", name: "threshold", type: "dtype", notSupported: true }, { tfName: "pad_to_max_output_size", name: "padToMaxOutputSize", type: "bool" }] }, { tfOpName: "NonMaxSuppressionV5", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }, { start: 5, name: "softNmsSigma", type: "number" }] }, { tfOpName: "Where", category: "dynamic", inputs: [{ start: 0, name: "condition", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ListDiff", category: "dynamic", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var uS = {};
Ae(uS, { json: () => HW });
var HW = [{ tfOpName: "TopKV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "k", type: "number" }], attrs: [{ tfName: "sorted", name: "sorted", type: "bool" }] }, { tfOpName: "Unique", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "UniqueV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }];
var lS = {};
Ae(lS, { json: () => qW });
var qW = [{ tfOpName: "PlaceholderWithDefault", category: "graph", inputs: [{ start: 0, name: "default", type: "tensor" }], attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Placeholder", category: "graph", attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Const", category: "graph" }, { tfOpName: "Identity", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IdentityN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Snapshot", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Rank", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Size", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Shape", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "ShapeN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Print", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "data", type: "tensors" }], attrs: [{ tfName: "message", name: "message", type: "string" }, { tfName: "first_n", name: "firstN", type: "number", notSupported: true }, { tfName: "summarize", name: "summarize", type: "number", defaultValue: 3 }] }, { tfOpName: "NoOp", category: "graph", inputs: [] }, { tfOpName: "StopGradient", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "FakeQuantWithMinMaxVars", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "min", name: "min", type: "number" }, { tfName: "max", name: "max", type: "number" }] }];
var cS = {};
Ae(cS, { json: () => jW });
var jW = [{ tfOpName: "HashTable", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "HashTableV2", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "LookupTableImport", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableImportV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFind", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFindV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableSize", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "LookupTableSizeV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }];
var dS = {};
Ae(dS, { json: () => KW });
var KW = [{ tfOpName: "ResizeBilinear", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ResizeNearestNeighbor", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "CropAndResize", category: "image", inputs: [{ start: 0, name: "image", type: "tensor" }, { start: 1, name: "boxes", type: "tensor" }, { start: 2, name: "boxInd", type: "tensor" }, { start: 3, name: "cropSize", type: "number[]" }], attrs: [{ tfName: "method", name: "method", type: "string" }, { tfName: "extrapolation_value", name: "extrapolationValue", type: "number" }] }, { tfOpName: "ImageProjectiveTransformV3", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "transforms", type: "tensor" }, { start: 2, name: "outputShape", type: "number[]" }, { start: 3, name: "fillValue", type: "number" }], attrs: [{ tfName: "interpolation", name: "interpolation", type: "string" }, { tfName: "fill_mode", name: "fillMode", type: "string" }] }];
var pS = {};
Ae(pS, { json: () => XW });
var XW = [{ tfOpName: "Equal", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NotEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Greater", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "GreaterEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Less", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LessEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalAnd", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalNot", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalOr", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Select", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SelectV2", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var hS = {};
Ae(hS, { json: () => YW });
var YW = [{ tfOpName: "_FusedMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMulV2", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Transpose", category: "matrices", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "perm", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Einsum", category: "matrices", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "equation", name: "equation", type: "string" }, { tfName: "N", name: "n", type: "number", defaultValue: 2 }, { tfName: "T", name: "dtype", type: "dtype" }] }];
var fS = {};
Ae(fS, { json: () => QW });
var QW = [{ tfOpName: "FusedBatchNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV2", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV3", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "LRN", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "depth_radius", name: "radius", type: "number", defaultValue: 5 }, { tfName: "bias", name: "bias", type: "number", defaultValue: 1 }, { tfName: "alpha", name: "alpha", type: "number", defaultValue: 1 }, { tfName: "beta", name: "beta", type: "number", defaultValue: 0.5 }] }, { tfOpName: "Softmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "LogSoftmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "normalization", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: true, notSupported: true }] }];
var mS = {};
Ae(mS, { json: () => ZW });
var ZW = [{ tfOpName: "Bincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }] }, { tfOpName: "DenseBincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }], attrs: [{ tfName: "binary_output", name: "binaryOutput", type: "bool" }] }, { tfOpName: "Max", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Mean", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Min", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Sum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "All", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Any", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "ArgMax", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "ArgMin", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "Prod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Cumprod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }, { tfOpName: "Cumsum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }];
var gS = {};
Ae(gS, { json: () => JW });
var JW = [{ tfOpName: "ConcatV2", category: "slice_join", inputs: [{ start: 0, end: -1, name: "tensors", type: "tensors" }, { start: -1, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "Concat", category: "slice_join", inputs: [{ start: 1, end: 0, name: "tensors", type: "tensors" }, { start: 0, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "GatherV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }], attrs: [{ tfName: "batch_dims", name: "batchDims", type: "number", defaultValue: 0 }] }, { tfOpName: "Gather", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", notSupported: true }] }, { tfOpName: "Reverse", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "dims", type: "bool[]" }] }, { tfOpName: "ReverseV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }] }, { tfOpName: "Slice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "size", type: "number[]" }] }, { tfOpName: "StridedSlice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "end", type: "number[]" }, { start: 3, name: "strides", type: "number[]" }], attrs: [{ tfName: "begin_mask", name: "beginMask", type: "number", defaultValue: 0 }, { tfName: "end_mask", name: "endMask", type: "number", defaultValue: 0 }, { tfName: "new_axis_mask", name: "newAxisMask", type: "number", defaultValue: 0 }, { tfName: "ellipsis_mask", name: "ellipsisMask", type: "number", defaultValue: 0 }, { tfName: "shrink_axis_mask", name: "shrinkAxisMask", type: "number", defaultValue: 0 }] }, { tfOpName: "Pack", category: "slice_join", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "Unpack", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }, { tfName: "num", name: "num", type: "number", defaultValue: 0, notSupported: true }] }, { tfOpName: "Tile", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "reps", type: "number[]" }] }, { tfOpName: "Split", category: "slice_join", inputs: [{ start: 0, name: "axis", type: "number", defaultValue: 0 }, { start: 1, name: "x", type: "tensor" }], attrs: [{ tfName: "num_split", name: "numOrSizeSplits", type: "number", defaultValue: 1 }] }, { tfOpName: "SplitV", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "numOrSizeSplits", type: "number[]" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "ScatterNd", category: "slice_join", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "shape", type: "number[]" }] }, { tfOpName: "GatherNd", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "slice_join", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: false, notSupported: true }] }];
var bS = {};
Ae(bS, { json: () => e4 });
var e4 = [{ tfOpName: "SparseFillEmptyRows", category: "sparse", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "denseShape", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }] }, { tfOpName: "SparseReshape", category: "sparse", inputs: [{ start: 0, name: "inputIndices", type: "tensor" }, { start: 1, name: "inputShape", type: "tensor" }, { start: 2, name: "newShape", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SparseSegmentMean", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }, { tfOpName: "SparseSegmentSum", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }];
var yS = {};
Ae(yS, { json: () => t4 });
var t4 = [{ tfOpName: "FFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "RFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }, { tfOpName: "IRFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }];
var vS = {};
Ae(vS, { json: () => n4 });
var n4 = [{ tfOpName: "StringNGrams", category: "string", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "dataSplits", type: "tensor" }], attrs: [{ tfName: "separator", name: "separator", type: "string" }, { tfName: "ngram_widths", name: "nGramWidths", type: "number[]" }, { tfName: "left_pad", name: "leftPad", type: "string" }, { tfName: "right_pad", name: "rightPad", type: "string" }, { tfName: "pad_width", name: "padWidth", type: "number" }, { tfName: "preserve_short_sequences", name: "preserveShortSequences", type: "bool" }], outputs: ["ngrams", "ngrams_splits"] }, { tfOpName: "StringSplit", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "delimiter", type: "tensor" }], attrs: [{ tfName: "skip_empty", name: "skipEmpty", type: "bool" }], outputs: ["indices", "values", "shape"] }, { tfOpName: "StringToHashBucketFast", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "num_buckets", name: "numBuckets", type: "number" }] }];
var xS = {};
Ae(xS, { json: () => s4 });
var s4 = [{ tfOpName: "Cast", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "SrcT", name: "sdtype", type: "dtype", notSupported: true }, { tfName: "DstT", name: "dtype", type: "dtype" }] }, { tfOpName: "ExpandDims", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "MirrorPad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "mode", name: "mode", type: "string" }] }, { tfOpName: "Pad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "constant_value", name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "PadV2", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }, { start: 2, name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "Reshape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "Squeeze", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "axis", tfDeprecatedName: "squeeze_dims", name: "axis", type: "number[]" }] }, { tfOpName: "SpaceToBatchND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "paddings", type: "number[]" }] }, { tfOpName: "BatchToSpaceND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "crops", type: "number[]" }] }, { tfOpName: "DepthToSpace", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "block_size", name: "blockSize", type: "number" }, { tfName: "data_format", name: "dataFormat", type: "string" }] }, { tfOpName: "BroadcastTo", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }], attrs: [] }, { tfOpName: "BroadcastArgs", category: "transformation", inputs: [{ start: 0, name: "s0", type: "tensor" }, { start: 1, name: "s1", type: "tensor" }], attrs: [] }];
var jx = class {
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  constructor() {
    let e = [nS, sS, rS, aS, iS, oS, uS, lS, cS, dS, pS, hS, fS, mS, gS, bS, yS, vS, xS], t = [].concat(...e.map((n) => n.json));
    this.opMappers = t.reduce((n, s) => (n[s.tfOpName] = s, n), {});
  }
  transformGraph(e, t = {}) {
    let n = e.node, s = [], r = [], a = [], i = n.reduce((f, m) => (f[m.name] = this.mapNode(m), m.op.startsWith("Placeholder") ? s.push(f[m.name]) : m.op === "Const" ? r.push(f[m.name]) : (m.input == null || m.input.length === 0) && a.push(f[m.name]), f), {}), o = [], u = [], l = {}, c = {};
    t != null && (l = this.mapSignatureEntries(t.inputs), c = this.mapSignatureEntries(t.outputs));
    let p = Object.keys(i);
    p.forEach((f) => {
      let m = i[f];
      m.inputNames.forEach((g, b) => {
        let [y, , v] = Ts(g), x = i[y];
        if (x.outputs != null) {
          let k = x.outputs.indexOf(v);
          if (k !== -1) {
            let S = `${y}:${k}`;
            m.inputNames[b] = S;
          }
        }
        m.inputs.push(x), x.children.push(m);
      });
    }), Object.keys(c).length === 0 ? p.forEach((f) => {
      let m = i[f];
      m.children.length === 0 && u.push(m);
    }) : Object.keys(c).forEach((f) => {
      let [m] = Ts(f), g = i[m];
      g != null && (g.signatureKey = c[f], u.push(g));
    }), Object.keys(l).length > 0 ? Object.keys(l).forEach((f) => {
      let [m] = Ts(f), g = i[m];
      g && (g.signatureKey = l[f], o.push(g));
    }) : o = s;
    let d = {};
    e.library != null && e.library.function != null && (d = e.library.function.reduce((f, m) => (f[m.signature.name] = this.mapFunction(m), f), {}));
    let h = { nodes: i, inputs: o, outputs: u, weights: r, placeholders: s, signature: t, functions: d };
    return a.length > 0 && (h.initNodes = a), h;
  }
  mapSignatureEntries(e) {
    return Object.keys(e || {}).reduce((t, n) => (t[e[n].name] = n, t), {});
  }
  mapNode(e) {
    let t = tS(e.op) || this.opMappers[e.op] || {};
    e.attr == null && (e.attr = {});
    let n = { name: e.name, op: e.op, category: t.category, inputNames: (e.input || []).map((s) => s.startsWith("^") ? s.slice(1) : s), inputs: [], children: [], inputParams: {}, attrParams: {}, rawAttrs: e.attr, outputs: t.outputs };
    return t.inputs != null && (n.inputParams = t.inputs.reduce((s, r) => (s[r.name] = { type: r.type, inputIndexStart: r.start, inputIndexEnd: r.end }, s), {})), t.attrs != null && (n.attrParams = t.attrs.reduce((s, r) => {
      let a = r.type, i;
      switch (r.type) {
        case "string":
          i = $m(e.attr, r.tfName, r.defaultValue), i === void 0 && !!r.tfDeprecatedName && (i = $m(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "string[]":
          i = Om(e.attr, r.tfName, r.defaultValue), i === void 0 && !!r.tfDeprecatedName && (i = Om(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "number":
          i = Am(e.attr, r.tfName, r.defaultValue || 0), i === void 0 && !!r.tfDeprecatedName && (i = Am(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "number[]":
          i = Fm(e.attr, r.tfName, r.defaultValue), i === void 0 && !!r.tfDeprecatedName && (i = Fm(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "bool":
          i = _m(e.attr, r.tfName, r.defaultValue), i === void 0 && !!r.tfDeprecatedName && (i = _m(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "bool[]":
          i = zm(e.attr, r.tfName, r.defaultValue), i === void 0 && !!r.tfDeprecatedName && (i = zm(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "shape":
          i = Dm(e.attr, r.tfName, r.defaultValue), i === void 0 && !!r.tfDeprecatedName && (i = Dm(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "shape[]":
          i = Pm(e.attr, r.tfName, r.defaultValue), i === void 0 && !!r.tfDeprecatedName && (i = Pm(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "dtype":
          i = Em(e.attr, r.tfName, r.defaultValue), i === void 0 && !!r.tfDeprecatedName && (i = Em(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "dtype[]":
          i = Rm(e.attr, r.tfName, r.defaultValue), i === void 0 && !!r.tfDeprecatedName && (i = Rm(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "func":
          i = Kx(e.attr, r.tfName, r.defaultValue), i === void 0 && !!r.tfDeprecatedName && (i = Kx(e.attr, r.tfDeprecatedName, r.defaultValue));
          break;
        case "tensor":
        case "tensors":
          break;
        default:
          throw new Error(`Unsupported param type: ${r.type} for op: ${e.op}`);
      }
      return s[r.name] = { value: i, type: a }, s;
    }, {})), n;
  }
  mapFunction(e) {
    let t = e.nodeDef, n = [], s = [], r = {};
    t != null && (r = t.reduce((c, p) => (c[p.name] = this.mapNode(p), p.op === "Const" && s.push(c[p.name]), c), {}));
    let a = [], i = [];
    e.signature.inputArg.forEach((c) => {
      let [p] = Ts(c.name), d = { name: p, op: "Placeholder", inputs: [], inputNames: [], category: "graph", inputParams: {}, attrParams: { dtype: { value: Qy(c.type), type: "dtype" } }, children: [] };
      d.signatureKey = c.name, a.push(d), r[p] = d;
    }), Object.keys(r).forEach((c) => {
      let p = r[c];
      p.inputNames.forEach((d, h) => {
        let [f, , m] = Ts(d), g = r[f];
        if (g.outputs != null) {
          let b = g.outputs.indexOf(m);
          if (b !== -1) {
            let y = `${f}:${b}`;
            p.inputNames[h] = y;
          }
        }
        p.inputs.push(g), g.children.push(p);
      });
    });
    let u = e.ret;
    e.signature.outputArg.forEach((c) => {
      let [p, d] = Ts(u[c.name]), h = r[p];
      h != null && (h.defaultOutput = d, i.push(h));
    });
    let l = this.mapArgsToSignature(e);
    return { nodes: r, inputs: a, outputs: i, weights: s, placeholders: n, signature: l };
  }
  mapArgsToSignature(e) {
    return { methodName: e.signature.name, inputs: e.signature.inputArg.reduce((t, n) => (t[n.name] = this.mapArgToTensorInfo(n), t), {}), outputs: e.signature.outputArg.reduce((t, n) => (t[n.name] = this.mapArgToTensorInfo(n, e.ret), t), {}) };
  }
  mapArgToTensorInfo(e, t) {
    let n = e.name;
    return t != null && (n = t[n]), { name: n, dtype: e.type };
  }
};
function r4(e) {
  let t = X().global;
  if (typeof t.atob != "undefined")
    return t.atob(e);
  if (typeof Buffer != "undefined")
    return new Buffer(e, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function wS(e, t) {
  let n = Array.isArray(e) ? String.fromCharCode.apply(null, e) : r4(e);
  return t ? n : n.toLowerCase();
}
function $m(e, t, n, s = false) {
  let r = e[t];
  return r != null ? wS(r.s, s) : n;
}
function _m(e, t, n) {
  let s = e[t];
  return s ? s.b : n;
}
function Am(e, t, n) {
  let s = e[t] || {}, r = s.i != null ? s.i : s.f != null ? s.f : n;
  return typeof r == "number" ? r : parseInt(r, 10);
}
function Qy(e) {
  switch (typeof e == "string" && (e = eS[e]), e) {
    case 1:
    case 19:
      return "float32";
    case 3:
    case 9:
    case 6:
    case 4:
      return "int32";
    case 10:
      return "bool";
    case 2:
      return "float32";
    case 7:
      return "string";
    default:
      return null;
  }
}
function Kx(e, t, n) {
  let s = e[t];
  return s && s.func ? s.func.name : n;
}
function Em(e, t, n) {
  let s = e[t];
  return s && s.type ? Qy(s.type) : n;
}
function Rm(e, t, n) {
  let s = e[t];
  return s && s.list && s.list.type ? s.list.type.map((r) => Qy(r)) : n;
}
function kS(e) {
  if (!e.unknownRank)
    return e.dim != null ? e.dim.map((t) => typeof t.size == "number" ? t.size : parseInt(t.size, 10)) : [];
}
function Dm(e, t, n) {
  let s = e[t];
  return s && s.shape ? kS(s.shape) : n;
}
function Fm(e, t, n) {
  let s = e[t];
  return s ? ((s.list.f && s.list.f.length ? s.list.f : s.list.i) || []).map((r) => typeof r == "number" ? r : parseInt(r, 10)) : n;
}
function Om(e, t, n, s = false) {
  let r = e[t];
  return r && r.list && r.list.s ? r.list.s.map((a) => wS(a, s)) : n;
}
function Pm(e, t, n) {
  let s = e[t];
  return s && s.list && s.list.shape ? s.list.shape.map((r) => kS(r)) : n;
}
function zm(e, t, n) {
  let s = e[t];
  return s && s.list && s.list.b ? s.list.b : n;
}
var a4 = class {
  constructor(e, t, n) {
    this.node = e, this.tensorMap = t, this.context = n, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map((s) => this.getInput(s)), e.rawAttrs != null && (this.attrs = Object.keys(e.rawAttrs).reduce((s, r) => (s[r] = this.getAttr(r), s), {}));
  }
  getInput(e) {
    return on(e, this.tensorMap, this.context);
  }
  getAttr(e, t) {
    let n = this.node.rawAttrs[e];
    if (n.tensor != null)
      return on(e, this.tensorMap, this.context);
    if (n.i != null || n.f != null)
      return Am(this.node.rawAttrs, e, t);
    if (n.s != null)
      return $m(this.node.rawAttrs, e, t);
    if (n.b != null)
      return _m(this.node.rawAttrs, e, t);
    if (n.shape != null)
      return Dm(this.node.rawAttrs, e, t);
    if (n.type != null)
      return Em(this.node.rawAttrs, e, t);
    if (n.list != null) {
      if (n.list.i != null || n.list.f != null)
        return Fm(this.node.rawAttrs, e, t);
      if (n.list.s != null)
        return Om(this.node.rawAttrs, e, t);
      if (n.list.shape != null)
        return Pm(this.node.rawAttrs, e, t);
      if (n.list.b != null)
        return zm(this.node.rawAttrs, e, t);
      if (n.list.type != null)
        return Rm(this.node.rawAttrs, e, t);
    }
    return t;
  }
};
var i4 = (e, t, n) => {
  switch (e.op) {
    case "BiasAdd":
    case "AddV2":
    case "Add":
      return [ie(I("a", e, t, n), I("b", e, t, n))];
    case "AddN":
      return [JA(I("tensors", e, t, n))];
    case "FloorMod":
    case "Mod":
      return [ND(I("a", e, t, n), I("b", e, t, n))];
    case "Mul":
      return [V(I("a", e, t, n), I("b", e, t, n))];
    case "RealDiv":
    case "Div":
      return [xe(I("a", e, t, n), I("b", e, t, n))];
    case "DivNoNan":
      return [IR(I("a", e, t, n), I("b", e, t, n))];
    case "FloorDiv":
      return [Yk(I("a", e, t, n), I("b", e, t, n))];
    case "Sub":
      return [ge(I("a", e, t, n), I("b", e, t, n))];
    case "Minimum":
      return [vp(I("a", e, t, n), I("b", e, t, n))];
    case "Maximum":
      return [_r(I("a", e, t, n), I("b", e, t, n))];
    case "Pow":
      return [ha(I("a", e, t, n), I("b", e, t, n))];
    case "SquaredDifference":
      return [NI(I("a", e, t, n), I("b", e, t, n))];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var o4 = (e, t, n) => {
  switch (e.op) {
    case "Abs":
    case "ComplexAbs":
      return [Mt(I("x", e, t, n))];
    case "Acos":
      return [XA(I("x", e, t, n))];
    case "Acosh":
      return [QA(I("x", e, t, n))];
    case "Asin":
      return [iE(I("x", e, t, n))];
    case "Asinh":
      return [uE(I("x", e, t, n))];
    case "Atan":
      return [cE(I("x", e, t, n))];
    case "Atan2":
      return [pE(I("x", e, t, n), I("y", e, t, n))];
    case "Atanh":
      return [fE(I("x", e, t, n))];
    case "Ceil":
      return [UE(I("x", e, t, n))];
    case "Complex":
      return [ua(I("real", e, t, n), I("imag", e, t, n))];
    case "Cos":
      return [Xg(I("x", e, t, n))];
    case "Cosh":
      return [oI(I("x", e, t, n))];
    case "Elu":
      return [gp(I("x", e, t, n))];
    case "Erf":
      return [_R(I("x", e, t, n))];
    case "Exp":
      return [Yn(I("x", e, t, n))];
    case "Expm1":
      return [DR(I("x", e, t, n))];
    case "Floor":
      return [bp(I("x", e, t, n))];
    case "Log":
      return [Qn(I("x", e, t, n))];
    case "Log1p":
      return [Zg(I("x", e, t, n))];
    case "Imag":
      return [Yg(I("x", e, t, n))];
    case "Neg":
      return [kt(I("x", e, t, n))];
    case "Reciprocal":
      return [n3(I("x", e, t, n))];
    case "Real":
      return [wd(I("x", e, t, n))];
    case "Relu":
      return [Ys(I("x", e, t, n))];
    case "Round":
      return [vI(I("x", e, t, n))];
    case "Selu":
      return [wI(I("x", e, t, n))];
    case "Sigmoid":
      return [qs(I("x", e, t, n))];
    case "Sin":
      return [kI(I("x", e, t, n))];
    case "Sign":
      return [y3(I("x", e, t, n))];
    case "Sinh":
      return [II(I("x", e, t, n))];
    case "Softplus":
      return [zl(I("x", e, t, n))];
    case "Sqrt":
      return [cn(I("x", e, t, n))];
    case "Square":
      return [ct(I("x", e, t, n))];
    case "Tanh":
      return [ju(I("x", e, t, n))];
    case "Tan":
      return [L3(I("x", e, t, n))];
    case "ClipByValue":
      return [Vn(I("x", e, t, n), I("clipValueMin", e, t, n), I("clipValueMax", e, t, n))];
    case "Relu6":
      return [yI(I("x", e, t, n))];
    case "Rsqrt":
      return [xI(on(e.inputNames[0], t, n))];
    case "Prod":
      return [bI(I("x", e, t, n), I("axes", e, t, n))];
    case "LeakyRelu":
      return [Qg(I("x", e, t, n), I("alpha", e, t, n))];
    case "Prelu":
      return [ab(I("x", e, t, n), I("alpha", e, t, n))];
    case "IsNan":
      return [GR(on(e.inputNames[0], t, n))];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
function qn(e, t, n = "") {
  if (!(typeof e == "number" || typeof t == "number")) {
    w.assert(e.length === t.length, () => n + ` Shapes ${e} and ${t} must match`);
    for (let s = 0; s < e.length; s++) {
      let r = e[s], a = t[s];
      w.assert(r < 0 || a < 0 || r === a, () => n + ` Shapes ${e} and ${t} must match`);
    }
  }
}
function Xx(e) {
  return !(typeof e == "number" || e.some((t) => t < 0));
}
function Tu(e, t, n) {
  let s = Mm(e, n), r = !Xx(s);
  if (r && t.length === 0)
    throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);
  if (r && t.forEach((a) => {
    s = Mm(a.shape, s);
  }), !Xx(s))
    throw new Error(`Non-fully-defined elementShape: ${s}`);
  return s;
}
function Mm(e, t) {
  if (typeof e == "number")
    return t;
  if (typeof t == "number")
    return e;
  if (e.length !== t.length)
    throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);
  let n = [];
  for (let s = 0; s < e.length; ++s) {
    let r = e[s], a = t[s];
    if (r >= 0 && a >= 0 && r !== a)
      throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);
    n[s] = r >= 0 ? r : a;
  }
  return n;
}
var u4 = class {
  constructor(e, t, n, s, r, a, i) {
    this.name = e, this.dtype = t, this.maxSize = n, this.elementShape = s, this.identicalElementShapes = r, this.dynamicSize = a, this.clearAfterRead = i, this.tensors = [], this.closed_ = false, this.idTensor = we(0), Ht(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  clearAndClose(e) {
    this.tensors.forEach((t) => {
      (e == null || !e.has(t.tensor.id)) && t.tensor.dispose();
    }), this.tensors = [], this.closed_ = true, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  read(e) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || e >= this.size())
      throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);
    let t = this.tensors[e];
    if (t.cleared)
      throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
    return this.clearAfterRead && (t.cleared = true), t.read = true, t.tensor;
  }
  readMany(e) {
    return e.map((t) => this.read(t));
  }
  write(e, t) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || !this.dynamicSize && e >= this.maxSize)
      throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);
    let n = this.tensors[e] || {};
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = t.shape), qn(this.elementShape, t.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${e}.`), n.read)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);
    if (n.written)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);
    n.tensor = t, Ht(t), n.written = true, this.tensors[e] = n;
  }
  writeMany(e, t) {
    if (e.length !== t.length)
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);
    e.forEach((n, s) => this.write(n, t[s]));
  }
  gather(e, t) {
    if (!!t && t !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);
    if (e)
      e = e.slice(0, this.size());
    else {
      e = [];
      for (let s = 0; s < this.size(); s++)
        e.push(s);
    }
    if (e.length === 0)
      return fs([], [0].concat(this.elementShape));
    let n = this.readMany(e);
    return qn(this.elementShape, n[0].shape, "TensorArray shape mismatch: "), es(n, 0);
  }
  concat(e) {
    if (!!e && e !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);
    if (this.size() === 0)
      return fs([], [0].concat(this.elementShape));
    let t = [];
    for (let s = 0; s < this.size(); s++)
      t.push(s);
    let n = this.readMany(t);
    return qn(this.elementShape, n[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`), Ft(n, 0);
  }
  scatter(e, t) {
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    if (e.length !== t.shape[0])
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);
    let n = Math.max(...e);
    if (!this.dynamicSize && n >= this.maxSize)
      throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);
    this.writeMany(e, Fs(t, 0));
  }
  split(e, t) {
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    let n = 0, s = e.map((o) => (n += o, n));
    if (n !== t.shape[0])
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${t.shape}`);
    if (!this.dynamicSize && e.length !== this.maxSize)
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);
    let r = n === 0 ? 0 : t.size / n, a = [];
    j(() => {
      t = G(t, [1, n, r]);
      for (let o = 0; o < e.length; ++o) {
        let u = o === 0 ? 0 : s[o - 1], l = [0, u, 0], c = [1, e[o], r];
        a[o] = G(qe(t, l, c), this.elementShape);
      }
      return a;
    });
    let i = [];
    for (let o = 0; o < e.length; o++)
      i[o] = o;
    this.writeMany(i, a);
  }
};
var no = class {
  constructor(e, t, n, s = -1) {
    this.tensors = e, this.elementShape = t, this.elementDtype = n, e != null && e.forEach((r) => {
      if (n !== r.dtype)
        throw new Error(`Invalid data types; op elements ${n}, but list elements ${r.dtype}`);
      qn(t, r.shape, "TensorList shape mismatch: "), Ht(r);
    }), this.idTensor = we(0), this.maxNumElements = s, Ht(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  copy() {
    return new no([...this.tensors], this.elementShape, this.elementDtype);
  }
  clearAndClose(e) {
    this.tensors.forEach((t) => {
      (e == null || !e.has(t.id)) && t.dispose();
    }), this.tensors.length = 0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  stack(e, t, n = -1) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    if (n !== -1 && this.tensors.length !== n)
      throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);
    qn(e, this.elementShape, "TensorList shape mismatch: ");
    let s = Tu(this.elementShape, this.tensors, e);
    return j(() => {
      let r = this.tensors.map((a) => G(a, s));
      return es(r, 0);
    });
  }
  popBack(e, t) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    if (this.size() === 0)
      throw new Error("Trying to pop from an empty list.");
    let n = Tu(this.elementShape, this.tensors, e), s = this.tensors.pop();
    return qn(s.shape, e, "TensorList shape mismatch: "), G(s, n);
  }
  pushBack(e) {
    if (e.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);
    if (qn(e.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size())
      throw new Error("Trying to push element into a full list.");
    Ht(e), this.tensors.push(e);
  }
  resize(e) {
    if (e < 0)
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);
    if (this.maxNumElements !== -1 && e > this.maxNumElements)
      throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);
    let t = new no([], this.elementShape, this.elementDtype, this.maxNumElements);
    t.tensors.length = e;
    for (let n = 0; n < Math.min(this.tensors.length, e); ++n)
      t.tensors[n] = this.tensors[n];
    return t;
  }
  getItem(e, t, n) {
    if (n !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);
    if (e < 0 || e > this.tensors.length)
      throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);
    if (this.tensors[e] == null)
      throw new Error(`element at index ${e} is null.`);
    qn(this.tensors[e].shape, t, "TensorList shape mismatch: ");
    let s = Tu(this.elementShape, this.tensors, t);
    return G(this.tensors[e], s);
  }
  setItem(e, t) {
    if (t.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);
    if (e < 0 || this.maxNumElements !== -1 && e >= this.maxNumElements)
      throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);
    qn(this.elementShape, t.shape, "TensorList shape mismatch: "), Ht(t), this.tensors[e] = t;
  }
  gather(e, t, n) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    qn(this.elementShape, n, "TensorList shape mismatch: "), e = e.slice(0, this.size());
    let s = Tu(this.elementShape, this.tensors, n);
    return e.length === 0 ? fs([], [0].concat(s)) : j(() => {
      let r = e.map((a) => G(this.tensors[a], s));
      return es(r, 0);
    });
  }
  concat(e, t) {
    if (!!e && e !== this.elementDtype)
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);
    qn(this.elementShape, t, "TensorList shape mismatch: ");
    let n = Tu(this.elementShape, this.tensors, t);
    return this.size() === 0 ? fs([], [0].concat(n)) : j(() => {
      let s = this.tensors.map((r) => G(r, n));
      return Ft(s, 0);
    });
  }
};
function l4(e, t, n) {
  let s = e.dtype;
  if (e.shape.length < 1)
    throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);
  if (e.dtype !== n)
    throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);
  let r = e.shape.slice(1);
  qn(r, t, "TensorList shape mismatch: ");
  let a = Fs(e);
  return new no(a, t, s);
}
function c4(e, t, n) {
  return new no([], e, t, n);
}
function d4(e, t, n, s) {
  if (t.length !== e.shape[0])
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);
  let r = Math.max(...t);
  if (s != null && s !== -1 && r >= s)
    throw new Error(`Max index must be < array size (${r}  vs. ${s})`);
  let a = new no([], n, e.dtype, s), i = Fs(e, 0);
  return t.forEach((o, u) => {
    a.setItem(o, i[u]);
  }), a;
}
function p4(e, t, n) {
  let s = 0, r = t.map((c) => (s += c, s));
  if (s !== e.shape[0])
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${e.shape}`);
  let a = e.shape.slice(1), i = Mm(a, n), o = s === 0 ? 0 : e.size / s, u = j(() => {
    let c = [];
    e = G(e, [1, s, o]);
    for (let p = 0; p < t.length; ++p) {
      let d = p === 0 ? 0 : r[p - 1], h = [0, d, 0], f = [1, t[p], o];
      c[p] = G(qe(e, h, f), i);
    }
    return e.dispose(), c;
  }), l = new no([], n, e.dtype, t.length);
  for (let c = 0; c < u.length; c++)
    l.setItem(c, u[c]);
  return l;
}
var h4 = async (e, t, n) => {
  switch (e.op) {
    case "If":
    case "StatelessIf": {
      let s = I("thenBranch", e, t, n), r = I("elseBranch", e, t, n), a = I("cond", e, t, n), i = I("args", e, t, n);
      return (await a.data())[0] ? n.functionMap[s].executeFunctionAsync(i, n.tensorArrayMap, n.tensorListMap) : n.functionMap[r].executeFunctionAsync(i, n.tensorArrayMap, n.tensorListMap);
    }
    case "While":
    case "StatelessWhile": {
      let s = I("body", e, t, n), r = I("cond", e, t, n), a = I("args", e, t, n), i = await n.functionMap[r].executeFunctionAsync(a, n.tensorArrayMap, n.tensorListMap), o = a.map((c) => c.id), u = await i[0].data();
      i.forEach((c) => {
        !c.kept && o.indexOf(c.id) === -1 && c.dispose();
      });
      let l = a;
      for (; u[0]; ) {
        let c = l;
        l = await n.functionMap[s].executeFunctionAsync(l, n.tensorArrayMap, n.tensorListMap);
        let p = l.map((h) => h.id);
        c.forEach((h) => {
          !h.kept && o.indexOf(h.id) === -1 && p.indexOf(h.id) === -1 && h.dispose();
        });
        let d = await n.functionMap[r].executeFunctionAsync(l, n.tensorArrayMap, n.tensorListMap);
        u = await d[0].data(), d.forEach((h) => {
          !h.kept && o.indexOf(h.id) === -1 && p.indexOf(h.id) === -1 && h.dispose();
        });
      }
      return l;
    }
    case "LoopCond": {
      let s = I("pred", e, t, n);
      return [Us(s)];
    }
    case "Switch": {
      let s = I("pred", e, t, n), r = I("data", e, t, n);
      return r.kept || (r = Us(r)), (await s.data())[0] ? [void 0, r] : [r, void 0];
    }
    case "Merge": {
      let s = e.inputNames.find((r) => on(r, t, n) !== void 0);
      if (s) {
        let r = on(s, t, n);
        return [Us(r)];
      }
      return;
    }
    case "Enter": {
      let s = I("frameName", e, t, n), r = I("tensor", e, t, n);
      return n.enterFrame(s), [Us(r)];
    }
    case "Exit": {
      let s = I("tensor", e, t, n);
      return n.exitFrame(), [Us(s)];
    }
    case "NextIteration": {
      let s = I("tensor", e, t, n);
      return n.nextIteration(), [Us(s)];
    }
    case "TensorArrayV3": {
      let s = I("size", e, t, n), r = I("dtype", e, t, n), a = I("elementShape", e, t, n), i = I("dynamicSize", e, t, n), o = I("clearAfterRead", e, t, n), u = I("identicalElementShapes", e, t, n), l = I("name", e, t, n), c = new u4(l, r, s, a, u, i, o);
      return n.addTensorArray(c), [c.idTensor, we(1)];
    }
    case "TensorArrayWriteV3": {
      let s = I("tensorArrayId", e, t, n), r = I("index", e, t, n), a = I("tensor", e, t, n), i = n.getTensorArray(s.id);
      return i.write(r, a), [i.idTensor];
    }
    case "TensorArrayReadV3": {
      let s = I("tensorArrayId", e, t, n), r = I("index", e, t, n);
      return [n.getTensorArray(s.id).read(r)];
    }
    case "TensorArrayGatherV3": {
      let s = I("tensorArrayId", e, t, n), r = I("indices", e, t, n), a = I("dtype", e, t, n);
      return [n.getTensorArray(s.id).gather(r, a)];
    }
    case "TensorArrayScatterV3": {
      let s = I("tensorArrayId", e, t, n), r = I("indices", e, t, n), a = I("tensor", e, t, n), i = n.getTensorArray(s.id);
      return i.scatter(r, a), [i.idTensor];
    }
    case "TensorArrayConcatV3": {
      let s = I("tensorArrayId", e, t, n), r = n.getTensorArray(s.id), a = I("dtype", e, t, n);
      return [r.concat(a)];
    }
    case "TensorArraySplitV3": {
      let s = I("tensorArrayId", e, t, n), r = I("tensor", e, t, n), a = I("lengths", e, t, n), i = n.getTensorArray(s.id);
      return i.split(a, r), [i.idTensor];
    }
    case "TensorArraySizeV3": {
      let s = I("tensorArrayId", e, t, n), r = n.getTensorArray(s.id);
      return [we(r.size(), "int32")];
    }
    case "TensorArrayCloseV3": {
      let s = I("tensorArrayId", e, t, n), r = n.getTensorArray(s.id);
      return r.clearAndClose(), [r.idTensor];
    }
    case "TensorListSetItem": {
      let s = I("tensorListId", e, t, n), r = I("index", e, t, n), a = I("tensor", e, t, n), i = n.getTensorList(s.id);
      return i.setItem(r, a), [i.idTensor];
    }
    case "TensorListGetItem": {
      let s = I("tensorListId", e, t, n), r = I("index", e, t, n), a = I("elementShape", e, t, n), i = I("elementDType", e, t, n);
      return [n.getTensorList(s.id).getItem(r, a, i)];
    }
    case "TensorListScatterV2":
    case "TensorListScatter": {
      let s = I("indices", e, t, n), r = I("tensor", e, t, n), a = I("elementShape", e, t, n), i = I("numElements", e, t, n), o = d4(r, s, a, i);
      return n.addTensorList(o), [o.idTensor];
    }
    case "TensorListReserve":
    case "EmptyTensorList": {
      let s = I("elementShape", e, t, n), r = I("elementDType", e, t, n), a;
      e.op === "TensorListReserve" ? a = "numElements" : a = "maxNumElements";
      let i = I(a, e, t, n), o = c4(s, r, i);
      return n.addTensorList(o), [o.idTensor];
    }
    case "TensorListGather": {
      let s = I("tensorListId", e, t, n), r = I("indices", e, t, n), a = I("elementShape", e, t, n), i = I("elementDType", e, t, n);
      return [n.getTensorList(s.id).gather(r, i, a)];
    }
    case "TensorListStack": {
      let s = I("tensorListId", e, t, n), r = I("elementShape", e, t, n), a = I("elementDType", e, t, n), i = I("numElements", e, t, n);
      return [n.getTensorList(s.id).stack(r, a, i)];
    }
    case "TensorListFromTensor": {
      let s = I("tensor", e, t, n), r = I("elementShape", e, t, n), a = I("elementDType", e, t, n), i = l4(s, r, a);
      return n.addTensorList(i), [i.idTensor];
    }
    case "TensorListConcat": {
      let s = I("tensorListId", e, t, n), r = n.getTensorList(s.id), a = I("dtype", e, t, n), i = I("elementShape", e, t, n);
      return [r.concat(a, i)];
    }
    case "TensorListPushBack": {
      let s = I("tensorListId", e, t, n), r = I("tensor", e, t, n), a = n.getTensorList(s.id);
      return a.pushBack(r), [a.idTensor];
    }
    case "TensorListPopBack": {
      let s = I("tensorListId", e, t, n), r = I("elementShape", e, t, n), a = I("elementDType", e, t, n);
      return [n.getTensorList(s.id).popBack(r, a)];
    }
    case "TensorListSplit": {
      let s = I("tensor", e, t, n), r = I("elementShape", e, t, n), a = I("lengths", e, t, n), i = p4(s, a, r);
      return n.addTensorList(i), [i.idTensor];
    }
    case "TensorListLength": {
      let s = I("tensorListId", e, t, n), r = n.getTensorList(s.id);
      return [we(r.size(), "int32")];
    }
    case "TensorListResize": {
      let s = I("tensorListId", e, t, n), r = I("size", e, t, n), i = n.getTensorList(s.id).resize(r);
      return n.addTensorList(i), [i.idTensor];
    }
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
function Yx(e, t, n) {
  let [s, r] = I("fusedOps", e, t, n), a = s === "biasadd", i = !a, o = r === "prelu", u = s === "fusedbatchnorm", l = I("numArgs", e, t, n);
  if (a) {
    if (o && l !== 2)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
    if (!o && a && l !== 1)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
  }
  if (u)
    throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
  let c = I("strides", e, t, n), p = sd(e, t, n), d = I("dataFormat", e, t, n).toUpperCase(), h = I("dilations", e, t, n), [f, m] = I("args", e, t, n);
  i && (m = f, f = void 0);
  let g = I("leakyreluAlpha", e, t, n);
  return { stride: c, pad: p, dataFormat: d, dilations: h, biasArg: f, preluArg: m, activationFunc: r, leakyreluAlpha: g };
}
var f4 = (e, t, n) => {
  switch (e.op) {
    case "Conv1D": {
      let s = I("stride", e, t, n), r = I("pad", e, t, n), a = I("dataFormat", e, t, n).toUpperCase(), i = I("dilation", e, t, n);
      return [sI(I("x", e, t, n), I("filter", e, t, n), s, r, a, i)];
    }
    case "Conv2D": {
      let s = I("strides", e, t, n), r = sd(e, t, n), a = I("dataFormat", e, t, n).toUpperCase(), i = I("dilations", e, t, n);
      return [da(I("x", e, t, n), I("filter", e, t, n), [s[1], s[2]], r, a, [i[1], i[2]])];
    }
    case "_FusedConv2D": {
      let { stride: s, pad: r, dataFormat: a, dilations: i, biasArg: o, preluArg: u, activationFunc: l, leakyreluAlpha: c } = Yx(e, t, n);
      return [fa.conv2d({ x: I("x", e, t, n), filter: I("filter", e, t, n), strides: [s[1], s[2]], pad: r, dataFormat: a, dilations: [i[1], i[2]], bias: o, activation: l, preluActivationWeights: u, leakyreluAlpha: c })];
    }
    case "FusedDepthwiseConv2dNative": {
      let { stride: s, pad: r, dataFormat: a, dilations: i, biasArg: o, preluArg: u, activationFunc: l, leakyreluAlpha: c } = Yx(e, t, n);
      return [fa.depthwiseConv2d({ x: I("x", e, t, n), filter: I("filter", e, t, n), strides: [s[1], s[2]], pad: r, dataFormat: a, dilations: [i[1], i[2]], bias: o, activation: l, preluActivationWeights: u, leakyreluAlpha: c })];
    }
    case "Conv2DBackpropInput":
    case "Conv2dTranspose": {
      let s = I("outputShape", e, t, n), r = I("strides", e, t, n), a = sd(e, t, n);
      return [rI(I("x", e, t, n), I("filter", e, t, n), s, [r[1], r[2]], a)];
    }
    case "DepthwiseConv2dNative":
    case "DepthwiseConv2d": {
      let s = I("strides", e, t, n), r = sd(e, t, n), a = I("dilations", e, t, n), i = I("dataFormat", e, t, n).toUpperCase();
      return [mp(I("input", e, t, n), I("filter", e, t, n), [s[1], s[2]], r, i, [a[1], a[2]])];
    }
    case "Conv3D": {
      let s = I("strides", e, t, n), r = I("pad", e, t, n), a = I("dataFormat", e, t, n).toUpperCase(), i = I("dilations", e, t, n);
      return [aI(I("x", e, t, n), I("filter", e, t, n), [s[1], s[2], s[3]], r, a, [i[1], i[2], i[3]])];
    }
    case "AvgPool": {
      let s = I("strides", e, t, n), r = I("pad", e, t, n), a = I("kernelSize", e, t, n);
      return [qg(I("x", e, t, n), [a[1], a[2]], [s[1], s[2]], r)];
    }
    case "MaxPool": {
      let s = I("strides", e, t, n), r = I("pad", e, t, n), a = I("kernelSize", e, t, n);
      return [nb(I("x", e, t, n), [a[1], a[2]], [s[1], s[2]], r)];
    }
    case "MaxPoolWithArgmax": {
      let s = I("strides", e, t, n), r = I("pad", e, t, n), a = I("kernelSize", e, t, n), i = I("includeBatchInIndex", e, t, n), { result: o, indexes: u } = yD(I("x", e, t, n), [a[1], a[2]], [s[1], s[2]], r, i);
      return [o, u];
    }
    case "AvgPool3D": {
      let s = I("strides", e, t, n), r = I("pad", e, t, n), a = I("kernelSize", e, t, n);
      return [tI(I("x", e, t, n), [a[1], a[2], a[3]], [s[1], s[2], s[3]], r)];
    }
    case "MaxPool3D": {
      let s = I("strides", e, t, n), r = I("pad", e, t, n), a = I("kernelSize", e, t, n);
      return [gI(I("x", e, t, n), [a[1], a[2], a[3]], [s[1], s[2], s[3]], r)];
    }
    case "Dilation2D": {
      let s = I("strides", e, t, n), r = I("pad", e, t, n), a = I("dilations", e, t, n), i = s[1], o = s[2], u = a[1], l = a[2];
      return [yR(I("x", e, t, n), I("filter", e, t, n), [i, o], r, [u, l], "NHWC")];
    }
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var m4 = (e, t, n) => {
  switch (e.op) {
    case "Fill": {
      let s = I("shape", e, t, n), r = I("dtype", e, t, n), a = I("value", e, t, n);
      return [Pl(s, a, r)];
    }
    case "LinSpace": {
      let s = I("start", e, t, n), r = I("stop", e, t, n), a = I("num", e, t, n);
      return [KR(s, r, a)];
    }
    case "Multinomial": {
      let s = I("logits", e, t, n), r = I("numSamples", e, t, n), a = I("seed", e, t, n);
      return [ED(s, r, a)];
    }
    case "OneHot": {
      let s = I("indices", e, t, n), r = I("depth", e, t, n), a = I("onValue", e, t, n), i = I("offValue", e, t, n);
      return [vd(s, r, a, i)];
    }
    case "Ones":
      return [Mn(I("shape", e, t, n), I("dtype", e, t, n))];
    case "OnesLike":
      return [Zn(I("x", e, t, n))];
    case "RandomUniform":
      return [Ml(I("shape", e, t, n), I("minval", e, t, n), I("maxval", e, t, n), I("dtype", e, t, n))];
    case "Range": {
      let s = I("start", e, t, n), r = I("stop", e, t, n), a = I("step", e, t, n);
      return [Qu(s, r, a, I("dtype", e, t, n))];
    }
    case "TruncatedNormal": {
      let s = I("shape", e, t, n), r = I("mean", e, t, n), a = I("stdDev", e, t, n), i = I("seed", e, t, n);
      return [hb(s, r, a, I("dtype", e, t, n), i)];
    }
    case "Zeros":
      return [$t(I("shape", e, t, n), I("dtype", e, t, n))];
    case "ZerosLike":
      return [je(I("x", e, t, n))];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
function qf(e, t, n) {
  let s = I("boxes", e, t, n), r = I("scores", e, t, n), a = I("maxOutputSize", e, t, n), i = I("iouThreshold", e, t, n), o = I("scoreThreshold", e, t, n), u = I("softNmsSigma", e, t, n);
  return { boxes: s, scores: r, maxOutputSize: a, iouThreshold: i, scoreThreshold: o, softNmsSigma: u };
}
var g4 = async (e, t, n) => {
  switch (e.op) {
    case "NonMaxSuppressionV5": {
      let { boxes: s, scores: r, maxOutputSize: a, iouThreshold: i, scoreThreshold: o, softNmsSigma: u } = qf(e, t, n), l = await jn.nonMaxSuppressionWithScoreAsync(s, r, a, i, o, u);
      return [l.selectedIndices, l.selectedScores];
    }
    case "NonMaxSuppressionV4": {
      let { boxes: s, scores: r, maxOutputSize: a, iouThreshold: i, scoreThreshold: o } = qf(e, t, n), u = I("padToMaxOutputSize", e, t, n), l = await jn.nonMaxSuppressionPaddedAsync(s, r, a, i, o, u);
      return [l.selectedIndices, l.validOutputs];
    }
    case "NonMaxSuppressionV3":
    case "NonMaxSuppressionV2": {
      let { boxes: s, scores: r, maxOutputSize: a, iouThreshold: i, scoreThreshold: o } = qf(e, t, n);
      return [await jn.nonMaxSuppressionAsync(s, r, a, i, o)];
    }
    case "Where": {
      let s = ce(I("condition", e, t, n), "bool"), r = [await $I(s)];
      return s.dispose(), r;
    }
    case "ListDiff":
      return g3(I("x", e, t, n), I("y", e, t, n));
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var b4 = (e, t, n) => {
  switch (e.op) {
    case "TopKV2": {
      let s = I("x", e, t, n), r = I("k", e, t, n), a = I("sorted", e, t, n), i = V3(s, r, a);
      return [i.values, i.indices];
    }
    case "Unique": {
      let s = I("x", e, t, n), r = mx(s);
      return [r.values, r.indices];
    }
    case "UniqueV2": {
      let s = I("x", e, t, n), r = I("axis", e, t, n), a = mx(s, r);
      return [a.values, a.indices];
    }
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var y4 = (e, t, n) => {
  switch (e.op) {
    case "Const":
      return t[e.name];
    case "PlaceholderWithDefault":
      let s = I("default", e, t, n);
      return [on(e.name, t, n) || s];
    case "Placeholder":
      return [on(e.name, t, n)];
    case "Identity":
    case "StopGradient":
    case "FakeQuantWithMinMaxVars": {
      let l = I("x", e, t, n);
      return [Us(l)];
    }
    case "IdentityN":
      return I("x", e, t, n).map((l) => Us(l));
    case "Snapshot":
      let r = I("x", e, t, n);
      return [Us(r)];
    case "Shape":
      return [Qt(I("x", e, t, n).shape, "int32")];
    case "ShapeN":
      return I("x", e, t, n).map((l) => Qt(l.shape));
    case "Size":
      return [we(I("x", e, t, n).size, "int32")];
    case "Rank":
      return [we(I("x", e, t, n).rank, "int32")];
    case "NoOp":
      return [we(1)];
    case "Print":
      let a = I("x", e, t, n), i = I("data", e, t, n), o = I("message", e, t, n), u = I("summarize", e, t, n);
      console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(o);
      for (let l = 0; l < i.length; l++)
        console.log(Array.prototype.slice.call(i[l].dataSync()).slice(0, u));
      return [a];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var v4 = class {
  constructor(e, t) {
    this.keyDType = e, this.valueDType = t, this.handle = we(0), this.tensorMap = /* @__PURE__ */ new Map(), Ht(this.handle);
  }
  get id() {
    return this.handle.id;
  }
  clearAndClose() {
    this.tensorMap.forEach((e) => e.dispose()), this.tensorMap.clear(), this.handle.dispose();
  }
  size() {
    return this.tensorMap.size;
  }
  tensorSize() {
    return we(this.size(), "int32");
  }
  async import(e, t) {
    this.checkKeyAndValueTensor(e, t);
    let n = await e.data();
    return this.tensorMap.forEach((s) => s.dispose()), this.tensorMap.clear(), j(() => {
      let s = Fs(t), r = n.length, a = s.length;
      w.assert(r === a, () => `The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`);
      for (let i = 0; i < r; i++) {
        let o = n[i], u = s[i];
        Ht(u), this.tensorMap.set(o, u);
      }
      return this.handle;
    });
  }
  async find(e, t) {
    this.checkKeyAndValueTensor(e, t);
    let n = await e.data();
    return j(() => {
      let s = [];
      for (let r = 0; r < n.length; r++) {
        let a = n[r], i = this.findWithDefault(a, t);
        s.push(i);
      }
      return es(s);
    });
  }
  findWithDefault(e, t) {
    let n = this.tensorMap.get(e);
    return n != null ? n : t;
  }
  checkKeyAndValueTensor(e, t) {
    if (e.dtype !== this.keyDType)
      throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);
    if (t.dtype !== this.valueDType)
      throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`);
  }
};
var x4 = async (e, t, n, s) => {
  switch (e.op) {
    case "HashTable":
    case "HashTableV2": {
      let r = I("keyDType", e, t, n), a = I("valueDType", e, t, n), i = new v4(r, a);
      return s.addHashTable(e.name, i), [i.handle];
    }
    case "LookupTableImport":
    case "LookupTableImportV2": {
      let r = I("tableHandle", e, t, n, s), a = I("keys", e, t, n), i = I("values", e, t, n);
      return [await s.getHashTableById(r.id).import(a, i)];
    }
    case "LookupTableFind":
    case "LookupTableFindV2": {
      let r = I("tableHandle", e, t, n, s), a = I("keys", e, t, n), i = I("defaultValue", e, t, n);
      return [await s.getHashTableById(r.id).find(a, i)];
    }
    case "LookupTableSize":
    case "LookupTableSizeV2": {
      let r = I("tableHandle", e, t, n, s);
      return [s.getHashTableById(r.id).tensorSize()];
    }
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var w4 = (e, t, n) => {
  switch (e.op) {
    case "ResizeBilinear": {
      let s = I("images", e, t, n), r = I("size", e, t, n), a = I("alignCorners", e, t, n), i = I("halfPixelCenters", e, t, n);
      return [jn.resizeBilinear(s, [r[0], r[1]], a, i)];
    }
    case "ResizeNearestNeighbor": {
      let s = I("images", e, t, n), r = I("size", e, t, n), a = I("alignCorners", e, t, n), i = I("halfPixelCenters", e, t, n);
      return [jn.resizeNearestNeighbor(s, [r[0], r[1]], a, i)];
    }
    case "CropAndResize": {
      let s = I("image", e, t, n), r = I("boxes", e, t, n), a = I("boxInd", e, t, n), i = I("cropSize", e, t, n), o = I("method", e, t, n), u = I("extrapolationValue", e, t, n);
      return [jn.cropAndResize(s, r, a, i, o, u)];
    }
    case "ImageProjectiveTransformV3": {
      let s = I("images", e, t, n), r = I("transforms", e, t, n), a = I("outputShape", e, t, n), i = I("fillValue", e, t, n), o = I("interpolation", e, t, n), u = I("fillMode", e, t, n);
      return [jn.transform(s, r, o.toLowerCase(), u.toLowerCase(), i, a)];
    }
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var k4 = (e, t, n) => {
  switch (e.op) {
    case "Equal":
      return [Xn(I("a", e, t, n), I("b", e, t, n))];
    case "NotEqual":
      return [Yu(I("a", e, t, n), I("b", e, t, n))];
    case "Greater":
      return [Un(I("a", e, t, n), I("b", e, t, n))];
    case "GreaterEqual":
      return [Xo(I("a", e, t, n), I("b", e, t, n))];
    case "Less":
      return [cI(I("a", e, t, n), I("b", e, t, n))];
    case "LessEqual":
      return [Yo(I("a", e, t, n), I("b", e, t, n))];
    case "LogicalAnd":
      return [Ds(I("a", e, t, n), I("b", e, t, n))];
    case "LogicalNot":
      return [tb(I("a", e, t, n))];
    case "LogicalOr":
      return [mI(I("a", e, t, n), I("b", e, t, n))];
    case "Select":
    case "SelectV2":
      return [vn(I("condition", e, t, n), I("a", e, t, n), I("b", e, t, n))];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var I4 = (e, t, n) => {
  switch (e.op) {
    case "BatchMatMul":
    case "BatchMatMulV2":
    case "MatMul":
      return [We(I("a", e, t, n), I("b", e, t, n), I("transposeA", e, t, n), I("transposeB", e, t, n))];
    case "Einsum":
      return [NR(I("equation", e, t, n), ...I("tensors", e, t, n))];
    case "Transpose":
      return [Ge(I("x", e, t, n), I("perm", e, t, n))];
    case "_FusedMatMul":
      let [s, r] = I("fusedOps", e, t, n), a = s === "biasadd", i = r === "prelu", o = I("numArgs", e, t, n), u = I("leakyreluAlpha", e, t, n);
      if (a) {
        if (i && o !== 2)
          throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
        if (!i && o !== 1)
          throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
      }
      let [l, c] = I("args", e, t, n);
      return [fa.matMul({ a: I("a", e, t, n), b: I("b", e, t, n), transposeA: I("transposeA", e, t, n), transposeB: I("transposeB", e, t, n), bias: l, activation: r, preluActivationWeights: c, leakyreluAlpha: u })];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var S4 = (e, t, n) => {
  switch (e.op) {
    case "FusedBatchNorm":
    case "FusedBatchNormV2":
      return [Ku(I("x", e, t, n), I("mean", e, t, n), I("variance", e, t, n), I("offset", e, t, n), I("scale", e, t, n), I("epsilon", e, t, n))];
    case "FusedBatchNormV3":
      return [Ku(I("x", e, t, n), I("mean", e, t, n), I("variance", e, t, n), I("offset", e, t, n), I("scale", e, t, n), I("epsilon", e, t, n))];
    case "LRN":
      return [YR(I("x", e, t, n), I("radius", e, t, n), I("bias", e, t, n), I("alpha", e, t, n), I("beta", e, t, n))];
    case "Softmax":
      return [cb(I("x", e, t, n))];
    case "LogSoftmax":
      return [dI(I("x", e, t, n))];
    case "SparseToDense":
      return [EI(I("sparseIndices", e, t, n), I("outputShape", e, t, n), I("sparseValues", e, t, n), I("defaultValue", e, t, n))];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var C4 = (e, t, n) => {
  switch (e.op) {
    case "Max": {
      let i = I("axis", e, t, n), o = I("keepDims", e, t, n);
      return [As(I("x", e, t, n), i, o)];
    }
    case "Mean": {
      let i = I("axis", e, t, n), o = I("keepDims", e, t, n);
      return [St(I("x", e, t, n), i, o)];
    }
    case "Min": {
      let i = I("axis", e, t, n), o = I("keepDims", e, t, n);
      return [gm(I("x", e, t, n), i, o)];
    }
    case "Sum": {
      let i = I("axis", e, t, n), o = I("keepDims", e, t, n);
      return [ve(I("x", e, t, n), i, o)];
    }
    case "All": {
      let i = I("axis", e, t, n), o = I("keepDims", e, t, n);
      return [Qk(I("x", e, t, n), i, o)];
    }
    case "Any": {
      let i = I("axis", e, t, n), o = I("keepDims", e, t, n);
      return [hm(I("x", e, t, n), i, o)];
    }
    case "ArgMax": {
      let i = I("axis", e, t, n);
      return [qu(I("x", e, t, n), i)];
    }
    case "ArgMin": {
      let i = I("axis", e, t, n);
      return [rE(I("x", e, t, n), i)];
    }
    case "Prod": {
      let i = I("axis", e, t, n), o = I("keepDims", e, t, n);
      return [bI(I("x", e, t, n), i, o)];
    }
    case "Cumprod": {
      let i = I("axis", e, t, n), o = I("exclusive", e, t, n), u = I("reverse", e, t, n);
      return [mm(I("x", e, t, n), i, o, u)];
    }
    case "Cumsum": {
      let i = I("axis", e, t, n), o = I("exclusive", e, t, n), u = I("reverse", e, t, n);
      return [uI(I("x", e, t, n), i, o, u)];
    }
    case "Bincount":
      let s = I("x", e, t, n), r = I("weights", e, t, n), a = I("size", e, t, n);
      return [nI(s, r, a)];
    case "DenseBincount": {
      let i = I("x", e, t, n), o = I("weights", e, t, n), u = I("size", e, t, n), l = I("binaryOutput", e, t, n);
      return [pR(i, o, u, l)];
    }
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var N4 = (e, t, n) => {
  switch (e.op) {
    case "ConcatV2":
    case "Concat": {
      let s = I("n", e, t, n), r = I("axis", e, t, n), a = I("tensors", e, t, n);
      return a = a.slice(0, s), [Ft(a, r)];
    }
    case "Gather": {
      let s = I("x", e, t, n), r = I("indices", e, t, n);
      return [Xu(s, ce(r, "int32"), 0)];
    }
    case "GatherV2": {
      let s = I("axis", e, t, n), r = I("batchDims", e, t, n), a = I("x", e, t, n), i = I("indices", e, t, n);
      return [Xu(a, ce(i, "int32"), s, r)];
    }
    case "Reverse": {
      let s = I("dims", e, t, n), r = [];
      for (let i = 0; i < s.length; i++)
        s[i] && r.push(i);
      let a = I("x", e, t, n);
      return [Jn(a, r)];
    }
    case "ReverseV2": {
      let s = I("axis", e, t, n), r = I("x", e, t, n);
      return [Jn(r, s)];
    }
    case "Slice": {
      let s = I("begin", e, t, n), r = I("size", e, t, n);
      return [qe(I("x", e, t, n), s, r)];
    }
    case "StridedSlice": {
      let s = I("begin", e, t, n), r = I("end", e, t, n), a = I("strides", e, t, n), i = I("beginMask", e, t, n), o = I("endMask", e, t, n), u = I("ellipsisMask", e, t, n), l = I("newAxisMask", e, t, n), c = I("shrinkAxisMask", e, t, n), p = I("x", e, t, n);
      return [z3(p, s, r, a, i, o, u, l, c)];
    }
    case "Pack":
      return j(() => {
        let s = I("axis", e, t, n), r = I("tensors", e, t, n), a = r[0].shape, i = gr(r[0]).shape, o = r.map((u) => {
          let l = w.arraysEqual(u.shape, a);
          if (!l && !w.arraysEqual(gr(u).shape, i))
            throw new Error("the input tensors shape does not match");
          return l ? u : G(u, a);
        });
        return [es(o, s)];
      });
    case "Unpack": {
      let s = I("axis", e, t, n), r = I("tensor", e, t, n);
      return Fs(r, s);
    }
    case "Tile": {
      let s = I("reps", e, t, n);
      return [ps(I("x", e, t, n), s)];
    }
    case "Split":
    case "SplitV": {
      let s = I("axis", e, t, n), r = I("numOrSizeSplits", e, t, n), a = I("x", e, t, n);
      return Bn(a, r, s);
    }
    case "ScatterNd": {
      let s = I("indices", e, t, n), r = I("values", e, t, n), a = I("shape", e, t, n);
      return [J3(s, r, a)];
    }
    case "GatherNd": {
      let s = I("x", e, t, n), r = I("indices", e, t, n);
      return [sF(s, r)];
    }
    case "SparseToDense": {
      let s = I("sparseIndices", e, t, n), r = I("outputShape", e, t, n), a = I("sparseValues", e, t, n), i = I("defaultValue", e, t, n);
      return [EI(s, a, r, a.dtype === i.dtype ? i : ce(i, a.dtype))];
    }
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var T4 = (e, t, n) => {
  switch (e.op) {
    case "SparseFillEmptyRows": {
      let { outputIndices: s, outputValues: r, emptyRowIndicator: a, reverseIndexMap: i } = Wc.sparseFillEmptyRows(I("indices", e, t, n), I("values", e, t, n), I("denseShape", e, t, n), I("defaultValue", e, t, n));
      return [s, r, a, i];
    }
    case "SparseReshape": {
      let { outputIndices: s, outputShape: r } = Wc.sparseReshape(I("inputIndices", e, t, n), I("inputShape", e, t, n), I("newShape", e, t, n));
      return [s, r];
    }
    case "SparseSegmentMean":
      return [Wc.sparseSegmentMean(I("data", e, t, n), I("indices", e, t, n), I("segmentIds", e, t, n))];
    case "SparseSegmentSum":
      return [Wc.sparseSegmentSum(I("data", e, t, n), I("indices", e, t, n), I("segmentIds", e, t, n))];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var $4 = (e, t, n) => {
  switch (e.op) {
    case "FFT":
      return [db(I("x", e, t, n))];
    case "IFFT":
      return [Id(I("x", e, t, n))];
    case "RFFT":
      return [pb(I("x", e, t, n))];
    case "IRFFT":
      return [CI(I("x", e, t, n))];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var _4 = (e, t, n) => {
  switch (e.op) {
    case "StringNGrams": {
      let { nGrams: s, nGramsSplits: r } = Bf.stringNGrams(I("data", e, t, n), I("dataSplits", e, t, n), I("separator", e, t, n), I("nGramWidths", e, t, n), I("leftPad", e, t, n), I("rightPad", e, t, n), I("padWidth", e, t, n), I("preserveShortSequences", e, t, n));
      return [s, r];
    }
    case "StringSplit": {
      let { indices: s, values: r, shape: a } = Bf.stringSplit(I("input", e, t, n), I("delimiter", e, t, n), I("skipEmpty", e, t, n));
      return [s, r, a];
    }
    case "StringToHashBucketFast":
      return [Bf.stringToHashBucketFast(I("input", e, t, n), I("numBuckets", e, t, n))];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
var A4 = (e, t, n) => {
  switch (e.op) {
    case "Cast":
      return [ce(I("x", e, t, n), I("dtype", e, t, n))];
    case "ExpandDims": {
      let s = I("axis", e, t, n);
      return [Pn(I("x", e, t, n), s)];
    }
    case "Squeeze": {
      let s = I("axis", e, t, n);
      return [gr(I("x", e, t, n), s)];
    }
    case "Reshape":
      return [G(I("x", e, t, n), I("shape", e, t, n))];
    case "MirrorPad":
      return [SD(I("x", e, t, n), I("padding", e, t, n), I("mode", e, t, n))];
    case "PadV2":
    case "Pad":
      return [bi(I("x", e, t, n), I("padding", e, t, n), I("constantValue", e, t, n))];
    case "SpaceToBatchND": {
      let s = I("blockShape", e, t, n), r = I("paddings", e, t, n);
      return [rb(I("x", e, t, n), s, r)];
    }
    case "BatchToSpaceND": {
      let s = I("blockShape", e, t, n), r = I("crops", e, t, n);
      return [jg(I("x", e, t, n), s, r)];
    }
    case "DepthToSpace": {
      let s = I("blockSize", e, t, n), r = I("dataFormat", e, t, n).toUpperCase();
      return [fR(I("x", e, t, n), s, r)];
    }
    case "BroadcastTo":
      return [nd(I("x", e, t, n), I("shape", e, t, n))];
    case "BroadcastArgs":
      return [BE(I("s0", e, t, n), I("s1", e, t, n))];
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
function Qx(e, t, n, s) {
  let r = ((a, i, o) => {
    switch (a.category) {
      case "arithmetic":
        return j(() => i4(a, i, o));
      case "basic_math":
        return j(() => o4(a, i, o));
      case "control":
        return h4(a, i, o);
      case "convolution":
        return j(() => f4(a, i, o));
      case "creation":
        return j(() => m4(a, i, o));
      case "dynamic":
        return g4(a, i, o);
      case "evaluation":
        return j(() => b4(a, i, o));
      case "image":
        return j(() => w4(a, i, o));
      case "graph":
        return j(() => y4(a, i, o));
      case "logical":
        return j(() => k4(a, i, o));
      case "matrices":
        return j(() => I4(a, i, o));
      case "normalization":
        return j(() => S4(a, i, o));
      case "reduction":
        return j(() => C4(a, i, o));
      case "slice_join":
        return j(() => N4(a, i, o));
      case "sparse":
        return j(() => T4(a, i, o));
      case "spectral":
        return j(() => $4(a, i, o));
      case "string":
        return j(() => _4(a, i, o));
      case "transformation":
        return j(() => A4(a, i, o));
      case "hash_table":
        return x4(a, i, o, s);
      case "custom":
        let u = tS(a.op);
        if (u && u.customExecutor)
          return u.customExecutor(new a4(a, i, o));
        throw TypeError(`Custom op ${a.op} is not registered.`);
      default:
        throw TypeError(`Unknown op '${a.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
    }
  })(e, t, n);
  return w.isPromise(r) ? r.then((a) => [].concat(a)) : [].concat(r);
}
var Zx = class {
  constructor(e = {}, t = {}, n = {}, s = {}) {
    this.weightMap = e, this.tensorArrayMap = t, this.tensorListMap = n, this.functionMap = s, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
  }
  newFrame(e, t) {
    return { id: e, frameName: t, iterationId: 0 };
  }
  set currentContext(e) {
    this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  get currentContextId() {
    return this._currentContextIds[0];
  }
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    let e = [];
    for (let t = 0; t < this.contexts.length - 1; t++) {
      let n = this.contexts.slice(0, this.contexts.length - t);
      e.push(this.contextIdforContexts(n));
    }
    e.push(""), this._currentContextIds = e;
  }
  contextIdforContexts(e) {
    return e ? e.map((t) => t.id === 0 && t.iterationId === 0 ? "" : `${t.frameName}-${t.iterationId}`).join("/") : "";
  }
  enterFrame(e) {
    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  exitFrame() {
    if (this.contexts && this.contexts.length > 1)
      this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    else
      throw new Error("Cannot exit frame, the context is empty");
  }
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice(), this.lastId++;
      let e = Object.assign({}, this.contexts[this.contexts.length - 1]);
      e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else
      throw new Error("Cannot increase frame iteration, the context is empty");
  }
  getWeight(e) {
    return this.weightMap[e];
  }
  addTensorArray(e) {
    this.tensorArrayMap[e.id] = e;
  }
  getTensorArray(e) {
    return this.tensorArrayMap[e];
  }
  addTensorList(e) {
    this.tensorListMap[e.id] = e;
  }
  getTensorList(e) {
    return this.tensorListMap[e];
  }
  dispose(e) {
    for (let t in this.tensorArrayMap)
      this.tensorArrayMap[t].clearAndClose(e);
    for (let t in this.tensorListMap)
      this.tensorListMap[t].clearAndClose(e);
  }
};
function Jx(e, t, n, s) {
  let r = /* @__PURE__ */ new Set(), a = [], i = null, o = null, u = /* @__PURE__ */ new Set(), l = Object.keys(e).map((d) => _n(d)[0]), c = [];
  s != null && (c = s.map((d) => _n(d.name)[0]));
  let p = [...t];
  for (; p.length > 0; ) {
    let d = p.pop();
    if ((IS(d) || O4(d) || P4(d)) && i == null && (i = d, o = i.children.map((h) => h.name).filter((h) => r.has(h))), r.add(d.name), n[d.name] == null && l.indexOf(d.name) === -1 && c.indexOf(d.name) === -1) {
      if (d.inputs.length === 0) {
        a.push(d.name);
        continue;
      }
      d.inputs.forEach((h) => {
        u.has(h.name) || (u.add(h.name), p.push(h));
      });
    }
  }
  return { inputs: e, outputs: t, usedNodes: r, missingInputs: a, dynamicNode: i, syncInputs: o };
}
function E4(e, t, n) {
  let { usedNodes: s, inputs: r } = n, a = [], i = Object.keys(r).map((c) => _n(c)[0]).map((c) => e.nodes[c]), o = e.initNodes;
  i.forEach((c) => {
    s.has(c.name) && a.push(c);
  }), e.weights.forEach((c) => {
    s.has(c.name) && a.push(c);
  }), o != null && o.forEach((c) => {
    s.has(c.name) && a.push(c);
  });
  let u = /* @__PURE__ */ new Set(), l = [];
  for (; a.length > 0; ) {
    let c = a.pop();
    u.add(c.name), t[c.name] || l.push(c), c.children.forEach((p) => {
      !u.has(p.name) && s.has(p.name) && p.inputs.every((d) => u.has(d.name)) && a.push(p);
    });
  }
  return l;
}
var R4 = ["Switch", "Merge", "Enter", "Exit", "NextIteration", "StatelessIf", "StatelessWhile", "if", "While"];
var D4 = ["NonMaxSuppressionV2", "NonMaxSuppressionV3", "NonMaxSuppressionV5", "Where"];
var F4 = ["HashTable", "HashTableV2", "LookupTableImport", "LookupTableImportV2", "LookupTableFind", "LookupTableFindV2", "LookupTableSize", "LookupTableSizeV2"];
function IS(e) {
  return R4.indexOf(e.op) >= 0;
}
function O4(e) {
  return D4.indexOf(e.op) >= 0;
}
function P4(e) {
  return F4.indexOf(e.op) >= 0;
}
var Lm = class {
  constructor(e, t) {
    this.graph = e, this.parent = t, this.compiledMap = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPERATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.intermediateTensors = {}, this.keepTensorForDebug = false, this._outputs = e.outputs, this._inputs = e.inputs, this._initNodes = e.initNodes, this._signature = e.signature, this._functions = e.functions, e.functions != null && Object.keys(e.functions).forEach((n) => {
      this._functionExecutorMap[n] = new Lm(e.functions[n], this);
    });
  }
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(e) {
    let t = Object.keys(e).map((n) => e[n].map((s) => s.id));
    this._weightIds = [].concat(...t), this._weightMap = e;
  }
  set resourceManager(e) {
    this._resourceManager = e;
  }
  get inputs() {
    return this._inputs.map((e) => ({ name: e.name, shape: e.attrParams.shape ? e.attrParams.shape.value : void 0, dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0 }));
  }
  get outputs() {
    return this._outputs.map((e) => ({ name: e.name, shape: e.attrParams.shape ? e.attrParams.shape.value : void 0, dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0 }));
  }
  get inputNodes() {
    return this._inputs.map((e) => e.signatureKey || e.name);
  }
  get outputNodes() {
    return this._outputs.map((e) => {
      let t = e.signatureKey || e.name;
      return e.defaultOutput ? `${t}:${e.defaultOutput}` : t;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((e, t) => (e[t] = this._functions[t].signature, e), {});
  }
  getCompilationKey(e, t) {
    let n = e.map((r) => r.name).sort(), s = t.map((r) => r.name).sort();
    return n.join(this.SEPERATOR) + "--" + s.join(this.SEPERATOR);
  }
  compile(e, t) {
    let n = Jx(e, t, this.weightMap, this._initNodes), { missingInputs: s, dynamicNode: r, syncInputs: a } = n;
    if (r != null)
      throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);
    if (s.length > 0) {
      let i = t.map((u) => u.name), o = Object.keys(e);
      throw new Error(`Cannot compute the outputs [${i}] from the provided inputs [${o}]. Missing the following inputs: [${s}]`);
    }
    return E4(this.graph, this.weightMap, n);
  }
  execute(e, t) {
    e = this.mapInputs(e);
    let n = Object.keys(e).sort();
    this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t);
    let s = n.map((c) => this.graph.nodes[_n(c)[0]]), r = t.map((c) => _n(c)[0]), a = r.map((c) => this.graph.nodes[c]);
    this.resetIntermediateTensors(), a.length === 0 && (a = this._outputs);
    let i = this.getCompilationKey(s, a), o = this.compiledMap.get(i);
    o == null && (o = this.compile(e, a), this.compiledMap.set(i, o));
    let u = {}, l = {};
    return j(() => {
      let c = new Zx(this.weightMap, u, l, this.functionExecutorMap), p = { ...this.weightMap };
      Object.keys(e).forEach((f) => {
        let [m, g] = _n(f), b = [];
        b[g] = e[f], p[m] = b;
      });
      let d = this.getFrozenTensorIds(p), h = {};
      for (let f = 0; f < o.length; f++) {
        let m = o[f];
        if (!p[m.name]) {
          let g = Qx(m, p, c, this._resourceManager);
          if (w.isPromise(g))
            throw new Error(`The execution of the op '${m.op}' returned a promise. Please use model.executeAsync() instead.`);
          p[m.name] = g, this.checkTensorForDisposal(m.name, m, p, c, d, r, h);
        }
      }
      return this.parent == null && c.dispose(d), t.map((f) => on(f, p, c));
    });
  }
  getFrozenTensorIds(e) {
    let t = [].concat.apply([], Object.keys(e).map((n) => e[n]).map((n) => n.map((s) => s.id)));
    return new Set(t);
  }
  checkTensorForDisposal(e, t, n, s, r, a, i) {
    t.category === "control" || a.indexOf(e) !== -1 || (n[e].forEach((o) => {
      o != null && (i[o.id] = (i[o.id] || 0) + t.children.length);
    }), t.inputs.forEach((o) => {
      if (o.category !== "control") {
        let u = MW(o.name, n, s);
        u != null && u.forEach((l) => {
          if (l && !l.kept && !r.has(l.id)) {
            let c = i[l.id];
            if (c === 1) {
              if (!this.keepTensorForDebug)
                l.dispose();
              else {
                let [p, d] = Ts(t.name, s);
                this.intermediateTensors[p] ? this.intermediateTensors[p][d] = l : (this.intermediateTensors[p] = [], this.intermediateTensors[p][d] = l);
              }
              delete i[l.id];
            } else
              c != null && i[l.id]--;
          }
        });
      }
    }));
  }
  async executeAsync(e, t) {
    return this._executeAsync(e, t);
  }
  disposeIntermediateTensors() {
    !this.intermediateTensors || (Object.keys(this.intermediateTensors).forEach((e) => this.intermediateTensors[e].forEach((t) => t.dispose())), this.disposeTensorsMap());
  }
  disposeTensorsMap() {
    !this.tensorsMap || Object.keys(this.tensorsMap).forEach((e) => {
      this.tensorsMap[e].forEach((n) => {
        n && !n.kept && !n.isDisposed && !this.keepIds.has(n.id) && n.dispose();
      });
    });
  }
  getIntermediateTensors() {
    return this.tensorsMap;
  }
  resetIntermediateTensors() {
    for (let e in this.intermediateTensors)
      this.intermediateTensors[e].forEach((t) => t.dispose()), delete this.intermediateTensors[e];
  }
  async _executeAsync(e, t, n = false, s = {}, r = {}) {
    n || (e = this.mapInputs(e), this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t));
    try {
      this.keepTensorForDebug = X().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (l) {
      console.warn(l.message);
    }
    this.resetIntermediateTensors();
    let a = new Zx(this.weightMap, s, r, this.functionExecutorMap);
    this.tensorsMap = await this.executeWithControlFlow(e, a, t, n);
    let i = t.map((l) => on(l, this.tensorsMap, a)), o = i.map((l) => l.id), u = Object.keys(e).map((l) => e[l].id);
    return this.keepIds = /* @__PURE__ */ new Set([...o, ...u, ...this.weightIds]), this.keepTensorForDebug || this.disposeTensorsMap(), this.parent == null && a.dispose(this.keepIds), i;
  }
  async executeFunctionAsync(e, t, n) {
    let s = e.reduce((r, a, i) => (r[this.inputs[i].name] = a, r), {});
    return this._executeAsync(s, this.outputNodes, true, t, n);
  }
  async executeWithControlFlow(e, t, n, s) {
    let r = Object.keys(e), a = r.map((y) => this.graph.nodes[_n(y)[0]]), i = n.map((y) => _n(y)[0]), o = i.map((y) => this.graph.nodes[y]);
    o.length === 0 && (o = this._outputs);
    let { usedNodes: u, missingInputs: l, dynamicNode: c, syncInputs: p } = Jx(e, o, this.weightMap, this._initNodes), d = [...a, ...this.graph.weights, ...this._initNodes || []].map((y) => ({ node: y, contexts: t.currentContext })), h = { ...this.weightMap };
    Object.keys(e).forEach((y) => {
      let [v, x] = _n(y), k = [];
      k[x] = e[y], h[v] = k;
    });
    let f = {}, m = this.getFrozenTensorIds(h), g = {};
    for (; d.length > 0; ) {
      let y = this.processStack(a, d, t, h, g, m, i, f, u);
      await Promise.all(y);
    }
    c == null && !s && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
    let b = o.filter((y) => !IS(y) && !on(y.name, h, t)).map((y) => y.name);
    if (b.length > 0) {
      let y = "";
      throw c != null && (y = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`), new Error(`Cannot compute the outputs [${b}] from the provided inputs [${r}]. Consider providing the following inputs: [${l}]. ${y}`);
    }
    return h;
  }
  processStack(e, t, n, s, r, a, i, o, u) {
    let l = [];
    for (; t.length > 0; ) {
      let c = t.pop();
      n.currentContext = c.contexts;
      let p = "";
      if (c.node.op === "Enter" && I("isConstant", c.node, s, n) && ([p] = Ts(c.node.name, n)), s[c.node.name] == null) {
        let d = Qx(c.node, s, n, this._resourceManager);
        p || ([p] = Ts(c.node.name, n));
        let h = n.currentContext;
        w.isPromise(d) ? l.push(d.then((f) => (s[p] = f, n.currentContext = h, this.checkTensorForDisposal(p, c.node, s, n, a, i, o), this.processChildNodes(c.node, t, n, s, r, u), f))) : (s[p] = d, this.checkTensorForDisposal(p, c.node, s, n, a, i, o), this.processChildNodes(c.node, t, n, s, r, u));
      } else
        this.processChildNodes(c.node, t, n, s, r, u);
    }
    return l;
  }
  processChildNodes(e, t, n, s, r, a) {
    e.children.forEach((i) => {
      let [o] = Ts(i.name, n);
      r[o] || !a.has(i.name) || (i.op === "Merge" ? i.inputNames.some((u) => !!on(u, s, n)) && (r[o] = true, t.push({ contexts: n.currentContext, node: i })) : i.inputNames.every((u) => !!on(u, s, n)) && (r[o] = true, t.push({ contexts: n.currentContext, node: i })));
    });
  }
  dispose() {
    Object.keys(this.weightMap).forEach((e) => this.weightMap[e].forEach((t) => t.dispose()));
  }
  checkInputShapeAndType(e) {
    Object.keys(e).forEach((t) => {
      let n = e[t], [s] = _n(t), r = this.graph.nodes[s];
      if (r.attrParams.shape && r.attrParams.shape.value) {
        let a = r.attrParams.shape.value, i = a.length === n.shape.length && n.shape.every((o, u) => a[u] === -1 || a[u] === o);
        w.assert(i, () => `The shape of dict['${r.name}'] provided in model.execute(dict) must be [${a}], but was [${n.shape}]`);
      }
      r.attrParams.dtype && r.attrParams.dtype.value && w.assert(n.dtype === r.attrParams.dtype.value, () => `The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`);
    });
  }
  mapInputs(e) {
    let t = {};
    for (let n in e)
      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[n] != null) {
        let s = this._signature.inputs[n];
        t[s.name] = e[n];
      } else
        t[n] = e[n];
    return t;
  }
  checkInputs(e) {
    let t = Object.keys(e).filter((n) => {
      let [s] = _n(n);
      return this.graph.nodes[s] == null;
    });
    if (t.length > 0)
      throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`);
  }
  mapOutputs(e) {
    return e.map((t) => this._signature != null && this._signature.outputs != null && this._signature.outputs[t] != null ? this._signature.outputs[t].name : t, {});
  }
  checkOutputs(e) {
    e.forEach((t) => {
      let [n] = _n(t);
      if (!this.graph.nodes[n])
        throw new Error(`The output '${t}' is not found in the graph`);
    });
  }
};
var z4 = class {
  constructor(e = {}, t = {}) {
    this.hashTableNameToHandle = e, this.hashTableMap = t;
  }
  addHashTable(e, t) {
    this.hashTableNameToHandle[e] = t.handle, this.hashTableMap[t.id] = t;
  }
  getHashTableHandleByName(e) {
    return this.hashTableNameToHandle[e];
  }
  getHashTableById(e) {
    return this.hashTableMap[e];
  }
  dispose() {
    for (let e in this.hashTableMap)
      this.hashTableMap[e].clearAndClose(), delete this.hashTableMap[e];
    for (let e in this.hashTableNameToHandle)
      this.hashTableNameToHandle[e].dispose(), delete this.hashTableNameToHandle[e];
  }
};
var M4 = "?tfjs-format=file";
var L4 = "model.json";
var B4 = class {
  constructor(e, t = {}) {
    this.modelUrl = e, this.loadOptions = t, this.version = "n/a", t == null && (this.loadOptions = {}), this.resourceManager = new z4();
  }
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  findIOHandler() {
    let e = this.modelUrl;
    if (e.load != null)
      this.handler = e;
    else if (this.loadOptions.requestInit != null)
      this.handler = An.browserHTTPRequest(e, this.loadOptions);
    else {
      let t = An.getLoadHandlers(e, this.loadOptions);
      if (t.length === 0)
        t.push(An.browserHTTPRequest(e, this.loadOptions));
      else if (t.length > 1)
        throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);
      this.handler = t[0];
    }
  }
  async load() {
    if (this.findIOHandler(), this.handler.load == null)
      throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    let e = await this.handler.load();
    return this.loadSync(e);
  }
  loadSync(e) {
    this.artifacts = e;
    let t = this.artifacts.modelTopology, n;
    this.artifacts.userDefinedMetadata != null && this.artifacts.userDefinedMetadata.signature != null ? n = this.artifacts.userDefinedMetadata.signature : n = this.artifacts.signature, this.signature = n, this.version = `${t.versions.producer}.${t.versions.minConsumer}`;
    let s = An.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
    if (this.executor = new Lm(jx.Instance.transformGraph(t, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(s), this.executor.resourceManager = this.resourceManager, e.modelInitializer != null && e.modelInitializer.node != null) {
      let r = jx.Instance.transformGraph(e.modelInitializer);
      this.initializer = new Lm(r), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializer.executeAsync({}, []);
    }
    return true;
  }
  async save(e, t) {
    if (typeof e == "string") {
      let n = An.getSaveHandlers(e);
      if (n.length === 0)
        throw new Error(`Cannot find any save handlers for URL '${e}'`);
      if (n.length > 1)
        throw new Error(`Found more than one (${n.length}) save handlers for URL '${e}'`);
      e = n[0];
    }
    if (e.save == null)
      throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    return e.save(this.artifacts);
  }
  predict(e, t) {
    return this.execute(e, this.outputNodes);
  }
  normalizeInputs(e) {
    if (!(e instanceof et) && !Array.isArray(e))
      return e;
    if (e = Array.isArray(e) ? e : [e], e.length !== this.inputNodes.length)
      throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);
    return this.inputNodes.reduce((t, n, s) => (t[n] = e[s], t), {});
  }
  normalizeOutputs(e) {
    return e = e || this.outputNodes, Array.isArray(e) ? e : [e];
  }
  execute(e, t) {
    e = this.normalizeInputs(e), t = this.normalizeOutputs(t);
    let n = this.executor.execute(e, t);
    return n.length > 1 ? n : n[0];
  }
  async executeAsync(e, t) {
    e = this.normalizeInputs(e), t = this.normalizeOutputs(t);
    let n = await this.executor.executeAsync(e, t);
    return n.length > 1 ? n : n[0];
  }
  getIntermediateTensors() {
    return this.executor.getIntermediateTensors();
  }
  disposeIntermediateTensors() {
    this.executor.disposeIntermediateTensors();
  }
  convertTensorMapToTensorsMap(e) {
    return Object.keys(e).reduce((t, n) => (t[n] = [e[n]], t), {});
  }
  dispose() {
    this.executor.dispose(), this.initializer && this.initializer.dispose(), this.resourceManager.dispose();
  }
};
async function jpe(e, t = {}) {
  if (e == null)
    throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
  t == null && (t = {}), t.fromTFHub && e.load == null && (e.endsWith("/") || (e = e + "/"), e = `${e}${L4}${M4}`);
  let n = new B4(e, t);
  return await n.load(), n;
}
var Kpe = "0.0.0";
var V4 = {};
Ae(V4, { CSVDataset: () => OS, Dataset: () => eu, FileDataSource: () => WS, TextLineDataset: () => FS, URLDataSource: () => US, array: () => cU, csv: () => wU, func: () => kU, generator: () => IU, microphone: () => CU, version_data: () => NU, webcam: () => SU, zip: () => dU });
var W4 = wa(Gd());
var U4 = wa(Gd());
function G4(e, t) {
  return Fd(e, t);
}
function Fd(e, t, n = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set()) {
  if (e == null)
    return null;
  if (typeof Blob == "function" && e instanceof Blob)
    return e.slice();
  if (s.has(e))
    throw new Error("Circular references are not supported.");
  if (n.has(e))
    return n.get(e);
  let r = t(e);
  if (r.recurse && r.value !== null)
    throw new Error("A deep map function may not return both a value and recurse=true.");
  if (r.recurse)
    if (so(e)) {
      let a = Array.isArray(e) ? [] : {};
      s.add(e);
      for (let i in e) {
        let o = e[i], u = Fd(o, t, n, s);
        a[i] = u;
      }
      return s.delete(e), e.__proto__ && (a.__proto__ = e.__proto__), a;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${e}`);
  else
    return n.set(e, r.value), r.value;
}
function H4(e, t = CS) {
  return SS(e, t);
}
function SS(e, t, n = /* @__PURE__ */ new Set()) {
  let s = e[0];
  if (n.has(s))
    throw new Error("Circular references are not supported.");
  let r = t(e);
  if (r.recurse && r.value !== null)
    throw new Error("A deep zip function may not return both a value and recurse=true.");
  if (r.recurse)
    if (so(s)) {
      let a = Array.isArray(s) ? [] : {};
      n.add(s);
      for (let i in s) {
        let o = e.map((l) => l[i]), u = SS(o, t, n);
        a[i] = u;
      }
      return n.delete(s), a;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${s}`);
  else
    return r.value;
}
function CS(e) {
  return e === null ? null : so(e[0]) ? { value: null, recurse: true } : { value: e, recurse: false };
}
async function NS(e, t) {
  let n = /* @__PURE__ */ new Map();
  Fd(e, t, n);
  for (let r of Array.from(n.keys())) {
    let a = n.get(r);
    if (w.isPromise(a)) {
      let i = await a;
      n.set(r, i);
    }
  }
  return Fd(e, t, n);
}
function so(e) {
  let t = false;
  if (X().get("IS_BROWSER"))
    t = e instanceof TextDecoder;
  else {
    let { StringDecoder: n } = jw();
    t = e instanceof n;
  }
  return e != null && !ArrayBuffer.isView(e) && (Array.isArray(e) || typeof e == "object" && !(e instanceof et) && !(e instanceof Promise) && !t);
}
function q4(e) {
  return e == null || j4(e) || Array.isArray(e) || typeof e == "object" && e instanceof et || w.isTypedArray(e);
}
function j4(e) {
  return e === null || typeof e != "object" && typeof e != "function";
}
function K4(e) {
  return G4(e, X4);
}
function X4(e) {
  return e instanceof et ? { value: e.clone(), recurse: false } : so(e) ? { value: null, recurse: true } : { value: e, recurse: false };
}
var TS = class {
  constructor(e) {
    if (this.capacity = e, this.begin = 0, this.end = 0, e == null)
      throw new RangeError("Can't create a ring buffer of unknown capacity.");
    if (e < 1)
      throw new RangeError("Can't create ring buffer of capacity < 1.");
    this.data = new Array(e), this.doubledCapacity = 2 * e;
  }
  wrap(e) {
    for (; e < 0; )
      e += this.doubledCapacity;
    return e % this.doubledCapacity;
  }
  get(e) {
    if (e < 0)
      throw new RangeError("Can't get item at a negative index.");
    return this.data[e % this.capacity];
  }
  set(e, t) {
    if (e < 0)
      throw new RangeError("Can't set item at a negative index.");
    this.data[e % this.capacity] = t;
  }
  length() {
    let e = this.end - this.begin;
    return e < 0 && (e = this.doubledCapacity + e), e;
  }
  isFull() {
    return this.length() === this.capacity;
  }
  isEmpty() {
    return this.length() === 0;
  }
  push(e) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.set(this.end, e), this.end = this.wrap(this.end + 1);
  }
  pushAll(e) {
    for (let t of e)
      this.push(t);
  }
  pop() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    this.end = this.wrap(this.end - 1);
    let e = this.get(this.end);
    return this.set(this.end, void 0), e;
  }
  unshift(e) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.begin = this.wrap(this.begin - 1), this.set(this.begin, e);
  }
  shift() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    let e = this.get(this.begin);
    return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), e;
  }
  shuffleExcise(e) {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    let t = this.wrap(this.begin + e), n = this.get(t);
    return this.set(t, this.pop()), n;
  }
};
var $S = class extends TS {
  constructor() {
    super($S.INITIAL_CAPACITY);
  }
  isFull() {
    return false;
  }
  push(e) {
    super.isFull() && this.expand(), super.push(e);
  }
  unshift(e) {
    super.isFull() && this.expand(), super.unshift(e);
  }
  expand() {
    let e = this.capacity * 2, t = new Array(e), n = this.length();
    for (let s = 0; s < n; s++)
      t[s] = this.get(this.wrap(this.begin + s));
    this.data = t, this.capacity = e, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = n;
  }
};
var _S = $S;
_S.INITIAL_CAPACITY = 32;
function AS(e) {
  return new Z4(e);
}
function Zy(e) {
  return new J4(e);
}
function Y4(e, t) {
  return new ES(e, t);
}
function Q4(e, t = RS.FAIL) {
  return new uU(e, t);
}
var Ut = class {
  async toArray() {
    let e = [], t = await this.next();
    for (; !t.done; )
      e.push(t.value), t = await this.next();
    return e;
  }
  async toArrayForTest() {
    let e = this.prefetch(100), t = [], n = await e.next();
    for (; !n.done; )
      t.push(n.value), n = await e.next();
    return t;
  }
  async resolveFully() {
    let e = await this.next();
    for (; !e.done; )
      e = await this.next();
  }
  async resolveWhile(e) {
    let t = await this.next(), n = e(t.value);
    for (; !t.done && n; )
      t = await this.next(), n = e(t.value);
  }
  handleErrors(e) {
    return new iU(this, e);
  }
  filter(e) {
    return new rU(this, e);
  }
  map(e) {
    return new aU(this, e);
  }
  mapAsync(e) {
    return new ew(this, e);
  }
  serialMapAsync(e) {
    return new ew(this, e).serial();
  }
  flatmap(e) {
    return new oU(this, e);
  }
  async forEachAsync(e) {
    return this.map(e).resolveFully();
  }
  async serialForEach(e) {
    return this.serialMapAsync(e).resolveWhile((t) => t === true);
  }
  rowMajorBatch(e, t = true) {
    return new sU(this, e, t);
  }
  columnMajorBatch(e, t = true, n = CS) {
    return this.rowMajorBatch(e, t).map((r) => H4(r, n));
  }
  concatenate(e, t) {
    return new ES(AS([this, e]), t);
  }
  take(e) {
    return e < 0 || e == null ? this : new nU(this, e);
  }
  skip(e) {
    return e < 0 || e == null ? this : new tU(this, e);
  }
  prefetch(e) {
    return new DS(this, e);
  }
  shuffle(e, t) {
    return new lU(this, e, t);
  }
  serial() {
    return new eU(this);
  }
};
var Z4 = class extends Ut {
  constructor(e) {
    super(), this.items = e, this.trav = 0;
  }
  summary() {
    return `Array of ${this.items.length} items`;
  }
  async next() {
    if (this.trav >= this.items.length)
      return { value: null, done: true };
    let e = this.items[this.trav];
    return this.trav++, { value: K4(e), done: false };
  }
};
var J4 = class extends Ut {
  constructor(e) {
    super(), this.nextFn = e;
  }
  summary() {
    return "Function call";
  }
  async next() {
    try {
      return this.nextFn();
    } catch (e) {
      throw e.message = `Error thrown while iterating through a dataset: ${e.message}`, e;
    }
  }
};
var eU = class extends Ut {
  constructor(e) {
    super(), this.upstream = e, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Serial`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    return this.upstream.next();
  }
};
var tU = class extends Ut {
  constructor(e, t) {
    super(), this.upstream = e, this.maxCount = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Skip`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.count++ < this.maxCount; ) {
      let e = await this.upstream.next();
      if (e.done)
        return e;
      Re(e.value);
    }
    return this.upstream.next();
  }
};
var nU = class extends Ut {
  constructor(e, t) {
    super(), this.upstream = e, this.maxCount = t, this.count = 0;
  }
  summary() {
    return `${this.upstream.summary()} -> Take`;
  }
  async next() {
    return this.count++ >= this.maxCount ? { value: null, done: true } : this.upstream.next();
  }
};
var sU = class extends Ut {
  constructor(e, t, n = true) {
    super(), this.upstream = e, this.batchSize = t, this.enableSmallLastBatch = n, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> RowMajorBatch`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    let e = [];
    for (; e.length < this.batchSize; ) {
      let t = await this.upstream.next();
      if (t.done)
        return this.enableSmallLastBatch && e.length > 0 ? { value: e, done: false } : { value: null, done: true };
      e.push(t.value);
    }
    return { value: e, done: false };
  }
};
var rU = class extends Ut {
  constructor(e, t) {
    super(), this.upstream = e, this.predicate = t, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Filter`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) {
      let e = await this.upstream.next();
      if (e.done || this.predicate(e.value))
        return e;
      Re(e.value);
    }
  }
};
var aU = class extends Ut {
  constructor(e, t) {
    super(), this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> Map`;
  }
  async next() {
    let e = await this.upstream.next();
    if (e.done)
      return { value: null, done: true };
    let t = _s.getTensorsInContainer(e.value), n = this.transform(e.value), s = _s.getTensorsInContainer(n);
    for (let r of t)
      _s.isTensorInList(r, s) || r.dispose();
    return { value: n, done: false };
  }
};
var iU = class extends Ut {
  constructor(e, t) {
    super(), this.upstream = e, this.handler = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> handleErrors`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; )
      try {
        return await this.upstream.next();
      } catch (e) {
        if (!this.handler(e))
          return { value: null, done: true };
      }
  }
};
var ew = class extends Ut {
  constructor(e, t) {
    super(), this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> AsyncMap`;
  }
  async next() {
    let e = await this.upstream.next();
    if (e.done)
      return { value: null, done: true };
    let t = _s.getTensorsInContainer(e.value), n = await this.transform(e.value), s = _s.getTensorsInContainer(n);
    for (let r of t)
      _s.isTensorInList(r, s) || r.dispose();
    return { value: n, done: false };
  }
};
var Jy = class extends Ut {
  constructor() {
    super(), this.outputQueue = new _S(), this.lastRead = Promise.resolve({ value: null, done: false });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.outputQueue.length() === 0; )
      if (!await this.pump())
        return { value: null, done: true };
    return { value: this.outputQueue.shift(), done: false };
  }
};
var oU = class extends Jy {
  constructor(e, t) {
    super(), this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> Flatmap`;
  }
  async pump() {
    let e = await this.upstream.next();
    if (e.done)
      return false;
    let t = _s.getTensorsInContainer(e.value), n = this.transform(e.value), s = _s.getTensorsInContainer(n);
    this.outputQueue.pushAll(n);
    for (let r of t)
      _s.isTensorInList(r, s) || r.dispose();
    return true;
  }
};
var ES = class extends Ut {
  constructor(e, t) {
    super(), this.baseErrorHandler = t, this.lastRead = null, this.iterator = null, this.moreIterators = e;
  }
  summary() {
    return "TODO: fill in upstream of chained summaries -> Chained";
  }
  async next() {
    return this.lastRead = this.readFromChain(this.lastRead), this.lastRead;
  }
  async readFromChain(e) {
    if (await e, this.iterator == null) {
      let n = await this.moreIterators.next();
      if (n.done)
        return { value: null, done: true };
      this.iterator = n.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler));
    }
    let t = await this.iterator.next();
    return t.done ? (this.iterator = null, this.readFromChain(e)) : t;
  }
};
var RS = ((e) => (e[e.FAIL = 0] = "FAIL", e[e.SHORTEST = 1] = "SHORTEST", e[e.LONGEST = 2] = "LONGEST", e))(RS || {});
var uU = class extends Ut {
  constructor(e, t = 0) {
    super(), this.iterators = e, this.mismatchMode = t, this.count = 0, this.currentPromise = null;
  }
  summary() {
    return "{TODO: fill in upstream of zip summaries} -> Zip";
  }
  async nextState(e) {
    await e;
    let t = 0, n = 0;
    function s(a) {
      return a instanceof Ut ? { value: a.next().then((o) => (t++, o.done && n++, o.value)), recurse: false } : { value: null, recurse: true };
    }
    let r = await NS(this.iterators, s);
    if (t === n)
      return { value: null, done: true };
    if (n > 0)
      switch (this.mismatchMode) {
        case 0:
          throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);
        case 1:
          return { value: null, done: true };
        case 2:
        default:
      }
    return this.count++, { value: r, done: false };
  }
  async next() {
    return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise;
  }
};
var DS = class extends Ut {
  constructor(e, t) {
    super(), this.upstream = e, this.bufferSize = t, this.buffer = new TS(t);
  }
  summary() {
    return `${this.upstream.summary()} -> Prefetch`;
  }
  refill() {
    for (; !this.buffer.isFull(); ) {
      let e = this.upstream.next();
      this.buffer.push(e);
    }
  }
  next() {
    return this.refill(), this.buffer.shift();
  }
};
var lU = class extends DS {
  constructor(e, t, n) {
    super(e, t), this.upstream = e, this.windowSize = t, this.upstreamExhausted = false, this.random = U4.alea(n || w.now().toString()), this.lastRead = Promise.resolve({ value: null, done: false });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  randomInt(e) {
    return Math.floor(this.random() * e);
  }
  chooseIndex() {
    return this.randomInt(this.buffer.length());
  }
  async serialNext() {
    for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty(); ) {
      let e = this.chooseIndex(), t = await this.buffer.shuffleExcise(e);
      if (t.done)
        this.upstreamExhausted = true;
      else
        return this.refill(), t;
    }
    return { value: null, done: true };
  }
};
var eu = class {
  constructor() {
    this.size = null;
  }
  batch(e, t = true) {
    let n = this;
    w.assert(e > 0, () => `batchSize needs to be positive, but it is
      ${e}`);
    let s;
    return this.size === 1 / 0 || this.size == null ? s = this.size : t ? s = Math.ceil(this.size / e) : s = Math.floor(this.size / e), $n(async () => (await n.iterator()).columnMajorBatch(e, t, pU), s);
  }
  concatenate(e) {
    let t = this, n;
    return this.size === 1 / 0 || e.size === 1 / 0 ? n = 1 / 0 : this.size != null && e.size != null ? n = this.size + e.size : n = null, $n(async () => (await t.iterator()).concatenate(await e.iterator()), n);
  }
  filter(e) {
    let t = this, n;
    return this.size === 1 / 0 ? n = 1 / 0 : n = null, $n(async () => (await t.iterator()).filter((s) => j(() => e(s))), n);
  }
  async forEachAsync(e) {
    return (await this.iterator()).forEachAsync(e);
  }
  map(e) {
    let t = this;
    return $n(async () => (await t.iterator()).map((n) => j(() => e(n))), this.size);
  }
  mapAsync(e) {
    let t = this;
    return $n(async () => (await t.iterator()).mapAsync(e), this.size);
  }
  prefetch(e) {
    if (e == null)
      throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
    let t = this;
    return $n(async () => (await t.iterator()).prefetch(e), this.size);
  }
  repeat(e) {
    let t = this, n;
    return this.size != null && e > 0 ? n = this.size * e : e === 0 ? n = 0 : this.size != null && (e === void 0 || e < 0) ? n = 1 / 0 : n = null, $n(async () => {
      let s = Zy(async () => ({ value: await t.iterator(), done: false }));
      return Y4(s.take(e));
    }, n);
  }
  skip(e) {
    let t = this, n;
    return this.size != null && e >= 0 && this.size >= e ? n = this.size - e : this.size != null && (this.size < e || e === void 0 || e < 0) ? n = 0 : n = null, $n(async () => (await t.iterator()).skip(e), n);
  }
  shuffle(e, t, n = true) {
    if (e == null || e < 0)
      throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);
    let s = this, r = W4.alea(t || w.now().toString());
    return $n(async () => {
      let a = r.int32();
      return n && (a += r.int32()), (await s.iterator()).shuffle(e, a.toString());
    }, this.size);
  }
  take(e) {
    let t = this, n;
    return this.size != null && this.size > e ? n = e : this.size != null && this.size <= e ? n = this.size : n = null, $n(async () => (await t.iterator()).take(e), n);
  }
  async toArray() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArray();
  }
  async toArrayForTest() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArrayForTest();
  }
};
eu.MAX_BUFFER_SIZE = 1e4;
function $n(e, t = null) {
  return new class extends eu {
    constructor() {
      super(...arguments), this.size = t;
    }
    async iterator() {
      return e();
    }
  }();
}
function cU(e) {
  return $n(async () => AS(e), e.length);
}
function dU(e) {
  if (!so(e))
    throw new Error("The argument to zip() must be an object or array.");
  let t;
  if (Array.isArray(e))
    for (let n = 0; n < e.length; n++)
      t = t == null ? e[n].size : Math.min(t, e[n].size);
  else if (e instanceof Object)
    for (let n in e)
      t = t == null ? e[n].size : Math.min(t, e[n].size);
  return $n(async () => {
    let n = await NS(e, (s) => {
      if (s instanceof eu)
        return { value: s.iterator(), recurse: false };
      if (so(s))
        return { value: null, recurse: true };
      throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
    });
    return Q4(n, 1);
  }, t);
}
function pU(e) {
  if (e === null)
    return null;
  let t = e[0];
  return q4(t) ? { value: hU(e), recurse: false } : { value: null, recurse: true };
}
function hU(e) {
  if (e.length === 0)
    throw new Error("Can't make a batch of zero elements.");
  return e[0] instanceof et ? es(e) : fs(e);
}
var FS = class extends eu {
  constructor(e) {
    super(), this.input = e;
  }
  async iterator() {
    return (await this.input.iterator()).decodeUTF8().split(`
`).map((s) => (s.endsWith("\r") && (s = s.slice(0, -1)), s));
  }
};
var Kc = '"';
var $u = Symbol("out");
var tw = Symbol("field");
var Xc = Symbol("quote");
var jf = Symbol("quoteafterquote");
var nw = Symbol("quoteinquote");
var OS = class extends eu {
  constructor(e, t) {
    super(), this.input = e, this.hasHeader = true, this.fullColumnNames = null, this.columnNamesValidated = false, this.columnConfigs = null, this.configuredColumnsOnly = false, this.delimiter = ",", this.delimWhitespace = false, this.base = new FS(e), t || (t = {}), this.hasHeader = t.hasHeader !== false, this.fullColumnNames = t.columnNames, this.columnConfigs = t.columnConfigs, this.configuredColumnsOnly = t.configuredColumnsOnly, t.delimWhitespace ? (w.assert(t.delimiter == null, () => "Delimiter should not be provided when delimWhitespace is true."), this.delimWhitespace = true, this.delimiter = " ") : this.delimiter = t.delimiter ? t.delimiter : ",";
  }
  async columnNames() {
    return this.columnNamesValidated || await this.setColumnNames(), this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;
  }
  async setColumnNames() {
    let e = await this.maybeReadHeaderLine();
    if (!this.fullColumnNames && !e)
      throw new Error("Column names must be provided if there is no header line.");
    this.fullColumnNames && e && w.assert(e.length === this.fullColumnNames.length, () => "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + e.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = e);
    let t = this.fullColumnNames.reduce((s, r) => (s[r] = s[r] + 1 || 1, s), {}), n = Object.keys(t).filter((s) => t[s] > 1);
    if (w.assert(n.length === 0, () => "Duplicate column names found: " + n.toString()), this.columnConfigs) {
      for (let s of Object.keys(this.columnConfigs))
        if (this.fullColumnNames.indexOf(s) === -1)
          throw new Error('The key "' + s + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
    }
    this.columnNamesValidated = true;
  }
  async maybeReadHeaderLine() {
    if (this.hasHeader) {
      let t = await (await this.base.iterator()).next();
      if (t.done)
        throw new Error("No data was found for CSV parsing.");
      let n = t.value;
      return this.parseRow(n, false);
    } else
      return null;
  }
  async iterator() {
    this.columnNamesValidated || await this.setColumnNames();
    let e = await this.base.iterator();
    return this.hasHeader && (e = e.skip(1)), e.map((t) => this.makeDataElement(t));
  }
  makeDataElement(e) {
    let t = this.parseRow(e), n = {}, s = {};
    for (let r = 0; r < this.fullColumnNames.length; r++) {
      let a = this.fullColumnNames[r], i = this.columnConfigs ? this.columnConfigs[a] : null;
      if (!(this.configuredColumnsOnly && !i)) {
        let o = t[r], u = null;
        if (o === "")
          if (i && i.default !== void 0)
            u = i.default;
          else {
            if (i && (i.required || i.isLabel))
              throw new Error(`Required column ${a} is empty in this line: ${e}`);
            u = void 0;
          }
        else {
          let l = Number(o);
          if (isNaN(l))
            i && i.dtype === "bool" ? u = this.getBoolean(o) : u = o;
          else if (!i || !i.dtype)
            u = l;
          else
            switch (i.dtype) {
              case "float32":
                u = l;
                break;
              case "int32":
                u = Math.floor(l);
                break;
              case "bool":
                u = this.getBoolean(o);
                break;
              default:
                u = l;
            }
        }
        i && i.isLabel ? s[a] = u : n[a] = u;
      }
    }
    return Object.keys(s).length === 0 ? n : { xs: n, ys: s };
  }
  getBoolean(e) {
    return e === "1" || e.toLowerCase() === "true" ? 1 : 0;
  }
  parseRow(e, t = true) {
    let n = [], s = 0, r = e.length, a = $u;
    for (let i = 0; i < r; i++)
      switch (a) {
        case $u:
          switch (e.charAt(i)) {
            case Kc:
              s = i + 1, a = Xc;
              break;
            case this.delimiter:
              if (s = i + 1, this.delimiter === " " && this.delimWhitespace)
                break;
              n.push(""), a = $u;
              break;
            default:
              a = tw, s = i;
              break;
          }
          break;
        case tw:
          switch (e.charAt(i)) {
            case this.delimiter:
              n.push(e.substring(s, i)), a = $u, s = i + 1;
              break;
            default:
          }
          break;
        case Xc:
          switch (e.charAt(i)) {
            case Kc:
              a = jf;
              break;
            default:
          }
          break;
        case jf:
          switch (e.charAt(i)) {
            case this.delimiter:
              n.push(e.substring(s, i - 1)), a = $u, s = i + 1;
              break;
            case Kc:
              a = Xc;
              break;
            default:
              a = nw;
              break;
          }
          break;
        case nw:
          switch (e.charAt(i)) {
            case Kc:
              a = Xc;
              break;
            default:
          }
          break;
        default:
      }
    if (a === jf ? n.push(e.substring(s, r - 1)) : n.push(e.substring(s)), t && n.length !== this.fullColumnNames.length)
      throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);
    return n;
  }
};
var PS = class extends Ut {
  constructor(e) {
    super(), this.microphoneConfig = e, this.isClosed = false, this.fftSize = e.fftSize || 1024;
    let t = Math.log2(this.fftSize);
    if (this.fftSize < 0 || t < 4 || t > 14 || !Number.isInteger(t))
      throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);
    if (this.numFrames = e.numFramesPerSpectrogram || 43, this.sampleRateHz = e.sampleRateHz, this.columnTruncateLength = e.columnTruncateLength || this.fftSize, this.audioTrackConstraints = e.audioTrackConstraints, this.smoothingTimeConstant = e.smoothingTimeConstant || 0, this.includeSpectrogram = e.includeSpectrogram !== false, this.includeWaveform = e.includeWaveform === true, !this.includeSpectrogram && !this.includeWaveform)
      throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");
  }
  summary() {
    return "microphone";
  }
  static async create(e = {}) {
    if (!X().get("IS_BROWSER"))
      throw new Error("microphone API is only supported in browser environment.");
    let t = new PS(e);
    return await t.start(), t;
  }
  async start() {
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ audio: this.audioTrackConstraints == null ? true : this.audioTrackConstraints, video: false });
    } catch (n) {
      throw new Error(`Error thrown while initializing video stream: ${n.message}`);
    }
    if (!this.stream)
      throw new Error("Could not obtain audio from microphone.");
    let e = window.AudioContext || window.webkitAudioContext;
    if (this.audioContext = new e(), !this.sampleRateHz)
      this.sampleRateHz = this.audioContext.sampleRate;
    else if (this.audioContext.sampleRate !== this.sampleRateHz)
      throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`);
    let t = this.audioContext.createMediaStreamSource(this.stream);
    this.analyser = this.audioContext.createAnalyser(), this.analyser.fftSize = this.fftSize * 2, this.analyser.smoothingTimeConstant = this.smoothingTimeConstant, t.connect(this.analyser), this.freqData = new Float32Array(this.fftSize), this.timeData = new Float32Array(this.fftSize);
  }
  async next() {
    if (this.isClosed)
      return { value: null, done: true };
    let e, t, n = await this.getAudioData();
    if (this.includeSpectrogram) {
      let s = this.flattenQueue(n.freqDataQueue);
      e = this.getTensorFromAudioDataArray(s, [this.numFrames, this.columnTruncateLength, 1]);
    }
    if (this.includeWaveform) {
      let s = this.flattenQueue(n.timeDataQueue);
      t = this.getTensorFromAudioDataArray(s, [this.numFrames * this.fftSize, 1]);
    }
    return { value: { spectrogram: e, waveform: t }, done: false };
  }
  async capture() {
    return (await this.next()).value;
  }
  async getAudioData() {
    let e = [], t = [], n = 0;
    return new Promise((s) => {
      let r = setInterval(() => {
        this.includeSpectrogram && (this.analyser.getFloatFrequencyData(this.freqData), this.freqData[0] === -1 / 0 && s({ freqDataQueue: e, timeDataQueue: t }), e.push(this.freqData.slice(0, this.columnTruncateLength))), this.includeWaveform && (this.analyser.getFloatTimeDomainData(this.timeData), t.push(this.timeData.slice())), ++n === this.numFrames && (clearInterval(r), s({ freqDataQueue: e, timeDataQueue: t }));
      }, this.fftSize / this.sampleRateHz * 1e3);
    });
  }
  stop() {
    this.isClosed || (this.isClosed = true, this.analyser.disconnect(), this.audioContext.close(), this.stream != null && this.stream.getTracks().length > 0 && this.stream.getTracks()[0].stop());
  }
  toArray() {
    throw new Error("Can not convert infinite audio stream to array.");
  }
  getSampleRate() {
    return this.sampleRateHz;
  }
  flattenQueue(e) {
    let t = e[0].length, n = new Float32Array(e.length * t);
    return e.forEach((s, r) => n.set(s, r * t)), n;
  }
  getTensorFromAudioDataArray(e, t) {
    let n = new Float32Array(w.sizeFromShape(t));
    return n.set(e, n.length - e.length), fs(n, t);
  }
};
var zS = class extends Ut {
  constructor(e, t) {
    if (super(), this.webcamVideoElement = e, this.webcamConfig = t, this.isClosed = true, this.resize = false, this.needToResize())
      if (this.resize = true, this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth], this.cropBoxInd = Qt([0], "int32"), this.webcamConfig.centerCrop) {
        let n = this.webcamConfig.resizeWidth * 1 / this.webcamVideoElement.width, s = this.webcamConfig.resizeHeight * 1 / this.webcamVideoElement.height, r = (1 - n) / 2, a = (1 - s) / 2, i = r + n, o = s + a;
        this.cropBox = Yi([a, r, o, i], [1, 4]);
      } else
        this.cropBox = Yi([0, 0, 1, 1], [1, 4]);
  }
  summary() {
    return "webcam";
  }
  static async create(e, t = {}) {
    if (!X().get("IS_BROWSER"))
      throw new Error("tf.data.webcam is only supported in browser environment.");
    if (!e) {
      if (e = document.createElement("video"), !t.resizeWidth || !t.resizeHeight)
        throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");
      e.width = t.resizeWidth, e.height = t.resizeHeight;
    }
    let n = new zS(e, t);
    return await n.start(), n;
  }
  async start() {
    this.webcamConfig.facingMode && w.assert(this.webcamConfig.facingMode === "user" || this.webcamConfig.facingMode === "environment", () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ video: { deviceId: this.webcamConfig.deviceId, facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user", width: this.webcamVideoElement.width, height: this.webcamVideoElement.height } });
    } catch (e) {
      throw e.message = `Error thrown while initializing video stream: ${e.message}`, e;
    }
    if (!this.stream)
      throw new Error("Could not obtain video from webcam.");
    try {
      this.webcamVideoElement.srcObject = this.stream;
    } catch (e) {
      console.log(e), this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);
    }
    return this.webcamVideoElement.play(), this.isClosed = false, new Promise((e) => {
      this.webcamVideoElement.onloadedmetadata = () => {
        e();
      };
    });
  }
  async next() {
    if (this.isClosed)
      return { value: null, done: true };
    let e;
    try {
      e = Ek.fromPixels(this.webcamVideoElement);
    } catch (t) {
      throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`);
    }
    if (this.resize)
      try {
        return { value: this.cropAndResizeFrame(e), done: false };
      } catch (t) {
        throw new Error(`Error thrown cropping the video: ${t.message}`);
      } finally {
        e.dispose();
      }
    else
      return { value: e, done: false };
  }
  needToResize() {
    return !!(this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight));
  }
  cropAndResizeFrame(e) {
    return j(() => {
      let t = Pn(ce(e, "float32"), 0), n;
      n = jn.cropAndResize(t, this.cropBox, this.cropBoxInd, this.cropSize, "bilinear");
      let s = n.shape;
      return G(n, s.slice(1));
    });
  }
  async capture() {
    return (await this.next()).value;
  }
  stop() {
    this.stream.getTracks().forEach((t) => t.stop());
    try {
      this.webcamVideoElement.srcObject = null;
    } catch (t) {
      console.log(t), this.webcamVideoElement.src = null;
    }
    this.isClosed = true;
  }
  toArray() {
    throw new Error("Can not convert infinite video stream to array.");
  }
};
var MS = class {
};
var LS = class extends Ut {
  split(e) {
    return new fU(this, e);
  }
};
var fU = class extends LS {
  constructor(e, t) {
    super(), this.upstream = e, this.impl = new mU(e, t);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
};
var mU = class extends Jy {
  constructor(e, t) {
    super(), this.upstream = e, this.separator = t, this.carryover = "";
  }
  summary() {
    return `${this.upstream.summary()} -> Split('${this.separator}')`;
  }
  async pump() {
    let e = await this.upstream.next();
    if (e.done)
      return this.carryover === "" ? false : (this.outputQueue.push(this.carryover), this.carryover = "", true);
    let t = e.value.split(this.separator);
    t[0] = this.carryover + t[0];
    for (let n of t.slice(0, -1))
      this.outputQueue.push(n);
    return this.carryover = t[t.length - 1], true;
  }
};
var gU = class extends Ut {
  decodeUTF8() {
    return new bU(this);
  }
};
var bU = class extends LS {
  constructor(e) {
    super(), this.upstream = e, this.impl = new yU(e);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
};
var yU = class extends Jy {
  constructor(e) {
    if (super(), this.upstream = e, X().get("IS_BROWSER"))
      this.decoder = new TextDecoder("utf-8");
    else {
      let { StringDecoder: t } = jw();
      this.decoder = new t("utf8");
    }
  }
  summary() {
    return `${this.upstream.summary()} -> Utf8`;
  }
  async pump() {
    let e = await this.upstream.next(), t;
    if (e.done)
      return false;
    t = e.value;
    let n;
    return X().get("IS_BROWSER") ? n = this.decoder.decode(t, { stream: true }) : n = this.decoder.write(Buffer.from(t.buffer)), this.outputQueue.push(n), true;
  }
};
var BS = class extends gU {
  constructor(e, t = {}) {
    super(), this.file = e, this.options = t, w.assert(e instanceof Uint8Array || (X().get("IS_BROWSER") ? e instanceof File || e instanceof Blob : false), () => "FileChunkIterator only supports File, Blob and Uint8Array right now."), this.offset = t.offset || 0, this.chunkSize = t.chunkSize || 1024 * 1024;
  }
  summary() {
    return `FileChunks ${this.file}`;
  }
  async next() {
    return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? { value: null, done: true } : { value: await new Promise((t, n) => {
      let s = this.offset + this.chunkSize;
      if (this.file instanceof Uint8Array)
        t(new Uint8Array(this.file.slice(this.offset, s)));
      else {
        let r = new FileReader();
        r.onload = (i) => {
          let o = r.result;
          if (o instanceof ArrayBuffer && (o = new Uint8Array(o)), !(o instanceof Uint8Array))
            return n(new TypeError("FileReader returned unknown type."));
          t(o);
        }, r.onabort = (i) => n(new Error("Aborted")), r.onerror = (i) => n(new Error(i.type));
        let a = this.file.slice(this.offset, s);
        r.readAsArrayBuffer(a);
      }
      this.offset = s;
    }), done: false };
  }
};
async function vU(e, t = {}, n) {
  let s, r;
  typeof e == "string" ? s = e : (s = e.url, r = xU(e));
  let a = await (n || w.fetch)(s, r);
  if (a.ok) {
    let i = new Uint8Array(await a.arrayBuffer());
    return new BS(i, t);
  } else
    throw new Error(a.statusText);
}
var xU = (e) => ({ method: e.method, headers: e.headers, body: e.body, mode: e.mode, credentials: e.credentials, cache: e.cache, redirect: e.redirect, referrer: e.referrer, integrity: e.integrity });
function VS(e) {
  return typeof e == "string" && e.slice(0, 7) === "file://";
}
var WS = class extends MS {
  constructor(e, t = {}) {
    super(), this.input = e, this.options = t;
  }
  async iterator() {
    if (VS(this.input) && X().get("IS_NODE")) {
      let e = sg();
      this.input = e.readFileSync(this.input.slice(7));
    }
    return new BS(this.input, this.options);
  }
};
var US = class extends MS {
  constructor(e, t = {}) {
    super(), this.url = e, this.fileOptions = t;
  }
  async iterator() {
    return VS(this.url) ? new WS(this.url, this.fileOptions).iterator() : vU(this.url, this.fileOptions);
  }
};
function wU(e, t = {}) {
  return new OS(new US(e), t);
}
function kU(e) {
  let t = Zy(e);
  return $n(async () => t);
}
function IU(e) {
  return $n(async () => {
    let t = await e();
    return Zy(() => t.next());
  });
}
async function SU(e, t) {
  return zS.create(e, t);
}
async function CU(e) {
  return PS.create(e);
}
var NU = "0.0.0";
function be(e, t) {
  Array.isArray(e) || (e = [e]), e.forEach((n) => {
    n != null && w.assert(n.dtype !== "complex64", () => `${t} does not support complex64 tensors in the CPU backend.`);
  });
}
var TU = xs.whereImpl;
var GS = class extends sl {
  constructor() {
    super(), this.blockSize = 48, this.firstUse = true, this.data = new Hd(this, Ss());
  }
  nextDataId() {
    return GS.nextDataId++;
  }
  write(e, t, n) {
    this.firstUse && (this.firstUse = false, X().get("IS_NODE") && C.warn(`
============================
Hi there \u{1F44B}. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.
============================`));
    let s = { id: this.nextDataId() };
    return this.data.set(s, { values: e, dtype: n, refCount: 1 }), s;
  }
  makeTensorInfo(e, t, n) {
    let s;
    if (t === "string" && n != null && n.length > 0 && w.isString(n[0])) {
      let r = n.map((a) => w.encodeString(a));
      s = this.write(r, e, t);
    } else
      s = this.write(n, e, t);
    return { dataId: s, shape: e, dtype: t };
  }
  refCount(e) {
    return this.data.has(e) ? this.data.get(e).refCount : 0;
  }
  incRef(e) {
    let t = this.data.get(e);
    t.refCount++;
  }
  decRef(e) {
    if (this.data.has(e)) {
      let t = this.data.get(e);
      t.refCount--;
    }
  }
  move(e, t, n, s, r) {
    this.data.set(e, { values: t, dtype: s, refCount: r });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(e) {
    return this.readSync(e);
  }
  readSync(e) {
    let { dtype: t, complexTensorInfos: n } = this.data.get(e);
    if (t === "complex64") {
      let s = this.readSync(n.real.dataId), r = this.readSync(n.imag.dataId);
      return C.mergeRealAndImagArrays(s, r);
    }
    return this.data.get(e).values;
  }
  bufferSync(e) {
    let t = this.readSync(e.dataId), n = t;
    if (e.dtype === "string")
      try {
        n = t.map((s) => w.decodeString(s));
      } catch (s) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return De(e.shape, e.dtype, n);
  }
  makeOutput(e, t, n) {
    let s = this.write(e, t, n);
    return Ss().makeTensorFromDataId(s, t, n, this);
  }
  disposeData(e, t = false) {
    if (this.data.has(e)) {
      if (this.data.get(e).refCount--, !t && this.data.get(e).refCount > 0)
        return false;
      let { complexTensorInfos: n } = this.data.get(e);
      n != null && (this.disposeData(n.real.dataId, true), this.disposeData(n.imag.dataId, true)), this.data.delete(e);
    }
    return true;
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  async time(e) {
    let t = w.now();
    return e(), { kernelMs: w.now() - t };
  }
  memory() {
    return { unreliable: true, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
  }
  where(e) {
    be([e], "where");
    let t = this.readSync(e.dataId);
    return TU(e.shape, t);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  epsilon() {
    return super.epsilon();
  }
};
var HS = GS;
HS.nextDataId = 0;
var ev = {};
Ae(ev, { addImpl: () => jS, bincountImpl: () => nv, bincountReduceImpl: () => KS, ceilImpl: () => XS, concatImpl: () => sv, equalImpl: () => YS, expImpl: () => ZS, expm1Impl: () => eC, floorImpl: () => tC, gatherNdImpl: () => nC, gatherV2Impl: () => sC, greaterEqualImpl: () => aC, greaterImpl: () => rC, lessEqualImpl: () => oC, lessImpl: () => iC, linSpaceImpl: () => uC, logImpl: () => lC, maxImpl: () => cC, maximumImpl: () => dC, minimumImpl: () => pC, multiplyImpl: () => rv, negImpl: () => hC, notEqualImpl: () => fC, prodImpl: () => mC, rangeImpl: () => iv, rsqrtImpl: () => gC, sigmoidImpl: () => mG, simpleAbsImpl: () => qS, sliceImpl: () => Pd, sparseFillEmptyRowsImpl: () => yC, sparseReshapeImpl: () => vC, sparseSegmentReductionImpl: () => ov, sqrtImpl: () => yG, squaredDifferenceImpl: () => xC, stridedSliceImpl: () => wC, stringNGramsImpl: () => kC, stringSplitImpl: () => IC, stringToHashBucketFastImpl: () => SC, subImpl: () => CC, tileImpl: () => NC, topKImpl: () => $C, transposeImpl: () => av, uniqueImpl: () => _C });
function qS(e) {
  let t = new Float32Array(e.length);
  for (let n = 0; n < e.length; ++n)
    t[n] = Math.abs(e[n]);
  return t;
}
var $U = (e) => {
  let { x: t } = e.inputs, n = e.backend;
  be(t, "abs");
  let s = new Float32Array(w.sizeFromShape(t.shape)), r = n.data.get(t.dataId).values;
  return s = qS(r), n.makeOutput(s, t.shape, t.dtype);
};
var _U = { kernelName: uo, backendName: "cpu", kernelFunc: $U };
function At(e) {
  return (t, n, s, r, a) => {
    let i = C.assertAndGetBroadcastShape(t, n), o = i.length, u = w.computeStrides(i), l = w.sizeFromShape(i), c = w.getTypedArrayFromDType(a, l), p = t.length, d = n.length, h = w.computeStrides(t), f = w.computeStrides(n), m = C.getBroadcastDims(t, i), g = C.getBroadcastDims(n, i);
    if (m.length + g.length === 0)
      for (let b = 0; b < c.length; ++b)
        c[b] = e(s[b % s.length], r[b % r.length]);
    else
      for (let b = 0; b < c.length; ++b) {
        let y = w.indexToLoc(b, o, u), v = y.slice(-p);
        m.forEach(($) => v[$] = 0);
        let x = w.locToIndex(v, p, h), k = y.slice(-d);
        g.forEach(($) => k[$] = 0);
        let S = w.locToIndex(k, d, f);
        c[b] = e(s[x], r[S]);
      }
    return [c, i];
  };
}
function En(e) {
  let { inputs: t, backend: n } = e, { real: s, imag: r } = t, a = n.data.get(s.dataId).values, i = n.data.get(r.dataId).values, o = n.makeTensorInfo(s.shape, "complex64"), u = n.data.get(o.dataId);
  return u.complexTensorInfos = { real: n.makeTensorInfo(s.shape, "float32", a), imag: n.makeTensorInfo(r.shape, "float32", i) }, o;
}
var AU = { kernelName: Xd, backendName: "cpu", kernelFunc: En };
function Od(e, t, n = "float32") {
  if (n === "complex64") {
    let r = Od(e, t, "float32"), a = Od(e, t, "float32");
    return En({ inputs: { real: r, imag: a }, backend: e });
  }
  let s = w.makeZerosTypedArray(w.sizeFromShape(t), n);
  return e.makeTensorInfo(t, n, s);
}
function Os(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  return n.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
var EU = { kernelName: Wa, backendName: "cpu", kernelFunc: Os };
function ga(e) {
  let { inputs: t, backend: n } = e, { input: s } = t, r = n.data.get(s.dataId).complexTensorInfos.real, a = n.data.get(r.dataId).values;
  return n.makeTensorInfo(r.shape, r.dtype, a);
}
var RU = { kernelName: rp, backendName: "cpu", kernelFunc: ga };
function wr(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { dtype: a } = s;
  if (a === "complex64") {
    if (r.dtype === "complex64")
      return Os({ inputs: { x: r }, backend: n });
    let i = Od(n, r.shape, r.dtype), o = wr({ inputs: { x: r }, backend: n, attrs: { dtype: "float32" } }), u = En({ inputs: { real: o, imag: i }, backend: n });
    return n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), u;
  }
  if (r.dtype === "complex64") {
    let i = ga({ inputs: { input: r }, backend: n }), o = wr({ inputs: { x: i }, backend: n, attrs: { dtype: a } });
    return n.disposeIntermediateTensorInfo(i), o;
  }
  if (!w.hasEncodingLoss(r.dtype, a)) {
    let i = Os({ inputs: { x: r }, backend: n });
    return { dataId: i.dataId, shape: i.shape, dtype: a };
  }
  if (a === "int32") {
    let i = n.data.get(r.dataId).values, o = Int32Array.from(i);
    return n.makeTensorInfo(r.shape, "int32", o);
  }
  if (a === "bool") {
    let i = n.data.get(r.dataId).values, o = w.toTypedArray([0], r.dtype), [u, l] = At((c, p) => c !== p ? 1 : 0)(r.shape, [], i, o, "bool");
    return n.makeTensorInfo(l, "bool", u);
  }
  throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`);
}
var DU = { kernelName: Ta, backendName: "cpu", kernelFunc: wr };
function Gt(e, t, n, s) {
  return n == null ? ({ inputs: r, backend: a }) => {
    let { a: i, b: o } = r, u = a;
    be([i, o], e);
    let l = u.data.get(i.dataId).values, c = u.data.get(o.dataId).values, p = i.dtype === "string" ? C.fromUint8ToStringArray(l) : l, d = i.dtype === "string" ? C.fromUint8ToStringArray(c) : c, h = s || i.dtype, [f, m] = t(i.shape, o.shape, p, d, h);
    return u.makeTensorInfo(m, h, f);
  } : ({ inputs: r, backend: a }) => {
    let { a: i, b: o } = r, u = a;
    if (i.dtype === "complex64" || o.dtype === "complex64") {
      let l = wr({ inputs: { x: i }, backend: u, attrs: { dtype: "complex64" } }), c = u.data.get(l.dataId), p = c.complexTensorInfos.real, d = c.complexTensorInfos.imag, h = u.data.get(p.dataId).values, f = u.data.get(d.dataId).values, m = wr({ inputs: { x: o }, backend: u, attrs: { dtype: "complex64" } }), g = u.data.get(m.dataId), b = g.complexTensorInfos.real, y = g.complexTensorInfos.imag, v = u.data.get(b.dataId).values, x = u.data.get(y.dataId).values, [k, S, $] = n(i.shape, o.shape, h, f, v, x), E = u.makeTensorInfo($, "float32", k), A = u.makeTensorInfo($, "float32", S), P = En({ inputs: { real: E, imag: A }, backend: u });
      return u.disposeIntermediateTensorInfo(l), u.disposeIntermediateTensorInfo(m), u.disposeIntermediateTensorInfo(E), u.disposeIntermediateTensorInfo(A), P;
    } else {
      let l = u.data.get(i.dataId).values, c = u.data.get(o.dataId).values, p = s || i.dtype, [d, h] = t(i.shape, o.shape, l, c, p);
      return u.makeTensorInfo(h, p, d);
    }
  };
}
function tv(e) {
  return (t, n, s, r, a, i) => {
    let o = C.assertAndGetBroadcastShape(t, n), u = w.sizeFromShape(o), l = o.length, c = w.computeStrides(o), p = w.getTypedArrayFromDType("float32", u), d = w.getTypedArrayFromDType("float32", u), h = C.getBroadcastDims(t, o), f = C.getBroadcastDims(n, o), m = C.mergeRealAndImagArrays(s, r), g = C.mergeRealAndImagArrays(a, i), b = t.length, y = w.computeStrides(t), v = n.length, x = w.computeStrides(n);
    if (h.length + f.length === 0)
      for (let k = 0; k < p.length; k++) {
        let S = k % m.length, $ = k % g.length, E = e(m[S * 2], m[S * 2 + 1], g[$ * 2], g[$ * 2 + 1]);
        p[k] = E.real, d[k] = E.imag;
      }
    else
      for (let k = 0; k < p.length; k++) {
        let S = w.indexToLoc(k, l, c), $ = S.slice(-b);
        h.forEach((F) => $[F] = 0);
        let E = w.locToIndex($, b, y), A = S.slice(-v);
        f.forEach((F) => A[F] = 0);
        let P = w.locToIndex(A, v, x), R = e(m[E * 2], m[E * 2 + 1], g[P * 2], g[P * 2 + 1]);
        p[k] = R.real, d[k] = R.imag;
      }
    return [p, d, o];
  };
}
var jS = At((e, t) => e + t);
var FU = tv((e, t, n, s) => ({ real: e + n, imag: t + s }));
var Kl = Gt(Sr, jS, FU);
var OU = { kernelName: Sr, backendName: "cpu", kernelFunc: Kl };
function nv(e, t, n, s, r) {
  let a = w.sizeFromShape(s), i = w.makeZerosTypedArray(r, n);
  for (let o = 0; o < e.length; o++) {
    let u = e[o];
    if (u < 0)
      throw new Error("Input x must be non-negative!");
    u >= r || (a > 0 ? i[u] += t[o] : i[u] += 1);
  }
  return i;
}
function KS(e, t, n, s = false) {
  let r = e.shape[0], a = e.shape[1], i = De([r, n], t.dtype);
  for (let o = 0; o < r; o++)
    for (let u = 0; u < a; u++) {
      let l = e.get(o, u);
      if (l < 0)
        throw new Error("Input x must be non-negative!");
      l >= n || (s ? i.set(1, o, l) : t.size > 0 ? i.set(i.get(o, l) + t.get(o, u), o, l) : i.set(i.get(o, l) + 1, o, l));
    }
  return i;
}
function Rr(e) {
  return (t, n, s) => {
    let r = w.getTypedArrayFromDType(n, t.length);
    for (let a = 0; a < t.length; ++a)
      r[a] = e(t[a], s);
    return r;
  };
}
function st(e, t, n) {
  return ({ inputs: s, attrs: r, backend: a }) => {
    let { x: i } = s;
    if (be(i, e), i.dtype === "string" || n === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    let o = a, u = o.data.get(i.dataId).values, l = w.sizeFromShape(i.shape), c = n || i.dtype, p = w.getArrayFromDType(c, l);
    for (let d = 0; d < l; ++d)
      p[d] = t(u[d], r);
    return o.makeTensorInfo(i.shape, c, p);
  };
}
function tu(e, t, n) {
  return ({ inputs: s, attrs: r, backend: a }) => {
    let { x: i } = s;
    if (be(i, e), i.dtype === "string" || n === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    let o = a, u = o.data.get(i.dataId).values, l = n || i.dtype, c = t(u, l, r);
    return o.makeTensorInfo(i.shape, l, c);
  };
}
var XS = Rr((e) => Math.ceil(e));
var PU = tu($a, XS);
var zU = { kernelName: $a, backendName: "cpu", kernelFunc: PU };
function sv(e, t, n, s) {
  let r = w.getArrayFromDType(n, w.sizeFromShape(t));
  if (s && n !== "string") {
    let a = 0;
    e.forEach((i) => {
      let o = w.sizeFromShape(i.shape);
      r.set(i.vals, a), a += o;
    });
  } else {
    let a = 0;
    e.forEach((i) => {
      let o = n === "string" ? C.fromUint8ToStringArray(i.vals) : i.vals, u = 0;
      for (let l = 0; l < i.shape[0]; ++l) {
        let c = l * t[1] + a;
        for (let p = 0; p < i.shape[1]; ++p)
          r[c + p] = o[u++];
      }
      a += i.shape[1];
    });
  }
  return r;
}
var YS = At((e, t) => e === t ? 1 : 0);
var QS = Gt(mo, YS, null, "bool");
var MU = { kernelName: mo, backendName: "cpu", kernelFunc: QS };
var ZS = Rr((e) => Math.exp(e));
var JS = tu(za, ZS, "float32");
var LU = { kernelName: za, backendName: "cpu", kernelFunc: JS };
var eC = Rr((e) => Math.expm1(e));
var BU = tu(bo, eC);
var VU = { kernelName: bo, backendName: "cpu", kernelFunc: BU };
var tC = Rr((e) => Math.floor(e));
var WU = tu(Ma, tC);
var UU = { kernelName: Ma, backendName: "cpu", kernelFunc: WU };
function nC(e, t, n, s, r, a, i, o, u) {
  let l = De([s, a], n);
  for (let c = 0; c < s; c++) {
    let p = [], d = 0;
    for (let h = 0; h < r; h++) {
      let f = e[c * r + h];
      d += f * i[h], p.push(f);
    }
    if (d < 0 || d >= u / a)
      throw new Error(`Invalid indices: ${p} does not index into ${o}`);
    for (let h = 0; h < a; h++)
      l.values[c * a + h] = t.get(...t.indexToLoc(d * a + h));
  }
  return l;
}
function sC(e, t, n) {
  let s = De(n, e.dtype);
  for (let r = 0; r < s.size; ++r) {
    let i = s.indexToLoc(r).slice(), o = i[0], u = i[2], l = t.locToIndex([o, u]);
    i[2] = t.values[l];
    let c = e.locToIndex(i);
    0 <= c && c < e.values.length && (s.values[r] = e.values[c]);
  }
  return s;
}
var rC = At((e, t) => e > t ? 1 : 0);
var GU = Gt(wo, rC, null, "bool");
var HU = { kernelName: wo, backendName: "cpu", kernelFunc: GU };
var aC = At((e, t) => e >= t ? 1 : 0);
var qU = Gt(Va, aC, null, "bool");
var jU = { kernelName: Va, backendName: "cpu", kernelFunc: qU };
var iC = At((e, t) => e < t ? 1 : 0);
var KU = Gt(ko, iC, null, "bool");
var XU = { kernelName: ko, backendName: "cpu", kernelFunc: KU };
var oC = At((e, t) => e <= t ? 1 : 0);
var YU = Gt(Io, oC, null, "bool");
var QU = { kernelName: Io, backendName: "cpu", kernelFunc: YU };
function uC(e, t, n) {
  let s = (t - e) / (n - 1), r = w.makeZerosTypedArray(n, "float32");
  r[0] = e;
  for (let a = 1; a < r.length; a++)
    r[a] = r[a - 1] + s;
  return r;
}
var lC = Rr((e) => Math.log(e));
var ZU = tu(Ga, lC);
var JU = { kernelName: Ga, backendName: "cpu", kernelFunc: ZU };
function cC(e, t, n, s) {
  let r = w.getTypedArrayFromDType(s, w.sizeFromShape(n));
  for (let a = 0; a < r.length; ++a) {
    let i = a * t, o = e[i];
    for (let u = 0; u < t; ++u) {
      let l = e[i + u];
      (Number.isNaN(l) || l > o) && (o = l);
    }
    r[a] = o;
  }
  return r;
}
var dC = At((e, t) => Math.max(e, t));
var eG = Gt(qa, dC);
var tG = { kernelName: qa, backendName: "cpu", kernelFunc: eG };
var pC = At((e, t) => Math.min(e, t));
var nG = Gt(Ya, pC);
var sG = { kernelName: Ya, backendName: "cpu", kernelFunc: nG };
var rv = At((e, t) => e * t);
var rG = tv((e, t, n, s) => ({ real: e * n - t * s, imag: e * s + t * n }));
var jp = Gt(Za, rv, rG);
var aG = { kernelName: Za, backendName: "cpu", kernelFunc: jp };
function hC(e, t, n) {
  let s = w.createScalarValue(-1, n);
  return rv([], t, s, e, n);
}
function iG(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  be(s, "neg");
  let r = n.data.get(s.dataId).values, [a, i] = hC(r, s.shape, s.dtype);
  return n.makeTensorInfo(i, s.dtype, a);
}
var oG = { kernelName: Co, backendName: "cpu", kernelFunc: iG };
var fC = At((e, t) => e !== t ? 1 : 0);
var uG = Gt(No, fC, null, "bool");
var lG = { kernelName: No, backendName: "cpu", kernelFunc: uG };
function av(e, t, n, s, r) {
  let a = t.length, i = w.sizeFromShape(t), o = w.computeStrides(t), u = w.computeStrides(r), l = w.getTypedArrayFromDType(n, w.sizeFromShape(r));
  for (let c = 0; c < i; ++c) {
    let p = w.indexToLoc(c, a, o), d = new Array(p.length);
    for (let f = 0; f < d.length; f++)
      d[f] = p[s[f]];
    let h = w.locToIndex(d, a, u);
    l[h] = e[c];
  }
  return l;
}
function wn(e) {
  let { inputs: t, attrs: n, backend: s } = e, { x: r } = t, { perm: a } = n;
  be(r, "transpose");
  let i = r.shape.length, o = new Array(i);
  for (let p = 0; p < o.length; p++)
    o[p] = r.shape[a[p]];
  let u = s.data.get(r.dataId).values, l = av(u, r.shape, r.dtype, a, o);
  return { dataId: s.write(l, o, r.dtype), shape: o, dtype: r.dtype };
}
var cG = { kernelName: mi, backendName: "cpu", kernelFunc: wn };
function mC(e, t, n, s) {
  let [r, a] = C.computeOutAndReduceShapes(e, s), i = ln(t, "int32"), o = w.makeZerosTypedArray(w.sizeFromShape(r), i), u = w.sizeFromShape(a);
  for (let l = 0; l < o.length; ++l) {
    let c = l * u, p = 1;
    for (let d = 0; d < u; ++d)
      p *= n[c + d];
    o[l] = p;
  }
  return { outVals: o, outShape: r, outDtype: i };
}
function dG(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s;
  be(r, "prod");
  let o = r.shape.length, u = w.parseAxisParam(a, r.shape), l = C.getAxesPermutation(u, o), c = u, p = r, d = [];
  l != null && (p = wn({ inputs: { x: r }, backend: n, attrs: { perm: l } }), d.push(p), c = C.getInnerMostAxes(c.length, o));
  let h = n.data.get(p.dataId).values, { outVals: f, outShape: m, outDtype: g } = mC(p.shape, p.dtype, h, c), b = m;
  return i && (b = C.expandShapeToKeepDim(m, u)), d.forEach((y) => n.disposeIntermediateTensorInfo(y)), n.makeTensorInfo(b, g, f);
}
var pG = { kernelName: ni, backendName: "cpu", kernelFunc: dG };
function iv(e, t, n, s) {
  let r = e === t, a = e < t && n < 0, i = t < e && n > 1;
  if (r || a || i)
    return w.makeZerosTypedArray(0, s);
  let o = Math.abs(Math.ceil((t - e) / n)), u = w.makeZerosTypedArray(o, s);
  t < e && n === 1 && (n = -1), u[0] = e;
  for (let l = 1; l < u.length; l++)
    u[l] = u[l - 1] + n;
  return u;
}
var gC = Rr((e) => 1 / Math.sqrt(e));
var hG = tu(ii, gC);
var fG = { kernelName: ii, backendName: "cpu", kernelFunc: hG };
var mG = Rr((e) => 1 / (1 + Math.exp(-e)));
var bC = st(ui, (e) => 1 / (1 + Math.exp(-e)));
var gG = { kernelName: ui, backendName: "cpu", kernelFunc: bC };
function Pd(e, t, n, s, r) {
  let a = wt.isSliceContinous(s, t, n), i = w.sizeFromShape(n), o = w.computeStrides(s);
  if (a) {
    let p = wt.computeFlatOffset(t, o);
    return r === "string" ? e.slice(p, p + i) : e.subarray(p, p + i);
  }
  let u = r === "string" ? C.fromUint8ToStringArray(e) : e, l = De(s, r, u), c = De(n, r);
  for (let p = 0; p < c.size; ++p) {
    let d = c.indexToLoc(p), h = d.map((f, m) => f + t[m]);
    c.set(l.get(...h), ...d);
  }
  return r === "string" ? C.fromStringArrayToUint8(c.values) : c.values;
}
function ba(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { begin: a, size: i } = s;
  be(r, "slice");
  let [o, u] = wt.parseSliceParams(r, a, i);
  wt.assertParamsValid(r, o, u);
  let l = n.data.get(r.dataId).values, c = Pd(l, o, u, r.shape, r.dtype);
  return n.makeTensorInfo(u, r.dtype, c);
}
var bG = { kernelName: zo, backendName: "cpu", kernelFunc: ba };
function yC(e, t, n, s, r, a, i) {
  let o = t[0], u = a[0], l = new Array(u), c = new Array(o), p = t[1];
  if (u === 0) {
    if (o !== 0)
      throw new Error(C.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));
    let g = w.getArrayFromDType(n, 0), b = w.getArrayFromDType(r, 0);
    return [g, [0, p], b, l, c];
  }
  let d = true, h = 0, f = new Array(u).fill(0);
  for (let g = 0; g < o; ++g) {
    let b = e[g * p];
    if (b < 0)
      throw new Error(C.getSparseFillEmptyRowsNegativeIndexErrorMessage(g, b));
    if (b >= u)
      throw new Error(C.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g, b, u));
    ++f[b], d = d && b >= h, h = b;
  }
  let m = true;
  for (let g = 0; g < u; ++g) {
    let b = f[g] === 0;
    l[g] = b, m = m && !b, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
  }
  if (m && d) {
    let g = e, b = s;
    for (let y = 0; y < o; ++y)
      c[y] = y;
    return [g, [o, p], b, l, c];
  } else {
    let g = f[u - 1], b = w.getArrayFromDType(n, g * p), y = w.getArrayFromDType(r, g), v = new Array(u).fill(0);
    for (let x = 0; x < o; ++x) {
      let k = e[x * p], S = v[k], $ = (k === 0 ? 0 : f[k - 1]) + S;
      v[k]++;
      for (let E = 0; E < p; ++E)
        b[$ * p + E] = e[x * p + E];
      y[$] = s[x], c[x] = $;
    }
    for (let x = 0; x < u; ++x)
      if (v[x] === 0) {
        let S = x === 0 ? 0 : f[x - 1];
        b[S * p + 0] = x;
        for (let $ = 1; $ < p; ++$)
          b[S * p + $] = 0;
        y[S] = i;
      }
    return [b, [g, p], y, l, c];
  }
}
function vC(e, t, n, s, r) {
  let a = w.sizeFromShape(s), i = t[0], o = r.length, u = [], l = 1, c = -1;
  for (let g = 0; g < o; ++g) {
    let b = r[g];
    if (b === -1) {
      if (c !== -1)
        throw new Error(C.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c, g));
      c = g, u.push(1);
    } else {
      if (b < 0)
        throw new Error(C.getSparseReshapeNegativeOutputDimErrorMessage(g, b));
      l *= b, u.push(b);
    }
  }
  if (c !== -1) {
    if (l <= 0)
      throw new Error(C.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());
    let g = Math.trunc(a / l);
    if (l * g !== a)
      throw new Error(C.getSparseReshapeInputOutputMultipleErrorMessage(s, u));
    u[c] = g;
  }
  if (w.sizeFromShape(u) !== a)
    throw new Error(C.getSparseReshapeInputOutputMismatchErrorMessage(s, u));
  let d = s.length, h = [];
  if (d > 0) {
    h[d - 1] = 1;
    for (let g = d - 2; g >= 0; --g)
      h[g] = h[g + 1] * s[g + 1];
  }
  let f = [];
  if (o > 0) {
    f[o - 1] = 1;
    for (let g = o - 2; g >= 0; --g)
      f[g] = f[g + 1] * u[g + 1];
  }
  let m = w.getArrayFromDType(n, i * o);
  for (let g = 0; g < i; ++g) {
    let b = 0;
    for (let y = 0; y < d; ++y)
      b += e[g * d + y] * h[y];
    for (let y = 0; y < o; ++y)
      m[g * o + y] = Math.trunc(b / f[y]), b %= f[y];
  }
  return [m, [i, o], u];
}
function ov(e, t, n, s, r, a = false, i = 0) {
  let o = s.length, u = [t[0], e.length / t[0]], l = u[1], p = o > 0 ? r[o - 1] + 1 : 0;
  if (p < 0)
    throw new Error(C.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let d = t.slice();
  d[0] = p;
  let h = d.reduce((v, x) => v * x, 1), f = w.getArrayFromDType(n, h);
  if (o === 0)
    return p > 0 && f.fill(i), [f, d];
  if (p <= 0)
    throw new Error(C.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let m = 0, g = 1, b = 0, y = r[m];
  for (; ; ) {
    let v = 0;
    if (g < o) {
      if (v = r[g], y === v) {
        ++g;
        continue;
      }
      if (y >= v)
        throw new Error(C.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());
    }
    if (y < 0 || y >= p)
      throw new Error(C.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y, p));
    y > b && f.fill(i, b * l, y * l);
    for (let x = m; x < g; ++x) {
      let k = s[x];
      if (k < 0 || k >= u[0])
        throw new Error(C.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(x, s[x], u[0]));
      for (let S = 0; S < l; S++)
        f[y * l + S] += e[k * l + S];
    }
    if (a)
      for (let x = 0; x < l; x++)
        f[y * l + x] /= g - m;
    if (m = g, ++g, b = y + 1, y = v, g > o)
      break;
  }
  return b < p && f.fill(i, b * l, p * l), [f, d];
}
var yG = Rr((e) => Math.sqrt(e));
var vG = st(li, (e) => Math.sqrt(e));
var xG = { kernelName: li, backendName: "cpu", kernelFunc: vG };
var xC = At((e, t) => {
  let n = e - t;
  return n * n;
});
var wG = Gt(pi, xC);
var kG = { kernelName: pi, backendName: "cpu", kernelFunc: wG };
function wC(e, t, n, s) {
  let r = De(e, t.dtype);
  for (let a = 0; a < r.size; a++) {
    let i = r.indexToLoc(a), o = new Array(i.length);
    for (let u = 0; u < o.length; u++)
      o[u] = i[u] * n[u] + s[u];
    r.set(t.get(...o), ...i);
  }
  return r;
}
var IG = class {
  constructor(e, t, n, s, r, a) {
    this.separator = w.encodeString(e), this.nGramWidths = t, this.leftPad = w.encodeString(n), this.rightPad = w.encodeString(s), this.padWidth = r, this.preserveShort = a;
  }
  getPadWidth(e) {
    return Math.min(this.padWidth < 0 ? e - 1 : this.padWidth, e - 1);
  }
  getNumNGrams(e, t) {
    let n = this.getPadWidth(t);
    return Math.max(0, e + 2 * n - t + 1);
  }
  createNGrams(e, t, n, s, r, a) {
    for (let i = 0; i < r; ++i) {
      let o = this.getPadWidth(a), u = Math.max(0, o - i), l = Math.max(0, o - (r - (i + 1))), c = a - (u + l), p = t + (u > 0 ? 0 : i - o), d = 0;
      d += u * this.leftPad.length;
      for (let b = 0; b < c; ++b)
        d += e[p + b].length;
      d += l * this.rightPad.length, d += (u + l + c - 1) * this.separator.length, n[s + i] = new Uint8Array(d);
      let f = n[s + i], m = 0, g = (b) => b.forEach((y) => f[m++] = y);
      for (let b = 0; b < u; ++b)
        g(this.leftPad), g(this.separator);
      for (let b = 0; b < c - 1; ++b)
        g(e[p + b]), g(this.separator);
      if (c > 0) {
        g(e[p + c - 1]);
        for (let b = 0; b < l; ++b)
          g(this.separator), g(this.rightPad);
      } else {
        for (let b = 0; b < l - 1; ++b)
          g(this.rightPad), g(this.separator);
        g(this.rightPad);
      }
    }
  }
  compute(e, t) {
    let n = e.length, s = t.length;
    if (s > 0) {
      let o = t[0];
      if (o !== 0)
        throw new Error(`First split value must be 0, got ${o}`);
      for (let u = 1; u < s; ++u) {
        let l = t[u] >= o;
        if (l = l && t[u] <= n, !l)
          throw new Error(`Invalid split value ${t[u]}, must be in [${o}, ${n}]`);
        o = t[u];
      }
      if (o !== n)
        throw new Error(`Last split value must be data size. Expected ${n}, got ${o}`);
    }
    let r = s - 1, a = w.getArrayFromDType("int32", s);
    if (n === 0 || s === 0) {
      let o = new Array(n);
      for (let u = 0; u <= r; ++u)
        a[u] = 0;
      return [o, a];
    }
    a[0] = 0;
    for (let o = 1; o <= r; ++o) {
      let u = t[o] - t[o - 1], l = 0;
      this.nGramWidths.forEach((c) => {
        l += this.getNumNGrams(u, c);
      }), this.preserveShort && u > 0 && l === 0 && (l = 1), a[o] = a[o - 1] + l;
    }
    let i = new Array(a[r]);
    for (let o = 0; o < r; ++o) {
      let u = t[o], l = a[o];
      if (this.nGramWidths.forEach((c) => {
        let p = t[o + 1] - t[o], d = this.getNumNGrams(p, c);
        this.createNGrams(e, u, i, l, d, c), l += d;
      }), this.preserveShort && l === a[o]) {
        let c = t[o + 1] - t[o];
        if (c === 0)
          continue;
        let p = c + 2 * this.padWidth, d = 1;
        this.createNGrams(e, u, i, l, d, p);
      }
    }
    return [i, a];
  }
};
function kC(e, t, n, s, r, a, i, o) {
  return new IG(n, s, r, a, i, o).compute(e, t);
}
function SG(e, t, n, s) {
  if (!e.length)
    return;
  if (t.length === 0) {
    for (let a = 0; a < e.length; ++a)
      s.push(e.subarray(a, a + 1));
    return;
  }
  if (t.length === 1) {
    let a = t[0], i = e.indexOf(a);
    for (; i !== -1; ) {
      let o = e.subarray(0, i);
      (!n || o.length !== 0) && s.push(o), e = e.subarray(i + 1), i = e.indexOf(a);
    }
    (!n || e.length !== 0) && s.push(e);
    return;
  }
  let r = 0;
  for (let a = 0; a < e.length + 1; a++)
    if (a === e.length || t.indexOf(e[a]) !== -1) {
      let i = e.subarray(r, a);
      (!n || i.length !== 0) && s.push(i), r = a + 1;
    }
}
function IC(e, t, n) {
  let s = e.length, r = [], a = 0, i = 0, o = new Array(s);
  for (let d = 0; d < s; ++d) {
    let h = r.length;
    SG(e[d], t, n, r);
    let f = r.length - h;
    o[d] = f, a += f, i = Math.max(i, f);
  }
  let u = w.getArrayFromDType("int32", a * 2), l = new Array(a), c = [s, i], p = 0;
  for (let d = 0; d < s; ++d)
    for (let h = 0; h < o[d]; ++h)
      u[p * 2] = d, u[p * 2 + 1] = h, l[p] = r[p], ++p;
  return [u, l, c];
}
function SC(e, t) {
  let n = w.getArrayFromDType("int32", e.length);
  for (let s = 0; s < e.length; ++s)
    n[s] = w.fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();
  return n;
}
var CC = At((e, t) => e - t);
var CG = tv((e, t, n, s) => ({ real: e - n, imag: t - s }));
var uv = Gt(hi, CC, CG);
var NG = { kernelName: hi, backendName: "cpu", kernelFunc: uv };
function NC(e, t) {
  let n = new Array(e.rank);
  for (let r = 0; r < n.length; r++)
    n[r] = e.shape[r] * t[r];
  let s = De(n, e.dtype);
  for (let r = 0; r < s.values.length; ++r) {
    let a = s.indexToLoc(r), i = new Array(e.rank);
    for (let u = 0; u < i.length; u++)
      i[u] = a[u] % e.shape[u];
    let o = e.locToIndex(i);
    s.values[r] = e.values[o];
  }
  return s;
}
var Du = (e, t) => {
  let n = t.value - e.value;
  return n === 0 ? e.index - t.index : n;
};
function TC(e, t, n = 0, s = e.length - 1) {
  for (; s > n; ) {
    if (s - n > 600) {
      let o = s - n + 1, u = t - n + 1, l = Math.log(o), c = 0.5 * Math.exp(2 * l / 3), p = 0.5 * Math.sqrt(l * c * (o - c) / o) * Math.sign(u - o / 2), d = Math.max(n, Math.floor(t - u * c / o + p)), h = Math.min(s, Math.floor(t + (o - u) * c / o + p));
      TC(e, t, d, h);
    }
    let r = e[t], a = n, i = s;
    for (w.swap(e, n, t), Du(e[s], r) > 0 && w.swap(e, n, s); a < i; ) {
      for (w.swap(e, a, i), a++, i--; Du(e[a], r) < 0; )
        a = a + 1;
      for (; Du(e[i], r) > 0; )
        i = i - 1;
    }
    Du(e[n], r) === 0 ? w.swap(e, n, i) : (i = i + 1, w.swap(e, i, s)), i <= t && (n = i + 1), t <= i && (s = i - 1);
  }
}
function $C(e, t, n, s, r) {
  let a = t[t.length - 1], [i, o] = [e.length / a, a], u = w.getTypedArrayFromDType(n, i * s), l = w.getTypedArrayFromDType("int32", i * s);
  for (let p = 0; p < i; p++) {
    let d = p * o, h = e.subarray(d, d + o), f = new Array(h.length);
    h.forEach((y, v) => f[v] = { value: y, index: v }), s < f.length && (TC(f, s), f = f.slice(0, s)), r && f.sort(Du);
    let m = p * s, g = u.subarray(m, m + s), b = l.subarray(m, m + s);
    for (let y = 0; y < s; y++)
      g[y] = f[y].value, b[y] = f[y].index;
  }
  let c = t.slice();
  return c[c.length - 1] = s, [De(c, n, u), De(c, "int32", l)];
}
function _C(e, t, n, s) {
  let r = w.parseAxisParam(t, n)[0], a = [1, n[0], 1];
  for (let f = 0; f < r; f++)
    a[0] *= n[f];
  a[1] = n[r];
  for (let f = r + 1; f < n.length; f++)
    a[2] *= n[f];
  let i = {}, o = new Int32Array(n[r]), u = new Vt(a, s, e), l = [], c = a[0] === 1 && a[2] === 1;
  for (let f = 0; f < n[r]; f++) {
    let m;
    if (c)
      m = e[f].toString();
    else {
      let g = [];
      for (let b = 0; b < a[0]; b++)
        for (let y = 0; y < a[2]; y++)
          g.push(u.get(b, f, y));
      m = g.join(",");
    }
    if (i[m] !== void 0)
      o[f] = i[m];
    else {
      let g = Object.keys(i).length;
      i[m] = g, o[f] = g, l.push(f);
    }
  }
  let p = a.slice();
  p[1] = Object.keys(i).length;
  let d = new Vt(p, s);
  l.forEach((f, m) => {
    for (let g = 0; g < a[0]; g++)
      for (let b = 0; b < a[2]; b++)
        d.set(u.get(g, f, b), g, m, b);
  });
  let h = n.slice();
  return h[r] = p[1], { outputValues: d.values, outputShape: h, indices: o };
}
var Xpe = "0.0.0";
fp("cpu", () => new HS(), 1);
var AC = st(Pa, (e) => e >= 0 ? e : Math.exp(e) - 1);
var TG = { kernelName: Pa, backendName: "cpu", kernelFunc: AC };
function EC(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { alpha: a } = s;
  be([r], "leakyRelu");
  let i = w.sizeFromShape(r.shape), o = n.data.get(r.dataId).values, u = w.getTypedArrayFromDType("float32", i);
  for (let l = 0; l < o.length; l++)
    u[l] = o[l] < 0 ? a * o[l] : o[l];
  return n.makeTensorInfo(r.shape, "float32", u);
}
var $G = { kernelName: Ua, backendName: "cpu", kernelFunc: EC };
var _G = At((e, t) => e < 0 ? t * e : e);
function RC(e) {
  let { inputs: t, backend: n } = e, { x: s, alpha: r } = t;
  be([s, r], "prelu");
  let a = n.data.get(s.dataId).values, i = n.data.get(r.dataId).values, [o, u] = _G(s.shape, r.shape, a, i, "float32");
  return n.makeTensorInfo(u, "float32", o);
}
var AG = { kernelName: ti, backendName: "cpu", kernelFunc: RC };
var DC = st(si, (e) => Math.max(0, e));
var EG = { kernelName: si, backendName: "cpu", kernelFunc: DC };
var FC = st(ai, (e) => Math.min(Math.max(0, e), 6));
var RG = { kernelName: ai, backendName: "cpu", kernelFunc: FC };
function lv(e, t, n, s, r) {
  if (n === "linear")
    return Os({ inputs: { x: t }, backend: e });
  if (n === "relu")
    return DC({ inputs: { x: t }, backend: e });
  if (n === "elu")
    return AC({ inputs: { x: t }, backend: e });
  if (n === "relu6")
    return FC({ inputs: { x: t }, backend: e });
  if (n === "prelu")
    return RC({ inputs: { x: t, alpha: s }, backend: e });
  if (n === "leakyrelu")
    return EC({ inputs: { x: t }, backend: e, attrs: { alpha: r } });
  if (n === "sigmoid")
    return bC({ inputs: { x: t }, backend: e });
  throw new Error(`Activation ${n} has not been implemented for the CPU backend.`);
}
function mt(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { shape: a } = s, i = w.sizeFromShape(r.shape), o = w.inferFromImplicitShape(a, i), u = w.sizeFromShape(o);
  w.assert(i === u, () => `The new shape (${o}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`), n.incRef(r.dataId);
  let l = n.data.get(r.dataId);
  if (l.complexTensorInfos != null) {
    let c = l.complexTensorInfos.real, p = l.complexTensorInfos.imag;
    c.shape = o, p.shape = o;
  }
  return { dataId: r.dataId, shape: o, dtype: r.dtype };
}
var DG = { kernelName: Ro, backendName: "cpu", kernelFunc: mt };
function OC(e) {
  let { inputs: t, backend: n, attrs: s } = e, { a: r, b: a } = t, { transposeA: i, transposeB: o } = s;
  be([r, a], "matMul");
  let u = r.shape.length, l = a.shape.length, c = i ? r.shape[u - 2] : r.shape[u - 1], p = o ? a.shape[l - 1] : a.shape[l - 2], d = i ? r.shape[u - 1] : r.shape[u - 2], h = o ? a.shape[l - 2] : a.shape[l - 1], f = r.shape.slice(0, -2), m = a.shape.slice(0, -2), g = w.sizeFromShape(f), b = w.sizeFromShape(m), v = Ko.assertAndGetBroadcastShape(r.shape.slice(0, -2), a.shape.slice(0, -2)).concat([d, h]);
  w.assert(c === p, () => `Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`);
  let x = i ? [g, c, d] : [g, d, c], k = o ? [b, h, p] : [b, p, h], S = mt({ inputs: { x: r }, backend: n, attrs: { shape: x } }), $ = mt({ inputs: { x: a }, backend: n, attrs: { shape: k } }), E = i ? S.shape[1] : S.shape[2], A = i ? S.shape[2] : S.shape[1], P = o ? $.shape[1] : $.shape[2], R = Math.max(g, b), F = n.data.get(S.dataId).values, T = n.data.get($.dataId).values, z = w.computeStrides(S.shape), W = w.computeStrides($.shape), [q, K, Y] = i ? [z[0], 1, z[1]] : [z[0], z[1], 1], [Z, te, ee] = o ? [1, W[1], W[0]] : [W[1], 1, W[0]], se = A * P, ne = De([R, A, P], S.dtype), oe = ne.values, re = n.blockSize;
  for (let le = 0; le < R; le++)
    for (let me = 0; me < A; me += re)
      for (let ke = 0; ke < P; ke += re)
        for (let Se = 0; Se < E; Se += re) {
          let Ee = Math.min(me + re, A), Pe = Math.min(ke + re, P), Xe = Math.min(Se + re, E);
          for (let Je = me; Je < Ee; Je++)
            for (let Ye = ke; Ye < Pe; Ye++) {
              let tt = 0;
              for (let Ce = Se; Ce < Xe; Ce++) {
                let ut = Math.min(le, g - 1) * q, rt = Math.min(le, b - 1) * ee, Zt = F[ut + Je * K + Ce * Y], Nt = T[Ce * Z + Ye * te + rt];
                tt += Zt * Nt;
              }
              oe[le * se + (Je * P + Ye)] += tt;
            }
        }
  return n.disposeIntermediateTensorInfo(S), n.disposeIntermediateTensorInfo($), n.makeTensorInfo(v, ne.dtype, ne.values);
}
var FG = { kernelName: Na, backendName: "cpu", kernelFunc: OC };
function OG(e) {
  let { inputs: t, backend: n, attrs: s } = e, { a: r, b: a, bias: i, preluActivationWeights: o } = t, { transposeA: u, transposeB: l, activation: c, leakyreluAlpha: p } = s, d, h, f, m = [];
  d = OC({ inputs: { a: r, b: a }, attrs: { transposeA: u, transposeB: l }, backend: n }), i && (h = Kl({ inputs: { a: d, b: i }, backend: n }), m.push(d), d = h), c && (f = lv(n, d, c, o, p), m.push(d), d = f);
  for (let b of m)
    n.disposeIntermediateTensorInfo(b);
  return d;
}
var PG = { kernelName: aa, backendName: "cpu", kernelFunc: OG };
var zG = st(rl, (e) => Math.acos(e));
var MG = { kernelName: rl, backendName: "cpu", kernelFunc: zG };
var LG = st(al, (e) => Math.acosh(e));
var BG = { kernelName: al, backendName: "cpu", kernelFunc: LG };
function VG(e) {
  let { inputs: t, backend: n } = e, s = t;
  be(t, "addN");
  let r = s.map((o) => n.data.get(o.dataId).values), a = De(s[0].shape, s[0].dtype), i = a.values;
  for (let o = 0; o < s.length; o++) {
    let u = r[o];
    for (let l = 0; l < i.length; l++)
      i[l] += u[l];
  }
  return n.makeTensorInfo(a.shape, a.dtype, a.values);
}
var WG = { kernelName: Ia, backendName: "cpu", kernelFunc: VG };
function UG(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s;
  be(r, "all");
  let o = w.parseAxisParam(a, r.shape), u = o, l = C.getAxesPermutation(u, r.shape.length), c = r;
  l != null && (c = wn({ inputs: { x: r }, backend: n, attrs: { perm: l } }), u = C.getInnerMostAxes(u.length, r.shape.length)), C.assertAxesAreInnerMostDims("all", u, c.shape.length);
  let [p, d] = C.computeOutAndReduceShapes(c.shape, u), h = w.sizeFromShape(d), f = w.makeZerosTypedArray(w.sizeFromShape(p), c.dtype), m = n.data.get(c.dataId).values;
  for (let b = 0; b < f.length; ++b) {
    let y = b * h, v = m[y];
    for (let x = 0; x < h; ++x) {
      let k = m[y + x];
      v = v && k;
    }
    f[b] = v;
  }
  l != null && n.disposeIntermediateTensorInfo(c);
  let g = n.makeTensorInfo(p, c.dtype, f);
  if (i) {
    let b = C.expandShapeToKeepDim(p, o), y = mt({ inputs: { x: g }, backend: n, attrs: { shape: b } });
    return n.disposeIntermediateTensorInfo(g), y;
  }
  return g;
}
var GG = { kernelName: il, backendName: "cpu", kernelFunc: UG };
function HG(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s;
  be(r, "any");
  let o = w.parseAxisParam(a, r.shape), u = o, l = C.getAxesPermutation(u, r.shape.length), c = r;
  l != null && (c = wn({ inputs: { x: r }, backend: n, attrs: { perm: l } }), u = C.getInnerMostAxes(u.length, r.shape.length)), C.assertAxesAreInnerMostDims("any", u, c.shape.length);
  let [p, d] = C.computeOutAndReduceShapes(c.shape, u), h = w.sizeFromShape(d), f = w.makeZerosTypedArray(w.sizeFromShape(p), c.dtype), m = n.data.get(c.dataId).values;
  for (let b = 0; b < f.length; ++b) {
    let y = b * h, v = m[y];
    for (let x = 0; x < h; ++x) {
      let k = m[y + x];
      v = v || k;
    }
    f[b] = v;
  }
  l != null && n.disposeIntermediateTensorInfo(c);
  let g = n.makeTensorInfo(p, c.dtype, f);
  if (i) {
    let b = C.expandShapeToKeepDim(p, o), y = mt({ inputs: { x: g }, backend: n, attrs: { shape: b } });
    return n.disposeIntermediateTensorInfo(g), y;
  }
  return g;
}
var qG = { kernelName: ol, backendName: "cpu", kernelFunc: HG };
function jG(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a } = s;
  be(r, "argMax");
  let i = w.parseAxisParam(a, r.shape), o = C.getAxesPermutation(i, r.shape.length), u = r, l = [];
  o != null && (u = wn({ inputs: { x: r }, backend: n, attrs: { perm: o } }), l.push(u), i = C.getInnerMostAxes(i.length, u.shape.length)), i = [i[0]], C.assertAxesAreInnerMostDims("argMax", i, u.shape.length);
  let [c, p] = C.computeOutAndReduceShapes(u.shape, i), d = w.sizeFromShape(c), h = w.makeZerosTypedArray(d, "int32"), f = w.sizeFromShape(p), m = n.data.get(u.dataId).values;
  for (let g = 0; g < h.length; ++g) {
    let b = g * f, y = m[b], v = 0;
    for (let x = 0; x < f; ++x) {
      let k = m[b + x];
      k > y && (y = k, v = x);
    }
    h[g] = v;
  }
  return l.forEach((g) => n.disposeIntermediateTensorInfo(g)), n.makeTensorInfo(c, "int32", h);
}
var KG = { kernelName: Sa, backendName: "cpu", kernelFunc: jG };
function XG(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a } = s;
  be(r, "argMin");
  let i = w.parseAxisParam(a, r.shape), o = C.getAxesPermutation(i, r.shape.length), u = r, l = [];
  o != null && (u = wn({ inputs: { x: r }, backend: n, attrs: { perm: o } }), l.push(u), i = C.getInnerMostAxes(i.length, u.shape.length)), i = [i[0]], C.assertAxesAreInnerMostDims("argMin", i, u.shape.length);
  let [c, p] = C.computeOutAndReduceShapes(u.shape, i), d = w.sizeFromShape(c), h = w.makeZerosTypedArray(d, "int32"), f = w.sizeFromShape(p), m = n.data.get(u.dataId).values;
  for (let g = 0; g < h.length; ++g) {
    let b = g * f, y = m[b], v = 0;
    for (let x = 0; x < f; ++x) {
      let k = m[b + x];
      k < y && (y = k, v = x);
    }
    h[g] = v;
  }
  return l.forEach((g) => n.disposeIntermediateTensorInfo(g)), n.makeTensorInfo(c, "int32", h);
}
var YG = { kernelName: ul, backendName: "cpu", kernelFunc: XG };
var QG = st(ll, (e) => Math.asin(e));
var ZG = { kernelName: ll, backendName: "cpu", kernelFunc: QG };
var JG = st(cl, (e) => Math.asinh(e));
var eH = { kernelName: cl, backendName: "cpu", kernelFunc: JG };
var tH = st(dl, (e) => Math.atan(e));
var nH = { kernelName: dl, backendName: "cpu", kernelFunc: tH };
var sH = At((e, t) => Math.atan2(e, t));
var rH = Gt(hl, sH);
var aH = { kernelName: hl, backendName: "cpu", kernelFunc: rH };
var iH = st(pl, (e) => Math.atanh(e));
var oH = { kernelName: pl, backendName: "cpu", kernelFunc: iH };
function cv(e, t, n, s, r, a) {
  let i = r.strideHeight, o = r.strideWidth, u = r.dilationHeight, l = r.dilationWidth, c = r.effectiveFilterHeight, p = r.effectiveFilterWidth, d = r.padInfo.top, h = r.padInfo.left, f = a === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, m = De(r.outShape, n), g = m.values, b = r.outShape[1] * r.outShape[2] * r.outShape[3], y = r.outShape[2] * r.outShape[3], v = r.outShape[3];
  for (let x = 0; x < r.batchSize; ++x) {
    let k = x * b, S = x * s[0];
    for (let $ = 0; $ < r.inChannels; ++$)
      for (let E = 0; E < r.outHeight; ++E) {
        let A = E * i - d, P = Math.max(0, A), R = Math.min(r.inHeight, c + A), F = k + E * y;
        for (let T = 0; T < r.outWidth; ++T) {
          let z = T * o - h, W = Math.max(0, z), q = Math.min(r.inWidth, p + z), K = f, Y = 0, Z = 0;
          for (let ee = P; ee < R; ee += u) {
            let se = S + ee * s[1];
            for (let ne = W; ne < q; ne += l) {
              let oe = se + ne * s[2], re = e[oe + $];
              a === "max" && re > K ? K = re : a === "avg" && (Y += re, Z++);
            }
            if (isNaN(K))
              break;
          }
          let te = F + T * v + $;
          g[te] = a === "avg" ? Y / Z : K;
        }
      }
  }
  return m;
}
function PC(e, t, n, s, r = false, a = false) {
  let i = De(s.outShape, "int32"), o = s.strideHeight, u = s.strideWidth, l = s.dilationHeight, c = s.dilationWidth, p = s.effectiveFilterHeight, d = s.effectiveFilterWidth, h = s.padInfo.top, f = s.padInfo.left, m = De(t, n, e);
  for (let g = 0; g < s.batchSize; ++g)
    for (let b = 0; b < s.inChannels; ++b)
      for (let y = 0; y < s.outHeight; ++y) {
        let v = y * o - h, x = v;
        for (; x < 0; )
          x += l;
        let k = Math.min(s.inHeight, p + v);
        for (let S = 0; S < s.outWidth; ++S) {
          let $ = S * u - f, E = $;
          for (; E < 0; )
            E += c;
          let A = Math.min(s.inWidth, d + $), P = Number.NEGATIVE_INFINITY, R = -1;
          for (let F = x; F < k; F += l) {
            let T = F - v;
            for (let z = E; z < A; z += c) {
              let W = z - $, q = m.get(g, F, z, b);
              q > P && (P = q, r ? R = a ? ((g * s.inHeight + F) * s.inWidth + z) * s.inChannels + b : (F * s.inWidth + z) * s.inChannels + b : R = T * d + W);
            }
          }
          i.set(R, g, y, S, b);
        }
      }
  return i;
}
function zC(e, t, n, s, r, a) {
  let i = r.strideDepth, o = r.strideHeight, u = r.strideWidth, l = r.dilationDepth, c = r.dilationHeight, p = r.dilationWidth, d = r.effectiveFilterDepth, h = r.effectiveFilterHeight, f = r.effectiveFilterWidth, m = r.padInfo.front, g = r.padInfo.top, b = r.padInfo.left, y = a === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, v = De(r.outShape, n), x = v.values, k = r.outShape[1] * r.outShape[2] * r.outShape[3] * r.outShape[4], S = r.outShape[2] * r.outShape[3] * r.outShape[4], $ = r.outShape[3] * r.outShape[4], E = r.outShape[4];
  for (let A = 0; A < r.batchSize; ++A) {
    let P = A * k, R = A * s[0];
    for (let F = 0; F < r.inChannels; ++F)
      for (let T = 0; T < r.outDepth; ++T) {
        let z = T * i - m, W = z;
        for (; W < 0; )
          W += l;
        let q = Math.min(r.inDepth, d + z), K = P + T * S;
        for (let Y = 0; Y < r.outHeight; ++Y) {
          let Z = Y * o - g, te = Z;
          for (; te < 0; )
            te += c;
          let ee = Math.min(r.inHeight, h + Z), se = K + Y * $;
          for (let ne = 0; ne < r.outWidth; ++ne) {
            let oe = ne * u - b, re = oe;
            for (; re < 0; )
              re += p;
            let le = Math.min(r.inWidth, f + oe), me = se + ne * E, ke = y, Se = 0, Ee = 0;
            for (let Xe = W; Xe < q; Xe += l) {
              let Je = R + Xe * s[1];
              for (let Ye = te; Ye < ee; Ye += c) {
                let tt = Je + Ye * s[2];
                for (let Ce = re; Ce < le; Ce += p) {
                  let ut = tt + Ce * s[3], rt = e[ut + F];
                  if (a === "max" && rt > ke ? ke = rt : a === "avg" && (Se += rt, Ee++), isNaN(ke))
                    break;
                }
                if (isNaN(ke))
                  break;
              }
              if (isNaN(ke))
                break;
            }
            let Pe = me + F;
            x[Pe] = a === "avg" ? Se / Ee : ke;
          }
        }
      }
  }
  return v;
}
function uH(e, t) {
  let n = De(t.outShape, "int32"), s = t.strideDepth, r = t.strideHeight, a = t.strideWidth, i = t.dilationDepth, o = t.dilationHeight, u = t.dilationWidth, l = t.effectiveFilterDepth, c = t.effectiveFilterHeight, p = t.effectiveFilterWidth, d = t.padInfo.front, h = t.padInfo.top, f = t.padInfo.left;
  for (let m = 0; m < t.batchSize; ++m)
    for (let g = 0; g < t.inChannels; ++g)
      for (let b = 0; b < t.outDepth; ++b) {
        let y = b * s - d, v = y;
        for (; v < 0; )
          v += i;
        let x = Math.min(t.inDepth, l + y);
        for (let k = 0; k < t.outHeight; ++k) {
          let S = k * r - h, $ = S;
          for (; $ < 0; )
            $ += o;
          let E = Math.min(t.inHeight, c + S);
          for (let A = 0; A < t.outWidth; ++A) {
            let P = A * a - f, R = P;
            for (; R < 0; )
              R += u;
            let F = Math.min(t.inWidth, p + P), T = Number.NEGATIVE_INFINITY, z = -1;
            for (let W = v; W < x; W += i) {
              let q = W - y;
              for (let K = $; K < E; K += o) {
                let Y = K - S;
                for (let Z = R; Z < F; Z += u) {
                  let te = Z - P, ee = e.get(m, W, K, Z, g);
                  ee >= T && (T = ee, z = q * c * p + Y * c + te);
                }
              }
            }
            n.set(z, m, b, k, A, g);
          }
        }
      }
  return n;
}
function lH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t;
  be(r, "avgPool");
  let { filterSize: a, strides: i, pad: o, dimRoundingMode: u } = s, l = 1;
  w.assert(C.eitherStridesOrDilationsAreOne(i, l), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${l}'`);
  let c = C.computePool2DInfo(r.shape, a, i, l, o, u), p;
  if (c.filterWidth === 1 && c.filterHeight === 1 && w.arraysEqual(c.inShape, c.outShape))
    p = Os({ inputs: { x: r }, backend: n });
  else {
    let d = n.data.get(r.dataId).values, h = w.computeStrides(r.shape), f = cv(d, r.shape, r.dtype, h, c, "avg");
    p = n.makeTensorInfo(c.outShape, r.dtype, f.values);
  }
  return p;
}
var cH = { kernelName: Ca, backendName: "cpu", kernelFunc: lH };
function dH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { filterSize: a, strides: i, pad: o, dimRoundingMode: u, dataFormat: l } = s;
  be(r, "avgPool3d");
  let c = C.computePool3DInfo(r.shape, a, i, 1, o, u, l), p = n.data.get(r.dataId).values, d = zC(p, r.shape, r.dtype, w.computeStrides(r.shape), c, "avg");
  return n.makeTensorInfo(d.shape, "float32", d.values);
}
var pH = { kernelName: Kd, backendName: "cpu", kernelFunc: dH };
function hH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, input: a } = t, { filterSize: i, strides: o, pad: u, dimRoundingMode: l } = s;
  be([r, a], "avgPool3DGrad");
  let c = C.computePool3DInfo(a.shape, i, o, 1, u, l), p = c.strideDepth, d = c.strideHeight, h = c.strideWidth, f = c.filterDepth, m = c.filterHeight, g = c.filterWidth, b = c.dilationDepth, y = c.dilationHeight, v = c.dilationWidth, x = c.effectiveFilterDepth, k = c.effectiveFilterHeight, S = c.effectiveFilterWidth, $ = x - 1 - c.padInfo.front, E = S - 1 - c.padInfo.left, A = k - 1 - c.padInfo.top, P = De(a.shape, "float32"), R = 1 / (f * m * g), F = n.bufferSync(r);
  for (let T = 0; T < c.batchSize; ++T)
    for (let z = 0; z < c.inChannels; ++z)
      for (let W = 0; W < c.inDepth; ++W)
        for (let q = 0; q < c.inHeight; ++q)
          for (let K = 0; K < c.inWidth; ++K) {
            let Y = W - $, Z = q - A, te = K - E, ee = 0;
            for (let se = 0; se < x; se += b) {
              let ne = (Y + se) / p;
              if (!(ne < 0 || ne >= c.outDepth || Math.floor(ne) !== ne))
                for (let oe = 0; oe < k; oe += y) {
                  let re = (Z + oe) / d;
                  if (!(re < 0 || re >= c.outHeight || Math.floor(re) !== re))
                    for (let le = 0; le < S; le += v) {
                      let me = (te + le) / h;
                      if (me < 0 || me >= c.outWidth || Math.floor(me) !== me)
                        continue;
                      ee += F.get(T, ne, re, me, z);
                    }
                }
            }
            P.set(ee * R, T, W, q, K, z);
          }
  return n.makeTensorInfo(P.shape, P.dtype, P.values);
}
var fH = { kernelName: lg, backendName: "cpu", kernelFunc: hH };
function mH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, input: a } = t, i = a;
  be([r, a], "avgPoolGrad");
  let { filterSize: o, strides: u, pad: l } = s, c = C.computePool2DInfo(i.shape, o, u, 1, l), p = c.strideHeight, d = c.strideWidth, h = c.filterHeight, f = c.filterWidth, m = c.dilationHeight, g = c.dilationWidth, b = c.effectiveFilterHeight, y = c.effectiveFilterWidth, v = y - 1 - c.padInfo.left, x = b - 1 - c.padInfo.top, k = De(i.shape, "float32"), S = 1 / (h * f), $ = n.data.get(r.dataId).values, E = De(r.shape, "float32", $);
  for (let A = 0; A < c.batchSize; ++A)
    for (let P = 0; P < c.inChannels; ++P)
      for (let R = 0; R < c.inHeight; ++R)
        for (let F = 0; F < c.inWidth; ++F) {
          let T = R - x, z = F - v, W = 0;
          for (let q = 0; q < b; q += m) {
            let K = (T + q) / p;
            if (!(K < 0 || K >= c.outHeight || Math.floor(K) !== K))
              for (let Y = 0; Y < y; Y += g) {
                let Z = (z + Y) / d;
                if (Z < 0 || Z >= c.outWidth || Math.floor(Z) !== Z)
                  continue;
                W += E.get(A, K, Z, P);
              }
          }
          k.set(W * S, A, R, F, P);
        }
  return n.makeTensorInfo(k.shape, k.dtype, k.values);
}
var gH = { kernelName: ug, backendName: "cpu", kernelFunc: mH };
function bH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, scale: a, offset: i, mean: o, variance: u } = t;
  w.assert(o.shape.length === u.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), w.assert(i == null || o.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), w.assert(a == null || o.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), be([r, o, u, a, i], "batchNorm");
  let { varianceEpsilon: l } = s;
  l == null && (l = 1e-3);
  let c = n.data.get(r.dataId).values, p = n.data.get(o.dataId).values, d = n.data.get(u.dataId).values, h = a ? n.data.get(a.dataId).values : new Float32Array([1]), f = i ? n.data.get(i.dataId).values : new Float32Array([0]), m = new Float32Array(c.length), g = f.length, b = h.length, y = d.length, v = p.length, x = 0, k = 0, S = 0, $ = 0;
  for (let E = 0; E < c.length; ++E)
    m[E] = f[x++] + (c[E] - p[k++]) * h[S++] / Math.sqrt(d[$++] + l), x >= g && (x = 0), k >= v && (k = 0), S >= b && (S = 0), $ >= y && ($ = 0);
  return n.makeTensorInfo(r.shape, r.dtype, m);
}
var yH = { kernelName: Ba, backendName: "cpu", kernelFunc: bH };
function vH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockShape: a, crops: i } = s;
  be([r], "batchToSpaceND");
  let o = a.reduce((b, y) => b * y), u = C.getReshaped(r.shape, a, o), l = C.getPermuted(u.length, a.length), c = C.getReshapedPermuted(r.shape, a, o), p = C.getSliceBeginCoords(i, a.length), d = C.getSliceSize(c, i, a.length), h = mt({ inputs: { x: r }, backend: n, attrs: { shape: u } }), f = wn({ inputs: { x: h }, backend: n, attrs: { perm: l } }), m = mt({ inputs: { x: f }, backend: n, attrs: { shape: c } }), g = ba({ inputs: { x: m }, backend: n, attrs: { begin: p, size: d } });
  return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(m), g;
}
var xH = { kernelName: lo, backendName: "cpu", kernelFunc: vH };
function wH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, weights: a } = t, { size: i } = s, o = n.data.get(r.dataId).values, u = n.data.get(a.dataId).values, l = nv(o, u, a.dtype, a.shape, i);
  return n.makeTensorInfo([i], a.dtype, l);
}
var kH = { kernelName: cg, backendName: "cpu", kernelFunc: wH };
function IH(e) {
  let { inputs: t, backend: n } = e, { s0: s, s1: r } = t, a = n.data.get(s.dataId).values, i = n.data.get(r.dataId).values, o = C.assertAndGetBroadcastShape(Array.from(a), Array.from(i));
  return n.makeTensorInfo([o.length], "int32", Int32Array.from(o));
}
var SH = { kernelName: dg, backendName: "cpu", kernelFunc: IH };
var CH = st(Cr, (e, t) => {
  let n = t;
  return e > n.clipValueMax ? n.clipValueMax : e < n.clipValueMin ? n.clipValueMin : e;
});
var NH = { kernelName: Cr, backendName: "cpu", kernelFunc: CH };
var TH = (e) => {
  let { x: t } = e.inputs, n = e.backend, s = new Float32Array(w.sizeFromShape(t.shape)), r = n.data.get(t.dataId), a = r.complexTensorInfos.real, i = r.complexTensorInfos.imag, o = n.data.get(a.dataId).values, u = n.data.get(i.dataId).values;
  for (let l = 0; l < o.length; l++) {
    let c = o[l], p = u[l];
    s[l] = Math.hypot(c, p);
  }
  return n.makeOutput(s, t.shape, "float32");
};
var $H = { kernelName: Yd, backendName: "cpu", kernelFunc: TH };
function ro(e) {
  let { inputs: t, backend: n } = e, { input: s } = t, r = n.data.get(s.dataId).complexTensorInfos.imag, a = n.data.get(r.dataId).values;
  return n.makeTensorInfo(r.shape, r.dtype, a);
}
var _H = { kernelName: ep, backendName: "cpu", kernelFunc: ro };
function ao(e) {
  let { inputs: t, backend: n, attrs: s } = e, { axis: r } = s, a = w.parseAxisParam(r, t[0].shape)[0], i = C.computeOutShape(t.map((m) => m.shape), a);
  if (w.sizeFromShape(i) === 0)
    return n.makeTensorInfo(i, t[0].dtype, []);
  let o = t.filter((m) => w.sizeFromShape(m.shape) > 0);
  if (o.length === 1)
    return Os({ inputs: { x: o[0] }, backend: n });
  let u = o.map((m) => m.shape);
  if (C.assertParamsConsistent(u, a), o[0].dtype === "complex64") {
    let m = o.map((x) => ga({ inputs: { input: x }, backend: n })), g = o.map((x) => ro({ inputs: { input: x }, backend: n })), b = ao({ inputs: m, backend: n, attrs: { axis: a } }), y = ao({ inputs: g, backend: n, attrs: { axis: a } }), v = En({ inputs: { real: b, imag: y }, backend: n });
    return m.forEach((x) => n.disposeIntermediateTensorInfo(x)), g.forEach((x) => n.disposeIntermediateTensorInfo(x)), n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(y), v;
  }
  let l = o.map((m) => {
    let g = w.sizeFromShape(m.shape.slice(a));
    return mt({ inputs: { x: m }, backend: n, attrs: { shape: [-1, g] } });
  }), c = l.map((m) => ({ vals: n.data.get(m.dataId).values, shape: m.shape }));
  i = C.computeOutShape(l.map((m) => m.shape), 1);
  let p = l[0].shape[0] === 1, d = sv(c, i, t[0].dtype, p), h = C.computeOutShape(o.map((m) => m.shape), a), f = n.makeTensorInfo(h, t[0].dtype, d);
  return l.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
}
var AH = { kernelName: co, backendName: "cpu", kernelFunc: ao };
function MC(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a } = t, { strides: i, pad: o, dataFormat: u, dilations: l, dimRoundingMode: c } = s;
  be([r, a], "conv2d");
  let p = C.convertConv2DDataFormat(u), d = C.computeConv2DInfo(r.shape, a.shape, i, l, o, c, false, p), h = d.filterHeight, f = d.filterWidth, m = d.dilationHeight, g = d.dilationWidth, b = d.padInfo.left, y = d.padInfo.top, v = d.dataFormat === "channelsLast", x = new Vt(d.outShape, r.dtype), k = w.computeStrides(r.shape), S = w.computeStrides(a.shape), $ = k[0], E = v ? k[1] : k[2], A = v ? k[2] : 1, P = v ? 1 : k[1], R = x.strides[0], F = v ? x.strides[1] : x.strides[2], T = v ? x.strides[2] : 1, z = v ? 1 : x.strides[1], W = n.data.get(r.dataId).values, q = n.data.get(a.dataId).values, K = x.values;
  for (let Y = 0; Y < d.batchSize; ++Y) {
    let Z = Y * $, te = Y * R;
    for (let ee = 0; ee < d.outHeight; ++ee) {
      let se = te + ee * F, ne = ee * d.strideHeight - y;
      for (let oe = 0; oe < h; ++oe) {
        let re = ne + oe * m;
        if (re < 0 || re >= d.inHeight)
          continue;
        let le = oe * S[0], me = Z + re * E;
        for (let ke = 0; ke < d.outWidth; ++ke) {
          let Se = se + ke * T, Ee = ke * d.strideWidth - b;
          for (let Pe = 0; Pe < f; ++Pe) {
            let Xe = Ee + Pe * g;
            if (Xe < 0 || Xe >= d.inWidth)
              continue;
            let Je = le + Pe * S[1], Ye = me + Xe * A, tt = Je;
            for (let Ce = 0; Ce < d.inChannels; ++Ce) {
              let ut = W[Ye + Ce * P];
              for (let rt = 0; rt < d.outChannels; ++rt)
                K[Se + rt * z] += ut * q[tt + rt];
              tt += d.outChannels;
            }
          }
        }
      }
    }
  }
  return n.makeTensorInfo(x.shape, x.dtype, K);
}
var EH = { kernelName: _a, backendName: "cpu", kernelFunc: MC };
function RH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, dy: a } = t, { strides: i, pad: o, dataFormat: u, dimRoundingMode: l, filterShape: c } = s;
  be([r, a], "conv2dBackpropFilter");
  let p = C.convertConv2DDataFormat(u), d = C.computeConv2DInfo(r.shape, c, i, 1, o, l, false, p), { strideHeight: h, strideWidth: f, filterHeight: m, filterWidth: g } = d, b = d.dataFormat === "channelsLast", y = new Vt(d.filterShape, "float32"), v = d.padInfo.left, x = d.padInfo.top, k = n.data.get(r.dataId).values, S = n.data.get(a.dataId).values, $ = new Vt(r.shape, r.dtype, k), E = new Vt(a.shape, a.dtype, S);
  for (let A = 0; A < m; ++A) {
    let P = Math.max(0, Math.ceil((x - A) / h)), R = Math.min(d.outHeight, (d.inHeight + x - A) / h);
    for (let F = 0; F < g; ++F) {
      let T = Math.max(0, Math.ceil((v - F) / f)), z = Math.min(d.outWidth, (d.inWidth + v - F) / f);
      for (let W = 0; W < d.inChannels; ++W)
        for (let q = 0; q < d.outChannels; ++q) {
          let K = 0;
          for (let Y = 0; Y < d.batchSize; ++Y)
            for (let Z = P; Z < R; ++Z) {
              let te = A + Z * h - x;
              for (let ee = T; ee < z; ++ee) {
                let se = F + ee * f - v;
                b ? K += $.get(Y, te, se, W) * E.get(Y, Z, ee, q) : K += $.get(Y, W, te, se) * E.get(Y, q, Z, ee);
              }
            }
          y.set(K, A, F, W, q);
        }
    }
  }
  return n.makeTensorInfo(y.shape, y.dtype, y.values);
}
var DH = { kernelName: pg, backendName: "cpu", kernelFunc: RH };
function FH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, filter: a } = t, { inputShape: i, strides: o, pad: u, dataFormat: l, dimRoundingMode: c } = s;
  be([r, a], "conv2dBackpropInput");
  let p = w.computeStrides(a.shape), d = w.computeStrides(r.shape), h = C.convertConv2DDataFormat(l), f = C.computeConv2DInfo(i, a.shape, o, 1, u, c, false, h), m = new Vt(f.inShape, "float32"), g = m.values, b = n.data.get(r.dataId).values, y = n.data.get(a.dataId).values, [v, x, k] = p, { batchSize: S, filterHeight: $, filterWidth: E, inChannels: A, inHeight: P, inWidth: R, outChannels: F, outHeight: T, outWidth: z, strideHeight: W, strideWidth: q } = f;
  h = f.dataFormat;
  let K = $ - 1 - f.padInfo.top, Y = E - 1 - f.padInfo.left, Z = h === "channelsLast", te = m.strides[0], ee = Z ? m.strides[1] : m.strides[2], se = Z ? m.strides[2] : 1, ne = Z ? 1 : m.strides[1], oe = d[0], re = Z ? d[1] : d[2], le = Z ? d[2] : 1, me = Z ? 1 : d[1];
  for (let ke = 0; ke < S; ++ke)
    for (let Se = 0; Se < A; ++Se)
      for (let Ee = 0; Ee < P; ++Ee) {
        let Pe = Ee - K, Xe = Math.max(0, Math.ceil(Pe / W)), Je = Math.min(T, ($ + Pe) / W);
        for (let Ye = 0; Ye < R; ++Ye) {
          let tt = Ye - Y, Ce = Math.max(0, Math.ceil(tt / q)), ut = Math.min(z, (E + tt) / q), rt = 0;
          for (let Nt = Xe; Nt < Je; ++Nt) {
            let Sn = Nt * W - Pe;
            for (let Et = Ce; Et < ut; ++Et) {
              let Jt = Et * q - tt, Cn = oe * ke + re * Nt + le * Et, Nn = v * ($ - 1 - Sn) + x * (E - 1 - Jt) + k * Se;
              for (let Xt = 0; Xt < F; ++Xt) {
                let Dn = b[Cn + me * Xt], en = y[Nn + Xt];
                rt += Dn * en;
              }
            }
          }
          let Zt = te * ke + ee * Ee + se * Ye + ne * Se;
          g[Zt] = rt;
        }
      }
  return n.makeTensorInfo(m.shape, m.dtype, m.values);
}
var OH = { kernelName: Aa, backendName: "cpu", kernelFunc: FH };
function PH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a } = t, { strides: i, pad: o, dilations: u } = s;
  be([r, a], "conv3d");
  let l = C.computeConv3DInfo(r.shape, a.shape, i, u, o), { filterDepth: c, filterHeight: p, filterWidth: d, dilationDepth: h, dilationHeight: f, dilationWidth: m, padInfo: g } = l, b = g.front, y = g.left, v = g.top, x = new Vt(l.outShape, r.dtype), k = n.data.get(r.dataId).values, S = n.data.get(a.dataId).values, $ = x.values, E = w.computeStrides(r.shape), A = w.computeStrides(a.shape);
  for (let P = 0; P < l.batchSize; ++P) {
    let R = P * E[0], F = P * x.strides[0];
    for (let T = 0; T < l.outDepth; ++T) {
      let z = F + T * x.strides[1], W = T * l.strideDepth - b;
      for (let q = 0; q < c; ++q) {
        let K = W + q * h;
        if (K < 0 || K >= l.inDepth)
          continue;
        let Y = q * A[0], Z = R + K * E[1];
        for (let te = 0; te < l.outHeight; ++te) {
          let ee = z + te * x.strides[2], se = te * l.strideHeight - v;
          for (let ne = 0; ne < p; ++ne) {
            let oe = se + ne * f;
            if (oe < 0 || oe >= l.inHeight)
              continue;
            let re = Y + ne * A[1], le = Z + oe * E[2];
            for (let me = 0; me < l.outWidth; ++me) {
              let ke = ee + me * l.outChannels, Se = me * l.strideWidth - y;
              for (let Ee = 0; Ee < d; ++Ee) {
                let Pe = Se + Ee * m;
                if (Pe < 0 || Pe >= l.inWidth)
                  continue;
                let Xe = re + Ee * A[2], Je = le + Pe * l.inChannels, Ye = Xe;
                for (let tt = 0; tt < l.inChannels; ++tt) {
                  let Ce = k[Je + tt];
                  for (let ut = 0; ut < l.outChannels; ++ut)
                    $[ke + ut] += Ce * S[Ye + ut];
                  Ye += l.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return n.makeTensorInfo(x.shape, x.dtype, x.values);
}
var zH = { kernelName: Qd, backendName: "cpu", kernelFunc: PH };
function MH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, dy: a } = t, { strides: i, pad: o, filterShape: u } = s;
  be([r, a], "conv3dBackpropFilterV2");
  let l = w.computeStrides(r.shape), c = w.computeStrides(a.shape), p = C.computeConv3DInfo(r.shape, u, i, 1, o), d = p.strideDepth, h = p.strideHeight, f = p.strideWidth, m = p.filterDepth, g = p.filterHeight, b = p.filterWidth, y = new Vt(p.filterShape, "float32"), v = y.values, [x, k, S, $] = y.strides, E = n.data.get(a.dataId).values, [A, P, R, F] = c, T = n.data.get(r.dataId).values, [z, W, q, K] = l, Y = p.padInfo.front, Z = p.padInfo.left, te = p.padInfo.top;
  for (let ee = 0; ee < m; ++ee) {
    let se = Math.max(0, Math.ceil((Y - ee) / d)), ne = Math.min(p.outDepth, (p.inDepth + Y - ee) / d), oe = ee * x;
    for (let re = 0; re < g; ++re) {
      let le = Math.max(0, Math.ceil((te - re) / h)), me = Math.min(p.outHeight, (p.inHeight + te - re) / h), ke = re * k + oe;
      for (let Se = 0; Se < b; ++Se) {
        let Ee = Math.max(0, Math.ceil((Z - Se) / f)), Pe = Math.min(p.outWidth, (p.inWidth + Z - Se) / f), Xe = Se * S + ke;
        for (let Je = 0; Je < p.inChannels; ++Je) {
          let Ye = Je * $ + Xe;
          for (let tt = 0; tt < p.outChannels; ++tt) {
            let Ce = 0;
            for (let ut = 0; ut < p.batchSize; ++ut) {
              let rt = ut * z, Zt = ut * A;
              for (let Nt = se; Nt < ne; ++Nt) {
                let Et = (ee + Nt * d - Y) * W + rt, Jt = Nt * P + Zt;
                for (let Cn = le; Cn < me; ++Cn) {
                  let Xt = (re + Cn * h - te) * q + Et, Dn = Cn * R + Jt;
                  for (let en = Ee; en < Pe; ++en) {
                    let Ls = (Se + en * f - Z) * K + Xt, Si = en * F + Dn;
                    Ce += T[Ls + Je] * E[Si + tt];
                  }
                }
              }
            }
            v[Ye + tt] = Ce;
          }
        }
      }
    }
  }
  return n.makeTensorInfo(y.shape, y.dtype, y.values);
}
var LH = { kernelName: hg, backendName: "cpu", kernelFunc: MH };
function BH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, filter: a } = t, { pad: i, strides: o, inputShape: u } = s;
  be([r], "conv3dBackpropInputV2");
  let l = w.computeStrides(r.shape), c = w.computeStrides(a.shape), p = C.computeConv3DInfo(u, a.shape, o, 1, i), d = new Vt(p.inShape, "float32"), h = d.values, [f, m, g, b] = d.strides, y = n.data.get(r.dataId).values, [v, x, k, S] = l, $ = n.data.get(a.dataId).values, [E, A, P, R] = c, { batchSize: F, filterDepth: T, filterHeight: z, filterWidth: W, inChannels: q, inDepth: K, inHeight: Y, inWidth: Z, outChannels: te, outDepth: ee, outHeight: se, outWidth: ne, strideDepth: oe, strideHeight: re, strideWidth: le } = p, me = T - 1 - p.padInfo.front, ke = z - 1 - p.padInfo.top, Se = W - 1 - p.padInfo.left;
  for (let Ee = 0; Ee < F; ++Ee)
    for (let Pe = 0; Pe < q; ++Pe)
      for (let Xe = 0; Xe < K; ++Xe) {
        let Je = Xe - me, Ye = Math.max(0, Math.ceil(Je / oe)), tt = Math.min(ee, (T + Je) / oe);
        for (let Ce = 0; Ce < Y; ++Ce) {
          let ut = Ce - ke, rt = Math.max(0, Math.ceil(ut / re)), Zt = Math.min(se, (z + ut) / re);
          for (let Nt = 0; Nt < Z; ++Nt) {
            let Sn = Nt - Se, Et = Math.max(0, Math.ceil(Sn / le)), Jt = Math.min(ne, (W + Sn) / le), Cn = 0;
            for (let Nn = Ye; Nn < tt; ++Nn) {
              let Xt = Nn * oe - Je;
              for (let Dn = rt; Dn < Zt; ++Dn) {
                let en = Dn * re - ut;
                for (let Ms = Et; Ms < Jt; ++Ms) {
                  let Ls = Ms * le - Sn, Si = v * Ee + x * Nn + k * Dn + S * Ms, er = E * (T - 1 - Xt) + A * (z - 1 - en) + P * (W - 1 - Ls) + R * Pe;
                  for (let Bs = 0; Bs < te; ++Bs) {
                    let hu = y[Si + Bs], Ci = $[er + Bs];
                    Cn += hu * Ci;
                  }
                }
              }
            }
            h[f * Ee + m * Xe + g * Ce + b * Nt + Pe] = Cn;
          }
        }
      }
  return n.makeTensorInfo(d.shape, d.dtype, d.values);
}
var VH = { kernelName: fg, backendName: "cpu", kernelFunc: BH };
var WH = st(Ea, (e) => Math.cos(e));
var UH = { kernelName: Ea, backendName: "cpu", kernelFunc: WH };
var GH = st(Ra, (e) => Math.cosh(e));
var HH = { kernelName: Ra, backendName: "cpu", kernelFunc: GH };
function qH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { image: r, boxes: a, boxInd: i } = t, { cropSize: o, method: u, extrapolationValue: l } = s, [c, p, d, h] = r.shape, f = a.shape[0], [m, g] = o, b = De([f, m, g, h], "float32"), y = n.data.get(a.dataId).values, v = n.data.get(i.dataId).values, x = n.data.get(r.dataId).values, k = w.computeStrides(r.shape), S = w.computeStrides(b.shape);
  for (let $ = 0; $ < f; $++) {
    let E = $ * 4, A = y[E], P = y[E + 1], R = y[E + 2], F = y[E + 3], T = v[$];
    if (T >= c)
      continue;
    let z = m > 1 ? (R - A) * (p - 1) / (m - 1) : 0, W = g > 1 ? (F - P) * (d - 1) / (g - 1) : 0;
    for (let q = 0; q < m; q++) {
      let K = m > 1 ? A * (p - 1) + q * z : 0.5 * (A + R) * (p - 1);
      if (K < 0 || K > p - 1) {
        for (let Y = 0; Y < g; Y++)
          for (let Z = 0; Z < h; Z++) {
            let te = Z + Y * S[2] + q * S[1] + $ * S[0];
            b.values[te] = l;
          }
        continue;
      }
      if (u === "bilinear") {
        let Y = Math.floor(K), Z = Math.ceil(K), te = K - Y;
        for (let ee = 0; ee < g; ee++) {
          let se = g > 1 ? P * (d - 1) + ee * W : 0.5 * (P + F) * (d - 1);
          if (se < 0 || se > d - 1) {
            for (let le = 0; le < h; le++) {
              let me = le + ee * S[2] + q * S[1] + $ * S[0];
              b.values[me] = l;
            }
            continue;
          }
          let ne = Math.floor(se), oe = Math.ceil(se), re = se - ne;
          for (let le = 0; le < h; le++) {
            let me = le + ne * k[2] + Y * k[1] + T * k[0], ke = x[me];
            me = le + oe * k[2] + Y * k[1] + T * k[0];
            let Se = x[me];
            me = le + ne * k[2] + Z * k[1] + T * k[0];
            let Ee = x[me];
            me = le + oe * k[2] + Z * k[1] + T * k[0];
            let Pe = x[me], Xe = ke + (Se - ke) * re, Je = Ee + (Pe - Ee) * re;
            me = le + ee * S[2] + q * S[1] + $ * S[0], b.values[me] = Xe + (Je - Xe) * te;
          }
        }
      } else
        for (let Y = 0; Y < g; ++Y) {
          let Z = g > 1 ? P * (d - 1) + Y * W : 0.5 * (P + F) * (d - 1);
          if (Z < 0 || Z > d - 1) {
            for (let se = 0; se < h; se++) {
              let ne = se + Y * S[2] + q * S[1] + $ * S[0];
              b.values[ne] = l;
            }
            continue;
          }
          let te = Math.round(Z), ee = Math.round(K);
          for (let se = 0; se < h; se++) {
            let ne = se + te * k[2] + ee * k[1] + T * k[0], oe = se + Y * S[2] + q * S[1] + $ * S[0];
            b.values[oe] = x[ne];
          }
        }
    }
  }
  return n.makeTensorInfo(b.shape, b.dtype, b.values);
}
var jH = { kernelName: ho, backendName: "cpu", kernelFunc: qH };
function KH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, exclusive: i, reverse: o } = s;
  be(r, "cumprod");
  let u = C.getAxesPermutation([a], r.shape.length), l = r;
  u != null && (l = wn({ inputs: { x: r }, backend: n, attrs: { perm: u } }));
  let c = C.getInnerMostAxes(1, r.shape.length)[0];
  if (c !== l.shape.length - 1)
    throw new Error(`backend.cumprod in CPU expects an inner-most axis=${l.shape.length - 1} but got axis=${c}`);
  let p = ln(l.dtype, "int32"), d = w.makeOnesTypedArray(w.sizeFromShape(l.shape), p), h = n.data.get(l.dataId).values, f = l.shape[l.shape.length - 1], m = o ? (b, y) => b + f - y - 1 : (b, y) => b + y;
  for (let b = 0; b < h.length; b += f)
    for (let y = 0; y < f; y++) {
      let v = m(b, y);
      if (y === 0)
        d[v] = i ? 1 : h[v];
      else {
        let x = m(b, y - 1);
        d[v] = i ? h[x] * d[x] : h[v] * d[x];
      }
    }
  let g = n.makeTensorInfo(l.shape, p, d);
  if (u != null) {
    let b = C.getUndoAxesPermutation(u), y = wn({ inputs: { x: g }, backend: n, attrs: { perm: b } });
    return n.disposeIntermediateTensorInfo(g), n.disposeIntermediateTensorInfo(l), y;
  }
  return g;
}
var XH = { kernelName: po, backendName: "cpu", kernelFunc: KH };
function YH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, exclusive: i, reverse: o } = s;
  be(r, "cumsum");
  let u = C.getAxesPermutation([a], r.shape.length), l = r;
  u != null && (l = wn({ inputs: { x: r }, backend: n, attrs: { perm: u } }));
  let c = C.getInnerMostAxes(1, r.shape.length)[0];
  if (c !== l.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length - 1} but got axis=${c}`);
  let p = ln(l.dtype, "int32"), d = w.makeZerosTypedArray(w.sizeFromShape(l.shape), p), h = n.data.get(l.dataId).values, f = l.shape[l.shape.length - 1], m = o ? (b, y) => b + f - y - 1 : (b, y) => b + y;
  for (let b = 0; b < h.length; b += f)
    for (let y = 0; y < f; y++) {
      let v = m(b, y);
      if (y === 0)
        d[v] = i ? 0 : h[v];
      else {
        let x = m(b, y - 1);
        d[v] = i ? h[x] + d[x] : h[v] + d[x];
      }
    }
  let g = n.makeTensorInfo(l.shape, p, d);
  if (u != null) {
    let b = C.getUndoAxesPermutation(u), y = wn({ inputs: { x: g }, backend: n, attrs: { perm: b } });
    return n.disposeIntermediateTensorInfo(g), n.disposeIntermediateTensorInfo(l), y;
  }
  return g;
}
var QH = { kernelName: Da, backendName: "cpu", kernelFunc: YH };
function ZH(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, weights: a } = t, { size: i, binaryOutput: o } = s;
  if (r.shape.length === 1) {
    let u = n.data.get(r.dataId).values, l = n.data.get(a.dataId).values, c = nv(u, l, a.dtype, a.shape, i);
    return n.makeTensorInfo([i], a.dtype, c);
  } else if (r.shape.length === 2) {
    let u = n.bufferSync(r), l = n.bufferSync(a), c = KS(u, l, i, o);
    return n.makeTensorInfo(c.shape, a.dtype, c.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
var JH = { kernelName: mg, backendName: "cpu", kernelFunc: ZH };
function eq(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockSize: a, dataFormat: i } = s;
  w.assert(i === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);
  let o = r.shape[0], u = r.shape[1], l = r.shape[2], c = r.shape[3], p = u * a, d = l * a, h = c / (a * a), f = n.data.get(r.dataId).values, m = new Float32Array(o * p * d * h), g = 0;
  for (let b = 0; b < o; ++b)
    for (let y = 0; y < p; ++y) {
      let v = Math.floor(y / a), x = y % a;
      for (let k = 0; k < d; ++k) {
        let S = Math.floor(k / a), $ = k % a, E = (x * a + $) * h;
        for (let A = 0; A < h; ++A) {
          let R = A + E + c * (S + l * (v + u * b));
          m[g++] = f[R];
        }
      }
    }
  return n.makeTensorInfo([o, p, d, h], r.dtype, m);
}
var tq = { kernelName: fo, backendName: "cpu", kernelFunc: eq };
function LC(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a } = t, { strides: i, pad: o, dilations: u, dimRoundingMode: l } = s;
  be([r, a], "depthwiseConv2DNative");
  let c = w.computeStrides(r.shape), p = w.computeStrides(a.shape), d = u;
  d == null && (d = [1, 1]), w.assert(C.eitherStridesOrDilationsAreOne(i, d), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`);
  let h = C.computeConv2DInfo(r.shape, a.shape, i, d, o, l, true), { filterHeight: f, filterWidth: m, dilationHeight: g, dilationWidth: b, padInfo: y } = h, v = y.left, x = y.top, k = h.outChannels / h.inChannels, S = new Vt(h.outShape, r.dtype), $ = n.data.get(r.dataId).values, E = n.data.get(a.dataId).values, A = S.values;
  for (let P = 0; P < h.batchSize; ++P) {
    let R = P * c[0], F = P * S.strides[0];
    for (let T = 0; T < h.outHeight; ++T) {
      let z = F + T * S.strides[1], W = T * h.strideHeight - x;
      for (let q = 0; q < f; ++q) {
        let K = W + q * g;
        if (K < 0 || K >= h.inHeight)
          continue;
        let Y = q * p[0], Z = R + K * c[1];
        for (let te = 0; te < h.outWidth; ++te) {
          let ee = z + te * S.strides[2], se = te * h.strideWidth - v;
          for (let ne = 0; ne < m; ++ne) {
            let oe = se + ne * b;
            if (oe < 0 || oe >= h.inWidth)
              continue;
            let re = Y + ne * p[1], le = Z + oe * h.inChannels, me = ee, ke = re;
            for (let Se = 0; Se < h.inChannels; ++Se) {
              let Ee = $[le + Se];
              for (let Pe = 0; Pe < k; ++Pe)
                A[me + Pe] += Ee * E[ke + Pe];
              me += k, ke += k;
            }
          }
        }
      }
    }
  }
  return n.makeTensorInfo(S.shape, S.dtype, S.values);
}
var nq = { kernelName: Fa, backendName: "cpu", kernelFunc: LC };
function sq(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, dy: a } = t, { strides: i, dilations: o, pad: u, dimRoundingMode: l, filterShape: c } = s;
  be([r, a], "depthwiseConv2dNativeBackpropFilter");
  let p = C.computeConv2DInfo(r.shape, c, i, o, u, l, true), { strideHeight: d, strideWidth: h, filterHeight: f, filterWidth: m } = p, g = new Vt(p.filterShape, "float32"), b = p.padInfo.left, y = p.padInfo.top, v = p.outChannels / p.inChannels, x = n.data.get(r.dataId).values, k = new Vt(r.shape, r.dtype, x), S = n.data.get(a.dataId).values, $ = new Vt(a.shape, a.dtype, S);
  for (let E = 0; E < f; ++E) {
    let A = Math.max(0, Math.ceil((y - E) / d)), P = Math.min(p.outHeight, (p.inHeight + y - E) / d);
    for (let R = 0; R < m; ++R) {
      let F = Math.max(0, Math.ceil((b - R) / h)), T = Math.min(p.outWidth, (p.inWidth + b - R) / h);
      for (let z = 0; z < p.outChannels; ++z) {
        let W = Math.trunc(z / v), q = z % v, K = 0;
        for (let Y = 0; Y < p.batchSize; ++Y)
          for (let Z = A; Z < P; ++Z) {
            let te = E + Z * d - y;
            for (let ee = F; ee < T; ++ee) {
              let se = R + ee * h - b;
              K += k.get(Y, te, se, W) * $.get(Y, Z, ee, z);
            }
          }
        g.set(K, E, R, W, q);
      }
    }
  }
  return n.makeTensorInfo(g.shape, g.dtype, g.values);
}
var rq = { kernelName: gg, backendName: "cpu", kernelFunc: sq };
function aq(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, filter: a } = t, { strides: i, dilations: o, pad: u, dimRoundingMode: l, inputShape: c } = s;
  be([r, a], "depthwiseConv2DNativeBackpropInput");
  let p = w.computeStrides(r.shape), d = w.computeStrides(a.shape), h = C.computeConv2DInfo(c, a.shape, i, o, u, l, true), f = new Vt(h.inShape, "float32"), m = f.values, [g, b, y] = f.strides, v = n.data.get(r.dataId).values, [x, k, S] = p, $ = n.data.get(a.dataId).values, [E, A, P] = d, { batchSize: R, filterHeight: F, filterWidth: T, inChannels: z, inHeight: W, inWidth: q, outChannels: K, outHeight: Y, outWidth: Z, strideHeight: te, strideWidth: ee } = h, se = F - 1 - h.padInfo.top, ne = T - 1 - h.padInfo.left, oe = K / z;
  for (let re = 0; re < R; ++re)
    for (let le = 0; le < z; ++le)
      for (let me = 0; me < W; ++me) {
        let ke = me - se, Se = Math.max(0, Math.ceil(ke / te)), Ee = Math.min(Y, (F + ke) / te);
        for (let Pe = 0; Pe < q; ++Pe) {
          let Xe = Pe - ne, Je = Math.max(0, Math.ceil(Xe / ee)), Ye = Math.min(Z, (T + Xe) / ee), tt = 0;
          for (let Ce = Se; Ce < Ee; ++Ce) {
            let ut = Ce * te - ke;
            for (let rt = Je; rt < Ye; ++rt) {
              let Zt = rt * ee - Xe, Nt = x * re + k * Ce + S * rt, Sn = E * (F - 1 - ut) + A * (T - 1 - Zt) + P * le;
              for (let Et = 0; Et < oe; ++Et) {
                let Jt = le * oe + Et, Cn = v[Nt + Jt], Nn = $[Sn + Et];
                tt += Cn * Nn;
              }
            }
          }
          m[g * re + b * me + y * Pe + le] = tt;
        }
      }
  return n.makeTensorInfo(f.shape, f.dtype, f.values);
}
var iq = { kernelName: bg, backendName: "cpu", kernelFunc: aq };
function oq(e) {
  let { inputs: t, backend: n } = e, { x: s } = t, r = w.sizeFromShape(s.shape), a = n.data.get(s.dataId).values, i = De([r, r], s.dtype), o = i.values;
  for (let l = 0; l < a.length; l++)
    o[l * r + l] = a[l];
  let u = [...s.shape, ...s.shape];
  return n.makeTensorInfo(u, i.dtype, i.values);
}
var uq = { kernelName: yg, backendName: "cpu", kernelFunc: oq };
var lq = { kernelName: Zd, backendName: "cpu", kernelFunc: ({ inputs: e, backend: t, attrs: n }) => {
  let { x: s, filter: r } = e, { strides: a, pad: i, dilations: o } = n, u = t, l = u.data.get(s.dataId).values, c = s.shape.length, p = u.data.get(r.dataId).values, d = r.shape.length, { batchSize: h, inHeight: f, inWidth: m, inChannels: g, outHeight: b, outWidth: y, padInfo: v, strideHeight: x, strideWidth: k, filterHeight: S, filterWidth: $, dilationHeight: E, dilationWidth: A, outShape: P } = C.computeDilation2DInfo(s.shape, r.shape, a, i, "NHWC", o), R = w.sizeFromShape(P), F = P.length, T = w.getArrayFromDType(s.dtype, R);
  for (let W = 0; W < h; ++W)
    for (let q = 0; q < b; ++q) {
      let K = q * x - v.top;
      for (let Y = 0; Y < y; ++Y) {
        let Z = Y * k - v.left;
        for (let te = 0; te < g; ++te) {
          let ee = Number.MIN_SAFE_INTEGER;
          for (let ne = 0; ne < S; ++ne) {
            let oe = K + ne * E;
            if (oe >= 0 && oe < f)
              for (let re = 0; re < $; ++re) {
                let le = Z + re * A;
                if (le >= 0 && le < m) {
                  let me = w.locToIndex([W, oe, le, te], c, w.computeStrides(s.shape)), ke = w.locToIndex([ne, re, te], d, w.computeStrides(r.shape)), Se = l[me] + p[ke];
                  Se > ee && (ee = Se);
                }
              }
          }
          let se = w.locToIndex([W, q, Y, te], F, w.computeStrides(P));
          T[se] = ee;
        }
      }
    }
  return { dataId: u.write(w.toTypedArray(T, s.dtype), P, s.dtype), shape: P, dtype: s.dtype };
} };
var cq = { kernelName: Zf, backendName: "cpu", kernelFunc: ({ inputs: e, backend: t, attrs: n }) => {
  let { x: s, filter: r, dy: a } = e, { strides: i, pad: o, dilations: u } = n, l = t, c = w.toNestedArray(s.shape, l.data.get(s.dataId).values), p = w.toNestedArray(r.shape, l.data.get(r.dataId).values), { batchSize: d, inHeight: h, inWidth: f, inChannels: m, outHeight: g, outWidth: b, padInfo: y, strideHeight: v, strideWidth: x, filterHeight: k, filterWidth: S, dilationHeight: $, dilationWidth: E, outShape: A } = C.computeDilation2DInfo(s.shape, r.shape, i, o, "NHWC", u);
  w.assert(a.rank === A.length, () => `Error in ${Zf}, dy must have the same rank as output ${A.length}, but got ${a.rank}`);
  let P = w.toNestedArray(A, l.data.get(a.dataId).values), R = w.makeZerosNestedTypedArray(r.shape, r.dtype);
  for (let T = 0; T < d; ++T)
    for (let z = 0; z < g; ++z) {
      let W = z * v - y.top;
      for (let q = 0; q < b; ++q) {
        let K = q * x - y.left;
        for (let Y = 0; Y < m; ++Y) {
          let Z = Number.MIN_SAFE_INTEGER, te = 0, ee = 0;
          for (let se = 0; se < k; ++se) {
            let ne = W + se * $;
            if (ne >= 0 && ne < h)
              for (let oe = 0; oe < S; ++oe) {
                let re = K + oe * E;
                if (re >= 0 && re < f) {
                  let le = c[T][ne][re][Y] + p[se][oe][Y];
                  le > Z && (Z = le, te = se, ee = oe);
                }
              }
          }
          R[te][ee][Y] += P[T][z][q][Y];
        }
      }
    }
  return { dataId: l.write(w.toTypedArray(R, s.dtype), r.shape, r.dtype), shape: r.shape, dtype: r.dtype };
} };
var dq = { kernelName: Qf, backendName: "cpu", kernelFunc: ({ inputs: e, backend: t, attrs: n }) => {
  let { x: s, filter: r, dy: a } = e, { strides: i, pad: o, dilations: u } = n, l = t, c = w.toNestedArray(s.shape, l.data.get(s.dataId).values), p = w.toNestedArray(r.shape, l.data.get(r.dataId).values), { batchSize: d, inHeight: h, inWidth: f, inChannels: m, outHeight: g, outWidth: b, padInfo: y, strideHeight: v, strideWidth: x, filterHeight: k, filterWidth: S, dilationHeight: $, dilationWidth: E, outShape: A } = C.computeDilation2DInfo(s.shape, r.shape, i, o, "NHWC", u);
  w.assert(a.rank === A.length, () => `Error in ${Qf}, dy must have the same rank as output ${A.length}, but got ${a.rank}`);
  let P = w.toNestedArray(A, l.data.get(a.dataId).values), R = w.makeZerosNestedTypedArray(s.shape, s.dtype);
  for (let T = 0; T < d; ++T)
    for (let z = 0; z < g; ++z) {
      let W = z * v - y.top;
      for (let q = 0; q < b; ++q) {
        let K = q * x - y.left;
        for (let Y = 0; Y < m; ++Y) {
          let Z = Number.MIN_SAFE_INTEGER, te = W < 0 ? 0 : W, ee = K < 0 ? 0 : K;
          for (let se = 0; se < k; ++se) {
            let ne = W + se * $;
            if (ne >= 0 && ne < h)
              for (let oe = 0; oe < S; ++oe) {
                let re = K + oe * E;
                if (re >= 0 && re < f) {
                  let le = c[T][ne][re][Y] + p[se][oe][Y];
                  le > Z && (Z = le, te = ne, ee = re);
                }
              }
          }
          R[T][te][ee][Y] += P[T][z][q][Y];
        }
      }
    }
  return { dataId: l.write(w.toTypedArray(R, s.dtype), s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
} };
function Xl(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s;
  be(r, "sum");
  let o;
  r.dtype === "bool" ? o = wr({ inputs: { x: r }, backend: n, attrs: { dtype: "int32" } }) : o = Os({ inputs: { x: r }, backend: n });
  let u = o.shape.length, l = w.parseAxisParam(a, o.shape), c = C.getAxesPermutation(l, u), p = l, d = o;
  c != null && (d = wn({ inputs: { x: o }, backend: n, attrs: { perm: c } }), p = C.getInnerMostAxes(p.length, u)), C.assertAxesAreInnerMostDims("sum", p, d.shape.length);
  let [h, f] = C.computeOutAndReduceShapes(d.shape, p), m = C.upcastType(d.dtype, "int32"), g = Od(n, h, m), b = w.sizeFromShape(f), y = n.data.get(g.dataId).values, v = n.data.get(d.dataId).values;
  for (let x = 0; x < y.length; ++x) {
    let k = x * b, S = 0;
    for (let $ = 0; $ < b; ++$)
      S += v[k + $];
    y[x] = S;
  }
  if (i) {
    let x = C.expandShapeToKeepDim(g.shape, l), k = g;
    g = mt({ inputs: { x: g }, backend: n, attrs: { shape: x } }), n.disposeIntermediateTensorInfo(k);
  }
  return n.disposeIntermediateTensorInfo(o), c != null && n.disposeIntermediateTensorInfo(d), g;
}
var pq = { kernelName: ci, backendName: "cpu", kernelFunc: Xl };
function hq(e) {
  let { inputs: t, backend: n, attrs: s } = e, { equation: r } = s, a = t, { allDims: i, summedDims: o, idDims: u } = C.decodeEinsumEquation(r, a.length);
  C.checkEinsumDimSizes(i.length, u, a);
  let { path: l, steps: c } = C.getEinsumComputePath(o, u), p = c.length, d = null, h = i.length, f = [];
  for (let m = 0; m < p; ++m) {
    for (let g of c[m]) {
      let { permutationIndices: b, expandDims: y } = C.getEinsumPermutation(h, u[g]), v;
      C.isIdentityPermutation(b) ? v = a[g] : (v = wn({ inputs: { x: a[g] }, backend: n, attrs: { perm: b } }), f.push(v));
      let x = v.shape.slice();
      for (let k = 0; k < y.length; ++k)
        x.splice(y[k], 0, 1);
      w.arraysEqual(v.shape, x) || (v = mt({ inputs: { x: v }, backend: n, attrs: { shape: x } }), f.push(v)), d === null ? d = v : (d = jp({ inputs: { a: v, b: d }, backend: n }), f.push(d));
    }
    m < p - 1 && (l[m] >= 0 && (d = Xl({ inputs: { x: d }, backend: n, attrs: { axis: l[m] - (i.length - h), keepDims: false } }), f.push(d)), h--);
  }
  for (let m of f)
    m !== d && n.disposeIntermediateTensorInfo(m);
  return d;
}
var fq = { kernelName: Jd, backendName: "cpu", kernelFunc: hq };
function mq(e) {
  let { inputs: t, backend: n } = e, { dy: s, y: r } = t;
  be([s, r], "eluGrad");
  let a = new Float32Array(w.sizeFromShape(r.shape)), i = n.data.get(r.dataId).values, o = n.data.get(s.dataId).values;
  for (let u = 0; u < i.length; ++u) {
    let l = i[u];
    l >= 1 ? a[u] = o[u] : a[u] = o[u] * (l + 1);
  }
  return n.makeTensorInfo(r.shape, "float32", a);
}
var gq = { kernelName: vg, backendName: "cpu", kernelFunc: mq };
var bq = C.ERF_P;
var yq = C.ERF_A1;
var vq = C.ERF_A2;
var xq = C.ERF_A3;
var wq = C.ERF_A4;
var kq = C.ERF_A5;
var Iq = st(fl, (e) => {
  let t = Math.sign(e), n = Math.abs(e), s = 1 / (1 + bq * n);
  return t * (1 - ((((kq * s + wq) * s + xq) * s + vq) * s + yq) * s * Math.exp(-n * n));
});
var Sq = { kernelName: fl, backendName: "cpu", kernelFunc: Iq };
function zd(e) {
  let { inputs: t, backend: n, attrs: s } = e, { input: r } = t, { dim: a } = s, i = r.shape.length, o = r.shape.slice(), u = a;
  return a < 0 && (w.assert(-(i + 1) <= a, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), u = i + a + 1), o.splice(u, 0, 1), mt({ inputs: { x: r }, backend: n, attrs: { shape: o } });
}
var Cq = { kernelName: go, backendName: "cpu", kernelFunc: zd };
var Nq = At((e, t) => e / t);
var dv = Gt(Oa, Nq);
var Bm = { kernelName: Oa, backendName: "cpu", kernelFunc: dv };
function BC(e, t, n) {
  let s = e.shape, r = s[0], a = s[1], i = n.data.get(e.dataId), o = i.complexTensorInfos.real, u = i.complexTensorInfos.imag, l = [r, a], c = w.sizeFromShape(l), p = w.getTypedArrayFromDType("float32", c), d = w.getTypedArrayFromDType("float32", c);
  for (let g = 0; g < r; g++) {
    let b = ba({ inputs: { x: o }, backend: n, attrs: { begin: [g, 0], size: [1, a] } }), y = ba({ inputs: { x: u }, backend: n, attrs: { begin: [g, 0], size: [1, a] } }), v = En({ inputs: { real: b, imag: y }, backend: n }), { real: x, imag: k } = Tq(v, t, n), S = C.mergeRealAndImagArrays(x, k);
    for (let $ = 0; $ < a; $++) {
      let E = C.getComplexWithIndex(S, $);
      p[g * a + $] = E.real, d[g * a + $] = E.imag;
    }
    n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(y), n.disposeIntermediateTensorInfo(v);
  }
  let h = n.makeTensorInfo(l, "float32", p), f = n.makeTensorInfo(l, "float32", d), m = En({ inputs: { real: h, imag: f }, backend: n });
  return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(f), m;
}
function Tq(e, t, n) {
  let s = w.sizeFromShape(e.shape), r = n.data.get(e.dataId), a = n.data.get(r.complexTensorInfos.real.dataId).values, i = n.data.get(r.complexTensorInfos.imag.dataId).values;
  if ($q(s)) {
    let o = Vm(a, i, s, t, n), u = [e.shape[0], e.shape[1]];
    if (t) {
      let l = n.makeTensorInfo(u, "float32", o.real), c = n.makeTensorInfo(u, "float32", o.imag), p = n.makeTensorInfo([], "float32", w.createScalarValue(s, "float32")), d = Os({ inputs: { x: p }, backend: n }), h = Bm.kernelFunc({ inputs: { a: l, b: p }, backend: n }), f = Bm.kernelFunc({ inputs: { a: c, b: d }, backend: n }), m = n.data.get(h.dataId).values, g = n.data.get(f.dataId).values;
      return n.disposeIntermediateTensorInfo(l), n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(f), { real: m, imag: g };
    }
    return o;
  } else {
    let o = C.mergeRealAndImagArrays(a, i), u = _q(o, s, t);
    return C.splitRealAndImagArrays(u);
  }
}
function $q(e) {
  return (e & e - 1) === 0;
}
function Vm(e, t, n, s, r) {
  if (n === 1)
    return { real: e, imag: t };
  let a = C.mergeRealAndImagArrays(e, t), i = n / 2, o = C.complexWithEvenIndex(a), u = o.real, l = o.imag, c = [u.length], p = r.makeTensorInfo(c, "float32", u), d = r.makeTensorInfo(c, "float32", l), h = En({ inputs: { real: p, imag: d }, backend: r }), f = C.complexWithOddIndex(a), m = f.real, g = f.imag, b = [m.length], y = r.makeTensorInfo(b, "float32", m), v = r.makeTensorInfo(b, "float32", g), x = En({ inputs: { real: y, imag: v }, backend: r }), k = Vm(u, l, i, s, r), S = k.real, $ = k.imag, E = [S.length], A = r.makeTensorInfo(E, "float32", S), P = r.makeTensorInfo(E, "float32", $), R = En({ inputs: { real: A, imag: P }, backend: r }), F = Vm(m, g, i, s, r), T = F.real, z = F.imag, W = [T.length], q = r.makeTensorInfo(W, "float32", T), K = r.makeTensorInfo(W, "float32", z), Y = En({ inputs: { real: q, imag: K }, backend: r }), Z = C.exponents(n, s), te = [Z.real.length], ee = r.makeTensorInfo(te, "float32", Z.real), se = r.makeTensorInfo(te, "float32", Z.imag), ne = En({ inputs: { real: ee, imag: se }, backend: r }), oe = jp({ inputs: { a: ne, b: Y }, backend: r }), re = Kl({ inputs: { a: R, b: oe }, backend: r }), le = uv({ inputs: { a: R, b: oe }, backend: r }), me = ga({ inputs: { input: re }, backend: r }), ke = ga({ inputs: { input: le }, backend: r }), Se = ro({ inputs: { input: re }, backend: r }), Ee = ro({ inputs: { input: le }, backend: r }), Pe = ao({ inputs: [me, ke], backend: r, attrs: { axis: 0 } }), Xe = ao({ inputs: [Se, Ee], backend: r, attrs: { axis: 0 } }), Je = r.data.get(Pe.dataId).values, Ye = r.data.get(Xe.dataId).values;
  return r.disposeIntermediateTensorInfo(p), r.disposeIntermediateTensorInfo(d), r.disposeIntermediateTensorInfo(h), r.disposeIntermediateTensorInfo(y), r.disposeIntermediateTensorInfo(v), r.disposeIntermediateTensorInfo(x), r.disposeIntermediateTensorInfo(A), r.disposeIntermediateTensorInfo(P), r.disposeIntermediateTensorInfo(R), r.disposeIntermediateTensorInfo(q), r.disposeIntermediateTensorInfo(K), r.disposeIntermediateTensorInfo(Y), r.disposeIntermediateTensorInfo(ee), r.disposeIntermediateTensorInfo(se), r.disposeIntermediateTensorInfo(ne), r.disposeIntermediateTensorInfo(oe), r.disposeIntermediateTensorInfo(re), r.disposeIntermediateTensorInfo(le), r.disposeIntermediateTensorInfo(me), r.disposeIntermediateTensorInfo(Se), r.disposeIntermediateTensorInfo(ke), r.disposeIntermediateTensorInfo(Ee), r.disposeIntermediateTensorInfo(Pe), r.disposeIntermediateTensorInfo(Xe), { real: Je, imag: Ye };
}
function _q(e, t, n) {
  let s = new Float32Array(t * 2);
  for (let r = 0; r < t; r++) {
    let a = 0, i = 0;
    for (let o = 0; o < t; o++) {
      let u = C.exponent(r * o, t, n), l = C.getComplexWithIndex(e, o);
      a += l.real * u.real - l.imag * u.imag, i += l.real * u.imag + l.imag * u.real;
    }
    n && (a /= t, i /= t), C.assignToTypedArray(s, a, i, r);
  }
  return s;
}
function Aq(e) {
  let { inputs: t, backend: n } = e, { input: s } = t, r = w.sizeFromShape(s.shape), a = s.shape[s.shape.length - 1], i = r / a, o = mt({ inputs: { x: s }, backend: n, attrs: { shape: [i, a] } }), u = BC(o, false, n), l = mt({ inputs: { x: u }, backend: n, attrs: { shape: s.shape } });
  return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(u), l;
}
var Eq = { kernelName: xg, backendName: "cpu", kernelFunc: Aq };
function pv(e) {
  let { backend: t, attrs: n } = e, { shape: s, value: r, dtype: a } = n, i = a || w.inferDtype(r), o = w.getArrayFromDType(i, w.sizeFromShape(s));
  return Dq(o, r, i), t.makeTensorInfo(s, i, o);
}
var Rq = { kernelName: ml, backendName: "cpu", kernelFunc: pv };
function Dq(e, t, n) {
  e.fill(t);
}
var Fq = { kernelName: yo, backendName: "cpu", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
  let { image: s } = e, r = n, a = w.getTypedArrayFromDType(s.dtype, w.sizeFromShape(s.shape)), [i, o, u, l] = s.shape, c = r.data.get(s.dataId).values;
  for (let d = 0; d < i; d++) {
    let h = d * u * o * l;
    for (let f = 0; f < o; f++) {
      let m = f * (u * l);
      for (let g = 0; g < u; g++) {
        let b = g * l;
        for (let y = 0; y < l; y++) {
          let v = Math.round(u - g - 1), x = h + m + b + y, k = c[x];
          if (v >= 0 && v < u) {
            let S = v * l, $ = h + m + S + y;
            k = c[$];
          }
          a[x] = k;
        }
      }
    }
  }
  return { dataId: r.write(a, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
} };
var Oq = At((e, t) => Math.floor(e / t));
var Pq = Gt(La, Oq, null, "int32");
var zq = { kernelName: La, backendName: "cpu", kernelFunc: Pq };
function Mq(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a, bias: i, preluActivationWeights: o } = t, { strides: u, pad: l, dataFormat: c, dilations: p, dimRoundingMode: d, activation: h, leakyreluAlpha: f } = s, m = MC({ inputs: { x: r, filter: a }, backend: n, attrs: { strides: u, pad: l, dataFormat: c, dilations: p, dimRoundingMode: d } });
  if (i) {
    let g = m;
    m = Kl({ inputs: { a: m, b: i }, backend: n }), n.disposeIntermediateTensorInfo(g);
  }
  if (h) {
    let g = m;
    m = lv(n, m, h, o, f), n.disposeIntermediateTensorInfo(g);
  }
  return m;
}
var Lq = { kernelName: ia, backendName: "cpu", kernelFunc: Mq };
function Bq(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a, bias: i, preluActivationWeights: o } = t, { strides: u, pad: l, dataFormat: c, dilations: p, dimRoundingMode: d, activation: h, leakyreluAlpha: f } = s, m = LC({ inputs: { x: r, filter: a }, backend: n, attrs: { strides: u, pad: l, dataFormat: c, dilations: p, dimRoundingMode: d } });
  if (i) {
    let g = m;
    m = Kl({ inputs: { a: m, b: i }, backend: n }), n.disposeIntermediateTensorInfo(g);
  }
  if (h) {
    let g = m;
    m = lv(n, m, h, o, f), n.disposeIntermediateTensorInfo(g);
  }
  return m;
}
var Vq = { kernelName: oa, backendName: "cpu", kernelFunc: Bq };
function Wq(e) {
  let { inputs: t, backend: n } = e, { params: s, indices: r } = t, a = w.sizeFromShape(s.shape), i = r.shape, o = i[i.length - 1], [u, l, c, p] = C.prepareAndValidate(s, r);
  if (l === 0)
    return n.makeTensorInfo(u, s.dtype, []);
  let d = n.data.get(r.dataId).values, h = n.bufferSync(s), f = nC(d, h, s.dtype, l, o, c, p, s.shape, a);
  return n.makeTensorInfo(u, s.dtype, f.values);
}
var Uq = { kernelName: xo, backendName: "cpu", kernelFunc: Wq };
function Gq(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, indices: a } = t, { axis: i, batchDims: o } = s;
  be([r, a], "gatherV2");
  let u = w.parseAxisParam(i, r.shape)[0], l = n.data.get(a.dataId).values, c = r.shape[u];
  for (let x = 0; x < l.length; ++x) {
    let k = l[x];
    w.assert(k <= c - 1 && k >= 0, () => `GatherV2: the index value ${k} is not in [0, ${c - 1}]`);
  }
  let p = o;
  o == null && (p = 0);
  let d = w.sizeFromShape(a.shape), h = C.segment_util.collectGatherOpShapeInfo(r, a, u, p), f = mt({ inputs: { x: r }, backend: n, attrs: { shape: [h.batchSize, h.outerSize, h.dimSize, h.sliceSize] } }), m = mt({ inputs: { x: a }, backend: n, attrs: { shape: [h.batchSize, d / h.batchSize] } }), g = [h.batchSize, h.outerSize, d / h.batchSize, h.sliceSize], b = n.bufferSync(m), y = n.bufferSync(f), v = sC(y, b, g);
  return n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(m), n.makeTensorInfo(h.outputShape, v.dtype, v.values);
}
var Hq = { kernelName: vo, backendName: "cpu", kernelFunc: Gq };
function qq(e) {
  let { inputs: t, backend: n } = e, { input: s } = t, r = w.sizeFromShape(s.shape), a = s.shape[s.shape.length - 1], i = r / a, o = mt({ inputs: { x: s }, backend: n, attrs: { shape: [i, a] } }), u = BC(o, true, n), l = mt({ inputs: { x: u }, backend: n, attrs: { shape: s.shape } });
  return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(u), l;
}
var jq = { kernelName: wg, backendName: "cpu", kernelFunc: qq };
var Kq = st(gl, (e) => Number.isFinite(e) ? 1 : 0, "bool");
var Xq = { kernelName: gl, backendName: "cpu", kernelFunc: Kq };
var Yq = st(bl, (e) => Math.abs(e) === 1 / 0 ? 1 : 0, "bool");
var Qq = { kernelName: bl, backendName: "cpu", kernelFunc: Yq };
var Zq = st(yl, (e) => Number.isNaN(e) ? 1 : 0, "bool");
var Jq = { kernelName: yl, backendName: "cpu", kernelFunc: Zq };
function e6(e) {
  let { backend: t, attrs: n } = e, { start: s, stop: r, num: a } = n, i = uC(s, r, a);
  return t.makeTensorInfo([i.length], "float32", i);
}
var t6 = { kernelName: kg, backendName: "cpu", kernelFunc: e6 };
var n6 = st(vl, (e) => Math.log1p(e));
var s6 = { kernelName: vl, backendName: "cpu", kernelFunc: n6 };
var r6 = At((e, t) => e && t);
var a6 = Gt(So, r6, null, "bool");
var i6 = { kernelName: So, backendName: "cpu", kernelFunc: a6 };
var o6 = st(xl, (e) => e ? 0 : 1, "bool");
var u6 = { kernelName: xl, backendName: "cpu", kernelFunc: o6 };
var l6 = At((e, t) => e || t);
var c6 = Gt(tp, l6, null, "bool");
var d6 = { kernelName: tp, backendName: "cpu", kernelFunc: c6 };
function p6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { depthRadius: a, bias: i, alpha: o, beta: u } = s;
  be(r, "LRN");
  let l = r.shape[3], c = l - 1, p = n.data.get(r.dataId).values, d = w.sizeFromShape(r.shape), h = new Float32Array(d);
  function f(m) {
    let g = m % l, b = m - g + Math.max(0, g - a), y = m - g + Math.min(g + a, c), v = 0;
    for (; b <= y; b++) {
      let x = p[b];
      v += x * x;
    }
    return v;
  }
  for (let m = 0; m < d; m++) {
    let g = f(m), b = p[m] * Math.pow(i + o * g, -u);
    h[m] = b;
  }
  return n.makeTensorInfo(r.shape, r.dtype, h);
}
var h6 = { kernelName: np, backendName: "cpu", kernelFunc: p6 };
function f6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, y: a, dy: i } = t, { depthRadius: o, bias: u, alpha: l, beta: c } = s;
  be(i, "LRNGrad");
  let p = w.sizeFromShape(i.shape), d = i.shape[3], h = n.data.get(i.dataId).values, f = n.data.get(r.dataId).values, m = n.data.get(a.dataId).values, g = new Float32Array(p), b = p;
  for (let y = 0; y < b; y++) {
    let v = y % d, x = y - v + Math.max(0, v - o), k = y - v + Math.min(d, v + o + 1), S = 0;
    for (let $ = x; $ < k; $++)
      S += Math.pow(f[$], 2);
    S = l * S + u;
    for (let $ = x; $ < k; $++) {
      let E = -2 * l * c * f[$] * m[y] / S;
      y === $ && (E += Math.pow(S, -c)), E *= h[y], g[$] += E;
    }
  }
  return n.makeTensorInfo(i.shape, r.dtype, g);
}
var m6 = { kernelName: Ig, backendName: "cpu", kernelFunc: f6 };
function VC(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { reductionIndices: a, keepDims: i } = s, o = n, u = r.shape, l = u.length, c = w.parseAxisParam(a, u), p = c, d = C.getAxesPermutation(p, l), h = o.data.get(r.dataId).values;
  if (d != null) {
    let x = new Array(l);
    for (let k = 0; k < x.length; k++)
      x[k] = u[d[k]];
    h = av(h, u, r.dtype, d, x), p = C.getInnerMostAxes(p.length, l), u = x;
  }
  be(r, "max"), C.assertAxesAreInnerMostDims("max", p, l);
  let [f, m] = C.computeOutAndReduceShapes(u, p), g = w.sizeFromShape(m), b = cC(h, g, f, r.dtype), y = o.write(b, f, r.dtype), v = f;
  return i && (v = C.expandShapeToKeepDim(f, c)), { dataId: y, shape: v, dtype: r.dtype };
}
var g6 = { kernelName: Ha, backendName: "cpu", kernelFunc: VC };
function b6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t;
  be(r, "maxPool");
  let { filterSize: a, strides: i, pad: o, dimRoundingMode: u } = s, l = 1;
  w.assert(C.eitherStridesOrDilationsAreOne(i, l), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${l}'`);
  let c = C.computePool2DInfo(r.shape, a, i, l, o, u), p;
  if (c.filterWidth === 1 && c.filterHeight === 1 && w.arraysEqual(c.inShape, c.outShape))
    p = Os({ inputs: { x: r }, backend: n });
  else {
    let d = n.data.get(r.dataId).values, h = w.computeStrides(r.shape), f = cv(d, r.shape, r.dtype, h, c, "max");
    p = n.makeTensorInfo(c.outShape, r.dtype, f.values);
  }
  return p;
}
var y6 = { kernelName: ja, backendName: "cpu", kernelFunc: b6 };
function v6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { filterSize: a, strides: i, pad: o, dimRoundingMode: u, dataFormat: l } = s;
  be(r, "maxPool3d");
  let c = C.computePool3DInfo(r.shape, a, i, 1, o, u, l), p = n.data.get(r.dataId).values, d = zC(p, r.shape, r.dtype, w.computeStrides(r.shape), c, "max");
  return n.makeTensorInfo(d.shape, "float32", d.values);
}
var x6 = { kernelName: sp, backendName: "cpu", kernelFunc: v6 };
function w6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, input: a } = t, { filterSize: i, strides: o, pad: u, dimRoundingMode: l } = s;
  be([r, a], "maxPool3DGrad");
  let c = C.computePool3DInfo(a.shape, i, o, 1, u, l), p = n.bufferSync(a), d = uH(p, c), h = c.strideDepth, f = c.strideHeight, m = c.strideWidth, g = c.dilationDepth, b = c.dilationHeight, y = c.dilationWidth, v = c.effectiveFilterDepth, x = c.effectiveFilterHeight, k = c.effectiveFilterWidth, S = v - 1 - c.padInfo.front, $ = k - 1 - c.padInfo.left, E = x - 1 - c.padInfo.top, A = De(a.shape, "float32"), P = n.bufferSync(r);
  for (let R = 0; R < c.batchSize; ++R)
    for (let F = 0; F < c.inChannels; ++F)
      for (let T = 0; T < c.inDepth; ++T)
        for (let z = 0; z < c.inHeight; ++z)
          for (let W = 0; W < c.inWidth; ++W) {
            let q = T - S, K = z - E, Y = W - $, Z = 0;
            for (let te = 0; te < v; te += g) {
              let ee = (q + te) / h;
              if (!(ee < 0 || ee >= c.outDepth || Math.floor(ee) !== ee))
                for (let se = 0; se < x; se += b) {
                  let ne = (K + se) / f;
                  if (!(ne < 0 || ne >= c.outHeight || Math.floor(ne) !== ne))
                    for (let oe = 0; oe < k; oe += y) {
                      let re = (Y + oe) / m;
                      if (re < 0 || re >= c.outWidth || Math.floor(re) !== re)
                        continue;
                      let le = v * x * k - 1 - d.get(R, ee, ne, re, F), me = te * x * k + se * k + oe, ke = le === me ? 1 : 0;
                      if (ke === 0)
                        continue;
                      Z += P.get(R, ee, ne, re, F) * ke;
                    }
                }
            }
            A.set(Z, R, T, z, W, F);
          }
  return n.makeTensorInfo(A.shape, A.dtype, A.values);
}
var k6 = { kernelName: Cg, backendName: "cpu", kernelFunc: w6 };
function I6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, input: a, output: i } = t, o = a;
  be([a, i], "maxPoolGrad");
  let { filterSize: u, strides: l, pad: c, dimRoundingMode: p } = s, d = C.computePool2DInfo(o.shape, u, l, 1, c, p), h = n.data.get(o.dataId).values, f = De(d.outShape, o.dtype, PC(h, o.shape, o.dtype, d).values), m = d.strideHeight, g = d.strideWidth, b = d.dilationHeight, y = d.dilationWidth, v = d.effectiveFilterHeight, x = d.effectiveFilterWidth, k = x - 1 - d.padInfo.left, S = v - 1 - d.padInfo.top, $ = De(o.shape, "float32"), E = n.data.get(r.dataId).values, A = De(r.shape, "float32", E);
  for (let P = 0; P < d.batchSize; ++P)
    for (let R = 0; R < d.inChannels; ++R)
      for (let F = 0; F < d.inHeight; ++F)
        for (let T = 0; T < d.inWidth; ++T) {
          let z = F - S, W = T - k, q = 0;
          for (let K = 0; K < v; K += b) {
            let Y = (z + K) / m;
            if (!(Y < 0 || Y >= d.outHeight || Math.floor(Y) !== Y))
              for (let Z = 0; Z < x; Z += y) {
                let te = (W + Z) / g;
                if (te < 0 || te >= d.outWidth || Math.floor(te) !== te)
                  continue;
                let ee = v * x - 1 - f.get(P, Y, te, R), se = K * x + Z, ne = ee === se ? 1 : 0;
                if (ne === 0)
                  continue;
                q += A.get(P, Y, te, R) * ne;
              }
          }
          $.set(q, P, F, T, R);
        }
  return n.makeTensorInfo($.shape, $.dtype, $.values);
}
var S6 = { kernelName: Sg, backendName: "cpu", kernelFunc: I6 };
function C6(e, t, n, s, r) {
  let a = w.computeStrides(t), i = cv(e, t, n, a, r, "max"), o = PC(e, t, n, r, true, s);
  return [i.values, o.values];
}
var N6 = { kernelName: Ng, backendName: "cpu", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
  let { x: s } = e, { filterSize: r, strides: a, pad: i, includeBatchInIndex: o } = t, u = n;
  be(s, "MaxPoolWithArgmax");
  let l = u.data.get(s.dataId).values, c = C.computePool2DInfo(s.shape, r, a, [1, 1], i), [p, d] = C6(l, s.shape, s.dtype, o, c), h = u.write(p, c.outShape, s.dtype), f = u.write(d, c.outShape, s.dtype);
  return [{ dataId: h, shape: c.outShape, dtype: s.dtype }, { dataId: f, shape: c.outShape, dtype: "int32" }];
} };
function T6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s, o = w.parseAxisParam(a, r.shape), l = C.computeOutAndReduceShapes(r.shape, o)[1], c = w.sizeFromShape(l), p = [], d = n.makeTensorInfo([], "float32", new Float32Array([c]));
  p.push(d);
  let h = wr({ inputs: { x: r }, backend: n, attrs: { dtype: "float32" } });
  p.push(h);
  let f = dv({ inputs: { a: h, b: d }, backend: n });
  p.push(f);
  let m = Xl({ inputs: { x: f }, backend: n, attrs: { axis: a, keepDims: i } });
  return p.forEach((g) => n.disposeIntermediateTensorInfo(g)), m;
}
var $6 = { kernelName: Ka, backendName: "cpu", kernelFunc: T6 };
function _6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s;
  be(r, "min");
  let o = w.parseAxisParam(a, r.shape), u = o, l = C.getAxesPermutation(u, r.shape.length), c = r;
  l != null && (c = wn({ inputs: { x: r }, backend: n, attrs: { perm: l } }), u = C.getInnerMostAxes(u.length, r.shape.length)), C.assertAxesAreInnerMostDims("min", u, c.shape.length);
  let [p, d] = C.computeOutAndReduceShapes(c.shape, u), h = w.sizeFromShape(d), f = w.makeZerosTypedArray(w.sizeFromShape(p), c.dtype), m = n.data.get(c.dataId).values;
  for (let b = 0; b < f.length; ++b) {
    let y = b * h, v = m[y];
    for (let x = 0; x < h; ++x) {
      let k = m[y + x];
      (Number.isNaN(k) || k < v) && (v = k);
    }
    f[b] = v;
  }
  l != null && n.disposeIntermediateTensorInfo(c);
  let g = n.makeTensorInfo(p, c.dtype, f);
  if (i) {
    let b = C.expandShapeToKeepDim(p, o), y = mt({ inputs: { x: g }, backend: n, attrs: { shape: b } });
    return n.disposeIntermediateTensorInfo(g), y;
  }
  return g;
}
var A6 = { kernelName: Xa, backendName: "cpu", kernelFunc: _6 };
function E6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { paddings: a, mode: i } = s;
  be(r, "mirrorPad");
  let o = a.map((v, x) => v[0] + r.shape[x] + v[1]), u = a.map((v) => v[0]), l = a.map((v, x) => v[0] + r.shape[x]), c = i === "reflect" ? 0 : 1, p = n.data.get(r.dataId).values, d = r.shape.length, h = w.computeStrides(r.shape), f = w.sizeFromShape(o), m = o.length, g = w.computeStrides(o), b = w.getTypedArrayFromDType(r.dtype, f);
  for (let v = 0; v < f; v++) {
    let x = w.indexToLoc(v, m, g);
    for (let S = 0; S < m; S++)
      x[S] < u[S] ? x[S] = u[S] * 2 - x[S] - c : x[S] >= l[S] && (x[S] = (l[S] - 1) * 2 - x[S] + c);
    x = x.map((S, $) => S - u[$]);
    let k = w.locToIndex(x, d, h);
    b[v] = p[k];
  }
  return { dataId: n.write(b, o, r.dtype), shape: o, dtype: r.dtype };
}
var R6 = { kernelName: Qa, backendName: "cpu", kernelFunc: E6 };
var D6 = At((e, t) => {
  let n = e % t;
  return e < 0 && t < 0 || e >= 0 && t >= 0 ? n : (n + t) % t;
});
var F6 = Gt(wl, D6);
var O6 = { kernelName: wl, backendName: "cpu", kernelFunc: F6 };
var P6 = wa(Gd());
function WC(e) {
  let { inputs: t, backend: n, attrs: s } = e, { logits: r } = t, { dim: a } = s, i = r.shape.length, o = a;
  if (o === -1 && (o = i - 1), o !== i - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);
  let u = w.parseAxisParam([o], r.shape), l = VC({ inputs: { x: r }, backend: n, attrs: { reductionIndices: u, keepDims: false } }), c = C.expandShapeToKeepDim(l.shape, u), p = mt({ inputs: { x: l }, backend: n, attrs: { shape: c } }), d = uv({ inputs: { a: r, b: p }, backend: n }), h = JS({ inputs: { x: d }, backend: n }), f = Xl({ inputs: { x: h }, backend: n, attrs: { axis: u, keepDims: false } }), m = mt({ inputs: { x: f }, backend: n, attrs: { shape: c } }), g = dv({ inputs: { a: h, b: m }, backend: n });
  return n.disposeIntermediateTensorInfo(l), n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(m), g;
}
var z6 = { kernelName: di, backendName: "cpu", kernelFunc: WC };
function M6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { logits: r } = t, { numSamples: a, seed: i, normalized: o } = s;
  be(r, "multinomial");
  let u = o ? r : WC({ inputs: { logits: r }, backend: n, attrs: { dim: -1 } }), l = u.shape[0], c = u.shape[1], p = n.data.get(u.dataId).values, d = [l, a], h = w.makeZerosTypedArray(w.sizeFromShape(d), "int32");
  for (let f = 0; f < l; ++f) {
    let m = f * c, g = new Float32Array(c - 1);
    g[0] = p[m];
    for (let v = 1; v < g.length; ++v)
      g[v] = g[v - 1] + p[m + v];
    let b = P6.alea(i.toString()), y = f * a;
    for (let v = 0; v < a; ++v) {
      let x = b();
      h[y + v] = g.length;
      for (let k = 0; k < g.length; k++)
        if (x < g[k]) {
          h[y + v] = k;
          break;
        }
    }
  }
  return o || n.disposeIntermediateTensorInfo(u), n.makeTensorInfo(d, "int32", h);
}
var L6 = { kernelName: Tg, backendName: "cpu", kernelFunc: M6 };
var B6 = xs.nonMaxSuppressionV3Impl;
function V6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { boxes: r, scores: a } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: u } = s;
  be(r, "NonMaxSuppression");
  let l = n.data.get(r.dataId).values, c = n.data.get(a.dataId).values, { selectedIndices: p } = B6(l, c, i, o, u);
  return n.makeTensorInfo([p.length], "int32", new Int32Array(p));
}
var W6 = { kernelName: To, backendName: "cpu", kernelFunc: V6 };
var U6 = xs.nonMaxSuppressionV4Impl;
function G6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { boxes: r, scores: a } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: u, padToMaxOutputSize: l } = s;
  be(r, "NonMaxSuppressionPadded");
  let c = n.data.get(r.dataId).values, p = n.data.get(a.dataId).values, { selectedIndices: d, validOutputs: h } = U6(c, p, i, o, u, l);
  return [n.makeTensorInfo([d.length], "int32", new Int32Array(d)), n.makeTensorInfo([], "int32", new Int32Array([h]))];
}
var H6 = { kernelName: kl, backendName: "cpu", kernelFunc: G6 };
var q6 = xs.nonMaxSuppressionV5Impl;
function j6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { boxes: r, scores: a } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: u, softNmsSigma: l } = s;
  be(r, "NonMaxSuppressionWithScore");
  let c = n.data.get(r.dataId).values, p = n.data.get(a.dataId).values, d = i, h = o, f = u, m = l, { selectedIndices: g, selectedScores: b } = q6(c, p, d, h, f, m);
  return [n.makeTensorInfo([g.length], "int32", new Int32Array(g)), n.makeTensorInfo([b.length], "float32", new Float32Array(b))];
}
var K6 = { kernelName: $o, backendName: "cpu", kernelFunc: j6 };
function X6(e) {
  let { inputs: t, backend: n, attrs: s } = e, { indices: r } = t, { depth: a, onValue: i, offValue: o } = s;
  be(r, "oneHot");
  let u = w.sizeFromShape(r.shape), l = new Float32Array(u * a);
  l.fill(o);
  let c = n.data.get(r.dataId).values;
  for (let p = 0; p < u; ++p)
    c[p] >= 0 && c[p] < a && (l[p * a + c[p]] = i);
  return n.makeTensorInfo([...r.shape, a], "int32", l);
}
var Y6 = { kernelName: Ao, backendName: "cpu", kernelFunc: X6 };
function Md(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    let r = ga({ inputs: { input: s }, backend: n }), a = Md({ inputs: { x: r }, backend: n }), i = ro({ inputs: { input: s }, backend: n }), o = Md({ inputs: { x: i }, backend: n }), u = En({ inputs: { real: a, imag: o }, backend: n });
    return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(a), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), u;
  } else
    return pv({ backend: n, attrs: { shape: s.shape, value: 0, dtype: s.dtype } });
}
var Q6 = { kernelName: qo, backendName: "cpu", kernelFunc: Md };
function UC(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    let r = ga({ inputs: { input: s }, backend: n }), a = UC({ inputs: { x: r }, backend: n }), i = ro({ inputs: { input: s }, backend: n }), o = Md({ inputs: { x: i }, backend: n }), u = En({ inputs: { real: a, imag: o }, backend: n });
    return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(a), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), u;
  } else
    return pv({ backend: n, attrs: { shape: s.shape, value: 1, dtype: s.dtype } });
}
var Z6 = { kernelName: _o, backendName: "cpu", kernelFunc: UC };
function GC(e) {
  let { inputs: t, backend: n, attrs: s } = e, { axis: r } = s;
  if (t.length === 1)
    return zd({ inputs: { input: t[0] }, backend: n, attrs: { dim: r } });
  let a = t[0].shape, i = t[0].dtype;
  t.forEach((c) => {
    w.assertShapesMatch(a, c.shape, "All tensors passed to stack must have matching shapes"), w.assert(i === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let o = [], u = t.map((c) => {
    let p = zd({ inputs: { input: c }, backend: n, attrs: { dim: r } });
    return o.push(p), p;
  }), l = ao({ inputs: u, backend: n, attrs: { axis: r } });
  return o.forEach((c) => n.disposeIntermediateTensorInfo(c)), l;
}
var J6 = { kernelName: Eo, backendName: "cpu", kernelFunc: GC };
function ej(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { paddings: a, constantValue: i } = s;
  be(r, "pad");
  let o = a.map((y, v) => y[0] + r.shape[v] + y[1]), u = a.map((y) => y[0]), l = n.data.get(r.dataId).values, c = w.sizeFromShape(r.shape), p = r.shape.length, d = w.computeStrides(r.shape), h = w.sizeFromShape(o), f = o.length, m = w.computeStrides(o), g = w.getTypedArrayFromDType(r.dtype, h);
  i !== 0 && g.fill(i);
  for (let y = 0; y < c; y++) {
    let x = w.indexToLoc(y, p, d).map((S, $) => S + u[$]), k = w.locToIndex(x, f, m);
    g[k] = l[y];
  }
  return { dataId: n.write(g, o, r.dtype), shape: o, dtype: r.dtype };
}
var HC = { kernelName: Ja, backendName: "cpu", kernelFunc: ej };
var tj = At((e, t) => Math.pow(e, t));
var nj = Gt(ei, tj);
var sj = { kernelName: ei, backendName: "cpu", kernelFunc: nj };
function rj(e) {
  let { backend: t, attrs: n } = e, { start: s, stop: r, dtype: a, step: i } = n, o = iv(s, r, i, a);
  return t.makeTensorInfo([o.length], a, o);
}
var aj = { kernelName: Il, backendName: "cpu", kernelFunc: rj };
var ij = st(Sl, (e) => 1 / e);
var oj = { kernelName: Sl, backendName: "cpu", kernelFunc: ij };
function uj(e) {
  let { inputs: t, backend: n, attrs: s } = e, { images: r } = t, { alignCorners: a, halfPixelCenters: i, size: o } = s;
  be(r, "resizeBilinear");
  let u = w.computeStrides(r.shape), [l, c] = o, [p, d, h, f] = r.shape, m = n.data.get(r.dataId).values, g = new Float32Array(w.sizeFromShape([p, l, c, f])), b = [a && l > 1 ? d - 1 : d, a && c > 1 ? h - 1 : h], y = [a && l > 1 ? l - 1 : l, a && c > 1 ? c - 1 : c], v = 0, x = b[0] / y[0], k = b[1] / y[1];
  for (let S = 0; S < p; S++)
    for (let $ = 0; $ < l; $++) {
      let E;
      i ? E = x * ($ + 0.5) - 0.5 : E = x * $;
      let A = Math.max(0, Math.floor(E)), P = E - A, R = Math.min(d - 1, Math.ceil(E)), F = S * u[0] + A * u[1], T = S * u[0] + R * u[1];
      for (let z = 0; z < c; z++) {
        let W;
        i ? W = k * (z + 0.5) - 0.5 : W = k * z;
        let q = Math.max(0, Math.floor(W)), K = W - q, Y = Math.min(h - 1, Math.ceil(W)), Z = F + q * u[2], te = T + q * u[2], ee = F + Y * u[2], se = T + Y * u[2];
        for (let ne = 0; ne < f; ne++) {
          let oe = m[Z + ne], re = m[te + ne], le = m[ee + ne], me = m[se + ne], ke = oe + (le - oe) * K, Se = re + (me - re) * K, Ee = ke + (Se - ke) * P;
          g[v++] = Ee;
        }
      }
    }
  return n.makeTensorInfo([p, l, c, f], "float32", g);
}
var lj = { kernelName: ri, backendName: "cpu", kernelFunc: uj };
function cj(e) {
  let { inputs: t, backend: n, attrs: s } = e, { images: r, dy: a } = t, { alignCorners: i } = s;
  be([a, r], "resizeBilinearGrad");
  let o = w.computeStrides(r.shape), [u, l, c, p] = r.shape, [, d, h] = a.shape, f = new Float32Array(u * l * c * p), m = [i && d > 1 ? l - 1 : l, i && h > 1 ? c - 1 : c], g = [i && d > 1 ? d - 1 : d, i && h > 1 ? h - 1 : h], b = m[0] / g[0], y = m[1] / g[1], v = n.data.get(a.dataId).values, x = 0;
  for (let k = 0; k < u; k++) {
    let S = k * o[0];
    for (let $ = 0; $ < d; $++) {
      let E = $ * b, A = Math.floor(E), P = Math.min(Math.ceil(E), l - 1), R = S + A * o[1], F = S + P * o[1], T = E - A, z = 1 - T;
      for (let W = 0; W < h; W++) {
        let q = W * y, K = Math.floor(q), Y = Math.min(Math.ceil(q), c - 1), Z = q - K, te = 1 - Z, ee = R + K * o[2], se = R + Y * o[2], ne = F + K * o[2], oe = F + Y * o[2], re = z * te, le = z * Z, me = T * te, ke = T * Z;
        for (let Se = 0; Se < p; Se++) {
          let Ee = v[x++];
          f[ee + Se] += Ee * re, f[se + Se] += Ee * le, f[ne + Se] += Ee * me, f[oe + Se] += Ee * ke;
        }
      }
    }
  }
  return n.makeTensorInfo([u, c, l, p], "float32", f);
}
var dj = { kernelName: _g, backendName: "cpu", kernelFunc: cj };
function pj(e) {
  let { inputs: t, backend: n, attrs: s } = e, { images: r } = t, { alignCorners: a, halfPixelCenters: i, size: o } = s;
  be(r, "resizeNearestNeighbor");
  let u = w.computeStrides(r.shape), [l, c] = o, [p, d, h, f] = r.shape, m = n.data.get(r.dataId).values, g = new Float32Array(p * l * c * f), b = [a && l > 1 ? d - 1 : d, a && c > 1 ? h - 1 : h], y = [a && l > 1 ? l - 1 : l, a && c > 1 ? c - 1 : c], v = b[0] / y[0], x = b[1] / y[1], k = 0;
  for (let S = 0; S < p; S++) {
    let $ = S * u[0];
    for (let E = 0; E < l; E++) {
      let A = i ? v * (E + 0.5) : v * E, P = Math.min(d - 1, a ? Math.round(A) : Math.floor(A));
      i && (P = Math.max(0, P));
      let R = $ + P * u[1];
      for (let F = 0; F < c; F++) {
        let T = i ? x * (F + 0.5) : x * F, z = Math.min(h - 1, a ? Math.round(T) : Math.floor(T));
        i && (z = Math.max(0, z));
        let W = R + z * u[2];
        for (let q = 0; q < f; q++) {
          let K = m[W + q];
          g[k++] = K;
        }
      }
    }
  }
  return n.makeTensorInfo([p, l, c, f], r.dtype, g);
}
var hj = { kernelName: Cl, backendName: "cpu", kernelFunc: pj };
function fj(e) {
  let { inputs: t, backend: n, attrs: s } = e, { images: r, dy: a } = t, { alignCorners: i } = s;
  be([a, r], "resizeNearestNeighborGrad");
  let o = w.computeStrides(r.shape), u = w.computeStrides(a.shape), [l, c, p, d] = r.shape, [, h, f] = a.shape, m = new Float32Array(l * c * p * d), g = n.data.get(a.dataId).values, b = [i && h > 1 ? c - 1 : c, i && f > 1 ? p - 1 : p], y = [i && h > 1 ? h - 1 : h, i && f > 1 ? f - 1 : f], v = b[0] / y[0], x = b[1] / y[1], k = 1 / v, S = 1 / x, $ = Math.ceil(k) * 2 + 2, E = Math.ceil(S) * 2 + 2;
  for (let A = 0; A < l; A++) {
    let P = A * o[0];
    for (let R = 0; R < c; R++) {
      let F = P + R * o[1], T = Math.floor(R * k), z = Math.floor(T - $ / 2);
      for (let W = 0; W < p; W++) {
        let q = F + W * o[2], K = Math.floor(W * S), Y = Math.floor(K - E / 2);
        for (let Z = 0; Z < d; Z++) {
          let te = 0;
          for (let ee = 0; ee < $; ee++) {
            let se = ee + z;
            if (se < 0 || se >= h)
              continue;
            let ne = P + se * u[1], oe = se * v, re = Math.min(c - 1, i ? Math.round(oe) : Math.floor(oe));
            if (R === re)
              for (let le = 0; le < E; le++) {
                let me = le + Y;
                if (me < 0 || me >= f)
                  continue;
                let ke = ne + me * u[2], Se = me * x, Ee = Math.min(p - 1, i ? Math.round(Se) : Math.floor(Se));
                W === Ee && (te += g[ke + Z]);
              }
          }
          m[q + Z] = te;
        }
      }
    }
  }
  return n.makeTensorInfo(r.shape, r.dtype, m);
}
var mj = { kernelName: $g, backendName: "cpu", kernelFunc: fj };
function gj(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { dims: a } = s;
  be(r, "reverse");
  let i = r.shape.length, o = w.parseAxisParam(a, r.shape);
  if (i === 0)
    return Os({ inputs: { x: r }, backend: n });
  let u = new Vt(r.shape, r.dtype), l = n.bufferSync(r);
  for (let c = 0; c < u.size; c++) {
    let p = u.indexToLoc(c), d = p.slice();
    o.forEach((h) => d[h] = r.shape[h] - 1 - d[h]), u.set(l.get(...d), ...p);
  }
  return n.makeTensorInfo(u.shape, u.dtype, u.values);
}
var bj = { kernelName: Do, backendName: "cpu", kernelFunc: gj };
var yj = { kernelName: jo, backendName: "cpu", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
  let { image: s } = e, { radians: r, fillValue: a, center: i } = t, o = n, u = w.getTypedArrayFromDType(s.dtype, w.sizeFromShape(s.shape)), [l, c, p, d] = s.shape, [h, f] = C.getImageCenter(i, c, p), m = 255, g = Math.sin(r), b = Math.cos(r), y = o.data.get(s.dataId).values;
  for (let x = 0; x < l; x++) {
    let k = x * p * c * d;
    for (let S = 0; S < c; S++) {
      let $ = S * (p * d);
      for (let E = 0; E < p; E++) {
        let A = E * d;
        for (let P = 0; P < d; P++) {
          let R = [l, S, E, P], F = R[2], T = R[1], z = (F - h) * b - (T - f) * g, W = (F - h) * g + (T - f) * b;
          z = Math.round(z + h), W = Math.round(W + f);
          let q = a;
          if (typeof a != "number" && (P === 3 ? q = m : q = a[P]), z >= 0 && z < p && W >= 0 && W < c) {
            let Y = W * (p * d), Z = z * d, te = k + Y + Z + P;
            q = y[te];
          }
          let K = k + $ + A + P;
          u[K] = q;
        }
      }
    }
  }
  return { dataId: o.write(u, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
} };
var vj = st(Fo, (e) => {
  let t = Math.floor(e);
  return e - t < 0.5 ? Math.floor(e) : e - t > 0.5 ? Math.ceil(e) : t % 2 === 0 ? t : t + 1;
});
var xj = { kernelName: Fo, backendName: "cpu", kernelFunc: vj };
function qC(e, t, n, s, r, a, i, o, u, l) {
  let c = [s / r, r], p = e.values, d = t.values;
  if (s === 0)
    return De(n, t.dtype);
  let h = De(c, t.dtype);
  h.values.fill(u);
  for (let f = 0; f < a; f++) {
    let m = [], g = 0;
    for (let b = 0; b < i; b++) {
      let y = p[f * i + b];
      m.push(y), g += y * o[b];
    }
    if (g < 0 || g >= s / r)
      throw new Error(`Invalid indices: ${m} does not index into ${n}`);
    for (let b = 0; b < r; b++)
      l ? h.values[g * r + b] += d[f * r + b] : h.values[g * r + b] = t.rank === 0 ? d[0] : d[f * r + b];
  }
  return h;
}
function wj(e) {
  let { inputs: t, backend: n, attrs: s } = e, { indices: r, updates: a } = t, { shape: i } = s, { sliceRank: o, numUpdates: u, sliceSize: l, strides: c, outputSize: p } = C.calculateShapes(a, r, i), d = true, h = n.bufferSync(r), f = n.bufferSync(a), m = qC(h, f, i, p, l, u, o, c, 0, d);
  return n.makeTensorInfo(i, m.dtype, m.values);
}
var kj = { kernelName: Oo, backendName: "cpu", kernelFunc: wj };
function Ij(e) {
  let { inputs: t, backend: n } = e, { condition: s, t: r, e: a } = t;
  be([s, r, a], "select");
  let i = s.shape.length, o = n.data.get(s.dataId).values, u = n.data.get(r.dataId).values, l = n.data.get(a.dataId).values, c = ln(r.dtype, a.dtype), p = w.makeZerosTypedArray(w.sizeFromShape(r.shape), c), d = 0, h = i === 0 || i > 1 || r.shape.length === 1 ? 1 : w.sizeFromShape(r.shape.slice(1));
  for (let f = 0; f < o.length; f++)
    for (let m = 0; m < h; m++)
      o[f] === 1 ? p[d++] = u[f] : p[d++] = l[f];
  return n.makeTensorInfo(r.shape, c, p);
}
var Sj = { kernelName: Po, backendName: "cpu", kernelFunc: Ij };
var Cj = C.SELU_SCALEALPHA;
var Nj = C.SELU_SCALE;
var Tj = st(Nl, (e) => e >= 0 ? Nj * e : Cj * (Math.exp(e) - 1));
var $j = { kernelName: Nl, backendName: "cpu", kernelFunc: Tj };
var _j = st(Tl, (e) => e < 0 ? -1 : e > 0 ? 1 : 0);
var Aj = { kernelName: Tl, backendName: "cpu", kernelFunc: _j };
var Ej = st(oi, (e) => Math.sin(e));
var Rj = { kernelName: oi, backendName: "cpu", kernelFunc: Ej };
var Dj = st(Mo, (e) => Math.sinh(e));
var Fj = { kernelName: Mo, backendName: "cpu", kernelFunc: Dj };
var Oj = 11920928955078125e-23;
var sw = Math.log(Oj) + 2;
var Pj = st($l, (e) => {
  let t = e > -sw, n = e < sw, s = Math.exp(e), r;
  return n ? r = s : t ? r = e : r = Math.log(1 + s), r;
});
var zj = { kernelName: $l, backendName: "cpu", kernelFunc: Pj };
function Mj(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockShape: a, paddings: i } = s;
  be([r], "spaceToBatchND");
  let o = w.sizeFromShape(a), u = [[0, 0]];
  u.push(...i);
  for (let S = 1 + a.length; S < r.shape.length; ++S)
    u.push([0, 0]);
  let l = HC.kernelFunc({ inputs: { x: r }, backend: n, attrs: { paddings: u, constantValue: 0 } }), c = C.getReshaped(l.shape, a, o, false), p = C.getPermuted(c.length, a.length, false), d = C.getReshapedPermuted(l.shape, a, o, false), m = mt({ inputs: { x: l }, backend: n, attrs: { shape: c } }), y = wn({ inputs: { x: m }, backend: n, attrs: { perm: p } }), k = mt({ inputs: { x: y }, backend: n, attrs: { shape: d } });
  return n.disposeIntermediateTensorInfo(l), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(y), k;
}
var Lj = { kernelName: Lo, backendName: "cpu", kernelFunc: Mj };
function Bj(e) {
  let { inputs: t, backend: n } = e, { indices: s, values: r, denseShape: a, defaultValue: i } = t;
  if (a.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${a.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${r.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  let o = n.data.get(s.dataId).values, u = n.data.get(r.dataId).values, l = n.data.get(a.dataId).values, c = n.data.get(i.dataId).values[0], [p, d, h, f, m] = yC(o, s.shape, s.dtype, u, r.dtype, l, c);
  return [n.makeTensorInfo(d, s.dtype, p), n.makeTensorInfo([d[0]], r.dtype, h), n.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))), n.makeTensorInfo([m.length], s.dtype, new Int32Array(m))];
}
var Vj = { kernelName: ap, backendName: "cpu", kernelFunc: Bj };
function Wj(e) {
  let { inputs: t, backend: n } = e, { inputIndices: s, inputShape: r, newShape: a } = t;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${a.shape}`);
  let i = Array.from(n.data.get(r.dataId).values), o = n.data.get(s.dataId).values, u = Array.from(n.data.get(a.dataId).values), [l, c, p] = vC(o, s.shape, s.dtype, i, u);
  return [n.makeTensorInfo(c, s.dtype, l), n.makeTensorInfo([p.length], a.dtype, new Int32Array(p))];
}
var Uj = { kernelName: _l, backendName: "cpu", kernelFunc: Wj };
function Gj(e) {
  let { inputs: t, backend: n } = e, { data: s, indices: r, segmentIds: a } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${r.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${a.shape}`);
  if (r.shape[0] !== a.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  let i = n.data.get(s.dataId).values, o = n.data.get(r.dataId).values, u = n.data.get(a.dataId).values, [l, c] = ov(i, s.shape, s.dtype, o, u, true);
  return n.makeTensorInfo(c, s.dtype, l);
}
var Hj = { kernelName: ip, backendName: "cpu", kernelFunc: Gj };
function qj(e) {
  let { inputs: t, backend: n } = e, { data: s, indices: r, segmentIds: a } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${r.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${a.shape}`);
  if (r.shape[0] !== a.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  let i = n.data.get(s.dataId).values, o = n.data.get(r.dataId).values, u = n.data.get(a.dataId).values, [l, c] = ov(i, s.shape, s.dtype, o, u);
  return n.makeTensorInfo(c, s.dtype, l);
}
var jj = { kernelName: op, backendName: "cpu", kernelFunc: qj };
function Kj(e) {
  let { inputs: t, backend: n, attrs: s } = e, { sparseIndices: r, sparseValues: a, defaultValue: i } = t, { outputShape: o } = s, { sliceRank: u, numUpdates: l, sliceSize: c, strides: p, outputSize: d } = C.calculateShapes(a, r, o), h = false, f = n.bufferSync(r), m = n.bufferSync(a), g = n.data.get(i.dataId).values[0], b = qC(f, m, o, d, c, l, u, p, g, h);
  return n.makeTensorInfo(o, b.dtype, b.values);
}
var Xj = { kernelName: up, backendName: "cpu", kernelFunc: Kj };
function Yj(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { numOrSizeSplits: a, axis: i } = s, o = w.parseAxisParam(i, r.shape)[0], u = C.prepareSplitSize(r, a, o), l = new Array(r.shape.length).fill(0), c = r.shape.slice();
  return u.map((p) => {
    let d = [...c];
    d[o] = p;
    let h = ba({ inputs: { x: r }, backend: n, attrs: { begin: l, size: d } });
    return l[o] += p, h;
  });
}
var Qj = { kernelName: Bo, backendName: "cpu", kernelFunc: Yj };
var Zj = { kernelName: Al, backendName: "cpu", kernelFunc: ({ inputs: e, backend: t }) => {
  let { x: n } = e, s = t;
  be(n, "square");
  let r = s.data.get(n.dataId).values, a = new Float32Array(r.length);
  for (let o = 0; o < r.length; ++o) {
    let u = r[o];
    a[o] = u * u;
  }
  return { dataId: s.write(a, n.shape, n.dtype), shape: n.shape, dtype: n.dtype };
} };
var Jj = st(gi, (e, t) => {
  let n = t;
  return isNaN(e) ? NaN : e > 0 ? 1 : n.alpha;
});
var e5 = { kernelName: gi, backendName: "cpu", kernelFunc: Jj };
function t5(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { begin: a, end: i, strides: o, beginMask: u, endMask: l, ellipsisMask: c, newAxisMask: p, shrinkAxisMask: d } = s;
  be(r, "stridedSlice");
  let { finalShapeSparse: h, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: b, begin: y, end: v, strides: x } = wt.sliceInfo(r.shape, a, i, o, u, l, c, p, d), k;
  if (m)
    k = mt({ inputs: { x: r }, backend: n, attrs: { shape: f } });
  else if (g || b) {
    w.assert(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    let S = wt.computeOutShape(y, v, x), $ = ba({ inputs: { x: r }, backend: n, attrs: { begin: y, size: S } });
    k = mt({ inputs: { x: $ }, backend: n, attrs: { shape: f } }), n.disposeIntermediateTensorInfo($);
  } else {
    let S = n.bufferSync(r), $ = wC(h, S, x, y);
    k = n.makeTensorInfo(f, $.dtype, $.values);
  }
  return k;
}
var n5 = { kernelName: Vo, backendName: "cpu", kernelFunc: t5 };
function s5(e) {
  let { inputs: t, backend: n, attrs: s } = e, { separator: r, nGramWidths: a, leftPad: i, rightPad: o, padWidth: u, preserveShortSequences: l } = s, { data: c, dataSplits: p } = t, d = n.data.get(c.dataId).values, h = n.data.get(p.dataId).values, [f, m] = kC(d, h, r, a, i, o, u, l);
  return [n.makeTensorInfo([f.length], "string", f), n.makeTensorInfo(p.shape, "int32", m)];
}
var r5 = { kernelName: lp, backendName: "cpu", kernelFunc: s5 };
function a5(e) {
  let { inputs: t, backend: n, attrs: s } = e, { skipEmpty: r } = s, { input: a, delimiter: i } = t;
  if (a.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (a.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${a.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  let o = n.data.get(a.dataId).values, u = n.data.get(i.dataId).values[0], [l, c, p] = IC(o, u, r), d = c.length;
  return [n.makeTensorInfo([d, 2], "int32", l), n.makeTensorInfo([d], "string", c), n.makeTensorInfo([2], "int32", new Int32Array(p))];
}
var i5 = { kernelName: Ag, backendName: "cpu", kernelFunc: a5 };
function o5(e) {
  let { inputs: t, backend: n, attrs: s } = e, { numBuckets: r } = s, { input: a } = t;
  if (a.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r <= 0)
    throw new Error("Number of buckets must be at least 1");
  let i = n.data.get(a.dataId).values, o = SC(i, r);
  return n.makeTensorInfo(a.shape, "int32", o);
}
var u5 = { kernelName: Eg, backendName: "cpu", kernelFunc: o5 };
var l5 = st(Wo, (e) => Math.tan(e));
var c5 = { kernelName: Wo, backendName: "cpu", kernelFunc: l5 };
var d5 = st(fi, (e) => Math.tanh(e));
var p5 = { kernelName: fi, backendName: "cpu", kernelFunc: d5 };
function h5(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { reps: a } = s;
  be(r, "tile");
  let i = NC(n.bufferSync(r), a);
  return n.makeTensorInfo(i.shape, i.dtype, i.values);
}
var f5 = { kernelName: Nr, backendName: "cpu", kernelFunc: h5 };
function m5(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { k: a, sorted: i } = s;
  be(r, "topk");
  let o = n.data.get(r.dataId).values, [u, l] = $C(o, r.shape, r.dtype, a, i);
  return [n.makeTensorInfo(u.shape, u.dtype, u.values), n.makeTensorInfo(l.shape, l.dtype, l.values)];
}
var g5 = { kernelName: Uo, backendName: "cpu", kernelFunc: m5 };
function b5(e) {
  let { inputs: t, attrs: n, backend: s } = e, { image: r, transforms: a } = t, { interpolation: i, fillMode: o, fillValue: u, outputShape: l } = n, [c, p, d, h] = r.shape, [f, m] = l != null ? l : [p, d], g = [c, f, m, h], b = w.computeStrides(r.shape), y = b[0], v = b[1], x = b[2], k = w.getTypedArrayFromDType(r.dtype, w.sizeFromShape(g));
  k.fill(u);
  let S = s.data.get(r.dataId).values, $ = s.data.get(a.dataId).values;
  for (let A = 0; A < c; ++A) {
    let P = a.shape[0] === 1 ? $ : $.subarray(A * 8, A * 8 + 8);
    for (let R = 0; R < f; ++R)
      for (let F = 0; F < m; ++F)
        for (let T = 0; T < h; ++T) {
          let z, W = P[6] * F + P[7] * R + 1;
          if (W === 0)
            continue;
          let q = (P[0] * F + P[1] * R + P[2]) / W, K = (P[3] * F + P[4] * R + P[5]) / W, Y = rw(q, d, o), Z = rw(K, p, o);
          switch (i) {
            case "nearest":
              z = I5(S, p, d, y, v, x, A, Z, Y, T, u);
              break;
            case "bilinear":
              z = S5(S, p, d, y, v, x, A, Z, Y, T, u);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`);
          }
          let te = A * y + R * v + F * x + T;
          k[te] = z;
        }
    return s.makeTensorInfo(g, r.dtype, k);
  }
  return { dataId: s.write(k, g, r.dtype), shape: r.shape, dtype: r.dtype };
}
var y5 = { kernelName: Go, backendName: "cpu", kernelFunc: b5 };
function rw(e, t, n) {
  switch (n) {
    case "reflect":
      return v5(e, t);
    case "wrap":
      return x5(e, t);
    case "nearest":
      return k5(e, t);
    case "constant":
    default:
      return w5(e, t);
  }
}
function v5(e, t) {
  let n = e;
  if (n < 0)
    if (t <= 1)
      n = 0;
    else {
      let s = 2 * t;
      n < s && (n = s * Math.trunc(-n / s) + n), n = n < -t ? n + s : -n - 1;
    }
  else if (n > t - 1)
    if (t <= 1)
      n = 0;
    else {
      let s = 2 * t;
      n -= s * Math.trunc(n / s), n >= t && (n = s - n - 1);
    }
  return w.clamp(0, n, t - 1);
}
function x5(e, t) {
  let n = e;
  if (n < 0)
    if (t <= 1)
      n = 0;
    else {
      let s = t - 1;
      n += t * (Math.trunc(-n / s) + 1);
    }
  else if (n > t - 1)
    if (t <= 1)
      n = 0;
    else {
      let s = t - 1;
      n -= t * Math.trunc(n / s);
    }
  return w.clamp(0, n, t - 1);
}
function w5(e, t) {
  return e;
}
function k5(e, t) {
  return w.clamp(0, e, t - 1);
}
function Fu(e, t, n, s, r, a, i, o, u, l, c) {
  let p = i * s + o * r + u * a + l;
  return 0 <= o && o < t && 0 <= u && u < n ? e[p] : c;
}
function I5(e, t, n, s, r, a, i, o, u, l, c) {
  let p = Math.round(o), d = Math.round(u);
  return Fu(e, t, n, s, r, a, i, p, d, l, c);
}
function S5(e, t, n, s, r, a, i, o, u, l, c) {
  let p = Math.floor(o), d = Math.floor(u), h = p + 1, f = d + 1, m = (f - u) * Fu(e, t, n, s, r, a, i, p, d, l, c) + (u - d) * Fu(e, t, n, s, r, a, i, p, f, l, c), g = (f - u) * Fu(e, t, n, s, r, a, i, h, d, l, c) + (u - d) * Fu(e, t, n, s, r, a, i, h, f, l, c);
  return (h - o) * m + (o - p) * g;
}
function C5(e) {
  let { inputs: t, attrs: n, backend: s } = e, { axis: r } = n, { x: a } = t;
  be(a, "unique");
  let i = s.data.get(a.dataId).values, { outputValues: o, outputShape: u, indices: l } = _C(i, r, a.shape, a.dtype);
  return [s.makeTensorInfo(u, a.dtype, o), s.makeTensorInfo([l.length], "int32", l)];
}
var N5 = { kernelName: Rg, backendName: "cpu", kernelFunc: C5 };
function T5(e) {
  let { inputs: t, backend: n, attrs: s } = e, { value: r } = t, { axis: a } = s;
  a < 0 && (a += r.shape.length);
  let i = r.shape.length, o = r.shape[a], u = new Array(i - 1), l = 0;
  for (let h = 0; h < i; h++)
    h !== a && (u[l++] = r.shape[h]);
  let c = new Array(i).fill(0), p = r.shape.slice();
  p[a] = 1;
  let d = new Array(o);
  for (let h = 0; h < d.length; h++) {
    c[a] = h;
    let f = ba({ inputs: { x: r }, backend: n, attrs: { begin: c, size: p } });
    d[h] = mt({ inputs: { x: f }, backend: n, attrs: { shape: u } }), n.disposeIntermediateTensorInfo(f);
  }
  return d;
}
var $5 = { kernelName: Ho, backendName: "cpu", kernelFunc: T5 };
function _5(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, segmentIds: a } = t, { numSegments: i } = s;
  be(r, "unsortedSegmentSum");
  let o = r.shape.length, u = a.shape.length, l = [], c = [], p = o - u, d = a;
  for (let f = 0; f < p; ++f) {
    let m = zd({ inputs: { input: d }, backend: n, attrs: { dim: f + 1 } });
    d = m, c.push(m);
  }
  for (let f = 0; f < i; ++f) {
    let m = w.createScalarValue(f, "int32"), g = n.makeTensorInfo([], "int32", m), b = QS({ inputs: { a: g, b: d }, backend: n }), y = wr({ inputs: { x: b }, backend: n, attrs: { dtype: "float32" } }), v = jp({ inputs: { a: y, b: r }, backend: n }), x = Xl({ inputs: { x: v }, backend: n, attrs: { axis: 0, keepDims: false } });
    l.push(x), c.push(g), c.push(b), c.push(y), c.push(v), c.push(x);
  }
  let h = GC({ inputs: l, backend: n, attrs: { axis: 0 } });
  return c.forEach((f) => n.disposeIntermediateTensorInfo(f)), h;
}
var A5 = { kernelName: cp, backendName: "cpu", kernelFunc: _5 };
var E5 = [PG, _U, MG, BG, OU, WG, GG, qG, KG, YG, ZG, eH, nH, aH, oH, cH, pH, fH, gH, FG, yH, xH, kH, SH, DU, zU, NH, AU, $H, AH, EH, DH, OH, zH, LH, VH, UH, HH, jH, XH, QH, JH, tq, nq, rq, iq, uq, lq, cq, dq, fq, TG, gq, MU, Sq, LU, Cq, VU, Eq, Rq, Fq, UU, zq, Lq, Vq, Uq, Hq, HU, jU, EU, jq, _H, Xq, Qq, Jq, $G, XU, QU, t6, JU, s6, i6, u6, d6, h6, m6, g6, tG, y6, x6, k6, S6, N6, $6, A6, sG, R6, O6, L6, aG, oG, W6, H6, K6, lG, Y6, Z6, J6, HC, sj, AG, pG, aj, RU, Bm, oj, EG, RG, DG, lj, dj, hj, mj, bj, yj, xj, fG, kj, Sj, $j, gG, Aj, Rj, Fj, bG, z6, zj, Lj, Vj, Uj, Hj, jj, Xj, Qj, xG, Zj, kG, e5, n5, r5, i5, u5, NG, pq, c5, p5, f5, g5, y5, cG, N5, $5, A5, Q6];
for (let e of E5)
  El(e);
var R5 = {};
Ae(R5, { assertNotComplex: () => su, bindCanvasToFramebuffer: () => G5, bindColorTextureToFramebuffer: () => ad, bindTextureToProgramUniformSampler: () => o1, bindTextureUnit: () => r1, bindVertexBufferToProgramAttribute: () => Wm, callAndCheck: () => fe, canBeRepresented: () => jC, createFragmentShader: () => YC, createFramebuffer: () => s1, createProgram: () => QC, createStaticIndexBuffer: () => e1, createStaticVertexBuffer: () => JC, createTexture: () => t1, createVertexShader: () => XC, getBatchDim: () => ya, getExtensionOrThrow: () => Ou, getFramebufferErrorMessage: () => u1, getMaxTexturesInShader: () => p1, getNumChannels: () => W5, getProgramUniformLocation: () => i1, getProgramUniformLocationOrThrow: () => a1, getRowsCols: () => va, getShapeAs3D: () => id, getTextureShapeFromLogicalShape: () => c1, getWebGLDisjointQueryTimerVersion: () => h1, getWebGLErrorMessage: () => KC, getWebGLMaxTextureSize: () => d1, hasExtension: () => Ln, isCapableOfRenderingToFloatTexture: () => f1, isDownloadFloatTextureEnabled: () => m1, isReshapeFree: () => tl, isWebGLFenceEnabled: () => g1, isWebGLVersionEnabled: () => Gm, linkProgram: () => ZC, logShaderSourceAndInfoLog: () => fv, resetMaxTextureSize: () => H5, resetMaxTexturesInShader: () => q5, unbindColorTextureFromFramebuffer: () => Um, unbindTextureUnit: () => U5, validateFramebuffer: () => Pu, validateProgram: () => rd, validateTextureSize: () => n1 });
var Yr = {};
var Kf = { alpha: false, antialias: false, premultipliedAlpha: false, preserveDrawingBuffer: false, depth: false, stencil: false, failIfMajorPerformanceCaveat: true };
function D5(e, t) {
  Yr[e] = t;
}
function vs(e, t) {
  if (!(e in Yr) || t != null) {
    let s = O5(e, t);
    if (s !== null)
      Yr[e] = s;
    else
      return console.log("Could not get context for WebGL version", e), null;
  }
  let n = Yr[e];
  return n == null || n.isContextLost() ? (delete Yr[e], vs(e)) : (n.disable(n.DEPTH_TEST), n.disable(n.STENCIL_TEST), n.disable(n.BLEND), n.disable(n.DITHER), n.disable(n.POLYGON_OFFSET_FILL), n.disable(n.SAMPLE_COVERAGE), n.enable(n.SCISSOR_TEST), n.enable(n.CULL_FACE), n.cullFace(n.BACK), Yr[e]);
}
function F5(e) {
  if (typeof OffscreenCanvas != "undefined" && e === 2)
    return new OffscreenCanvas(300, 150);
  if (typeof document != "undefined")
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function O5(e, t) {
  if (e !== 1 && e !== 2)
    throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  let n = t == null ? F5(e) : t;
  return n.addEventListener("webglcontextlost", (s) => {
    s.preventDefault(), delete Yr[e];
  }, false), e === 1 ? n.getContext("webgl", Kf) || n.getContext("experimental-webgl", Kf) : n.getContext("webgl2", Kf);
}
function Yl(e, t) {
  return [t, e];
}
function P5(e, t) {
  return e * t;
}
function Yc(e) {
  let t = w.sizeFromShape(e), n = Math.ceil(t / 4);
  return w.sizeToSquarishShape(n);
}
function nu(e, t) {
  return [Math.max(1, Math.ceil(t / 2)), Math.max(1, Math.ceil(e / 2))];
}
function z5(e, t) {
  let [n, s] = nu(e, t);
  return n * s * 4;
}
function hv(e, t) {
  let n = e, s, r, a, i, o, u, l, c, p, d;
  return X().getNumber("WEBGL_VERSION") === 2 ? (s = n.R32F, r = n.R16F, a = n.RGBA16F, i = n.RGBA32F, o = n.RED, l = 4, c = 1, p = n.HALF_FLOAT, d = n.FLOAT, u = n.RGBA8) : (s = e.RGBA, r = e.RGBA, a = e.RGBA, i = n.RGBA, o = e.RGBA, l = 4, c = 4, p = t != null ? t.HALF_FLOAT_OES : null, d = e.FLOAT, u = e.RGBA), { internalFormatFloat: s, internalFormatHalfFloat: r, internalFormatPackedHalfFloat: a, internalFormatPackedFloat: i, textureFormatFloat: o, downloadTextureFormat: u, downloadUnpackNumChannels: l, defaultNumChannels: c, textureTypeHalfFloat: p, textureTypeFloat: d };
}
function fe(e, t) {
  let n = t();
  return X().getBool("DEBUG") && M5(e), n;
}
function M5(e) {
  let t = e.getError();
  if (t !== e.NO_ERROR)
    throw new Error("WebGL Error: " + KC(e, t));
}
var L5 = 596e-10;
var B5 = 65504;
function jC(e) {
  return !!(X().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || e === 0 || L5 < Math.abs(e) && Math.abs(e) < B5);
}
function KC(e, t) {
  switch (t) {
    case e.NO_ERROR:
      return "NO_ERROR";
    case e.INVALID_ENUM:
      return "INVALID_ENUM";
    case e.INVALID_VALUE:
      return "INVALID_VALUE";
    case e.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case e.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case e.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case e.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${t}`;
  }
}
function Ou(e, t) {
  return Zs(e, () => e.getExtension(t), 'Extension "' + t + '" not supported on this browser.');
}
function XC(e, t) {
  let n = Zs(e, () => e.createShader(e.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (fe(e, () => e.shaderSource(n, t)), fe(e, () => e.compileShader(n)), e.getShaderParameter(n, e.COMPILE_STATUS) === false)
    throw console.log(e.getShaderInfoLog(n)), new Error("Failed to compile vertex shader.");
  return n;
}
function YC(e, t) {
  let n = Zs(e, () => e.createShader(e.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (fe(e, () => e.shaderSource(n, t)), fe(e, () => e.compileShader(n)), X().get("ENGINE_COMPILE_ONLY"))
    return n;
  if (e.getShaderParameter(n, e.COMPILE_STATUS) === false)
    throw fv(t, e.getShaderInfoLog(n)), new Error("Failed to compile fragment shader.");
  return n;
}
var V5 = /ERROR: [0-9]+:([0-9]+):/g;
function fv(e, t) {
  let n = V5.exec(t);
  if (n == null) {
    console.log(`Couldn't parse line number in error: ${t}`), console.log(e);
    return;
  }
  let s = +n[1], r = e.split(`
`), a = r.length.toString().length + 2, i = r.map((p, d) => w.rightPad((d + 1).toString(), a) + p), o = 0;
  for (let p = 0; p < i.length; p++)
    o = Math.max(i[p].length, o);
  let u = i.slice(0, s - 1), l = i.slice(s - 1, s), c = i.slice(s);
  console.log(u.join(`
`)), console.log(t.split(`
`)[0]), console.log(`%c ${w.rightPad(l[0], o)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(c.join(`
`));
}
function QC(e) {
  return Zs(e, () => e.createProgram(), "Unable to create WebGLProgram.");
}
function ZC(e, t) {
  if (fe(e, () => e.linkProgram(t)), !X().get("ENGINE_COMPILE_ONLY") && e.getProgramParameter(t, e.LINK_STATUS) === false)
    throw console.log(e.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.");
}
function rd(e, t) {
  if (fe(e, () => e.validateProgram(t)), e.getProgramParameter(t, e.VALIDATE_STATUS) === false)
    throw console.log(e.getProgramInfoLog(t)), new Error("Shader program validation failed.");
}
function JC(e, t) {
  let n = Zs(e, () => e.createBuffer(), "Unable to create WebGLBuffer");
  return fe(e, () => e.bindBuffer(e.ARRAY_BUFFER, n)), fe(e, () => e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW)), n;
}
function e1(e, t) {
  let n = Zs(e, () => e.createBuffer(), "Unable to create WebGLBuffer");
  return fe(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, n)), fe(e, () => e.bufferData(e.ELEMENT_ARRAY_BUFFER, t, e.STATIC_DRAW)), n;
}
function W5() {
  return X().getNumber("WEBGL_VERSION") === 2 ? 1 : 4;
}
function t1(e) {
  return Zs(e, () => e.createTexture(), "Unable to create WebGLTexture.");
}
function n1(e, t) {
  let n = X().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (e <= 0 || t <= 0) {
    let s = `[${e}x${t}]`;
    throw new Error("Requested texture size " + s + " is invalid.");
  }
  if (e > n || t > n) {
    let s = `[${e}x${t}]`, r = `[${n}x${n}]`;
    throw new Error("Requested texture size " + s + " greater than WebGL maximum on this browser / GPU " + r + ".");
  }
}
function s1(e) {
  return Zs(e, () => e.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function Wm(e, t, n, s, r, a, i) {
  let o = e.getAttribLocation(t, n);
  return o === -1 ? false : (fe(e, () => e.bindBuffer(e.ARRAY_BUFFER, s)), fe(e, () => e.vertexAttribPointer(o, r, e.FLOAT, false, a, i)), fe(e, () => e.enableVertexAttribArray(o)), true);
}
function r1(e, t, n) {
  l1(e, n), fe(e, () => e.activeTexture(e.TEXTURE0 + n)), fe(e, () => e.bindTexture(e.TEXTURE_2D, t));
}
function U5(e, t) {
  l1(e, t), fe(e, () => e.activeTexture(e.TEXTURE0 + t)), fe(e, () => e.bindTexture(e.TEXTURE_2D, null));
}
function a1(e, t, n) {
  return Zs(e, () => e.getUniformLocation(t, n), 'uniform "' + n + '" not present in program.');
}
function i1(e, t, n) {
  return e.getUniformLocation(t, n);
}
function o1(e, t, n, s) {
  fe(e, () => r1(e, t, s)), fe(e, () => e.uniform1i(n, s));
}
function G5(e) {
  fe(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)), fe(e, () => e.viewport(0, 0, e.canvas.width, e.canvas.height)), fe(e, () => e.scissor(0, 0, e.canvas.width, e.canvas.height));
}
function ad(e, t, n) {
  fe(e, () => e.bindFramebuffer(e.FRAMEBUFFER, n)), fe(e, () => e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t, 0));
}
function Um(e, t) {
  fe(e, () => e.bindFramebuffer(e.FRAMEBUFFER, t)), fe(e, () => e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, null, 0));
}
function Pu(e) {
  let t = e.checkFramebufferStatus(e.FRAMEBUFFER);
  if (t !== e.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + u1(e, t));
}
function u1(e, t) {
  switch (t) {
    case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case e.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${t}`;
  }
}
function Zs(e, t, n) {
  let s = fe(e, () => t());
  if (s == null)
    throw new Error(n);
  return s;
}
function l1(e, t) {
  let n = e.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, s = t + e.TEXTURE0;
  if (s < e.TEXTURE0 || s > n) {
    let r = `[gl.TEXTURE0, gl.TEXTURE${n}]`;
    throw new Error(`textureUnit must be in ${r}.`);
  }
}
function ya(e, t = 2) {
  return w.sizeFromShape(e.slice(0, e.length - t));
}
function va(e) {
  if (e.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [e.length > 1 ? e[e.length - 2] : 1, e[e.length - 1]];
}
function id(e) {
  let t = [1, 1, 1];
  return e.length === 0 || e.length === 1 && e[0] === 1 || (t = [ya(e), ...va(e)]), t;
}
function c1(e, t = false) {
  let n = X().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  t && (n = n * 2, e = e.map((r, a) => a >= e.length - 2 ? w.nearestLargerEven(e[a]) : e[a]), e.length === 1 && (e = [2, e[0]])), e.length !== 2 && (e = w.squeezeShape(e).newShape);
  let s = w.sizeFromShape(e);
  if (e.length <= 1 && s <= n)
    return [1, s];
  if (e.length === 2 && e[0] <= n && e[1] <= n)
    return e;
  if (e.length === 3 && e[0] * e[1] <= n && e[2] <= n)
    return [e[0] * e[1], e[2]];
  if (e.length === 3 && e[0] <= n && e[1] * e[2] <= n)
    return [e[0], e[1] * e[2]];
  if (e.length === 4 && e[0] * e[1] * e[2] <= n && e[3] <= n)
    return [e[0] * e[1] * e[2], e[3]];
  if (e.length === 4 && e[0] <= n && e[1] * e[2] * e[3] <= n)
    return [e[0], e[1] * e[2] * e[3]];
  if (t) {
    let r = ya(e), a = 2, i = 2;
    return e.length && ([a, i] = va(e)), s = r * (a / 2) * (i / 2), w.sizeToSquarishShape(s).map((o) => o * 2);
  }
  return w.sizeToSquarishShape(s);
}
function Qc(e) {
  return e % 2 === 0;
}
function tl(e, t) {
  if (e = e.slice(-2), t = t.slice(-2), w.arraysEqual(e, t) || !e.length || !t.length || e[0] === 0 || e[1] === 0 || t[0] === 0 || t[1] === 0)
    return true;
  if (e.length !== t.length) {
    let n = e.slice(-1)[0], s = t.slice(-1)[0];
    if (n === s || Qc(n) && Qc(s) && (e[0] === 1 || t[0] === 1))
      return true;
  }
  return e[1] === t[1] && Qc(e[0]) && Qc(t[0]);
}
var od;
var ud;
function d1(e) {
  if (od == null) {
    let t = vs(e);
    od = t.getParameter(t.MAX_TEXTURE_SIZE);
  }
  return od;
}
function H5() {
  od = null;
}
function q5() {
  ud = null;
}
function p1(e) {
  if (ud == null) {
    let t = vs(e);
    ud = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, ud);
}
function h1(e) {
  if (e === 0)
    return 0;
  let t, n = vs(e);
  return Ln(n, "EXT_disjoint_timer_query_webgl2") && e === 2 ? t = 2 : Ln(n, "EXT_disjoint_timer_query") ? t = 1 : t = 0, t;
}
function Ln(e, t) {
  return e.getExtension(t) != null;
}
function Gm(e) {
  try {
    if (vs(e) != null)
      return true;
  } catch (t) {
    return console.log("Error when getting WebGL context: ", t), false;
  }
  return false;
}
function f1(e) {
  if (e === 0)
    return false;
  let t = vs(e);
  if (e === 1) {
    if (!Ln(t, "OES_texture_float"))
      return false;
  } else if (!Ln(t, "EXT_color_buffer_float"))
    return false;
  return Hm(t);
}
function m1(e) {
  if (e === 0)
    return false;
  let t = vs(e);
  if (e === 1) {
    if (!Ln(t, "OES_texture_float") || !Ln(t, "WEBGL_color_buffer_float"))
      return false;
  } else {
    if (Ln(t, "EXT_color_buffer_float"))
      return Hm(t);
    let s = "EXT_color_buffer_half_float";
    if (Ln(t, s)) {
      let r = t.getExtension(s);
      return j5(t, r);
    }
    return false;
  }
  return Hm(t);
}
function Hm(e) {
  let t = hv(e), n = e.createTexture();
  e.bindTexture(e.TEXTURE_2D, n);
  let s = 1, r = 1;
  e.texImage2D(e.TEXTURE_2D, 0, t.internalFormatFloat, s, r, 0, t.textureFormatFloat, t.textureTypeFloat, null);
  let a = e.createFramebuffer();
  e.bindFramebuffer(e.FRAMEBUFFER, a), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, n, 0);
  let i = e.checkFramebufferStatus(e.FRAMEBUFFER) === e.FRAMEBUFFER_COMPLETE;
  return e.bindTexture(e.TEXTURE_2D, null), e.bindFramebuffer(e.FRAMEBUFFER, null), e.deleteTexture(n), e.deleteFramebuffer(a), i;
}
function j5(e, t) {
  let n = hv(e, t), s = e.createTexture();
  e.bindTexture(e.TEXTURE_2D, s);
  let r = 1, a = 1;
  e.texImage2D(e.TEXTURE_2D, 0, n.internalFormatHalfFloat, r, a, 0, n.textureFormatFloat, n.textureTypeHalfFloat, null);
  let i = e.createFramebuffer();
  e.bindFramebuffer(e.FRAMEBUFFER, i), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, s, 0);
  let o = e.checkFramebufferStatus(e.FRAMEBUFFER) === e.FRAMEBUFFER_COMPLETE;
  return e.bindTexture(e.TEXTURE_2D, null), e.bindFramebuffer(e.FRAMEBUFFER, null), e.deleteTexture(s), e.deleteFramebuffer(i), o;
}
function g1(e) {
  return e !== 2 ? false : vs(e).fenceSync != null;
}
function su(e, t) {
  Array.isArray(e) || (e = [e]), e.forEach((n) => {
    n != null && w.assert(n.dtype !== "complex64", () => `${t} does not support complex64 tensors in the WebGL backend.`);
  });
}
var Ne = X();
Ne.registerFlag("HAS_WEBGL", () => Ne.getNumber("WEBGL_VERSION") > 0);
Ne.registerFlag("WEBGL_VERSION", () => Gm(2) ? 2 : Gm(1) ? 1 : 0);
Ne.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => false);
Ne.registerFlag("WEBGL_BUFFER_SUPPORTED", () => Ne.get("WEBGL_VERSION") === 2);
Ne.registerFlag("WEBGL_CPU_FORWARD", () => true);
Ne.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => false);
Ne.registerFlag("WEBGL_PACK", () => Ne.getBool("HAS_WEBGL"));
Ne.registerFlag("WEBGL_PACK_NORMALIZATION", () => Ne.getBool("WEBGL_PACK"));
Ne.registerFlag("WEBGL_PACK_CLIP", () => Ne.getBool("WEBGL_PACK"));
Ne.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => Ne.getBool("WEBGL_PACK"));
Ne.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => Ne.getBool("WEBGL_PACK"));
Ne.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => Ne.getBool("WEBGL_PACK"));
Ne.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => Ne.getBool("WEBGL_PACK"));
Ne.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => Ne.getBool("WEBGL_PACK"));
Ne.registerFlag("WEBGL_PACK_REDUCE", () => Ne.getBool("WEBGL_PACK"));
Ne.registerFlag("WEBGL_LAZILY_UNPACK", () => Ne.getBool("WEBGL_PACK"));
Ne.registerFlag("WEBGL_CONV_IM2COL", () => Ne.getBool("WEBGL_PACK"));
Ne.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => d1(Ne.getNumber("WEBGL_VERSION")));
Ne.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => p1(Ne.getNumber("WEBGL_VERSION")));
Ne.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  let e = Ne.getNumber("WEBGL_VERSION");
  return e === 0 ? 0 : h1(e);
});
Ne.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => Ne.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !hp.isMobile());
Ne.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => f1(Ne.getNumber("WEBGL_VERSION")));
Ne.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => Ne.getBool("WEBGL_FORCE_F16_TEXTURES") ? false : Ne.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
Ne.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => m1(Ne.getNumber("WEBGL_VERSION")));
Ne.registerFlag("WEBGL_FENCE_API_ENABLED", () => g1(Ne.getNumber("WEBGL_VERSION")));
Ne.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => Ne.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
Ne.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (e) => {
  if (e < 0 && e !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`);
});
Ne.registerFlag("WEBGL_FLUSH_THRESHOLD", () => hp.isMobile() ? 1 : -1, (e) => {
  if (e < 0 && e !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`);
});
Ne.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
Ne.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => false);
Ne.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
Ne.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
function fn() {
  let e, t, n, s, r, a, i, o, u, l;
  return X().getNumber("WEBGL_VERSION") === 2 ? (e = "#version 300 es", t = "in", n = "out", s = "in", r = "texture", a = "outputColor", i = "out vec4 outputColor;", o = `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `, u = "", l = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (e = "", t = "attribute", n = "varying", s = "varying", r = "texture2D", a = "gl_FragColor", i = "", o = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, u = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, l = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), { version: e, attribute: t, varyingVs: n, varyingFs: s, texture2D: r, output: a, defineOutput: i, defineSpecialNaN: o, defineSpecialInf: u, defineRound: l };
}
function wi(e, t, n = "index") {
  let s = w.computeStrides(t);
  return s.map((r, a) => {
    let i = `int ${e[a]} = ${n} / ${r}`, o = a === s.length - 1 ? `int ${e[a + 1]} = ${n} - ${e[a]} * ${r}` : `index -= ${e[a]} * ${r}`;
    return `${i}; ${o};`;
  }).join("");
}
function Kp(e, t, n = "index") {
  let s = w.computeStrides(t);
  return s.map((r, a) => {
    let i = `int ${e[a]} = ${n} / outShapeStrides[${a}]`, o = a === s.length - 1 ? `int ${e[a + 1]} = ${n} - ${e[a]} * outShapeStrides[${a}]` : `index -= ${e[a]} * outShapeStrides[${a}]`;
    return `${i}; ${o};`;
  }).join("");
}
function K5(e, t) {
  let n = e.length, s = e.map((a) => `${t}[${a}]`), r = new Array(n - 1);
  r[n - 2] = s[n - 1];
  for (let a = n - 3; a >= 0; --a)
    r[a] = `(${r[a + 1]} * ${s[a + 1]})`;
  return r;
}
function X5(e, t, n = "index") {
  let s = e.map((a, i) => i), r = K5(s, t);
  return r.map((a, i) => {
    let o = `int ${e[i]} = ${n} / ${r[i]}`, u = i === r.length - 1 ? `int ${e[i + 1]} = ${n} - ${e[i]} * ${r[i]}` : `index -= ${e[i]} * ${r[i]}`;
    return `${o}; ${u};`;
  }).join("");
}
function mv(e) {
  let t = w.computeStrides(e).map((n) => n.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`;
}
function gv() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
var b1 = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
var { getBroadcastDims: y1 } = C;
function Y5(e, t, n) {
  let s = [];
  if (e.forEach((h) => {
    let f = w.sizeFromShape(h.shapeInfo.logicalShape);
    if (h.shapeInfo.isUniform ? s.push(`uniform float ${h.name}${f > 1 ? `[${f}]` : ""};`) : (s.push(`uniform sampler2D ${h.name};`), s.push(`uniform int offset${h.name};`)), n.enableShapeUniforms) {
      let { uniformShape: m } = bv(n.packedInputs, h.shapeInfo.logicalShape, h.shapeInfo.texShape);
      switch (m.length) {
        case 1:
          s.push(`uniform int ${h.name}Shape;`);
          break;
        case 2:
          s.push(`uniform ivec2 ${h.name}Shape;`);
          break;
        case 3:
          s.push(`uniform ivec3 ${h.name}Shape;`);
          break;
        case 4:
          s.push(`uniform ivec4 ${h.name}Shape;`);
          break;
        default:
          break;
      }
      s.push(`uniform ivec2 ${h.name}TexShape;`);
    }
  }), n.enableShapeUniforms) {
    switch (t.logicalShape.length) {
      case 1:
        s.push("uniform int outShape;");
        break;
      case 2:
        s.push("uniform ivec2 outShape;"), s.push("uniform int outShapeStrides;");
        break;
      case 3:
        s.push("uniform ivec3 outShape;"), s.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        s.push("uniform ivec4 outShape;"), s.push("uniform ivec3 outShapeStrides;");
        break;
      default:
        break;
    }
    s.push("uniform ivec2 outTexShape;");
  }
  n.customUniforms && n.customUniforms.forEach((h) => {
    s.push(`uniform ${h.type} ${h.name}${h.arrayIndex ? `[${h.arrayIndex}]` : ""};`);
  });
  let r = s.join(`
`), a = e.map((h) => Q5(h, t, n.packedInputs, n.enableShapeUniforms)).join(`
`), i = t.texShape, o = fn(), u = eK(o), l, c, p = sK(o);
  return t.isPacked ? (l = Z5(t.logicalShape, i, n.enableShapeUniforms), c = nK(o)) : (l = J5(t.logicalShape, i, n.enableShapeUniforms), c = tK(o)), n.packedInputs && (p += oK), [p, u, c, r, l, a, n.userCode].join(`
`);
}
function ru(e, t = false) {
  let n = e.shapeInfo.logicalShape;
  switch (n.length) {
    case 0:
      return vK(e, t);
    case 1:
      return wK(e, t);
    case 2:
      return IK(e, t);
    case 3:
      return CK(e, t);
    case 4:
      return TK(e, t);
    case 5:
      return $K(e);
    case 6:
      return _K(e);
    default:
      throw new Error(`${n.length}-D input sampling is not yet supported`);
  }
}
function v1(e, t) {
  switch (e.shapeInfo.logicalShape.length) {
    case 0:
      return yK(e);
    case 1:
      return xK(e, t);
    case 2:
      return kK(e, t);
    case 3:
      return SK(e, t);
    default:
      return NK(e, t);
  }
}
function Q5(e, t, n = false, s) {
  let r = "";
  n ? r += v1(e, s) : r += ru(e, s);
  let a = e.shapeInfo.logicalShape, i = t.logicalShape;
  return a.length <= i.length && (n ? r += AK(e, t) : r += EK(e, t)), r;
}
function Z5(e, t, n) {
  switch (e.length) {
    case 0:
      return x1();
    case 1:
      return uK(e, t, n);
    case 2:
      return gK(e, t, n);
    case 3:
      return cK(e, t, n);
    default:
      return pK(e, t, n);
  }
}
function J5(e, t, n) {
  switch (e.length) {
    case 0:
      return x1();
    case 1:
      return lK(e, t, n);
    case 2:
      return bK(e, t, n);
    case 3:
      return dK(e, t, n);
    case 4:
      return hK(e, t, n);
    case 5:
      return fK(e, t);
    case 6:
      return mK(e, t);
    default:
      throw new Error(`${e.length}-D output sampling is not yet supported`);
  }
}
function eK(e) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${e.texture2D}(textureSampler, uv).r;
    }
  `;
}
function tK(e) {
  return `
    void setOutput(float val) {
      ${e.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function nK(e) {
  return `
    void setOutput(vec4 val) {
      ${e.output} = val;
    }
  `;
}
function sK(e) {
  return `${e.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${e.varyingFs} vec2 resultUV;
    ${e.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${e.defineSpecialNaN}
    ${e.defineSpecialInf}
    ${e.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${rK}
    ${aK}
    ${iK}
  `;
}
var rK = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var aK = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var iK = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var oK = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function x1() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function uK(e, t, n) {
  let s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  return s[0] === 1 ? n ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    ` : s[1] === 1 ? n ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    ` : n ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;
}
function lK(e, t, n) {
  return t[0] === 1 ? n ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    ` : t[1] === 1 ? n ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    ` : n ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `;
}
function cK(e, t, n) {
  if (n)
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  let s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], r = Math.ceil(e[2] / 2), a = r * Math.ceil(e[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${a};
      index -= b * ${a};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function dK(e, t, n) {
  if (n)
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Kp(["r", "c", "d"], e)}
    return ivec3(r, c, d);
  }
`;
  let s = wi(["r", "c", "d"], e);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `;
}
function pK(e, t, n) {
  if (n)
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  let s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], r = Math.ceil(e[e.length - 1] / 2), a = r * Math.ceil(e[e.length - 2] / 2), i = a, o = "", u = "b, r, c";
  for (let l = 2; l < e.length - 1; l++)
    i *= e[e.length - l - 1], o = `
      int b${l} = index / ${i};
      index -= b${l} * ${i};
    ` + o, u = `b${l}, ` + u;
  return `
    ivec${e.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${o}

      int b = index / ${a};
      index -= b * ${a};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec${e.length}(${u});
    }
  `;
}
function hK(e, t, n) {
  if (n)
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Kp(["r", "c", "d", "d2"], e)}
      return ivec4(r, c, d, d2);
    }
  `;
  let s = wi(["r", "c", "d", "d2"], e);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `;
}
function fK(e, t) {
  let n = wi(["r", "c", "d", "d2", "d3"], e);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${n}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function mK(e, t) {
  let n = wi(["r", "c", "d", "d2", "d3", "d4"], e);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${n}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function gK(e, t, n) {
  let s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  if (w.arraysEqual(e, t))
    return n ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;
  let r = Math.ceil(e[1] / 2);
  return n ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec2(r, c);
    }
  `;
}
function bK(e, t, n) {
  return w.arraysEqual(e, t) ? n ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    ` : e[1] === 1 ? n ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : e[0] === 1 ? n ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : n ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${e[1]};
      int c = index - r * ${e[1]};
      return ivec2(r, c);
    }
  `;
}
function ki(e) {
  return `offset${e}`;
}
function yK(e) {
  let t = e.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), s = fn();
  return `
    vec4 ${n}() {
      return ${s.texture2D}(${t}, halfCR);
    }
  `;
}
function vK(e, t) {
  let n = e.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1);
  if (e.shapeInfo.isUniform)
    return `float ${s}() {return ${n};}`;
  let [r, a] = e.shapeInfo.texShape;
  if (r === 1 && a === 1)
    return `
      float ${s}() {
        return sampleTexture(${n}, halfCR);
      }
    `;
  let i = ki(n);
  if (t)
    return `
    float ${s}() {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});
      return sampleTexture(${n}, uv);
    }
  `;
  let [o, u] = e.shapeInfo.texShape;
  return `
    float ${s}() {
      vec2 uv = uvFromFlat(${o}, ${u}, ${i});
      return sampleTexture(${n}, uv);
    }
  `;
}
function xK(e, t) {
  let n = e.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = e.shapeInfo.texShape, a = fn();
  if (t)
    return `
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${a.texture2D}(${n}, uv);
    }
  `;
  let i = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)];
  return `
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${a.texture2D}(${n}, uv);
    }
  `;
}
function wK(e, t) {
  let n = e.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1);
  if (e.shapeInfo.isUniform)
    return `
      float ${s}(int index) {
        ${au(e)}
      }
    `;
  let r = e.shapeInfo.texShape, a = r[0], i = r[1];
  if (i === 1 && a === 1)
    return `
      float ${s}(int index) {
        return sampleTexture(${n}, halfCR);
      }
    `;
  let o = ki(n);
  return i === 1 ? t ? `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));
        return sampleTexture(${n}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);
        return sampleTexture(${n}, uv);
      }
    ` : a === 1 ? t ? `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);
        return sampleTexture(${n}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${n}, uv);
      }
    ` : t ? `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});
      return sampleTexture(${n}, uv);
    }
  ` : `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});
      return sampleTexture(${n}, uv);
    }
  `;
}
function kK(e, t) {
  let n = e.shapeInfo.logicalShape, s = e.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), a = e.shapeInfo.texShape, i = a[0], o = a[1], u = fn();
  if (a != null && w.arraysEqual(n, a))
    return t ? `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${u.texture2D}(${s}, uv);
      }
    ` : `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);

        return ${u.texture2D}(${s}, uv);
      }
    `;
  if (t)
    return `
    vec4 ${r}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${u.texture2D}(${s}, uv);
    }
  `;
  let l = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)], c = Math.ceil(n[1] / 2);
  return `
    vec4 ${r}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${l[0]}, ${l[1]}, row, col);
      return ${u.texture2D}(${s}, uv);
    }
  `;
}
function IK(e, t) {
  let n = e.shapeInfo.logicalShape, s = e.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), a = e.shapeInfo.texShape;
  if (a != null && w.arraysEqual(n, a)) {
    if (t)
      return `
      float ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `;
    let d = a[0], h = a[1];
    return `
    float ${r}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${h}.0, ${d}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  }
  let { newShape: i, keptDims: o } = w.squeezeShape(n), u = i;
  if (u.length < n.length) {
    let d = iu(e, u), h = ["row", "col"];
    return `
      ${ru(d, t)}
      float ${r}(int row, int col) {
        return ${r}(${ou(h, o)});
      }
    `;
  }
  if (e.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));
        ${au(e)}
      }
    `;
  let l = a[0], c = a[1], p = ki(s);
  return c === 1 ? t ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);
      return sampleTexture(${s}, uv);
    }
  ` : l === 1 ? t ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${s}, uv);
    }
  ` : t ? `
      float ${r}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
        return sampleTexture(${s}, uv);
      }
    ` : `
  float ${r}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${n[1]} + col + ${p};
    vec2 uv = uvFromFlat(${l}, ${c}, index);
    return sampleTexture(${s}, uv);
  }
`;
}
function SK(e, t) {
  let n = e.shapeInfo.logicalShape, s = e.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), a = e.shapeInfo.texShape, i = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)];
  if (n[0] === 1) {
    let d = n.slice(1), h = [1, 2], f = iu(e, d), m = ["b", "row", "col"];
    return `
        ${v1(f, t)}
        vec4 ${r}(int b, int row, int col) {
          return ${r}(${ou(m, h)});
        }
      `;
  }
  let o = fn();
  if (t)
    return `
    vec4 ${r}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${o.texture2D}(${s}, uv);
    }
  `;
  let u = i[0], l = i[1], c = Math.ceil(n[2] / 2), p = c * Math.ceil(n[1] / 2);
  return `
    vec4 ${r}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${u}, ${l}, ${p}, ${c}, b, row, col);
      return ${o.texture2D}(${s}, uv);
    }
  `;
}
function CK(e, t) {
  let n = e.shapeInfo.logicalShape, s = e.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), a = n[1] * n[2], i = n[2], { newShape: o, keptDims: u } = w.squeezeShape(n), l = o;
  if (l.length < n.length) {
    let m = iu(e, l), g = ["row", "col", "depth"];
    return `
        ${ru(m, t)}
        float ${r}(int row, int col, int depth) {
          return ${r}(${ou(g, u)});
        }
      `;
  }
  if (e.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${a}, ${i}, 1)));
        ${au(e)}
      }
    `;
  let c = e.shapeInfo.texShape, p = c[0], d = c[1], h = e.shapeInfo.flatOffset;
  if (d === a && h == null)
    return t ? `
      float ${r}(int row, int col, int depth) {
        int stride1 = ${s}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
        float ${r}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${p}.0);
          return sampleTexture(${s}, uv);
        }
      `;
  if (d === i && h == null)
    return t ? `
      float ${r}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${p}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  let f = ki(s);
  return t ? `
    float ${r}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${s}Shape[1] * ${s}Shape[2];
      int stride1 = ${s}Shape[2];
      int index = row * ${a} + col * ${i} + depth + ${f};
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
      return sampleTexture(${s}, uv);
    }
    ` : `
      float ${r}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a} + col * ${i} + depth + ${f};
        vec2 uv = uvFromFlat(${p}, ${d}, index);
        return sampleTexture(${s}, uv);
      }
  `;
}
function NK(e, t) {
  let n = e.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = fn();
  if (t)
    return `
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${n}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);
    }
  `;
  let a = e.shapeInfo.logicalShape, i = a.length, o = e.shapeInfo.texShape, u = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)], l = u[0], c = u[1], p = Math.ceil(a[i - 1] / 2), d = p * Math.ceil(a[i - 2] / 2), h = "int b, int row, int col", f = `b * ${d} + (row / 2) * ${p} + (col / 2)`;
  for (let m = 2; m < i - 1; m++)
    h = `int b${m}, ` + h, d *= a[i - m - 1], f = `b${m} * ${d} + ` + f;
  return `
    vec4 ${s}(${h}) {
      int index = ${f};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});
      return ${r.texture2D}(${n}, uv);
    }
  `;
}
function TK(e, t) {
  let n = e.shapeInfo.logicalShape, s = e.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), a = n[3], i = n[2] * a, o = n[1] * i, { newShape: u, keptDims: l } = w.squeezeShape(n);
  if (u.length < n.length) {
    let y = iu(e, u), v = ["row", "col", "depth", "depth2"];
    return `
      ${ru(y, t)}
      float ${r}(int row, int col, int depth, int depth2) {
        return ${r}(${ou(v, l)});
      }
    `;
  }
  if (e.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${o}, ${i}, ${a}, 1)));
        ${au(e)}
      }
    `;
  let c = e.shapeInfo.flatOffset, p = e.shapeInfo.texShape, d = p[0], h = p[1], f = `int stride2 = ${s}Shape[3];`, m = `int stride1 = ${s}Shape[2] * stride2;`, g = `int stride0 = ${s}Shape[1] * stride1;`;
  if (h === o && c == null)
    return t ? `
      float ${r}(int row, int col, int depth, int depth2) {
        ${f}
        ${m}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${a}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  if (h === a && c == null)
    return t ? `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${n[1] * n[2]}, ${n[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  let b = ki(s);
  return t ? `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${m}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${b});
      return sampleTexture(${s}, uv);
    }
  ` : `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${o} + col * ${i} +
          depth * ${a} + depth2;
      vec2 uv = uvFromFlat(${d}, ${h}, index + ${b});
      return sampleTexture(${s}, uv);
    }
  `;
}
function $K(e) {
  let t = e.shapeInfo.logicalShape, n = e.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = t[4], a = t[3] * r, i = t[2] * a, o = t[1] * i, { newShape: u, keptDims: l } = w.squeezeShape(t);
  if (u.length < t.length) {
    let m = iu(e, u), g = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${ru(m)}
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        return ${s}(${ou(g, l)});
      }
    `;
  }
  if (e.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${o}, ${i}, ${a}, ${r})) +
          depth3;
        ${au(e)}
      }
    `;
  let c = e.shapeInfo.flatOffset, p = e.shapeInfo.texShape, d = p[0], h = p[1];
  if (h === o && c == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${a}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${d}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  if (h === r && c == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3]},
               ${t[2] * t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${d}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  let f = ki(n);
  return `
    float ${s}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${o} + col * ${i} + depth * ${a} +
          depth2 * ${r} + depth3 + ${f};
      vec2 uv = uvFromFlat(${d}, ${h}, index);
      return sampleTexture(${n}, uv);
    }
  `;
}
function _K(e) {
  let t = e.shapeInfo.logicalShape, n = e.name, s = "get" + n.charAt(0).toUpperCase() + n.slice(1), { newShape: r, keptDims: a } = w.squeezeShape(t);
  if (r.length < t.length) {
    let g = iu(e, r), b = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${ru(g)}
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${s}(${ou(b, a)});
      }
    `;
  }
  let i = t[5], o = t[4] * i, u = t[3] * o, l = t[2] * u, c = t[1] * l;
  if (e.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${l}, ${u}, ${o})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${au(e)}
      }
    `;
  let p = e.shapeInfo.flatOffset, d = e.shapeInfo.texShape, h = d[0], f = d[1];
  if (f === c && p == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${l}, ${u}, ${o}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${h}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  if (f === i && p == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3] * t[4]},
               ${t[2] * t[3] * t[4]},
               ${t[3] * t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${h}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  let m = ki(n);
  return `
    float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${l} + depth * ${u} +
          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};
      vec2 uv = uvFromFlat(${h}, ${f}, index);
      return sampleTexture(${n}, uv);
    }
  `;
}
function au(e) {
  let t = e.name, n = w.sizeFromShape(e.shapeInfo.logicalShape);
  return n < 2 ? `return ${t};` : `
    for (int i = 0; i < ${n}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `;
}
function AK(e, t) {
  let n = e.name, s = n.charAt(0).toUpperCase() + n.slice(1), r = "get" + s + "AtOutCoords", a = e.shapeInfo.logicalShape.length, i = t.logicalShape.length, o = y1(e.shapeInfo.logicalShape, t.logicalShape), u = ot(i), l = i - a, c, p = ["x", "y", "z", "w", "u", "v"];
  a === 0 ? c = "" : i < 2 && o.length >= 1 ? c = "coords = 0;" : c = o.map((y) => `coords.${p[y + l]} = 0;`).join(`
`);
  let d = "";
  i < 2 && a > 0 ? d = "coords" : d = e.shapeInfo.logicalShape.map((y, v) => `coords.${p[v + l]}`).join(", ");
  let h = "return outputValue;", m = w.sizeFromShape(e.shapeInfo.logicalShape) === 1, b = w.sizeFromShape(t.logicalShape) === 1;
  if (a === 1 && !m && !b)
    h = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (m && !b)
    i === 1 ? h = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : h = `
        return vec4(outputValue.x);
      `;
  else if (o.length) {
    let y = a - 2, v = a - 1;
    o.indexOf(y) > -1 && o.indexOf(v) > -1 ? h = "return vec4(outputValue.x);" : o.indexOf(y) > -1 ? h = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : o.indexOf(v) > -1 && (h = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${r}() {
      ${u} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${s}(${d});
      ${h}
    }
  `;
}
function EK(e, t) {
  let n = e.name, s = n.charAt(0).toUpperCase() + n.slice(1), r = "get" + s + "AtOutCoords", a = t.texShape, i = e.shapeInfo.texShape, o = e.shapeInfo.logicalShape.length, u = t.logicalShape.length;
  if (!e.shapeInfo.isUniform && o === u && e.shapeInfo.flatOffset == null && w.arraysEqual(i, a))
    return `
      float ${r}() {
        return sampleTexture(${n}, resultUV);
      }
    `;
  let l = ot(u), c = y1(e.shapeInfo.logicalShape, t.logicalShape), p = u - o, d, h = ["x", "y", "z", "w", "u", "v"];
  o === 0 ? d = "" : u < 2 && c.length >= 1 ? d = "coords = 0;" : d = c.map((m) => `coords.${h[m + p]} = 0;`).join(`
`);
  let f = "";
  return u < 2 && o > 0 ? f = "coords" : f = e.shapeInfo.logicalShape.map((m, g) => `coords.${h[g + p]}`).join(", "), `
    float ${r}() {
      ${l} coords = getOutputCoords();
      ${d}
      return get${s}(${f});
    }
  `;
}
function ot(e) {
  if (e <= 1)
    return "int";
  if (e === 2)
    return "ivec2";
  if (e === 3)
    return "ivec3";
  if (e === 4)
    return "ivec4";
  if (e === 5)
    return "ivec5";
  if (e === 6)
    return "ivec6";
  throw Error(`GPU for rank ${e} is not yet supported`);
}
function bv(e, t, n) {
  let { newShape: s, keptDims: r } = w.squeezeShape(t), a = t.length, i = e && a === 3 && t[0] === 1, o = i ? t.slice(1) : s, u = !e && a > 1 && !w.arraysEqual(t, n) && s.length < a || i;
  return { useSqueezeShape: u, uniformShape: u ? o : t, keptDims: r };
}
function iu(e, t) {
  let n = JSON.parse(JSON.stringify(e));
  return n.shapeInfo.logicalShape = t, n;
}
function ou(e, t) {
  return t.map((n) => e[n]).join(", ");
}
function RK(e, t, n, s) {
  let r = n.map((c, p) => {
    let d = { logicalShape: c.shape, texShape: c.isUniform ? null : c.texData.texShape, isUniform: c.isUniform, isPacked: c.isUniform ? false : c.texData.isPacked, flatOffset: null };
    return c.texData != null && c.texData.slice != null && c.texData.slice.flatOffset > 0 && (d.flatOffset = c.texData.slice.flatOffset), { name: t.variableNames[p], shapeInfo: d };
  }), a = r.map((c) => c.shapeInfo), i = { logicalShape: s.shape, texShape: s.texData.texShape, isUniform: false, isPacked: s.texData.isPacked, flatOffset: null }, o = Y5(r, i, t), u = YC(e.gl, o), l = e.createProgram(u);
  return X().get("ENGINE_COMPILE_ONLY") ? { program: t, fragmentShader: u, source: o, webGLProgram: l, inShapeInfos: a, outShapeInfo: i, uniformLocations: null, customUniformLocations: null, infLoc: null, nanLoc: null, inShapesLocations: null, inTexShapesLocations: null, outShapeLocation: null, outShapeStridesLocation: null, outTexShapeLocation: null } : { program: t, fragmentShader: u, source: o, webGLProgram: l, inShapeInfos: a, outShapeInfo: i, ...w1(e, t, l) };
}
function w1(e, t, n) {
  let s = {}, r = {}, a = {}, i = [], o, u, l, c = null, p = null;
  p = e.getUniformLocation(n, "NAN", false), X().getNumber("WEBGL_VERSION") === 1 && (c = e.getUniformLocation(n, "INFINITY", false));
  let d = false;
  for (let h = 0; h < t.variableNames.length; h++) {
    let f = t.variableNames[h];
    s[f] = e.getUniformLocation(n, f, d), s[`offset${f}`] = e.getUniformLocation(n, `offset${f}`, d), t.enableShapeUniforms && (r[`${f}Shape`] = e.getUniformLocation(n, `${f}Shape`, d), a[`${f}TexShape`] = e.getUniformLocation(n, `${f}TexShape`, d));
  }
  return t.enableShapeUniforms && (o = e.getUniformLocation(n, "outShape", d), l = e.getUniformLocation(n, "outShapeStrides", d), u = e.getUniformLocation(n, "outTexShape", d)), t.customUniforms && t.customUniforms.forEach((h, f) => {
    i[f] = e.getUniformLocation(n, h.name, d);
  }), { uniformLocations: s, customUniformLocations: i, infLoc: c, nanLoc: p, inShapesLocations: r, inTexShapesLocations: a, outShapeLocation: o, outShapeStridesLocation: l, outTexShapeLocation: u };
}
function aw(e, t) {
  if (e.length !== t.length)
    throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);
  e.forEach((n, s) => {
    let r = n.logicalShape, a = t[s], i = a.shape;
    if (!w.arraysEqual(r, i))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);
    if (n.isUniform && a.isUniform)
      return;
    let o = n.texShape, u = a.isUniform ? null : a.texData.texShape;
    if (!w.arraysEqual(o, u))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${u} must match`);
  });
}
function DK(e, t, n, s, r) {
  t.program.enableShapeUniforms || (aw(t.inShapeInfos, n), aw([t.outShapeInfo], [s]));
  let a = s.texData.texture, i = s.texData.texShape;
  s.texData.isPacked ? e.setOutputPackedMatrixTexture(a.texture, i[0], i[1]) : e.setOutputMatrixTexture(a.texture, i[0], i[1]), e.setProgram(t.webGLProgram), X().getNumber("WEBGL_VERSION") === 1 && t.infLoc !== null && e.gl.uniform1f(t.infLoc, 1 / 0), t.nanLoc !== null && e.gl.uniform1f(t.nanLoc, NaN), n.forEach((u, l) => {
    let c = t.program.variableNames[l], p = t.uniformLocations[c], d = t.uniformLocations[`offset${c}`], h = t.inShapesLocations[`${c}Shape`], f = t.inTexShapesLocations[`${c}TexShape`];
    if (h) {
      let { uniformShape: m } = bv(t.program.packedInputs, u.shape, u.texData.texShape);
      switch (m.length) {
        case 1:
          e.gl.uniform1iv(h, new Int32Array(m));
          break;
        case 2:
          e.gl.uniform2iv(h, new Int32Array(m));
          break;
        case 3:
          e.gl.uniform3iv(h, new Int32Array(m));
          break;
        case 4:
          e.gl.uniform4iv(h, new Int32Array(m));
          break;
        default:
          break;
      }
    }
    if (f && e.gl.uniform2i(f, u.texData.texShape[0], u.texData.texShape[1]), p != null) {
      if (u.isUniform) {
        if (w.sizeFromShape(u.shape) < 2)
          e.gl.uniform1f(p, u.uniformValues[0]);
        else {
          let m = u.uniformValues;
          m instanceof Float32Array || (m = new Float32Array(m)), e.gl.uniform1fv(p, m);
        }
        return;
      }
      u.texData.slice != null && d != null && e.gl.uniform1i(d, u.texData.slice.flatOffset), e.setInputMatrixTexture(u.texData.texture.texture, p, l);
    }
  });
  let o = t.outShapeLocation;
  if (o)
    switch (s.shape.length) {
      case 1:
        e.gl.uniform1iv(o, new Int32Array(s.shape));
        break;
      case 2:
        e.gl.uniform2iv(o, new Int32Array(s.shape));
        break;
      case 3:
        e.gl.uniform3iv(o, new Int32Array(s.shape));
        break;
      case 4:
        e.gl.uniform4iv(o, new Int32Array(s.shape));
        break;
      default:
        break;
    }
  if (t.outShapeStridesLocation) {
    let u = w.computeStrides(s.shape);
    switch (s.shape.length) {
      case 2:
        e.gl.uniform1iv(t.outShapeStridesLocation, new Int32Array(u));
        break;
      case 3:
        e.gl.uniform2iv(t.outShapeStridesLocation, new Int32Array(u));
        break;
      case 4:
        e.gl.uniform3iv(t.outShapeStridesLocation, new Int32Array(u));
        break;
      default:
        break;
    }
  }
  t.outTexShapeLocation && e.gl.uniform2i(t.outTexShapeLocation, s.texData.texShape[0], s.texData.texShape[1]), t.program.customUniforms && r && t.program.customUniforms.forEach((u, l) => {
    let c = t.customUniformLocations[l], p = r[l];
    if (u.type === "float")
      e.gl.uniform1fv(c, p);
    else if (u.type === "vec2")
      e.gl.uniform2fv(c, p);
    else if (u.type === "vec3")
      e.gl.uniform3fv(c, p);
    else if (u.type === "vec4")
      e.gl.uniform4fv(c, p);
    else if (u.type === "int")
      e.gl.uniform1iv(c, p);
    else if (u.type === "ivec2")
      e.gl.uniform2iv(c, p);
    else if (u.type === "ivec3")
      e.gl.uniform3iv(c, p);
    else if (u.type === "ivec4")
      e.gl.uniform4iv(c, p);
    else
      throw Error(`uniform type ${u.type} is not supported yet.`);
  }), e.executeProgram();
}
function FK(e, t, n) {
  let s = "";
  t.concat(n).forEach((i) => {
    let o = i.texData != null && i.texData.slice != null && i.texData.slice.flatOffset > 0;
    if (e.enableShapeUniforms && !i.isUniform) {
      let u = i.texData.texShape, { useSqueezeShape: l, uniformShape: c, keptDims: p } = bv(e.packedInputs, i.shape, u), d = "", h = "", f = "";
      if (c.length === 1 && e.packedInputs) {
        let k = [Math.ceil(u[0] / 2), Math.ceil(u[1] / 2)];
        d = `${k[0] > 1}_${k[1] > 1}`;
      } else if (c.length === 2 && !e.packedInputs)
        h = `${c[0] > 1}_${c[1] > 1}`;
      else if (c.length > 2 && !e.packedInputs) {
        let k = w.computeStrides(c);
        f = `${k[0] === u[1]}_${k[k.length - 1] === u[1]}`;
      }
      let m = i.shape.length, g = c.length === 2 && w.arraysEqual(i.shape, u), b = w.sizeFromShape(i.shape) === 1, y = C.getBroadcastDims(i.shape, n.shape), v = !e.packedInputs && m === n.shape.length && w.arraysEqual(u, n.texData.texShape), x = e.packedInputs || c.length > 2 ? "" : `${u[0] > 1}_${u[1] > 1}`;
      s += `${m}_${v}_${l ? p : ""}_${c.length}_${b}_${y}_${g}_${d}_${h}_${f}_${x}_${o}`;
    } else {
      let u = i.isUniform ? "uniform" : i.texData.texShape;
      s += `${i.shape}_${u}_${o}`;
    }
  });
  let r = e.userCode, a = e.constructor.name;
  return a += "_" + s + "_" + r + `${X().getNumber("WEBGL_VERSION")}`, a;
}
function In(e) {
  return X().getBool("WEBGL_USE_SHAPES_UNIFORMS") && e <= 4;
}
var OK = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outPackingScheme = 0, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let t = fn();
    this.outputShape = e, this.enableShapeUniforms = In(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Kp(["r", "c", "d"], e) : wi(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `;
  }
};
var PK = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outPackingScheme = 0, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let t = fn();
    this.outputShape = e, this.enableShapeUniforms = In(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Kp(["r", "c", "d"], e) : wi(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `;
  }
};
var zK = class {
  constructor(e) {
    this.variableNames = ["A"], this.outTexUsage = 3;
    let t = fn();
    this.outputShape = e, this.userCode = `
      ${b1}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `;
  }
};
var MK = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outTexUsage = 3;
    let t = fn();
    this.outputShape = e, this.userCode = `
      ${b1}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `;
  }
};
var LK = class {
  constructor(e, t = false) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let n = fn();
    this.outputShape = e, this.enableShapeUniforms = In(this.outputShape.length);
    let s = "result";
    t && (s = "floor(result * 255. + 0.5)"), this.userCode = `
      ${this.enableShapeUniforms ? gv() : mv(e)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${n.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${n.output} = vec4(${s}, 0., 0., 0.);
      }
    `;
  }
};
var BK = class {
  constructor(e, t = false) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let n = fn();
    this.outputShape = e, this.enableShapeUniforms = In(this.outputShape.length);
    let s = "", r = "result";
    t && (r = "floor(result * 255. + 0.5)");
    for (let a = 0; a <= 1; a++)
      for (let i = 0; i <= 1; i++) {
        let o = a * 2 + i;
        s += `
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms ? "outShape[2]" : `${e[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${a} < ${this.enableShapeUniforms ? "outShape[1]" : `${e[1]}`}) {
            localCoords[1] += ${a};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${n.texture2D}(A, uv);

            if (offset == 0) {
              result[${o}] = values[0];
            } else if (offset == 1) {
              result[${o}] = values[1];
            } else if (offset == 2) {
              result[${o}] = values[2];
            } else {
              result[${o}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? gv() : mv(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${s}

          ${n.output} = ${r};
        }
    `;
  }
};
var VK = {};
Ae(VK, { bindVertexProgramAttributeStreams: () => A1, createBufferFromOutputTexture: () => D1, createFloat16MatrixTexture: () => N1, createFloat16PackedMatrixTexture: () => _1, createFloat32MatrixTexture: () => C1, createIndexBuffer: () => S1, createPackedMatrixTexture: () => $1, createUnsignedBytesMatrixTexture: () => T1, createVertexBuffer: () => I1, createVertexShader: () => k1, downloadByteEncodedFloatMatrixFromOutputTexture: () => O1, downloadFloat32MatrixFromBuffer: () => F1, downloadMatrixFromPackedOutputTexture: () => z1, downloadPackedMatrixFromBuffer: () => P1, getInternalFormatForFloat16MatrixTexture: () => vv, getInternalFormatForFloat16PackedMatrixTexture: () => kv, getInternalFormatForFloat32MatrixTexture: () => yv, getInternalFormatForPackedMatrixTexture: () => wv, getInternalFormatForUnsignedBytesMatrixTexture: () => xv, uploadDenseMatrixToTexture: () => E1, uploadPixelDataToTexture: () => R1 });
function k1(e) {
  let t = fn(), n = `${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return XC(e, n);
}
function I1(e) {
  let t = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return JC(e, t);
}
function S1(e) {
  let t = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return e1(e, t);
}
function Ql(e, t, n, s, r, a) {
  n1(t, n);
  let i = t1(e), o = e.TEXTURE_2D;
  return fe(e, () => e.bindTexture(o, i)), fe(e, () => e.texParameteri(o, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE)), fe(e, () => e.texParameteri(o, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE)), fe(e, () => e.texParameteri(o, e.TEXTURE_MIN_FILTER, e.NEAREST)), fe(e, () => e.texParameteri(o, e.TEXTURE_MAG_FILTER, e.NEAREST)), X().getNumber("WEBGL_VERSION") === 1 ? fe(e, () => e.texImage2D(o, 0, s, t, n, 0, r, a, null)) : fe(e, () => e.texStorage2D(o, 1, s, t, n)), fe(e, () => e.bindTexture(e.TEXTURE_2D, null)), { texture: i, texShape: [n, t] };
}
function yv(e) {
  return e.internalFormatFloat;
}
function C1(e, t, n, s) {
  let [r, a] = Yl(t, n);
  return Ql(e, r, a, yv(s), s.textureFormatFloat, e.FLOAT);
}
function vv(e) {
  return e.internalFormatHalfFloat;
}
function N1(e, t, n, s) {
  let [r, a] = Yl(t, n);
  return Ql(e, r, a, vv(s), s.textureFormatFloat, s.textureTypeHalfFloat);
}
function xv(e) {
  return e.downloadTextureFormat;
}
function T1(e, t, n, s) {
  let [r, a] = Yl(t, n);
  return Ql(e, r, a, xv(s), e.RGBA, e.UNSIGNED_BYTE);
}
function wv(e) {
  return e.internalFormatPackedFloat;
}
function $1(e, t, n, s) {
  let [r, a] = nu(t, n);
  return Ql(e, r, a, wv(s), e.RGBA, e.FLOAT);
}
function kv(e) {
  return e.internalFormatPackedHalfFloat;
}
function _1(e, t, n, s) {
  let [r, a] = nu(t, n);
  return Ql(e, r, a, kv(s), e.RGBA, s.textureTypeHalfFloat);
}
function A1(e, t, n) {
  return fe(e, () => e.bindBuffer(e.ARRAY_BUFFER, n)), Wm(e, t, "clipSpacePos", n, 3, 20, 0) && Wm(e, t, "uv", n, 2, 20, 12);
}
function E1(e, t, n, s, r, a) {
  fe(e, () => e.bindTexture(e.TEXTURE_2D, t));
  let i, o, u;
  r instanceof Uint8Array ? (i = new Uint8Array(n * s * 4), o = e.UNSIGNED_BYTE, u = e.RGBA) : (i = new Float32Array(n * s * 4), o = e.FLOAT, u = a.internalFormatPackedFloat), i.set(r), X().getNumber("WEBGL_VERSION") === 2 ? fe(e, () => e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, n, s, e.RGBA, o, i)) : fe(e, () => e.texImage2D(e.TEXTURE_2D, 0, u, n, s, 0, e.RGBA, o, i)), fe(e, () => e.bindTexture(e.TEXTURE_2D, null));
}
function R1(e, t, n) {
  fe(e, () => e.bindTexture(e.TEXTURE_2D, t)), n.data instanceof Uint8Array ? X().getNumber("WEBGL_VERSION") === 2 ? fe(e, () => e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, n.width, n.height, e.RGBA, e.UNSIGNED_BYTE, n.data)) : fe(e, () => e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, n.width, n.height, 0, e.RGBA, e.UNSIGNED_BYTE, n.data)) : X().getNumber("WEBGL_VERSION") === 2 ? fe(e, () => e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, e.RGBA, e.UNSIGNED_BYTE, n)) : fe(e, () => e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, e.RGBA, e.UNSIGNED_BYTE, n)), fe(e, () => e.bindTexture(e.TEXTURE_2D, null));
}
function D1(e, t, n, s) {
  let r = e.createBuffer();
  fe(e, () => e.bindBuffer(e.PIXEL_PACK_BUFFER, r));
  let o = 4 * 4 * t * n;
  return fe(e, () => e.bufferData(e.PIXEL_PACK_BUFFER, o, e.STREAM_READ)), fe(e, () => e.readPixels(0, 0, n, t, e.RGBA, e.FLOAT, 0)), fe(e, () => e.bindBuffer(e.PIXEL_PACK_BUFFER, null)), r;
}
function F1(e, t, n) {
  let s = e, r = new Float32Array(n);
  return s.bindBuffer(s.PIXEL_PACK_BUFFER, t), s.getBufferSubData(s.PIXEL_PACK_BUFFER, 0, r), s.bindBuffer(s.PIXEL_PACK_BUFFER, null), r;
}
function O1(e, t, n, s) {
  let [r, a] = Yl(t, n), i = 4, o = new Uint8Array(P5(t * n, i));
  return fe(e, () => e.readPixels(0, 0, r, a, s.downloadTextureFormat, e.UNSIGNED_BYTE, o)), new Float32Array(o.buffer);
}
function P1(e, t, n, s, r, a, i, o) {
  let u = e, l = new Float32Array(z5(a, i));
  return u.bindBuffer(u.PIXEL_PACK_BUFFER, t), u.getBufferSubData(u.PIXEL_PACK_BUFFER, 0, l), u.bindBuffer(u.PIXEL_PACK_BUFFER, null), l;
}
function z1(e, t, n) {
  let s = new Float32Array(t * n * 4);
  return fe(e, () => e.readPixels(0, 0, n, t, e.RGBA, e.FLOAT, s)), s;
}
var Xf = class {
  constructor(e) {
    this.outputTexture = null, this.program = null, this.disposed = false, this.vertexAttrsAreBound = false, this.itemsToPoll = [];
    let t = X().getNumber("WEBGL_VERSION");
    e != null ? (this.gl = e, D5(t, e)) : this.gl = vs(t);
    let n = "WEBGL_color_buffer_float", s = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), X().getNumber("WEBGL_VERSION") === 1) {
      let r = "OES_texture_float", a = "OES_texture_half_float";
      if (this.textureFloatExtension = Ou(this.gl, r), Ln(this.gl, a))
        this.textureHalfFloatExtension = Ou(this.gl, a);
      else if (X().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(n), Ln(this.gl, s))
        this.colorBufferHalfFloatExtension = Ou(this.gl, s);
      else if (X().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (n = "EXT_color_buffer_float", Ln(this.gl, n))
      this.colorBufferFloatExtension = this.gl.getExtension(n);
    else if (Ln(this.gl, s))
      this.colorBufferHalfFloatExtension = this.gl.getExtension(s);
    else
      throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = I1(this.gl), this.indexBuffer = S1(this.gl), this.framebuffer = s1(this.gl), this.textureConfig = hv(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return X().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    let e = this.gl;
    fe(e, () => e.finish()), fe(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)), fe(e, () => e.deleteFramebuffer(this.framebuffer)), fe(e, () => e.bindBuffer(e.ARRAY_BUFFER, null)), fe(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null)), fe(e, () => e.deleteBuffer(this.indexBuffer)), this.disposed = true;
  }
  createFloat32MatrixTexture(e, t) {
    return this.throwIfDisposed(), C1(this.gl, e, t, this.textureConfig);
  }
  createFloat16MatrixTexture(e, t) {
    return this.throwIfDisposed(), N1(this.gl, e, t, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(e, t) {
    return this.throwIfDisposed(), T1(this.gl, e, t, this.textureConfig);
  }
  uploadPixelDataToTexture(e, t) {
    this.throwIfDisposed(), R1(this.gl, e, t);
  }
  uploadDenseMatrixToTexture(e, t, n, s) {
    this.throwIfDisposed(), E1(this.gl, e, t, n, s, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(e, t) {
    return this.throwIfDisposed(), _1(this.gl, e, t, this.textureConfig);
  }
  createPackedMatrixTexture(e, t) {
    return this.throwIfDisposed(), $1(this.gl, e, t, this.textureConfig);
  }
  deleteMatrixTexture(e) {
    this.throwIfDisposed(), this.outputTexture === e && (Um(this.gl, this.framebuffer), this.outputTexture = null), fe(this.gl, () => this.gl.deleteTexture(e));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(e, t, n) {
    return this.downloadMatrixDriver(e, () => O1(this.gl, t, n, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(e, t, n, s, r, a) {
    return P1(this.gl, e, t, n, s, r, a, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(e, t) {
    return F1(this.gl, e, t);
  }
  createBufferFromTexture(e, t, n) {
    this.bindTextureToFrameBuffer(e);
    let s = D1(this.gl, t, n, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), s;
  }
  createAndWaitForFence() {
    let e = this.createFence(this.gl);
    return this.pollFence(e);
  }
  createFence(e) {
    let t, n;
    if (X().getBool("WEBGL_FENCE_API_ENABLED")) {
      let s = e, r = s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE, 0);
      e.flush(), n = () => {
        let a = s.clientWaitSync(r, 0, 0);
        return a === s.ALREADY_SIGNALED || a === s.CONDITION_SATISFIED;
      }, t = r;
    } else
      X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (t = this.beginQuery(), this.endQuery(), n = () => this.isQueryAvailable(t, X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : n = () => true;
    return { query: t, isFencePassed: n };
  }
  downloadMatrixFromPackedTexture(e, t, n) {
    return this.downloadMatrixDriver(e, () => z1(this.gl, t, n));
  }
  createProgram(e) {
    this.throwIfDisposed();
    let t = this.gl;
    this.vertexShader == null && (this.vertexShader = k1(t));
    let n = QC(t);
    return fe(t, () => t.attachShader(n, this.vertexShader)), fe(t, () => t.attachShader(n, e)), ZC(t, n), this.debug && rd(t, n), this.vertexAttrsAreBound || (this.setProgram(n), this.vertexAttrsAreBound = A1(t, this.program, this.vertexBuffer)), n;
  }
  deleteProgram(e) {
    this.throwIfDisposed(), e === this.program && (this.program = null), e != null && fe(this.gl, () => this.gl.deleteProgram(e));
  }
  setProgram(e) {
    this.throwIfDisposed(), this.program = e, this.program != null && this.debug && rd(this.gl, this.program), fe(this.gl, () => this.gl.useProgram(e));
  }
  getUniformLocation(e, t, n = true) {
    return this.throwIfDisposed(), n ? a1(this.gl, e, t) : i1(this.gl, e, t);
  }
  getAttributeLocation(e, t) {
    return this.throwIfDisposed(), fe(this.gl, () => this.gl.getAttribLocation(e, t));
  }
  getUniformLocationNoThrow(e, t) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(e, t);
  }
  setInputMatrixTexture(e, t, n) {
    this.throwIfDisposed(), this.throwIfNoProgram(), o1(this.gl, e, t, n);
  }
  setOutputMatrixTexture(e, t, n) {
    this.setOutputMatrixTextureDriver(e, n, t);
  }
  setOutputPackedMatrixTexture(e, t, n) {
    this.throwIfDisposed();
    let [s, r] = nu(t, n);
    this.setOutputMatrixTextureDriver(e, s, r);
  }
  setOutputMatrixWriteRegion(e, t, n, s) {
    this.setOutputMatrixWriteRegionDriver(n, e, s, t);
  }
  setOutputPackedMatrixWriteRegion(e, t, n, s) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && rd(this.gl, this.program), Pu(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    let e = this.gl;
    this.debug && this.debugValidate(), fe(e, () => e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), fe(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = Ou(this.gl, X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      let n = this.gl, s = this.getQueryTimerExtensionWebGL2(), r = n.createQuery();
      return n.beginQuery(s.TIME_ELAPSED_EXT, r), r;
    }
    let e = this.getQueryTimerExtensionWebGL1(), t = e.createQueryEXT();
    return e.beginQueryEXT(e.TIME_ELAPSED_EXT, t), t;
  }
  endQuery() {
    if (X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      let t = this.gl, n = this.getQueryTimerExtensionWebGL2();
      t.endQuery(n.TIME_ELAPSED_EXT);
      return;
    }
    let e = this.getQueryTimerExtensionWebGL1();
    e.endQueryEXT(e.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(e) {
    return await w.repeatedTry(() => this.disposed || this.isQueryAvailable(e, X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(e, X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(e, t) {
    if (t === 0)
      return null;
    if (t === 2) {
      let n = this.gl;
      return n.getQueryParameter(e, n.QUERY_RESULT) / 1e6;
    } else {
      let n = this.getQueryTimerExtensionWebGL1();
      return n.getQueryObjectEXT(e, n.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(e, t) {
    if (t === 0)
      return true;
    if (t === 2) {
      let n = this.gl, s = this.getQueryTimerExtensionWebGL2(), r = n.getQueryParameter(e, n.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)), r && !this.disjoint;
    } else {
      let n = this.getQueryTimerExtensionWebGL1(), s = n.getQueryObjectEXT(e, n.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)), s && !this.disjoint;
    }
  }
  pollFence(e) {
    return new Promise((t) => {
      this.addItemToPoll(() => e.isFencePassed(), () => t());
    });
  }
  pollItems() {
    let e = WK(this.itemsToPoll.map((t) => t.isDoneFn));
    for (let t = 0; t <= e; ++t) {
      let { resolveFn: n } = this.itemsToPoll[t];
      n();
    }
    this.itemsToPoll = this.itemsToPoll.slice(e + 1);
  }
  addItemToPoll(e, t) {
    this.itemsToPoll.push({ isDoneFn: e, resolveFn: t }), !(this.itemsToPoll.length > 1) && w.repeatedTry(() => (this.pollItems(), this.itemsToPoll.length === 0));
  }
  bindTextureToFrameBuffer(e) {
    this.throwIfDisposed(), ad(this.gl, e, this.framebuffer), this.debug && Pu(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (ad(this.gl, this.outputTexture, this.framebuffer), this.debug && Pu(this.gl)) : Um(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(e, t) {
    this.bindTextureToFrameBuffer(e);
    let n = t();
    return this.unbindTextureToFrameBuffer(), n;
  }
  setOutputMatrixTextureDriver(e, t, n) {
    this.throwIfDisposed();
    let s = this.gl;
    ad(s, e, this.framebuffer), this.debug && Pu(s), this.outputTexture = e, fe(s, () => s.viewport(0, 0, t, n)), fe(s, () => s.scissor(0, 0, t, n));
  }
  setOutputMatrixWriteRegionDriver(e, t, n, s) {
    this.throwIfDisposed(), fe(this.gl, () => this.gl.scissor(e, t, n, s));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
};
function WK(e) {
  let t = 0;
  for (; t < e.length && e[t](); ++t)
    ;
  return t - 1;
}
var { addImpl: UK, bincountImpl: M1, bincountReduceImpl: GK, ceilImpl: HK, concatImpl: qK, equalImpl: jK, expImpl: KK, expm1Impl: XK, floorImpl: YK, gatherNdImpl: QK, gatherV2Impl: ZK, greaterImpl: JK, greaterEqualImpl: eX, lessImpl: tX, lessEqualImpl: nX, linSpaceImpl: sX, logImpl: rX, maxImpl: aX, maximumImpl: iX, minimumImpl: oX, multiplyImpl: uX, negImpl: lX, notEqualImpl: cX, prodImpl: dX, rangeImpl: pX, rsqrtImpl: hX, sigmoidImpl: fX, simpleAbsImpl: L1, sliceImpl: mX, sparseFillEmptyRowsImpl: gX, sparseReshapeImpl: bX, sparseSegmentReductionImpl: B1, sqrtImpl: yX, stridedSliceImpl: vX, stringNGramsImpl: xX, stringSplitImpl: wX, stringToHashBucketFastImpl: kX, subImpl: IX, tileImpl: SX, topKImpl: CX, transposeImpl: Iv, uniqueImpl: NX } = ev;
function V1(e, t) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, t).map((n) => `${e}.${n}`);
}
function un(e, t) {
  return t === 1 ? [e] : V1(e, t);
}
function TX(e, t) {
  if (e === 1)
    return "rc";
  let n = "";
  for (let s = 0; s < e; s++)
    n += t[s], s < e - 1 && (n += ",");
  return n;
}
var $X = class {
  constructor(e) {
    if (this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outputShape = e, this.rank = e.length, this.enableShapeUniforms = In(this.outputShape.length), this.rank === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      let t = un("rc", this.rank), n = ot(this.rank), s = this.getOutOfBoundsCondition(t), r = this.getSetup(t), a = this.getOutput(t);
      this.userCode = `
        void main() {
          ${n} rc = getOutputCoords();

          if(${s}) {
            setOutput(vec4(0));
          } else {
            ${r}

            setOutput(vec4(${a}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(e) {
    let t = [];
    for (let n = 0; n <= 1; n++)
      for (let s = 0; s <= 1; s++) {
        let r = `${n === 0 ? "r" : "rp1"}, ${s === 0 ? "c" : "cp1"}`;
        for (let a = 2; a < this.rank; a++)
          r = `${e[e.length - 1 - a]},` + r;
        t.push(r);
      }
    return t;
  }
  getOutOfBoundsCondition(e) {
    if (this.rank === 1)
      return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let t = "";
    for (let n = this.rank - 2; n < this.rank; n++)
      t += `${e[n]} >= ${this.enableShapeUniforms ? `outShape[${n}]` : this.outputShape[n]}`, n < this.rank - 1 && (t += "||");
    return t;
  }
  getSetup(e) {
    if (this.rank === 1)
      return "";
    let t = e.slice(-2), n = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], s = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${n};
      bool rEdge = rp1 >= ${s};
    `;
  }
  getOutput(e) {
    let t = this.getSourceCoordsArr(e);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`;
  }
};
var W1 = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = e, this.enableShapeUniforms = In(this.outputShape.length);
    let n = "";
    for (let s = 0; s < 4; s++) {
      let r = "thisRC = rc;";
      s % 2 === 1 && (r += "thisRC.z += 1;"), s > 1 && (r += "thisRC.y += 1;"), n += `
        ${r}
        ${s > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${s}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${s > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${_X(t, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? gv() : mv(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : e[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : e[2]};

        ${n}

        setOutput(result);
      }
    `;
  }
};
function _X(e, t) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t ? X5(["r", "c", "d"], "inputShape") : wi(["r", "c", "d"], e)}
      return ivec3(r, c, d);
    }
  `;
}
var AX = class {
  constructor(e) {
    this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.logEnabled = false, this.usedTextures = {};
  }
  acquireTexture(e, t, n) {
    let s = ow(t, n), r = uw(e, s, n);
    r in this.freeTextures || (this.freeTextures[r] = []), r in this.usedTextures || (this.usedTextures[r] = []);
    let a = iw(e, s, this.gpgpu.gl, this.gpgpu.textureConfig, n);
    if (this.freeTextures[r].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= a, this.log();
      let o = this.freeTextures[r].shift();
      return this.usedTextures[r].push(o), o;
    }
    let i;
    return s === 3 ? i = this.gpgpu.createPackedMatrixTexture(e[0], e[1]) : s === 4 ? i = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]) : s === 1 ? i = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : s === 0 ? i = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : s === 2 && (i = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[r].push(i), this.numUsedTextures++, this._numBytesAllocated += a, this.log(), i;
  }
  releaseTexture(e, t, n, s) {
    if (this.freeTextures == null)
      return;
    let r = ow(n, s), a = uw(t, r, s);
    a in this.freeTextures || (this.freeTextures[a] = []);
    let i = iw(t, r, this.gpgpu.gl, this.gpgpu.textureConfig, s), o = X().get("WEBGL_DELETE_TEXTURE_THRESHOLD");
    o !== -1 && this._numBytesAllocated > o ? (this.gpgpu.deleteMatrixTexture(e.texture), this._numBytesAllocated -= i) : (this.freeTextures[a].push(e), this.numFreeTextures++, this._numBytesFree += i), this.numUsedTextures--;
    let u = this.usedTextures[a], l = u.indexOf(e);
    if (l < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    u.splice(l, 1), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    let e = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${e})`);
    let t = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * t)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (let e in this.freeTextures)
        this.freeTextures[e].forEach((t) => {
          this.gpgpu.deleteMatrixTexture(t.texture);
        });
      for (let e in this.usedTextures)
        this.usedTextures[e].forEach((t) => {
          this.gpgpu.deleteMatrixTexture(t.texture);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
};
function EX(e, t) {
  let n = e;
  if (t === n.R32F)
    return 4;
  if (t === n.R16F)
    return 2;
  if (t === n.RGBA32F)
    return 16;
  if (t === e.RGBA)
    return 16;
  if (t === n.RGBA16F)
    return 8;
  if (t === n.RGBA8)
    return 4;
  throw new Error(`Unknown internal format ${t}`);
}
function iw(e, t, n, s, r) {
  let a = RX(t, s), i;
  if (r) {
    let [u, l] = nu(e[0], e[1]);
    i = u * l;
  } else {
    let [u, l] = Yl(e[0], e[1]);
    i = u * l;
  }
  let o = EX(n, a);
  return i * o;
}
function RX(e, t) {
  switch (e) {
    case 3:
      return wv(t);
    case 4:
      return kv(t);
    case 1:
      return yv(t);
    case 0:
      return vv(t);
    case 2:
      return xv(t);
    default:
      throw new Error(`Unknown physical texture type ${e}`);
  }
}
function DX(e) {
  return X().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? e ? 3 : 1 : e ? 4 : 0;
}
function ow(e, t) {
  if (e === 1)
    return 3;
  if (e === 0 || e == null)
    return DX(t);
  if (e === 3 || e === 2)
    return 2;
  throw new Error(`Unknown logical texture type ${e}`);
}
function uw(e, t, n) {
  return `${e[0]}_${e[1]}_${t}_${n}`;
}
var Hs = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.outputShape = e, this.enableShapeUniforms = In(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
var ss = "if (isnan(x)) return x;";
var FX = "return x;";
var lw = "return abs(x);";
var OX = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var PX = ss + `
  return (x < 0.0) ? 0.0 : x;
`;
var zX = ss + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
var Bi = "return x;";
var MX = "return 1.0 / (1.0 + exp(-1.0 * x));";
var LX = "return x;";
var BX = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
var VX = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var WX = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var UX = "return 1.0 / (1.0 + exp(-1.0 * x));";
var Jr = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.enableShapeUniforms = In(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
var GX = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outputShape = e, this.enableShapeUniforms = In(this.outputShape.length);
    let t = e.length, n = un("rc", t), s = ot(t), r = TX(t, n), a = n.slice(-2), i = t <= 1 ? "rc" : `vec2(${a.join(",")})`;
    this.userCode = `
      void main() {
        ${s} rc = getOutputCoords();
        vec4 packedInput = getA(${r});

        setOutput(getChannel(packedInput, ${i}));
      }
    `;
  }
};
var HX = xs.whereImpl;
var qX = 1e-7;
var jX = 1e-4;
var Zc = {};
function KX(e) {
  return e in Zc || (Zc[e] = {}), Zc[e];
}
var XX = X().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");
var YX = 600;
function QX() {
  return X().global.screen == null ? 1024 : X().global.screen.height * X().global.screen.width * window.devicePixelRatio * YX / 1024 / 1024;
}
var U1 = class extends sl {
  constructor(e) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = false, this.pendingDeletes = 0, this.disposed = false, !X().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    let t;
    if (e != null) {
      if (e instanceof Xf)
        t = e;
      else {
        let n = vs(X().getNumber("WEBGL_VERSION"), e);
        t = new Xf(n);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = false;
    } else {
      let n = vs(X().getNumber("WEBGL_VERSION"));
      t = new Xf(n), this.binaryCache = KX(X().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = true;
    }
    this.gpgpu = t, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new AX(this.gpgpu), this.numMBBeforeWarning = QX(), this.texData = new Hd(this, Ss());
  }
  nextDataId() {
    return U1.nextDataId++;
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  write(e, t, n) {
    if ((X().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || X().getBool("DEBUG")) && this.checkNumericalProblems(e), n === "complex64" && e != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    let s = { id: this.nextDataId() };
    return this.texData.set(s, { shape: t, dtype: n, values: e, usage: 1, refCount: 1 }), s;
  }
  refCount(e) {
    return this.texData.has(e) ? this.texData.get(e).refCount : 0;
  }
  incRef(e) {
    let t = this.texData.get(e);
    t.refCount++;
  }
  decRef(e) {
    if (this.texData.has(e)) {
      let t = this.texData.get(e);
      t.refCount--;
    }
  }
  move(e, t, n, s, r) {
    if (X().getBool("DEBUG") && this.checkNumericalProblems(t), s === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(e, { shape: n, dtype: s, values: t, usage: 1, refCount: r });
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  readSync(e) {
    let t = this.texData.get(e), { values: n, dtype: s, complexTensorInfos: r, slice: a, shape: i, isPacked: o } = t;
    if (a != null) {
      let p;
      o ? p = new Jr(i, Bi) : p = new Hs(i, Bi);
      let d = this.runWebGLProgram(p, [{ dataId: e, shape: i, dtype: s }], s), h = this.readSync(d.dataId);
      return this.disposeIntermediateTensorInfo(d), h;
    }
    if (n != null)
      return this.convertAndCacheOnCPU(e);
    if (s === "string")
      return n;
    let u = this.activeTimers != null, l;
    u && (l = w.now());
    let c;
    if (s === "complex64") {
      let p = this.readSync(r.real.dataId), d = this.readSync(r.imag.dataId);
      c = C.mergeRealAndImagArrays(p, d);
    } else
      c = this.getValuesFromTexture(e);
    return u && (this.downloadWaitMs += w.now() - l), this.convertAndCacheOnCPU(e, c);
  }
  async read(e) {
    if (this.pendingRead.has(e)) {
      let h = this.pendingRead.get(e);
      return new Promise((f) => h.push(f));
    }
    let t = this.texData.get(e), { values: n, shape: s, slice: r, dtype: a, complexTensorInfos: i, isPacked: o } = t;
    if (r != null) {
      let h;
      o ? h = new Jr(s, Bi) : h = new Hs(s, Bi);
      let f = this.runWebGLProgram(h, [{ dataId: e, shape: s, dtype: a }], a), m = this.read(f.dataId);
      return this.disposeIntermediateTensorInfo(f), m;
    }
    if (n != null)
      return this.convertAndCacheOnCPU(e);
    if (X().getBool("DEBUG") && !X().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && X().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let u = null, l;
    if (a !== "complex64" && X().get("WEBGL_BUFFER_SUPPORTED")) {
      l = this.decode(e);
      let h = this.texData.get(l.dataId);
      u = this.gpgpu.createBufferFromTexture(h.texture.texture, ...Yc(s));
    }
    this.pendingRead.set(e, []), a !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let c;
    if (a === "complex64") {
      let h = await Promise.all([this.read(i.real.dataId), this.read(i.imag.dataId)]), f = h[0], m = h[1];
      c = C.mergeRealAndImagArrays(f, m);
    } else if (u == null)
      c = this.getValuesFromTexture(e);
    else {
      let h = w.sizeFromShape(s);
      c = this.gpgpu.downloadFloat32MatrixFromBuffer(u, h);
    }
    if (l != null && this.disposeIntermediateTensorInfo(l), u != null) {
      let h = this.gpgpu.gl;
      fe(h, () => h.deleteBuffer(u));
    }
    let p = this.convertAndCacheOnCPU(e, c), d = this.pendingRead.get(e);
    return this.pendingRead.delete(e), d.forEach((h) => h(p)), this.pendingDisposal.has(e) && (this.pendingDisposal.delete(e), this.disposeData(e) && Ss().removeDataId(e, this), this.pendingDeletes--), p;
  }
  readToGPU(e, t = {}) {
    let n = this.texData.get(e), { values: s, shape: r, slice: a, dtype: i, isPacked: o, texture: u } = n;
    if (i === "complex64")
      throw new Error("Does not support reading texture for complex64 dtype.");
    if (a != null) {
      let d;
      o ? d = new Jr(r, Bi) : d = new Hs(r, Bi);
      let h = this.runWebGLProgram(d, [{ dataId: e, shape: r, dtype: i }], i), f = this.readToGPU(h, t);
      return this.disposeIntermediateTensorInfo(h), f;
    }
    if (u == null)
      throw s != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    let l = this.decode(e, t.customTexShape), c = Ss().makeTensorFromDataId(l.dataId, l.shape, l.dtype), p = this.texData.get(l.dataId);
    return { tensorRef: c, ...p.texture };
  }
  bufferSync(e) {
    let t = this.readSync(e.dataId), n = t;
    if (e.dtype === "string")
      try {
        n = t.map((s) => w.decodeString(s));
      } catch (s) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return De(e.shape, e.dtype, n);
  }
  checkNumericalProblems(e) {
    if (e != null)
      for (let t = 0; t < e.length; t++) {
        let n = e[t];
        if (!jC(n))
          throw X().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${n} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(e) {
    let { shape: t, dtype: n, isPacked: s } = this.texData.get(e), r = w.sizeFromShape(t);
    if (X().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      let p = this.decode(e), d = this.texData.get(p.dataId), h = this.gpgpu.downloadMatrixFromPackedTexture(d.texture.texture, ...Yc(t)).subarray(0, r);
      return this.disposeIntermediateTensorInfo(p), h;
    }
    let a = X().getBool("WEBGL_PACK") && s === true, i = a ? id(t) : t, o = a ? new MK(i) : new zK(i), u = this.runWebGLProgram(o, [{ shape: i, dtype: n, dataId: e }], "float32"), l = this.texData.get(u.dataId), c = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture, l.texShape[0], l.texShape[1]).subarray(0, r);
    return this.disposeIntermediateTensorInfo(u), c;
  }
  timerAvailable() {
    return X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(e) {
    let t = this.activeTimers, n = [], s = false;
    this.programTimersStack == null ? (this.programTimersStack = n, s = true) : this.activeTimers.push(n), this.activeTimers = n, e();
    let r = w.flatten(this.activeTimers.map((o) => o.query)).filter((o) => o != null), a = w.flatten(this.activeTimers.map((o) => o.name)).filter((o) => o != null);
    this.activeTimers = t, s && (this.programTimersStack = null);
    let i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null };
    return (async () => {
      if (X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        let o = await Promise.all(r);
        i.kernelMs = w.sum(o), i.getExtraProfileInfo = () => o.map((u, l) => ({ name: a[l], ms: u })).map((u) => `${u.name}: ${u.ms}`).join(", ");
      } else
        i.kernelMs = { error: "WebGL query timers are not supported in this environment." };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
    })();
  }
  memory() {
    return { unreliable: false, numBytesInGPU: this.numBytesInGPU, numBytesInGPUAllocated: this.textureManager.numBytesAllocated, numBytesInGPUFree: this.textureManager.numBytesFree };
  }
  startTimer() {
    return X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: w.now(), endMs: null };
  }
  endTimer(e) {
    return X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = w.now(), e);
  }
  async getQueryTime(e) {
    if (X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(e);
    let t = e;
    return t.endMs - t.startMs;
  }
  disposeData(e, t = false) {
    if (this.pendingDisposal.has(e))
      return false;
    if (!this.texData.has(e))
      return true;
    if (t ? this.texData.get(e).refCount = 0 : this.texData.get(e).refCount--, !t && this.texData.get(e).refCount > 0)
      return false;
    if (this.pendingRead.has(e))
      return this.pendingDisposal.add(e), this.pendingDeletes++, false;
    this.releaseGPUData(e);
    let { complexTensorInfos: n } = this.texData.get(e);
    return n != null && (this.disposeData(n.real.dataId, t), this.disposeData(n.imag.dataId, t)), this.texData.delete(e), true;
  }
  releaseGPUData(e) {
    let { texture: t, dtype: n, texShape: s, usage: r, isPacked: a, slice: i } = this.texData.get(e), o = i && i.origDataId || e, u = this.dataRefCount.get(o);
    u > 1 ? this.dataRefCount.set(o, u - 1) : (this.dataRefCount.delete(o), t != null && (this.numBytesInGPU -= this.computeBytes(s, n), this.textureManager.releaseTexture(t, s, r, a)));
    let l = this.texData.get(e);
    l.texture = null, l.texShape = null, l.isPacked = false, l.slice = null;
  }
  getTexture(e) {
    return this.uploadToGPU(e), this.texData.get(e).texture.texture;
  }
  getDataInfo(e) {
    return this.texData.get(e);
  }
  shouldExecuteOnCPU(e, t = XX) {
    return X().getBool("WEBGL_CPU_FORWARD") && e.every((n) => this.texData.get(n.dataId).texture == null && w.sizeFromShape(n.shape) < t);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(e) {
    C.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    let t = e.dataSync();
    return HX(e.shape, t);
  }
  packedUnaryOp(e, t, n) {
    let s = new Jr(e.shape, t), r = this.compileAndRun(s, [e], n);
    return Ss().makeTensorFromDataId(r.dataId, r.shape, r.dtype);
  }
  abs(e) {
    if (this.shouldExecuteOnCPU([e]) && e.dtype !== "complex64") {
      let s = L1(this.texData.get(e.dataId).values);
      return this.makeOutput(e.shape, e.dtype, s);
    }
    if (X().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(e, lw, e.dtype);
    let t = new Hs(e.shape, lw), n = this.compileAndRun(t, [e]);
    return Ss().makeTensorFromDataId(n.dataId, n.shape, n.dtype);
  }
  makeTensorInfo(e, t, n) {
    let s;
    if (t === "string" && n != null && n.length > 0 && w.isString(n[0])) {
      let r = n.map((a) => w.encodeString(a));
      s = this.write(r, e, t);
    } else
      s = this.write(n, e, t);
    return this.texData.get(s).usage = null, { dataId: s, shape: e, dtype: t };
  }
  makeOutput(e, t, n) {
    let { dataId: s } = this.makeTensorInfo(e, t, n);
    return Ss().makeTensorFromDataId(s, e, t, this);
  }
  unpackTensor(e) {
    let t = new GX(e.shape);
    return this.runWebGLProgram(t, [e], e.dtype);
  }
  packTensor(e) {
    let t = new $X(e.shape), n = true;
    return this.runWebGLProgram(t, [e], e.dtype, null, n);
  }
  packedReshape(e, t) {
    let n = [ya(e.shape), ...va(e.shape)], s = { dtype: e.dtype, shape: n, dataId: e.dataId }, r = [ya(t), ...va(t)], a = new W1(r, n), i = true, o = [n], u = this.runWebGLProgram(a, [s], e.dtype, o, i);
    return { dataId: u.dataId, shape: t, dtype: u.dtype };
  }
  decode(e, t) {
    let n = this.texData.get(e), { isPacked: s, shape: r, dtype: a } = n;
    if (t != null) {
      let p = w.sizeFromShape(r), d = t[0] * t[1] * 4;
      w.assert(p <= d, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    let i = id(r), o;
    s ? o = new PK(i) : o = new OK(i);
    let u = true, l = [t != null ? t : Yc(i)], c = this.runWebGLProgram(o, [{ shape: i, dtype: a, dataId: e }], a, l, u, t);
    return { dtype: a, shape: r, dataId: c.dataId };
  }
  runWebGLProgram(e, t, n, s, r = false, a) {
    let i = this.makeTensorInfo(e.outputShape, n), o = this.texData.get(i.dataId);
    if (e.packedOutput && (o.isPacked = true), e.outPackingScheme === 0) {
      let g = a != null ? a : Yc(e.outputShape);
      o.texShape = g.map((b) => b * 2);
    }
    if (e.outTexUsage != null && (o.usage = e.outTexUsage), w.sizeFromShape(i.shape) === 0)
      return o.values = w.getTypedArrayFromDType(i.dtype, 0), i;
    let u = [], l = t.map((g) => {
      if (g.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let b = this.texData.get(g.dataId);
      if (b.texture == null) {
        if (!e.packedInputs && w.sizeFromShape(g.shape) <= X().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return { shape: g.shape, texData: null, isUniform: true, uniformValues: b.values };
        e.packedInputs && (b.isPacked = true, b.shape = g.shape);
      }
      if (this.uploadToGPU(g.dataId), !!b.isPacked != !!e.packedInputs)
        g = b.isPacked ? this.unpackTensor(g) : this.packTensor(g), u.push(g), b = this.texData.get(g.dataId);
      else if (b.isPacked && !tl(b.shape, g.shape)) {
        let y = g, v = g.shape;
        g.shape = b.shape, g = this.packedReshape(g, v), u.push(g), b = this.texData.get(g.dataId), y.shape = v;
      }
      return { shape: g.shape, texData: b, isUniform: false };
    });
    this.uploadToGPU(i.dataId);
    let c = { shape: i.shape, texData: o, isUniform: false }, p = FK(e, l, c), d = this.getAndSaveBinary(p, () => RK(this.gpgpu, e, l, c)), h = this.activeTimers != null, f;
    h && (f = this.startTimer()), X().get("ENGINE_COMPILE_ONLY") || DK(this.gpgpu, d, l, c, s), u.forEach((g) => this.disposeIntermediateTensorInfo(g)), h && (f = this.endTimer(f), this.activeTimers.push({ name: e.constructor.name, query: this.getQueryTime(f) }));
    let m = X().get("WEBGL_FLUSH_THRESHOLD");
    if (m > 0) {
      let g = w.now();
      g - this.lastGlFlushTime > m && (this.gpgpu.gl.flush(), this.lastGlFlushTime = g);
    }
    if (!X().getBool("WEBGL_LAZILY_UNPACK") && o.isPacked && r === false) {
      let g = this.unpackTensor(i);
      return this.disposeIntermediateTensorInfo(i), g;
    }
    return i;
  }
  compileAndRun(e, t, n, s, r = false) {
    return n = n || t[0].dtype, this.runWebGLProgram(e, t, n, s, r);
  }
  getAndSaveBinary(e, t) {
    return e in this.binaryCache || (this.binaryCache[e] = t()), this.binaryCache[e];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (X().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((t) => {
      this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram), delete this.binaryCache[t];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement != "undefined" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = true);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = j(() => {
      if (!X().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        let e = X().getBool("DEBUG");
        X().set("DEBUG", false);
        let t = this.abs(we(1e-8)).dataSync()[0];
        if (X().set("DEBUG", e), t > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  epsilon() {
    return this.floatPrecision() === 32 ? qX : jX;
  }
  uploadToGPU(e) {
    let t = this.texData.get(e), { shape: n, dtype: s, values: r, texture: a, usage: i, isPacked: o } = t;
    if (a != null)
      return;
    let u = this.activeTimers != null, l;
    u && (l = w.now());
    let c = t.texShape;
    if (c == null && (c = c1(n, o), t.texShape = c), r != null) {
      let p = id(n), d, h = c[1], f = c[0], m = r instanceof Uint8Array || r instanceof Uint8ClampedArray;
      (o || !m) && ([h, f] = nu(c[0], c[1])), o ? d = new BK(p, m) : d = new LK(p, m);
      let g = m ? [f, h] : c, b = this.makeTensorInfo(g, s), y = this.texData.get(b.dataId);
      m ? y.usage = 2 : y.usage = 1, y.texShape = g, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId), h, f, r);
      let v = [[f, h]], x = true, k = this.runWebGLProgram(d, [b], s, v, x), S = this.texData.get(k.dataId);
      t.texShape = S.texShape, t.isPacked = S.isPacked, t.usage = S.usage, X().get("ENGINE_COMPILE_ONLY") ? this.disposeData(k.dataId) : (t.texture = S.texture, t.values = null, this.texData.delete(k.dataId)), this.disposeIntermediateTensorInfo(b), u && (this.uploadWaitMs += w.now() - l);
    } else {
      let p = this.acquireTexture(c, i, s, o);
      t.texture = p;
    }
  }
  convertAndCacheOnCPU(e, t) {
    let n = this.texData.get(e), { dtype: s } = n;
    return this.releaseGPUData(e), t != null && (n.values = ZX(t, s)), n.values;
  }
  acquireTexture(e, t, n, s) {
    if (this.numBytesInGPU += this.computeBytes(e, n), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      let r = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true, console.warn(`High memory usage in GPU: ${r} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(e, t, s);
  }
  computeBytes(e, t) {
    return e[0] * e[1] * w.bytesPerElement(t);
  }
  checkCompileCompletion() {
    for (let [, e] of Object.entries(this.binaryCache))
      this.checkCompletion_(e);
  }
  async checkCompileCompletionAsync() {
    let e = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (let [, t] of Object.entries(this.binaryCache))
        e.push(this.checkCompletionAsync_(t));
      return Promise.all(e);
    } else {
      for (let [, t] of Object.entries(this.binaryCache)) {
        let n = new Promise((s) => {
          try {
            this.checkCompletion_(t), s(true);
          } catch (r) {
            throw r;
          }
        });
        e.push(n);
      }
      return Promise.all(e);
    }
  }
  async checkCompletionAsync_(e) {
    return this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(e) : (await BI(), this.checkCompletionAsync_(e));
  }
  checkCompletion_(e) {
    if (this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false)
      throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)), this.gpgpu.gl.getShaderParameter(e.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false ? (fv(e.source, this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return true;
  }
  getUniformLocations() {
    for (let [, e] of Object.entries(this.binaryCache)) {
      let { uniformLocations: t, customUniformLocations: n, infLoc: s, nanLoc: r, inShapesLocations: a, inTexShapesLocations: i, outShapeLocation: o, outShapeStridesLocation: u, outTexShapeLocation: l } = w1(this.gpgpu, e.program, e.webGLProgram);
      e.uniformLocations = t, e.customUniformLocations = n, e.infLoc = s, e.nanLoc = r, e.inShapesLocations = a, e.inTexShapesLocations = i, e.outShapeLocation = o, e.outShapeStridesLocation = u, e.outTexShapeLocation = l;
    }
  }
};
var G1 = U1;
G1.nextDataId = 0;
function ZX(e, t) {
  if (t === "float32" || t === "complex64")
    return e;
  if (t === "int32" || t === "bool") {
    let n = t === "int32" ? new Int32Array(e.length) : new Uint8Array(e.length);
    for (let s = 0; s < n.length; ++s)
      n[s] = Math.round(e[s]);
    return n;
  } else
    throw new Error(`Unknown dtype ${t}`);
}
var Ype = "0.0.0";
function JX() {
  X().set("WEBGL_FORCE_F16_TEXTURES", true);
}
hp.isBrowser() && fp("webgl", () => new G1(), 2);
var Qpe = { forceHalfFloat: JX };
var H1 = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
var io = class {
  constructor(e, t, n) {
    this.variableNames = ["A", "B"], this.outputShape = C.assertAndGetBroadcastShape(t, n), this.enableShapeUniforms = In(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
};
var Xp = `
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;
var Zl = class {
  constructor(e, t, n, s = false) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = true, this.packedInputs = true, this.packedOutput = true, this.outputShape = C.assertAndGetBroadcastShape(t, n);
    let r = this.outputShape.length;
    this.enableShapeUniforms = In(r);
    let a = "";
    if (s)
      if (r === 0 || w.sizeFromShape(this.outputShape) === 1)
        a = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (a = `
          ${ot(r)} coords = getOutputCoords();
        `, r === 1)
        this.enableShapeUniforms ? a += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : a += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        let o = un("coords", r);
        this.enableShapeUniforms ? a += `
            bool nextRowOutOfBounds =
              (${o[r - 2]} + 1) >= outShape[${r} - 2];
            bool nextColOutOfBounds =
              (${o[r - 1]} + 1) >= outShape[${r} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : a += `
            bool nextRowOutOfBounds =
              (${o[r - 2]} + 1) >= ${this.outputShape[r - 2]};
            bool nextColOutOfBounds =
              (${o[r - 1]} + 1) >= ${this.outputShape[r - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${a}

        setOutput(result);
      }
    `;
  }
};
function Rn(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  return n.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
var e8 = { kernelName: Wa, backendName: "webgl", kernelFunc: Rn };
function Dr(e) {
  let { inputs: t, backend: n } = e, { real: s, imag: r } = t, a = n.makeTensorInfo(s.shape, "complex64"), i = n.texData.get(a.dataId), o = Rn({ inputs: { x: s }, backend: n }), u = Rn({ inputs: { x: r }, backend: n });
  return i.complexTensorInfos = { real: o, imag: u }, a;
}
var t8 = { kernelName: Xd, backendName: "webgl", kernelFunc: Dr };
var q1 = "return (a < 0.) ? b * a : a;";
var j1 = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function n8(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { alpha: a } = s, i = n.makeTensorInfo([], "float32", w.createScalarValue(a, "float32")), o = X().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Zl(j1, r.shape, i.shape) : new io(q1, r.shape, i.shape), u = n.runWebGLProgram(o, [r, i], "float32");
  return n.disposeIntermediateTensorInfo(i), u;
}
var s8 = { kernelName: Ua, backendName: "webgl", kernelFunc: n8 };
var K1 = "return (a < 0.) ? b * a : a;";
var X1 = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function r8(e) {
  let { inputs: t, backend: n } = e, { x: s, alpha: r } = t, a = X().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Zl(X1, s.shape, r.shape) : new io(K1, s.shape, r.shape);
  return n.runWebGLProgram(a, [s, r], "float32");
}
var a8 = { kernelName: ti, backendName: "webgl", kernelFunc: r8 };
var uu = "if (isnan(x)) return x;";
var i8 = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
var o8 = `
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;
function Ke({ opSnippet: e, packedOpSnippet: t, cpuKernelImpl: n, dtype: s }) {
  return ({ inputs: r, backend: a }) => {
    let { x: i } = r, o = a, u = s || i.dtype;
    if (o.shouldExecuteOnCPU([i]) && n != null) {
      let p = o.texData.get(i.dataId), d = n(p.values, u);
      return o.makeTensorInfo(i.shape, u, d);
    }
    let l = X().getBool("WEBGL_PACK_UNARY_OPERATIONS") && t != null, c;
    return l ? c = new Jr(i.shape, t) : c = new Hs(i.shape, e), o.runWebGLProgram(c, [i], u);
  };
}
function qt({ opSnippet: e, packedOpSnippet: t, checkOutOfBounds: n = false, supportsComplex: s = false, cpuKernelImpl: r, dtype: a }) {
  return ({ inputs: i, backend: o }) => {
    let { a: u, b: l } = i, c = o;
    if (s && u.dtype === "complex64") {
      let f = c.texData.get(u.dataId), m = c.texData.get(l.dataId), [g, b] = [[f.complexTensorInfos.real, m.complexTensorInfos.real], [f.complexTensorInfos.imag, m.complexTensorInfos.imag]].map((v) => {
        let [x, k] = v, S = { dataId: x.dataId, dtype: x.dtype, shape: u.shape }, $ = { dataId: k.dataId, dtype: k.dtype, shape: l.shape }, E = new io(e, u.shape, l.shape);
        return c.runWebGLProgram(E, [S, $], ln(x.dtype, k.dtype));
      }), y = Dr({ inputs: { real: g, imag: b }, backend: c });
      return c.disposeIntermediateTensorInfo(g), c.disposeIntermediateTensorInfo(b), y;
    }
    let p = a || ln(u.dtype, l.dtype);
    if ((u.dtype === "string" || l.dtype === "string" || c.shouldExecuteOnCPU([u, l])) && r != null) {
      let f = c.texData.get(u.dataId).values, m = c.texData.get(l.dataId).values, g = u.dtype === "string" ? C.fromUint8ToStringArray(f) : f, b = u.dtype === "string" ? C.fromUint8ToStringArray(m) : m, [y, v] = r(u.shape, l.shape, g, b, p), x = c.makeTensorInfo(v, p), k = c.texData.get(x.dataId);
      return k.values = y, x;
    }
    let d = X().getBool("WEBGL_PACK_BINARY_OPERATIONS") && t != null, h;
    return d ? h = new Zl(t, u.shape, l.shape, n) : h = new io(e, u.shape, l.shape), c.runWebGLProgram(h, [u, l], p);
  };
}
function Yp(e, t = false) {
  if (e === "linear")
    return t ? LX : FX;
  if (e === "relu")
    return t ? VX : PX;
  if (e === "elu")
    return t ? BX : OX;
  if (e === "relu6")
    return t ? WX : zX;
  if (e === "prelu")
    return t ? X1 : K1;
  if (e === "leakyrelu")
    return t ? j1 : q1;
  if (e === "sigmoid")
    return t ? UX : MX;
  throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`);
}
var Y1 = class {
  constructor(e, t, n, s = false, r = false, a = false, i = null, o = false, u = false) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = true, this.packedOutput = true, this.outputShape = n, this.enableShapeUniforms = In(this.outputShape.length);
    let l = s ? e[1] : e[2], c = Math.ceil(l / 2), p = s ? "i * 2, rc.y" : "rc.y, i * 2", d = r ? "rc.z, i * 2" : "i * 2, rc.z", h = s ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], f = r ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"], m = "", g = "";
    i && (o ? m = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }` : u ? m = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }` : m = `vec4 activation(vec4 x) {
          ${i}
        }`, g = "result = activation(result);");
    let b = a ? "result += getBiasAtOutCoords();" : "";
    a && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), u && this.variableNames.push("leakyreluAlpha");
    let y = "rc.x", v = "rc.x";
    e[0] < t[0] ? y = `int(min(float(rc.x), ${e[0] - 1}.))` : t[0] < e[0] && (v = `int(min(float(rc.x), ${t[0] - 1}.))`), this.userCode = `
      ${m}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${c}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${c}; i++) {
          int batchA = ${y};
          int batchB = ${v};
          vec4 a = getMatrixA(batchA, ${p});
          vec4 b = getMatrixB(batchB, ${d});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${f[0]});
          result += (${h[1]} * ${f[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${g}

        setOutput(result);
      }
    `;
  }
};
var cw = { REAL: "return areal * breal - aimag * bimag;", IMAG: "return areal * bimag + aimag * breal;" };
var dw = class {
  constructor(e, t, n) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = C.assertAndGetBroadcastShape(t, n), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
};
var pw = "return a * b;";
function Sv(e) {
  let { inputs: t, backend: n } = e, { a: s, b: r } = t, a = C.upcastType(s.dtype, r.dtype);
  if (s.dtype === "complex64") {
    let o = n.texData.get(s.dataId), u = n.texData.get(r.dataId), l = new dw(cw.REAL, s.shape, r.shape), c = new dw(cw.IMAG, s.shape, r.shape), p = [{ dataId: o.complexTensorInfos.real.dataId, dtype: o.complexTensorInfos.real.dtype, shape: s.shape }, { dataId: o.complexTensorInfos.imag.dataId, dtype: o.complexTensorInfos.imag.dtype, shape: s.shape }, { dataId: u.complexTensorInfos.real.dataId, dtype: u.complexTensorInfos.real.dtype, shape: r.shape }, { dataId: u.complexTensorInfos.imag.dataId, dtype: u.complexTensorInfos.imag.dtype, shape: r.shape }], d = n.runWebGLProgram(l, p, "float32"), h = n.runWebGLProgram(c, p, "float32"), f = Dr({ inputs: { real: d, imag: h }, backend: n });
    return n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(h), f;
  }
  if (n.shouldExecuteOnCPU([s, r])) {
    let o = n.texData.get(s.dataId), u = n.texData.get(r.dataId), [l, c] = uX(s.shape, r.shape, o.values, u.values, a), p = n.makeTensorInfo(c, a), d = n.texData.get(p.dataId);
    return d.values = l, p;
  }
  let i;
  return X().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? i = new Zl(pw, s.shape, r.shape) : i = new io(pw, s.shape, r.shape), n.runWebGLProgram(i, [s, r], a);
}
var u8 = { kernelName: Za, backendName: "webgl", kernelFunc: Sv };
function l8(e, t, n) {
  let s = [ya(e.shape), ...va(e.shape)], r = { dtype: e.dtype, shape: s, dataId: e.dataId }, a = [ya(t), ...va(t)], i = new W1(a, s), o = true, u = [s], l = n.runWebGLProgram(i, [r], e.dtype, u, o);
  return { dataId: l.dataId, shape: t, dtype: l.dtype };
}
function he(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { shape: a } = s, i = n, o = w.sizeFromShape(r.shape), u = w.inferFromImplicitShape(a, o), l = w.sizeFromShape(u);
  w.assert(o === l, () => `The new shape (${u}) has ${l} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`);
  let c = i.texData.get(r.dataId);
  return c.isPacked && !tl(r.shape, u) && !(c.texture !== null && tl(c.shape, u)) ? l8(r, u, i) : (i.incRef(r.dataId), { dataId: r.dataId, shape: u, dtype: r.dtype });
}
var c8 = { kernelName: Ro, backendName: "webgl", kernelFunc: he };
var hw = class {
  constructor(e, t) {
    this.variableNames = ["x"];
    let { windowSize: n, batchSize: s, inSize: r, outSize: a } = e;
    this.outputShape = [s, a];
    let i = Math.floor(n / 4) * 4, o = n % 4, u = "sumValue += dot(values, ones);";
    if (t != null) {
      let c = 1 / t;
      u = `sumValue += dot(values * ${w.isInt(c) ? c.toPrecision(2) : c}, ones);`;
    }
    let l = "";
    r % n > 0 && (l = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${l}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${i};
        if (${o === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${o === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${o === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `;
  }
};
var d8 = class {
  constructor(e, t) {
    this.variableNames = ["x"];
    let { windowSize: n, batchSize: s, inSize: r, outSize: a } = e;
    this.outputShape = [s, a];
    let i = "0.0", o = "";
    t === "prod" ? i = "1.0" : t === "min" ? (i = "1.0 / 1e-20", o = "min") : t === "max" && (i = "-1.0 / 1e-20", o = "max");
    let u = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "sum" ? u = "sumValue" : t === "prod" ? u = "prodValue" : t === "all" ? u = "allValue" : t === "any" && (u = "anyValue");
    let l = Math.floor(n / 4) * 4, c = n % 4, p = `
      if (${t === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${t === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${o}(values, minMaxValue);
        if (${t === "min"} || ${t === "max"}) {
          minMaxValue = ${o}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, d = "vec4";
    t === "all" ? (i = "1.0", p = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, d = "bvec4") : t === "any" && (i = "0.0", p = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, d = "bvec4");
    let h = "";
    r % n > 0 && (h = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${l}; i += 4) {
          int inIdx = inOffset + i;
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${p}
        }

        int inIdx = inOffset + ${l};
        if (${c === 1}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${p}
        } else if (${c === 2}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${p}
        } else if (${c === 3}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${p}
        }
        setOutput(${u});
      }
    `;
  }
};
function p8(e) {
  let t = [];
  for (; t.length === 0 || t[t.length - 1].outSize !== 1; ) {
    let n = t.length ? t[t.length - 1].outSize : e[1], s = C.computeOptimalWindowSize(n);
    t.push({ inSize: n, windowSize: s, outSize: Math.ceil(n / s) });
  }
  return t;
}
function Ii(e, t, n, s) {
  let r = p8(e.shape), a = e;
  for (let i = 0; i < r.length; i++) {
    let { inSize: o, windowSize: u, outSize: l } = r[i], c, p;
    n === "mean" ? c = i === 0 ? new hw({ windowSize: u, inSize: o, batchSize: e.shape[0], outSize: l }, o) : new hw({ windowSize: u, inSize: o, batchSize: e.shape[0], outSize: l }) : c = new d8({ windowSize: u, inSize: o, batchSize: e.shape[0], outSize: l }, n), p = a, a = s.runWebGLProgram(c, [a], t), p.dataId !== e.dataId && s.disposeIntermediateTensorInfo(p);
  }
  return a;
}
var h8 = class {
  constructor(e, t) {
    this.variableNames = ["A"];
    let n = new Array(e.length);
    for (let a = 0; a < n.length; a++)
      n[a] = e[t[a]];
    this.outputShape = n, this.rank = n.length;
    let s = ot(this.rank), r = f8(t);
    this.userCode = `
    void main() {
      ${s} resRC = getOutputCoords();
      setOutput(getA(${r}));
    }
    `;
  }
};
function f8(e) {
  let t = e.length;
  if (t > 6)
    throw Error(`Transpose for rank ${t} is not yet supported`);
  let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], s = new Array(t);
  for (let r = 0; r < e.length; r++)
    s[e[r]] = n[r];
  return s.join();
}
var m8 = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true;
    let n = new Array(e.length);
    for (let l = 0; l < n.length; l++)
      n[l] = e[t[l]];
    if (this.outputShape = n, this.rank = n.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    let s = ot(this.rank), r = V1("rc", this.rank), a = new Array(this.rank);
    for (let l = 0; l < t.length; l++)
      a[t[l]] = r[l];
    let i = `vec2(${a.slice(-2).join()})`, o = `++${r[this.rank - 1]} < ${n[this.rank - 1]}`, u = `getChannel(getA(${a.join()}), ${i})`;
    this.userCode = `
    void main() {
      ${s} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${o}) {
        result[1] = ${u};
      }
      --${r[this.rank - 1]};
      if(++${r[this.rank - 2]} < ${n[this.rank - 2]}) {
        result[2] = ${u};
        if(${o}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `;
  }
};
function Qp(e, t, n) {
  let s = X().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new m8(e.shape, t) : new h8(e.shape, t);
  return n.runWebGLProgram(s, [e], e.dtype);
}
function g8(e, t, n, s) {
  let r = t, a = e.shape.length, i = w.parseAxisParam(r, e.shape), o = i, u = C.getAxesPermutation(o, a), l = u != null, c = e;
  l && (c = Qp(e, u, s), o = C.getInnerMostAxes(o.length, a)), C.assertAxesAreInnerMostDims("sum", o, a);
  let [p, d] = C.computeOutAndReduceShapes(c.shape, o), h = p;
  n && (h = C.expandShapeToKeepDim(p, i));
  let f = w.sizeFromShape(d), g = w.sizeFromShape(e.shape) / f, b = he({ inputs: { x: c }, attrs: { shape: [g, f] }, backend: s }), y = pp(e.dtype), v = Ii(b, y, "sum", s), x = he({ inputs: { x: v }, attrs: { shape: h }, backend: s });
  return s.disposeIntermediateTensorInfo(b), s.disposeIntermediateTensorInfo(v), l && s.disposeIntermediateTensorInfo(c), x;
}
function Zp(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s;
  return g8(r, a, i, n);
}
var b8 = { kernelName: ci, backendName: "webgl", kernelFunc: Zp };
function dn(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { perm: a } = s, i = n, o = r.shape.length, u = new Array(o);
  for (let c = 0; c < u.length; c++)
    u[c] = r.shape[a[c]];
  let l;
  if (i.shouldExecuteOnCPU([r])) {
    let p = i.texData.get(r.dataId).values, d = Iv(p, r.shape, r.dtype, a, u);
    l = i.makeTensorInfo(u, r.dtype);
    let h = i.texData.get(l.dataId);
    h.values = d;
  } else
    l = Qp(r, a, i);
  return l;
}
var y8 = { kernelName: mi, backendName: "webgl", kernelFunc: dn };
var Q1 = 1e3;
function Ld({ a: e, b: t, transposeA: n, transposeB: s, backend: r, bias: a = null, preluActivationWeights: i = null, leakyreluAlpha: o = 0, activation: u = null }) {
  let l = e.shape.length, c = t.shape.length, p = n ? e.shape[l - 2] : e.shape[l - 1], d = s ? t.shape[c - 1] : t.shape[c - 2], h = n ? e.shape[l - 1] : e.shape[l - 2], f = s ? t.shape[c - 2] : t.shape[c - 1], m = e.shape.slice(0, -2), g = t.shape.slice(0, -2), b = w.sizeFromShape(m), y = w.sizeFromShape(g), x = Ko.assertAndGetBroadcastShape(e.shape.slice(0, -2), t.shape.slice(0, -2)).concat([h, f]);
  w.assert(p === d, () => `Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`);
  let k = n ? [b, p, h] : [b, h, p], S = s ? [y, f, d] : [y, d, f], $ = he({ inputs: { x: e }, backend: r, attrs: { shape: k } }), E = he({ inputs: { x: t }, backend: r, attrs: { shape: S } }), A = [$, E], P = Math.max(b, y), R = n ? $.shape[1] : $.shape[2], F = a != null, T = i != null, z = u === "leakyrelu", W = u != null ? Yp(u, true) : null, q = F || T || z || W != null, K;
  if ((h === 1 || f === 1) && R > Q1 && q === false) {
    let Z = $, te = E;
    n && (Z = dn({ inputs: { x: $ }, backend: r, attrs: { perm: [0, 2, 1] } }), A.push(Z)), s && (te = dn({ inputs: { x: E }, backend: r, attrs: { perm: [0, 2, 1] } }), A.push(te));
    let ee = f !== 1, se = f === 1, ne = Z;
    ee && (ne = he({ inputs: { x: Z }, backend: r, attrs: { shape: [P, R, 1] } }), A.push(ne));
    let oe = f === 1 ? 2 : 1, re = te;
    se && (re = he({ inputs: { x: te }, backend: r, attrs: { shape: [P, 1, R] } }), A.push(re));
    let le = Sv({ inputs: { a: ne, b: re }, backend: r });
    K = Zp({ inputs: { x: le }, backend: r, attrs: { axis: oe, keepDims: true } }), A.push(le);
  } else {
    let Z = ln(e.dtype, t.dtype), te = new Y1(k, S, [P, h, f], n, s, F, W, T, z), ee = [$, E];
    if (a != null && ee.push(a), T && ee.push(i), z) {
      let se = r.makeTensorInfo([], "float32", w.createScalarValue(o, "float32"));
      ee.push(se), A.push(se);
    }
    K = r.runWebGLProgram(te, ee, Z);
  }
  let Y = he({ inputs: { x: K }, backend: r, attrs: { shape: x } });
  A.push(K);
  for (let Z of A)
    r.disposeIntermediateTensorInfo(Z);
  return Y;
}
function v8(e) {
  let { inputs: t, backend: n, attrs: s } = e, { a: r, b: a, bias: i, preluActivationWeights: o } = t, { transposeA: u, transposeB: l, activation: c, leakyreluAlpha: p } = s;
  return Ld({ a: r, b: a, transposeA: u, transposeB: l, backend: n, bias: i, preluActivationWeights: o, leakyreluAlpha: p, activation: c });
}
var x8 = { kernelName: aa, backendName: "webgl", kernelFunc: v8 };
var fw = "return abs(x);";
function w8(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  if (n.shouldExecuteOnCPU([s]) && s.dtype !== "complex64") {
    let a = n.texData.get(s.dataId), i = L1(a.values);
    return n.makeTensorInfo(s.shape, s.dtype, i);
  }
  let r;
  return X().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new Jr(s.shape, fw) : r = new Hs(s.shape, fw), n.runWebGLProgram(r, [s], s.dtype);
}
var k8 = { kernelName: uo, backendName: "webgl", kernelFunc: w8 };
var I8 = ss + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`;
var S8 = Ke({ opSnippet: I8 });
var C8 = { kernelName: rl, backendName: "webgl", kernelFunc: S8 };
var N8 = ss + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`;
var T8 = Ke({ opSnippet: N8 });
var $8 = { kernelName: al, backendName: "webgl", kernelFunc: T8 };
var mw = "return a + b;";
var _8 = qt({ opSnippet: mw, packedOpSnippet: mw, supportsComplex: true, cpuKernelImpl: UK });
var A8 = { kernelName: Sr, backendName: "webgl", kernelFunc: _8 };
var E8 = class {
  constructor(e, t) {
    this.outputShape = [], this.outputShape = e, this.variableNames = t.map((r, a) => `T${a}`);
    let n = [];
    this.variableNames.forEach((r) => {
      n.push(`float v${r} = get${r}AtOutCoords();`);
    });
    let s = this.variableNames.map((r) => `v${r}`).join(" + ");
    this.userCode = `
      void main() {
        ${n.join(`
        `)}

        float result = ${s};
        setOutput(result);
      }
    `;
  }
};
var R8 = class {
  constructor(e, t) {
    this.outputShape = [], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.variableNames = t.map((r, a) => `T${a}`);
    let n = [];
    this.variableNames.forEach((r) => {
      n.push(`vec4 v${r} = get${r}AtOutCoords();`);
    });
    let s = this.variableNames.map((r) => `v${r}`).join(" + ");
    this.userCode = `
      void main() {
        ${n.join(`
        `)}

        vec4 result = ${s};
        setOutput(result);
      }
    `;
  }
};
function ld(e) {
  let { inputs: t, backend: n } = e, s = t;
  if (s.length === 1)
    return Rn({ inputs: { x: s[0] }, backend: n });
  if (s.length > X().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    let u = Math.floor(s.length / 2), l = ld({ inputs: s.slice(0, u), backend: n }), c = ld({ inputs: s.slice(u), backend: n });
    return ld({ inputs: [l, c], backend: n });
  }
  let r = s.map((u) => u.dtype).reduce((u, l) => ln(u, l)), a = s.map((u) => u.shape), o = X().getBool("WEBGL_PACK") ? new R8(s[0].shape, a) : new E8(s[0].shape, a);
  return n.runWebGLProgram(o, s, r);
}
var D8 = { kernelName: Ia, backendName: "webgl", kernelFunc: ld };
function F8(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s, o = r.shape.length, u = w.parseAxisParam(a, r.shape), l = u, c = C.getAxesPermutation(l, o), p = r;
  c != null && (p = dn({ inputs: { x: r }, backend: n, attrs: { perm: c } }), l = C.getInnerMostAxes(l.length, o)), C.assertAxesAreInnerMostDims("all", l, o);
  let [d, h] = C.computeOutAndReduceShapes(p.shape, l), f = w.sizeFromShape(h), m = he({ inputs: { x: p }, backend: n, attrs: { shape: [-1, f] } }), g = Ii(m, m.dtype, "all", n), b;
  if (i) {
    let y = C.expandShapeToKeepDim(d, u);
    b = he({ inputs: { x: g }, backend: n, attrs: { shape: y } });
  } else
    b = he({ inputs: { x: g }, backend: n, attrs: { shape: d } });
  return n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(g), c != null && n.disposeIntermediateTensorInfo(p), b;
}
var O8 = { kernelName: il, backendName: "webgl", kernelFunc: F8 };
function P8(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s, o = r.shape.length, u = w.parseAxisParam(a, r.shape), l = u, c = C.getAxesPermutation(l, o), p = r;
  c != null && (p = dn({ inputs: { x: r }, backend: n, attrs: { perm: c } }), l = C.getInnerMostAxes(l.length, o)), C.assertAxesAreInnerMostDims("any", l, o);
  let [d, h] = C.computeOutAndReduceShapes(p.shape, l), f = w.sizeFromShape(h), m = he({ inputs: { x: p }, backend: n, attrs: { shape: [-1, f] } }), g = Ii(m, m.dtype, "any", n), b;
  if (i) {
    let y = C.expandShapeToKeepDim(d, u);
    b = he({ inputs: { x: g }, backend: n, attrs: { shape: y } });
  } else
    b = he({ inputs: { x: g }, backend: n, attrs: { shape: d } });
  return n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(g), c != null && n.disposeIntermediateTensorInfo(p), b;
}
var z8 = { kernelName: ol, backendName: "webgl", kernelFunc: P8 };
var M8 = class {
  constructor(e, t, n) {
    this.variableNames = ["A"];
    let { windowSize: s, batchSize: r, outSize: a } = e;
    n || this.variableNames.push("bestIndicesA"), this.outputShape = [r, a];
    let i = t === "max" ? ">" : "<", o = n ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${s}; i++) {
          int inIdx = ${o};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
};
var L8 = class {
  constructor(e, t, n, s) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, w.assert(e.length > 2, () => `Packed arg${n.charAt(0).toUpperCase() + n.slice(1)} supports only inputs with rank above 2.`);
    let r = e[e.length - 1], a = Math.ceil(r / t);
    this.outputShape = e.slice(0, -1), a > 1 && this.outputShape.push(a), s || this.variableNames.push("bestIndicesA");
    let i = this.outputShape, o = i.length, u = ot(o), l = un("coords", o), c, p;
    if (a === 1) {
      p = o + 1;
      let $ = ot(p);
      c = `
        ${$} sourceLocR = ${$}(${l.join()}, 0);
        ++${l[o - 1]};
        ${$} sourceLocG = ${$}(${l.join()}, 0);
        ++${l[o - 2]};
        ${$} sourceLocA = ${$}(${l.join()}, 0);
        --${l[o - 1]};
        ${$} sourceLocB = ${$}(${l.join()}, 0);
        --${l[o - 2]};`;
    } else
      p = o, c = `
        ${u} sourceLocR = coords;
        ++${l[o - 1]};
        ${u} sourceLocG = coords;
        ++${l[o - 2]};
        ${u} sourceLocA = coords;
        --${l[o - 1]};
        ${u} sourceLocB = coords;
        --${l[o - 2]};`;
    let d = ["x", "y", "z", "w", "u", "v"].slice(0, p), h = "." + d[p - 1], f = d.map(($) => "int " + $), m = un("sourceLocR", p - 1).concat("inIdx.r"), g = un("sourceLocG", p - 1).concat("inIdx.g"), b = un("sourceLocB", p - 1).concat("inIdx.b"), y = un("sourceLocA", p - 1).concat("inIdx.a"), v = n === "max" ? "greaterThan" : "lessThan", x = s ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),
                             getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${y.join()})));`, k = `vec4(
            getAChannel(${m.join()}),
            hasNextCol ? getAChannel(${g.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`, S = s ? "" : `
      float getBestIndicesAChannel(${f.join()}) {
        return getChannel(getBestIndicesA(${d.join()}),
                                          vec2(${d.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${f.join()}) {
        return getChannel(getA(${d.join()}),
                               vec2(${d.slice(-2).join()}));
      }
      ${S}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${l[o - 1]} < ${i[o - 1] - 1};
        bool hasNextRow = ${l[o - 2]} < ${i[o - 2] - 1};
        ${c}
        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},
          sourceLocB${h}, sourceLocA${h}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${k};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${x}
          vec4 candidate = ${k};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
};
function Z1(e, t, n, s = null) {
  let r = t.shape[0], a = t.shape[1];
  s != null && (r = s.shape[0], a = s.shape[1]);
  let i = C.computeOptimalWindowSize(a), o = { windowSize: i, inSize: a, batchSize: r, outSize: Math.ceil(a / i) }, u = new M8(o, n, s == null), l = [t];
  s != null && l.push(s);
  let c = e.runWebGLProgram(u, l, "int32");
  if (c.shape[1] === 1)
    return c;
  let p = Z1(e, t, n, c);
  return e.disposeIntermediateTensorInfo(c), p;
}
function J1(e, t, n, s = null) {
  let r = s != null ? s.shape : t.shape, a = r[r.length - 1], i = C.computeOptimalWindowSize(a), o = new L8(r, i, n, s == null), u = s == null ? [t] : [t, s], l = e.runWebGLProgram(o, u, "int32");
  if (l.shape.length === t.shape.length) {
    let c = J1(e, t, n, l);
    return e.disposeIntermediateTensorInfo(l), c;
  }
  return l;
}
function e2(e, t, n, s) {
  let r = [n];
  if (C.assertAxesAreInnerMostDims("arg" + s.charAt(0).toUpperCase() + s.slice(1), r, t.shape.length), !X().getBool("WEBGL_PACK_REDUCE") || t.shape.length <= 2) {
    let a = [], i = e.texData.get(t.dataId), o = i !== null && i.isPacked, u = t;
    o && (u = e.unpackTensor(t), a.push(u));
    let [l, c] = C.computeOutAndReduceShapes(u.shape, r), p = w.sizeFromShape(c), d = he({ inputs: { x: u }, backend: e, attrs: { shape: [-1, p] } });
    a.push(d);
    let h = Z1(e, d, s);
    a.push(h);
    let f = he({ inputs: { x: h }, backend: e, attrs: { shape: l } });
    return a.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
  }
  return J1(e, t, s);
}
function B8(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a } = s, i = w.parseAxisParam(a, r.shape), o = C.getAxesPermutation(i, r.shape.length), u = r, l = [];
  o != null && (u = dn({ inputs: { x: r }, backend: n, attrs: { perm: o } }), l.push(u), i = C.getInnerMostAxes(i.length, u.shape.length)), C.assertAxesAreInnerMostDims("argMax", [i[0]], u.shape.length);
  let c = e2(n, u, i[0], "max");
  return l.forEach((p) => n.disposeIntermediateTensorInfo(p)), c;
}
var V8 = { kernelName: Sa, backendName: "webgl", kernelFunc: B8 };
function W8(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a } = s, i = w.parseAxisParam(a, r.shape), o = C.getAxesPermutation(i, r.shape.length), u = r, l = [];
  o != null && (u = dn({ inputs: { x: r }, backend: n, attrs: { perm: o } }), l.push(u), i = C.getInnerMostAxes(i.length, u.shape.length)), C.assertAxesAreInnerMostDims("argMin", [i[0]], u.shape.length);
  let c = e2(n, u, i[0], "min");
  return l.forEach((p) => n.disposeIntermediateTensorInfo(p)), c;
}
var U8 = { kernelName: ul, backendName: "webgl", kernelFunc: W8 };
var G8 = ss + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`;
var H8 = Ke({ opSnippet: G8 });
var q8 = { kernelName: ll, backendName: "webgl", kernelFunc: H8 };
var j8 = ss + "return log(x + sqrt(x * x + 1.0));";
var K8 = Ke({ opSnippet: j8 });
var X8 = { kernelName: cl, backendName: "webgl", kernelFunc: K8 };
var Y8 = ss + `
  return atan(x);
`;
var Q8 = Ke({ opSnippet: Y8 });
var Z8 = { kernelName: dl, backendName: "webgl", kernelFunc: Q8 };
var J8 = i8 + `
  return atan(a, b);
`;
var eY = `
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + o8 + `
  return result;
`;
var tY = qt({ opSnippet: J8, packedOpSnippet: eY });
var nY = { kernelName: hl, backendName: "webgl", kernelFunc: tY };
var sY = ss + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;
var rY = Ke({ opSnippet: sY });
var aY = { kernelName: pl, backendName: "webgl", kernelFunc: rY };
var nl = class {
  constructor(e, t, n, s = false, r = false) {
    if (this.variableNames = ["x"], t === "avg" && n)
      throw new Error("Cannot compute positions for average pool.");
    let a = e.filterWidth, i = e.strideHeight, o = e.strideWidth, u = e.dilationHeight, l = e.dilationWidth, c = e.effectiveFilterHeight, p = e.effectiveFilterWidth, d = e.padInfo.top, h = e.padInfo.left;
    this.outputShape = e.outShape;
    let f = t === "avg", m = `((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`, g = `(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`, b = "0.0";
    if (f || (b = "-1.0 / 1e-20"), n) {
      let $ = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${i}, ${o});
        const ivec2 pads = ivec2(${d}, ${h});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${c};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p};
                wC += ${l}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${$} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${s ? r ? m : g : `wR * ${p} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    let y = "max", v = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (v = "avgValue / count");
    let x = Math.floor(a / 4) * 4, k = a % 4, S = `
      if (${f}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${y}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${i}, ${o});
      const ivec2 pads = ivec2(${d}, ${h});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${c};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${x}; wC += 4) {
            int xC = xCCorner + wC * ${l};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${l}, d),
              getValue(batch, xR, xC + 2 * ${l}, d),
              getValue(batch, xR, xC + 3 * ${l}, d)
            );

            ${S}
          }

          int xC = xCCorner + ${x};
          if (${k === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${S}
          } else if (${k === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${l}, d),
              initializationValue,
              initializationValue
            );

            ${S}
          } else if (${k === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${l}, d),
              getValue(batch, xR, xC + 2 * ${l}, d),
              initializationValue
            );

            ${S}
          }
        }
        setOutput(${v});
      }
    `;
  }
};
var Cv = class {
  constructor(e, t, n, s = false, r = false) {
    if (this.variableNames = ["x"], t === "avg" && n)
      throw new Error("Cannot compute positions for average pool.");
    let a = e.filterWidth, i = e.strideDepth, o = e.strideHeight, u = e.strideWidth, l = e.dilationDepth, c = e.dilationHeight, p = e.dilationWidth, d = e.effectiveFilterDepth, h = e.effectiveFilterHeight, f = e.effectiveFilterWidth, m = e.padInfo.front, g = e.padInfo.top, b = e.padInfo.left;
    this.outputShape = e.outShape;
    let y = t === "avg", v = "0.0";
    if (y || (v = "-1.0 / 1e-20"), n) {
      let A = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${i}, ${o}, ${u});
        const ivec3 pads = ivec3(${m}, ${g}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${d};
              wD += ${l}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${h};
                wR += ${c}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${f};
                  wC += ${p}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${A} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${s ? r ? `(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `wD * ${h} * ${f} +
                      wR * ${f} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    let x = "max", k = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (k = "avgValue / count");
    let S = Math.floor(a / 4) * 4, $ = a % 4, E = `
      if (${y}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${x}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${i}, ${o}, ${u});
      const ivec3 pads = ivec3(${m}, ${g}, ${b});
      const float initializationValue = ${v};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${v});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${l}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h};
            wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${S}; wC += 4) {
              int xC = xCCorner + wC * ${p};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                getValue(batch, xD, xR, xC + 2 * ${p}, ch),
                getValue(batch, xD, xR, xC + 3 * ${p}, ch)
              );

              ${E}
            }

            int xC = xCCorner + ${S};
            if (${$ === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${E}
            } else if (${$ === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                initializationValue,
                initializationValue
              );

              ${E}
            } else if (${$ === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                getValue(batch, xD, xR, xC + 2 * ${p}, ch),
                initializationValue
              );

              ${E}
            }
          }
          setOutput(${k});
        }
      }
    `;
  }
};
function iY(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t;
  su(r, "avgPool");
  let { filterSize: a, strides: i, pad: o, dimRoundingMode: u } = s, l = 1;
  w.assert(C.eitherStridesOrDilationsAreOne(i, l), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${l}'`);
  let c = C.computePool2DInfo(r.shape, a, i, l, o, u);
  if (c.filterWidth === 1 && c.filterHeight === 1 && w.arraysEqual(c.inShape, c.outShape))
    return Rn({ inputs: { x: r }, backend: n });
  let p = new nl(c, "avg", false);
  return n.runWebGLProgram(p, [r], "float32");
}
var oY = { kernelName: Ca, backendName: "webgl", kernelFunc: iY };
function uY(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { filterSize: a, strides: i, pad: o, dimRoundingMode: u, dataFormat: l } = s, c = [1, 1, 1], p = C.computePool3DInfo(r.shape, a, i, c, o, u, l), d = new Cv(p, "avg", false);
  return n.runWebGLProgram(d, [r], "float32");
}
var lY = { kernelName: Kd, backendName: "webgl", kernelFunc: uY };
var cY = class {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    let t = e.filterHeight, n = e.filterWidth, s = e.strideHeight, r = e.strideWidth, a = e.dilationHeight, i = e.dilationWidth, o = e.effectiveFilterHeight, u = e.effectiveFilterWidth, l = o - 1 - e.padInfo.top, c = u - 1 - e.padInfo.left, p = 1 / (t * n);
    this.userCode = `
      const ivec2 pads = ivec2(${l}, ${c});
      const float avgMultiplier = float(${p});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
            wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var dY = class {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    let t = e.filterDepth, n = e.filterHeight, s = e.filterWidth, r = e.strideDepth, a = e.strideHeight, i = e.strideWidth, o = e.dilationDepth, u = e.dilationHeight, l = e.dilationWidth, c = e.effectiveFilterDepth, p = e.effectiveFilterHeight, d = e.effectiveFilterWidth, h = c - 1 - e.padInfo.front, f = p - 1 - e.padInfo.top, m = d - 1 - e.padInfo.left, g = 1 / (t * n * s);
    this.userCode = `
      const ivec3 pads = ivec3(${h}, ${f}, ${m});
      const float avgMultiplier = float(${g});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${c};
            wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${r}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${p};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${d};
                wC += ${l}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function pY(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, input: a } = t, i = a, { filterSize: o, strides: u, pad: l, dimRoundingMode: c } = s, p = [1, 1, 1], d = C.computePool3DInfo(i.shape, o, u, p, l, c), h = new dY(d);
  return n.runWebGLProgram(h, [r], i.dtype);
}
var hY = { kernelName: lg, backendName: "webgl", kernelFunc: pY };
function fY(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, input: a } = t, i = a;
  su([r, a], "avgPoolGrad");
  let { filterSize: o, strides: u, pad: l } = s, c = C.computePool2DInfo(i.shape, o, u, 1, l), p = new cY(c);
  return n.runWebGLProgram(p, [r], i.dtype);
}
var mY = { kernelName: ug, backendName: "webgl", kernelFunc: fY };
function gY(e) {
  let { inputs: t, backend: n, attrs: s } = e, { a: r, b: a } = t, { transposeA: i, transposeB: o } = s;
  return Ld({ a: r, b: a, transposeA: i, transposeB: o, backend: n });
}
var bY = { kernelName: Na, backendName: "webgl", kernelFunc: gY };
var yY = class {
  constructor(e, t, n, s, r, a) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], C.assertAndGetBroadcastShape(e, t), C.assertAndGetBroadcastShape(e, n);
    let i = "0.0";
    s != null && (C.assertAndGetBroadcastShape(e, s), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let o = "1.0";
    r != null && (C.assertAndGetBroadcastShape(e, r), this.variableNames.push("scale"), o = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${o};
        float inv = scale * inversesqrt(variance + float(${a}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
};
var vY = class {
  constructor(e, t, n, s, r, a) {
    this.packedInputs = true, this.packedOutput = true, this.variableNames = ["x", "mean", "variance"], C.assertAndGetBroadcastShape(e, t), C.assertAndGetBroadcastShape(e, n);
    let i = "vec4(0.0)";
    s != null && (C.assertAndGetBroadcastShape(e, s), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let o = "vec4(1.0)";
    r != null && (C.assertAndGetBroadcastShape(e, r), this.variableNames.push("scale"), o = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${o};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${a}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
};
var xY = ({ inputs: e, backend: t, attrs: n }) => {
  let { x: s, mean: r, variance: a, offset: i, scale: o } = e;
  w.assert(r.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), w.assert(i == null || r.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), w.assert(o == null || r.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: u } = n;
  u == null && (u = 1e-3);
  let l = [s, r, a], c = null;
  i != null && (c = i.shape, l.push(i));
  let p = null;
  o != null && (p = o.shape, l.push(o));
  let d = X().getBool("WEBGL_PACK_NORMALIZATION") ? new vY(s.shape, r.shape, a.shape, c, p, u) : new yY(s.shape, r.shape, a.shape, c, p, u);
  return t.runWebGLProgram(d, l, l[0].dtype);
};
var wY = { kernelName: Ba, backendName: "webgl", kernelFunc: xY };
var kY = class {
  constructor(e) {
    this.variableNames = ["source"], this.outputShape = e, this.rank = e.length;
    let t = ot(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    let n = IY(this.rank), s, r = e.map((a, i) => `sourceLoc.${qm[i]} = start[${i}] + coords.${qm[i]};`);
    s = `
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${r.join(`
`)}
      `, this.userCode = `
      void main() {
        ${s}
        setOutput(getSource(${n}));
      }
    `;
  }
};
var qm = ["x", "y", "z", "w", "u", "v"];
function IY(e) {
  if (e === 1)
    return "sourceLoc";
  if (e <= 6)
    return qm.slice(0, e).map((t) => "sourceLoc." + t).join(",");
  throw Error(`Slicing for rank ${e} is not yet supported`);
}
var SY = class {
  constructor(e) {
    this.variableNames = ["source"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.rank = e.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    let t = ot(this.rank), n = un("coords", this.rank), s = un("sourceLoc", this.rank), r = this.rank === 1 ? "sourceLoc" : `vec2(${s.slice(-2).join()})`, a = `getChannel(getSource(${s.join()}), ${r})`, i = `
      result.x = ${a};
      if (++${n[this.rank - 1]} < ${e[this.rank - 1]}) {
        ++${s[this.rank - 1]};
        result.y = ${a};
        --${s[this.rank - 1]};
      }
    `, o = this.rank === 1 ? "" : `
      --${n[this.rank - 1]};
      if (++${n[this.rank - 2]} < ${e[this.rank - 2]}) {
        ++${s[this.rank - 2]};
        result.z = ${a};
        if (++${n[this.rank - 1]} < ${e[this.rank - 1]}) {
          ++${s[this.rank - 1]};
          result.w = ${a};
        }
      }
    `, u = this.rank <= 4 ? `sourceLoc = coords +
            ${t}(${e.map((l, c) => `start[${c}]`).join()});` : e.map((l, c) => `${s[c]} = ${n[c]} + start[${c}];`).join(`
`);
    this.userCode = `
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${i}
        ${o}
        setOutput(result);
      }
    `;
  }
};
function CY(e, t, n, s) {
  let r = s.texData.get(e.dataId), a = s.makeTensorInfo(n, e.dtype), i = s.texData.get(a.dataId);
  Object.assign(i, r), i.refCount = 1, i.shape = n, i.dtype = e.dtype;
  let o = wt.computeFlatOffset(t, w.computeStrides(e.shape));
  r.slice && (o += r.slice.flatOffset), i.slice = { flatOffset: o, origDataId: r.slice && r.slice.origDataId || e.dataId };
  let u = s.dataRefCount.get(i.slice.origDataId) || 1;
  return s.dataRefCount.set(i.slice.origDataId, u + 1), a;
}
function lu(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { begin: a, size: i } = s, [o, u] = wt.parseSliceParams(r, a, i);
  if (wt.assertParamsValid(r, o, u), w.sizeFromShape(u) === 0)
    return n.makeTensorInfo(u, r.dtype, []);
  if (n.shouldExecuteOnCPU([r]) || r.dtype === "string") {
    let p = n.texData.get(r.dataId), d = mX(p.values, o, u, r.shape, r.dtype);
    return n.makeTensorInfo(u, r.dtype, d);
  }
  let { isPacked: l } = n.texData.get(r.dataId), c = wt.isSliceContinous(r.shape, o, u);
  if (l || !c) {
    let p = X().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new SY(u) : new kY(u), d = [o];
    return n.runWebGLProgram(p, [r], r.dtype, d);
  }
  return n.uploadToGPU(r.dataId), CY(r, o, u, n);
}
var NY = { kernelName: zo, backendName: "webgl", kernelFunc: lu };
var TY = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockShape: a, crops: i } = s;
  w.assert(r.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  let o = a.reduce((y, v) => y * v), u = C.getReshaped(r.shape, a, o), l = C.getPermuted(u.length, a.length), c = C.getReshapedPermuted(r.shape, a, o), p = C.getSliceBeginCoords(i, a.length), d = C.getSliceSize(c, i, a.length), h = [], f = he({ inputs: { x: r }, backend: n, attrs: { shape: u } }), m = dn({ inputs: { x: f }, backend: n, attrs: { perm: l } }), g = he({ inputs: { x: m }, backend: n, attrs: { shape: c } }), b = lu({ inputs: { x: g }, backend: n, attrs: { begin: p, size: d } });
  return h.push(f), h.push(m), h.push(g), h.forEach((y) => n.disposeIntermediateTensorInfo(y)), b;
};
var $Y = { kernelName: lo, backendName: "webgl", kernelFunc: TY };
function _Y(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, weights: a } = t, { size: i } = s, o = n.readSync(r.dataId), u = n.readSync(a.dataId), l = M1(o, u, a.dtype, a.shape, i);
  return n.makeTensorInfo([i], a.dtype, l);
}
var AY = { kernelName: cg, backendName: "webgl", kernelFunc: _Y };
function EY(e) {
  let { inputs: t, backend: n } = e, { s0: s, s1: r } = t, a = n.readSync(s.dataId), i = n.readSync(r.dataId), o = C.assertAndGetBroadcastShape(Array.from(a), Array.from(i));
  return n.makeTensorInfo([o.length], "int32", Int32Array.from(o));
}
var RY = { kernelName: dg, backendName: "webgl", kernelFunc: EY };
var DY = "return float(a != b);";
var t2 = qt({ opSnippet: DY, cpuKernelImpl: cX, dtype: "bool" });
var FY = { kernelName: No, backendName: "webgl", kernelFunc: t2 };
function Jl(e) {
  let { inputs: t, backend: n } = e, { input: s } = t, r = n.texData.get(s.dataId);
  return Rn({ inputs: { x: r.complexTensorInfos.real }, backend: n });
}
var OY = { kernelName: rp, backendName: "webgl", kernelFunc: Jl };
var PY = "return float(int(x));";
function zY(e, t) {
  let n = new Hs(e.shape, PY), s = t.runWebGLProgram(n, [e], "int32");
  return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
function jm(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { dtype: a } = s;
  if (a === "complex64") {
    if (r.dtype === "complex64")
      return Rn({ inputs: { x: r }, backend: n });
    let i = $t(r.shape), o = jm({ inputs: { x: r }, backend: n, attrs: { dtype: "float32" } }), u = Dr({ inputs: { real: o, imag: i }, backend: n });
    return i.dispose(), n.disposeIntermediateTensorInfo(o), u;
  }
  if (r.dtype === "complex64") {
    let i = Jl({ inputs: { input: r }, backend: n }), o = jm({ inputs: { x: i }, backend: n, attrs: { dtype: a } });
    return n.disposeIntermediateTensorInfo(i), o;
  }
  if (!w.hasEncodingLoss(r.dtype, a)) {
    let i = Rn({ inputs: { x: r }, backend: n });
    return { dataId: i.dataId, shape: i.shape, dtype: a };
  }
  if (a === "int32")
    return zY(r, n);
  if (a === "bool") {
    let i = n.makeTensorInfo([], "bool", w.getTypedArrayFromDType("bool", 1)), u = t2({ inputs: { a: r, b: i }, backend: n });
    return n.disposeIntermediateTensorInfo(i), u;
  }
  throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`);
}
var MY = { kernelName: Ta, backendName: "webgl", kernelFunc: jm };
var gw = "return ceil(x);";
var LY = Ke({ opSnippet: gw, packedOpSnippet: gw, cpuKernelImpl: HK });
var BY = { kernelName: $a, backendName: "webgl", kernelFunc: LY };
var VY = class {
  constructor(e) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
};
var WY = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
};
function UY(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { clipValueMin: a, clipValueMax: i } = s, o;
  X().getBool("WEBGL_PACK_CLIP") ? o = new WY(r.shape) : o = new VY(r.shape);
  let u = [[a], [i]];
  return n.runWebGLProgram(o, [r], r.dtype, u);
}
var GY = { kernelName: Cr, backendName: "webgl", kernelFunc: UY };
var HY = class {
  constructor(e) {
    this.variableNames = ["real", "imag"], this.outputShape = e, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
};
function bw(e, t) {
  return { dataId: t.dataId, dtype: t.dtype, shape: e.shape };
}
function qY(e) {
  let { inputs: t, backend: n } = e, { x: s } = t, r = n.texData.get(s.dataId), a = new HY(s.shape), i = [bw(s, r.complexTensorInfos.real), bw(s, r.complexTensorInfos.imag)];
  return n.runWebGLProgram(a, i, i[0].dtype);
}
var jY = { kernelName: Yd, backendName: "webgl", kernelFunc: qY };
var KY = class {
  constructor(e) {
    this.outputShape = [], this.outputShape = C.computeOutShape(e, 1), this.variableNames = e.map((a, i) => `T${i}`);
    let t = new Array(e.length - 1);
    t[0] = e[0][1];
    for (let a = 1; a < t.length; a++)
      t[a] = t[a - 1] + e[a][1];
    let n = [`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];
    for (let a = 1; a < t.length; a++) {
      let i = t[a - 1];
      n.push(`else if (yC < ${t[a]}) setOutput(getT${a}(yR, yC-${i}));`);
    }
    let s = t.length, r = t[t.length - 1];
    n.push(`else setOutput(getT${s}(yR, yC-${r}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${n.join(`
        `)}
      }
    `;
  }
};
var XY = class {
  constructor(e, t) {
    this.packedInputs = true, this.packedOutput = true, this.outputShape = [], this.outputShape = C.computeOutShape(e, t);
    let n = this.outputShape, s = n.length, r = ot(s), a = un("coords", s), i = ["x", "y", "z", "w", "u", "v"].slice(0, s);
    this.variableNames = e.map((f, m) => `T${m}`);
    let o = new Array(e.length - 1);
    o[0] = e[0][t];
    for (let f = 1; f < o.length; f++)
      o[f] = o[f - 1] + e[f][t];
    let u = i[t], l = i.slice(-2), c = i.join(), p = `if (${u} < ${o[0]}) {
        return getChannel(
            getT0(${c}), vec2(${l.join()}));
        }`;
    for (let f = 1; f < o.length; f++) {
      let m = o[f - 1];
      p += `
        if (${u} < ${o[f]}  && ${u} >= ${o[f - 1]}) {
          return getChannel(
            getT${f}(${Jc(i, u, m)}),
            vec2(${Jc(l, u, m)}));
        }`;
    }
    let d = o.length, h = o[o.length - 1];
    p += `
        return getChannel(
          getT${d}(${Jc(i, u, h)}),
          vec2(${Jc(l, u, h)}));`, this.userCode = `
      float getValue(${i.map((f) => "int " + f)}) {
        ${p}
      }

      void main() {
        ${r} coords = getOutputCoords();
        vec4 result = vec4(getValue(${a}), 0., 0., 0.);

        ${a[s - 1]} = ${a[s - 1]} + 1;
        if (${a[s - 1]} < ${n[s - 1]}) {
          result.g = getValue(${a});
        }

        ${a[s - 2]} = ${a[s - 2]} + 1;
        if (${a[s - 2]} < ${n[s - 2]}) {
          result.a = getValue(${a});
        }

        ${a[s - 1]} = ${a[s - 1]} - 1;
        if (${a[s - 2]} < ${n[s - 2]} &&
            ${a[s - 1]} < ${n[s - 1]}) {
          result.b = getValue(${a});
        }
        setOutput(result);
      }
    `;
  }
};
function Jc(e, t, n) {
  let s = e.indexOf(t);
  return e.map((a, i) => i === s ? `${a} - ${n}` : a).join();
}
function Jp(e) {
  let { inputs: t, backend: n } = e, { input: s } = t, r = n.texData.get(s.dataId);
  return Rn({ inputs: { x: r.complexTensorInfos.imag }, backend: n });
}
var YY = { kernelName: ep, backendName: "webgl", kernelFunc: Jp };
function qi(e, t, n) {
  let s = e[0].dtype;
  if (s === "complex64") {
    let c = e.map((m) => Jl({ inputs: { input: m }, backend: n })), p = e.map((m) => Jp({ inputs: { input: m }, backend: n })), d = qi(c, t, n), h = qi(p, t, n), f = Dr({ inputs: { real: d, imag: h }, backend: n });
    return c.forEach((m) => n.disposeIntermediateTensorInfo(m)), p.forEach((m) => n.disposeIntermediateTensorInfo(m)), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(h), f;
  }
  let r = n.shouldExecuteOnCPU(e);
  if (s === "string" && (r = true), r) {
    let c = e.map((b) => {
      let y = w.sizeFromShape(b.shape.slice(t));
      return he({ inputs: { x: b }, backend: n, attrs: { shape: [-1, y] } });
    }), p = c.map((b) => ({ vals: n.readSync(b.dataId), shape: b.shape })), d = C.computeOutShape(c.map((b) => b.shape), 1), h = c[0].shape[0] === 1, f = qK(p, d, s, h), m = C.computeOutShape(e.map((b) => b.shape), t), g = n.makeTensorInfo(m, s, f);
    return c.forEach((b) => n.disposeIntermediateTensorInfo(b)), g;
  }
  if (e.length > X().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    let c = Math.floor(e.length / 2), p = qi(e.slice(0, c), t, n), d = qi(e.slice(c), t, n), h = qi([p, d], t, n);
    return n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(d), h;
  }
  if (X().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && e[0].shape.length > 1) {
    let c = new XY(e.map((p) => p.shape), t);
    return n.runWebGLProgram(c, e, s);
  }
  let { tensors2D: a, outShape: i } = QY(e, t, n), o = new KY(a.map((c) => c.shape)), u = n.runWebGLProgram(o, a, s);
  a.forEach((c) => n.disposeIntermediateTensorInfo(c));
  let l = he({ inputs: { x: u }, attrs: { shape: i }, backend: n });
  return n.disposeIntermediateTensorInfo(u), l;
}
function QY(e, t, n) {
  let s = C.computeOutShape(e.map((a) => a.shape), t);
  return { tensors2D: e.map((a) => he({ inputs: { x: a }, attrs: { shape: [-1, w.sizeFromShape(a.shape.slice(t))] }, backend: n })), outShape: s };
}
function n2(e) {
  let { inputs: t, backend: n, attrs: s } = e, { axis: r } = s, a = w.parseAxisParam(r, t[0].shape)[0], i = C.computeOutShape(t.map((l) => l.shape), a);
  if (w.sizeFromShape(i) === 0)
    return n.makeTensorInfo(i, t[0].dtype, []);
  let o = t.filter((l) => w.sizeFromShape(l.shape) > 0);
  if (o.length === 1)
    return Rn({ inputs: { x: o[0] }, backend: n });
  let u = o.map((l) => l.shape);
  return C.assertParamsConsistent(u, a), qi(o, a, n);
}
var ZY = { kernelName: co, backendName: "webgl", kernelFunc: n2 };
var s2 = class {
  constructor(e, t = false, n = null, s = false, r = false) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    let a = e.padInfo.top, i = e.padInfo.left, o = e.strideHeight, u = e.strideWidth, l = e.dilationHeight, c = e.dilationWidth, p = e.filterHeight, d = e.filterWidth, h = Math.floor(e.inChannels / 4) * 4, f = e.inChannels % 4, m = e.dataFormat === "channelsLast", g = m ? 1 : 2, b = m ? 2 : 3, y = m ? 3 : 1, v = "", x = "";
    n && (s ? v = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : r ? v = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : v = `
          float activation(float x) {
            ${n}
          }
        `, x = "result = activation(result);");
    let k = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${v}

      const ivec2 strides = ivec2(${o}, ${u});
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${y}];

        ivec2 xRCCorner =
            ivec2(coords[${g}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${p}; wR++) {
          int xR = xRCorner + wR * ${l};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * ${c};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${h}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${m}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${f === 1}) {

              if (${m}) {
                dotProd +=
                    getX(batch, xR, xC, ${h}) *
                    getW(wR, wC, ${h}, d2);
              } else {
                dotProd +=
                    getX(batch, ${h}, xR, xC) *
                    getW(wR, wC, ${h}, d2);
              }

            } else if (${f === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2)
              );

              if (${m}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${f === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2),
                getW(wR, wC, ${h} + 2, d2)
              );

              if (${m}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1),
                  getX(batch, xR, xC, ${h} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC),
                  getX(batch, ${h} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${k}
        ${x}
        setOutput(result);
      }
    `;
  }
};
var JY = class {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    let t = e.padInfo.front, n = e.padInfo.top, s = e.padInfo.left, r = e.strideDepth, a = e.strideHeight, i = e.strideWidth, o = e.dilationDepth, u = e.dilationHeight, l = e.dilationWidth, c = e.filterDepth, p = e.filterHeight, d = e.filterWidth, h = Math.floor(e.inChannels / 4) * 4, f = e.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${r}, ${a}, ${i});
      const ivec3 pads = ivec3(${t}, ${n}, ${s});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${c}; wF++) {
          int xF = xFCorner + wF * ${o};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${p}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d}; wC++) {
              int xC = xCCorner + wC * ${l};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${h}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${f === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${h}) *
                  getW(wF, wR, wC, ${h}, d2);
              } else if (${f === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${f === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1),
                  getX(batch, xF, xR, xC, ${h} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2),
                  getW(wF, wR, wC, ${h} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var e9 = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec3" }, { name: "pad", type: "ivec2" }, { name: "stride", type: "ivec2" }, { name: "dilation", type: "ivec2" }, { name: "inChannels", type: "int" }, { name: "itemsPerBlockRow", type: "int" }, { name: "outWidth", type: "int" }], this.outputShape = e, this.enableShapeUniforms = In(this.outputShape.length);
    let { dataFormat: n } = t, s = fn(), r = n === "channelsLast", a = r ? 0 : 1, i = r ? 1 : 2, o = this.enableShapeUniforms ? "if(blockIndex < outShape[1] && pos < outShape[0]) {" : `if(blockIndex < ${e[1]} && pos < ${e[0]}) {`, u = "";
    for (let l = 0; l <= 1; l++)
      for (let c = 0; c <= 1; c++)
        u += `
          blockIndex = rc.y + ${c};
          pos = rc.x + ${l};

          ${o}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${a}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${r}) {
                  innerDims = vec2(d1, ch);
                  result[${l * 2 + c}] = getChannel(
                    getA(d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${l * 2 + c}] = getChannel(
                    getA(ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec2 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${s.output} = result;
      }
    `;
  }
};
function r2({ x: e, filter: t, convInfo: n, backend: s, bias: r = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: o = null }) {
  let u = e.shape, l = s.texData.get(e.dataId), c = n.inChannels, p = u[0] * u[1] * u[2], d = n.outChannels, h = n.dataFormat === "channelsLast", f = false, m = false, g, b = [];
  if (!((p === 1 || d === 1) && c > Q1) && l.isPacked && h && l.texture != null && u[2] % 2 !== 0 && w.arraysEqual(l.shape.slice(-3), u.slice(-3))) {
    let x = u[0] * u[1] * (u[2] + 1), k = { dataId: e.dataId, shape: [1, x, n.inChannels], dtype: e.dtype }, S = l.shape;
    l.shape = l.shape.slice(), l.shape[l.shape.length - 2]++, w.assert(tl(l.shape, k.shape), () => `packed reshape ${l.shape} to ${k.shape} isn't free`);
    let $ = he({ inputs: { x: t }, backend: s, attrs: { shape: [1, n.inChannels, n.outChannels] } });
    b.push($);
    let E = Ld({ a: k, b: $, backend: s, transposeA: f, transposeB: m, bias: r, activation: o, preluActivationWeights: a, leakyreluAlpha: i }), A = s.texData.get(E.dataId);
    w.assert(A.isPacked, () => "batchMatMul result is expected to be packed"), l.shape = S, A.shape = n.outShape, g = Rn({ inputs: { x: E }, backend: s }), g.shape = n.outShape, b.push(E);
  } else {
    let x = h ? u[0] * u[1] * u[2] : u[0] * u[2] * u[3], k = he({ inputs: { x: e }, backend: s, attrs: { shape: [1, x, n.inChannels] } }), S = he({ inputs: { x: t }, backend: s, attrs: { shape: [1, n.inChannels, n.outChannels] } }), $ = Ld({ a: k, b: S, transposeA: f, transposeB: m, backend: s, bias: r, activation: o, preluActivationWeights: a, leakyreluAlpha: i });
    g = he({ inputs: { x: $ }, backend: s, attrs: { shape: n.outShape } }), b.push(k), b.push(S), b.push($);
  }
  for (let x of b)
    s.disposeIntermediateTensorInfo(x);
  return g;
}
function a2({ x: e, filter: t, convInfo: n, backend: s, bias: r = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: o = null }) {
  let { filterWidth: u, filterHeight: l, inChannels: c, outWidth: p, outHeight: d, dataFormat: h } = n, f = h === "channelsLast", m = u * l * c, g = d * p, b = [m, g], y = true, v = false, x = [], k = he({ inputs: { x: e }, backend: s, attrs: { shape: e.shape.slice(1) } }), S = he({ inputs: { x: t }, backend: s, attrs: { shape: [1, m, w.sizeFromShape(t.shape) / m] } });
  x.push(k), x.push(S);
  let $ = new e9(b, n), E = [k.shape, [n.padInfo.top, n.padInfo.left], [n.strideHeight, n.strideWidth], [n.dilationHeight, n.dilationWidth], [n.inChannels], [n.filterWidth * n.inChannels], [n.outWidth]], A = s.runWebGLProgram($, [k], "float32", E), P = he({ inputs: { x: A }, backend: s, attrs: { shape: [1, b[0], b[1]] } });
  x.push(A), x.push(P);
  let R = r != null, F = a != null, T = o === "leakyrelu", z = o ? Yp(o, true) : null, W = new Y1(P.shape, S.shape, [1, g, n.outChannels], y, v, R, z, F, T), q = [P, S];
  if (r && q.push(r), F && q.push(a), T) {
    let te = s.makeTensorInfo([], "float32", w.createScalarValue(i, "float32"));
    q.push(te), x.push(te);
  }
  let K = s.runWebGLProgram(W, q, "float32"), Y = f ? [1, d, p, n.outChannels] : [1, n.outChannels, d, p], Z = he({ inputs: { x: K }, backend: s, attrs: { shape: Y } });
  x.push(K);
  for (let te of x)
    s.disposeIntermediateTensorInfo(te);
  return Z;
}
function t9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a } = t, { strides: i, pad: o, dataFormat: u, dilations: l, dimRoundingMode: c } = s, p = C.convertConv2DDataFormat(u), d = C.computeConv2DInfo(r.shape, a.shape, i, l, o, c, false, p), h;
  if (d.filterHeight === 1 && d.filterWidth === 1 && d.dilationHeight === 1 && d.dilationWidth === 1 && d.strideHeight === 1 && d.strideWidth === 1 && (d.padInfo.type === "SAME" || d.padInfo.type === "VALID"))
    h = r2({ x: r, filter: a, convInfo: d, backend: n });
  else if (X().getBool("WEBGL_CONV_IM2COL") && r.shape[0] === 1)
    h = a2({ x: r, filter: a, convInfo: d, backend: n });
  else {
    let m = new s2(d);
    h = n.runWebGLProgram(m, [r, a], "float32");
  }
  let f = he({ inputs: { x: h }, backend: n, attrs: { shape: d.outShape } });
  return n.disposeIntermediateTensorInfo(h), f;
}
var n9 = { kernelName: _a, backendName: "webgl", kernelFunc: t9 };
var s9 = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    let t = e.strideHeight, n = e.strideWidth, s = e.padInfo.top, r = e.padInfo.left, a = e.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${s};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${r};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${a}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var r9 = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    let t = e.filterHeight, n = e.filterWidth, s = e.strideHeight, r = e.strideWidth, a = e.dataFormat === "channelsLast", i = t - 1 - e.padInfo.top, o = n - 1 - e.padInfo.left, u = a ? 1 : 2, l = a ? 2 : 3, c = a ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${c}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${a}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var a9 = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    let t = e.strideDepth, n = e.strideHeight, s = e.strideWidth, r = e.padInfo.front, a = e.padInfo.top, i = e.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${r};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${n} - ${a};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${s} - ${i};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var i9 = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    let t = e.filterDepth, n = e.filterHeight, s = e.filterWidth, r = e.strideDepth, a = e.strideHeight, i = e.strideWidth, o = t - 1 - e.padInfo.front, u = n - 1 - e.padInfo.top, l = s - 1 - e.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${o}, ${u}, ${l});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${r}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${n}; wR++) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${n} - 1 - wR;

            for (int wC = 0; wC < ${s}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${s} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function o9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, dy: a } = t, { strides: i, pad: o, dataFormat: u, dimRoundingMode: l, filterShape: c } = s, p = C.convertConv2DDataFormat(u), d = C.computeConv2DInfo(r.shape, c, i, 1, o, l, false, p), h = new s9(d);
  return n.runWebGLProgram(h, [r, a], "float32");
}
var u9 = { kernelName: pg, backendName: "webgl", kernelFunc: o9 };
function l9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, filter: a } = t, { inputShape: i, strides: o, pad: u, dataFormat: l, dimRoundingMode: c } = s, p = C.convertConv2DDataFormat(l), d = C.computeConv2DInfo(i, a.shape, o, 1, u, c, false, p), h = new r9(d);
  return n.runWebGLProgram(h, [r, a], "float32");
}
var c9 = { kernelName: Aa, backendName: "webgl", kernelFunc: l9 };
function d9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a } = t, { strides: i, pad: o, dilations: u } = s, l = C.computeConv3DInfo(r.shape, a.shape, i, u, o), c = new JY(l);
  return n.runWebGLProgram(c, [r, a], "float32");
}
var p9 = { kernelName: Qd, backendName: "webgl", kernelFunc: d9 };
function h9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, dy: a } = t, { strides: i, pad: o, filterShape: u } = s, l = C.computeConv3DInfo(r.shape, u, i, 1, o), c = new a9(l);
  return n.runWebGLProgram(c, [r, a], "float32");
}
var f9 = { kernelName: hg, backendName: "webgl", kernelFunc: h9 };
function m9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, filter: a } = t, { pad: i, strides: o, inputShape: u } = s, l = C.computeConv3DInfo(u, a.shape, o, 1, i), c = new i9(l);
  return n.runWebGLProgram(c, [r, a], "float32");
}
var g9 = { kernelName: fg, backendName: "webgl", kernelFunc: m9 };
var b9 = uu + `
  return cos(x);
`;
var y9 = Ke({ opSnippet: b9 });
var v9 = { kernelName: Ea, backendName: "webgl", kernelFunc: y9 };
var x9 = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`;
var w9 = Ke({ opSnippet: x9 });
var k9 = { kernelName: Ra, backendName: "webgl", kernelFunc: w9 };
var I9 = class {
  constructor(e, t, n, s, r) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    let [a, i, o, u] = e, [l] = t, [c, p] = n;
    this.outputShape = [l, c, p, u];
    let d = s === "bilinear" ? 1 : 0, [h, f] = [`${i - 1}.0`, `${o - 1}.0`], [m, g, b] = c > 1 ? [`${(i - 1) / (c - 1)}`, "(y2-y1) * height_ratio", `y1*${h} + float(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${h}`], [y, v, x] = p > 1 ? [`${(o - 1) / (p - 1)}`, "(x2-x1) * width_ratio", `x1*${f} + float(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${f}`];
    this.userCode = `
      const float height_ratio = float(${m});
      const float width_ratio = float(${y});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${a}) {
          return;
        }

        float height_scale = ${g};
        float width_scale = ${v};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${h} ) {
          setOutput(float(${r}));
          return;
        }
        float in_x = ${x};
        if( in_x < 0.0 || in_x > ${f} ) {
          setOutput(float(${r}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${d} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
};
var S9 = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { image: r, boxes: a, boxInd: i } = t, { cropSize: o, method: u, extrapolationValue: l } = s, c = new I9(r.shape, a.shape, o, u, l);
  return n.runWebGLProgram(c, [r, a, i], "float32");
};
var C9 = { kernelName: ho, backendName: "webgl", kernelFunc: S9 };
var yw = class {
  constructor(e, t, n, s) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }], this.op = e, this.outputShape = t;
    let r = t.length, a = this.op === "*" ? "1.0" : "0.0", i = n ? a : `getX(${vw(r, "coords", this.op)})`, o = t[t.length - 1], u = "", l = "";
    n ? (u = s ? `end != ${o - 1}` : "end != 0", l = s ? "end + 1" : "end - 1") : (u = s ? `end + pow2 < ${o}` : "end >= pow2", l = s ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${ot(r)} coords = getOutputCoords();
        int end = ${xw(r, "coords", this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${l};
          ${xw(r, "coords", this.op)} = idx;
          val ${this.op}= getX(${vw(r, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
};
function vw(e, t, n) {
  if (e === 1)
    return `${t}`;
  if (e === 2)
    return `${t}.x, ${t}.y`;
  if (e === 3)
    return `${t}.x, ${t}.y, ${t}.z`;
  if (e === 4)
    return `${t}.x, ${t}.y, ${t}.z, ${t}.w`;
  throw Error(`Cumulative ${n} for rank ${e} is not yet supported`);
}
function xw(e, t, n) {
  if (e === 1)
    return `${t}`;
  if (e === 2)
    return `${t}.y`;
  if (e === 3)
    return `${t}.z`;
  if (e === 4)
    return `${t}.w`;
  throw Error(`Cumulative ${n} for rank ${e} is not yet supported`);
}
function i2(e, t, n, s, r, a) {
  let i = t.shape.length, o = C.getAxesPermutation([s], i), u = t;
  o != null && (u = dn({ inputs: { x: t }, backend: n, attrs: { perm: o } }));
  let l = C.getInnerMostAxes(1, i)[0];
  if (l !== i - 1)
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length - 1} but got axis=${s}`);
  let c = u.shape[l], p = Rn({ inputs: { x: u }, backend: n });
  for (let d = 0; d <= Math.ceil(Math.log2(c)) - 1; d++) {
    let h = new yw(e, u.shape, false, a), f = [[d]], m = p;
    p = n.runWebGLProgram(h, [p], p.dtype, f), n.disposeIntermediateTensorInfo(m);
  }
  if (r) {
    let d = new yw(e, u.shape, r, a), h = p;
    p = n.runWebGLProgram(d, [p], p.dtype), n.disposeIntermediateTensorInfo(h);
  }
  if (o != null) {
    let d = C.getUndoAxesPermutation(o), h = dn({ inputs: { x: p }, backend: n, attrs: { perm: d } });
    return n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(u), h;
  }
  return p;
}
function N9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, exclusive: i, reverse: o } = s;
  return i2("*", r, n, a, i, o);
}
var T9 = { kernelName: po, backendName: "webgl", kernelFunc: N9 };
function $9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, exclusive: i, reverse: o } = s;
  return i2("+", r, n, a, i, o);
}
var _9 = { kernelName: Da, backendName: "webgl", kernelFunc: $9 };
function A9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, weights: a } = t, { size: i, binaryOutput: o } = s;
  if (r.shape.length === 1) {
    let u = n.readSync(r.dataId), l = n.readSync(a.dataId), c = M1(u, l, a.dtype, a.shape, i);
    return n.makeTensorInfo([i], a.dtype, c);
  } else if (r.shape.length === 2) {
    let u = n.bufferSync(r), l = n.bufferSync(a), c = GK(u, l, i, o);
    return n.makeTensorInfo(c.shape, a.dtype, c.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
var E9 = { kernelName: mg, backendName: "webgl", kernelFunc: A9 };
var R9 = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = e, this.blockSize = t, this.dataFormat = n, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
};
function D9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockSize: a, dataFormat: i } = s, o = r.shape[0], u = i === "NHWC" ? r.shape[1] : r.shape[2], l = i === "NHWC" ? r.shape[2] : r.shape[3], c = i === "NHWC" ? r.shape[3] : r.shape[1], p = u * a, d = l * a, h = c / (a * a), f = i === "NHWC" ? [o, p, d, h] : [o, h, p, d], m = new R9(f, a, i);
  return n.runWebGLProgram(m, [r], r.dtype);
}
var F9 = { kernelName: fo, backendName: "webgl", kernelFunc: D9 };
var o2 = class {
  constructor(e, t = false, n = null, s = false, r = false) {
    this.variableNames = ["x", "W"], this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = In(this.outputShape.length);
    let a = e.filterHeight, i = e.filterWidth, o = e.outChannels / e.inChannels, u = "", l = "";
    n && (s ? u = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : r ? u = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : u = `
          float activation(float x) {
            ${n}
          }
        `, l = "result = activation(result);");
    let c = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${a}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${c}
        ${l}
        setOutput(result);
      }
    `;
  }
};
var u2 = class {
  constructor(e, t = false, n = null, s = false, r = false) {
    this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = In(this.outputShape.length);
    let a = e.outChannels / e.inChannels, i = e.padInfo.left, o = e.strideWidth, u = e.dilationWidth, l = e.filterHeight, c = e.filterWidth, p = c, d = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let g = 0; g < c; g++)
      d += `
          vec4 xTexelC${g * 2};
          int xTexelC${g * 2}Ready;
          vec4 xTexelC${g * 2 + 1};
          int xTexelC${g * 2 + 1}Ready;
          vec4 xC${g};`;
    d += `
    for (int r = 0; r < ${l}; r++) {
      `;
    for (let g = 0; g < c; g++)
      d += `
          xTexelC${g * 2} = vec4(0.0);
          xTexelC${g * 2}Ready = 0;
          xTexelC${g * 2 + 1} = vec4(0.0);
          xTexelC${g * 2 + 1}Ready = 0;
          xC${g} = vec4(0.0);`;
    d += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let g = 0; g < (p + 1) / 2; g++) {
      let b = g * 2;
      if (d += `
          xC = xCCorner + ${b * u};
          `, o === 1) {
        if (b < c && (i % 2 === 1 ? (d += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `, u === 1 && b > 0 ? d += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                ` : d += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `) : d += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `, b + 1 < c)) {
          let y = i % 2 === 0 ? w.nearestLargerEven(u) : u;
          u % 2 === 0 && i % 2 === 1 || u % 2 !== 0 && i % 2 !== 1 ? (d += `
                  xCOffset = xC + imod(pads[1], 2) + ${y};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `, u > 1 && (d += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                      xTexelC${b} = getX(batch, xR, xCOffset, d1);
                      xTexelC${b}Ready = 1;
                    }
                    `), d += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                  `) : y === 1 ? d += `
                    xC${b + 1} = xTexelC${b};
                    ` : d += `
                    xCOffset = xC + ${y};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `;
        }
      } else
        b < c && (i % 2 === 1 ? (d += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `, b + 1 < c && (d += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `)) : (d += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `, b + 1 < c && (d += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `)));
      b < c && (d += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `, b + 1 < c && (d += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    d += `
    }
  `, d += `
      }
    `;
    let h = "", f = "";
    n && (s ? h = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : r ? h = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : h = `vec4 activation(vec4 x) {
          ${n}
        }`, f = "result = activation(result);");
    let m = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${h}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${a};
        int q = d2 - d1 * ${a};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${d}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${m}
        ${f}
        setOutput(result);
      }
    `;
  }
};
function O9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a } = t, { strides: i, pad: o, dilations: u, dimRoundingMode: l } = s, c = u;
  c == null && (c = [1, 1]), w.assert(C.eitherStridesOrDilationsAreOne(i, c), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  let p = C.computeConv2DInfo(r.shape, a.shape, i, c, o, l, true), d;
  X().getBool("WEBGL_PACK_DEPTHWISECONV") && p.strideWidth <= 2 && p.outChannels / p.inChannels === 1 ? d = new u2(p) : d = new o2(p);
  let h = [[p.padInfo.top, p.padInfo.left], [p.strideHeight, p.strideWidth], [p.dilationHeight, p.dilationWidth], [p.inHeight, p.inWidth]];
  return n.runWebGLProgram(d, [r, a], "float32", h);
}
var P9 = { kernelName: Fa, backendName: "webgl", kernelFunc: O9 };
var z9 = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    let t = e.strideHeight, n = e.strideWidth, s = e.padInfo.top, r = e.padInfo.left, a = e.outChannels / e.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${a} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${s};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${r};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var M9 = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    let t = e.filterHeight, n = e.filterWidth, s = e.strideHeight, r = e.strideWidth, a = t - 1 - e.padInfo.top, i = n - 1 - e.padInfo.left, o = e.outChannels / e.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${o}; dm++) {
              int d2 = d1 * ${o} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function L9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, dy: a } = t, { strides: i, dilations: o, pad: u, dimRoundingMode: l, filterShape: c } = s, p = C.computeConv2DInfo(r.shape, c, i, o, u, l, true), d = new z9(p);
  return n.runWebGLProgram(d, [r, a], "float32");
}
var B9 = { kernelName: gg, backendName: "webgl", kernelFunc: L9 };
function V9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, filter: a } = t, { strides: i, dilations: o, pad: u, dimRoundingMode: l, inputShape: c } = s, p = C.computeConv2DInfo(c, a.shape, i, o, u, l, true), d = new M9(p);
  return n.runWebGLProgram(d, [r, a], "float32");
}
var W9 = { kernelName: bg, backendName: "webgl", kernelFunc: V9 };
var U9 = class {
  constructor(e) {
    this.variableNames = ["X"], this.outputShape = [e, e], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
};
function G9(e) {
  let { inputs: t, backend: n } = e, { x: s } = t, r = [...s.shape, ...s.shape], a = w.sizeFromShape(s.shape), i = he({ inputs: { x: s }, backend: n, attrs: { shape: [a] } }), o = new U9(a), u = n.runWebGLProgram(o, [i], i.dtype), l = he({ inputs: { x: u }, backend: n, attrs: { shape: r } });
  return n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(u), l;
}
var H9 = { kernelName: yg, backendName: "webgl", kernelFunc: G9 };
var q9 = class {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    let { inHeight: t, inWidth: n, padInfo: s, strideHeight: r, strideWidth: a, filterHeight: i, filterWidth: o, dilationHeight: u, dilationWidth: l } = e, { top: c, left: p } = s;
    this.userCode = `
      const ivec2 strides = ivec2(${r}, ${a});
      const ivec2 pads = ivec2(${c}, ${p});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${o}; w++) {
              int wIn = wBeg + w * ${l};

              if (wIn >= 0 && wIn < ${n}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
};
function j9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a } = t, { strides: i, pad: o, dilations: u } = s, l = C.computeDilation2DInfo(r.shape, a.shape, i, o, "NHWC", u), c, p = new q9(l);
  c = n.runWebGLProgram(p, [r, a], "float32");
  let d = he({ inputs: { x: c }, backend: n, attrs: { shape: l.outShape } });
  return n.disposeIntermediateTensorInfo(c), d;
}
var K9 = { kernelName: Zd, backendName: "webgl", kernelFunc: j9 };
function X9(e) {
  let { inputs: t, backend: n, attrs: s } = e, { equation: r } = s, a = t, { allDims: i, summedDims: o, idDims: u } = C.decodeEinsumEquation(r, a.length);
  C.checkEinsumDimSizes(i.length, u, a);
  let { path: l, steps: c } = C.getEinsumComputePath(o, u), p = c.length, d = null, h = i.length, f = [];
  for (let m = 0; m < p; ++m) {
    for (let g of c[m]) {
      let { permutationIndices: b, expandDims: y } = C.getEinsumPermutation(h, u[g]), v;
      C.isIdentityPermutation(b) ? v = a[g] : (v = dn({ inputs: { x: a[g] }, backend: n, attrs: { perm: b } }), f.push(v));
      let x = v.shape.slice();
      for (let k = 0; k < y.length; ++k)
        x.splice(y[k], 0, 1);
      w.arraysEqual(v.shape, x) || (v = he({ inputs: { x: v }, backend: n, attrs: { shape: x } }), f.push(v)), d === null ? d = v : (d = Sv({ inputs: { a: v, b: d }, backend: n }), f.push(d));
    }
    m < p - 1 && (l[m] >= 0 && (d = Zp({ inputs: { x: d }, backend: n, attrs: { axis: l[m] - (i.length - h), keepDims: false } }), f.push(d)), h--);
  }
  for (let m of f)
    m !== d && n.disposeIntermediateTensorInfo(m);
  return d;
}
var Y9 = { kernelName: Jd, backendName: "webgl", kernelFunc: X9 };
var Q9 = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var Z9 = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
var J9 = Ke({ opSnippet: Q9, packedOpSnippet: Z9 });
var eQ = { kernelName: Pa, backendName: "webgl", kernelFunc: J9 };
var tQ = "return (b >= 1.0) ? a : a * (b + 1.0);";
var nQ = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
var sQ = (e) => {
  let { inputs: t, backend: n } = e, { dy: s, y: r } = t, a = X().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Zl(nQ, s.shape, r.shape) : new io(tQ, s.shape, r.shape);
  return n.runWebGLProgram(a, [s, r], s.dtype);
};
var rQ = { kernelName: vg, backendName: "webgl", kernelFunc: sQ };
var aQ = `
  return vec4(equal(a, b));
`;
var iQ = "return float(a == b);";
var oQ = qt({ opSnippet: iQ, packedOpSnippet: aQ, dtype: "bool", cpuKernelImpl: jK });
var uQ = { kernelName: mo, backendName: "webgl", kernelFunc: oQ };
var lQ = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${C.ERF_P};
  float a1 = ${C.ERF_A1};
  float a2 = ${C.ERF_A2};
  float a3 = ${C.ERF_A3};
  float a4 = ${C.ERF_A4};
  float a5 = ${C.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`;
var cQ = Ke({ opSnippet: lQ });
var dQ = { kernelName: fl, backendName: "webgl", kernelFunc: cQ };
var pQ = uu + `
  return exp(x);
`;
var hQ = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var l2 = Ke({ opSnippet: pQ, packedOpSnippet: hQ, cpuKernelImpl: KK, dtype: "float32" });
var fQ = { kernelName: za, backendName: "webgl", kernelFunc: l2 };
function Km(e) {
  let { inputs: t, attrs: n, backend: s } = e, { dim: r } = n, { input: a } = t, i = a.shape.length, o = a.shape.slice(), u = r;
  return r < 0 && (w.assert(-(i + 1) <= r, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), u = i + r + 1), o.splice(u, 0, 1), he({ inputs: { x: a }, backend: s, attrs: { shape: o } });
}
var mQ = { kernelName: go, backendName: "webgl", kernelFunc: Km };
var ww = "return exp(x) - 1.0;";
var gQ = Ke({ opSnippet: ww, packedOpSnippet: ww, cpuKernelImpl: XK });
var bQ = { kernelName: bo, backendName: "webgl", kernelFunc: gQ };
var kw = class {
  constructor(e, t, n) {
    this.variableNames = ["real", "imag"];
    let s = t[1];
    this.outputShape = t;
    let r = n ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, a = n ? `${s}.0` : "1.0", i;
    if (e === "real")
      i = "return real * expR - imag * expI;";
    else if (e === "imag")
      i = "return real * expI + imag * expR;";
    else
      throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);
    this.userCode = `
      const float exponentMultiplier = ${r};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${s});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${s}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${a};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
};
function c2(e, t, n) {
  let s = n.texData.get(e.dataId), r = w.sizeFromShape(e.shape), a = e.shape[e.shape.length - 1], i = r / a, o = he({ inputs: { x: e }, backend: n, attrs: { shape: [i, a] } }), u = o.shape, l = new kw("real", u, t), c = new kw("imag", u, t), p = [{ dataId: s.complexTensorInfos.real.dataId, dtype: s.complexTensorInfos.real.dtype, shape: u }, { dataId: s.complexTensorInfos.imag.dataId, dtype: s.complexTensorInfos.imag.dtype, shape: u }], d = n.runWebGLProgram(l, p, "float32"), h = n.runWebGLProgram(c, p, "float32"), f = Dr({ inputs: { real: d, imag: h }, backend: n });
  n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(h);
  let m = he({ inputs: { x: f }, backend: n, attrs: { shape: e.shape } });
  return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(f), m;
}
function yQ(e) {
  let { inputs: t, backend: n } = e, { input: s } = t;
  return c2(s, false, n);
}
var vQ = { kernelName: xg, backendName: "webgl", kernelFunc: yQ };
var xQ = class {
  constructor(e, t) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = e, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
};
function ec(e) {
  let { backend: t, attrs: n } = e, { shape: s, value: r } = n, { dtype: a } = n;
  if (a = a || w.inferDtype(r), a === "string") {
    let i = w.getArrayFromDType(a, w.sizeFromShape(s));
    return i.fill(r), t.makeTensorInfo(s, a, i);
  } else {
    let i = new xQ(s, r), o = [[r]];
    return t.runWebGLProgram(i, [], a, o);
  }
}
var wQ = { kernelName: ml, backendName: "webgl", kernelFunc: ec };
var kQ = class {
  constructor(e) {
    this.variableNames = ["Image"], this.outputShape = [];
    let t = e[2];
    this.outputShape = e, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
var IQ = { kernelName: yo, backendName: "webgl", kernelFunc: ({ inputs: e, backend: t }) => {
  let { image: n } = e, s = t, r = new kQ(n.shape);
  return s.runWebGLProgram(r, [n], n.dtype);
} };
var Iw = "return floor(x);";
var SQ = Ke({ opSnippet: Iw, packedOpSnippet: Iw, cpuKernelImpl: YK });
var CQ = { kernelName: Ma, backendName: "webgl", kernelFunc: SQ };
var NQ = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`;
var TQ = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`;
var $Q = qt({ opSnippet: NQ, packedOpSnippet: TQ, dtype: "int32" });
var _Q = { kernelName: La, backendName: "webgl", kernelFunc: $Q };
var AQ = class {
  constructor(e) {
    this.variableNames = ["A"];
    let t = fn(), [n, s] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
};
var EQ = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true;
    let t = fn(), [n, s] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${s}.0, ${n}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `;
  }
};
var RQ = { kernelName: fd, backendName: "webgl", kernelFunc: DQ };
var Vi;
function DQ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { pixels: r } = t, { numChannels: a } = s, i = typeof HTMLVideoElement != "undefined" && r instanceof HTMLVideoElement, o = typeof HTMLImageElement != "undefined" && r instanceof HTMLImageElement, [u, l] = i ? [r.videoWidth, r.videoHeight] : [r.width, r.height], c = [l, u], p = [l, u, a];
  (o || i) && (Vi == null && (Vi = document.createElement("canvas").getContext("2d")), Vi.canvas.width = u, Vi.canvas.height = l, Vi.drawImage(r, 0, 0, u, l), r = Vi.canvas);
  let d = n.makeTensorInfo(c, "int32");
  n.texData.get(d.dataId).usage = 2, n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId), r);
  let h = X().getBool("WEBGL_PACK") ? new EQ(p) : new AQ(p), f = n.runWebGLProgram(h, [d], "int32");
  return n.disposeData(d.dataId), f;
}
function FQ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a, bias: i, preluActivationWeights: o } = t, { strides: u, pad: l, dataFormat: c, dilations: p, dimRoundingMode: d, activation: h, leakyreluAlpha: f } = s, m = C.convertConv2DDataFormat(c), g = C.computeConv2DInfo(r.shape, a.shape, u, p, l, d, false, m), b, y = [];
  if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID"))
    b = r2({ x: r, filter: a, convInfo: g, backend: n, bias: i, activation: h, preluActivationWeights: o, leakyreluAlpha: f });
  else if (X().getBool("WEBGL_CONV_IM2COL") && r.shape[0] === 1)
    b = a2({ x: r, filter: a, convInfo: g, backend: n, bias: i, activation: h, preluActivationWeights: o, leakyreluAlpha: f });
  else {
    let x = i != null, k = o != null, S = h === "leakyrelu", $ = h ? Yp(h, false) : null, E = new s2(g, x, $, k, S), A = [r, a];
    if (i && A.push(i), o && A.push(o), S) {
      let P = n.makeTensorInfo([], "float32", w.createScalarValue(f, "float32"));
      A.push(P), y.push(P);
    }
    b = n.runWebGLProgram(E, A, "float32");
  }
  let v = he({ inputs: { x: b }, backend: n, attrs: { shape: g.outShape } });
  return y.push(b), y.forEach((x) => n.disposeIntermediateTensorInfo(x)), v;
}
var OQ = { kernelName: ia, backendName: "webgl", kernelFunc: FQ };
function PQ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a, bias: i, preluActivationWeights: o } = t, { strides: u, pad: l, dilations: c, dimRoundingMode: p, activation: d, leakyreluAlpha: h } = s, f = [], m = c;
  m == null && (m = [1, 1]), w.assert(C.eitherStridesOrDilationsAreOne(u, m), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`);
  let g = C.computeConv2DInfo(r.shape, a.shape, u, m, l, p, true), b = X().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, y = d ? Yp(d, b) : null, v = [r, a], x = i != null, k = o != null, S = d === "leakyrelu";
  if (x && v.push(i), k && v.push(o), S) {
    let P = n.makeTensorInfo([], "float32", w.createScalarValue(h, "float32"));
    v.push(P), f.push(P);
  }
  let $;
  b ? $ = new u2(g, x, y, k, S) : $ = new o2(g, x, y, k, S);
  let E = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], A = n.runWebGLProgram($, v, "float32", E);
  return f.forEach((P) => n.disposeIntermediateTensorInfo(P)), A;
}
var zQ = { kernelName: oa, backendName: "webgl", kernelFunc: PQ };
var MQ = class {
  constructor(e, t, n) {
    this.sliceDim = e, this.strides = t, this.variableNames = ["x", "indices"], this.outputShape = n;
    let s = ot(t.length), r = ot(n.length), a = this.sliceDim > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${s} strides = ${s}(${this.strides});
         void main() {
          ${r} coords = getOutputCoords();
          int flattenIndex = 0;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            flattenIndex += index * ${a};
          }
          setOutput(getX(flattenIndex, coords[1]));
        }
      `;
  }
};
function LQ(e) {
  let { inputs: t, backend: n } = e, { params: s, indices: r } = t, a = r.shape, i = a[a.length - 1], o = w.sizeFromShape(s.shape), [u, l, c, p] = C.prepareAndValidate(s, r), d = he({ inputs: { x: r }, backend: n, attrs: { shape: [l, i] } }), h = he({ inputs: { x: s }, backend: n, attrs: { shape: [w.sizeFromShape(s.shape) / c, c] } });
  if (n.shouldExecuteOnCPU([s, r]) || s.dtype === "string") {
    let b = n.readSync(r.dataId), y = n.bufferSync(s), v = QK(b, y, s.dtype, l, i, c, p, s.shape, o);
    return n.makeTensorInfo(u, s.dtype, v.values);
  }
  let f = new MQ(i, p, [l, c]), m = n.runWebGLProgram(f, [h, d], h.dtype), g = he({ inputs: { x: m }, backend: n, attrs: { shape: u } });
  return n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), g;
}
var BQ = { kernelName: xo, backendName: "webgl", kernelFunc: LQ };
var VQ = class {
  constructor(e, t) {
    this.variableNames = ["A", "indices"], this.outputShape = t, this.rank = t.length;
    let n = ot(this.rank), s = WQ(e, 2);
    this.userCode = `
      void main() {
        ${n} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${s}));
      }
    `;
  }
};
function WQ(e, t) {
  let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [];
  for (let r = 0; r < e.length; r++)
    r === 2 ? s.push("index") : s.push(`${n[r]}`);
  return s.join();
}
function d2(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, indices: a } = t, { axis: i, batchDims: o } = s, u = w.parseAxisParam(i, r.shape)[0];
  if (X().get("DEBUG")) {
    let y = n.readSync(a.dataId), v = r.shape[u];
    for (let x = 0; x < y.length; ++x) {
      let k = y[x];
      w.assert(k <= v - 1 && k >= 0, () => `GatherV2: the index value ${k} is not in [0, ${v - 1}]`);
    }
  }
  let l = C.segment_util.collectGatherOpShapeInfo(r, a, u, o), c = w.sizeFromShape(a.shape), p = [], d = he({ inputs: { x: r }, backend: n, attrs: { shape: [l.batchSize, l.outerSize, l.dimSize, l.sliceSize] } }), h = he({ inputs: { x: a }, backend: n, attrs: { shape: [l.batchSize, c / l.batchSize] } });
  p.push(d), p.push(h);
  let f = [l.batchSize, l.outerSize, c / l.batchSize, l.sliceSize];
  if (n.shouldExecuteOnCPU([r, a]) || r.dtype === "string") {
    let y = n.bufferSync(h), v = n.bufferSync(d), x = ZK(v, y, f);
    return p.forEach((k) => n.disposeIntermediateTensorInfo(k)), n.makeTensorInfo(l.outputShape, x.dtype, x.values);
  }
  let m = new VQ(d.shape, f), g = n.runWebGLProgram(m, [d, h], d.dtype);
  p.push(g);
  let b = he({ inputs: { x: g }, backend: n, attrs: { shape: l.outputShape } });
  return p.forEach((y) => n.disposeIntermediateTensorInfo(y)), b;
}
var UQ = { kernelName: vo, backendName: "webgl", kernelFunc: d2 };
var GQ = "return float(a > b);";
var HQ = `
  return vec4(greaterThan(a, b));
`;
var qQ = qt({ opSnippet: GQ, packedOpSnippet: HQ, cpuKernelImpl: JK, dtype: "bool" });
var jQ = { kernelName: wo, backendName: "webgl", kernelFunc: qQ };
var KQ = "return float(a >= b);";
var XQ = `
  return vec4(greaterThanEqual(a, b));
`;
var YQ = qt({ opSnippet: KQ, packedOpSnippet: XQ, dtype: "bool", cpuKernelImpl: eX });
var QQ = { kernelName: Va, backendName: "webgl", kernelFunc: YQ };
function ZQ(e) {
  let { inputs: t, backend: n } = e, { input: s } = t;
  return c2(s, true, n);
}
var JQ = { kernelName: wg, backendName: "webgl", kernelFunc: ZQ };
var eZ = "return float(!isnan(x) && !isinf(x));";
var tZ = Ke({ opSnippet: eZ, dtype: "bool" });
var nZ = { kernelName: gl, backendName: "webgl", kernelFunc: tZ };
var sZ = "return float(isinf(x));";
var rZ = Ke({ opSnippet: sZ, dtype: "bool" });
var aZ = { kernelName: bl, backendName: "webgl", kernelFunc: rZ };
var iZ = "return float(isnan(x));";
var oZ = Ke({ opSnippet: iZ, dtype: "bool" });
var uZ = { kernelName: yl, backendName: "webgl", kernelFunc: oZ };
var lZ = "return float(a < b);";
var cZ = `
  return vec4(lessThan(a, b));
`;
var dZ = qt({ opSnippet: lZ, packedOpSnippet: cZ, cpuKernelImpl: tX, dtype: "bool" });
var pZ = { kernelName: ko, backendName: "webgl", kernelFunc: dZ };
var hZ = "return float(a <= b);";
var fZ = `
  return vec4(lessThanEqual(a, b));
`;
var mZ = qt({ opSnippet: hZ, packedOpSnippet: fZ, cpuKernelImpl: nX, dtype: "bool" });
var gZ = { kernelName: Io, backendName: "webgl", kernelFunc: mZ };
function bZ(e) {
  let { backend: t, attrs: n } = e, { start: s, stop: r, num: a } = n, i = sX(s, r, a);
  return t.makeTensorInfo([i.length], "float32", i);
}
var yZ = { kernelName: kg, backendName: "webgl", kernelFunc: bZ };
var vZ = uu + `
  return x < 0.0 ? 0./0. : log(x);
`;
var xZ = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`;
var wZ = Ke({ opSnippet: vZ, packedOpSnippet: xZ, cpuKernelImpl: rX });
var kZ = { kernelName: Ga, backendName: "webgl", kernelFunc: wZ };
var IZ = uu + `
  return log(1.0 + x);
`;
var SZ = Ke({ opSnippet: IZ });
var CZ = { kernelName: vl, backendName: "webgl", kernelFunc: SZ };
var NZ = "return float(a >= 1.0 && b >= 1.0);";
var TZ = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`;
var $Z = qt({ opSnippet: NZ, packedOpSnippet: TZ, dtype: "bool" });
var _Z = { kernelName: So, backendName: "webgl", kernelFunc: $Z };
var AZ = "return float(!(x >= 1.0));";
var EZ = Ke({ opSnippet: AZ });
var RZ = { kernelName: xl, backendName: "webgl", kernelFunc: EZ };
var DZ = "return float(a >= 1.0 || b >= 1.0);";
var FZ = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`;
var OZ = qt({ opSnippet: DZ, packedOpSnippet: FZ, dtype: "bool" });
var PZ = { kernelName: tp, backendName: "webgl", kernelFunc: OZ };
var zZ = class {
  constructor(e, t, n, s, r) {
    this.variableNames = ["x"], this.outputShape = [];
    let a = t, i = e[3] - 1;
    this.outputShape = e;
    let o, u = `float(${n}) + float(${s}) * sum`;
    r === 0.5 ? o = `inversesqrt(${u})` : r === 1 ? o = `1.0/(${u})` : o = `exp(log(${u}) * float(-${r}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${a}; j <= ${a}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${o};
        setOutput(val);
      }
    `;
  }
};
var MZ = class {
  constructor(e, t, n, s, r) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = true, this.packedOutput = true;
    let a = t, i = e[3] - 1;
    this.outputShape = e;
    let o, u = `float(${n}) + float(${s}) * sum`;
    r === 0.5 ? o = `inversesqrt(${u})` : r === 1 ? o = `1.0/(${u})` : o = `exp(log(${u}) * float(-${r}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${a};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${a}; j <= ${a}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${o};
        setOutput(result);
      }
    `;
  }
};
var LZ = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { depthRadius: a, bias: i, alpha: o, beta: u } = s, l = X().getBool("WEBGL_PACK_NORMALIZATION") ? new MZ(r.shape, a, i, o, u) : new zZ(r.shape, a, i, o, u);
  return n.runWebGLProgram(l, [r], r.dtype);
};
var BZ = { kernelName: np, backendName: "webgl", kernelFunc: LZ };
var VZ = class {
  constructor(e, t, n, s, r) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = e, this.depth = e[3], this.depthRadius = t, this.bias = n, this.alpha = s, this.beta = r, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${s}) * norm + float(${n});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${s})
                * float(${r})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${r});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
};
var WZ = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, y: a, dy: i } = t, { depthRadius: o, bias: u, alpha: l, beta: c } = s, p = new VZ(r.shape, o, u, l, c);
  return n.runWebGLProgram(p, [r, a, i], r.dtype);
};
var UZ = { kernelName: Ig, backendName: "webgl", kernelFunc: WZ };
function GZ(e, t, n, s) {
  let r = w.sizeFromShape(t), i = w.sizeFromShape(e.shape) / r, o = he({ inputs: { x: e }, attrs: { shape: [i, r] }, backend: s }), u = Ii(o, e.dtype, "max", s), l = he({ inputs: { x: u }, attrs: { shape: n }, backend: s });
  return s.disposeIntermediateTensorInfo(o), s.disposeIntermediateTensorInfo(u), l;
}
function p2(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { reductionIndices: a, keepDims: i } = s, o = r.shape.length, u = w.parseAxisParam(a, r.shape), l = u, c = C.getAxesPermutation(l, o), p = c != null, d = n.shouldExecuteOnCPU([r]), h = r;
  if (p) {
    if (d) {
      let v = n.texData.get(h.dataId).values, x = new Array(o);
      for (let $ = 0; $ < x.length; $++)
        x[$] = r.shape[c[$]];
      let k = Iv(v, r.shape, r.dtype, c, x);
      h = n.makeTensorInfo(x, r.dtype);
      let S = n.texData.get(h.dataId);
      S.values = k;
    } else
      h = Qp(r, c, n);
    l = C.getInnerMostAxes(l.length, o);
  }
  C.assertAxesAreInnerMostDims("max", l, o);
  let [f, m] = C.computeOutAndReduceShapes(h.shape, l), g = f;
  i && (g = C.expandShapeToKeepDim(f, u));
  let b;
  if (d) {
    let v = n.texData.get(h.dataId).values, x = aX(v, w.sizeFromShape(m), g, r.dtype);
    b = n.makeTensorInfo(g, r.dtype);
    let k = n.texData.get(b.dataId);
    k.values = x;
  } else
    b = GZ(h, m, g, n);
  return p && n.disposeIntermediateTensorInfo(h), b;
}
var HZ = { kernelName: Ha, backendName: "webgl", kernelFunc: p2 };
var qZ = H1 + `
  return max(a, b);
`;
var jZ = `
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + Xp + `
  return result;
`;
var KZ = qt({ opSnippet: qZ, packedOpSnippet: jZ, cpuKernelImpl: iX });
var XZ = { kernelName: qa, backendName: "webgl", kernelFunc: KZ };
function YZ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t;
  su(r, "maxPool");
  let { filterSize: a, strides: i, pad: o, dimRoundingMode: u } = s, l = 1;
  w.assert(C.eitherStridesOrDilationsAreOne(i, l), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${l}'`);
  let c = C.computePool2DInfo(r.shape, a, i, l, o, u);
  if (c.filterWidth === 1 && c.filterHeight === 1 && w.arraysEqual(c.inShape, c.outShape))
    return Rn({ inputs: { x: r }, backend: n });
  let p = new nl(c, "max", false);
  return n.runWebGLProgram(p, [r], r.dtype);
}
var QZ = { kernelName: ja, backendName: "webgl", kernelFunc: YZ };
function ZZ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { filterSize: a, strides: i, pad: o, dataFormat: u, dimRoundingMode: l } = s, c = [1, 1, 1], p = C.computePool3DInfo(r.shape, a, i, c, o, l, u), d = new Cv(p, "max", false);
  return n.runWebGLProgram(d, [r], r.dtype);
}
var JZ = { kernelName: sp, backendName: "webgl", kernelFunc: ZZ };
var e7 = class {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    let t = e.strideHeight, n = e.strideWidth, s = e.dilationHeight, r = e.effectiveFilterHeight, a = e.effectiveFilterWidth, i = r - 1 - e.padInfo.top, o = a - 1 - e.padInfo.left, u = r * a - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${r};
          wR += ${s}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${a}; wC++) {
            float dyC = float(dyCCorner + wC) / ${n}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${a} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var t7 = class {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    let t = e.strideDepth, n = e.strideHeight, s = e.strideWidth, r = e.dilationDepth, a = e.dilationHeight, i = e.dilationWidth, o = e.effectiveFilterDepth, u = e.effectiveFilterHeight, l = e.effectiveFilterWidth, c = o - 1 - e.padInfo.front, p = u - 1 - e.padInfo.top, d = l - 1 - e.padInfo.left, h = o * u * l - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${c}, ${p}, ${d});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${o};
           wD += ${r}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${a}) {
            float dyR = float(dyRCorner + wR) / ${n}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${l};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${s}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${h} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${l} +
                  wR * ${l} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function n7(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, input: a } = t, i = a, { filterSize: o, strides: u, pad: l, dimRoundingMode: c } = s, p = [1, 1, 1], d = C.computePool3DInfo(i.shape, o, u, p, l, c), h = new Cv(d, "max", true), f = n.runWebGLProgram(h, [i], i.dtype), m = new t7(d), g = n.runWebGLProgram(m, [r, f], i.dtype);
  return n.disposeIntermediateTensorInfo(f), g;
}
var s7 = { kernelName: Cg, backendName: "webgl", kernelFunc: n7 };
function r7(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, input: a, output: i } = t, o = a;
  su([a, i], "maxPoolGrad");
  let { filterSize: u, strides: l, pad: c, dimRoundingMode: p } = s, d = C.computePool2DInfo(o.shape, u, l, 1, c, p), h = true, f = new nl(d, "max", h), m = n.runWebGLProgram(f, [o], o.dtype), g = new e7(d), b = n.runWebGLProgram(g, [r, m], o.dtype);
  return n.disposeIntermediateTensorInfo(m), b;
}
var a7 = { kernelName: Sg, backendName: "webgl", kernelFunc: r7 };
function i7(e, t, n, s) {
  let r = new nl(n, "max", false), a = s.runWebGLProgram(r, [e], "float32");
  r = new nl(n, "max", true, true, t);
  let i = s.runWebGLProgram(r, [e], "float32");
  return [a, i];
}
var o7 = { kernelName: Ng, backendName: "webgl", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
  let { x: s } = e, { filterSize: r, strides: a, pad: i, includeBatchInIndex: o } = t, u = n;
  w.assert(s.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);
  let l = [1, 1];
  w.assert(C.eitherStridesOrDilationsAreOne(a, l), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`);
  let c = C.computePool2DInfo(s.shape, r, a, l, i), [p, d] = i7(s, o, c, u);
  return [p, d];
} };
function u7(e, t, n, s) {
  let r = w.sizeFromShape(t), i = w.sizeFromShape(e.shape) / r, o = he({ inputs: { x: e }, attrs: { shape: [i, r] }, backend: s }), u = Ii(o, "float32", "mean", s), l = he({ inputs: { x: u }, attrs: { shape: n }, backend: s });
  return s.disposeIntermediateTensorInfo(o), s.disposeIntermediateTensorInfo(u), l;
}
var l7 = { kernelName: Ka, backendName: "webgl", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
  let { x: s } = e, { keepDims: r, axis: a } = t, i = n, o = s.shape.length, u = w.parseAxisParam(a, s.shape), l = u, c = C.getAxesPermutation(l, o), p = c != null, d = i.shouldExecuteOnCPU([s]), h = [], f = s;
  if (p) {
    if (d) {
      let x = i.texData.get(f.dataId).values, k = new Array(o);
      for (let E = 0; E < k.length; E++)
        k[E] = s.shape[c[E]];
      let S = Iv(x, s.shape, s.dtype, c, k);
      f = i.makeTensorInfo(k, s.dtype);
      let $ = i.texData.get(f.dataId);
      $.values = S;
    } else
      f = Qp(s, c, i);
    h.push(f), l = C.getInnerMostAxes(l.length, o);
  }
  C.assertAxesAreInnerMostDims("sum", l, o);
  let [m, g] = C.computeOutAndReduceShapes(f.shape, l), b = m;
  r && (b = C.expandShapeToKeepDim(m, u));
  let y = u7(f, g, b, i);
  for (let v of h)
    i.disposeIntermediateTensorInfo(v);
  return y;
} };
function c7(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s, o = r.shape.length, u = w.parseAxisParam(a, r.shape), l = u, c = C.getAxesPermutation(l, o), p = r;
  c != null && (p = dn({ inputs: { x: r }, backend: n, attrs: { perm: c } }), l = C.getInnerMostAxes(l.length, r.shape.length)), C.assertAxesAreInnerMostDims("min", l, o);
  let [d, h] = C.computeOutAndReduceShapes(p.shape, l), f = w.sizeFromShape(h), m = he({ inputs: { x: p }, backend: n, attrs: { shape: [-1, f] } }), g = Ii(m, m.dtype, "min", n), b;
  if (i) {
    let y = C.expandShapeToKeepDim(d, u);
    b = he({ inputs: { x: g }, backend: n, attrs: { shape: y } });
  } else
    b = he({ inputs: { x: g }, backend: n, attrs: { shape: d } });
  return n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(g), c != null && n.disposeIntermediateTensorInfo(p), b;
}
var d7 = { kernelName: Xa, backendName: "webgl", kernelFunc: c7 };
var p7 = H1 + `
  return min(a, b);
`;
var h7 = `
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + Xp + `
  return result;
`;
var f7 = qt({ opSnippet: p7, packedOpSnippet: h7, cpuKernelImpl: oX });
var m7 = { kernelName: Ya, backendName: "webgl", kernelFunc: f7 };
var g7 = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.outputShape = t.map((l, c) => l[0] + e[c] + l[1]);
    let s = e.length, r = ot(s), a = t.map((l) => l[0]).join(","), i = t.map((l, c) => l[0] + e[c]).join(","), o = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, s), u = n === "reflect" ? 0 : 1;
    if (s === 1) {
      this.userCode = `
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${r} start = ${r}(${a});
      ${r} end = ${r}(${i});

      void main() {
        ${r} outC = getOutputCoords();
        for (int i = 0; i < ${s}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${r} coords = outC - start;
        setOutput(getX(${o}));
      }
    `;
  }
};
var b7 = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t.map((h, f) => h[0] + e[f] + h[1]);
    let s = e.length, r = ot(s), a = t.map((h) => h[0]).join(","), i = t.map((h, f) => h[0] + e[f]).join(","), o = un("rc", s), u = un("source", s), l = `${o[s - 1]} < ${this.outputShape[s - 1]}`, c = s === 1 ? "source" : `vec2(${u.slice(-2).join()})`, p = n === "reflect" ? 0 : 1, d = "";
    if (s === 1) {
      let h = `
        ${r} source = rc;
        if (source < start) {
          source = start * 2 - source - ${p};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${p};
        }
        source -= start;
      `;
      d = `
        ${r} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${c});
        ${o[s - 1]} += 1;
        if(${l}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${c});
        }
      `;
    } else {
      let h = `
        ${r} source = rc;
        ${r} lt = ${r}(lessThan(source, start));
        ${r} gte = ${r}(greaterThanEqual(source, end));
        ${r} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${p}) +
                gte * ((end - 1) * 2 - source + ${p});
        source -= start;
      `;
      d = `
        ${r} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${c});
        ${o[s - 1]} += 1;
        if(${l}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${c});
        }
        rc = outputLoc;
        ${o[s - 2]} += 1;
        if(${o[s - 2]} < ${this.outputShape[s - 2]}) {
          ${h}
          result[2] = getChannel(getX(${u.join()}), ${c});
          ${o[s - 1]} += 1;
          if(${l}) {
            ${h}
            result[3] = getChannel(getX(${u.join()}), ${c});
          }
        }
      `;
    }
    this.userCode = `
      const ${r} start = ${r}(${a});
      const ${r} end = ${r}(${i});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `;
  }
};
var y7 = ({ inputs: e, backend: t, attrs: n }) => {
  let { x: s } = e, { paddings: r, mode: a } = n, i = X().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new b7(s.shape, r, a) : new g7(s.shape, r, a);
  return t.runWebGLProgram(i, [s], s.dtype);
};
var v7 = { kernelName: Qa, backendName: "webgl", kernelFunc: y7 };
var x7 = `if (b == 0.0) return NAN;
  return mod(a, b);`;
var w7 = `
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  ` + Xp + `
  return result;
`;
var k7 = qt({ opSnippet: x7, packedOpSnippet: w7 });
var I7 = { kernelName: wl, backendName: "webgl", kernelFunc: k7 };
var S7 = class {
  constructor(e, t, n) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [e, n], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t - 1}));
      }
    `;
  }
};
var C7 = `
if (a == b) {
  return 1.0;
};
return a / b;`;
var N7 = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`;
var h2 = qt({ opSnippet: C7, packedOpSnippet: N7, checkOutOfBounds: true });
var T7 = { kernelName: Oa, backendName: "webgl", kernelFunc: h2 };
var Sw = "return a - b;";
var f2 = qt({ opSnippet: Sw, packedOpSnippet: Sw, supportsComplex: true, cpuKernelImpl: IX });
var $7 = { kernelName: hi, backendName: "webgl", kernelFunc: f2 };
function m2(e) {
  let { inputs: t, backend: n, attrs: s } = e, { logits: r } = t, { dim: a } = s, i = w.parseAxisParam([a], r.shape), o = p2({ inputs: { x: r }, backend: n, attrs: { reductionIndices: i, keepDims: false } }), u = C.expandShapeToKeepDim(o.shape, i), l = he({ inputs: { x: o }, backend: n, attrs: { shape: u } }), c = f2({ inputs: { a: r, b: l }, backend: n }), p = l2({ inputs: { x: c }, backend: n }), d = Zp({ inputs: { x: p }, backend: n, attrs: { axis: i, keepDims: false } }), h = he({ inputs: { x: d }, backend: n, attrs: { shape: u } }), f = h2({ inputs: { a: p, b: h }, backend: n });
  return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(l), n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(h), f;
}
var _7 = { kernelName: di, backendName: "webgl", kernelFunc: m2 };
function A7(e) {
  let { inputs: t, backend: n, attrs: s } = e, { logits: r } = t, { numSamples: a, seed: i, normalized: o } = s, u = o ? r : m2({ inputs: { logits: r }, backend: n, attrs: { dim: r.shape.length - 1 } }), l = u.shape[0], c = u.shape[1], p = new S7(l, c, a), d = [[i]], h = n.runWebGLProgram(p, [u], "int32", d);
  return o || n.disposeIntermediateTensorInfo(u), h;
}
var E7 = { kernelName: Tg, backendName: "webgl", kernelFunc: A7 };
var R7 = ss + `
  return -x;
`;
var D7 = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function F7(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  if (n.shouldExecuteOnCPU([s])) {
    let a = n.texData.get(s.dataId), [i, o] = lX(a.values, s.shape, s.dtype);
    return n.makeTensorInfo(o, s.dtype, i);
  }
  let r;
  return X().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new Jr(s.shape, D7) : r = new Hs(s.shape, R7), n.runWebGLProgram(r, [s], s.dtype);
}
var O7 = { kernelName: Co, backendName: "webgl", kernelFunc: F7 };
var P7 = xs.nonMaxSuppressionV3Impl;
function z7(e) {
  C.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t, backend: n, attrs: s } = e, { boxes: r, scores: a } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: u } = s, l = n.readSync(r.dataId), c = n.readSync(a.dataId), { selectedIndices: p } = P7(l, c, i, o, u);
  return n.makeTensorInfo([p.length], "int32", new Int32Array(p));
}
var M7 = { kernelName: To, backendName: "webgl", kernelFunc: z7 };
var L7 = xs.nonMaxSuppressionV4Impl;
function B7(e) {
  C.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t, backend: n, attrs: s } = e, { boxes: r, scores: a } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: u, padToMaxOutputSize: l } = s, c = n.readSync(r.dataId), p = n.readSync(a.dataId), { selectedIndices: d, validOutputs: h } = L7(c, p, i, o, u, l);
  return [n.makeTensorInfo([d.length], "int32", new Int32Array(d)), n.makeTensorInfo([], "int32", new Int32Array([h]))];
}
var V7 = { kernelName: kl, backendName: "webgl", kernelFunc: B7 };
var W7 = xs.nonMaxSuppressionV5Impl;
function U7(e) {
  C.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t, backend: n, attrs: s } = e, { boxes: r, scores: a } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: u, softNmsSigma: l } = s, c = n.readSync(r.dataId), p = n.readSync(a.dataId), d = i, h = o, f = u, m = l, { selectedIndices: g, selectedScores: b } = W7(c, p, d, h, f, m);
  return [n.makeTensorInfo([g.length], "int32", new Int32Array(g)), n.makeTensorInfo([b.length], "float32", new Float32Array(b))];
}
var G7 = { kernelName: $o, backendName: "webgl", kernelFunc: U7 };
var H7 = class {
  constructor(e, t, n, s) {
    this.variableNames = ["indices"], this.outputShape = [e, t], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${s}), float(${n}),
                      float(index == coords.y)));
      }
    `;
  }
};
var q7 = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { indices: r } = t, { depth: a, onValue: i, offValue: o } = s, u = w.sizeFromShape(r.shape), l = new H7(u, a, i, o), c = he({ inputs: { x: r }, backend: n, attrs: { shape: [u] } }), p = n.runWebGLProgram(l, [c], r.dtype);
  n.disposeIntermediateTensorInfo(c);
  let d = [...r.shape, a], h = he({ inputs: { x: p }, backend: n, attrs: { shape: d } });
  return n.disposeIntermediateTensorInfo(p), h;
};
var j7 = { kernelName: Ao, backendName: "webgl", kernelFunc: q7 };
function Bd(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  if (s.dtype === "complex64") {
    let r = Jl({ inputs: { input: s }, backend: n }), a = Bd({ inputs: { x: r }, backend: n }), i = Jp({ inputs: { input: s }, backend: n }), o = Bd({ inputs: { x: i }, backend: n }), u = Dr({ inputs: { real: a, imag: o }, backend: n });
    return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(a), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), u;
  } else
    return ec({ attrs: { shape: s.shape, dtype: s.dtype, value: s.dtype === "string" ? "" : 0 }, backend: n });
}
var K7 = { kernelName: qo, backendName: "webgl", kernelFunc: Bd };
function g2(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (s.dtype === "complex64") {
    let r = Jl({ inputs: { input: s }, backend: n }), a = g2({ inputs: { x: r }, backend: n }), i = Jp({ inputs: { input: s }, backend: n }), o = Bd({ inputs: { x: i }, backend: n }), u = Dr({ inputs: { real: a, imag: o }, backend: n });
    return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(a), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), u;
  } else
    return ec({ attrs: { shape: s.shape, dtype: s.dtype, value: 1 }, backend: n });
}
var X7 = { kernelName: _o, backendName: "webgl", kernelFunc: g2 };
function Y7(e) {
  let { inputs: t, backend: n, attrs: s } = e, { axis: r } = s;
  if (t.length === 1)
    return Km({ inputs: { input: t[0] }, backend: n, attrs: { dim: r } });
  let a = t[0].shape, i = t[0].dtype;
  t.forEach((c) => {
    w.assertShapesMatch(a, c.shape, "All tensors passed to stack must have matching shapes"), w.assert(i === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let o = [], u = t.map((c) => {
    let p = Km({ inputs: { input: c }, backend: n, attrs: { dim: r } });
    return o.push(p), p;
  }), l = n2({ inputs: u, backend: n, attrs: { axis: r } });
  return o.forEach((c) => n.disposeIntermediateTensorInfo(c)), l;
}
var Q7 = { kernelName: Eo, backendName: "webgl", kernelFunc: Y7 };
var Z7 = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map((u, l) => u[0] + e[l] + u[1]);
    let s = e.length, r = ot(s), a = t.map((u) => u[0]).join(","), i = t.map((u, l) => u[0] + e[l]).join(","), o = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, s);
    if (s === 1) {
      this.userCode = `
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${r} start = ${r}(${a});
      ${r} end = ${r}(${i});

      void main() {
        ${r} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${r} coords = outC - start;
          setOutput(getX(${o}));
        }
      }
    `;
  }
};
var J7 = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map((f, m) => f[0] + e[m] + f[1]);
    let s = e.length, r = ot(s), a = t.map((f) => f[0]).join(","), i = t.map((f, m) => f[0] + e[m]).join(","), o = un("rc", s), u = un("source", s), l = `${o[s - 1]} < ${this.outputShape[s - 1]}`, c = s === 1 ? "source" : `vec2(${u.slice(-2).join()})`, p = [`${r} rc = outputLoc;`, `${o[s - 1]} += 1;
       if(${l}) {
      `, s === 1 ? "" : `}
       rc = outputLoc;
       ${o[s - 2]} += 1;
       if(${o[s - 2]} < ${this.outputShape[s - 2]}) {`, s === 1 ? "" : `  ${o[s - 1]} += 1;
         if(${l}) {`], d = s === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", h = "";
    for (let f = 0, m = s === 1 ? 2 : 4; f < m; f++)
      h += `
        ${p[f]}
        if (${d}) {
          result[${f}] = float(value);
        } else {
          ${r} source = rc - start;
          result[${f}] = getChannel(getX(${u.join()}), ${c});
        }
      `;
    h += s === 1 ? "} " : "}}", this.userCode = `
      const ${r} start = ${r}(${a});
      const ${r} end = ${r}(${i});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${h}
        setOutput(result);
      }
    `;
  }
};
var b2 = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { paddings: a, constantValue: i } = s;
  if (w.sizeFromShape(r.shape) === 0) {
    let l = a.map((c, p) => c[0] + r.shape[p] + c[1]);
    return ec({ backend: n, attrs: { shape: l, value: i, dtype: r.dtype } });
  }
  let o = X().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new J7(r.shape, a, i) : new Z7(r.shape, a, i), u = [[i]];
  return n.runWebGLProgram(o, [r], r.dtype, u);
};
var eJ = { kernelName: Ja, backendName: "webgl", kernelFunc: b2 };
var tJ = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`;
var nJ = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  ` + Xp + `
  return result;
`;
var sJ = qt({ opSnippet: tJ, packedOpSnippet: nJ });
var rJ = { kernelName: ei, backendName: "webgl", kernelFunc: sJ };
function aJ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s, o = r.shape.length, u = [], l = w.parseAxisParam(a, r.shape), c = l, p = C.getAxesPermutation(c, o), d = r;
  p != null && (d = dn({ inputs: { x: r }, backend: n, attrs: { perm: p } }), c = C.getInnerMostAxes(c.length, o), u.push(d)), C.assertAxesAreInnerMostDims("prod", c, o);
  let h;
  if (n.shouldExecuteOnCPU([d])) {
    let f = n.texData.get(d.dataId).values, { outVals: m, outShape: g, outDtype: b } = dX(d.shape, d.dtype, f, c);
    h = n.makeTensorInfo(g, b, m);
  } else {
    let [f, m] = C.computeOutAndReduceShapes(d.shape, c), g = w.sizeFromShape(m), b = he({ inputs: { x: d }, backend: n, attrs: { shape: [-1, g] } }), y = pp(r.dtype), v = Ii(b, y, "prod", n);
    h = he({ inputs: { x: v }, backend: n, attrs: { shape: f } }), u.push(b), u.push(v);
  }
  if (i) {
    u.push(h);
    let f = C.expandShapeToKeepDim(h.shape, l);
    h = he({ inputs: { x: h }, backend: n, attrs: { shape: f } });
  }
  return u.forEach((f) => n.disposeIntermediateTensorInfo(f)), h;
}
var iJ = { kernelName: ni, backendName: "webgl", kernelFunc: aJ };
var y2 = (e) => {
  let { backend: t, attrs: n } = e, { start: s, stop: r, step: a, dtype: i } = n, o = pX(s, r, a, i);
  return t.makeTensorInfo([o.length], i, o);
};
var oJ = { kernelName: Il, backendName: "webgl", kernelFunc: y2 };
var uJ = "return 1.0 / x;";
var lJ = Ke({ opSnippet: uJ });
var cJ = { kernelName: Sl, backendName: "webgl", kernelFunc: lJ };
var dJ = ss + `
  return (x < 0.0) ? 0.0 : x;
`;
var pJ = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var hJ = Ke({ opSnippet: dJ, packedOpSnippet: pJ });
var fJ = { kernelName: si, backendName: "webgl", kernelFunc: hJ };
var mJ = ss + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
var gJ = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var bJ = Ke({ opSnippet: mJ, packedOpSnippet: gJ });
var yJ = { kernelName: ai, backendName: "webgl", kernelFunc: bJ };
var vJ = class {
  constructor(e, t, n, s, r) {
    this.variableNames = ["A"], this.outputShape = [];
    let [a, i, o, u] = e;
    this.outputShape = [a, t, n, u];
    let l = [s && t > 1 ? i - 1 : i, s && n > 1 ? o - 1 : o], c = [s && t > 1 ? t - 1 : t, s && n > 1 ? n - 1 : n], p;
    r ? p = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : p = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${l[0] / c[0]},
          ${l[1] / c[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${p};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
};
var xJ = class {
  constructor(e, t, n, s, r) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    let [a, i, o, u] = e;
    this.outputShape = [a, t, n, u];
    let l = [s && t > 1 ? i - 1 : i, s && n > 1 ? o - 1 : o], c = [s && t > 1 ? t - 1 : t, s && n > 1 ? n - 1 : n], p;
    r ? p = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : p = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${l[0] / c[0]},
          ${l[1] / c[1]},
          ${l[1] / c[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${p};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u - 1};
        bool hasNextRow = coords.z < ${n - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
};
function wJ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { images: r } = t, { alignCorners: a, halfPixelCenters: i, size: o } = s, [u, l] = o, c = X().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new xJ(r.shape, u, l, a, i) : new vJ(r.shape, u, l, a, i);
  return n.runWebGLProgram(c, [r], "float32");
}
var kJ = { kernelName: ri, backendName: "webgl", kernelFunc: wJ };
var IJ = class {
  constructor(e, t, n) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    let [, s, r] = t, [, a, i] = e, o = [n && a > 1 ? s - 1 : s, n && i > 1 ? r - 1 : r], u = [n && a > 1 ? a - 1 : a, n && i > 1 ? i - 1 : i], l = o[0] / u[0], c = o[1] / u[1], p = 1 / l, d = 1 / c, h = Math.ceil(p) * 2 + 2, f = Math.ceil(d) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${l});
        const float widthScale = float(${c});

        const float invHeightScale = float(${p});
        const float invWidthScale = float(${d});

        const int winHeight = int(${h});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${s - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${r - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
function SJ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { images: r, dy: a } = t, { alignCorners: i } = s, o = new IJ(a.shape, r.shape, i);
  return n.runWebGLProgram(o, [a], a.dtype);
}
var CJ = { kernelName: _g, backendName: "webgl", kernelFunc: SJ };
var NJ = class {
  constructor(e, t, n, s, r) {
    this.variableNames = ["A"], this.outputShape = [];
    let [a, i, o, u] = e;
    this.outputShape = [a, t, n, u];
    let l = [s && t > 1 ? i - 1 : i, s && n > 1 ? o - 1 : o], c = [s && t > 1 ? t - 1 : t, s && n > 1 ? n - 1 : n], p = s ? "0.5" : "0.0", d;
    r ? d = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${l[0] / c[0]},
          ${l[1] / c[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
};
var TJ = class {
  constructor(e, t, n, s, r) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    let [a, i, o, u] = e;
    this.outputShape = [a, t, n, u];
    let l = [s && t > 1 ? i - 1 : i, s && n > 1 ? o - 1 : o], c = [s && t > 1 ? t - 1 : t, s && n > 1 ? n - 1 : n], p = s ? "0.5" : "0.0", d;
    r ? d = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${l[0] / c[0]},
          ${l[1] / c[1]},
          ${l[1] / c[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u - 1};
        bool hasNextRow = coords.z < ${n - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
};
function $J(e) {
  let { inputs: t, backend: n, attrs: s } = e, { images: r } = t, { alignCorners: a, halfPixelCenters: i, size: o } = s, [u, l] = o, c = X().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new TJ(r.shape, u, l, a, i) : new NJ(r.shape, u, l, a, i);
  return n.runWebGLProgram(c, [r], r.dtype);
}
var _J = { kernelName: Cl, backendName: "webgl", kernelFunc: $J };
var AJ = class {
  constructor(e, t, n) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    let [, s, r] = t, [, a, i] = e, o = [n && a > 1 ? s - 1 : s, n && i > 1 ? r - 1 : r], u = [n && a > 1 ? a - 1 : a, n && i > 1 ? i - 1 : i], l = o[0] / u[0], c = o[1] / u[1], p = 1 / l, d = 1 / c, h = Math.ceil(p) * 2 + 2, f = Math.ceil(d) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${l});
        const float widthScale = float(${c});

        const float invHeightScale = float(${p});
        const float invWidthScale = float(${d});

        const int winHeight = int(${h});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${o[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${o[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${s}) - 1),
                ${n} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${r}) - 1),
                ${n} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
function EJ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { images: r, dy: a } = t, { alignCorners: i } = s, o = new AJ(a.shape, r.shape, i);
  return n.runWebGLProgram(o, [a], a.dtype);
}
var RJ = { kernelName: $g, backendName: "webgl", kernelFunc: EJ };
var DJ = class {
  constructor(e, t) {
    this.variableNames = ["x"];
    let n = e.length;
    if (n > 4)
      throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);
    if (this.outputShape = e, n === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;
      return;
    }
    let s = (i) => t.indexOf(i) !== -1 && e[i] !== 1 ? `${e[i]} - coords[${i}] - 1` : `coords[${i}]`, r = e.map((i, o) => s(o)).join(","), a = ot(n);
    this.userCode = `
      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${r}));
      }
    `;
  }
};
var FJ = class {
  constructor(e, t) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true;
    let n = e.length;
    if (n > 4)
      throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);
    this.outputShape = e;
    let s = un("rc", n), r = `${s[n - 1]} + 1 < ${this.outputShape[n - 1]}`, a = `${s[n - 2]} + 1 < ${this.outputShape[n - 2]}`, i = ot(n);
    n === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${r}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${o(s.slice())};
          if(${r}){
            result.g = ${u(s.slice())};
          }
          if(${a}) {
            result.b = ${l(s.slice())};
            if(${r}) {
              result.a = ${c(s.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function o(h) {
      return p(h);
    }
    function u(h) {
      return h[n - 1] = "(" + h[n - 1] + " + 1)", p(h);
    }
    function l(h) {
      return h[n - 2] = "(" + h[n - 2] + " + 1)", p(h);
    }
    function c(h) {
      return h[n - 1] = "(" + h[n - 1] + " + 1)", h[n - 2] = "(" + h[n - 2] + " + 1)", p(h);
    }
    function p(h) {
      let f = e.map((b, y) => d(y, h)), m = f.join(","), g = f.slice(-2).join(",");
      return `getChannel(getX(${m}), vec2(${g}))`;
    }
    function d(h, f) {
      return t.indexOf(h) !== -1 && e[h] !== 1 ? `${e[h]} - ${f[h]} - 1` : `${f[h]}`;
    }
  }
};
function OJ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { dims: a } = s, i = r.shape.length, o = w.parseAxisParam(a, r.shape);
  if (i === 0)
    return Rn({ inputs: { x: r }, backend: n });
  let u = X().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new FJ(r.shape, o) : new DJ(r.shape, o);
  return n.runWebGLProgram(u, [r], r.dtype);
}
var PJ = { kernelName: Do, backendName: "webgl", kernelFunc: OJ };
var zJ = class {
  constructor(e, t) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    let n = e[1], s = e[2];
    this.outputShape = e;
    let r = "";
    typeof t == "number" ? r = `float outputValue = ${t.toFixed(2)};` : r = `
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${r}
          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
var MJ = { kernelName: jo, backendName: "webgl", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
  let { image: s } = e, { radians: r, fillValue: a, center: i } = t, o = n, u = new zJ(s.shape, a), [l, c] = C.getImageCenter(i, s.shape[1], s.shape[2]), p = [[l, c, Math.sin(r), Math.cos(r)]];
  return o.runWebGLProgram(u, [s], s.dtype, p);
} };
var LJ = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`;
var BJ = Ke({ opSnippet: LJ });
var VJ = { kernelName: Fo, backendName: "webgl", kernelFunc: BJ };
var WJ = "return inversesqrt(x);";
var UJ = Ke({ opSnippet: WJ, cpuKernelImpl: hX });
var GJ = { kernelName: ii, backendName: "webgl", kernelFunc: UJ };
var v2 = class {
  constructor(e, t, n, s, r, a, i = true) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = a;
    let o = ot(r.length), u = ot(a.length), l = "";
    n === 1 ? l = "i" : n === 2 && (l = "i, j");
    let c = `getIndices(${l})`, p = "";
    s === 1 ? p = "i" : s === 2 && (p = "i, coords[1]");
    let d = `getUpdates(${p})`, h = t > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${o} strides = ${o}(${r});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${c});
              flattenedIndex += index * ${h};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${d};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
  }
};
function HJ(e) {
  let { inputs: t, backend: n, attrs: s } = e, { indices: r, updates: a } = t, { shape: i } = s, { sliceRank: o, numUpdates: u, sliceSize: l, strides: c, outputSize: p } = C.calculateShapes(a, r, i), d = [p / l, l];
  if (p === 0)
    return n.makeTensorInfo(i, r.dtype);
  let h = he({ inputs: { x: r }, backend: n, attrs: { shape: [u, o] } }), f = he({ inputs: { x: a }, backend: n, attrs: { shape: [u, l] } }), m = n.makeTensorInfo([], "float32", new Float32Array([0])), g = new v2(u, o, h.shape.length, f.shape.length, c, d), b = n.runWebGLProgram(g, [f, h, m], f.dtype), y = he({ inputs: { x: b }, backend: n, attrs: { shape: i } });
  return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(m), y;
}
var qJ = { kernelName: Oo, backendName: "webgl", kernelFunc: HJ };
var jJ = class {
  constructor(e, t, n) {
    this.variableNames = ["c", "a", "b"], this.outputShape = t;
    let s, r;
    if (n > 4)
      throw Error(`Where for rank ${n} is not yet supported`);
    if (n === 1)
      r = "resRC", s = "resRC";
    else {
      let i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o = [], u = [];
      for (let l = 0; l < t.length; l++)
        u.push(`${i[l]}`), l < e && o.push(`${i[l]}`);
      s = o.join(), r = u.join();
    }
    let a = ot(n);
    this.userCode = `
      void main() {
        ${a} resRC = getOutputCoords();
        float cVal = getC(${s});
        if (cVal >= 1.0) {
          setOutput(getA(${r}));
        } else {
          setOutput(getB(${r}));
        }
      }
    `;
  }
};
function KJ(e) {
  let { inputs: t, backend: n } = e, { condition: s, t: r, e: a } = t, i = new jJ(s.shape.length, r.shape, r.shape.length);
  return n.runWebGLProgram(i, [s, r, a], ln(r.dtype, a.dtype));
}
var XJ = { kernelName: Po, backendName: "webgl", kernelFunc: KJ };
var YJ = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${C.SELU_SCALEALPHA};
  float scale = ${C.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`;
var QJ = Ke({ opSnippet: YJ });
var ZJ = { kernelName: Nl, backendName: "webgl", kernelFunc: QJ };
var JJ = uu + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`;
var eee = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var tee = Ke({ opSnippet: JJ, packedOpSnippet: eee, cpuKernelImpl: fX });
var nee = { kernelName: ui, backendName: "webgl", kernelFunc: tee };
var see = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`;
var ree = Ke({ opSnippet: see });
var aee = { kernelName: Tl, backendName: "webgl", kernelFunc: ree };
var iee = uu + `
  return sin(x);
`;
var oee = Ke({ opSnippet: iee });
var uee = { kernelName: oi, backendName: "webgl", kernelFunc: oee };
var lee = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`;
var cee = Ke({ opSnippet: lee });
var dee = { kernelName: Mo, backendName: "webgl", kernelFunc: cee };
var pee = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`;
var hee = Ke({ opSnippet: pee });
var fee = { kernelName: $l, backendName: "webgl", kernelFunc: hee };
var mee = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockShape: a, paddings: i } = s;
  w.assert(r.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  let o = a.reduce((b, y) => b * y), u = [[0, 0]];
  u.push(...i);
  for (let b = 1 + a.length; b < r.shape.length; ++b)
    u.push([0, 0]);
  let l = [], c = b2({ inputs: { x: r }, backend: n, attrs: { paddings: u, constantValue: 0 } }), p = C.getReshaped(c.shape, a, o, false), d = C.getPermuted(p.length, a.length, false), h = C.getReshapedPermuted(c.shape, a, o, false), f = he({ inputs: { x: c }, backend: n, attrs: { shape: p } }), m = dn({ inputs: { x: f }, backend: n, attrs: { perm: d } }), g = he({ inputs: { x: m }, backend: n, attrs: { shape: h } });
  return l.push(c), l.push(f), l.push(m), l.forEach((b) => n.disposeIntermediateTensorInfo(b)), g;
};
var gee = { kernelName: Lo, backendName: "webgl", kernelFunc: mee };
function bee(e) {
  let { inputs: t, backend: n } = e, { indices: s, values: r, denseShape: a, defaultValue: i } = t;
  if (a.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${a.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${r.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  let o = n.readSync(s.dataId), u = n.readSync(r.dataId), l = n.readSync(a.dataId), c = n.readSync(i.dataId)[0], [p, d, h, f, m] = gX(o, s.shape, s.dtype, u, r.dtype, l, c);
  return [n.makeTensorInfo(d, s.dtype, p), n.makeTensorInfo([d[0]], r.dtype, h), n.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))), n.makeTensorInfo([m.length], s.dtype, new Int32Array(m))];
}
var yee = { kernelName: ap, backendName: "webgl", kernelFunc: bee };
function vee(e) {
  let { inputs: t, backend: n } = e, { inputIndices: s, inputShape: r, newShape: a } = t;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${r.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${a.shape}`);
  let i = Array.from(n.readSync(r.dataId)), o = n.readSync(s.dataId), u = Array.from(n.readSync(a.dataId)), [l, c, p] = bX(o, s.shape, s.dtype, i, u);
  return [n.makeTensorInfo(c, s.dtype, l), n.makeTensorInfo([p.length], a.dtype, new Int32Array(p))];
}
var xee = { kernelName: _l, backendName: "webgl", kernelFunc: vee };
function wee(e) {
  let { inputs: t, backend: n } = e, { data: s, indices: r, segmentIds: a } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${r.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${a.shape}`);
  let i = n.readSync(s.dataId), o = n.readSync(r.dataId), u = n.readSync(a.dataId), [l, c] = B1(i, s.shape, s.dtype, o, u, true);
  return n.makeTensorInfo(c, s.dtype, l);
}
var kee = { kernelName: ip, backendName: "webgl", kernelFunc: wee };
function Iee(e) {
  let { inputs: t, backend: n } = e, { data: s, indices: r, segmentIds: a } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${r.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${a.shape}`);
  let i = n.readSync(s.dataId), o = n.readSync(r.dataId), u = n.readSync(a.dataId), [l, c] = B1(i, s.shape, s.dtype, o, u);
  return n.makeTensorInfo(c, s.dtype, l);
}
var See = { kernelName: op, backendName: "webgl", kernelFunc: Iee };
function Cee(e) {
  let { inputs: t, backend: n, attrs: s } = e, { sparseIndices: r, sparseValues: a, defaultValue: i } = t, { outputShape: o } = s, { sliceRank: u, numUpdates: l, strides: c, outputSize: p } = C.calculateShapes(a, r, o), d = false, h = new v2(l, u, r.shape.length, a.shape.length, c, [p, 1], d), f = n.runWebGLProgram(h, [a, r, i], a.dtype), m = he({ inputs: { x: f }, backend: n, attrs: { shape: o } });
  return n.disposeIntermediateTensorInfo(f), m;
}
var Nee = { kernelName: up, backendName: "webgl", kernelFunc: Cee };
function Tee(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { numOrSizeSplits: a, axis: i } = s, o = w.parseAxisParam(i, r.shape)[0], u = C.prepareSplitSize(r, a, o), l = r.shape.length, c = new Array(l).fill(0), p = r.shape.slice();
  return u.map((d) => {
    let h = [...p];
    h[o] = d;
    let f = lu({ inputs: { x: r }, backend: n, attrs: { begin: c, size: h } });
    return c[o] += d, f;
  });
}
var $ee = { kernelName: Bo, backendName: "webgl", kernelFunc: Tee };
var Cw = "return sqrt(x);";
var _ee = Ke({ opSnippet: Cw, packedOpSnippet: Cw, cpuKernelImpl: yX });
var Aee = { kernelName: li, backendName: "webgl", kernelFunc: _ee };
var Eee = "return x * x;";
var Ree = Ke({ opSnippet: Eee });
var Dee = { kernelName: Al, backendName: "webgl", kernelFunc: Ree };
var Nw = "return (a - b) * (a - b);";
var Fee = qt({ opSnippet: Nw, packedOpSnippet: Nw });
var Oee = { kernelName: pi, backendName: "webgl", kernelFunc: Fee };
function Pee({ inputs: e, attrs: t, backend: n }) {
  let { x: s } = e, r = ss + `
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `, a = new Hs(s.shape, r);
  return n.runWebGLProgram(a, [s], s.dtype);
}
var zee = { kernelName: gi, backendName: "webgl", kernelFunc: Pee };
var Mee = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.outputShape = n;
    let s = n.length, r = ot(n.length), a = ot(n.length), i = "";
    if (s === 1)
      i = "coords * strides + begin";
    else {
      let o = 0;
      i = n.map((u, l) => (o++, n.length === 1 ? `coords * strides[${l}] + begin[${l}]` : `coords[${o - 1}] * strides[${l}] + begin[${l}]`)).join(",");
    }
    this.userCode = `
      ${r} begin = ${r}(${e});
      ${r} strides = ${r}(${t});

      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `;
  }
};
function Lee(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { begin: a, end: i, strides: o, beginMask: u, endMask: l, ellipsisMask: c, newAxisMask: p, shrinkAxisMask: d } = s, { finalShapeSparse: h, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: b, begin: y, end: v, strides: x } = wt.sliceInfo(r.shape, a, i, o, u, l, c, p, d), k;
  if (m)
    k = he({ inputs: { x: r }, backend: n, attrs: { shape: f } });
  else if (g || b) {
    w.assert(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    let $ = wt.computeOutShape(y, v, x), E = lu({ inputs: { x: r }, backend: n, attrs: { begin: y, size: $ } });
    k = he({ inputs: { x: E }, backend: n, attrs: { shape: f } }), n.disposeIntermediateTensorInfo(E);
  } else if (n.shouldExecuteOnCPU([r])) {
    let E = n.readSync(r.dataId), A = De(r.shape, r.dtype, E), P = vX(h, A, x, y);
    k = n.makeTensorInfo(f, r.dtype, P.values);
  } else {
    let E = new Mee(y, x, h);
    k = n.runWebGLProgram(E, [r], r.dtype);
  }
  let S = he({ inputs: { x: k }, backend: n, attrs: { shape: f } });
  return n.disposeIntermediateTensorInfo(k), S;
}
var Bee = { kernelName: Vo, backendName: "webgl", kernelFunc: Lee };
function Vee(e) {
  let { inputs: t, backend: n, attrs: s } = e, { separator: r, nGramWidths: a, leftPad: i, rightPad: o, padWidth: u, preserveShortSequences: l } = s, { data: c, dataSplits: p } = t, d = n.readSync(c.dataId), h = n.readSync(p.dataId), [f, m] = xX(d, h, r, a, i, o, u, l);
  return [n.makeTensorInfo([f.length], "string", f), n.makeTensorInfo(p.shape, "int32", m)];
}
var Wee = { kernelName: lp, backendName: "webgl", kernelFunc: Vee };
function Uee(e) {
  let { inputs: t, backend: n, attrs: s } = e, { skipEmpty: r } = s, { input: a, delimiter: i } = t;
  if (a.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (a.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${a.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  let o = n.readSync(a.dataId), u = n.readSync(i.dataId)[0], [l, c, p] = wX(o, u, r), d = c.length;
  return [n.makeTensorInfo([d, 2], "int32", l), n.makeTensorInfo([d], "string", c), n.makeTensorInfo([2], "int32", new Int32Array(p))];
}
var Gee = { kernelName: Ag, backendName: "webgl", kernelFunc: Uee };
function Hee(e) {
  let { inputs: t, backend: n, attrs: s } = e, { numBuckets: r } = s, { input: a } = t;
  if (a.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r <= 0)
    throw new Error("Number of buckets must be at least 1");
  let i = n.readSync(a.dataId), o = kX(i, r);
  return n.makeTensorInfo(a.shape, "int32", o);
}
var qee = { kernelName: Eg, backendName: "webgl", kernelFunc: Hee };
var jee = "return tan(x);";
var Kee = Ke({ opSnippet: jee });
var Xee = { kernelName: Wo, backendName: "webgl", kernelFunc: Kee };
var Yee = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`;
var Qee = Ke({ opSnippet: Yee });
var Zee = { kernelName: fi, backendName: "webgl", kernelFunc: Qee };
var Jee = class {
  constructor(e, t) {
    this.variableNames = ["A"];
    let n = new Array(e.length);
    for (let a = 0; a < n.length; a++)
      n[a] = e[a] * t[a];
    this.outputShape = n, this.rank = n.length;
    let s = ot(this.rank), r = ete(e);
    this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        setOutput(getA(${r}));
      }
    `;
  }
};
function ete(e) {
  let t = e.length;
  if (t > 5)
    throw Error(`Tile for rank ${t} is not yet supported`);
  if (t === 1)
    return `imod(resRC, ${e[0]})`;
  let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], s = [];
  for (let r = 0; r < e.length; r++)
    s.push(`imod(${n[r]}, ${e[r]})`);
  return s.join();
}
function x2(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { reps: a } = s;
  if (r.dtype === "string" || r.shape.length > 5) {
    let u = n.readSync(r.dataId), l = r.dtype === "string" ? u.map((d) => w.decodeString(d)) : u, c = De(r.shape, r.dtype, l), p = SX(c, a);
    return n.makeTensorInfo(p.shape, p.dtype, p.values);
  }
  let i = new Jee(r.shape, a);
  return n.runWebGLProgram(i, [r], r.dtype);
}
var tte = { kernelName: Nr, backendName: "webgl", kernelFunc: x2 };
var nte = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "negativeInf", type: "float" }, { name: "dir", type: "int" }, { name: "inc", type: "int" }], this.outputShape = e, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
};
var ste = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "k", type: "int" }], this.outputShape = e, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
};
function Gr(e, t) {
  t !== null && e.disposeIntermediateTensorInfo(t);
}
function Tw(e) {
  let t = 1;
  for (; t < e; )
    t *= 2;
  return t;
}
function rte(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { k: a, sorted: i } = s, o = X().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), u = X().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), l = r.shape, c = l[l.length - 1];
  if (n.shouldExecuteOnCPU([r]) || c < o || a > u) {
    let P = n.readSync(r.dataId), [R, F] = CX(P, l, r.dtype, a, i);
    return [n.makeTensorInfo(R.shape, R.dtype, R.values), n.makeTensorInfo(F.shape, F.dtype, F.values)];
  }
  if (a === 0)
    return l[l.length - 1] = 0, [n.makeTensorInfo(l, r.dtype, []), n.makeTensorInfo(l, "int32", [])];
  if (c === 1)
    return [r, ec({ attrs: { shape: l, dtype: "int32", value: 0 }, backend: n })];
  let p = n.texData.get(r.dataId), d = p !== null && p.isPacked, h = d ? n.unpackTensor(r) : r, m = w.sizeFromShape(l) / c, g = he({ inputs: { x: h }, attrs: { shape: [m, c] }, backend: n });
  d && Gr(n, h);
  let b = Tw(a), y = Tw(c), v = null, x = () => v === null ? [g, g] : [g, v], k = (P, R, F) => {
    let T = x(), z = new nte(F), q = [[c], [v === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [P], [R]], K = v;
    v = n.runWebGLProgram(z, T, "int32", q), Gr(n, K);
  };
  for (let P = 1; P < b; P *= 2) {
    let R = P * 2;
    for (let F = P; F >= 1; F /= 2)
      k(R, F, [m, y]);
  }
  for (let P = y; P > b; P /= 2) {
    let R = x(), F = new ste([m, P / 2]), z = [[c], [v === null ? 1 : 0], [b]], W = v;
    v = n.runWebGLProgram(F, R, "int32", z), Gr(n, W);
    let q = b / 2, K = q * 2;
    for (let Y = q; Y >= 1; Y /= 2)
      k(K, Y, v.shape);
  }
  let S = v;
  v = lu({ inputs: { x: v }, backend: n, attrs: { begin: 0, size: [m, a] } }), Gr(n, S);
  let $ = d2({ inputs: { x: g, indices: v }, backend: n, attrs: { axis: 1, batchDims: 1 } });
  Gr(n, g);
  let E = l.slice(0, -1);
  E.push(a), S = v, v = he({ inputs: { x: v }, attrs: { shape: E }, backend: n }), Gr(n, S);
  let A = $;
  return $ = he({ inputs: { x: $ }, attrs: { shape: E }, backend: n }), Gr(n, A), [$, v];
}
var ate = { kernelName: Uo, backendName: "webgl", kernelFunc: rte };
var ite = class {
  constructor(e, t, n, s, r, a) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = a;
    let i = n === "nearest" ? 1 : 2, o;
    switch (s) {
      case "constant":
        o = 1;
        break;
      case "reflect":
        o = 2;
        break;
      case "wrap":
        o = 3;
        break;
      case "nearest":
        o = 4;
        break;
      default:
        o = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${o} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${o} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${o} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${r});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${r});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
};
function ote(e) {
  let { inputs: t, backend: n, attrs: s } = e, { image: r, transforms: a } = t, { interpolation: i, fillMode: o, fillValue: u, outputShape: l } = s, [c, p, d, h] = r.shape, [f, m] = l != null ? l : [p, d], g = [c, f, m, h], b = new ite(p, d, i, o, u, g);
  return n.runWebGLProgram(b, [r, a], "float32");
}
var ute = { kernelName: Go, backendName: "webgl", kernelFunc: ote };
function lte(e) {
  let { inputs: t, attrs: n, backend: s } = e, { axis: r } = n, { x: a } = t;
  su(a, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  let i = s.readSync(a.dataId), { outputValues: o, outputShape: u, indices: l } = NX(i, r, a.shape, a.dtype);
  return [s.makeTensorInfo(u, a.dtype, o), s.makeTensorInfo([l.length], "int32", l)];
}
var cte = { kernelName: Rg, backendName: "webgl", kernelFunc: lte };
function dte(e) {
  let { inputs: t, backend: n, attrs: s } = e, { value: r } = t, { axis: a } = s;
  a < 0 && (a += r.shape.length);
  let i = r, o = i.shape.length, u = r.shape[a], l = new Array(o - 1), c = 0;
  for (let m = 0; m < o; m++)
    m !== a && (l[c++] = i.shape[m]);
  let p = [], d = new Array(o).fill(0), h = i.shape.slice();
  h[a] = 1;
  let f = new Array(u);
  for (let m = 0; m < f.length; m++) {
    d[a] = m;
    let g = lu({ inputs: { x: i }, backend: n, attrs: { begin: d, size: h } }), b = he({ inputs: { x: g }, backend: n, attrs: { shape: l } });
    f[m] = b, p.push(g);
  }
  return p.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
}
var pte = { kernelName: Ho, backendName: "webgl", kernelFunc: dte };
var hte = class {
  constructor(e, t) {
    this.variableNames = ["x", "segmentIds"];
    let n = e.windowSize, s = e.batchSize, r = e.inSize, a = e.numSegments, i = a * Math.ceil(r / n);
    this.outputShape = [s, i];
    let o = "0.0", u = "sumValue", l = Math.floor(n / 4) * 4, c = n % 4, p = `
        sumValue += dot(values, segFilter);
    `, d = "";
    r % n > 0 && (d = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `);
    let h = "";
    r % n > 0 && (h = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${o};

      float getValue(int batch, int inIdx) {
        ${d}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${h}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${a})) * float(${n}));
        int currentSeg = int(mod(float(outIdx), float(${a})));

        float sumValue = 0.0;

        for (int i = 0; i < ${l}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${p}
        }

        int inIdx = inOffset + ${l};
        if (${c === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${p}
        } else if (${c === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${p}
        } else if (${c === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${p}
        }
        setOutput(${u});
      }
    `;
  }
};
function fte(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, segmentIds: a } = t, { numSegments: i } = s, o = r.shape.length, u = [], l = 0, c = C.getAxesPermutation([l], o), p = r;
  c != null && (p = dn({ inputs: { x: r }, backend: n, attrs: { perm: c } }), u.push(p), l = C.getInnerMostAxes(1, o)[0]);
  let d = C.segment_util.computeOutShape(p.shape, l, i), h = w.sizeFromShape([p.shape[l]]), f = he({ inputs: { x: p }, backend: n, attrs: { shape: [-1, h] } });
  u.push(f);
  let m = pp(r.dtype), g = (x, k, S, $, E) => {
    let A = x.shape[0], P = x.shape[1], R = C.segment_util.segOpComputeOptimalWindowSize(P, E), F = { windowSize: R, inSize: P, batchSize: A, numSegments: E }, T = new hte(F, k), z = n.compileAndRun(T, [x, S], $);
    if (u.push(z), z.shape[1] === E)
      return z;
    let W = y2({ backend: n, attrs: { start: 0, stop: E, step: 1, dtype: "float32" } }), q = x2({ inputs: { x: W }, backend: n, attrs: { reps: [P / R] } });
    return u.push(W), u.push(q), g(z, k, q, $, E);
  }, b = g(f, "unsortedSegmentSum", a, m, i), y = he({ inputs: { x: b }, backend: n, attrs: { shape: d } }), v = y;
  if (c != null) {
    u.push(y);
    let x = C.getUndoAxesPermutation(c);
    v = dn({ inputs: { x: v }, backend: n, attrs: { perm: x } });
  }
  return u.forEach((x) => n.disposeIntermediateTensorInfo(x)), v;
}
var mte = { kernelName: cp, backendName: "webgl", kernelFunc: fte };
var gte = [x8, k8, C8, $8, A8, D8, O8, z8, V8, U8, q8, X8, Z8, nY, aY, oY, lY, hY, mY, bY, wY, $Y, AY, RY, MY, BY, GY, t8, jY, ZY, n9, u9, c9, p9, f9, g9, v9, k9, C9, T9, _9, E9, F9, P9, B9, W9, H9, K9, Y9, eQ, rQ, uQ, dQ, fQ, mQ, bQ, vQ, wQ, IQ, CQ, _Q, RQ, OQ, zQ, BQ, UQ, jQ, QQ, e8, JQ, YY, nZ, aZ, uZ, s8, pZ, gZ, yZ, kZ, CZ, _Z, RZ, PZ, BZ, UZ, HZ, XZ, QZ, JZ, s7, a7, o7, l7, d7, m7, v7, I7, E7, u8, O7, M7, V7, G7, FY, j7, X7, Q7, eJ, rJ, a8, iJ, oJ, OY, T7, cJ, fJ, yJ, c8, kJ, CJ, _J, RJ, PJ, MJ, VJ, GJ, qJ, XJ, ZJ, nee, aee, uee, dee, NY, _7, fee, gee, yee, xee, kee, See, Nee, $ee, Aee, Dee, Oee, zee, Bee, Wee, Gee, qee, $7, b8, Xee, Zee, tte, ate, ute, y8, cte, pte, mte, K7];
for (let e of gte)
  El(e);
var zs = X();
zs.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE", () => 15);
zs.registerFlag("WEBGPU_CPU_FORWARD", () => true);
zs.registerFlag("WEBGPU_MATMUL_WORK_PER_THREAD", () => 4);
zs.registerFlag("WEBGPU_USE_NAIVE_CONV2D", () => false);
zs.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE", () => false);
zs.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER", () => false);
zs.registerFlag("WEBGPU_USE_LOW_POWER_GPU", () => false);
zs.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e3);
zs.registerFlag("WEBGPU_USE_PROFILE_TOOL", () => false);
zs.registerFlag("WEBGPU_USE_IMPORT", () => false);
var bte = "return a + b;";
var yte = "return areal * breal - aimag * bimag;";
var vte = "return areal * bimag + aimag * breal;";
var xte = "return a / b;";
var wte = "return a * b;";
var kte = "return (a - b) * (a - b);";
var Ite = "return a - b;";
var Ste = "return f32(a == b);";
var Cte = "return vec4<f32>(a == b);";
var Nte = "return f32(a > b);";
var Tte = "return vec4<f32>(a > b);";
var $te = "return f32(a >= b);";
var _te = "return vec4<f32>(a >= b);";
var Ate = "return f32(a < b);";
var Ete = "return vec4<f32>(a < b);";
var Rte = "return f32(a <= b);";
var Dte = "return vec4<f32>(a <= b);";
var Fte = "return f32(f32(a) >= 1.0 && f32(b) >= 1.0);";
var Ote = `return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`;
var Pte = `
  if (isnan(a)) { return a; }
  if (isnan(b)) { return b; }
  `;
var w2 = `
  if (isNaN.r) {
    resultTemp.r = uniforms.NAN;
  }
  if (isNaN.g) {
    resultTemp.g = uniforms.NAN;
  }
  if (isNaN.b) {
    resultTemp.b = uniforms.NAN;
  }
  if (isNaN.a) {
    resultTemp.a = uniforms.NAN;
  }
  `;
var zte = `
  let s = sign(a) * sign(b);
  let ia = i32(round(a));
  let ib = i32(round(b));
  return f32(idiv(ia, ib, s));
  `;
var Mte = `
  let ia = vec4<i32>(round(a));
  let ib = vec4<i32>(round(b));
  let cond = ib != vec4<i32>(0);
  var resultTemp = vec4<i32>(0);
  let s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    resultTemp[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    resultTemp[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    resultTemp[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    resultTemp[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4<f32>(resultTemp);
  `;
var Lte = "return f32(a != b);";
var Bte = "return vec4<f32>(a != b);";
var Vte = `
  if(a < 0.0 && floor(b) < b) {
    return uniforms.NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  if (round(abs(b) % 2.0) != 1.0) {
    return pow(abs(a), b);
  }
  return sign(a) * pow(abs(a), b);
  `;
var Wte = `
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = a < vec4<f32>(0.0) & floor(b) < b;
  ${w2}
  return resultTemp;
  `;
var Ute = "if (a < 0.0) { return b * a; }  return a;";
var Gte = `
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
  `;
function $w(e, t) {
  let n = t ? w2 : Pte;
  return t ? `
    var resultTemp = vec4<f32>(${e}(a, b));
    let isNaN = isnanVec4(a) | isnanVec4(b);
    ` + n + `
    return resultTemp;
  ` : n + `
    return ${e}(a, b);
  `;
}
function tc(e, t) {
  switch (e) {
    case 0:
      return wte;
    case 1:
      return bte;
    case 2:
      return Ite;
    case 3:
      return xte;
    case 4:
      return t ? Cte : Ste;
    case 5:
      return t ? Tte : Nte;
    case 6:
      return t ? _te : $te;
    case 7:
      return t ? Ete : Ate;
    case 8:
      return t ? Dte : Rte;
    case 9:
      return t ? Ote : Fte;
    case 10:
      return t ? Bte : Lte;
    case 11:
      return kte;
    case 12:
      return t ? Mte : zte;
    case 14:
      return t ? Gte : Ute;
    case 15:
      return $w("max", t);
    case 16:
      return $w("min", t);
    case 13:
      return t ? Wte : Vte;
    case 17:
      return yte;
    case 18:
      return vte;
    default:
      throw new Error(`BinaryType ${e} is not implemented!`);
  }
}
var Hte = "return abs(a);";
var qte = "return ceil(a);";
var jte = "return cos(a);";
var Kte = `
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`;
var Xte = "return exp(a) - 1.0;";
var Yte = "if (a >= 0.0) { return a; }  return (exp(a) - 1.0);";
var Qte = `
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`;
var Zte = "return exp(a);";
var Jte = "return floor(a);";
var ene = "return a;";
var tne = `if (a < 0.0) { return 1.0/0.0; }
  return log(a);`;
var nne = "return f32(!(a >= 1.0));";
var sne = "return -a;";
var rne = "if (a < 0.0) { return uniforms.alpha * a; } return a;";
var ane = `
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`;
var ine = "if(a < 0.0) { return 0.0; } return a;";
var one = "return clamp(a, 0.0, 6.0);";
var une = "return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));";
var lne = `
  var resFloat = a * vec4<f32>(a >= vec4<f32>(0.0));
  let isNaN = isnanVec4(a);

  if (isNaN.r) {
    resFloat.r = a.r;
  }
  if (isNaN.g) {
    resFloat.g = a.g;
  }
  if (isNaN.b) {
    resFloat.b = a.b;
  }
  if (isNaN.a) {
    resFloat.a = a.a;
  }
  return resFloat;
`;
var cne = "return 1.0/sqrt(a);";
var dne = "return 1.0 / (1.0 + exp(-1.0 * a));";
var pne = "return sin(a);";
var hne = `
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`;
var fne = "return sqrt(a);";
var mne = "return a * a;";
var gne = `
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`;
var bne = "return f32(i32((a)));";
function qr(e, t) {
  switch (e) {
    case 0:
      return Hte;
    case 2:
      return jte;
    case 3:
      return Kte;
    case 1:
      return qte;
    case 4:
      return t ? Qte : Yte;
    case 5:
      return Zte;
    case 6:
      return Xte;
    case 7:
      return Jte;
    case 8:
      return ene;
    case 9:
      return tne;
    case 10:
      return nne;
    case 11:
      return sne;
    case 14:
      return t ? ane : rne;
    case 12:
      return t ? lne : ine;
    case 13:
      return t ? une : one;
    case 15:
      return cne;
    case 18:
      return dne;
    case 16:
      return pne;
    case 17:
      return hne;
    case 19:
      return fne;
    case 20:
      return mne;
    case 21:
      return gne;
    case 22:
      return bne;
    default:
      throw new Error(`BinaryType ${e} is not implemented!`);
  }
}
function Js(e, t = false) {
  if (e === null)
    return null;
  if (e === "linear")
    return qr(8);
  if (e === "relu")
    return qr(12, t);
  if (e === "elu")
    return qr(4, t);
  if (e === "relu6")
    return qr(13, t);
  if (e === "prelu")
    return tc(14, t);
  if (e === "sigmoid")
    return qr(18, t);
  if (e === "leakyrelu")
    return qr(14, t);
  throw new Error(`Activation ${e} has not been implemented for the WebGPU backend.`);
}
function yne(e, t) {
  if (Math.max(...e) > 3)
    throw new Error("Cannot symbolically compute strides for rank > 4 tensor.");
  let n = e.length, s = e.map((a) => `${t}[${a}]`), r = new Array(n - 1);
  r[n - 2] = s[n - 1];
  for (let a = n - 3; a >= 0; --a)
    r[a] = `(${r[a + 1]} * ${s[a + 1]})`;
  return r;
}
function Wt(e) {
  if (e <= 1)
    return "i32";
  if (e === 2)
    return "vec2<i32>";
  if (e === 3)
    return "vec3<i32>";
  if (e === 4)
    return "vec4<i32>";
  throw Error(`GPU for rank ${e} is not yet supported`);
}
function cd(e, t) {
  return e === "float32" ? t ? "vec4<f32>" : "f32" : e === "int32" || e === "bool" ? t ? "vec4<i32>" : "i32" : e;
}
function Nv() {
  return `
  @stage(compute) @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
`;
}
function Fr() {
  return `
  ${Nv()}
  fn main(@builtin(local_invocation_id) LocalId : vec3<u32>,
          @builtin(global_invocation_id) GlobalId : vec3<u32>,
          @builtin(num_workgroups) NumWorkgroups: vec3<u32>) {
    localId = LocalId;
    globalId = GlobalId;
    numWorkgroups = NumWorkgroups;
`;
}
function Ue() {
  return `
    ${Fr()}
      let index = getGlobalIndex();
`;
}
function vne(e, t, n, s = false) {
  let r = [];
  if (r.push(`
    let workGroupSizeX = ${n.workGroupSize[0]}u;
    let workGroupSizeY = ${n.workGroupSize[1]}u;
    let workGroupSizeZ = ${n.workGroupSize[2]}u;

    var<private> localId: vec3<u32>;
    var<private> globalId: vec3<u32>;
    var<private> numWorkgroups: vec3<u32>;

    // Only used when the y/z dimension of workgroup size is 1.
    fn getGlobalIndex() -> i32 {
      if (numWorkgroups.y == 1u && numWorkgroups.z == 1u) {
        return i32(globalId.x);
      }

      let localInvocationIndex = localId.z * workGroupSizeX * workGroupSizeY +
          localId.y * workGroupSizeX + localId.x;
      let workGroupID = (globalId - localId)/vec3<u32>(
          workGroupSizeX, workGroupSizeY, workGroupSizeZ);

      return i32((workGroupID.z * numWorkgroups.x * numWorkgroups.y +
        workGroupID.y * numWorkgroups.x + workGroupID.x) *
        (workGroupSizeX * workGroupSizeY * workGroupSizeZ) +
        localInvocationIndex);
    }
  `), s === true)
    return r.push(`
      struct Uniform {
        size            : i32,
        numChannels     : i32,
        outShapeStrides : vec2<i32>,
        dispatchSize    : vec3<u32>,
      };

      @group(0) @binding(0) var<storage, write> result: array<${cd(t.dtype, n.isVec4)}>;
      @group(0) @binding(2) var<uniform> uniforms: Uniform;
    `), [_w, r.join(`
`), Aw(t.shape), n.getUserCode()].join(`
`);
  let a = "struct Uniforms { NAN : f32, ";
  n.variableNames.forEach((p, d) => {
    a += `${p.charAt(0).toLowerCase() + p.slice(1)}Shape : ${Wt(e[d].shape.length)}, `;
  }), a += `outShape : ${Wt(t.shape.length)}, `;
  let i = t.shape.length - 1;
  a += `
       outShapeStrides: ${Wt(i)}, `, n.size && (a += "size : i32, "), n.uniforms && (a += n.uniforms), a += "};", r.push(a), n.atomic ? r.push(`
    @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
  `) : r.push(`
    @group(0) @binding(0) var<storage, write> result: array<${cd(t.dtype, n.isVec4)}>;
  `), n.variableNames.forEach((p, d) => {
    r.push(`
    @group(0) @binding(${1 + d}) var<storage, read> ${p}: array<${cd(e[d].dtype, n.isVec4)}>;
    `);
  }), a !== "" && r.push(`
    @group(0) @binding(${1 + n.variableNames.length}) var<uniform> uniforms: Uniforms;
    `);
  let [o, u] = Cne(t.shape, n.dispatchLayout), l = [_w, r.join(`
`), Aw(t.shape), o, xne(t.shape.length)];
  if (n.atomic || l.push(wne(t.shape, t.dtype, n.isVec4)), u === t.shape.length) {
    let p = e.map((d) => kne(d, t.shape, n.isVec4, n.dispatchLayout.x.length === t.shape.length)).join(`
`);
    l.push(p);
  }
  return l.push(n.getUserCode()), l.join(`
`);
}
var _w = `
  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }

  fn idiv(a: i32, b: i32, sign: f32) -> i32 {
    var res: i32 = a / b;
    let mod: i32 = a % b;
    if (sign < 0. && mod != 0) {
      res = res - 1;
    }
    return res;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    return vec4<bool>(isnan(val[0]), isnan(val[1]), isnan(val[2]), isnan(val[3]));
  }
`;
function xne(e) {
  let t = "";
  switch (e) {
    case 0:
    case 1:
      t += `
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;
      break;
    case 2:
      t += `
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;
      break;
    case 3:
      t += `
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;
      break;
    case 4:
      t += `
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;
      break;
    default:
      w.assert(false, () => `Unsupported ${e}D shape`);
      break;
  }
  return t;
}
function wne(e, t, n) {
  let s = e.length, r = cd(t, n), a;
  if (n ? a = `fn setOutputAtIndex(flatIndex : i32, value : vec4<f32>) {
      result[flatIndex] = ${r}(value);
    }
    fn setOutputAtIndexI32(flatIndex : i32, value : vec4<i32>) {
      result[flatIndex] = ${r}(value);
    }` : a = `fn setOutputAtIndex(flatIndex : i32, value : f32) {
      result[flatIndex] = ${r}(value);
    }
    fn setOutputAtIndexI32(flatIndex : i32, value : i32) {
      result[flatIndex] = ${r}(value);
    }`, s >= 2) {
    let i = ["d0", "d1", "d2", "d3"].slice(0, s), o = Wt(s);
    n ? a += `
      fn setOutputAtCoords(${i.map((u) => `${u} : i32`).join(", ")}, value : vec4<f32>) {
        let flatIndex = getOutputIndexFromCoords(${o}(${i.join(", ")}));
        setOutputAtIndex(flatIndex / 4, value);
      }
      fn setOutputAtCoordsI32(${i.map((u) => `${u} : i32`).join(", ")}, value : vec4<i32>) {
        let flatIndex = getOutputIndexFromCoords(${o}(${i.join(", ")}));
        setOutputAtIndexI32(flatIndex / 4, value);
      }
    ` : a += `
      fn setOutputAtCoords(${i.map((u) => `${u} : i32`).join(", ")}, value : f32) {
        let flatIndex = getOutputIndexFromCoords(${o}(${i.join(", ")}));
        setOutputAtIndex(flatIndex, value);
      }
      fn setOutputAtCoordsI32(${i.map((u) => `${u} : i32`).join(", ")}, value : i32) {
        let flatIndex = getOutputIndexFromCoords(${o}(${i.join(", ")}));
        setOutputAtIndexI32(flatIndex, value);
      }
    `;
  }
  return a;
}
function kne(e, t, n, s) {
  let r = Ine(e, n);
  return e.shape.length <= t.length && (r += Sne(e, t, n, s)), r;
}
function Ine(e, t) {
  let n = e.name, s = e.shape.length, r = Wt(s), a = "get" + n.charAt(0).toUpperCase() + n.slice(1), i = ["d0", "d1", "d2", "d3"].slice(0, s), o = i.map((c) => `${c} : i32`).join(", ");
  if (s < 1)
    return t ? `
        fn ${a}() -> vec4<f32> {
          return vec4<f32>(${n}[0]);
        }
      ` : `
      fn ${a}() ->f32 {
        return f32(${n}[0]);
      }
    `;
  let u = `uniforms.${n.charAt(0).toLowerCase() + n.slice(1)}Shape`, l = `${s}D`;
  return s === 0 && (l = "1D"), t ? `
      fn ${a}(${o}) -> vec4<f32> {
        return vec4<f32>(${n}[getIndexFromCoords${l}(${r}(${i.join(",")}),
          ${u}) / 4]);
      }
      ` : `
    fn ${a}(${o}) -> f32 {
      return f32(${n}[getIndexFromCoords${l}(${r}(${i.join(",")}),
        ${u})]);
    }
   `;
}
function Sne(e, t, n, s) {
  let r = e.name, a = r.charAt(0).toUpperCase() + r.slice(1), i = "get" + a + "ByOutput", o = e.shape.length, u = t.length, l = Wt(u);
  if (w.arraysEqual(e.shape, t) && s)
    return n ? `
        fn ${i}Index(globalIndex : i32) -> vec4<f32> {
          return vec4<f32>(${r}[globalIndex]);
        }

        fn ${i}Coords(coords : ${l}) -> vec4<f32> {
          return vec4<f32>(${r}[${u > 1 ? "getOutputIndexFromCoords(coords)" : "coords"} / 4]);
        }
        ` : `
      fn ${i}Index(globalIndex : i32) -> f32 {
        return f32(${r}[globalIndex]);
      }

      fn ${i}Coords(coords : ${l}) -> f32 {
        return f32(${r}[${u > 1 ? "getOutputIndexFromCoords(coords)" : "coords"}]);
      }
      `;
  let c = C.getBroadcastDims(e.shape, t), p = u - o, d = "";
  if (o === 0)
    return n ? `
      fn ${i}Index(globalIndex : i32) -> vec4<f32> {
        return get${a}();
      }

      fn ${i}Coords(coords : ${l}) -> vec4<f32> {
        return get${a}();
      }
    ` : `
      fn ${i}Index(globalIndex : i32) -> f32{
        return get${a}();
      }

      fn ${i}Coords(coords : ${l}) -> f32{
        return get${a}();
      }
    `;
  u < 2 && c.length >= 1 ? d = "coords = 0;" : d = c.map((g) => `coords[${g + p}] = 0;`).join(`
`);
  let h = "";
  if (u < 2 && o > 0)
    h = "coords";
  else if (u > 1) {
    let g = Wt(o), b = e.shape.map((y, v) => `coords[${v + p}]`).join(", ");
    h = `${g}(${b})`;
  } else
    h = "coords";
  let f = `uniforms.${r.charAt(0).toLowerCase() + r.slice(1)}Shape`, m = `${o}D`;
  return n ? `
      fn ${i}Index(globalIndex : i32) -> vec4<f32> {
        var coords = getCoordsFromIndex(globalIndex);
        ${d}
        return ${r}[getIndexFromCoords${m}(${h}, ${f}) / 4];
      }

      fn ${i}Coords(coordsIn : ${l}) -> vec4<f32> {
        var coords = coordsIn;
        ${d}
        return ${r}[getIndexFromCoords${m}(${h}, ${f}) / 4];
      }
    ` : `
    fn ${i}Index(globalIndex : i32) -> f32 {
      var coords = getCoordsFromIndex(globalIndex);
      ${d}
      return f32(${r}[getIndexFromCoords${m}(${h}, ${f})]);
    }

    fn ${i}Coords(coordsIn : ${l}) -> f32 {
      var coords = coordsIn;
      ${d}
      return f32(${r}[getIndexFromCoords${m}(${h}, ${f})]);
    }
  `;
}
function Cne(e, t) {
  let { x: n, y: s = [], z: r = [] } = t, a = e.length;
  if (n.length === a)
    return [`fn getOutputCoords() -> ${Wt(a)}{
      let globalIndex = getGlobalIndex();
      return getCoordsFromIndex(globalIndex);
    }
    `, a];
  let i = "", o = [n, s, r], u = 0;
  for (let d = 0; d < o.length; d++) {
    let h = o[d];
    if (h.length !== 0)
      if (u += h.length, h.length === 1)
        i += `let d${h[0]} = i32(globalId[${d}]);`;
      else {
        let f = yne(h, "uniforms.outShape");
        i += `var index${d} = i32(globalId[${d}]);`;
        for (let m = 0; m < f.length; m++)
          i += `let d${h[m]} = index${d} / ${f[m]};`, m === f.length - 1 ? i += `let d${h[m + 1]} = index${d} - d${h[m]} * ${f[m]};` : i += `index${d} = index${d} - d${h[m]} * ${f[m]};`;
      }
  }
  let l = [];
  for (let d = 0; d < u; d++)
    l.push(`d${d}`);
  let c = Wt(u), p = `fn getOutputCoords() -> ${c} {
    ${i}
  `;
  return l.length === 0 ? p += `return ${c}(0); }` : p += `return ${c}(${l.join(",")}); }`, [p, u];
}
function Aw(e) {
  let t = e.length;
  if (t <= 1)
    return "fn getCoordsFromIndex(index : i32) -> i32 { return index; }";
  let n = w.computeStrides(e), s = Wt(t), r = [];
  for (let i = 0; i < t; i++)
    r.push(`d${i}`);
  if (n.length === 1)
    return `    fn getCoordsFromIndex(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.outShapeStrides; let d1 = index - d0 * uniforms.outShapeStrides;
      return vec2<i32>(d0, d1);
    }`;
  let a = "var index2 = index;" + n.map((i, o) => {
    let u = `let ${r[o]} = index2 / uniforms.outShapeStrides[${o}]`, l = o === n.length - 1 ? `let ${r[o + 1]} = index2 - ${r[o]} * uniforms.outShapeStrides[${o}]` : `index2 = index2 - ${r[o]} * uniforms.outShapeStrides[${o}]`;
    return `${u}; ${l};`;
  }).join("");
  return `
    fn getCoordsFromIndex(index : i32) -> ${s} {
      ${a}
      return ${s}(${r.join(",")});
    }
  `;
}
var k2 = {};
Ae(k2, { ArrayBufferToTypedArray: () => S2, GPUBytesPerElement: () => Xm, computeDispatch: () => $e, computeWorkGroupSizeForConv2d: () => Tv, computeWorkGroupSizeForMatMul: () => I2, computeWorkPerThreadForConv2d: () => $v, flatDispatchLayout: () => Le, isWebGPUSupported: () => _v, tilesFitEvenlyIntoShape: () => Ks });
var sa = (e) => {
  let t = 1;
  for (let n = 0; n < e.length; n++)
    t *= e[n];
  return t;
};
function Ks(e, t) {
  if (e.length !== t.length)
    throw new Error(`Cannot compute whether rank ${e.length} tiles fit evenly into rank ${t.length} shape - ranks must match.`);
  return t.every((n, s) => n % e[s] === 0);
}
function $e(e, t, n = [1, 1, 1], s = [1, 1, 1]) {
  let [r, a, i] = [Math.ceil(sa(e.x.map((o) => t[o])) / (n[0] * s[0])), e.y ? Math.ceil(sa(e.y.map((o) => t[o])) / (n[1] * s[1])) : 1, e.z ? Math.ceil(sa(e.z.map((o) => t[o])) / (n[2] * s[2])) : 1];
  return [r, a, i];
}
function Tv(e, t) {
  let n = sa(e.x.map((r) => t[r])), s = sa(e.y.map((r) => t[r]));
  return n <= 4 ? [4, 16, 1] : s <= 4 ? [16, 4, 1] : [16, 16, 1];
}
function I2(e, t, n) {
  return e === 1 ? [32, 1, 1] : n === 1 ? [1, 32, 1] : [8, 8, 1];
}
function $v(e, t) {
  let n = sa(e.x.map((r) => t[r])), s = sa(e.y.map((r) => t[r]));
  return n <= 4 ? [1, 2, 1] : s <= 4 ? [2, 1, 1] : [2, 2, 1];
}
function Le(e) {
  return { x: e.map((t, n) => n) };
}
function Xm(e) {
  if (e === "float32" || e === "int32" || e === "bool" || e === "string")
    return 4;
  if (e === "complex64")
    return 8;
  throw new Error(`Unknown dtype ${e}`);
}
function S2(e, t) {
  if (t === "float32")
    return new Float32Array(e);
  if (t === "int32")
    return new Int32Array(e);
  if (t === "bool" || t === "string")
    return Uint8Array.from(new Int32Array(e));
  throw new Error(`Unknown dtype ${t}`);
}
function _v() {
  return (typeof window != "undefined" || typeof WorkerGlobalScope != "undefined") && !!navigator.gpu;
}
function C2(e, t, n, s) {
  return w.assert(s % 4 === 0 && e[0] === 4, () => "tileInner must be divisible by 4. And ColPerThread must be 4"), `
  var<workgroup> mm_Asub : array<array<vec4<f32>, ${s / e[0]}>, ${t}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${n / e[0]}>, ${s}>;

  let RowPerThread = ${e[1]};
  let ColPerThread = ${e[0]};
  let TileInner = ${s};

  ${Fr()}

    let tileRow = ${t === 1 ? "0" : "i32(localId.y) * RowPerThread"};
    let tileCol = i32(localId.x);

    let globalRow = ${t === 1 ? "0" : "i32(globalId.y) * RowPerThread"};
    let globalCol = i32(globalId.x);
    let numTiles = (uniforms.dimInner - 1) / TileInner + 1;

    var acc: array<vec4<f32>, RowPerThread>;
    var ACached : vec4<f32>;
    var BCached : array<vec4<f32>, 4>;

    // Loop over shared dimension.
    var globalColA = tileCol;
    let RowPerThreadB = TileInner / i32(workGroupSizeY);
    let tileRowB = i32(localId.y) * RowPerThreadB;
    for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            mm_Asub[inputRow][inputCol] = mm_readA(globalRow + innerRow, globalColA, globalId);
        }
        globalColA = globalColA + TileInner / ColPerThread;

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < RowPerThreadB; innerRow = innerRow + 1) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(t * TileInner + inputRow, globalCol, globalId);
        }

        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < TileInner / ColPerThread; k = k + 1) {
            BCached[0] = mm_Bsub[k * ColPerThread][tileCol];
            BCached[1] = mm_Bsub[k * ColPerThread + 1][tileCol];
            BCached[2] = mm_Bsub[k * ColPerThread + 2][tileCol];
            BCached[3] = mm_Bsub[k * ColPerThread + 3][tileCol];

            for (var i = 0; i < RowPerThread; i = i + 1) {
                ACached = mm_Asub[tileRow + i][k];
                acc[i] = BCached[0] * ACached.x + acc[i];
                acc[i] = BCached[1] * ACached.y + acc[i];
                acc[i] = BCached[2] * ACached.z + acc[i];
                acc[i] = BCached[3] * ACached.w + acc[i];
            }
        }

        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
        mm_write(globalRow + innerRow,
                 globalCol,
                 acc[innerRow], globalId);
    }
  }`;
}
var Nne = class {
  constructor(e, t, n, s, r, a = null, i = null, o = null) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workGroupSize = [8, 8, 1], this.isVec4 = true, this.outputShape = t, this.dispatchLayout = { x: [2], y: [1], z: [0] }, t[1] === 1 ? this.elementsPerThread = [4, 1, 1] : this.elementsPerThread = [4, 4, 1], this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, this.elementsPerThread);
    let u = a != null, l = o != null;
    u && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), this.tileAOuter = t[1] === 1 ? 1 : this.workGroupSize[1] * this.elementsPerThread[1], this.tileBOuter = this.workGroupSize[0] * this.elementsPerThread[0], this.tileInner = this.tileBOuter, this.aShape = e, this.addBias = u, this.activation = i, this.hasPreluActivationWeights = l, this.batchAEqualOne = s, this.batchBEqualOne = r, [this.fitA, this.fitB] = this.getShapeFit(), this.shaderKey = `matMulPackedVec4_${this.activation}_${this.fitA}_${this.fitB}_${this.elementsPerThread}_${this.batchAEqualOne}_${this.batchBEqualOne}`;
  }
  getShapeFit() {
    let e = this.aShape[2], t = this.outputShape[2], n = [this.outputShape[0], e, t], s = [this.tileAOuter, this.tileInner], r = [this.tileInner, this.tileBOuter];
    return [Ks(s, this.aShape.slice(1)), Ks(r, n.slice(1))];
  }
  getUserCode() {
    let e = this.fitA ? "return A[batch * batchASize + row * uniforms.dimInner / 4 + col]" : `if (coordsInBounds2D(vec2<i32>(row, col * 4), vec2<i32>(uniforms.dimAOuter, uniforms.dimInner))) {
            return A[batch * batchASize + row * uniforms.dimInner / 4 + col];
        }
        return vec4<f32>(0.0)`, t = this.fitB ? "return B[batch * batchBSize + row * uniforms.dimBOuter / 4 + col]" : `if(coordsInBounds2D(vec2<i32>(row, col * 4), vec2<i32>(uniforms.dimInner, uniforms.dimBOuter))) {
             return B[batch * batchBSize + row * uniforms.dimBOuter / 4 + col];
        }
        return vec4<f32>(0.0)`, n = "", s = "";
    if (this.activation) {
      let i = Js(this.activation, this.isVec4);
      this.hasPreluActivationWeights ? n = `fn activation(a : vec4<f32>, outCoord : vec3<i32>) -> vec4<f32> {
                  let b = getPreluActivationWeightsByOutputCoords(outCoord);
                  ${i}
                }` : n = `
            fn activation(a : vec4<f32>, outCoord : vec3<i32>) -> vec4<f32> {
              ${i}
            }`, s = "value = activation(value, outCoord);";
    }
    let r = this.addBias ? "value = value + getBiasByOutputCoords(outCoord);" : "";
    return `
      ${n}
      fn mm_readA(row : i32, col : i32,  globalId : vec3<u32>) -> vec4<f32> {
        ${this.batchAEqualOne ? `
          let batchASize = 0;
          let batch = 0;
        ` : `
          let batchASize = uniforms.aShape[1] * uniforms.aShape[2] / 4;
          let batch = i32(globalId.z);
        `}

        ${e};
      }

      fn mm_readB(row : i32, col : i32,  globalId : vec3<u32>) -> vec4<f32> {
        ${this.batchBEqualOne ? `
          let batchBSize = 0;
          let batch = 0;
          ` : `
          let batchBSize = uniforms.bShape[1] * uniforms.bShape[2] / 4;
          let batch = i32(globalId.z);
       `}
        ${t};
      }

      fn mm_write(row : i32, col : i32, valueIn : vec4<f32>, globalId : vec3<u32>) {
        if (row < uniforms.aShape[1] && col * 4 < uniforms.bShape[2])
        {
          var value = valueIn;
          let batch = i32(globalId.z);
          let outCoord = vec3<i32>(batch, row, col * 4);
          ${r}
          ${s}
          setOutputAtCoords(outCoord[0], outCoord[1], outCoord[2], value);
        }
      }
      ${C2(this.elementsPerThread, this.tileAOuter, this.tileBOuter, this.tileInner)}
    `;
  }
};
function Av(e, t) {
  let n = t[1] * e[1], s = t[0] * e[0], r = n > s ? n : s;
  return `
    var<workgroup> mm_Asub : array<array<f32, ${r}>, ${n}>;
    var<workgroup> mm_Bsub : array<array<f32, ${s}>, ${r}>;
    ${Fr()}
      let tileRow = i32(localId.y) * ${e[1]};
      let tileCol = i32(localId.x) * ${e[0]};

      let globalRow = i32(globalId.y) * ${e[1]};
      let globalCol = i32(globalId.x) * ${e[0]};

      let numTiles = (uniforms.dimInner - 1) / ${r} + 1;

      var acc : array<array<f32, ${e[0]}>, ${e[1]}>;
      var ACached : f32;
      var BCached : array<f32, ${e[0]}>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < ${e[1]}; innerRow = innerRow + 1) {
        for (var innerCol = 0; innerCol < ${e[0]}; innerCol = innerCol + 1) {
          acc[innerRow][innerCol] = 0.0;
        }
      }

      let ColPerThreadA = ${r} / ${t[0]};
      let tileColA = i32(localId.x) * ColPerThreadA;
      let RowPerThreadB = ${r} / ${t[1]};
      let tileRowB = i32(localId.y) * RowPerThreadB;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${e[1]}; innerRow = innerRow + 1) {
          for (var innerCol = 0; innerCol < ColPerThreadA; innerCol = innerCol + 1) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileColA + innerCol;

            mm_Asub[inputRow][inputCol] = mm_readA(
                globalRow + innerRow,
                t * ${r} + inputCol, globalId);
          }
        }
        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < RowPerThreadB; innerRow = innerRow + 1) {
          for (var innerCol = 0; innerCol < ${e[0]}; innerCol = innerCol + 1) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol + innerCol;

            mm_Bsub[inputRow][inputCol] = mm_readB(
              t * ${r} + inputRow,
              globalCol + innerCol, globalId);
          }
        }

        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < ${r}; k = k + 1) {
          for (var inner = 0; inner < ${e[0]}; inner = inner + 1) {
            BCached[inner] = mm_Bsub[k][tileCol + inner];
          }

          for (var innerRow = 0; innerRow < ${e[1]}; innerRow = innerRow + 1) {
            ACached = mm_Asub[tileRow + innerRow][k];
            for (var innerCol = 0; innerCol < ${e[0]}; innerCol = innerCol + 1) {
              acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
            }
          }
        }

        workgroupBarrier();
      }

      for (var innerRow = 0; innerRow < ${e[1]}; innerRow = innerRow + 1) {
        for (var innerCol = 0; innerCol < ${e[0]}; innerCol = innerCol + 1) {

          if ((globalCol + innerCol) < uniforms.dimBOuter &&
              (globalRow + innerRow) < uniforms.dimAOuter) {
            mm_write(globalRow + innerRow,
                     globalCol + innerCol,
                     acc[innerRow][innerCol], globalId);
          }
        }
      }
    }
  `;
}
function Tne(e) {
  return `
    let TileSize = ${e[0] * 4};
    var<workgroup> mm_Asub : array<vec4<f32>, ${e[0]}>;

    ${Fr()}
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / TileSize + 1;

      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        let colA = t * TileSize + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(mm_readA(globalRow, colA, globalId),
                                mm_readA(globalRow, colA + 1, globalId),
                                mm_readA(globalRow, colA + 2, globalId),
                                mm_readA(globalRow, colA + 3, globalId));
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < TileSize / 4; k = k + 1) {
          let rowB = t * TileSize + k * 4;
          let BCached = vec4<f32>(mm_readB(rowB, globalCol, globalId),
                              mm_readB(rowB + 1, globalCol, globalId),
                              mm_readB(rowB + 2, globalCol, globalId),
                              mm_readB(rowB + 3, globalCol, globalId));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      if (globalRow < uniforms.dimAOuter && globalCol < uniforms.dimBOuter) {
        mm_write(globalRow, globalCol, acc, globalId);
      }
    }
  `;
}
var N2 = class {
  constructor(e, t, n, s, r, a = false, i = false, o = null, u = null, l = null) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workGroupSize = [16, 16, 1], this.outputShape = t, this.dispatchLayout = { x: [2], y: [1], z: [0] };
    let c = a ? e[1] : e[2];
    this.workGroupSize = I2(t[1], c, t[2]), (t[1] === 1 || t[2] === 1) && (n = 1), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [n, n, 1]), w.arraysEqual(this.dispatch, [1, 1, 1]) && (n = 1, this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [n, n, 1]));
    let p = o != null, d = l != null;
    p && this.variableNames.push("bias"), d && this.variableNames.push("preluActivationWeights"), this.workPerThread = n, this.aShape = e, this.transposeA = a, this.transposeB = i, this.addBias = p, this.activation = u, this.hasPreluActivationWeights = d, this.batchAEqualOne = s, this.batchBEqualOne = r;
    let h = this.outputShape[2], f = this.transposeB ? [this.outputShape[0], h, c] : [this.outputShape[0], c, h];
    [this.fitA, this.fitB] = this.getShapeFit(f), this.shaderKey = `matMulPacked_${this.workPerThread}_${a}_${i}_${this.activation}_${this.fitA}_${this.fitB}_${this.outputShape[1] > 1}_${this.batchAEqualOne}_${this.batchBEqualOne}`;
  }
  getShapeFit(e) {
    let t = this.workGroupSize[1] * this.workPerThread, n = this.workGroupSize[0] * this.workPerThread, s = t > n ? t : n;
    this.outputShape[1] === 1 && (s *= 4), w.assert(s % this.workGroupSize[0] === 0 && s % this.workGroupSize[1] === 0, () => "tileInner must be multiple of workgroupsize.x and workgroupsize.y");
    let r = [t, s], a = [s, n];
    return [Ks(r, this.aShape.slice(1)), Ks(a, e.slice(1))];
  }
  getUserCode() {
    let e;
    this.transposeA === false ? e = this.fitA ? "return A[batch * batchASize + row * uniforms.dimInner + col];" : `if(coordsInBounds2D(vec2<i32>(row, col), vec2<i32>(uniforms.dimAOuter, uniforms.dimInner))) {
             return A[batch * batchASize + row * uniforms.dimInner + col];
           }
           return 0.0;` : e = this.fitA ? "return A[batch * batchASize + col * uniforms.dimAOuter + row];" : `if(coordsInBounds2D(vec2<i32>(row, col), vec2<i32>(uniforms.dimAOuter, uniforms.dimInner))) {
             return A[batch* batchASize + col * uniforms.dimAOuter + row];
           }
           return 0.0;`;
    let t;
    this.transposeB === false ? t = this.fitB ? "return B[batch * batchBSize + row * uniforms.dimBOuter + col];" : `if(coordsInBounds2D(vec2<i32>(row, col), vec2<i32>(uniforms.dimInner, uniforms.dimBOuter))) {
             return B[batch * batchBSize + row * uniforms.dimBOuter + col];
           }
           return 0.0;` : t = this.fitB ? "return B[batch * batchBSize + col * uniforms.dimInner + row];" : `if(coordsInBounds2D(vec2<i32>(row, col), vec2<i32>(uniforms.dimInner, uniforms.dimBOuter))) {
             return B[batch * batchBSize + col * uniforms.dimInner + row];
           }
           return 0.0;`;
    let n = "", s = "";
    if (this.activation) {
      let i = Js(this.activation, false);
      this.hasPreluActivationWeights ? n = `fn activation(a : f32, outCoord : vec3<i32>) -> f32 {
               let b = getPreluActivationWeightsByOutputCoords(outCoord);
               ${i}
            }` : n = `
              fn activation(a : f32, outCoord : vec3<i32>) -> f32 {
                ${i}
              }
            `, s = "value = activation(value, outCoord);";
    }
    let r = this.addBias ? "value = value + getBiasByOutputCoords(outCoord);" : "";
    return `
      ${n}

      fn mm_readA(row : i32, col : i32,  globalId : vec3<u32>) -> f32 {
        ${this.batchAEqualOne ? `
        let batch = 0;
        let batchASize = 0;
        ` : `
        let batch = i32(globalId.z);
        let batchASize = uniforms.aShape[1] * uniforms.aShape[2];
        `}
        ${e}
      }

      fn mm_readB(row : i32, col : i32,  globalId : vec3<u32>) -> f32 {
        ${this.batchBEqualOne ? `
        let batch = 0;
        let batchBSize = 0;
        ` : `
        let batch = i32(globalId.z);
        let batchBSize = uniforms.bShape[1] * uniforms.bShape[2];
        `}
        ${t}
      }

      fn mm_write(row : i32, col : i32, valueIn : f32, globalId : vec3<u32>) {
        var value = valueIn;
        let batch = i32(globalId.z);
        let outCoord = vec3<i32>(batch, row, col);
        ${r}
        ${s}
        setOutputAtCoords(batch, row, col, value);
      }
      ${this.outputShape[1] > 1 ? Av([this.workPerThread, this.workPerThread, 1], this.workGroupSize) : Tne(this.workGroupSize)}
    `;
  }
};
function $ne() {
  return `
    var<workgroup> sumValues : array<f32, workGroupSizeX>;
    ${Fr()}
      let coords = getOutputCoords();
      let batch = coords[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + i32(workGroupSizeX)) {
        let dataA = mm_readA(batch, row, k);
        let dataB = mm_readB(batch, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = workGroupSizeX / 2u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `;
}
var _ne = class {
  constructor(e, t, n, s = false, r = false, a = null, i = null, o = null) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workGroupSize = [256, 1, 1], this.outputShape = e, this.dispatchLayout = { x: [], y: [1, 2], z: [0] }, this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize);
    let u = a != null, l = o != null;
    u && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), this.transposeA = s, this.transposeB = r, this.addBias = u, this.activation = i, this.hasPreluActivationWeights = l, this.batchAEqualOne = t, this.batchBEqualOne = n, this.shaderKey = `matMulReduce_${this.activation}_${s}_${r}_${this.batchAEqualOne}_${this.batchBEqualOne}`;
  }
  getUserCode() {
    let e;
    this.transposeA === false ? e = "return A[batch * batchASize + row * uniforms.dimInner + col];" : e = "return A[batch * batchASize + col * uniforms.dimAOuter + row];";
    let t;
    this.transposeB === false ? t = "return B[batch * batchBSize + row * uniforms.dimBOuter + col];" : t = "return B[batch * batchBSize + col * uniforms.dimInner + row];";
    let n = "", s = "";
    if (this.activation) {
      let i = Js(this.activation, false);
      this.hasPreluActivationWeights ? n = `fn activation(a : f32, outCoord : vec3<i32>) -> f32 {
               let b = getPreluActivationWeightsByOutputCoords(outCoord);
               ${i}
            }` : n = `
              fn activation(a : f32, outCoord : vec3<i32>) -> f32 {
                ${i}
              }
            `, s = "value = activation(value, outCoord);";
    }
    let r = this.addBias ? "value = value + getBiasByOutputCoords(outCoord);" : "";
    return `
      ${n}

      fn mm_readA(batchIn: i32, row : i32, col : i32) -> f32 {
        ${this.batchAEqualOne ? `
          let batchASize = 0;
          let batch = 0;
          ` : `
          let batchASize = uniforms.aShape[1] * uniforms.aShape[2];
          let batch = batchIn;
          `}
        ${e}
      }

      fn mm_readB(batchIn: i32, row : i32, col : i32) -> f32 {
        ${this.batchBEqualOne ? `
          let batch = 0;
          let batchBSize = 0;
          ` : `
          let batch = batchIn;
          let batchBSize = uniforms.bShape[1] * uniforms.bShape[2];
          `}
        ${t}
      }

      fn mm_write(batch: i32, row : i32, col : i32, valueIn : f32) {
        var value = valueIn;
        let outCoord = vec3<i32>(batch, row, col);
        ${r}
        ${s}
        setOutputAtCoords(batch, row, col, value);
      }
      ${$ne()}
    `;
  }
};
function Ane(e) {
  let t = e[1] / 2, n = e[0], s = t > n ? t : n;
  return `
  var<workgroup> mm_Asub1 : array<array<f32, ${s}>, ${t}>;
  var<workgroup> mm_Bsub1 : array<array<f32, ${n}>, ${s}>;
  var<workgroup> mm_Asub2 : array<array<f32, ${s}>, ${t}>;
  var<workgroup> mm_Bsub2 : array<array<f32, ${n}>, ${s}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Introduces two shared memory buffers, some logical threads could handle
  // arithmetic operations and others handle IO operations between barrier api,
  // makes ALUs and load/store units work simultaneously, could improves
  // the performance.
  ${Fr()}
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${s} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = tileRow;
    for (var t = 0; t < numTiles; t = t + 1) {
      if (t == 0) {
        if (tileRow < ${t}) {
          // Load one tile of A and B into local memory.
          // globalRow is always greater than or equal tileRow.
          mm_Asub1[tileRow][tileCol] =
              mm_readA((globalRow - tileRow) / 2 + tileRow, globalColA, globalId);
          globalColA = globalColA + ${s};
          mm_Bsub1[tileRow][tileCol] = mm_readB(globalRowB, globalCol, globalId);
          globalRowB = globalRowB + ${s};
        }
      } else {
        if (tileRow < ${t}) {
          // Load one tile of A and B into local memory.
          // globalRow is always greater than or equal tileRow.
          mm_Asub1[tileRow][tileCol] =
              mm_readA((globalRow - tileRow) / 2 + tileRow, globalColA, globalId);
          globalColA = globalColA + ${s};
          mm_Bsub1[tileRow][tileCol] = mm_readB(globalRowB, globalCol, globalId);
          globalRowB = globalRowB + ${s};
        } else {
          // Compute acc values for a single thread.
          for (var k = 0; k < ${s}; k = k + 1) {
            let subRow = tileRow - ${t};
            if (subRow < 0) {
              continue;
            }
            acc = acc + mm_Asub2[subRow][k] * mm_Bsub2[k][tileCol];
          }
        }
      }
      workgroupBarrier();
      if (t != 0) {
        t = t + 1;
      }

      if (t < numTiles) {
        if (tileRow < ${t}) {
          // Load one tile of A and B into local memory.
          // globalRow is always greater than or equal tileRow.
          mm_Asub2[tileRow][tileCol] =
              mm_readA((globalRow - tileRow) / 2 + tileRow, globalColA, globalId);
          globalColA = globalColA + ${s};
          mm_Bsub2[tileRow][tileCol] = mm_readB(globalRowB, globalCol, globalId);
          globalRowB = globalRowB + ${s};
        } else {
          // Compute acc values for a single thread.
          for (var k = 0; k < ${s}; k = k + 1) {
            let subRow = tileRow - ${t};
            if (subRow < 0) {
              continue;
            }
            acc = acc + mm_Asub1[subRow][k] * mm_Bsub1[k][tileCol];
          }
        }
      }
      workgroupBarrier();
    }
    let writeCol = (globalRow - tileRow) / 2 + tileRow - ${t};
    if (tileRow >= ${t} && writeCol >= 0) {
      mm_write(writeCol, globalCol, acc, globalId);
    }
  }
  `;
}
var Ene = class {
  constructor(e, t, n, s = null, r = null, a = null) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workGroupSize = [8, 16, 1], w.assert(e[1] <= 16 || t[2] <= 16, () => "This program can be only used when A width or B Height are small"), this.outputShape = n, this.dispatchLayout = { x: [2], y: [1], z: [0] }, this.dispatch = [Math.ceil(n[2] / this.workGroupSize[0]), Math.ceil(n[1] * 2 / this.workGroupSize[1]), n[0]];
    let i = s != null;
    i && this.variableNames.push("bias");
    let o = a != null;
    o && this.variableNames.push("preluActivationWeights"), this.addBias = i, this.activation = r, this.hasPreluActivationWeights = o, this.batchAEqualOne = e[0] === 0, this.batchBEqualOne = t[0] === 0, this.shaderKey = `matMulSmallOutputSize_${this.activation}_${this.batchAEqualOne}_${this.batchBEqualOne}`;
  }
  getUserCode() {
    let e = `if (coordsInBounds2D(vec2<i32>(row, col), vec2<i32>(uniforms.dimAOuter, uniforms.dimInner))) {
          return A[batch * batchASize + row * uniforms.dimInner + col];
        }
        return 0.0;`, t = `if (coordsInBounds2D(vec2<i32>(row, col), vec2<i32>(uniforms.dimInner, uniforms.dimBOuter))) {
           return B[batch * batchBSize + row * uniforms.dimBOuter + col];
         }
         return 0.0;`, n = "", s = "";
    if (this.activation) {
      let i = Js(this.activation, false);
      this.hasPreluActivationWeights ? n = `fn activation(a : f32, outCoord : vec3<i32>) -> f32 {
            let b = getPreluActivationWeightsByOutputCoords(outCoord);
            ${i}
            }` : n = `fn activation(a : f32, outCoord : vec3<i32>) -> f32 {
            ${i}
        }`, s = "value = activation(value, outCoord);";
    }
    let r = this.addBias ? "value = value + getBiasByOutputCoords(outCoord);" : "";
    return `
      ${n}

      fn mm_readA(row : i32, col : i32,  globalId : vec3<u32>) -> f32 {
        ${this.batchAEqualOne ? `
          let batch = 0;
          let batchASize = 0;
          ` : `
          let batchASize = uniforms.aShape[1] * uniforms.aShape[2];
          let batch = i32(globalId.z);
          `}
        ${e}
      }
      fn mm_readB(row : i32, col : i32,  globalId : vec3<u32>) -> f32 {
        ${this.batchBEqualOne ? `
          let batch = 0;
          let batchBSize = 0;
          ` : `
          let batch = i32(globalId.z);
          let batchBSize = uniforms.bShape[1] * uniforms.bShape[2];
          `}
        ${t}
      }
      fn mm_write(row : i32, col : i32, valueIn : f32, globalId : vec3<u32>) {
        if (coordsInBounds2D(vec2<i32>(row, col), vec2<i32>(uniforms.dimAOuter, uniforms.dimBOuter))) {
          let batch = i32(globalId.z);
          let outCoord = vec3<i32>(batch, row, col);
          var value = valueIn;
          ${r}
          ${s}
          setOutputAtCoords(batch, row, col, value);
        }
      }
      ${Ane(this.workGroupSize)}
    `;
  }
};
function Me(e) {
  let { inputs: t, attrs: n } = e, { x: s } = t, { shape: r } = n, a = w.sizeFromShape(s.shape), i = w.inferFromImplicitShape(r, a), o = w.sizeFromShape(i);
  return w.assert(a === o, () => `The new shape (${i}) has ${o} elements and the old shape (${s.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`), e.backend.incRef(s.dataId), { dataId: s.dataId, shape: i, dtype: s.dtype };
}
var Rne = { kernelName: Ro, backendName: "webgpu", kernelFunc: Me };
function Ev({ a: e, b: t, transposeA: n, transposeB: s, backend: r, bias: a = null, preluActivationWeights: i = null, leakyreluAlpha: o = 0, activation: u = null }) {
  let l = e.shape.length, c = t.shape.length, p = n ? e.shape[l - 2] : e.shape[l - 1], d = s ? t.shape[c - 1] : t.shape[c - 2], h = n ? e.shape[l - 1] : e.shape[l - 2], f = s ? t.shape[c - 2] : t.shape[c - 1], m = e.shape.slice(0, -2), g = t.shape.slice(0, -2), b = w.sizeFromShape(m), y = w.sizeFromShape(g), x = Ko.assertAndGetBroadcastShape(e.shape.slice(0, -2), t.shape.slice(0, -2)).concat([h, f]);
  w.assert(p === d, () => `Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`);
  let k = n ? [b, p, h] : [b, h, p], S = s ? [y, f, d] : [y, d, f], $ = Me({ inputs: { x: e }, backend: r, attrs: { shape: k } }), E = Me({ inputs: { x: t }, backend: r, attrs: { shape: S } }), A = [$, E], P = Math.max(b, y), R = b === 1, F = y === 1, T = p % 4 === 0 && f % 4 === 0 && !n && !s, z;
  h * f <= 32 ? z = new _ne([P, h, f], R, F, n, s, a, u, i) : !n && !s && (h <= 16 && (f <= 512 || d >= 2 * f) || f <= 16 && (h <= 512 || p >= 2 * h)) ? z = new Ene(k, S, [P, h, f], a, u, i) : T ? z = new Nne(k, [P, h, f], X().get("WEBGPU_MATMUL_WORK_PER_THREAD"), R, F, a, u, i) : z = new N2(k, [P, h, f], X().get("WEBGPU_MATMUL_WORK_PER_THREAD"), R, F, n, s, a, u, i);
  let W = [$, E];
  a && W.push(a), i && W.push(i);
  let q = [{ type: "int32", data: [h] }, { type: "int32", data: [f] }, { type: "int32", data: [p] }];
  u === "leakyrelu" && (q.push({ type: "float32", data: [o] }), z.uniforms += " alpha : f32,");
  let K = r.runWebGPUProgram(z, W, e.dtype, q), Y = Me({ inputs: { x: K }, backend: r, attrs: { shape: x } });
  A.push(K);
  for (let Z of A)
    r.disposeData(Z.dataId);
  return Y;
}
function Dne(e) {
  let { inputs: t, backend: n, attrs: s } = e, { a: r, b: a, bias: i, preluActivationWeights: o } = t, { transposeA: u, transposeB: l, activation: c, leakyreluAlpha: p } = s;
  return Ev({ a: r, b: a, transposeA: u, transposeB: l, backend: n, bias: i, preluActivationWeights: o, leakyreluAlpha: p, activation: c });
}
var Fne = { kernelName: aa, backendName: "webgpu", kernelFunc: Dne };
var Ew = class {
  constructor(e, t, n) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.workGroupSize = [128, 1, 1], this.size = true, this.outputShape = C.assertAndGetBroadcastShape(t, n), this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = `binaryOpComplex_${e}`, this.op = e;
  }
  getUserCode() {
    return `
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${tc(this.op, false)}
      }

      ${Ue()}
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `;
  }
};
var One = class {
  constructor(e, t, n, s) {
    this.variableNames = ["A", "B"], this.size = true;
    let r = 256;
    this.workGroupSize = [r, 1, 1], this.outputShape = C.assertAndGetBroadcastShape(t, n), this.dispatchLayout = Le(this.outputShape), this.lastDimensionSize = s ? n[0] : t[0], this.lastDimensionSize < 256 ? this.workPerThread = 1 : this.lastDimensionSize < 512 ? this.workPerThread = 2 : this.workPerThread = 4, this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [this.workPerThread, 1, 1]), this.useSharedMemoryWithB = s, this.op = e, this.shaderKey = `binaryShared_${e}_${this.lastDimensionSize}_${this.useSharedMemoryWithB}`;
  }
  getUserCode() {
    let e = this.lastDimensionSize > 1 ? `coords[${this.outputShape.length - 1}]` : "0", t = this.useSharedMemoryWithB ? `let a = getAByOutputCoords(coords);
         let b = sharedBuf[${e}];` : `let a = sharedBuf[${e}];
         let b = getBByOutputCoords(coords);`;
    return `
        fn binaryOperation(a : f32, b : f32) -> f32 {
          ${tc(this.op, false)}
        }
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${Ue()}

          // Fill in the shared memory buffer. Here we need a loop to make sure
          // that all data in A|B are uploaded when |sharedMemorySize| is larger
          // than work group size.
          for(var localIndex = i32(localId.x); localIndex < ${this.lastDimensionSize}; localIndex = localIndex + ${this.workGroupSize[0]}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB ? "B" : "A"}[localIndex]);
          }
          workgroupBarrier();

          for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
            let flatIndex = index * ${this.workPerThread} + i;
            if(flatIndex < uniforms.size) {
              let coords = getCoordsFromIndex(flatIndex);

              ${t}
              setOutputAtIndex(flatIndex, binaryOperation(a, b));
            }
          }
        }
        `;
  }
};
var Pne = class {
  constructor(e, t, n) {
    this.variableNames = ["A", "B"], this.workPerThread = 4, this.isVec4 = true, this.size = true;
    let s = 128;
    this.workGroupSize = [s, 1, 1], this.outputShape = C.assertAndGetBroadcastShape(t, n), this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [this.workPerThread, 1, 1]), this.op = e, this.shaderKey = `binaryVec4_${e}`;
  }
  getUserCode() {
    return `
      fn binaryOperation(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {
        ${tc(this.op, this.isVec4)}
      }
      ${Ue()}
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          let b = getBByOutputIndex(index);
          setOutputAtIndex(index, binaryOperation(a, b));
        }
      }
    `;
  }
};
var T2 = class {
  constructor(e, t, n) {
    this.variableNames = ["A", "B"], this.size = true;
    let s = 128;
    this.workGroupSize = [s, 1, 1], this.outputShape = C.assertAndGetBroadcastShape(t, n), this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = `binary_${e}`, this.op = e;
  }
  getUserCode() {
    return `
      fn binaryOperation(a : f32, b : f32) -> f32 {
        ${tc(this.op, false)}
      }
      ${Ue()}
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          let b = getBByOutputIndex(index);
          setOutputAtIndex(index, binaryOperation(a, b));
        }
      }
      `;
  }
};
function Rw(e, t, n) {
  if (w.arraysEqual(t, n) && w.sizeFromShape(t) % 4 === 0)
    return new Pne(e, t, n);
  let r = t.length === 1 && n.length > 1 && t[0] < 1024, a = n.length === 1 && t.length > 1 && n[0] < 1024;
  return r || a ? new One(e, t, n, a) : new T2(e, t, n);
}
function Wn(e) {
  let { inputs: t } = e, { x: n } = t;
  return e.backend.incRef(n.dataId), { dataId: n.dataId, shape: n.shape, dtype: n.dtype };
}
var zne = { kernelName: Wa, backendName: "webgpu", kernelFunc: Wn };
function cu(e) {
  let { inputs: t, backend: n } = e, { real: s, imag: r } = t, a = n.makeTensorInfo(s.shape, "complex64"), i = n.tensorMap.get(a.dataId), o = Wn({ inputs: { x: s }, backend: n }), u = Wn({ inputs: { x: r }, backend: n });
  return i.complexTensorInfos = { real: o, imag: u }, a;
}
var Mne = { kernelName: Xd, backendName: "webgpu", kernelFunc: cu };
var nc = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.size = true;
    let n = 128;
    this.workGroupSize = [n, 1, 1], this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.op = t, this.shaderKey = `unary_${t}`;
  }
  getUserCode() {
    return `
      fn unaryOperation(a : f32) -> f32 {
        ${qr(this.op, false)}
      }
      ${Ue()}
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `;
  }
};
function jt({ opType: e, cpuKernelImpl: t, dtype: n }) {
  return ({ inputs: s, backend: r }) => {
    let { x: a } = s, i = r, o = n || a.dtype;
    if (i.shouldExecuteOnCPU([a]) && t != null) {
      let l = i.tensorMap.get(a.dataId), c = t(l.values, o);
      return i.makeTensorInfo(a.shape, o, c);
    }
    let u = new nc(a.shape, e);
    return i.runWebGPUProgram(u, [a], o);
  };
}
function mn({ opSnippet: e, cpuKernelImpl: t, supportsComplex: n = false, dtype: s }) {
  return ({ inputs: r, backend: a }) => {
    let { a: i, b: o } = r, u = a;
    if (n && i.dtype === "complex64") {
      let p = u.tensorMap.get(i.dataId), d = u.tensorMap.get(o.dataId), h, f;
      if (e !== 0)
        [h, f] = [[p.complexTensorInfos.real, d.complexTensorInfos.real], [p.complexTensorInfos.imag, d.complexTensorInfos.imag]].map((g) => {
          let [b, y] = g, v = { dataId: b.dataId, dtype: b.dtype, shape: i.shape }, x = { dataId: y.dataId, dtype: y.dtype, shape: o.shape }, k = Rw(e, i.shape, o.shape);
          return u.runWebGPUProgram(k, [v, x], ln(b.dtype, y.dtype));
        });
      else {
        let g = new Ew(17, i.shape, o.shape), b = new Ew(18, i.shape, o.shape), y = [{ dataId: p.complexTensorInfos.real.dataId, dtype: p.complexTensorInfos.real.dtype, shape: i.shape }, { dataId: p.complexTensorInfos.imag.dataId, dtype: p.complexTensorInfos.imag.dtype, shape: i.shape }, { dataId: d.complexTensorInfos.real.dataId, dtype: d.complexTensorInfos.real.dtype, shape: o.shape }, { dataId: d.complexTensorInfos.imag.dataId, dtype: d.complexTensorInfos.imag.dtype, shape: o.shape }];
        h = u.runWebGPUProgram(g, y, "float32"), f = u.runWebGPUProgram(b, y, "float32");
      }
      let m = cu({ inputs: { real: h, imag: f }, backend: u });
      return u.disposeData(h.dataId), u.disposeData(f.dataId), m;
    }
    let l = s || ln(i.dtype, o.dtype);
    if ((i.dtype === "string" || o.dtype === "string" || u.shouldExecuteOnCPU([i, o])) && t != null) {
      let p = u.tensorMap.get(i.dataId).values, d = u.tensorMap.get(o.dataId).values, h = i.dtype === "string" ? C.fromUint8ToStringArray(p) : p, f = i.dtype === "string" ? C.fromUint8ToStringArray(d) : d, [m, g] = t(i.shape, o.shape, h, f, l);
      return u.makeTensorInfo(g, l, m);
    }
    let c = Rw(e, i.shape, o.shape);
    return u.runWebGPUProgram(c, [i, o], l);
  };
}
var { addImpl: Lne, ceilImpl: Bne, concatImpl: Vne, equalImpl: Wne, expImpl: Une, expm1Impl: Gne, floorImpl: Hne, gatherNdImpl: qne, gatherV2Impl: jne, greaterEqualImpl: Kne, greaterImpl: Xne, lessEqualImpl: Yne, lessImpl: Qne, logImpl: Zne, maxImpl: Jne, maximumImpl: ese, minimumImpl: tse, multiplyImpl: nse, negImpl: sse, notEqualImpl: rse, prodImpl: ase, rangeImpl: ise, rsqrtImpl: ose, simpleAbsImpl: use, sliceImpl: lse, stridedSliceImpl: cse, stringNGramsImpl: dse, subImpl: pse, tileImpl: hse, topKImpl: fse, transposeImpl: mse, uniqueImpl: Zpe } = ev;
var gse = jt({ opType: 0, cpuKernelImpl: use });
var bse = { kernelName: uo, backendName: "webgpu", kernelFunc: gse };
var yse = mn({ opSnippet: 1, cpuKernelImpl: Lne, supportsComplex: true });
var vse = { kernelName: Sr, backendName: "webgpu", kernelFunc: yse };
var xse = class {
  constructor(e) {
    this.workPerThread = 4, this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = e[0], this.variableNames = e.map((t, n) => `T${n}`), this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [this.workPerThread, 1, 1]), this.shaderKey = "addN";
  }
  getUserCode() {
    let e = [];
    this.variableNames.forEach((s) => {
      e.push(`let v${s} = get${s}ByOutputCoords(coords);`);
    });
    let t = this.variableNames.map((s) => `v${s}`).join(" + ");
    return `
      ${Ue()}
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${e.join(`
        `)}
            setOutputAtIndex(flatIndex, ${t});
          }
        }
      }
    `;
  }
};
function wse(e) {
  let { inputs: t, backend: n } = e, s = t;
  if (s.length === 1)
    return Wn({ inputs: { x: s[0] }, backend: n });
  let r = s.map((o) => o.dtype).reduce((o, u) => ln(o, u)), a = s.map((o) => o.shape), i = new xse(a);
  return n.runWebGPUProgram(i, s, r);
}
var kse = { kernelName: Ia, backendName: "webgpu", kernelFunc: wse };
var $2 = class {
  constructor(e, t, n) {
    this.workGroupSize = [64, 1, 1], this.variableNames = ["x"], this.uniforms = "axis : i32, infinityValue : f32,", this.size = true;
    let s = [t];
    C.assertAxesAreInnerMostDims("arg" + n.charAt(0).toUpperCase() + n.slice(1), s, e.length), this.op = n === "min" ? "<" : ">";
    let [r] = C.computeOutAndReduceShapes(e, s);
    this.outputShape = r.length === 0 ? [1] : r, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, [1, 1, 1]), this.inputShape = e, this.shaderKey = `argMinMax${this.op}`;
  }
  getUserCode() {
    let e = `
      var<workgroup> xBestIndices : array<i32, ${this.workGroupSize[0]}>;
      var<workgroup> xBestValues : array<f32, ${this.workGroupSize[0]}>;
    `, t = (r, a) => this.outputShape.length === 1 ? r : `${r}[${a}]`, n = (r) => this.inputShape.length === 1 ? "uniforms.xShape" : `uniforms.xShape[${r}]`;
    return `
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${e}

      // In order to get a flattened index into the input tensor, we need to
      // add back the index along the reduced dimension to |outputCoords|.
      // This function outputs the offset to the first value along
      // |axis| and the stride to get the next value of the input along |axis|.
      fn getInputCoordInfo(outputIndex : i32) -> vec2<i32>{
        let outputCoords = getCoordsFromIndex(outputIndex);
        var i = ${this.outputShape.length - 1};

        var stride = 1;
        var inputStride = 1;
        var offset = 0;

        for (var r = 1; r <= ${this.inputShape.length}; r = r + 1) {
          let length = ${n(`${this.inputShape.length} - r`)};
          if (${this.inputShape.length} - r == uniforms.axis) {
            inputStride = stride;
          } else {
            offset = offset + ${t("outputCoords", "i")} * stride;
            i = i - 1;
          }
          stride = stride * length;
        }

        return vec2<i32>(offset, inputStride);
      }

      fn getInputIndex(coordInfo : vec2<i32>, index : i32) -> i32{
        return coordInfo[0] + coordInfo[1] * index;
      }

      ${Ue()}
        let outputIndex = index / i32(workGroupSizeX);
        let coordInfo = getInputCoordInfo(outputIndex);
        let Length = ${n("uniforms.axis")};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;

        for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
            k = k + i32(workGroupSizeX)) {
          let candidate = f32(x[getInputIndex(coordInfo, k)]);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(Length), workGroupSizeX);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    `;
  }
};
var Ise = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.workGroupSize = [16, 16, 1];
    let n = new Array(e.length);
    for (let s = 0; s < n.length; s++)
      n[s] = e[t[s]];
    this.outputShape = n, this.dispatchLayout = { x: [0], y: [1] }, this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [1, 1, 1]), this.shaderKey = "transposeShared";
  }
  getUserCode() {
    return `
      let TILE_DIM = ${this.workGroupSize[0]};
      var<workgroup> tile : array<array<f32, ${this.workGroupSize[0] + 1}>, ${this.workGroupSize[0]}>;
      ${Nv()}
      fn main(@builtin(local_invocation_id) localId : vec3<u32>,
              @builtin(workgroup_id) workgroupId : vec3<u32>) {
        var x = i32(workgroupId.x) * TILE_DIM + i32(localId.x);
        var y = i32(workgroupId.y) * TILE_DIM + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = A[y * width + x];
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * TILE_DIM + i32(localId.x);
        y = i32(workgroupId.x) * TILE_DIM + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `;
  }
};
var Sse = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.workPerThread = 4, this.workGroupSize = [64, 1, 1], this.size = true;
    let n = new Array(e.length);
    for (let s = 0; s < n.length; s++)
      n[s] = e[t[s]];
    this.outputShape = n, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [this.workPerThread, 1, 1]), this.newDim = t, this.shaderKey = `transpose_${t}`;
  }
  getUserCode() {
    let e = Wt(this.outputShape.length), t = Cse(this.newDim);
    return `
      ${Ue()}

        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let resRC = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${e}(${t}), uniforms.aShape)]);
          }
        }
      }
    `;
  }
};
function Cse(e) {
  let t = e.length;
  if (t > 4)
    throw Error(`Transpose for rank ${t} is not yet supported`);
  let n = new Array(t);
  for (let s = 0; s < e.length; s++)
    n[e[s]] = `resRC[${s}]`;
  return n.join();
}
function Xs(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { perm: a } = s, i = n, o = r.shape.length, u = new Array(o);
  for (let c = 0; c < u.length; c++)
    u[c] = r.shape[a[c]];
  if (n.shouldExecuteOnCPU([r])) {
    let p = i.tensorMap.get(r.dataId).values, d = mse(p, r.shape, r.dtype, a, u);
    return n.makeTensorInfo(u, r.dtype, d);
  }
  if (r.shape.length === 2 && w.arraysEqual(a, [1, 0])) {
    let c = new Ise(r.shape, a);
    return i.runWebGPUProgram(c, [r], r.dtype);
  }
  let l = new Sse(r.shape, a);
  return i.runWebGPUProgram(l, [r], r.dtype);
}
var Nse = { kernelName: mi, backendName: "webgpu", kernelFunc: Xs };
function Tse(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a } = s, i = w.parseAxisParam(a, r.shape), o = C.getAxesPermutation(i, r.shape.length), u = r, l = [];
  o != null && (u = Xs({ inputs: { x: r }, backend: n, attrs: { perm: o } }), l.push(u), i = C.getInnerMostAxes(i.length, u.shape.length)), C.assertAxesAreInnerMostDims("argMax", [i[0]], u.shape.length);
  let c = new $2(u.shape, i[0], "max"), p = [{ type: "int32", data: [i[0]] }, { type: "float32", data: [Number.NEGATIVE_INFINITY] }], d = n.runWebGPUProgram(c, [u], "int32", p);
  return l.forEach((h) => n.disposeData(h.dataId)), d;
}
var $se = { kernelName: Sa, backendName: "webgpu", kernelFunc: Tse };
function _se(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a } = s, i = w.parseAxisParam(a, r.shape), o = C.getAxesPermutation(i, r.shape.length), u = r, l = [];
  o != null && (u = Xs({ inputs: { x: r }, backend: n, attrs: { perm: o } }), l.push(u), i = C.getInnerMostAxes(i.length, u.shape.length)), C.assertAxesAreInnerMostDims("argMin", [i[0]], u.shape.length);
  let c = new $2(u.shape, i[0], "min"), p = [{ type: "int32", data: [i[0]] }, { type: "float32", data: [Number.POSITIVE_INFINITY] }], d = n.runWebGPUProgram(c, [u], "int32", p);
  return l.forEach((h) => n.disposeData(h.dataId)), d;
}
var Ase = { kernelName: ul, backendName: "webgpu", kernelFunc: _se };
var _2 = class {
  constructor(e, t) {
    this.variableNames = ["x"], this.uniforms = "stride : vec2<i32>, pad : vec2<i32>, dilation : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,", this.workGroupSize = [128, 1, 1], this.size = true, this.outputShape = e.outShape, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = `pool2D_${t}`, this.poolType = t;
  }
  getUserCode() {
    let e = "resultValue = max(value, resultValue);";
    this.poolType === "avg" && (e = "resultValue = resultValue + value; count = count + 1.0;");
    let t = "resultValue";
    return this.poolType === "avg" && (t = "resultValue / count"), `
      ${Ue()}
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.stride - uniforms.pad;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          var resultValue = ${this.poolType === "avg" ? "0.0" : "-1.0 / pow(10.0, -20.0)"};
          var count = 0.0;

          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilation.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilation.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, coords[3]);
              ${e}
            }
          }

          setOutputAtIndex(index, ${t});
        }
      }
    `;
  }
};
var A2 = class {
  constructor(e) {
    this.variableNames = ["x"], this.uniforms = "stride : vec2<i32>,", this.workGroupSize = [256, 1, 1], this.size = true, this.outputShape = e.outShape, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = "poolWithFilterSizeEqualsOne";
  }
  getUserCode() {
    return `
      ${Ue()}
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.stride;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `;
  }
};
function Ese(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { filterSize: a, strides: i, pad: o, dimRoundingMode: u } = s, l = 1, c = C.computePool2DInfo(r.shape, a, i, l, o, u);
  if (c.filterWidth === 1 && c.filterHeight === 1 && w.arraysEqual(c.inShape, c.outShape))
    return Wn({ inputs: { x: r }, backend: n });
  let p, d = [{ type: "int32", data: [c.strideHeight, c.strideWidth] }];
  return c.filterHeight === 1 && c.filterWidth === 1 ? p = new A2(c) : (p = new _2(c, "avg"), d.push({ type: "int32", data: [c.padInfo.top, c.padInfo.left] }, { type: "int32", data: [c.dilationHeight, c.dilationWidth] }, { type: "int32", data: [c.inHeight, c.inWidth] }, { type: "int32", data: [c.effectiveFilterHeight, c.effectiveFilterWidth] })), n.runWebGPUProgram(p, [r], r.dtype, d);
}
var Rse = { kernelName: Ca, backendName: "webgpu", kernelFunc: Ese };
function Dse(e) {
  let { inputs: t, backend: n, attrs: s } = e, { a: r, b: a } = t, { transposeA: i, transposeB: o } = s;
  return Ev({ a: r, b: a, transposeA: i, transposeB: o, backend: n });
}
var Fse = { kernelName: Na, backendName: "webgpu", kernelFunc: Dse };
var Ose = class {
  constructor(e, t) {
    this.variableNames = ["source"], this.workPerThread = 1, this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = t, this.rank = t.length, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [this.workPerThread, 1, 1]), this.start = e, this.uniforms = `start : ${Wt(e.length)}, `, this.shaderKey = "slice";
  }
  getUserCode() {
    let e = Wt(this.rank), t = Pse(this.rank), n;
    return this.start.length === 1 ? n = this.outputShape.map((r, a) => "sourceLoc = uniforms.start + coords;") : n = this.outputShape.map((r, a) => `sourceLoc.${Ym[a]} = uniforms.start[${a}] + coords.${Ym[a]};`), `
      ${Ue()}
        if (index < uniforms.size) {
          var sourceLoc : ${e};
          let coords = getCoordsFromIndex(index);
          ${n.join(`
`)}
          setOutputAtIndex(index, getSource(${t}));
        }
      }
    `;
  }
};
var Ym = ["x", "y", "z", "w", "u", "v"];
function Pse(e) {
  if (e === 1)
    return "sourceLoc";
  if (e <= 6)
    return Ym.slice(0, e).map((t) => `sourceLoc.${t}`).join(",");
  throw Error(`Slicing for rank ${e} is not yet supported`);
}
function du(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { begin: a, size: i } = s, [o, u] = wt.parseSliceParams(r, a, i);
  if (wt.assertParamsValid(r, o, u), n.shouldExecuteOnCPU([r]) || r.dtype === "string") {
    let p = n.tensorMap.get(r.dataId), d = lse(p.values, o, u, r.shape, r.dtype);
    return n.makeTensorInfo(u, r.dtype, d);
  }
  if (w.sizeFromShape(u) === 0)
    return n.makeTensorInfo(u, r.dtype, []);
  let l = new Ose(o, u), c = [{ type: "int32", data: o }];
  return n.runWebGPUProgram(l, [r], r.dtype, c);
}
var zse = { kernelName: zo, backendName: "webgpu", kernelFunc: du };
var Mse = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockShape: a, crops: i } = s;
  w.assert(r.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");
  let o = a.reduce((y, v) => y * v), u = C.getReshaped(r.shape, a, o), l = C.getPermuted(u.length, a.length), c = C.getReshapedPermuted(r.shape, a, o), p = C.getSliceBeginCoords(i, a.length), d = C.getSliceSize(c, i, a.length), h = [], f = Me({ inputs: { x: r }, backend: n, attrs: { shape: u } }), m = Xs({ inputs: { x: f }, backend: n, attrs: { perm: l } }), g = Me({ inputs: { x: m }, backend: n, attrs: { shape: c } }), b = du({ inputs: { x: g }, backend: n, attrs: { begin: p, size: d } });
  return h.push(f), h.push(m), h.push(g), h.forEach((y) => n.disposeData(y.dataId)), b;
};
var Lse = { kernelName: lo, backendName: "webgpu", kernelFunc: Mse };
var E2 = mn({ opSnippet: 10, dtype: "bool", cpuKernelImpl: rse });
var Bse = { kernelName: No, backendName: "webgpu", kernelFunc: E2 };
function sc(e) {
  let { inputs: t, backend: n } = e, { input: s } = t, r = n.tensorMap.get(s.dataId);
  return Wn({ inputs: { x: r.complexTensorInfos.real }, backend: n });
}
var Vse = { kernelName: rp, backendName: "webgpu", kernelFunc: sc };
function Wse(e, t) {
  let n = new nc(e.shape, 22), s = t.runWebGPUProgram(n, [e], "int32");
  return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
function Qm(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { dtype: a } = s;
  if (a === "complex64") {
    if (r.dtype === "complex64")
      return Wn({ inputs: { x: r }, backend: n });
    let i = $t(r.shape), o = Qm({ inputs: { x: r }, backend: n, attrs: { dtype: "float32" } }), u = cu({ inputs: { real: o, imag: i }, backend: n });
    return i.dispose(), n.disposeData(o.dataId), u;
  }
  if (r.dtype === "complex64") {
    let i = sc({ inputs: { input: r }, backend: n }), o = Qm({ inputs: { x: i }, backend: n, attrs: { dtype: a } });
    return n.disposeData(i.dataId), o;
  }
  if (!w.hasEncodingLoss(r.dtype, a)) {
    let i = Wn({ inputs: { x: r }, backend: n });
    return { dataId: i.dataId, shape: i.shape, dtype: a };
  }
  if (a === "int32")
    return Wse(r, n);
  if (a === "bool") {
    let i = n.makeTensorInfo([], "bool", w.getTypedArrayFromDType("bool", 1)), u = E2({ inputs: { a: r, b: i }, backend: n });
    return n.disposeData(i.dataId), u;
  }
  throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`);
}
var Use = { kernelName: Ta, backendName: "webgpu", kernelFunc: Qm };
var Gse = jt({ opType: 1, cpuKernelImpl: Bne });
var Hse = { kernelName: $a, backendName: "webgpu", kernelFunc: Gse };
var qse = class {
  constructor(e) {
    this.variableNames = ["A"], this.uniforms = "minVal : f32, maxVal : f32,", this.workPerThread = 4, this.workGroupSize = [64, 1, 1], this.isVec4 = true, this.size = true, this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [this.workPerThread, 1, 1]), this.shaderKey = "clipVec4";
  }
  getUserCode() {
    return `
      ${Ue()}
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue : vec4<f32>;
          for (var i = 0; i < 4; i = i + 1) {
            if (isnan(value[i])) {
              clampedValue[i] = value[i];
            } else {
              clampedValue[i] = clamp(value[i], uniforms.minVal, uniforms.maxVal);
            }
          }

          setOutputAtIndex(index, clampedValue);
        }
      }
    `;
  }
};
var jse = class {
  constructor(e) {
    this.variableNames = ["A"], this.uniforms = "minVal : f32, maxVal : f32,", this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = "clip";
  }
  getUserCode() {
    return `
      ${Ue()}
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `;
  }
};
function Kse(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { clipValueMin: a, clipValueMax: i } = s, o, u = [{ type: "float32", data: [a] }, { type: "float32", data: [i] }];
  return w.sizeFromShape(r.shape) % 4 === 0 ? o = new qse(r.shape) : o = new jse(r.shape), n.runWebGPUProgram(o, [r], r.dtype, u);
}
var Xse = { kernelName: Cr, backendName: "webgpu", kernelFunc: Kse };
var Yse = class {
  constructor(e) {
    this.uniforms = "", this.workPerThread = 4, this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = C.computeOutShape(e, 1), this.variableNames = e.map((t, n) => `T${n}`), this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [this.workPerThread, 1, 1]), this.offsetLength = e.length - 1;
    for (let t = 0; t < this.offsetLength; t++)
      this.uniforms += `offset${t} : i32,`;
    this.shaderKey = "concat";
  }
  getUserCode() {
    let e = [];
    if (this.offsetLength > 0) {
      e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");
      for (let r = 1; r < this.offsetLength; r++)
        e.push(`else if (yC < uniforms.offset${[r]}){ setOutputAtCoords(coords.x, coords.y, getT${r}(yR, yC - uniforms.offset${r - 1})); }`);
      let n = this.offsetLength, s = this.offsetLength - 1;
      e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${n}(yR, yC - uniforms.offset${s})); }`);
    } else
      e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");
    return `
      ${Ue()}
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${e.join(`
        `)}
          }
        }
      }
    `;
  }
};
function eh(e) {
  let { inputs: t, backend: n } = e, { input: s } = t, r = n.tensorMap.get(s.dataId);
  return Wn({ inputs: { x: r.complexTensorInfos.imag }, backend: n });
}
var Qse = { kernelName: ep, backendName: "webgpu", kernelFunc: eh };
function Zm(e, t, n) {
  let s = e[0].dtype;
  if (s === "complex64") {
    let h = e.map((y) => sc({ inputs: { input: y }, backend: n })), f = e.map((y) => eh({ inputs: { input: y }, backend: n })), m = Zm(h, t, n), g = Zm(f, t, n), b = cu({ inputs: { real: m, imag: g }, backend: n });
    return h.forEach((y) => n.disposeData(y.dataId)), f.forEach((y) => n.disposeData(y.dataId)), n.disposeData(m.dataId), n.disposeData(g.dataId), b;
  }
  let r = n.shouldExecuteOnCPU(e);
  if (s === "string" && (r = true), r) {
    let h = e.map((x) => {
      let k = w.sizeFromShape(x.shape.slice(t));
      return Me({ inputs: { x }, backend: n, attrs: { shape: [-1, k] } });
    }), f = h.map((x) => ({ vals: n.readSync(x.dataId), shape: x.shape })), m = C.computeOutShape(h.map((x) => x.shape), 1), g = h[0].shape[0] === 1, b = Vne(f, m, s, g), y = C.computeOutShape(e.map((x) => x.shape), t), v = n.makeTensorInfo(y, s, b);
    return h.forEach((x) => n.disposeData(x.dataId)), v;
  }
  let { tensors2D: a, outShape: i } = Zse(e, t, n), o = a.map((h) => h.shape), u = new Yse(o), l = [], c = new Array(o.length - 1);
  if (c.length > 0) {
    c[0] = o[0][1], l.push({ type: "int32", data: [c[0]] });
    for (let h = 1; h < c.length; h++)
      c[h] = c[h - 1] + o[h][1], l.push({ type: "int32", data: [c[h]] });
  }
  let p = n.runWebGPUProgram(u, a, a[0].dtype, l);
  a.forEach((h) => n.disposeData(h.dataId));
  let d = Me({ inputs: { x: p }, backend: n, attrs: { shape: i } });
  return n.disposeData(p.dataId), d;
}
function Zse(e, t, n) {
  let s = C.computeOutShape(e.map((a) => a.shape), t);
  return { tensors2D: e.map((a) => Me({ inputs: { x: a }, backend: n, attrs: { shape: [w.sizeFromShape(a.shape.slice(0, t)), w.sizeFromShape(a.shape.slice(t))] } })), outShape: s };
}
function R2(e) {
  let { inputs: t, backend: n, attrs: s } = e, { axis: r } = s, a = w.parseAxisParam(r, t[0].shape)[0], i = C.computeOutShape(t.map((l) => l.shape), a);
  if (w.sizeFromShape(i) === 0)
    return n.makeTensorInfo(i, t[0].dtype, []);
  let o = t.filter((l) => w.sizeFromShape(l.shape) > 0);
  if (o.length === 1)
    return Wn({ inputs: { x: o[0] }, backend: n });
  let u = o.map((l) => l.shape);
  return C.assertParamsConsistent(u, a), Zm(o, a, n);
}
var Jse = { kernelName: co, backendName: "webgpu", kernelFunc: R2 };
var ere = class {
  constructor(e, t = false, n = null, s = false, r = false) {
    this.variableNames = ["x", "W"], this.uniforms = `filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>,
      dimAOuter : i32, dimBOuter : i32, dimInner : i32,`, this.workGroupSize = [8, 8, 1], this.isVec4 = true, this.outputShape = e.outShape, w.assert(e.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), this.dispatchLayout = { x: [3], y: [1, 2], z: [0] }, this.outputShape[1] === 1 ? this.elementsPerThread = [4, 1, 1] : this.elementsPerThread = [4, 4, 1], this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, this.elementsPerThread), this.convInfo = e, this.addBias = t, this.activation = n, this.hasPreluActivationWeights = s, this.hasLeakyreluAlpha = r, this.addBias && this.variableNames.push("bias"), this.hasPreluActivationWeights && this.variableNames.push("preluActivationWeights"), this.hasLeakyreluAlpha && this.variableNames.push("leakyreluAlpha"), this.tileAOuter = this.outputShape[1] === 1 ? 1 : this.workGroupSize[1] * this.elementsPerThread[1], this.tileBOuter = this.workGroupSize[0] * this.elementsPerThread[0], this.tileInner = this.tileBOuter, [this.fitA, this.fitB] = this.getShapeFit(), this.shaderKey = `conv2DMMVec4_${this.activation}_${this.fitA}_${this.fitB}_${this.elementsPerThread}`;
  }
  getShapeFit() {
    let e = [this.tileAOuter, this.tileInner], t = [this.tileInner, this.tileBOuter], n = this.outputShape[1] * this.outputShape[2], s = this.outputShape[3], r = this.convInfo.filterHeight * this.convInfo.filterWidth * this.convInfo.inChannels;
    return [Ks(e, [n, r]), Ks(t, [r, s])];
  }
  getSampleAWithRemainder(e) {
    return `let flatIndex${e} = getIndexFromCoords4D(coord, uniforms.xShape);
    let divBy4Remainder${e} = flatIndex${e} % 4;
    let divBy4Index${e} = flatIndex${e} / 4;
    let curData${e} = x[divBy4Index${e}];
    if (divBy4Remainder${e} == 0) {
      temp = curData${e};
    } else {
      // TODO: This could end up being a redundant load with another one in
      // the same shader invocation. Perhaps there's an opportunity for
      // optimization
      let nextData${e} = x[divBy4Index${e} + 1];
      if (divBy4Remainder${e} == 1) {
        temp = vec4<f32>(curData${e}.yzw, nextData${e}.x);
      } else if (divBy4Remainder${e} == 2) {
        temp = vec4<f32>(curData${e}.zw, nextData${e}.xy);
      } else if (divBy4Remainder${e} == 3) {
        temp = vec4<f32>(curData${e}.w, nextData${e}.xyz);
      }
    }
    `;
  }
  getUserCode() {
    let e = C2(this.elementsPerThread, this.tileAOuter, this.tileBOuter, this.tileInner), s = `let outRow = r / uniforms.outShape[2];
        let outCol = r % uniforms.outShape[2];
        let WRow = c / (uniforms.filterDims[1] * uniforms.xShape[3]);
        let WCol = c / uniforms.xShape[3] % uniforms.filterDims[1];
        let inChCoord = c % uniforms.xShape[3];
        var coord = vec4<i32>(
            batch,
            outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0],
            outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1],
            inChCoord);
        var resData = vec4<f32>(0.0);
        ${this.convInfo.inChannels % 4 === 0 ? `// The bounds checking is always needed since we use it to pad zero for
          // the 'same' padding type.
          if (coordsInBounds4D(coord, uniforms.xShape)) {
            resData = x[getIndexFromCoords4D(coord, uniforms.xShape) / 4];
          } else {
            resData = vec4<f32>(0.0); }` : `var temp = vec4<f32>(0.0);
          ${this.getSampleAWithRemainder(1)}
          resData = temp;
          if (WCol == (uniforms.filterDims[1] - 1)) {
            coord = vec4<i32>(
              coord.x, coord.y + 1, coord.z + 1 - uniforms.filterDims[1], 0);
              ${this.getSampleAWithRemainder(2)}
            if (inChCoord == 0) {
              resData = vec4<f32>(resData.xyz, temp.x);
            } else if (inChCoord == 1) {
              resData = vec4<f32>(resData.xy, temp.xy);
            } else {
              resData = vec4<f32>(resData.x, temp.xyz);
            }
          }
          `}
        return resData;`, r = this.fitA ? `${s}` : `if (r < uniforms.dimAOuter && c < uniforms.dimInner) {
          ${s}
         }
         return vec4<f32>(0.0);
        `, a = this.fitB ? "return W[row * uniforms.dimBOuter / 4 + col];" : `if(coordsInBounds2D(vec2<i32>(row, col * 4), vec2<i32>(uniforms.dimInner, uniforms.dimBOuter))) {
           return W[row * uniforms.dimBOuter / 4 + col];
         }
         return vec4<f32>(0.0);
        `, i = "", o = "";
    if (this.activation) {
      let c = Js(this.activation, this.isVec4);
      if (this.hasPreluActivationWeights)
        i = `fn activation(a : vec4<f32>, outCoord : vec4<i32>) -> vec4<f32> {
          let b = getPreluActivationWeightsByOutputCoords(outCoord);
          ${c}
        }`;
      else {
        if (this.hasLeakyreluAlpha)
          throw i = `fn activation(outCoord: vec4<f32>) -> vec4<f32> {
          let b = getLeakyreluAlphaByOutputCoords(outCoord);
          ${c}
        }`, new Error("Leakyrelu is not supported.");
        i = `
        fn activation(a : vec4<f32>, outCoord : vec4<i32>) -> vec4<f32> {
          ${c}
        }`;
      }
      o = "value = activation(value, outCoord);";
    }
    let u = this.addBias ? "value = value + getBiasByOutputCoords(outCoord);" : "";
    return `
        ${i}
        fn mm_readA(row : i32, col : i32, globalId : vec3<u32>) -> vec4<f32> {
          let r = row;
          let c = col * 4;
          var batch = i32(globalId.z);
          ${r}
        }

        fn mm_readB(row : i32, col : i32, globalId : vec3<u32>) -> vec4<f32> {
          ${a}
        }

        fn mm_write(row : i32, col : i32, valueInput : vec4<f32>, globalId : vec3<u32>) {
          var batch = i32(globalId.z);
          var value = valueInput;
          if (row < uniforms.dimAOuter && col * 4 < uniforms.dimBOuter)
          {
            let outCoord = vec4<i32>(
              batch,
              row / uniforms.outShape[2],
              row % uniforms.outShape[2],
              col * 4);
            ${u}
            ${o}
            setOutputAtCoords(outCoord[0], outCoord[1], outCoord[2], outCoord[3],
              value);
          }
        }
        ${e}
      `;
  }
};
var tre = class {
  constructor(e, t = false, n = null, s = false) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = e.outShape, this.isChannelsLast = e.dataFormat === "channelsLast", this.dispatchLayout = this.isChannelsLast ? { x: [3], y: [1, 2], z: [0] } : { x: [1], y: [2, 3], z: [0] }, this.workGroupSize = Tv(this.dispatchLayout, this.outputShape), this.elementsPerThread = $v(this.dispatchLayout, this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, this.elementsPerThread), t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), this.convInfo = e, this.addBias = t, this.activation = n, this.hasPreluActivationWeights = s, [this.fitA, this.fitB] = this.getShapeFit(), this.shaderKey = `conv2DMM_${this.elementsPerThread}_${this.activation}_${this.fitA}_${this.fitB}_${this.isChannelsLast}`;
  }
  getShapeFit() {
    let e = this.workGroupSize[1] * this.elementsPerThread[1], t = this.workGroupSize[0] * this.elementsPerThread[0], n = e > t ? e : t;
    w.assert(n % this.workGroupSize[0] === 0 && n % this.workGroupSize[1] === 0, () => "tileInner must be multiple of workgroupsize.x and workgroupsize.y");
    let s = [e, n], r = [n, t], a = this.convInfo.outHeight * this.convInfo.outWidth, i = this.convInfo.outChannels, o = this.convInfo.filterHeight * this.convInfo.filterWidth * this.convInfo.inChannels;
    return [Ks(s, [a, o]), Ks(r, [o, i])];
  }
  getUserCode() {
    let e = this.isChannelsLast ? `
    let coord = vec4<i32>(batch, xRow, xCol, col % inChannels);
    ` : `
    let coord = vec4<i32>(batch, col % inChannels, xRow, xCol);
    `, t = this.isChannelsLast ? `
    let outCoord = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    ` : `
    let outCoord = vec4<i32>(
      batch,
      col,
      row / outWidth,
      row % outWidth);
    `, n = Av(this.elementsPerThread, this.workGroupSize), s = `
    let inChannels = uniforms.wShape[2];
    let outWidth = ${this.isChannelsLast ? "uniforms.outShape[2]" : "uniforms.outShape[3]"};
    let outRow = row / outWidth;
    let outCol = row % outWidth;

    let WRow = col / (uniforms.filterDims[1] * inChannels);
    let WCol = col / inChannels % uniforms.filterDims[1];
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    ${e}
    // The bounds checking is always needed since we use it to pad zero for the
    // 'same' padding type.
    if(coordsInBounds4D(coord, uniforms.xShape)) {
      return x[getIndexFromCoords4D(coord, uniforms.xShape)];
    }
    return 0.0;`, r = this.fitA ? `${s}` : `if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      ${s}
    }
    return 0.0;
    `, a = this.fitB ? "return W[row * uniforms.dimBOuter + col];" : `if(coordsInBounds2D(vec2<i32>(row, col), vec2<i32>(uniforms.dimInner, uniforms.dimBOuter))) {
           return W[row * uniforms.dimBOuter + col];
	 }
	 return 0.0;
	 `, i = "", o = "";
    if (this.activation) {
      let c = Js(this.activation, false);
      this.hasPreluActivationWeights ? i = `fn activation(a: f32, outCoord : vec4<i32>) -> f32 {
                  let b = getPreluActivationWeightsByOutputCoords(outCoord);
                  ${c}
                }` : i = `
                  fn activation(a : f32, outCoord : vec4<i32>) -> f32 {
                    ${c}
                  }
                `, o = "value = activation(value, outCoord);";
    }
    let u = this.addBias ? "value = value + getBiasByOutputCoords(outCoord);" : "";
    return `
    ${i}
    fn mm_readA(row : i32, col : i32, globalId : vec3<u32>) -> f32 {
      var batch = i32(globalId.z);
      ${r}
    }

    fn mm_readB(row : i32, col : i32, globalId : vec3<u32>) -> f32 {
      ${a}
    }

    fn mm_write(row : i32, col : i32, valueInput : f32, globalId : vec3<u32>) {
      var batch = i32(globalId.z);
      var value = valueInput;
      let outWidth = ${this.isChannelsLast ? "uniforms.outShape[2]" : "uniforms.outShape[3]"};
      ${t}
      ${u}
      ${o}
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)] = value;
    }
    ${n}
  `;
  }
};
var nre = class {
  constructor(e, t = false, n = null, s = false) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>,", this.workGroupSize = [128, 1, 1], this.outputShape = e.outShape, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), w.assert(e.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), this.convInfo = e, this.addBias = t, this.activation = n, this.hasPreluActivationWeights = s, this.shaderKey = `conv2DNaive_${this.activation}`;
  }
  getUserCode() {
    let e = "", t = "";
    if (this.activation) {
      let r = Js(this.activation);
      this.hasPreluActivationWeights ? e = `fn activation(a : f32, outCoord : vec4<i32>) -> f32{
               let b = getPreluActivationWeightsByOutputCoords(outCoord);
               ${r}
             }` : e = `
                  fn activation(a : f32, outCoord : vec4<i32>) -> f32{
                    ${r}
                  }
                `, t = "value = activation(value, outCoord);";
    }
    let n = this.addBias ? "value = value + getBiasByOutputCoords(outCoord);" : "";
    return `
      ${e}
      fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32 {
        let coord = vec4<i32>(batch, row, col, chan);
        if(coordsInBounds4D(coord, uniforms.xShape)) {
          return getX(batch, row, col, chan);
        }
        return 0.0;
      }

      fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{
        let coord = vec4<i32>(row, col, xChannel, outChannel);
        if(coordsInBounds4D(coord, uniforms.wShape)) {
          return getW(row, col, xChannel, outChannel);
        }
        return 0.0;
      }

      fn writeResult(batch : i32, row : i32, col : i32, chan : i32, value : f32) {
        let coord = vec4<i32>(batch, row, col, chan);
        if (coordsInBounds4D(coord, uniforms.outShape)) {
          ${n}
          ${t}
          setOutputAtCoords(batch, row, col, chan, value);
        }
      }

      ${Fr()}
        let coords = getOutputCoords();
        let batch = coords[0];
        let outChannel = coords[3];

        var acc = 0.0;

        for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {
          for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {
            for (var xChannel = 0; xChannel < uniforms.xShape[3]; xChannel = xChannel + 1) {
              let coordRow = coords[1] * uniforms.stride[0] + uniforms.dilation[0] * row - uniforms.pad[0];
              let coordCol = coords[2] * uniforms.stride[1] + uniforms.dilation[1] * col - uniforms.pad[1];
              let v = readInp(batch, coordRow, coordCol, xChannel);
              let f = readFilt(row, col, xChannel, outChannel);
              acc = acc + v * f;
            }
          }
        }

        writeResult(batch, coords[1], coords[2], outChannel, acc);
      }
    `;
  }
};
var sre = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.uniforms = `pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,
      inChannels : i32,`, this.workPerThread = 4, this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [this.workPerThread, 1, 1]), this.isChannelsLast = t, this.shaderKey = `im2col_${this.isChannelsLast}`;
  }
  getUserCode() {
    let e = this.isChannelsLast ? 0 : 1, t = this.isChannelsLast ? 1 : 2;
    return `
    ${Ue()}

      for(var i = 0; i<${this.workPerThread}; i = i + 1) {
        let flatIndex = index * ${this.workPerThread} + i;

        let rc = getCoordsFromIndex(flatIndex);

        if(flatIndex < uniforms.size) {
          let blockIndex = rc[0];
          let pos = rc[1];

          let offsetY = blockIndex / uniforms.outWidth * uniforms.stride[1] - uniforms.pad[1];
          let d0 = offsetY + uniforms.dilation[1] * pos / uniforms.itemsPerBlockRow;
          var value = 0.0;
          if(d0 < uniforms.aShape[${e}] && d0 >= 0) {
            let offsetX = (blockIndex % uniforms.outWidth) * uniforms.stride[0] -
              uniforms.pad[0];
            let d1 = offsetX + uniforms.dilation[0] * ((pos %
              uniforms.itemsPerBlockRow) / uniforms.inChannels);
            let ch = pos % uniforms.inChannels;
            if(d1 < uniforms.aShape[${t}] && d1 >= 0) {
              value = getA(d0, d1, ch);
            }
          }
          setOutputAtIndex(flatIndex, value);
        }
      }
    }
  `;
  }
};
function rre({ x: e, filter: t, convInfo: n, backend: s, bias: r = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: o = null }) {
  let u = n.dataFormat === "channelsLast", l = !u, c = false, p = u && n.filterHeight === n.inHeight && n.filterWidth === n.inWidth && n.padInfo.type === "VALID", d, h;
  if (p) {
    let g = n.inHeight * n.inWidth * n.inChannels;
    d = Me({ inputs: { x: e }, backend: s, attrs: { shape: [1, n.batchSize, g] } }), h = Me({ inputs: { x: t }, backend: s, attrs: { shape: [1, g, n.outChannels] } });
  } else
    d = Me({ inputs: { x: e }, backend: s, attrs: { shape: u ? [n.batchSize, n.inHeight * n.inWidth, n.inChannels] : [n.batchSize, n.inChannels, n.inHeight * n.inWidth] } }), h = Me({ inputs: { x: t }, backend: s, attrs: { shape: [1, n.inChannels, n.outChannels] } });
  let f = Ev({ a: u ? d : h, b: u ? h : d, transposeA: l, transposeB: c, backend: s, bias: r, activation: o, preluActivationWeights: a, leakyreluAlpha: i }), m = Me({ inputs: { x: f }, backend: s, attrs: { shape: n.outShape } });
  return s.disposeData(d.dataId), s.disposeData(h.dataId), s.disposeData(f.dataId), m;
}
function are({ x: e, filter: t, convInfo: n, backend: s, bias: r = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: o = null }) {
  let { filterWidth: u, filterHeight: l, inChannels: c, strideWidth: p, strideHeight: d, padInfo: h, outWidth: f, outHeight: m, dilationWidth: g, dilationHeight: b, dataFormat: y } = n, v = y === "channelsLast", x = u * l * c, k = m * f, S = [k, x], $ = false, E = false, A = [], P = Me({ inputs: { x: e }, backend: s, attrs: { shape: e.shape.slice(1) } }), R = Me({ inputs: { x: t }, backend: s, attrs: { shape: [1, x, -1] } });
  A.push(P), A.push(R);
  let F = new sre(S, v), T = [{ type: "int32", data: [h.left, h.top] }, { type: "int32", data: [p, d] }, { type: "int32", data: [g, b] }, { type: "int32", data: [f] }, { type: "int32", data: [c * u] }, { type: "int32", data: [c] }], z = s.runWebGPUProgram(F, [P], P.dtype, T), W = Me({ inputs: { x: z }, backend: s, attrs: { shape: [1, S[0], S[1]] } });
  A.push(z), A.push(W);
  let q = [1, S[0], S[1]], K = new N2(q, [1, k, n.outChannels], X().get("WEBGPU_MATMUL_WORK_PER_THREAD"), true, true, $, E, r, o, a), Y = q[1], Z = q[2], te = n.outChannels, ee = [{ type: "int32", data: [Y] }, { type: "int32", data: [te] }, { type: "int32", data: [Z] }], se = [W, R];
  r && se.push(r), a && se.push(a), o === "leakyrelu" && (T.push({ type: "float32", data: [i] }), K.uniforms += " alpha : f32,");
  let ne = s.runWebGPUProgram(K, se, W.dtype, ee), oe = v ? [1, m, f, n.outChannels] : [1, n.outChannels, m, f], re = Me({ inputs: { x: ne }, backend: s, attrs: { shape: oe } });
  A.push(ne);
  for (let le of A)
    s.disposeData(le.dataId);
  return re;
}
function D2({ x: e, filter: t, convInfo: n, backend: s, bias: r = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: o = null }) {
  let u = r != null, l = a != null, c = n.dataFormat === "channelsLast", p;
  if (c && n.filterHeight === n.inHeight && n.filterWidth === n.inWidth && n.padInfo.type === "VALID" || n.filterHeight === 1 && n.filterWidth === 1 && n.dilationHeight === 1 && n.dilationWidth === 1 && n.strideHeight === 1 && n.strideWidth === 1 && (n.padInfo.type === "SAME" || n.padInfo.type === "VALID"))
    return rre({ x: e, filter: t, convInfo: n, backend: s, bias: r, activation: o, preluActivationWeights: a, leakyreluAlpha: i });
  if (X().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER") && e.shape[0] === 1)
    return w.assert(c, () => "TODO: NCHW is unimplemented"), are({ x: e, filter: t, convInfo: n, backend: s, bias: r, preluActivationWeights: a, leakyreluAlpha: i, activation: o });
  let h = X().getBool("WEBGPU_USE_NAIVE_CONV2D"), f = (n.inChannels % 4 === 0 || n.inChannels === 3 && n.padInfo.type === "VALID") && n.outChannels % 4 === 0 && c, m = [n.padInfo.top, n.padInfo.left], g = [{ type: "int32", data: [n.filterHeight, n.filterWidth] }, { type: "int32", data: [...m] }, { type: "int32", data: [n.strideHeight, n.strideWidth] }, { type: "int32", data: [n.dilationHeight, n.dilationWidth] }];
  if (h)
    w.assert(c, () => "TODO: NCHW is unimplemented"), p = new nre(n, u, o, l);
  else {
    f ? p = new ere(n, u, o, l) : p = new tre(n, u, o, l);
    let y = n.outHeight * n.outWidth, v = n.outChannels, x = n.filterHeight * n.filterWidth * n.inChannels;
    g.push({ type: "int32", data: [y] }, { type: "int32", data: [v] }, { type: "int32", data: [x] });
  }
  let b = [e, t];
  return u && b.push(r), l && b.push(a), o === "leakyrelu" && (g.push({ type: "float32", data: [i] }), p.uniforms += " alpha : f32,"), s.runWebGPUProgram(p, b, e.dtype, g);
}
function ire(e) {
  let { inputs: t, attrs: n, backend: s } = e, { x: r, filter: a } = t, { strides: i, pad: o, dataFormat: u, dilations: l, dimRoundingMode: c } = n, p = C.convertConv2DDataFormat(u), d = C.computeConv2DInfo(r.shape, a.shape, i, l, o, c, false, p);
  return D2({ x: r, filter: a, convInfo: d, backend: s });
}
var ore = { kernelName: _a, backendName: "webgpu", kernelFunc: ire };
var ure = class {
  constructor(e) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = e.inShape, w.assert(e.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), this.dispatchLayout = { x: [3], y: [1, 2], z: [0] }, this.workGroupSize = Tv(this.dispatchLayout, this.outputShape), this.elementsPerThread = $v(this.dispatchLayout, this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, this.elementsPerThread), this.shaderKey = `conv2DDerInputMM_${this.elementsPerThread}`;
  }
  getUserCode() {
    return `
    fn mm_readA(row : i32, col : i32, globalId : vec3<u32>) -> f32 {
      var batch = i32(globalId.z);
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      
    let outRow = row / uniforms.outShape[2];
    let outCol = row % uniforms.outShape[2];

    let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
    let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.stride[0]);
    let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.stride[1]);
    if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
      return 0.0;
    }
    if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
      return 0.0;
    }
    let coord = vec4<i32>(
        batch,
        i32(xR),
        i32(xC),
        col % uniforms.outBackprop[3]);
    return x[getIndexFromCoords4D(coord, uniforms.xShape)];
    }
    return 0.0;
    }

    fn mm_readB(row : i32, col : i32, globalId : vec3<u32>) -> f32 {
      let coordX = uniforms.filterDims.x - 1 -
          row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let coordY = uniforms.filterDims.y - 1 -
          (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
      if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
          coordX >= 0 && coordY >= 0) {
        let coord = vec4<i32>(coordX, coordY, col,
            row % uniforms.outBackprop[3]);
        return W[getIndexFromCoords4D(coord, uniforms.wShape)];
      }
      return 0.0;
    }

    fn mm_write(row : i32, col : i32, valueInput : f32, globalId : vec3<u32>) {
      var batch = i32(globalId.z);
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)] = value;
    }

    ${Av(this.elementsPerThread, this.workGroupSize)}
  `;
  }
};
var lre = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.uniforms = "filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>,", this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = e.inShape, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.isChannelsLast = e.dataFormat === "channelsLast", this.shaderKey = `conv2DDerInput_${this.isChannelsLast}`;
  }
  getUserCode() {
    let e = this.isChannelsLast ? 1 : 2, t = this.isChannelsLast ? 2 : 3, n = this.isChannelsLast ? 3 : 1;
    return `
    ${Ue()} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${n}];

        let dyCorner = vec2<i32>(coords[${e}]), coords[${t}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.stride.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = dyR;

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.stride.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = dyC;

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              if (${this.isChannelsLast}) {
                let xValue = getDy(batch, idyR, idyC, d2);
                let wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd = dotProd + xValue * wValue;
              } else {
                let xValue = getDy(batch, d2, idyR, idyC);
                let wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd = dotProd + xValue * wValue;
              }

            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `;
  }
};
function cre(e) {
  let { inputs: t, backend: n, attrs: s } = e, { dy: r, filter: a } = t, { inputShape: i, strides: o, pad: u, dataFormat: l, dimRoundingMode: c } = s, p = C.convertConv2DDataFormat(l), d = C.computeConv2DInfo(i, a.shape, o, 1, u, c, false, p), h = [{ type: "int32", data: [d.filterHeight, d.filterWidth] }, { type: "int32", data: [d.filterHeight - 1 - d.padInfo.top, d.filterWidth - 1 - d.padInfo.left] }, { type: "int32", data: [d.strideHeight, d.strideWidth] }, { type: "int32", data: [d.batchSize, d.outHeight, d.outWidth, d.outChannels] }], f;
  if (X().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE"))
    f = new lre(d);
  else {
    f = new ure(d);
    let m = d.inShape[1] * d.inShape[2], g = d.inShape[3], b = d.filterHeight * d.filterWidth * d.outChannels;
    h.push({ type: "uint32", data: [m] }, { type: "uint32", data: [g] }, { type: "uint32", data: [b] });
  }
  return n.runWebGPUProgram(f, [r, a], "float32", h);
}
var dre = { kernelName: Aa, backendName: "webgpu", kernelFunc: cre };
var pre = jt({ opType: 2 });
var hre = { kernelName: Ea, backendName: "webgpu", kernelFunc: pre };
var fre = jt({ opType: 3 });
var mre = { kernelName: Ra, backendName: "webgpu", kernelFunc: fre };
var gre = class {
  constructor(e, t, n, s) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.uniforms = "extrapolationValue : f32,", this.workGroupSize = [64, 1, 1], this.size = true;
    let [r] = t;
    this.outputShape = [r, n[0], n[1], e], this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.methodId = s === "bilinear" ? 1 : 0, this.cropHeightBiggerThan1 = this.outputShape[1] > 1, this.cropWidthBiggerThan1 = this.outputShape[2] > 1, this.shaderKey = `cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`;
  }
  getUserCode() {
    let [e, t] = ["f32(uniforms.imageShape[1] - 1)", "f32(uniforms.imageShape[2] - 1)"], [n, s, r] = this.cropHeightBiggerThan1 ? [`(${e} / f32(uniforms.outShape[1] - 1))`, "(y2-y1) * height_ratio", `y1*${e} + f32(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${e}`], [a, i, o] = this.cropWidthBiggerThan1 ? [`(${t} / f32(uniforms.outShape[2] - 1))`, "(x2-x1) * width_ratio", `x1*${t} + f32(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${t}`];
    return `
      ${Ue()}
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${n});
        let width_ratio = f32(${a});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${s};
        let width_scale = ${i};
        let in_y = ${r};
        if( in_y < 0.0 || in_y > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${o};
        if( in_x < 0.0 || in_x > ${t} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `;
  }
};
var bre = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { image: r, boxes: a, boxInd: i } = t, { cropSize: o, method: u, extrapolationValue: l } = s, c = new gre(r.shape[3], a.shape, o, u), p = [{ type: "float32", data: [l] }];
  return n.runWebGPUProgram(c, [r, a, i], "float32", p);
};
var yre = { kernelName: ho, backendName: "webgpu", kernelFunc: bre };
var Dw = class {
  constructor(e, t, n, s) {
    this.variableNames = ["x"], this.uniforms = "index : f32,", this.size = true;
    let r = 128;
    this.workGroupSize = [r, 1, 1], this.outputShape = t, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.exclusive = n, this.reverse = s, this.op = e, this.shaderKey = `cum_${this.op}_${this.exclusive}_${this.reverse}`;
  }
  getUserCode() {
    let e = this.outputShape.length, t = this.op === "*" ? "1.0" : "0.0", n = this.exclusive ? t : `getX(${Fw(e, "coords", this.op)})`, s = this.outputShape[this.outputShape.length - 1], r = "", a = "";
    return this.exclusive ? (r = this.reverse ? `end != ${s - 1}` : "end != 0", a = this.reverse ? "end + 1" : "end - 1") : (r = this.reverse ? `end + pow2 < ${s}` : "end >= pow2", a = this.reverse ? "end + pow2" : "end - pow2"), `
      ${Ue()}
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${Ow(e, "coords", this.op)};
         var val = ${n};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${r}) {
           let idx = ${a};
           ${Ow(e, "coords", this.op)} = idx;
           val ${this.op}= getX(${Fw(e, "coords", this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `;
  }
};
function Fw(e, t, n) {
  if (e === 1)
    return `${t}`;
  if (e === 2)
    return `${t}.x, ${t}.y`;
  if (e === 3)
    return `${t}.x, ${t}.y, ${t}.z`;
  if (e === 4)
    return `${t}.x, ${t}.y, ${t}.z, ${t}.w`;
  throw Error(`Cumulative ${n} for rank ${e} is not yet supported`);
}
function Ow(e, t, n) {
  if (e === 1)
    return `${t}`;
  if (e === 2)
    return `${t}.y`;
  if (e === 3)
    return `${t}.z`;
  if (e === 4)
    return `${t}.w`;
  throw Error(`Cumulative ${n} for rank ${e} is not yet supported`);
}
function F2(e, t, n, s, r, a) {
  let i = t.shape.length, o = C.getAxesPermutation([s], i), u = t;
  o != null && (u = Xs({ inputs: { x: t }, backend: n, attrs: { perm: o } }));
  let l = C.getInnerMostAxes(1, i)[0];
  if (l !== i - 1)
    throw new Error(`WebGPU cumprod shader expects an inner-most axis=${t.shape.length - 1} but got axis=${s}`);
  let c = u.shape[l], p = Wn({ inputs: { x: u }, backend: n });
  for (let d = 0; d <= Math.ceil(Math.log2(c)) - 1; d++) {
    let h = new Dw(e, u.shape, false, a), f = p, m = [{ type: "float32", data: [d] }];
    p = n.runWebGPUProgram(h, [p], p.dtype, m), n.disposeData(f.dataId);
  }
  if (r) {
    let d = new Dw(e, u.shape, r, a), h = p, f = [{ type: "float32", data: [0] }];
    p = n.runWebGPUProgram(d, [p], p.dtype, f), n.disposeData(h.dataId);
  }
  if (o != null) {
    let d = C.getUndoAxesPermutation(o), h = Xs({ inputs: { x: p }, backend: n, attrs: { perm: d } });
    return n.disposeData(p.dataId), n.disposeData(u.dataId), h;
  }
  return p;
}
function vre(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, exclusive: i, reverse: o } = s;
  return F2("*", r, n, a, i, o);
}
var xre = { kernelName: po, backendName: "webgpu", kernelFunc: vre };
function wre(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, exclusive: i, reverse: o } = s;
  return F2("+", r, n, a, i, o);
}
var kre = { kernelName: Da, backendName: "webgpu", kernelFunc: wre };
var Ire = class {
  constructor(e, t) {
    this.variableNames = ["x"], this.workGroupSize = [64, 1, 1], this.size = true, this.uniforms = "blockSize : i32,", this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = `depthToSpace_${t}`, this.dataFormat = t;
  }
  getUserCode() {
    return `
      ${Ue()}
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? "uniforms.outShape[3]" : "uniforms.outShape[1]";
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
};
function Sre(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockSize: a, dataFormat: i } = s, o = r.shape[0], u = i === "NHWC" ? r.shape[1] : r.shape[2], l = i === "NHWC" ? r.shape[2] : r.shape[3], c = i === "NHWC" ? r.shape[3] : r.shape[1], p = u * a, d = l * a, h = c / (a * a), f = i === "NHWC" ? [o, p, d, h] : [o, h, p, d], m = [{ type: "int32", data: [a] }], g = new Ire(f, i);
  return n.runWebGPUProgram(g, [r], r.dtype, m);
}
var Cre = { kernelName: fo, backendName: "webgpu", kernelFunc: Sre };
var O2 = class {
  constructor(e, t = false, n = null, s = false) {
    this.variableNames = ["x", "W"], this.uniforms = "pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, inDims : vec2<i32>,", this.workGroupSize = [4, 4, 4], this.isVec4 = true, this.outputShape = e.outShape, this.dispatchLayout = { x: [0, 1], y: [2], z: [3] }, this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [1, 4, 4]), w.assert(e.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), this.convInfo = e, this.addBias = t, this.activation = n, this.hasPreluActivation = s, this.shaderKey = `depthwise3x3_${n}`;
  }
  getUserCode() {
    let e = "", t = "";
    if (this.activation) {
      let r = Js(this.activation, this.isVec4);
      this.hasPreluActivation ? e = `fn activation(a : vec4<f32>, outCoord : vec4<i32>) -> vec4<f32> {
          let b = getPreluActivationWeightsByOutputCoords(outCoord);
          ${r}
        }` : e = `
        fn activation(a : vec4<f32>, outCoord : vec4<i32>) -> vec4<f32> {
            ${r}
          }
        `, t = "dotProd[i] = activation(dotProd[i], coords);";
    }
    let n = this.addBias ? "dotProd[i] = dotProd[i] + getBiasByOutputCoords(coords);" : "";
    return `
      ${e}

      ${Nv()}
      fn main(@builtin(global_invocation_id) globalId: vec3<u32>) {
        let batch = 0;
        let r = i32(globalId.x);
        let c = i32(globalId.y) * 4;
        let d2 = i32(globalId.z) * 4;
        let xRCCorner = vec2<i32>(r, c) * uniforms.stride - uniforms.pad;
        let d1 = d2;
        let q = 0;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;

        var wVals : array<vec4<f32>, 9>;
        wVals[0] = getW(0, 0, d1, q);
        wVals[1] = getW(0, 1, d1, q);
        wVals[2] = getW(0, 2, d1, q);
        wVals[3] = getW(1, 0, d1, q);
        wVals[4] = getW(1, 1, d1, q);
        wVals[5] = getW(1, 2, d1, q);
        wVals[6] = getW(2, 0, d1, q);
        wVals[7] = getW(2, 1, d1, q);
        wVals[8] = getW(2, 2, d1, q);

        var xVals : array<array<vec4<f32>, 6>, 3>;
        for (var wR = 0; wR < 3; wR = wR + 1) {
          let xR = xRCorner + wR * uniforms.dilation[0];
          for (var wC = 0; wC < 6; wC = wC + 1) {
            let xC = xCCorner + wC * uniforms.dilation[1];
            if (xR < 0 || xR >= uniforms.inDims[0] || xC < 0 || xC >= uniforms.inDims[1]) {
              xVals[wR][wC] = vec4<f32>(0.0);
            } else {
              xVals[wR][wC] = getX(batch, xR, xC, d1);
            }
          }
        }

        var dotProd : array<vec4<f32>, 4>;
        dotProd[0] = vec4<f32>(0.0);
        dotProd[1] = vec4<f32>(0.0);
        dotProd[2] = vec4<f32>(0.0);
        dotProd[3] = vec4<f32>(0.0);

        for (var wR = 0; wR < 3; wR = wR + 1) {
          for (var wC = 0; wC < 3; wC = wC + 1) {
            let indexW = wR * 3 + wC;
            dotProd[0] = dotProd[0] + xVals[wR][0 + wC] * wVals[indexW];
            dotProd[1] = dotProd[1] + xVals[wR][1 + wC] * wVals[indexW];
            dotProd[2] = dotProd[2] + xVals[wR][2 + wC] * wVals[indexW];
            dotProd[3] = dotProd[3] + xVals[wR][3 + wC] * wVals[indexW];
          }
        }

        for (var i = 0; i < 4; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d2);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            ${n}
            ${t}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);
          }
        }
      }
    `;
  }
};
var P2 = class {
  constructor(e, t = false, n = null, s = false) {
    this.variableNames = ["x", "W"], this.uniforms = `pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>,
      inDims : vec2<i32>, filterHeight : i32, filterWidth : i32,
      channelMul : i32,`, this.workGroupSize = [256, 1, 1], this.outputShape = e.outShape, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), w.assert(e.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), t && this.variableNames.push("bias"), s && this.variableNames.push("preluActivationWeights"), this.convInfo = e, this.addBias = t, this.activation = n, this.hasPreluActivation = s, this.shaderKey = `depthwise_${this.activation}`;
  }
  getUserCode() {
    let e = "", t = "";
    if (this.activation) {
      let r = Js(this.activation, false);
      this.hasPreluActivation ? e = `fn activation(a : f32, outCoord : vec4<i32>) -> f32 {
          let b = getPreluActivationWeightsByOutputCoords(outCoord);
          ${r}
        }` : e = `
          fn activation(a : f32, outCoord : vec4<i32>) -> f32 {
            ${r}
          }
        `, t = "dotProd = activation(dotProd, coords);";
    }
    let n = this.addBias ? "dotProd = dotProd + getBiasByOutputCoords(coords);" : "";
    return `
      ${e}

      fn writeResult(batch : i32, row : i32, col : i32, chan : i32,
          value : f32) {
        let coord = vec4<i32>(batch, row, col, chan);
        if (coordsInBounds4D(coord, uniforms.outShape)) {
          setOutputAtCoords(batch, row, col, chan, value);
        }
      }

      ${Fr()}
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.yz) * uniforms.stride - uniforms.pad;
        let d2 = coords[3];
        let d1 = d2 / uniforms.channelMul;
        let q = d2 - d1 * uniforms.channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;
        let inputRowEnd = inputRowStart + uniforms.filterHeight *
            uniforms.dilation[0];
        let inputColEnd = inputColStart + uniforms.filterWidth *
            uniforms.dilation[1];

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;

        // Extract if checking out of for loop for performance.
        if (inputRowStart >= 0 && inputColStart >= 0 &&
          inputRowEnd < uniforms.inDims[0] &&
              inputColEnd < uniforms.inDims[1]) {
            // Here using a constant value |this.convInfo.filterHeight| instead
            // of uniform value is in order to loop unrolling.
            for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
              let xR = inputRowStart + wR * uniforms.dilation[0];

              for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                let xC = inputColStart + wC * uniforms.dilation[1];

                let xVal = getX(batch, xR, xC, d1);
                let wVal = getW(wR, wC, d1, q);
                dotProd = dotProd + xVal * wVal;
              }
            }
          } else {
            for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
              let xR = inputRowStart + wR * uniforms.dilation[0];

              if (xR < 0 || xR >= uniforms.inDims[0]) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                let xC = inputColStart + wC * uniforms.dilation[1];

                if (xC < 0 || xC >= uniforms.inDims[1]) {
                  continue;
                }

                let xVal = getX(batch, xR, xC, d1);
                let wVal = getW(wR, wC, d1, q);
                dotProd = dotProd + xVal * wVal;
              }
            }
          }

        ${n}
        ${t}
        writeResult(batch, coords[1], coords[2], d2, dotProd);
      }
    `;
  }
};
function Nre(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a } = t, { strides: i, pad: o, dilations: u, dimRoundingMode: l } = s, c = u;
  c == null && (c = [1, 1]);
  let p = C.computeConv2DInfo(r.shape, a.shape, i, c, o, l, true), d = [{ type: "int32", data: [p.padInfo.top, p.padInfo.left] }, { type: "int32", data: [p.strideHeight, p.strideWidth] }, { type: "int32", data: [p.dilationHeight, p.dilationWidth] }, { type: "int32", data: [p.inHeight, p.inWidth] }], h;
  return p.batchSize === 1 && p.inHeight === p.outHeight && p.inWidth === p.outWidth && p.strideHeight === 1 && p.strideWidth === 1 && p.filterHeight === p.filterWidth && p.inChannels === p.outChannels && p.dilationHeight === 1 && p.dilationWidth === 1 && p.filterHeight === 3 && p.inChannels % 4 === 0 ? h = new O2(p) : (h = new P2(p), d.push({ type: "int32", data: [p.filterHeight] }, { type: "int32", data: [p.filterWidth] }, { type: "int32", data: [p.outChannels / p.inChannels] })), n.runWebGPUProgram(h, [r, a], r.dtype, d);
}
var Tre = { kernelName: Fa, backendName: "webgpu", kernelFunc: Nre };
var z2 = mn({ opSnippet: 0, cpuKernelImpl: nse, supportsComplex: true });
var $re = { kernelName: Za, backendName: "webgpu", kernelFunc: z2 };
var _re = class {
  constructor(e, t) {
    this.workGroupSize = [64, 1, 1], this.variableNames = ["x"], this.uniforms = "reduceSize : i32,", this.size = true, this.inputShape = [e.batchSize, e.inSize];
    let [n] = C.computeOutAndReduceShapes(this.inputShape, [1]);
    this.outputShape = n.length === 0 ? [1] : n, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, [1, 1, 1]), this.reduceType = t, this.shaderKey = `reduce_${t}`;
  }
  getUserCode() {
    let e = "", t = "0.0";
    this.reduceType === "min" || this.reduceType === "max" ? (e = `
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${this.reduceType === "min" ? "<" : ">"} bestValue)
           {  bestValue = candidate; }`, t = "f32(x[offset])") : this.reduceType === "sum" || this.reduceType === "mean" ? e = " bestValue = bestValue + candidate; " : this.reduceType === "prod" && (e = " bestValue = bestValue * candidate; ", t = "1.0");
    let n = this.reduceType === "mean" ? "setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));" : "setOutputAtIndex(outputIndex, bestValue);";
    return `
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${`
         var<workgroup> xBestValues : array<f32, ${this.workGroupSize[0]}>;
       `}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${this.outputShape.length === 1 ? "outputCoords" : "outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${Ue()}
         let outputIndex = index / i32(workGroupSizeX);
         let offset = getOffset(outputIndex);
         var bestValue = ${t};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), workGroupSizeX);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + i32(workGroupSizeX)) {
           let candidate = f32(x[offset + k]);
           ${e}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), workGroupSizeX);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${e}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${n}
        }
       }
     `;
  }
};
function rc(e, t, n, s, r) {
  let a = e.shape.length, i = [], o = w.parseAxisParam(t, e.shape), u = o, l = C.getAxesPermutation(u, a), c = e;
  l != null && (c = Xs({ inputs: { x: e }, attrs: { perm: l }, backend: r }), u = C.getInnerMostAxes(u.length, a), i.push(c)), C.assertAxesAreInnerMostDims(s, u, a);
  let [p, d] = C.computeOutAndReduceShapes(c.shape, u), h = p;
  n && (h = C.expandShapeToKeepDim(p, o));
  let f;
  if ((s === "max" || s === "prod") && r.shouldExecuteOnCPU([c])) {
    let m = r.tensorMap.get(c.dataId).values;
    switch (s) {
      case "max":
        let g = Jne(m, w.sizeFromShape(d), h, e.dtype);
        f = r.makeTensorInfo(h, e.dtype, g);
        break;
      case "prod":
        let { outVals: b, outShape: y, outDtype: v } = ase(c.shape, c.dtype, m, u);
        f = r.makeTensorInfo(y, v, b);
        break;
      default:
        throw new Error(`${s} CPU implementation is not yet supported.`);
    }
  } else {
    let m = w.sizeFromShape(d), b = w.sizeFromShape(c.shape) / m, y = { windowSize: m, inSize: m, batchSize: b, outSize: 1 }, v = s === "mean" ? "float32" : pp(e.dtype), x = [{ type: "int32", data: [m] }], k = new _re(y, s), S = r.runWebGPUProgram(k, [c], v, x);
    i.push(S), f = Me({ inputs: { x: S }, attrs: { shape: h }, backend: r });
  }
  return i.forEach((m) => r.disposeData(m.dataId)), f;
}
function Rv(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s;
  return rc(r, a, i, "sum", n);
}
var Are = { kernelName: ci, backendName: "webgpu", kernelFunc: Rv };
function Ere(e) {
  let { inputs: t, backend: n, attrs: s } = e, { equation: r } = s, a = t, { allDims: i, summedDims: o, idDims: u } = C.decodeEinsumEquation(r, a.length);
  C.checkEinsumDimSizes(i.length, u, a);
  let { path: l, steps: c } = C.getEinsumComputePath(o, u), p = c.length, d = null, h = i.length, f = [];
  for (let m = 0; m < p; ++m) {
    for (let g of c[m]) {
      let { permutationIndices: b, expandDims: y } = C.getEinsumPermutation(h, u[g]), v;
      C.isIdentityPermutation(b) ? v = a[g] : (v = Xs({ inputs: { x: a[g] }, backend: n, attrs: { perm: b } }), f.push(v));
      let x = v.shape.slice();
      for (let k = 0; k < y.length; ++k)
        x.splice(y[k], 0, 1);
      w.arraysEqual(v.shape, x) || (v = Me({ inputs: { x: v }, backend: n, attrs: { shape: x } }), f.push(v)), d === null ? d = v : (d = z2({ inputs: { a: v, b: d }, backend: n }), f.push(d));
    }
    m < p - 1 && (l[m] >= 0 && (d = Rv({ inputs: { x: d }, backend: n, attrs: { axis: l[m] - (i.length - h), keepDims: false } }), f.push(d)), h--);
  }
  for (let m of f)
    m !== d && n.disposeData(m.dataId);
  return d;
}
var Rre = { kernelName: Jd, backendName: "webgpu", kernelFunc: Ere };
var Dre = jt({ opType: 4 });
var Fre = { kernelName: Pa, backendName: "webgpu", kernelFunc: Dre };
var Ore = mn({ opSnippet: 4, dtype: "bool", cpuKernelImpl: Wne });
var Pre = { kernelName: mo, backendName: "webgpu", kernelFunc: Ore };
var M2 = jt({ opType: 5, cpuKernelImpl: Une, dtype: "float32" });
var zre = { kernelName: za, backendName: "webgpu", kernelFunc: M2 };
function Jm(e) {
  let { inputs: t, attrs: n, backend: s } = e, { dim: r } = n, { input: a } = t, i = a.shape.length, o = a.shape.slice(), u = r;
  return r < 0 && (w.assert(-(i + 1) <= r, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), u = i + r + 1), o.splice(u, 0, 1), Me({ inputs: { x: a }, backend: s, attrs: { shape: o } });
}
var Mre = { kernelName: go, backendName: "webgpu", kernelFunc: Jm };
var Lre = jt({ opType: 6, cpuKernelImpl: Gne });
var Bre = { kernelName: bo, backendName: "webgpu", kernelFunc: Lre };
var Vre = class {
  constructor(e) {
    this.variableNames = [], this.outputShape = [], this.uniforms = "value : f32,", this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = "fill";
  }
  getUserCode() {
    return `
    ${Ue()}
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `;
  }
};
function pu(e) {
  let { backend: t, attrs: n } = e, { shape: s, value: r } = n, { dtype: a } = n;
  if (a = a || w.inferDtype(r), a === "string") {
    let i = w.getArrayFromDType(a, w.sizeFromShape(s));
    return i.fill(r), t.makeTensorInfo(s, a, i);
  } else {
    let i = new Vre(s), o = [{ type: "float32", data: [r] }];
    return t.runWebGPUProgram(i, [], a, o);
  }
}
var Wre = { kernelName: ml, backendName: "webgpu", kernelFunc: pu };
var Ure = class {
  constructor(e) {
    this.outputShape = [], this.variableNames = ["x"], this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = "flipLeftRight";
  }
  getUserCode() {
    return `
      ${Ue()}
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `;
  }
};
var Gre = { kernelName: yo, backendName: "webgpu", kernelFunc: ({ inputs: e, backend: t }) => {
  let { image: n } = e, s = t, r = new Ure(n.shape);
  return s.runWebGPUProgram(r, [n], n.dtype);
} };
var Hre = jt({ opType: 7, cpuKernelImpl: Hne });
var qre = { kernelName: Ma, backendName: "webgpu", kernelFunc: Hre };
var jre = mn({ opSnippet: 12, dtype: "int32" });
var Kre = { kernelName: La, backendName: "webgpu", kernelFunc: jre };
var Xre = class {
  constructor(e, t = false) {
    this.outputShape = [0], this.variableNames = [], this.workGroupSize = [256, 1, 1], this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.useImport = t, this.shaderKey = `fromPixels_${this.useImport}`;
  }
  getUserCode() {
    let e = this.useImport ? "textureLoad(src, vec2<i32>(coords.yx));" : "textureLoad(src, vec2<i32>(coords.yx), 0)";
    return `
      @binding(1) @group(0) var src: ${this.useImport ? "texture_external" : "texture_2d<f32>"};

      ${Ue()}
        let flatIndexBase = index * uniforms.numChannels;
        for (var i = 0; i < uniforms.numChannels; i = i + 1) {
          let flatIndex = flatIndexBase + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndexBase);
            let values = ${e};
            result[flatIndex] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `;
  }
};
var Yre = { kernelName: fd, backendName: "webgpu", kernelFunc: Qre };
var Wi;
function Qre(e) {
  let { inputs: t, backend: n, attrs: s } = e, { pixels: r } = t, { numChannels: a } = s;
  if (r == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let i = typeof HTMLVideoElement != "undefined" && r instanceof HTMLVideoElement, o = typeof HTMLImageElement != "undefined" && r instanceof HTMLImageElement, u = typeof HTMLCanvasElement != "undefined" && r instanceof HTMLCanvasElement || typeof OffscreenCanvas != "undefined" && r instanceof OffscreenCanvas, l = typeof ImageBitmap != "undefined" && r instanceof ImageBitmap, [c, p] = i ? [r.videoWidth, r.videoHeight] : [r.width, r.height], d = [p, c, a];
  if (X().getBool("WEBGPU_USE_IMPORT") && i)
    return Pw({ externalImage: r, backend: n, attrs: s, outShape: d, useImport: true });
  if ((i || o) && (Wi == null && (Wi = document.createElement("canvas").getContext("2d")), Wi.canvas.width = c, Wi.canvas.height = p, Wi.drawImage(r, 0, 0, c, p), r = Wi.canvas), l || u || i || o)
    return Pw({ externalImage: r, backend: n, attrs: s, outShape: d, useImport: false });
  let h = r.data, f = h;
  if (a != null && a !== 4) {
    f = new Uint8Array(r.width * r.height * a);
    let b = h.length, y = 0;
    for (let v = 0; v < b; v++)
      v % 4 < a && (f[y++] = h[v]);
  }
  let m = n.makeTensorInfo(d, "int32"), g = n.tensorMap.get(m.dataId);
  return g.values = new Int32Array(f), n.maybeReleaseBuffer(m.dataId), n.uploadToGPU(m.dataId), m;
}
function Pw(e) {
  let { externalImage: t, backend: n, attrs: s, outShape: r, useImport: a } = e, { numChannels: i } = s, o = w.sizeFromShape(r), u = w.computeStrides(r), l = new Xre(r, a), c = [{ type: "uint32", data: [o] }, { type: "uint32", data: [i] }, { type: "uint32", data: [...u] }, { type: "uint32", data: [...l.dispatch] }];
  return n.runFromPixelsProgram(l, r, c, a, t);
}
var Zre = class {
  constructor(e, t, n, s, r) {
    this.uniforms = "varianceEpsilon : f32,", this.workGroupSize = [128, 1, 1], this.size = true, this.variableNames = ["x", "mean", "variance"], C.assertAndGetBroadcastShape(e, t), C.assertAndGetBroadcastShape(e, n), this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), s != null && (C.assertAndGetBroadcastShape(e, s), this.variableNames.push("offset")), r != null && (C.assertAndGetBroadcastShape(e, r), this.variableNames.push("scale")), this.offsetShape = s, this.scaleShape = r, this.shaderKey = "batchNorm";
  }
  getUserCode() {
    let e = "0.0";
    this.offsetShape != null && (e = "getOffsetByOutputIndex(index)");
    let t = "1.0";
    return this.scaleShape != null && (t = "getScaleByOutputIndex(index)"), `
      ${Ue()}
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${e};
          let scaleValue = ${t};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `;
  }
};
var Jre = { kernelName: Ba, backendName: "webgpu", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
  let { x: s, scale: r, offset: a, mean: i, variance: o } = e, { varianceEpsilon: u } = t, l = n, c = [s, i, o], p = null;
  a != null && (p = a.shape, c.push(a));
  let d = null;
  r != null && (d = r.shape, c.push(r));
  let h = new Zre(s.shape, i.shape, o.shape, p, d), f = [{ type: "float32", data: [u] }];
  return l.runWebGPUProgram(h, c, s.dtype, f);
} };
function eae(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a, bias: i, preluActivationWeights: o } = t, { strides: u, pad: l, dataFormat: c, dilations: p, dimRoundingMode: d, activation: h, leakyreluAlpha: f } = s, m = C.convertConv2DDataFormat(c), g = C.computeConv2DInfo(r.shape, a.shape, u, p, l, d, false, m);
  return D2({ x: r, filter: a, convInfo: g, backend: n, bias: i, preluActivationWeights: o, leakyreluAlpha: f, activation: h });
}
var tae = { kernelName: ia, backendName: "webgpu", kernelFunc: eae };
function nae(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, filter: a, bias: i, preluActivationWeights: o } = t, { strides: u, pad: l, dilations: c, dimRoundingMode: p, activation: d, leakyreluAlpha: h } = s, f = c;
  f == null && (f = [1, 1]), w.assert(C.eitherStridesOrDilationsAreOne(u, f), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${f}'`);
  let m = C.computeConv2DInfo(r.shape, a.shape, u, f, l, p, true), g = [r, a], b = i != null, y = o != null;
  b && g.push(i), y && g.push(o);
  let v = [{ type: "int32", data: [m.padInfo.top, m.padInfo.left] }, { type: "int32", data: [m.strideHeight, m.strideWidth] }, { type: "int32", data: [m.dilationHeight, m.dilationWidth] }, { type: "int32", data: [m.inHeight, m.inWidth] }], x;
  return m.batchSize === 1 && m.inHeight === m.outHeight && m.inWidth === m.outWidth && m.strideHeight === 1 && m.strideWidth === 1 && m.filterHeight === m.filterWidth && m.inChannels === m.outChannels && m.dilationHeight === 1 && m.dilationWidth === 1 && m.filterHeight === 3 && m.inChannels % 4 === 0 ? x = new O2(m, b, d, y) : (x = new P2(m, b, d, y), v.push({ type: "int32", data: [m.filterHeight] }, { type: "int32", data: [m.filterWidth] }, { type: "int32", data: [m.outChannels / m.inChannels] })), d === "leakyrelu" && (v.push({ type: "float32", data: [h] }), x.uniforms += " alpha : f32,"), n.runWebGPUProgram(x, g, "float32", v);
}
var sae = { kernelName: oa, backendName: "webgpu", kernelFunc: nae };
var rae = class {
  constructor(e, t) {
    this.variableNames = ["A", "indices"], this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = t, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = `gathernd_${e}`, this.sliceDim = e, this.uniforms = `sliceDim : i32, strides : ${Wt(e)},`;
  }
  getUserCode() {
    let e;
    return this.sliceDim > 1 ? e = "uniforms.strides[j]" : e = "uniforms.strides", `
        ${Ue()}
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${e};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `;
  }
};
function aae(e) {
  let { inputs: t, backend: n } = e, { params: s, indices: r } = t, a = r.shape, i = a[a.length - 1], o = w.sizeFromShape(s.shape), [u, l, c, p] = C.prepareAndValidate(s, r), d = Me({ inputs: { x: r }, backend: n, attrs: { shape: [l, i] } }), h = Me({ inputs: { x: s }, backend: n, attrs: { shape: [w.sizeFromShape(s.shape) / c, c] } });
  if (n.shouldExecuteOnCPU([s, r]) || s.dtype === "string") {
    let y = n.readSync(r.dataId), v = n.bufferSync(s), x = qne(y, v, s.dtype, l, i, c, p, s.shape, o);
    return n.makeTensorInfo(u, s.dtype, x.values);
  }
  let f = new rae(i, [l, c]), m = [{ type: "int32", data: [i] }, { type: "int32", data: p }], g = n.runWebGPUProgram(f, [h, d], h.dtype, m), b = Me({ inputs: { x: g }, backend: n, attrs: { shape: u } });
  return n.disposeData(d.dataId), n.disposeData(h.dataId), n.disposeData(g.dataId), b;
}
var iae = { kernelName: xo, backendName: "webgpu", kernelFunc: aae };
var oae = class {
  constructor(e, t) {
    this.variableNames = ["A", "indices"], this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = e.slice(), this.aShape = e, this.outputShape = t, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = "gather";
  }
  getUserCode() {
    let e = uae(this.aShape);
    return `
      ${Ue()}
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${e}));
        }
      }
    `;
  }
};
function uae(e) {
  let t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], n = [];
  for (let s = 0; s < e.length; s++)
    s === 2 ? n.push("indexZ") : n.push(`${t[s]}`);
  return n.join();
}
function L2(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r, indices: a } = t, { axis: i, batchDims: o } = s, u = w.parseAxisParam(i, r.shape)[0], l = C.segment_util.collectGatherOpShapeInfo(r, a, u, o), c = w.sizeFromShape(a.shape), p = [], d = Me({ inputs: { x: r }, backend: n, attrs: { shape: [l.batchSize, l.outerSize, l.dimSize, l.sliceSize] } }), h = Me({ inputs: { x: a }, backend: n, attrs: { shape: [l.batchSize, c / l.batchSize] } });
  p.push(d), p.push(h);
  let f = [l.batchSize, l.outerSize, c / l.batchSize, l.sliceSize];
  if (n.shouldExecuteOnCPU([r, a])) {
    let v = n.tensorMap.get(h.dataId).values, x = De(h.shape, h.dtype, v), S = n.tensorMap.get(d.dataId).values, $ = De(d.shape, d.dtype, S), E = jne($, x, f);
    return p.forEach((A) => n.disposeData(A.dataId)), n.makeTensorInfo(l.outputShape, E.dtype, E.values);
  }
  let m = new oae(d.shape, f), g = n.runWebGPUProgram(m, [d, h], d.dtype);
  p.push(g);
  let b = Me({ inputs: { x: g }, backend: n, attrs: { shape: l.outputShape } });
  return p.forEach((y) => n.disposeData(y.dataId)), b;
}
var lae = { kernelName: vo, backendName: "webgpu", kernelFunc: L2 };
var cae = mn({ opSnippet: 5, cpuKernelImpl: Xne, dtype: "bool" });
var dae = { kernelName: wo, backendName: "webgpu", kernelFunc: cae };
var pae = mn({ opSnippet: 6, dtype: "bool", cpuKernelImpl: Kne });
var hae = { kernelName: Va, backendName: "webgpu", kernelFunc: pae };
function fae(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { alpha: a } = s, i = [{ type: "float32", data: [a] }], o = new nc(r.shape, 14);
  return o.uniforms = "alpha : f32,", n.runWebGPUProgram(o, [r], "float32", i);
}
var mae = { kernelName: Ua, backendName: "webgpu", kernelFunc: fae };
var gae = mn({ opSnippet: 7, dtype: "bool", cpuKernelImpl: Qne });
var bae = { kernelName: ko, backendName: "webgpu", kernelFunc: gae };
var yae = mn({ opSnippet: 8, dtype: "bool", cpuKernelImpl: Yne });
var vae = { kernelName: Io, backendName: "webgpu", kernelFunc: yae };
var xae = jt({ opType: 9, cpuKernelImpl: Zne });
var wae = { kernelName: Ga, backendName: "webgpu", kernelFunc: xae };
var kae = mn({ opSnippet: 9, dtype: "bool" });
var Iae = { kernelName: So, backendName: "webgpu", kernelFunc: kae };
var Sae = jt({ opType: 10 });
var Cae = { kernelName: xl, backendName: "webgpu", kernelFunc: Sae };
function B2(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { reductionIndices: a, keepDims: i } = s;
  return rc(r, a, i, "max", n);
}
var Nae = { kernelName: Ha, backendName: "webgpu", kernelFunc: B2 };
var Tae = mn({ opSnippet: 15, cpuKernelImpl: ese });
var $ae = { kernelName: qa, backendName: "webgpu", kernelFunc: Tae };
function _ae(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { filterSize: a, strides: i, pad: o, dimRoundingMode: u } = s, l = 1, c = C.computePool2DInfo(r.shape, a, i, l, o, u), p, d = [];
  if (c.filterHeight === 1 && c.filterWidth === 1) {
    if (w.arraysEqual(c.inShape, c.outShape))
      return Wn({ inputs: { x: r }, backend: n });
    p = new A2(c), d.push({ type: "int32", data: [c.strideHeight, c.strideWidth] });
  } else
    p = new _2(c, "max"), d.push({ type: "int32", data: [c.strideHeight, c.strideWidth] }, { type: "int32", data: [c.padInfo.top, c.padInfo.left] }, { type: "int32", data: [c.dilationHeight, c.dilationWidth] }, { type: "int32", data: [c.inHeight, c.inWidth] }, { type: "int32", data: [c.effectiveFilterHeight, c.effectiveFilterWidth] });
  return n.runWebGPUProgram(p, [r], r.dtype, d);
}
var Aae = { kernelName: ja, backendName: "webgpu", kernelFunc: _ae };
function Eae(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { keepDims: a, axis: i } = s;
  return rc(r, i, a, "mean", n);
}
var Rae = { kernelName: Ka, backendName: "webgpu", kernelFunc: Eae };
function Dae(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s;
  return rc(r, a, i, "min", n);
}
var Fae = { kernelName: Xa, backendName: "webgpu", kernelFunc: Dae };
var Oae = mn({ opSnippet: 16, cpuKernelImpl: tse });
var Pae = { kernelName: Ya, backendName: "webgpu", kernelFunc: Oae };
var zae = class {
  constructor(e, t, n) {
    this.uniforms = "", this.variableNames = ["x"], this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = t.map((s, r) => s[0] + e[r] + s[1]), this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.xShape = e, t.map((s, r) => {
      this.uniforms += ` pad${r} : vec2<i32>,`;
    }), this.offset = n === "reflect" ? 0 : 1, this.shaderKey = `mirrorPad_${n}`;
  }
  getUserCode() {
    let e = this.xShape.length, t = this.xShape.map((u, l) => `uniforms.pad${l}[0]`).join(","), n = this.xShape.map((u, l) => `uniforms.pad${l}[0] + uniforms.xShape${e > 1 ? `[${l}]` : ""}`).join(","), s = e === 1 ? "start" : "start[i]", r = e === 1 ? "end" : "end[i]", a = e === 1 ? "outC" : "outC[i]", i = Wt(e), o = e > 1 ? ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, e) : "coords";
    return `
      ${Ue()}
        if (index < uniforms.size) {
          let start = ${i}(${t});
          let end = ${i}(${n});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${e}; i = i + 1) {
            if (${a} < ${s}) {
              ${a} = ${s} * 2 - ${a} - ${this.offset};
            } else if(${a} >= ${r}) {
              ${a} = (${r} - 1) * 2 - ${a} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${o}));
        }
      }
    `;
  }
};
var Mae = { kernelName: Qa, backendName: "webgpu", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
  let { x: s } = e, { paddings: r, mode: a } = t, i = n, o = r.map((c) => ({ type: "int32", data: [c[0], c[1]] })), u = new zae(s.shape, r, a);
  return i.runWebGPUProgram(u, [s], s.dtype, o);
} };
function Lae(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  if (n.shouldExecuteOnCPU([s])) {
    let a = n.tensorMap.get(s.dataId), [i, o] = sse(a.values, s.shape, s.dtype);
    return n.makeTensorInfo(o, s.dtype, i);
  }
  let r = new nc(s.shape, 11);
  return n.runWebGPUProgram(r, [s], s.dtype);
}
var Bae = { kernelName: Co, backendName: "webgpu", kernelFunc: Lae };
function Vae(e) {
  console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t, backend: n, attrs: s } = e, { boxes: r, scores: a } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: u } = s, l = n.readSync(r.dataId), c = n.readSync(a.dataId), { selectedIndices: p } = xs.nonMaxSuppressionV3Impl(l, c, i, o, u);
  return n.makeTensorInfo([p.length], "int32", new Int32Array(p));
}
var Wae = { kernelName: To, backendName: "webgpu", kernelFunc: Vae };
function Uae(e) {
  console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t, backend: n, attrs: s } = e, { boxes: r, scores: a } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: u, softNmsSigma: l } = s, c = n.readSync(r.dataId), p = n.readSync(a.dataId), d = i, h = o, f = u, m = l, { selectedIndices: g, selectedScores: b } = xs.nonMaxSuppressionV5Impl(c, p, d, h, f, m);
  return [n.makeTensorInfo([g.length], "int32", new Int32Array(g)), n.makeTensorInfo([b.length], "float32", new Float32Array(b))];
}
var Gae = { kernelName: $o, backendName: "webgpu", kernelFunc: Uae };
function Vd(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  if (s.dtype === "complex64") {
    let r = sc({ inputs: { input: s }, backend: n }), a = Vd({ inputs: { x: r }, backend: n }), i = eh({ inputs: { input: s }, backend: n }), o = Vd({ inputs: { x: i }, backend: n }), u = cu({ inputs: { real: a, imag: o }, backend: n });
    return n.disposeData(r.dataId), n.disposeData(a.dataId), n.disposeData(i.dataId), n.disposeData(o.dataId), u;
  } else
    return pu({ attrs: { shape: s.shape, dtype: s.dtype, value: s.dtype === "string" ? "" : 0 }, backend: n });
}
var Hae = { kernelName: qo, backendName: "webgpu", kernelFunc: Vd };
function V2(e) {
  let { inputs: t, backend: n } = e, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (s.dtype === "complex64") {
    let r = sc({ inputs: { input: s }, backend: n }), a = V2({ inputs: { x: r }, backend: n }), i = eh({ inputs: { input: s }, backend: n }), o = Vd({ inputs: { x: i }, backend: n }), u = cu({ inputs: { real: a, imag: o }, backend: n });
    return n.disposeData(r.dataId), n.disposeData(a.dataId), n.disposeData(i.dataId), n.disposeData(o.dataId), u;
  } else
    return pu({ attrs: { shape: s.shape, dtype: s.dtype, value: 1 }, backend: n });
}
var qae = { kernelName: _o, backendName: "webgpu", kernelFunc: V2 };
function jae(e) {
  let { inputs: t, backend: n, attrs: s } = e, { axis: r } = s;
  if (t.length === 1)
    return Jm({ inputs: { input: t[0] }, backend: n, attrs: { dim: r } });
  let a = t[0].shape, i = t[0].dtype;
  t.forEach((c) => {
    w.assertShapesMatch(a, c.shape, "All tensors passed to stack must have matching shapes"), w.assert(i === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let o = [], u = t.map((c) => {
    let p = Jm({ inputs: { input: c }, backend: n, attrs: { dim: r } });
    return o.push(p), p;
  }), l = R2({ inputs: u, backend: n, attrs: { axis: r } });
  return o.forEach((c) => n.disposeData(c.dataId)), l;
}
var Kae = { kernelName: Eo, backendName: "webgpu", kernelFunc: jae };
var Xae = class {
  constructor(e, t) {
    this.variableNames = ["x"], this.uniforms = "constantValue : f32,", this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = t.map((n, s) => n[0] + e[s] + n[1]), this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), t.map((n, s) => {
      this.uniforms += ` pad${s} : vec2<i32>,`;
    }), this.xShape = e, this.shaderKey = "pad";
  }
  getUserCode() {
    let e = this.xShape.length, t = Wt(e), n = this.xShape.map((c, p) => `uniforms.pad${p}[0]`).join(","), s = this.xShape.map((c, p) => `uniforms.pad${p}[0] + uniforms.xShape${e > 1 ? `[${p}]` : ""}`).join(","), r = e > 1 ? `${t}(${n})` : `${n}`, a = e > 1 ? `${t}(${s})` : `${s}`, i = e > 1 ? "any(outC < start)" : "outC < start", o = e > 1 ? "any(outC >= end)" : "outC >= end", u = e > 1 ? ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, e) : "coords";
    return `
      ${Ue()}
        if (index < uniforms.size) {
          let start = ${r};
          let end = ${a};
          let outC = getCoordsFromIndex(index);

          if (${i} || ${o}) {
            setOutputAtIndex(index, uniforms.constantValue);
          } else {
            let coords = outC - start;
            setOutputAtIndex(index, getX(${u}));
          }
        }
      }
    `;
  }
};
var W2 = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { paddings: a, constantValue: i } = s;
  if (a.every((l) => w.arraysEqual(l, [0, 0])))
    return Wn({ inputs: { x: r }, backend: n });
  if (w.sizeFromShape(r.shape) === 0) {
    let l = a.map((c, p) => c[0] + r.shape[p] + c[1]);
    return pu({ backend: n, attrs: { shape: l, value: i, dtype: r.dtype } });
  }
  let o = [{ type: "float32", data: [i] }];
  a.map((l) => o.push({ type: "int32", data: [l[0], l[1]] }));
  let u = new Xae(r.shape, a);
  return n.runWebGPUProgram(u, [r], r.dtype, o);
};
var Yae = { kernelName: Ja, backendName: "webgpu", kernelFunc: W2 };
var Qae = mn({ opSnippet: 13 });
var Zae = { kernelName: ei, backendName: "webgpu", kernelFunc: Qae };
function Jae(e) {
  let { inputs: t, backend: n } = e, { x: s, alpha: r } = t, a = new T2(14, s.shape, r.shape);
  return n.runWebGPUProgram(a, [s, r], "float32");
}
var eie = { kernelName: ti, backendName: "webgpu", kernelFunc: Jae };
function tie(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, keepDims: i } = s;
  return rc(r, a, i, "prod", n);
}
var nie = { kernelName: ni, backendName: "webgpu", kernelFunc: tie };
var sie = (e) => {
  let { backend: t, attrs: n } = e, { start: s, stop: r, step: a, dtype: i } = n, o = ise(s, r, a, i);
  return t.makeTensorInfo([o.length], i, o);
};
var rie = { kernelName: Il, backendName: "webgpu", kernelFunc: sie };
var U2 = mn({ opSnippet: 3 });
var aie = { kernelName: Oa, backendName: "webgpu", kernelFunc: U2 };
var iie = jt({ opType: 12 });
var oie = { kernelName: si, backendName: "webgpu", kernelFunc: iie };
var uie = jt({ opType: 13 });
var lie = { kernelName: ai, backendName: "webgpu", kernelFunc: uie };
var cie = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.uniforms = "adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,", this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = [e[0], t, n, e[3]], this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = "resizeBilinear";
  }
  getUserCode() {
    return `
      ${Ue()}
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `;
  }
};
function die(e) {
  let { inputs: t, backend: n, attrs: s } = e, { images: r } = t, { alignCorners: a, size: i, halfPixelCenters: o } = s, [u, l] = i, c = a && u > 1 ? 1 : 0, p = a && l > 1 ? 1 : 0, h = [{ type: "float32", data: [c, p] }, { type: "float32", data: [o ? 0.5 : 0] }], f = new cie(r.shape, u, l);
  return n.runWebGPUProgram(f, [r], "float32", h);
}
var pie = { kernelName: ri, backendName: "webgpu", kernelFunc: die };
var hie = class {
  constructor(e, t, n, s) {
    this.variableNames = ["x"], this.uniforms = "adjustHeightWidth : vec2<f32>, roundBase : f32,", this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = [e[0], t, n, e[3]], this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.halfPixelCenters = s, this.shaderKey = `resizeNearest_${s}`;
  }
  getUserCode() {
    let e;
    return this.halfPixelCenters ? e = "max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))" : e = "vec2<f32>(rc) * effectiveInputOverOutputRatioRC", `
      ${Ue()}
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${e};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `;
  }
};
function fie(e) {
  let { inputs: t, backend: n, attrs: s } = e, { images: r } = t, { alignCorners: a, halfPixelCenters: i, size: o } = s, [u, l] = o, c = a && u > 1 ? 1 : 0, p = a && l > 1 ? 1 : 0, h = [{ type: "float32", data: [c, p] }, { type: "float32", data: [a ? 0.5 : 0] }], f = new hie(r.shape, u, l, i);
  return n.runWebGPUProgram(f, [r], r.dtype, h);
}
var mie = { kernelName: Cl, backendName: "webgpu", kernelFunc: fie };
var gie = class {
  constructor(e, t) {
    this.outputShape = [], this.variableNames = ["x"], this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.uniforms = `centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`, this.shaderKey = "rotate", this.outputShape = e, typeof t == "number" ? (this.uniforms += " fillValue : f32,", this.fillSnippet = "var outputValue = uniforms.fillValue;", this.shaderKey += "_float") : (this.uniforms += " fillValue : vec3<f32>,", this.fillSnippet = "var outputValue = uniforms.fillValue[coords[3]];", this.shaderKey += "_vec3");
  }
  getUserCode() {
    return `
        ${Ue()}

          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `;
  }
};
var bie = { kernelName: jo, backendName: "webgpu", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => {
  let { image: s } = e, { radians: r, fillValue: a, center: i } = t, o = n, u = new gie(s.shape, a), [l, c] = C.getImageCenter(i, s.shape[1], s.shape[2]), p = [{ type: "float32", data: [l] }, { type: "float32", data: [c] }, { type: "float32", data: [Math.sin(r)] }, { type: "float32", data: [Math.cos(r)] }];
  return typeof a == "number" ? p.push({ type: "float32", data: [Number.parseFloat(a.toFixed(2))] }) : p.push({ type: "float32", data: a }), o.runWebGPUProgram(u, [s], s.dtype, p);
} };
var yie = jt({ opType: 15, cpuKernelImpl: ose });
var vie = { kernelName: ii, backendName: "webgpu", kernelFunc: yie };
var xie = class {
  constructor(e, t, n, s, r, a, i) {
    this.variableNames = ["updates", "indices"], this.workGroupSize = [64, 1, 1], this.atomic = true, this.outputShape = a, this.type = i, this.dispatchLayout = Le(e), this.dispatch = $e(this.dispatchLayout, e, this.workGroupSize), this.sliceDimGreaterThanOne = t > 1, this.shaderKey = `scatter_${n}_${s}_${this.sliceDimGreaterThanOne}_${i}`;
    let o = Wt(r.length);
    this.uniforms = `sliceDim : i32, strides: ${o}, size: i32,`, this.updatesRank = s, this.indicesRank = n;
  }
  getUserCode() {
    let e = "";
    this.indicesRank === 1 ? e = "coords[0]" : this.indicesRank === 2 && (e = "coords[0], j");
    let t = `getIndices(${e})`, n = this.sliceDimGreaterThanOne ? "uniforms.strides[j]" : "uniforms.strides", s = "", r = "", a = "";
    this.updatesRank === 1 ? (s = "coords[0]", r = "flattenedIndex", a = `
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `) : this.updatesRank === 2 && (s = "coords[0], coords[1]", r = "vec2<i32>(flattenedIndex, coords[1])", a = `
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        let d0 = index / uniforms.updatesShape[1];
        let d1 = index - d0 * uniforms.updatesShape[1];
        return vec2<i32>(d0, d1);
      }
      `);
    let i = `getUpdates(${s})`, o = this.type === "int32" ? "atomicAdd(&(result[flatIndex]), i32(updateValue));" : `
     var assumed = atomicLoad(&(result[flatIndex]));
     var success = 0;
     for (; success == 0;) {
       let new = bitcast<f32>(assumed) + updateValue;
       let newI32 = bitcast<i32>(new);
       let resValue = atomicCompareExchangeWeak(&(result[flatIndex]), assumed, newI32);
       assumed = resValue[0];
       success = resValue[1];
     }
     `;
    return `
    ${a}

      ${Ue()}

        if (index < uniforms.size) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${t}));
            flattenedIndex = flattenedIndex + indexInside * ${n};
          }
          let updateValue = ${i};
          let flatIndex = getOutputIndexFromCoords(${r});

         ${o}
        }
      }`;
  }
};
function wie(e) {
  let { inputs: t, backend: n, attrs: s } = e, { indices: r, updates: a } = t, { shape: i } = s, { sliceRank: o, numUpdates: u, sliceSize: l, strides: c, outputSize: p } = C.calculateShapes(a, r, i), d = [p / l, l];
  if (p === 0)
    return n.makeTensorInfo(i, r.dtype);
  let h = Me({ inputs: { x: r }, backend: n, attrs: { shape: [u, o] } }), f = Me({ inputs: { x: a }, backend: n, attrs: { shape: [u, l] } }), m = f.dtype, g = pu({ backend: n, attrs: { shape: d, value: 0, dtype: m } }), b = w.sizeFromShape(f.shape), y = [{ type: "int32", data: [o] }, { type: "int32", data: c }, { type: "int32", data: [b] }], v = new xie(f.shape, o, h.shape.length, f.shape.length, c, d, m), x = n.runWebGPUProgram(v, [f, h], m, y, g), k = Me({ inputs: { x }, backend: n, attrs: { shape: i } });
  return n.disposeData(h.dataId), n.disposeData(f.dataId), n.disposeData(x.dataId), k;
}
var kie = { kernelName: Oo, backendName: "webgpu", kernelFunc: wie };
var Iie = class {
  constructor(e, t, n) {
    this.variableNames = ["c", "a", "b"], this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = t, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.cRank = e, this.rank = n, this.shaderKey = "select";
  }
  getUserCode() {
    let e, t;
    if (this.rank > 4)
      throw Error(`Where for rank ${this.rank} is not yet supported`);
    if (this.rank === 1)
      t = "resRC", e = "resRC";
    else {
      let s = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], r = [], a = [];
      for (let i = 0; i < this.outputShape.length; i++)
        a.push(`${s[i]}`), i < this.cRank && r.push(`${s[i]}`);
      e = r.join(), t = a.join();
    }
    return `
      ${Ue()}
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${e});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${t}));
          } else {
            setOutputAtIndex(index, getB(${t}));
          }
        }
      }
    `;
  }
};
function Sie(e) {
  let { inputs: t, backend: n } = e, { condition: s, t: r, e: a } = t, i = new Iie(s.shape.length, r.shape, r.shape.length);
  return n.runWebGPUProgram(i, [s, r, a], ln(r.dtype, a.dtype));
}
var Cie = { kernelName: Po, backendName: "webgpu", kernelFunc: Sie };
var Nie = jt({ opType: 18 });
var Tie = { kernelName: ui, backendName: "webgpu", kernelFunc: Nie };
var $ie = jt({ opType: 16 });
var _ie = { kernelName: oi, backendName: "webgpu", kernelFunc: $ie };
var Aie = jt({ opType: 17 });
var Eie = { kernelName: Mo, backendName: "webgpu", kernelFunc: Aie };
var G2 = mn({ opSnippet: 2, cpuKernelImpl: pse, supportsComplex: true });
var Rie = { kernelName: hi, backendName: "webgpu", kernelFunc: G2 };
function Die(e) {
  let { inputs: t, backend: n, attrs: s } = e, { logits: r } = t, { dim: a } = s, i = w.parseAxisParam([a], r.shape), o = B2({ inputs: { x: r }, backend: n, attrs: { reductionIndices: i, keepDims: false } }), u = C.expandShapeToKeepDim(o.shape, i), l = Me({ inputs: { x: o }, backend: n, attrs: { shape: u } }), c = G2({ inputs: { a: r, b: l }, backend: n }), p = M2({ inputs: { x: c }, backend: n }), d = Rv({ inputs: { x: p }, backend: n, attrs: { axis: i, keepDims: false } }), h = Me({ inputs: { x: d }, backend: n, attrs: { shape: u } }), f = U2({ inputs: { a: p, b: h }, backend: n });
  return n.disposeData(o.dataId), n.disposeData(l.dataId), n.disposeData(c.dataId), n.disposeData(p.dataId), n.disposeData(d.dataId), n.disposeData(h.dataId), f;
}
var Fie = { kernelName: di, backendName: "webgpu", kernelFunc: Die };
var Oie = (e) => {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockShape: a, paddings: i } = s;
  w.assert(r.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");
  let o = a.reduce((b, y) => b * y), u = [[0, 0]];
  u.push(...i);
  for (let b = 1 + a.length; b < r.shape.length; ++b)
    u.push([0, 0]);
  let l = [], c = W2({ inputs: { x: r }, backend: n, attrs: { paddings: u, constantValue: 0 } }), p = C.getReshaped(c.shape, a, o, false), d = C.getPermuted(p.length, a.length, false), h = C.getReshapedPermuted(c.shape, a, o, false), f = Me({ inputs: { x: c }, backend: n, attrs: { shape: p } }), m = Xs({ inputs: { x: f }, backend: n, attrs: { perm: d } }), g = Me({ inputs: { x: m }, backend: n, attrs: { shape: h } });
  return l.push(c), l.push(f), l.push(m), l.forEach((b) => n.disposeData(b.dataId)), g;
};
var Pie = { kernelName: Lo, backendName: "webgpu", kernelFunc: Oie };
var zie = class {
  constructor(e, t, n, s, r, a, i = true) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.workGroupSize = [64, 1, 1], this.workPerThread = 4, this.size = true, this.outputShape = a, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [this.workPerThread, 1, 1]);
    let o = t > 1;
    this.shaderKey = `scatter_${n}_${s}_${o}`;
    let u = Wt(r.length);
    this.uniforms = `updateSize : i32, sliceDim : i32, strides: ${u},`;
    let l = "";
    n === 1 ? l = "i" : n === 2 && (l = "i, j"), this.indicesSnippet = `getIndices(${l})`;
    let c = "";
    s === 1 ? c = "i" : s === 2 && (c = "i, coords[1]"), this.updatesSnippet = `getUpdates(${c})`, this.strideString = o ? "uniforms.strides[j]" : "uniforms.strides";
  }
  getUserCode() {
    return `
      ${Ue()}

        let globalIndex = index * ${this.workPerThread};
        if (globalIndex < uniforms.size) {
          var sum = vec4<f32>(0.0);
          var found = vec4<bool>(false);
          for (var i = 0; i < uniforms.updateSize; i = i + 1) {
            var flattenedIndex = 0;
            for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
              let indexInside = i32(round(${this.indicesSnippet}));
              flattenedIndex = flattenedIndex + indexInside * ${this.strideString};
            }
            for (var innerIndex = 0; innerIndex < ${this.workPerThread}; innerIndex = innerIndex + 1) {
              let curIndex = globalIndex + innerIndex;
              let coords = getCoordsFromIndex(curIndex);
              if (flattenedIndex == coords[0]) {
                sum[innerIndex] = sum[innerIndex] + ${this.updatesSnippet};
                found[innerIndex] = true;
              }
            }
          }
          for (var innerIndex = 0; innerIndex < ${this.workPerThread}; innerIndex = innerIndex + 1) {
            let curIndex = globalIndex + innerIndex;
            if (curIndex < uniforms.size)
            {
              setOutputAtIndex(curIndex, mix(getDefaultValue(), sum[innerIndex], f32(found[innerIndex])));
            }
          }
        }
      }`;
  }
};
function Mie(e) {
  let { inputs: t, backend: n, attrs: s } = e, { sparseIndices: r, sparseValues: a, defaultValue: i } = t, { outputShape: o } = s, { sliceRank: u, numUpdates: l, strides: c, outputSize: p } = C.calculateShapes(a, r, o), d = false, h = [{ type: "int32", data: [l] }, { type: "int32", data: [u] }, { type: "int32", data: c }], f = new zie(l, u, r.shape.length, a.shape.length, c, [p, 1], d), m = n.runWebGPUProgram(f, [a, r, i], a.dtype, h), g = Me({ inputs: { x: m }, backend: n, attrs: { shape: o } });
  return n.disposeData(m.dataId), g;
}
var Lie = { kernelName: up, backendName: "webgpu", kernelFunc: Mie };
function Bie(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { numOrSizeSplits: a, axis: i } = s, o = w.parseAxisParam(i, r.shape)[0], u = C.prepareSplitSize(r, a, o), l = r.shape.length, c = new Array(l).fill(0), p = r.shape.slice();
  return u.map((d) => {
    let h = [...p];
    h[o] = d;
    let f = du({ inputs: { x: r }, backend: n, attrs: { begin: c, size: h } });
    return c[o] += d, f;
  });
}
var Vie = { kernelName: Bo, backendName: "webgpu", kernelFunc: Bie };
var Wie = jt({ opType: 19 });
var Uie = { kernelName: li, backendName: "webgpu", kernelFunc: Wie };
var Gie = { kernelName: Al, backendName: "webgpu", kernelFunc: ({ inputs: e, backend: t }) => {
  let { x: n } = e, s = t, r = new nc(n.shape, 20);
  return s.runWebGPUProgram(r, [n], n.dtype);
} };
var Hie = mn({ opSnippet: 11 });
var qie = { kernelName: pi, backendName: "webgpu", kernelFunc: Hie };
var jie = class {
  constructor(e) {
    this.variableNames = ["x"], this.workPerThread = 1, this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize, [this.workPerThread, 1, 1]);
    let t = Wt(this.outputShape.length);
    this.uniforms = `begin : ${t},  strides : ${t}, `, this.shaderKey = "stridedSlice";
  }
  getUserCode() {
    let e = this.outputShape.length, t = "";
    if (e === 1)
      t = "coords * uniforms.strides + uniforms.begin";
    else {
      let s = 0;
      t = this.outputShape.map((r, a) => (s++, this.outputShape.length === 1 ? `coords * uniforms.strides[${a}] + uniforms.begin[${a}]` : `coords[${s - 1}] * uniforms.strides[${a}] + uniforms.begin[${a}]`)).join(",");
    }
    return `
       ${Ue()}
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${t}));
         }
       }
     `;
  }
};
function Kie(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { begin: a, end: i, strides: o, beginMask: u, endMask: l, ellipsisMask: c, newAxisMask: p, shrinkAxisMask: d } = s, { finalShapeSparse: h, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: b, begin: y, end: v, strides: x } = wt.sliceInfo(r.shape, a, i, o, u, l, c, p, d), k;
  if (m)
    k = Me({ inputs: { x: r }, backend: n, attrs: { shape: f } });
  else if (g || b) {
    w.assert(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    let S = wt.computeOutShape(y, v, x), $ = du({ inputs: { x: r }, backend: n, attrs: { begin: y, size: S } });
    k = Me({ inputs: { x: $ }, backend: n, attrs: { shape: f } }), n.disposeData($.dataId);
  } else if (n.shouldExecuteOnCPU([r])) {
    let $ = n.readSync(r.dataId), E = De(r.shape, r.dtype, $), A = cse(h, E, x, y);
    k = n.makeTensorInfo(f, r.dtype, A.values);
  } else {
    let $ = new jie(h), E = [{ type: "int32", data: y }, { type: "int32", data: x }], A = n.runWebGPUProgram($, [r], r.dtype, E);
    k = Me({ inputs: { x: A }, backend: n, attrs: { shape: f } }), n.disposeData(A.dataId);
  }
  return k;
}
var Xie = { kernelName: Vo, backendName: "webgpu", kernelFunc: Kie };
function Yie(e) {
  let { inputs: t, backend: n, attrs: s } = e, { separator: r, nGramWidths: a, leftPad: i, rightPad: o, padWidth: u, preserveShortSequences: l } = s, { data: c, dataSplits: p } = t, d = n.readSync(c.dataId), h = n.readSync(p.dataId), [f, m] = dse(d, h, r, a, i, o, u, l);
  return [n.makeTensorInfo([f.length], "string", f), n.makeTensorInfo(p.shape, "int32", m)];
}
var Qie = { kernelName: lp, backendName: "webgpu", kernelFunc: Yie };
var Zie = jt({ opType: 21 });
var Jie = { kernelName: fi, backendName: "webgpu", kernelFunc: Zie };
var eoe = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.workGroupSize = [64, 1, 1], this.size = true;
    let n = new Array(e.length);
    for (let s = 0; s < n.length; s++)
      n[s] = e[s] * t[s];
    this.outputShape = n, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.rank = this.outputShape.length, this.shaderKey = "tile";
  }
  getUserCode() {
    let e = toe(this.rank, "uniforms.");
    return `
      ${Ue()}
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${e}));
        }
      }
    `;
  }
};
function toe(e, t = "") {
  if (e >= 5)
    throw Error(`Tile for rank ${e} is not yet supported`);
  if (e === 1)
    return `(resRC % ${t}aShape)`;
  let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [];
  for (let r = 0; r < e; r++)
    s.push(`(${n[r]} % ${t}aShape[${r}])`);
  return s.join();
}
function noe(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { reps: a } = s;
  if (n.shouldExecuteOnCPU([r]) || r.dtype === "string" || r.shape.length >= 5) {
    let u = n.readSync(r.dataId), l = r.dtype === "string" ? u.map((d) => w.decodeString(d)) : u, c = De(r.shape, r.dtype, l), p = hse(c, a);
    return n.makeTensorInfo(p.shape, p.dtype, p.values);
  }
  let i = new eoe(r.shape, a);
  return n.runWebGPUProgram(i, [r], r.dtype);
}
var soe = { kernelName: Nr, backendName: "webgpu", kernelFunc: noe };
var roe = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.workGroupSize = [256, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.uniforms = `inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`, this.shaderKey = "swap";
  }
  getUserCode() {
    return `
        ${Ue()}
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `;
  }
};
var aoe = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.workGroupSize = [256, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.uniforms = "inputSize : i32, firstPass : i32, k : i32,", this.shaderKey = "merge";
  }
  getUserCode() {
    return `
        ${Ue()}
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `;
  }
};
function Ui(e, t) {
  t !== null && e.disposeData(t.dataId);
}
function zw(e) {
  let t = 1;
  for (; t < e; )
    t *= 2;
  return t;
}
function ioe(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { k: a, sorted: i } = s, o = r.shape, u = o[o.length - 1];
  if (n.shouldExecuteOnCPU([r])) {
    let k = n.readSync(r.dataId), [S, $] = fse(k, o, r.dtype, a, i);
    return [n.makeTensorInfo(S.shape, S.dtype, S.values), n.makeTensorInfo($.shape, $.dtype, $.values)];
  }
  if (a === 0)
    return o[o.length - 1] = 0, [n.makeTensorInfo(o, r.dtype, []), n.makeTensorInfo(o, "int32", [])];
  if (u === 1)
    return [r, pu({ attrs: { shape: o, dtype: "int32", value: 0 }, backend: n })];
  let c = w.sizeFromShape(o) / u, p = Me({ inputs: { x: r }, attrs: { shape: [c, u] }, backend: n }), d = zw(a), h = zw(u), f = null, m = () => f === null ? [p, p] : [p, f], g = (k, S, $) => {
    let E = m(), A = new roe($), R = [{ type: "int32", data: [u] }, { type: "int32", data: [f === null ? 1 : 0] }, { type: "float32", data: [Number.NEGATIVE_INFINITY] }, { type: "int32", data: [k] }, { type: "int32", data: [S] }], F = f;
    f = n.runWebGPUProgram(A, E, "int32", R), Ui(n, F);
  };
  for (let k = 1; k < d; k *= 2) {
    let S = k * 2;
    for (let $ = k; $ >= 1; $ /= 2)
      g(S, $, [c, h]);
  }
  for (let k = h; k > d; k /= 2) {
    let S = m(), $ = new aoe([c, k / 2]), A = [{ type: "int32", data: [u] }, { type: "int32", data: [f === null ? 1 : 0] }, { type: "int32", data: [d] }], P = f;
    f = n.runWebGPUProgram($, S, "int32", A), Ui(n, P);
    let R = d / 2, F = R * 2;
    for (let T = R; T >= 1; T /= 2)
      g(F, T, f.shape);
  }
  let b = f;
  f = du({ inputs: { x: f }, backend: n, attrs: { begin: 0, size: [c, a] } }), Ui(n, b);
  let y = L2({ inputs: { x: p, indices: f }, backend: n, attrs: { axis: 1, batchDims: 1 } });
  Ui(n, p);
  let v = o.slice(0, -1);
  v.push(a), b = f, f = Me({ inputs: { x: f }, attrs: { shape: v }, backend: n }), Ui(n, b);
  let x = y;
  return y = Me({ inputs: { x: y }, attrs: { shape: v }, backend: n }), Ui(n, x), [y, f];
}
var ooe = { kernelName: Uo, backendName: "webgpu", kernelFunc: ioe };
var uoe = class {
  constructor(e) {
    this.variableNames = ["Image", "Transforms"], this.uniforms = "interpolationModeId : i32, fillModeId : i32, fillValue : f32,", this.workGroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = Le(this.outputShape), this.dispatch = $e(this.dispatchLayout, this.outputShape, this.workGroupSize), this.shaderKey = "transform";
  }
  getUserCode() {
    return `
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${Ue()}
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `;
  }
};
function loe(e) {
  let { inputs: t, backend: n, attrs: s } = e, { image: r, transforms: a } = t, { interpolation: i, fillMode: o, fillValue: u, outputShape: l } = s, [c, p, d, h] = r.shape, [f, m] = l != null ? l : [p, d], g = [c, f, m, h], b = new uoe(g), y = i === "nearest" ? 1 : 2, v;
  switch (o) {
    case "constant":
      v = 1;
      break;
    case "reflect":
      v = 2;
      break;
    case "wrap":
      v = 3;
      break;
    case "nearest":
      v = 4;
      break;
    default:
      v = 1;
      break;
  }
  let x = [{ type: "int32", data: [y] }, { type: "int32", data: [v] }, { type: "float32", data: [u] }];
  return n.runWebGPUProgram(b, [r, a], "float32", x);
}
var coe = { kernelName: Go, backendName: "webgpu", kernelFunc: loe };
function doe(e) {
  let { inputs: t, backend: n, attrs: s } = e, { value: r } = t, { axis: a } = s;
  a < 0 && (a += r.shape.length);
  let i = r, o = i.shape.length, u = r.shape[a], l = new Array(o - 1), c = 0;
  for (let m = 0; m < o; m++)
    m !== a && (l[c++] = i.shape[m]);
  let p = [], d = new Array(o).fill(0), h = i.shape.slice();
  h[a] = 1;
  let f = new Array(u);
  for (let m = 0; m < f.length; m++) {
    d[a] = m;
    let g = du({ inputs: { x: i }, backend: n, attrs: { begin: d, size: h } }), b = Me({ inputs: { x: g }, backend: n, attrs: { shape: l } });
    f[m] = b, p.push(g);
  }
  return p.forEach((m) => n.disposeData(m.dataId)), f;
}
var poe = { kernelName: Ho, backendName: "webgpu", kernelFunc: doe };
var hoe = [Fne, bse, vse, kse, $se, Ase, Rse, Fse, Lse, Use, Hse, Xse, Mne, Jse, ore, dre, hre, mre, yre, xre, kre, Cre, Tre, Rre, Fre, Pre, zre, Mre, Bre, Wre, Gre, Yre, qre, Kre, Jre, tae, sae, iae, lae, dae, hae, zne, Qse, mae, bae, vae, wae, Iae, Cae, Nae, $ae, Aae, Rae, Fae, Pae, Mae, $re, Bae, Wae, Gae, Bse, qae, Kae, Yae, Zae, eie, nie, rie, Vse, aie, oie, lie, Rne, pie, mie, bie, vie, kie, Cie, Tie, _ie, Eie, zse, Xie, Qie, Fie, Pie, Lie, Vie, Uie, Gie, qie, Rie, Are, Jie, soe, ooe, coe, Nse, poe, Hae];
for (let e of hoe)
  El(e);
var foe = class {
  constructor(e) {
    this.device = e, this.numUsedBuffers = 0, this.numFreeBuffers = 0, this.freeBuffers = /* @__PURE__ */ new Map(), this.usedBuffers = /* @__PURE__ */ new Map(), this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
  acquireUploadBuffer(e, t) {
    return this.acquireBuffer(e, t, true);
  }
  acquireBuffer(e, t, n = false) {
    let s = Mw(e, t);
    if (this.freeBuffers.has(s) || this.freeBuffers.set(s, []), this.usedBuffers.has(s) || this.usedBuffers.set(s, []), this.numBytesUsed += e, this.numUsedBuffers++, this.freeBuffers.get(s).length > 0) {
      this.numFreeBuffers--;
      let a = this.freeBuffers.get(s).shift();
      return this.usedBuffers.get(s).push(a), a;
    }
    this.numBytesAllocated += e;
    let r = this.device.createBuffer({ mappedAtCreation: n, size: e, usage: t });
    return this.usedBuffers.get(s).push(r), r;
  }
  releaseBuffer(e, t, n) {
    if (this.freeBuffers.size === 0)
      return;
    let s = Mw(t, n);
    this.freeBuffers.has(s) || this.freeBuffers.set(s, []), this.freeBuffers.get(s).push(e), this.numFreeBuffers++, this.numUsedBuffers--;
    let r = this.usedBuffers.get(s), a = r.indexOf(e);
    if (a < 0)
      throw new Error("Cannot release a buffer that was never provided by this buffer manager");
    r.splice(a, 1), this.numBytesUsed -= t;
  }
  releaseUploadBuffer(e, t, n) {
    e.mapAsync(GPUMapMode.WRITE).then(() => {
      this.releaseBuffer(e, t, n);
    }, (s) => {
    });
  }
  getNumUsedBuffers() {
    return this.numUsedBuffers;
  }
  getNumFreeBuffers() {
    return this.numFreeBuffers;
  }
  dispose() {
    this.freeBuffers.forEach((e, t) => {
      e.forEach((n) => {
        n.destroy();
      });
    }), this.usedBuffers.forEach((e, t) => {
      e.forEach((n) => {
        n.destroy();
      });
    }), this.freeBuffers = /* @__PURE__ */ new Map(), this.usedBuffers = /* @__PURE__ */ new Map(), this.numUsedBuffers = 0, this.numFreeBuffers = 0, this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
};
function Mw(e, t) {
  return `${e}_${t}`;
}
var moe = class {
  constructor(e) {
    this.device = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = /* @__PURE__ */ new Map(), this.usedTextures = /* @__PURE__ */ new Map(), this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
  acquireTexture(e, t, n, s) {
    let r = Bw(n), a = e * t * r, i = Lw(e, t, n, s);
    if (this.freeTextures.has(i) || this.freeTextures.set(i, []), this.usedTextures.has(i) || this.usedTextures.set(i, []), this.numBytesUsed += a, this.numUsedTextures++, this.freeTextures.get(i).length > 0) {
      this.numFreeTextures--;
      let u = this.freeTextures.get(i).shift();
      return this.usedTextures.get(i).push(u), u;
    }
    this.numBytesAllocated += a;
    let o = this.device.createTexture({ size: [e, t], format: n, usage: s });
    return this.usedTextures.get(i).push(o), o;
  }
  releaseTexture(e, t, n, s, r) {
    if (this.freeTextures.size === 0)
      return;
    let a = Lw(t, n, s, r);
    this.freeTextures.has(a) || this.freeTextures.set(a, []), this.freeTextures.get(a).push(e), this.numFreeTextures++, this.numUsedTextures--;
    let i = this.usedTextures.get(a), o = i.indexOf(e);
    if (o < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    i.splice(o, 1);
    let u = Bw(s), l = t * n * u;
    this.numBytesUsed -= l;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    this.freeTextures.forEach((e, t) => {
      e.forEach((n) => {
        n.destroy();
      });
    }), this.usedTextures.forEach((e, t) => {
      e.forEach((n) => {
        n.destroy();
      });
    }), this.freeTextures = /* @__PURE__ */ new Map(), this.usedTextures = /* @__PURE__ */ new Map(), this.numUsedTextures = 0, this.numFreeTextures = 0, this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
};
function Lw(e, t, n, s) {
  return `${e}_${t}_${n}_${s}`;
}
function Bw(e) {
  if (e === "rgba8unorm")
    return 16;
  throw new Error(`${e} is not supported!`);
}
var goe = (e, t, n, s, r) => {
  let a = [s, ...n];
  return r && a.push(r), e.createBindGroup({ layout: t, entries: a.map((i, o) => ({ binding: o, resource: i })) });
};
var Vw = (e, t, n, s, r, a = false) => {
  let i = { dtype: r.dtype, shape: r.shape }, o = vne(s, i, t, a), u = e.createShaderModule({ code: o, label: t.constructor.name });
  return e.createComputePipeline({ layout: n, compute: { module: u, entryPoint: "main" }, label: t.constructor.name });
};
function Ww(e, t, n = [], s = "", r = "") {
  return e.shaderKey + "_" + (e.workGroupSize ? e.workGroupSize.join(",") : "") + t.map((i) => i.length).join(",") + n.join(",") + e.variableNames.join(",") + s + r;
}
var boe = X().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD");
var Uw = (e, t) => {
  let n = e.limits.maxComputeWorkgroupsPerDimension, s = t.dispatchLayout, r = t.dispatch;
  if (r.every((i) => i <= n))
    return r;
  w.assert(r[0] > n && s.y === void 0 && s.z === void 0, () => "Dispatch size exceeds WebGPU limits in Y or Z dimension.");
  let a = Math.ceil(Math.sqrt(r[0]));
  return a > n ? (a = Math.ceil(Math.cbrt(r[0])), w.assert(a <= n, () => "Total dispatch size exceeds WebGPU maximum."), [a, a, a]) : [a, a, 1];
};
var H2 = class extends sl {
  constructor(e, t = false) {
    if (super(), this.commandQueueOwnedIds = /* @__PURE__ */ new WeakSet(), this.tensorDisposalQueue = [], this.uniformDisposalQueue = [], this.stagingDisposalQueue = [], this.textureDisposalQueue = [], this.disposed = false, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.dispatchNumberInEncoder = 0, this.fromPixelTextureLayout = null, this.fromPixelImportTextureLayout = null, !_v())
      throw new Error("WebGPU is not supported on this device");
    this.layoutCache = {}, this.pipelineCache = {}, this.device = e, this.queue = e.queue, this.currentCommandEncoder = null, this.currentComputePass = null, this.supportTimeQuery = t, this.bufferManager = new foe(this.device), this.textureManager = new moe(this.device), this.tensorMap = new Hd(this, Ss()), this.supportTimeQuery && (this.querySet = this.device.createQuerySet({ type: "timestamp", count: 2 })), X().getBool("WEBGPU_USE_PROFILE_TOOL") && (this.dummyCanvas = document.createElement("canvas"), this.dummyCanvas.width = 1, this.dummyCanvas.height = 1, this.dummyContext = this.dummyCanvas.getContext("webgpu"), this.dummyContext.configure({ device: e, format: "bgra8unorm" }), document.body.appendChild(this.dummyCanvas));
  }
  nextDataId() {
    return H2.nextDataId++;
  }
  floatPrecision() {
    return 32;
  }
  defaultGpuBufferUsage() {
    return GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST;
  }
  flushDisposalQueue() {
    this.tensorDisposalQueue.forEach((e) => {
      this.maybeReleaseBuffer(e), this.tensorMap.delete(e);
    }), this.uniformDisposalQueue.forEach((e) => this.bufferManager.releaseBuffer(e.buffer, e.byteSize, e.usage)), this.stagingDisposalQueue.forEach((e) => this.bufferManager.releaseUploadBuffer(e.buffer, e.byteSize, e.usage)), this.textureDisposalQueue.forEach((e) => this.textureManager.releaseTexture(e.texture, e.width, e.height, e.format, e.usage)), this.tensorDisposalQueue = [], this.uniformDisposalQueue = [], this.stagingDisposalQueue = [], this.textureDisposalQueue = [];
  }
  disposeData(e, t = false) {
    if (this.tensorMap.has(e)) {
      let n = this.tensorMap.get(e);
      if (n.refCount--, !t && n.refCount > 0)
        return false;
      if (this.commandQueueOwnedIds.has(e))
        return this.tensorDisposalQueue.push(e), false;
      this.maybeReleaseBuffer(e);
      let { complexTensorInfos: s } = this.tensorMap.get(e);
      s != null && (this.disposeData(s.real.dataId, true), this.disposeData(s.imag.dataId, true)), this.tensorMap.delete(e);
    }
    return true;
  }
  memory() {
    return { numBytesInGPU: this.bufferManager.numBytesUsed, numBytesAllocatedInGPU: this.bufferManager.numBytesAllocated, unreliable: false };
  }
  getBufferManager() {
    return this.bufferManager;
  }
  getTextureManager() {
    return this.textureManager;
  }
  acquireBuffer(e, t = this.defaultGpuBufferUsage()) {
    return this.bufferManager.acquireBuffer(e, t);
  }
  maybeReleaseBuffer(e) {
    let t = this.tensorMap.get(e);
    t != null && t.bufferInfo.buffer != null && (this.bufferManager.releaseBuffer(t.bufferInfo.buffer, t.bufferInfo.byteSize, t.bufferInfo.usage), t.bufferInfo.buffer = null);
  }
  refCount(e) {
    return this.tensorMap.has(e) ? this.tensorMap.get(e).refCount : 0;
  }
  incRef(e) {
    let t = this.tensorMap.get(e);
    t.refCount++;
  }
  decRef(e) {
    if (this.tensorMap.has(e)) {
      let t = this.tensorMap.get(e);
      t.refCount--;
    }
  }
  write(e, t, n) {
    if (n === "complex64" && e != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    let s = { id: this.nextDataId() }, r = w.sizeFromShape(t) * Xm(n);
    return this.tensorMap.set(s, { dtype: n, values: e, bufferInfo: { byteSize: r, usage: this.defaultGpuBufferUsage() }, refCount: 1 }), s;
  }
  move(e, t, n, s, r) {
    if (s === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    let a = w.sizeFromShape(n) * Xm(s);
    this.tensorMap.set(e, { dtype: s, values: t, bufferInfo: { byteSize: a, usage: this.defaultGpuBufferUsage() }, refCount: r });
  }
  submitQueue() {
    this.ensureComputePassEnded(), this.queue.submit([this.currentCommandEncoder.finish()]), this.currentCommandEncoder = null, this.dispatchNumberInEncoder = 0, this.commandQueueOwnedIds = /* @__PURE__ */ new WeakSet(), this.flushDisposalQueue();
  }
  getBuffer(e) {
    return this.uploadToGPU(e), this.tensorMap.get(e).bufferInfo.buffer;
  }
  ensureCommandEncoderReady() {
    this.currentCommandEncoder || (this.currentCommandEncoder = this.device.createCommandEncoder());
  }
  ensureComputePassEnded() {
    this.currentComputePass && (this.currentComputePass.end(), this.currentComputePass = null);
  }
  getComputePass() {
    return this.currentComputePass || (this.currentComputePass = this.currentCommandEncoder.beginComputePass()), this.currentComputePass;
  }
  async getBufferData(e) {
    if (e.values != null)
      return e.values;
    let t = this.acquireBuffer(e.bufferInfo.byteSize, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);
    this.ensureCommandEncoderReady(), this.ensureComputePassEnded(), this.currentCommandEncoder.copyBufferToBuffer(e.bufferInfo.buffer, 0, t, 0, e.bufferInfo.byteSize), this.submitQueue(), await t.mapAsync(GPUMapMode.READ);
    let n = t.getMappedRange().slice(0);
    return t.unmap(), t != null && this.bufferManager.releaseBuffer(t, e.bufferInfo.byteSize, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ), X().getBool("WEBGPU_USE_PROFILE_TOOL") && (w.assert(this.dummyContext !== void 0, () => "Fail to get context for profiling tool"), this.dummyContext.getCurrentTexture()), n;
  }
  convertAndCacheOnCPU(e, t) {
    let n = this.tensorMap.get(e);
    return this.maybeReleaseBuffer(e), n.values = t, n.values;
  }
  readSync(e) {
    let t = this.tensorMap.get(e), { values: n } = t;
    if (n == null)
      throw new Error("WebGPU readSync is only available for CPU-resident tensors.");
    return n;
  }
  async read(e) {
    if (!this.tensorMap.has(e))
      throw new Error(`Tensor ${e} was not registered!`);
    let t = this.tensorMap.get(e), { values: n } = t;
    if (n != null)
      return this.convertAndCacheOnCPU(e, n);
    let s;
    if (t.dtype === "complex64") {
      let r = await Promise.all([this.read(t.complexTensorInfos.real.dataId), this.read(t.complexTensorInfos.imag.dataId)]), a = r[0], i = r[1];
      s = C.mergeRealAndImagArrays(a, i);
    } else {
      let r = await this.getBufferData(t);
      s = S2(r, t.dtype);
    }
    return this.convertAndCacheOnCPU(e, s), s;
  }
  bufferSync(e) {
    let t = this.readSync(e.dataId), n = t;
    if (e.dtype === "string")
      try {
        n = t.map((s) => w.decodeString(s));
      } catch (s) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return De(e.shape, e.dtype, n);
  }
  async time(e) {
    let t = this.activeTimers, n = [], s = false;
    this.programTimersStack == null ? (this.programTimersStack = n, s = true) : this.activeTimers.push(n), this.activeTimers = n, e();
    let r = w.flatten(this.activeTimers.map((u) => u.query)).filter((u) => u != null), a = w.flatten(this.activeTimers.map((u) => u.name)).filter((u) => u != null);
    this.activeTimers = t, s && (this.programTimersStack = null);
    let i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null }, o = await Promise.all(r);
    return i.kernelMs = w.sum(o), i.getExtraProfileInfo = () => o.map((u, l) => ({ name: a[l], ms: u })).map((u) => `${u.name}: ${u.ms}`).join(", "), this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
  }
  getAndSavePipeline(e, t) {
    return e in this.pipelineCache || (this.pipelineCache[e] = t()), this.pipelineCache[e];
  }
  makeTensorInfo(e, t, n) {
    let s;
    if (t === "string" && n != null && n.length > 0 && w.isString(n[0])) {
      let r = n.map((a) => w.encodeString(a));
      s = this.write(r, e, t);
    } else
      s = this.write(n, e, t);
    return { dataId: s, shape: e, dtype: t };
  }
  tensorToBinding(e) {
    if (!e)
      return null;
    let t = this.tensorMap.get(e.dataId);
    return { offset: 0, size: t.bufferInfo.byteSize, buffer: t.bufferInfo.buffer };
  }
  async getQueryTime(e) {
    return this.supportTimeQuery ? this.getTimeFromQuerySet(e) : 0;
  }
  uploadToGPU(e) {
    let t = this.tensorMap.get(e);
    if (t.bufferInfo.buffer == null && (t.bufferInfo.buffer = this.acquireBuffer(t.bufferInfo.byteSize), t.values)) {
      let n = this.bufferManager.acquireUploadBuffer(t.bufferInfo.byteSize, GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC), s = n.getMappedRange();
      t.dtype === "int32" || t.dtype === "bool" ? new Int32Array(s).set(t.values) : new Float32Array(s).set(t.values), n.unmap(), this.ensureCommandEncoderReady(), this.ensureComputePassEnded(), this.currentCommandEncoder.copyBufferToBuffer(n, 0, t.bufferInfo.buffer, 0, t.bufferInfo.byteSize);
      let r = { byteSize: t.bufferInfo.byteSize, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC, buffer: n };
      this.stagingDisposalQueue.push(r);
    }
  }
  makeUniforms(e) {
    let t = 0, n = [];
    e.forEach((i) => {
      i.data.length === 0 && (i.data = [1]);
      let o;
      switch (i.data.length) {
        case 1:
          o = 4;
          break;
        case 2:
          o = 8;
          break;
        case 3:
          o = 16;
          break;
        case 4:
          o = 16;
          break;
        default:
          w.assert(false, () => `Unsupported ${i.data.length}D shape`);
      }
      t = Math.ceil(t / o) * o, n.push(t), t += i.data.length * 4;
    });
    let s = new ArrayBuffer(t);
    e.forEach((i, o) => {
      let u = n[o];
      i.type === "int32" ? new Int32Array(s, u, i.data.length).set(i.data) : i.type === "uint32" ? new Uint32Array(s, u, i.data.length).set(i.data) : new Float32Array(s, u, i.data.length).set(i.data);
    });
    let r = this.acquireBuffer(t, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);
    this.queue.writeBuffer(r, 0, s, 0, t);
    let a = { byteSize: t, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM, buffer: r };
    return this.uniformDisposalQueue.push(a), { offset: 0, size: t, buffer: r };
  }
  createLayout(e) {
    let t = [];
    t.push({ binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: "storage" } });
    for (let r = 0; r < e; r++)
      t.push({ binding: r + 1, visibility: GPUShaderStage.COMPUTE, buffer: { type: "read-only-storage" } });
    t.push({ binding: e + 1, visibility: GPUShaderStage.COMPUTE, buffer: { type: "uniform" } });
    let n = this.device.createBindGroupLayout({ entries: t }), s = this.device.createPipelineLayout({ bindGroupLayouts: [n] });
    return { bindGroupLayout: n, pipelineLayout: s };
  }
  getCachedOrCreateLayout(e) {
    return e in this.layoutCache || (this.layoutCache[e] = this.createLayout(e)), this.layoutCache[e];
  }
  runWebGPUProgram(e, t, n, s, r) {
    if (!r) {
      if (r = this.makeTensorInfo(e.outputShape, n), w.sizeFromShape(r.shape) === 0) {
        let S = this.tensorMap.get(r.dataId);
        return S.values = w.getTypedArrayFromDType(r.dtype, 0), r;
      }
      this.uploadToGPU(r.dataId);
    }
    e.dispatch = Uw(this.device, e);
    let a = [{ type: "float32", data: [NaN] }], i = t.concat(r).map((S) => S.shape), o = "int32";
    i.map((S) => {
      a.push({ type: o, data: S });
    });
    let u = w.computeStrides(r.shape);
    if (a.push({ type: o, data: u }), e.size) {
      let S = w.sizeFromShape(e.outputShape);
      a.push({ type: o, data: [e.isVec4 ? S / 4 : S] });
    }
    s && (a = [...a, ...s]);
    let l = this.makeUniforms(a), c = t.map((S, $) => {
      if (S.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      return this.uploadToGPU(S.dataId), { dtype: this.tensorMap.get(S.dataId).dtype, shape: S.shape, name: e.variableNames[$] };
    }), p = c.map((S) => S.dtype).concat(r.dtype), d = c.map((S) => C.getBroadcastDims(S.shape, r.shape)), h = c.map((S) => w.arraysEqual(S.shape, r.shape)).join("_"), f = d.map((S) => S.join("_")).join(";"), m = Ww(e, i, p, f, h), { bindGroupLayout: g, pipelineLayout: b } = this.getCachedOrCreateLayout(e.variableNames.length), y = this.getAndSavePipeline(m, () => Vw(this.device, e, b, c, r)), v = this.activeTimers != null, x = goe(this.device, g, t.map((S) => this.tensorToBinding(S)), this.tensorToBinding(r), l);
    this.ensureCommandEncoderReady();
    let k = this.getComputePass();
    return v && this.supportTimeQuery && k.writeTimestamp(this.querySet, 0), k.setPipeline(y), k.setBindGroup(0, x), k.dispatch(e.dispatch[0], e.dispatch[1], e.dispatch[2]), v && this.supportTimeQuery && k.writeTimestamp(this.querySet, 1), this.dispatchNumberInEncoder++, t.forEach((S) => {
      this.commandQueueOwnedIds.add(S.dataId);
    }), this.commandQueueOwnedIds.add(r.dataId), X().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE") <= this.dispatchNumberInEncoder && this.submitQueue(), v && this.activeTimers.push({ name: e.constructor.name, query: this.getQueryTime(this.querySet) }), r;
  }
  getFromPixelTextureLayout(e) {
    return e ? (this.fromPixelImportTextureLayout === null && (this.fromPixelImportTextureLayout = this.createFromPixelTextureLayout(true)), this.fromPixelImportTextureLayout) : (this.fromPixelTextureLayout === null && (this.fromPixelTextureLayout = this.createFromPixelTextureLayout(false)), this.fromPixelTextureLayout);
  }
  createFromPixelTextureLayout(e) {
    let t = [];
    t.push({ binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: "storage" } }), e ? t.push({ binding: 1, visibility: GPUShaderStage.COMPUTE, externalTexture: {} }) : t.push({ binding: 1, visibility: GPUShaderStage.COMPUTE, texture: {} }), t.push({ binding: 2, visibility: GPUShaderStage.COMPUTE, buffer: {} });
    let n = this.device.createBindGroupLayout({ entries: t }), s = this.device.createPipelineLayout({ bindGroupLayouts: [n] });
    return { bindGroupLayout: n, pipelineLayout: s };
  }
  copyExternalImageToTexture(e, t) {
    let n = GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING, s = "rgba8unorm", r = this.textureManager.acquireTexture(t[1], t[0], s, n), a = r.createView();
    this.queue.copyExternalImageToTexture({ source: e }, { texture: r }, [t[1], t[0]]);
    let i = { width: t[1], height: t[0], format: s, usage: n, texture: r };
    return this.textureDisposalQueue.push(i), a;
  }
  runFromPixelsProgram(e, t, n, s, r) {
    e.dispatch = Uw(this.device, e);
    let a = this.makeTensorInfo(t, "int32");
    if (w.sizeFromShape(a.shape) === 0) {
      let m = this.tensorMap.get(a.dataId);
      return m.values = w.getTypedArrayFromDType(a.dtype, 0), a;
    }
    this.uploadToGPU(a.dataId);
    let i = Ww(e, [a.shape]), o = this.getFromPixelTextureLayout(s), u = this.getAndSavePipeline(i, () => Vw(this.device, e, o.pipelineLayout, [], a, true)), l;
    if (s) {
      let m = { source: r };
      l = this.device.importExternalTexture(m);
    } else
      l = this.copyExternalImageToTexture(r, a.shape);
    let c = this.tensorToBinding(a), p = this.makeUniforms(n), d = this.device.createBindGroup({ layout: o.bindGroupLayout, entries: [{ binding: 0, resource: { buffer: c.buffer } }, { binding: 1, resource: l }, { binding: 2, resource: { buffer: p.buffer } }] });
    this.ensureCommandEncoderReady();
    let h = this.getComputePass(), f = this.activeTimers != null;
    return f && this.supportTimeQuery && h.writeTimestamp(this.querySet, 0), h.setPipeline(u), h.setBindGroup(0, d), h.dispatch(e.dispatch[0], e.dispatch[1], e.dispatch[2]), f && this.supportTimeQuery && h.writeTimestamp(this.querySet, 1), this.commandQueueOwnedIds.add(a.dataId), this.dispatchNumberInEncoder++, X().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE") <= this.dispatchNumberInEncoder && this.submitQueue(), f && this.activeTimers.push({ name: e.constructor.name, query: this.getQueryTime(this.querySet) }), a;
  }
  async getTimeFromQuerySet(e) {
    let t = this.acquireBuffer(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE), n = this.acquireBuffer(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);
    this.ensureCommandEncoderReady(), this.ensureComputePassEnded(), this.currentCommandEncoder.resolveQuerySet(e, 0, 2, t, 0), this.currentCommandEncoder.copyBufferToBuffer(t, 0, n, 0, 16), this.submitQueue(), await n.mapAsync(GPUMapMode.READ);
    let s = new BigUint64Array(n.getMappedRange()), r = Number(s[1] - s[0]);
    return n.unmap(), this.bufferManager.releaseBuffer(n, 16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST), this.bufferManager.releaseBuffer(t, 16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE), r / 1e6;
  }
  shouldExecuteOnCPU(e, t = boe) {
    return X().getBool("WEBGPU_CPU_FORWARD") && e.every((n) => this.tensorMap.get(n.dataId).bufferInfo.buffer == null && w.sizeFromShape(n.shape) < t);
  }
  numDataIds() {
    return this.tensorMap.numDataIds() - this.tensorDisposalQueue.length;
  }
  dispose() {
    this.disposed || (this.bufferManager.dispose(), this.textureManager.dispose(), this.disposed = true);
  }
};
var Dv = H2;
Dv.nextDataId = 0;
var yoe = {};
Ae(yoe, { WebGPUBackend: () => Dv, webgpu_util: () => k2 });
_v() && fp("webgpu", async () => {
  X().set("CHECK_COMPUTATION_FOR_ERRORS", false);
  let e = { powerPreference: X().get("WEBGPU_USE_LOW_POWER_GPU") ? "low-power" : "high-performance" }, t = await navigator.gpu.requestAdapter(e), n = t.limits, s = {}, r = t.features.has("timestamp-query");
  s.requiredLimits = { maxComputeWorkgroupStorageSize: n.maxComputeWorkgroupStorageSize, maxComputeWorkgroupsPerDimension: n.maxComputeWorkgroupsPerDimension }, r ? s.requiredFeatures = ["timestamp-query"] : console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis then try again. Or zero will shown for the kernel time when profiling mode isenabled. Using performance.now is not workable for webgpu sinceit doesn't support synchronously to read data from GPU.");
  let a = await t.requestDevice(s);
  return new Dv(a, r);
}, 3);
var It = ((e) => (e[e.float32 = 0] = "float32", e[e.int32 = 1] = "int32", e[e.bool = 2] = "bool", e[e.string = 3] = "string", e[e.complex64 = 4] = "complex64", e))(It || {});
var th = ((e) => (e[e.linear = 0] = "linear", e[e.relu = 1] = "relu", e[e.relu6 = 2] = "relu6", e[e.prelu = 3] = "prelu", e[e.leakyrelu = 4] = "leakyrelu", e[e.sigmoid = 5] = "sigmoid", e[e.elu = 6] = "elu", e))(th || {});
var q2;
function voe(e) {
  q2 = e.wasm.cwrap(aa, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function xoe(e) {
  let { inputs: t, backend: n, attrs: s } = e, { a: r, b: a, bias: i, preluActivationWeights: o } = t;
  if (r.dtype !== "float32" || a.dtype !== "float32")
    throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");
  let { transposeA: u, transposeB: l, activation: c, leakyreluAlpha: p } = s, d = n.dataIdMap.get(r.dataId).id, h = n.dataIdMap.get(a.dataId).id, f = 0;
  if (i != null) {
    let E = n.dataIdMap.get(i.dataId);
    if (E.shape.length !== 1)
      throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${E.shape.length}.`);
    f = E.id;
  }
  let m = o == null ? 0 : n.dataIdMap.get(o.dataId).id, g = th[c];
  if (g == null)
    throw new Error(`${c} activation not yet supported for FusedConv2D in the wasm backend.`);
  let b = u ? r.shape[2] : r.shape[1], y = l ? a.shape[1] : a.shape[2], v = Ko.assertAndGetBroadcastShape(r.shape.slice(0, -2), a.shape.slice(0, -2)), x = n.makeOutput([...v, b, y], r.dtype), k = n.dataIdMap.get(x.dataId).id, S = new Uint8Array(new Int32Array(r.shape).buffer), $ = new Uint8Array(new Int32Array(a.shape).buffer);
  return q2(d, S, r.shape.length, h, $, a.shape.length, u, l, g, f, m, p || 0, k), x;
}
var woe = { kernelName: aa, backendName: "wasm", setupFunc: voe, kernelFunc: xoe };
function Kt(e, t) {
  let n;
  function s(a) {
    n = a.wasm.cwrap(e, null, ["number", "number", "number"]);
  }
  function r(a) {
    let { backend: i, inputs: { x: o } } = a, u = i.dataIdMap.get(o.dataId).id, l = i.makeOutput(o.shape, t || o.dtype), c = i.dataIdMap.get(l.dataId).id;
    return w.sizeFromShape(l.shape) === 0 || n(u, It[o.dtype], c), l;
  }
  return { kernelName: e, backendName: "wasm", setupFunc: s, kernelFunc: r };
}
var koe = Kt(uo);
function gn(e, t, n) {
  let s;
  function r(i) {
    s = i.wasm.cwrap(e, null, ["number", "array", "number", "number", "array", "number", "number", "number"]);
  }
  function a(i) {
    let { backend: o, inputs: u } = i, { a: l, b: c } = u, p = o.dataIdMap.get(l.dataId).id, d = o.dataIdMap.get(c.dataId).id, h = n != null ? n : l.dtype, f = C.assertAndGetBroadcastShape(l.shape, c.shape), m = o.makeOutput(f, h);
    if (w.sizeFromShape(f) === 0)
      return m;
    let g = new Uint8Array(new Int32Array(l.shape).buffer), b = new Uint8Array(new Int32Array(c.shape).buffer), y = o.dataIdMap.get(m.dataId).id;
    return (() => s(p, g, l.shape.length, d, b, c.shape.length, It[l.dtype], y))(), m;
  }
  return { kernelName: e, backendName: "wasm", setupFunc: r, kernelFunc: a };
}
var Ioe = true;
var Soe = gn(Sr, Ioe);
var j2;
function Coe(e) {
  j2 = e.wasm.cwrap(Ia, null, ["array", "number", "number", "number"]);
}
function Noe(e) {
  let { inputs: t, backend: n } = e, s = n.makeOutput(t[0].shape, t[0].dtype);
  if (w.sizeFromShape(s.shape) === 0)
    return s;
  let r = t.map((o) => n.dataIdMap.get(o.dataId).id), a = new Uint8Array(new Int32Array(r).buffer), i = n.dataIdMap.get(s.dataId).id;
  return j2(a, r.length, It[s.dtype], i), s;
}
var Toe = { kernelName: Ia, backendName: "wasm", setupFunc: Coe, kernelFunc: Noe };
function nh(e) {
  let { inputs: { x: t }, backend: n } = e, s = n.makeOutput(t.shape, t.dtype), r = n.typedArrayFromHeap(t);
  return n.typedArrayFromHeap(s).set(r), s;
}
var $oe = { kernelName: Wa, backendName: "wasm", kernelFunc: nh };
var K2;
function _oe(e) {
  K2 = e.wasm.cwrap(mi, null, ["number", "array", "number", "number", "number", "array", "number"]);
}
function kr(e) {
  let { inputs: t, backend: n, attrs: s } = e, [r, a] = Eoe(t.x.shape, s.perm), i = true;
  for (let f = 0; f < a.length; f++)
    a[f] !== f && (i = false);
  let o = Aoe(t.x.shape, s.perm), u = { dataId: t.x.dataId, shape: r, dtype: t.x.dtype };
  if (i) {
    let f = nh({ inputs: t, backend: n });
    return f.shape = o, f;
  }
  let l = n.makeOutput(o, u.dtype), c = n.dataIdMap.get(u.dataId).id, p = n.dataIdMap.get(l.dataId).id, d = new Uint8Array(new Int32Array(a).buffer), h = new Uint8Array(new Int32Array(u.shape).buffer);
  return K2(c, h, u.shape.length, It[u.dtype], p, d, a.length), l;
}
function Aoe(e, t) {
  let n = new Array(e.length);
  for (let s = 0; s < n.length; s++)
    n[s] = e[t[s]];
  return n;
}
function Eoe(e, t) {
  let n = [], s = [];
  for (let r = 0; r < e.length; ++r)
    e[r] !== 1 && n.push(e[r]), e[t[r]] !== 1 && s.push(t[r]);
  for (let r = 0; r < s.length; ++r) {
    let a = -1;
    for (let i = 0; i < s.length; ++i)
      s[i] >= r && (a === -1 || s[a] > s[i]) && (a = i);
    s[a] = r;
  }
  return [n, s];
}
var Roe = { kernelName: mi, backendName: "wasm", kernelFunc: kr, setupFunc: _oe };
function Or(e, t, n) {
  let s = e.shape, r = e.shape.length, a = w.parseAxisParam(t, s), i = a, o = C.getAxesPermutation(i, r), u = null, l = false;
  if (o != null) {
    let c = new Array(r);
    for (let h = 0; h < c.length; h++)
      c[h] = s[o[h]];
    i = C.getInnerMostAxes(i.length, r), u = kr({ inputs: { x: e }, attrs: { perm: o }, backend: n });
    let p = n.dataIdMap.get(e.dataId).id;
    n.dataIdMap.get(u.dataId).id !== p && (l = true);
  }
  return { transposed: u, originalAxes: a, axes: i, inputWasTransposed: l };
}
var X2;
function Doe(e) {
  X2 = e.wasm.cwrap(il, null, ["number, number, number"]);
}
function Foe(e) {
  let { backend: t, inputs: n, attrs: s } = e, { axis: r, keepDims: a } = s, { x: i } = n, u = t.dataIdMap.get(i.dataId).id, l = i, { transposed: c, axes: p, originalAxes: d, inputWasTransposed: h } = Or(i, r, t);
  if (h) {
    let v = t.dataIdMap.get(c.dataId).id;
    l = c, u = v;
  }
  let f = l.shape.length;
  C.assertAxesAreInnerMostDims("all", p, f);
  let [m, g] = C.computeOutAndReduceShapes(l.shape, p), b = w.sizeFromShape(g), y = t.makeOutput(m, i.dtype);
  if (w.sizeFromShape(l.shape) !== 0) {
    let v = t.dataIdMap.get(y.dataId).id;
    X2(u, b, v);
  }
  if (h && t.disposeData(c.dataId), a) {
    let v = C.expandShapeToKeepDim(y.shape, d);
    y.shape = v;
  }
  return y;
}
var Ooe = { kernelName: il, backendName: "wasm", setupFunc: Doe, kernelFunc: Foe };
var Y2;
function Poe(e) {
  Y2 = e.wasm.cwrap(ol, null, ["number, number, number"]);
}
function zoe(e) {
  let { backend: t, inputs: n, attrs: s } = e, { axis: r, keepDims: a } = s, { x: i } = n, u = t.dataIdMap.get(i.dataId).id, l = i, { transposed: c, axes: p, originalAxes: d, inputWasTransposed: h } = Or(i, r, t);
  if (h) {
    let v = t.dataIdMap.get(c.dataId).id;
    l = c, u = v;
  }
  let f = l.shape.length;
  C.assertAxesAreInnerMostDims("any", p, f);
  let [m, g] = C.computeOutAndReduceShapes(l.shape, p), b = w.sizeFromShape(g), y = t.makeOutput(m, i.dtype);
  if (w.sizeFromShape(l.shape) !== 0) {
    let v = t.dataIdMap.get(y.dataId).id;
    Y2(u, b, v);
  }
  if (h && t.disposeData(c.dataId), a) {
    let v = C.expandShapeToKeepDim(y.shape, d);
    y.shape = v;
  }
  return y;
}
var Moe = { kernelName: ol, backendName: "wasm", setupFunc: Poe, kernelFunc: zoe };
var Q2;
function Loe(e) {
  Q2 = e.wasm.cwrap(Sa, null, ["number", "number", "number", "number", "number"]);
}
function Boe(e) {
  let { backend: t, inputs: n, attrs: s } = e, { axis: r } = s, { x: a } = n, i = t.dataIdMap.get(a.dataId).id, o = i, u = a, { transposed: l, axes: c, inputWasTransposed: p } = Or(a, r, t);
  if (p) {
    let b = t.dataIdMap.get(l.dataId).id;
    b !== i && (u = l, o = b);
  }
  let d = u.shape.slice(0, -1), h = t.makeOutput(d, "int32"), f = t.dataIdMap.get(h.dataId).id, m = w.sizeFromShape(h.shape), g = u.shape[c[0]];
  return Q2(o, It[u.dtype], m, g, f), p && t.disposeData(l.dataId), h;
}
var Voe = { kernelName: Sa, backendName: "wasm", kernelFunc: Boe, setupFunc: Loe };
var Z2;
function Woe(e) {
  Z2 = e.wasm.cwrap(Ca, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Uoe(e) {
  let { inputs: t, attrs: n, backend: s } = e, r = t.x, a = s.dataIdMap.get(r.dataId).id, { filterSize: i, strides: o, pad: u, dimRoundingMode: l } = n, c = C.computePool2DInfo(r.shape, i, o, 1, u, l), p = c.filterHeight, d = c.filterWidth, h = c.padInfo.top, f = c.padInfo.right, m = c.padInfo.bottom, g = c.padInfo.left, b = c.strideHeight, y = c.strideWidth, v = c.inChannels;
  if (c.dataFormat !== "channelsLast")
    throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);
  if (c.dilationWidth !== 1 || c.dilationHeight !== 1)
    throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${c.dilationHeight}, ${c.dilationWidth}].`);
  let x = s.makeOutput(c.outShape, "float32"), k = s.dataIdMap.get(x.dataId).id;
  return Z2(a, r.shape[0], r.shape[1], r.shape[2], p, d, h, f, m, g, b, y, v, k), x;
}
var Goe = { kernelName: Ca, backendName: "wasm", setupFunc: Woe, kernelFunc: Uoe };
function yn(e) {
  let { inputs: t, attrs: n } = e, { x: s } = t, { shape: r } = n, a = w.sizeFromShape(s.shape), i = w.inferFromImplicitShape(r, a);
  return w.assert(a === w.sizeFromShape(i), () => `new shape: ${i}, old shape: ${s.shape}. New shape and old shape must have the same number of elements.`), e.backend.incRef(s.dataId), { dataId: s.dataId, shape: i, dtype: s.dtype };
}
var Hoe = { kernelName: Ro, backendName: "wasm", kernelFunc: yn };
var J2;
function qoe(e) {
  J2 = e.wasm.cwrap(Na, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number"]);
}
function joe(e) {
  let { inputs: t, backend: n, attrs: s } = e, { a: r, b: a } = t, { transposeA: i, transposeB: o } = s;
  if (r.dtype !== "float32" || a.dtype !== "float32")
    throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");
  let u = r.shape.length, l = a.shape.length, c = i ? r.shape[u - 2] : r.shape[u - 1], p = o ? a.shape[l - 1] : a.shape[l - 2], d = i ? r.shape[u - 1] : r.shape[u - 2], h = o ? a.shape[l - 2] : a.shape[l - 1], f = r.shape.slice(0, -2), m = a.shape.slice(0, -2), g = w.sizeFromShape(f), b = w.sizeFromShape(m), v = Ko.assertAndGetBroadcastShape(r.shape.slice(0, -2), a.shape.slice(0, -2)).concat([d, h]);
  w.assert(c === p, () => `Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`);
  let x = i ? [g, c, d] : [g, d, c], k = o ? [b, h, p] : [b, p, h], S = yn({ inputs: { x: r }, backend: n, attrs: { shape: x } }), $ = yn({ inputs: { x: a }, backend: n, attrs: { shape: k } }), E = n.dataIdMap.get(S.dataId).id, A = n.dataIdMap.get($.dataId).id, P = i ? S.shape[2] : S.shape[1], R = o ? $.shape[1] : $.shape[2], F = Math.max(g, b), T = n.makeOutput([F, P, R], S.dtype), z = n.dataIdMap.get(T.dataId).id, W = new Uint8Array(new Int32Array(S.shape).buffer), q = new Uint8Array(new Int32Array($.shape).buffer);
  return J2(E, W, S.shape.length, A, q, $.shape.length, i, o, z), n.disposeData(S.dataId), n.disposeData($.dataId), T.shape = v, T;
}
var Koe = { kernelName: Na, backendName: "wasm", setupFunc: qoe, kernelFunc: joe };
function xa(e) {
  let { inputs: { x: t }, attrs: { begin: n, size: s }, backend: r } = e, [a, i] = wt.parseSliceParams(t, n, s), o = wt.isSliceContinous(t.shape, a, i), u = r.readSync(t.dataId), l = r.makeOutput(i, t.dtype), c = w.computeStrides(t.shape), p = r.dataIdMap.get(l.dataId);
  if (o) {
    let f = wt.computeFlatOffset(a, c);
    return t.dtype === "string" ? p.stringBytes = u.slice(f, f + w.sizeFromShape(i)) : r.typedArrayFromHeap(l).set(u.subarray(f, f + w.sizeFromShape(i))), l;
  }
  if (t.dtype === "string") {
    let f = Pd(u, a, i, t.shape, t.dtype);
    return p.stringBytes = f, l;
  }
  let d = r.typedArrayFromHeap(l), h = t.shape.length;
  if (h === 2)
    Xoe(u, c[0], d, a, i);
  else if (h === 3)
    Yoe(u, c[0], c[1], d, a, i);
  else if (h === 4)
    Qoe(u, c[0], c[1], c[2], d, a, i);
  else {
    let f = Pd(u, a, i, t.shape, t.dtype);
    d.set(f);
  }
  return l;
}
function Xoe(e, t, n, s, r) {
  let a = 0, i = s[0], o = s[1], u = i + r[0];
  for (let l = i; l < u; l++) {
    let c = l * t + o;
    n.set(e.subarray(c, c + r[1]), a), a += r[1];
  }
}
function Yoe(e, t, n, s, r, a) {
  let i = 0, o = r[0], u = r[1], l = r[2], c = o + a[0], p = u + a[1];
  for (let d = o; d < c; d++)
    for (let h = u; h < p; h++) {
      let f = d * t + h * n + l;
      s.set(e.subarray(f, f + a[2]), i), i += a[2];
    }
}
function Qoe(e, t, n, s, r, a, i) {
  let o = 0, u = a[0], l = a[1], c = a[2], p = u + i[0], d = l + i[1], h = c + i[2], f = a[3];
  for (let m = u; m < p; m++)
    for (let g = l; g < d; g++)
      for (let b = c; b < h; b++) {
        let y = m * t + g * n + b * s + f;
        r.set(e.subarray(y, y + i[3]), o), o += i[3];
      }
}
var Zoe = { kernelName: zo, backendName: "wasm", kernelFunc: xa };
function Joe(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockShape: a, crops: i } = s, o = a.reduce((b, y) => b * y), u = C.getReshaped(r.shape, a, o), l = C.getPermuted(u.length, a.length), c = C.getReshapedPermuted(r.shape, a, o), p = C.getSliceBeginCoords(i, a.length), d = C.getSliceSize(c, i, a.length), h = yn({ inputs: { x: r }, backend: n, attrs: { shape: u } }), f = kr({ inputs: { x: h }, backend: n, attrs: { perm: l } }), m = yn({ inputs: { x: f }, backend: n, attrs: { shape: c } }), g = xa({ inputs: { x: m }, backend: n, attrs: { begin: p, size: d } });
  return n.disposeData(h.dataId), n.disposeData(f.dataId), n.disposeData(h.dataId), g;
}
var eue = { kernelName: lo, backendName: "wasm", kernelFunc: Joe };
function ac(e) {
  let { inputs: { x: t }, attrs: { dtype: n }, backend: s } = e, r = s.makeOutput(t.shape, n), a = s.typedArrayFromHeap(t);
  return s.typedArrayFromHeap(r).set(a), r;
}
var tue = { kernelName: Ta, backendName: "wasm", kernelFunc: ac };
var nue = Kt($a);
var eN;
function sue(e) {
  eN = e.wasm.cwrap(Cr, null, ["number", "number", "number", "number"]);
}
function rue(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { clipValueMin: a, clipValueMax: i } = s, o = n.dataIdMap.get(r.dataId).id, u = n.makeOutput(r.shape, r.dtype), l = n.dataIdMap.get(u.dataId).id;
  return eN(o, a, i, l), u;
}
var aue = { kernelName: Cr, backendName: "wasm", setupFunc: sue, kernelFunc: rue };
function tN(e) {
  let { inputs: t, backend: n } = e, s = w.parseAxisParam(e.attrs.axis, t[0].shape)[0], r = C.computeOutShape(t.map((h) => h.shape), s), a = t.filter((h) => w.sizeFromShape(h.shape) > 0);
  if (a.length === 1)
    return nh({ inputs: { x: a[0] }, backend: n });
  let i = n.makeOutput(r, t[0].dtype);
  if (w.sizeFromShape(r) === 0)
    return i;
  let o = a.map((h) => h.shape);
  if (C.assertParamsConsistent(o, s), a[0].dtype === "string") {
    let h = a.map((v) => {
      let x = w.sizeFromShape(v.shape.slice(s));
      return yn({ inputs: { x: v }, backend: n, attrs: { shape: [-1, x] } });
    }), f = h.map((v) => ({ vals: n.readSync(v.dataId), shape: v.shape }));
    r = C.computeOutShape(h.map((v) => v.shape), 1);
    let m = h[0].shape[0] === 1, g = sv(f, r, t[0].dtype, m), b = C.computeOutShape(a.map((v) => v.shape), s);
    i.shape = b;
    let y = n.dataIdMap.get(i.dataId);
    return y.stringBytes = C.fromStringArrayToUint8(g), h.forEach((v) => n.disposeData(v.dataId)), i;
  }
  let u = w.sizeFromShape(a[0].shape.slice(0, s)), l = 0, c = a.map((h) => {
    let f = w.sizeFromShape(h.shape.slice(s));
    return l += f, f;
  }), p = a.map((h) => n.typedArrayFromHeap(h)), d = n.typedArrayFromHeap(i);
  for (let h = 0; h < u; h++) {
    let f = h * l;
    for (let m = 0; m < p.length; m++) {
      let g = c[m], b = h * g, y = p[m].subarray(b, b + g);
      d.set(y, f), f += g;
    }
  }
  return i;
}
var iue = { kernelName: co, backendName: "wasm", kernelFunc: tN };
var nN;
function oue(e) {
  nN = e.wasm.cwrap(_a, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function uue(e) {
  let { inputs: t, attrs: n, backend: s } = e, { x: r, filter: a } = t, i = s.dataIdMap.get(r.dataId).id, o = s.dataIdMap.get(a.dataId).id, { strides: u, dilations: l, pad: c, dimRoundingMode: p, dataFormat: d } = n, h = C.convertConv2DDataFormat(d), f = C.computeConv2DInfo(r.shape, a.shape, u, l, c, p, false, h), m = f.filterHeight, g = f.filterWidth, b = f.padInfo.top, y = f.padInfo.right, v = f.padInfo.bottom, x = f.padInfo.left, k = f.dilationHeight, S = f.dilationWidth, $ = f.strideHeight, E = f.strideWidth, A = f.inChannels, P = f.outChannels, R = f.padInfo.type === "SAME" ? 1 : 0;
  if (f.dataFormat !== "channelsLast")
    throw new Error(`wasm backend Conv2D does not support dataFormat:'${f.dataFormat}'. Please use 'channelsLast'.`);
  let F = s.makeOutput(f.outShape, "float32"), T = s.dataIdMap.get(F.dataId).id;
  return nN(i, r.shape[0], r.shape[1], r.shape[2], o, m, g, b, y, v, x, R, k, S, $, E, A, P, T), F;
}
var lue = { kernelName: _a, backendName: "wasm", setupFunc: oue, kernelFunc: uue };
var sN;
function cue(e) {
  sN = e.wasm.cwrap(Aa, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function due(e) {
  let { backend: t, inputs: n, attrs: s } = e, { dy: r, filter: a } = n, { strides: i, pad: o, dataFormat: u, dimRoundingMode: l, inputShape: c } = s, p = 1, d = C.convertConv2DDataFormat(u), h = C.computeConv2DInfo(c, a.shape, i, p, o, l, false, d), { batchSize: f, filterHeight: m, filterWidth: g, inChannels: b, inHeight: y, inWidth: v, outChannels: x, outHeight: k, outWidth: S, strideHeight: $, strideWidth: E } = h, A = m - 1 - h.padInfo.top, P = g - 1 - h.padInfo.left, R = h.dataFormat === "channelsLast", F = w.computeStrides(h.inShape), T = w.computeStrides(r.shape), [z, W, q] = w.computeStrides(a.shape), K = F[0], Y = R ? F[1] : F[2], Z = R ? F[2] : 1, te = R ? 1 : F[1], ee = T[0], se = R ? T[1] : T[2], ne = R ? T[2] : 1, oe = R ? 1 : T[1], re = t.makeOutput(h.inShape, "float32"), le = t.dataIdMap.get(re.dataId).id, me = t.dataIdMap.get(r.dataId).id, ke = t.dataIdMap.get(a.dataId).id;
  return sN(me, ke, f, m, g, y, v, b, k, S, x, $, E, A, P, z, W, q, K, Y, Z, te, ee, se, ne, oe, le), re;
}
var pue = { kernelName: Aa, backendName: "wasm", setupFunc: cue, kernelFunc: due };
var hue = Kt(Ea);
var fue = Kt(Ra);
var rN = ((e) => (e[e.bilinear = 0] = "bilinear", e[e.nearest = 1] = "nearest", e))(rN || {});
var aN;
function mue(e) {
  aN = e.wasm.cwrap(ho, null, ["number", "number", "number", "number", "array", "number", "number", "number", "number", "number"]);
}
function gue(e) {
  let { backend: t, inputs: n, attrs: s } = e, { method: r, extrapolationValue: a, cropSize: i } = s, { image: o, boxes: u, boxInd: l } = n, c = u.shape[0], [p, d] = i, h = [c, p, d, o.shape[3]], f = t.dataIdMap.get(o.dataId), m;
  o.dtype !== "float32" && (m = ac({ backend: t, inputs: { x: o }, attrs: { dtype: "float32" } }), f = t.dataIdMap.get(m.dataId));
  let g = f.id, b = t.dataIdMap.get(u.dataId).id, y = t.dataIdMap.get(l.dataId).id, v = t.makeOutput(h, "float32"), x = t.dataIdMap.get(v.dataId).id, k = new Uint8Array(new Int32Array(o.shape).buffer);
  return aN(g, b, y, c, k, p, d, rN[r], a, x), m != null && t.disposeData(m.dataId), v;
}
var bue = { kernelName: ho, backendName: "wasm", setupFunc: mue, kernelFunc: gue };
var iN;
function yue(e) {
  iN = e.wasm.cwrap(po, null, ["number", "number", "number", "number", "number", "number"]);
}
function vue(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, exclusive: i, reverse: o } = s, u = r.shape.length;
  w.assert(r.dtype === "float32" || r.dtype === "int32", () => `cumprod does not support ${r.dtype} tensors in the WASM backend`);
  let l = C.getAxesPermutation([a], u), c = r;
  l !== null && (c = kr({ inputs: { x: r }, attrs: { perm: l }, backend: n }));
  let p = C.getInnerMostAxes(1, u)[0];
  C.assertAxesAreInnerMostDims("cumprod", [p], u);
  let d = n.makeOutput(c.shape, c.dtype), h = c.shape[p], f = n.dataIdMap.get(c.dataId).id, m = n.dataIdMap.get(d.dataId).id;
  iN(f, i ? 1 : 0, o ? 1 : 0, h, m, It[r.dtype]);
  let g = d;
  if (l !== null) {
    let b = C.getUndoAxesPermutation(l);
    g = kr({ inputs: { x: d }, attrs: { perm: b }, backend: n }), n.disposeData(c.dataId), n.disposeData(d.dataId);
  }
  return g;
}
var xue = { kernelName: po, backendName: "wasm", setupFunc: yue, kernelFunc: vue };
var oN;
function wue(e) {
  oN = e.wasm.cwrap(Da, null, ["number", "number", "number", "number", "number", "number"]);
}
function kue(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { axis: a, exclusive: i, reverse: o } = s, u = r.shape.length;
  w.assert(r.dtype === "float32" || r.dtype === "int32", () => `cumsum does not support ${r.dtype} tensors in the WASM backend`);
  let l = C.getAxesPermutation([a], u), c = r;
  l !== null && (c = kr({ inputs: { x: r }, attrs: { perm: l }, backend: n }));
  let p = C.getInnerMostAxes(1, u)[0];
  C.assertAxesAreInnerMostDims("cumsum", [p], u);
  let d = n.makeOutput(c.shape, c.dtype), h = c.shape[p], f = n.dataIdMap.get(c.dataId).id, m = n.dataIdMap.get(d.dataId).id;
  oN(f, i ? 1 : 0, o ? 1 : 0, h, m, It[r.dtype]);
  let g = d;
  if (l !== null) {
    let b = C.getUndoAxesPermutation(l);
    g = kr({ inputs: { x: d }, attrs: { perm: b }, backend: n }), n.disposeData(c.dataId), n.disposeData(d.dataId);
  }
  return g;
}
var Iue = { kernelName: Da, backendName: "wasm", setupFunc: wue, kernelFunc: kue };
var uN;
function Sue(e) {
  uN = e.wasm.cwrap(fo, null, ["number", "number", "number", "array", "number", "array", "array", "number", "number"]);
}
function Cue(e) {
  let { backend: t, inputs: n, attrs: s } = e, { x: r } = n, { blockSize: a, dataFormat: i } = s, o = r.shape[0], u = i === "NHWC" ? r.shape[1] : r.shape[2], l = i === "NHWC" ? r.shape[2] : r.shape[3], c = i === "NHWC" ? r.shape[3] : r.shape[1], p = u * a, d = l * a, h = c / (a * a), f = i === "NHWC" ? [o, p, d, h] : [o, h, p, d], m = t.makeOutput(f, "float32"), b = t.dataIdMap.get(r.dataId).id, y = new Uint8Array(new Int32Array(w.computeStrides(r.shape)).buffer), v = new Uint8Array(new Int32Array(f).buffer), x = new Uint8Array(new Int32Array(w.computeStrides(f)).buffer), k = t.dataIdMap.get(m.dataId).id;
  return uN(b, a, i === "NHWC" ? 1 : 0, y, r.shape.length - 1, v, x, f.length, k), m;
}
var Nue = { kernelName: fo, backendName: "wasm", setupFunc: Sue, kernelFunc: Cue };
var lN;
function Tue(e) {
  lN = e.wasm.cwrap(Fa, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function $ue(e) {
  let { inputs: t, attrs: n, backend: s } = e, { x: r, filter: a } = t, i = s.dataIdMap.get(r.dataId).id, o = s.dataIdMap.get(a.dataId).id, { strides: u, dilations: l, pad: c, dimRoundingMode: p } = n, d = l == null ? [1, 1] : l, h = C.computeConv2DInfo(r.shape, a.shape, u, d, c, p, true), f = h.filterHeight, m = h.filterWidth, g = h.padInfo.top, b = h.padInfo.right, y = h.padInfo.bottom, v = h.padInfo.left, x = h.dilationHeight, k = h.dilationWidth, S = h.strideHeight, $ = h.strideWidth, E = h.inChannels, A = h.outChannels, P = h.padInfo.type === "SAME" ? 1 : 0;
  if (h.dataFormat !== "channelsLast")
    throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${h.dataFormat}'. Please use 'channelsLast'.`);
  let R = s.makeOutput(h.outShape, "float32"), F = s.dataIdMap.get(R.dataId).id;
  return lN(i, r.shape[0], r.shape[1], r.shape[2], o, f, m, g, b, y, v, P, x, k, S, $, E, A, F), R;
}
var _ue = { kernelName: Fa, backendName: "wasm", setupFunc: Tue, kernelFunc: $ue };
var Aue = Kt(Pa);
var Eue = false;
var Rue = gn(mo, Eue, "bool");
var Due = Kt(za, "float32");
function eg(e) {
  let { inputs: t, attrs: n, backend: s } = e, { input: r } = t, { dim: a } = n, i = r.shape.length, o = r.shape.slice(), u = a;
  return a < 0 && (w.assert(-(i + 1) <= a, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), u = i + a + 1), o.splice(u, 0, 1), yn({ inputs: { x: r }, backend: s, attrs: { shape: o } });
}
var Fue = { kernelName: go, backendName: "wasm", kernelFunc: eg };
function cN(e) {
  let { attrs: { shape: t, value: n, dtype: s }, backend: r } = e, a = r.makeOutput(t, s);
  return r.typedArrayFromHeap(a).fill(n), a;
}
var Oue = { kernelName: ml, backendName: "wasm", kernelFunc: cN };
var dN;
function Pue(e) {
  dN = e.wasm.cwrap(yo, null, ["number", "number", "number", "number", "number", "number"]);
}
function zue(e) {
  let { inputs: t, backend: n } = e, { image: s } = t, r = n.makeOutput(s.shape, s.dtype), a = n.dataIdMap.get(s.dataId).id, i = n.dataIdMap.get(r.dataId).id, [o, u, l, c] = s.shape;
  return dN(a, o, u, l, c, i), r;
}
var Mue = { kernelName: yo, backendName: "wasm", kernelFunc: zue, setupFunc: Pue };
var Lue = Kt(Ma);
var Bue = false;
var Vue = gn(La, Bue);
var pN;
function Wue(e) {
  pN = e.wasm.cwrap(Ba, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function Uue(e) {
  let { backend: t, inputs: n, attrs: s } = e, { varianceEpsilon: r } = s, { x: a, mean: i, variance: o, offset: u, scale: l } = n, c = t.dataIdMap.get(a.dataId).id, p = t.dataIdMap.get(i.dataId).id, d = t.dataIdMap.get(o.dataId).id, h = u != null ? t.dataIdMap.get(u.dataId).id : 0, f = l != null ? t.dataIdMap.get(l.dataId).id : 0, m = t.makeOutput(a.shape, a.dtype);
  if (w.sizeFromShape(a.shape) === 0)
    return m;
  let g = t.dataIdMap.get(m.dataId).id;
  return pN(c, p, d, h, f, r, g), m;
}
var Gue = { kernelName: Ba, backendName: "wasm", setupFunc: Wue, kernelFunc: Uue };
var hN;
function Hue(e) {
  hN = e.wasm.cwrap(ia, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function que(e) {
  let { inputs: t, attrs: n, backend: s } = e, { x: r, filter: a, bias: i, preluActivationWeights: o } = t, { strides: u, pad: l, dilations: c, dataFormat: p, dimRoundingMode: d, activation: h, leakyreluAlpha: f } = n, m = C.computeConv2DInfo(r.shape, a.shape, u, c, l, d), g = th[h];
  if (g == null)
    throw new Error(`${h} activation not yet supported for FusedConv2D in the wasm backend.`);
  let b = s.dataIdMap.get(r.dataId).id, y = s.dataIdMap.get(a.dataId).id, v = m.outChannels, x = 0;
  if (i != null) {
    let ne = s.dataIdMap.get(i.dataId);
    if (ne.shape.length !== 1)
      throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${ne.shape.length}.`);
    if (ne.shape[0] !== v)
      throw new Error(`FusedConv2D bias shape (${ne.shape}) does not match the number of output channels (${v})`);
    x = ne.id;
  }
  let k = m.filterHeight, S = m.filterWidth, $ = m.padInfo.top, E = m.padInfo.right, A = m.padInfo.bottom, P = m.padInfo.left, R = m.dilationHeight, F = m.dilationWidth, T = m.strideHeight, z = m.strideWidth, W = m.inChannels, q = m.padInfo.type === "SAME" ? 1 : 0, K = m.batchSize, Y = m.inHeight, Z = m.inWidth;
  if (p !== "NHWC")
    throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${p}'. Please use 'NHWC'.`);
  let te = s.makeOutput(m.outShape, "float32"), ee = s.dataIdMap.get(te.dataId).id, se = o == null ? 0 : s.dataIdMap.get(o.dataId).id;
  return hN(b, K, Y, Z, y, k, S, x, $, E, A, P, q, R, F, T, z, W, v, g, se, f || 0, ee), te;
}
var jue = { kernelName: ia, backendName: "wasm", setupFunc: Hue, kernelFunc: que };
var fN;
function Kue(e) {
  fN = e.wasm.cwrap(oa, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Xue(e) {
  let { inputs: t, attrs: n, backend: s } = e, { x: r, filter: a, bias: i, preluActivationWeights: o } = t, { strides: u, pad: l, dilations: c, dataFormat: p, dimRoundingMode: d, activation: h, leakyreluAlpha: f } = n, m = C.computeConv2DInfo(r.shape, a.shape, u, c, l, d, true), g = th[h];
  if (g == null)
    throw new Error(`${h} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);
  let b = s.dataIdMap.get(r.dataId).id, y = s.dataIdMap.get(a.dataId).id, v = m.outChannels, x = 0;
  if (i != null) {
    let ne = s.dataIdMap.get(i.dataId);
    if (ne.shape.length !== 1)
      throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${ne.shape.length}.`);
    if (ne.shape[0] !== v)
      throw new Error(`FusedDepthwiseConv2D bias shape (${ne.shape}) does not match the number of output channels (${v})`);
    x = ne.id;
  }
  let k = m.filterHeight, S = m.filterWidth, $ = m.padInfo.top, E = m.padInfo.right, A = m.padInfo.bottom, P = m.padInfo.left, R = m.dilationHeight, F = m.dilationWidth, T = m.strideHeight, z = m.strideWidth, W = m.inChannels, q = m.padInfo.type === "SAME" ? 1 : 0, K = m.batchSize, Y = m.inHeight, Z = m.inWidth;
  if (p !== "NHWC")
    throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${p}'. Please use 'NHWC'.`);
  let te = s.makeOutput(m.outShape, "float32"), ee = s.dataIdMap.get(te.dataId).id, se = o == null ? 0 : s.dataIdMap.get(o.dataId).id;
  return fN(b, K, Y, Z, y, k, S, x, $, E, A, P, q, R, F, T, z, W, v, g, se, f || 0, ee), te;
}
var Yue = { kernelName: oa, backendName: "wasm", setupFunc: Kue, kernelFunc: Xue };
var mN;
function Que(e) {
  mN = e.wasm.cwrap(xo, null, ["number", "number", "number", "number", "number", "number", "array", "number"]);
}
function Zue(e) {
  let { backend: t, inputs: n } = e, { params: s, indices: r } = n, [a, i, o, u] = Dk.prepareAndValidate(s, r), l = t.makeOutput(a, s.dtype);
  if (i === 0)
    return l;
  let c = r.shape, p = c[c.length - 1], h = t.dataIdMap.get(s.dataId).id, m = t.dataIdMap.get(r.dataId).id, g = new Uint8Array(new Int32Array(u).buffer), b = t.dataIdMap.get(l.dataId).id;
  return mN(h, It[s.dtype], m, i, p, o, g, b), l;
}
var Jue = { kernelName: xo, backendName: "wasm", setupFunc: Que, kernelFunc: Zue };
var gN;
function ele(e) {
  gN = e.wasm.cwrap("Gather", null, ["number", "number", "array", "number", "number", "number", "array", "number"]);
}
function tle(e) {
  let { backend: t, inputs: n, attrs: s } = e, { x: r, indices: a } = n, { axis: i, batchDims: o } = s, u = w.parseAxisParam(i, r.shape)[0], l = t.readSync(a.dataId), c = r.shape[u];
  for (let A = 0; A < l.length; ++A) {
    let P = l[A];
    w.assert(P <= c - 1 && P >= 0, () => `GatherV2: the index value ${P} is not in [0, ${c - 1}]`);
  }
  let p = C.segment_util.collectGatherOpShapeInfo(r, a, u, o), d = yn({ inputs: { x: r }, attrs: { shape: [p.batchSize, p.outerSize, p.dimSize, p.sliceSize] }, backend: t }), h = w.sizeFromShape(a.shape), f = yn({ inputs: { x: a }, attrs: { shape: [p.batchSize, h / p.batchSize] }, backend: t }), m = [p.batchSize, p.outerSize, h / p.batchSize, p.sliceSize], g = t.makeOutput(m, r.dtype);
  if (w.sizeFromShape(r.shape) === 0)
    return g;
  let b = d.shape.length - 1, v = t.dataIdMap.get(d.dataId).id, k = t.dataIdMap.get(f.dataId).id, S = t.dataIdMap.get(g.dataId).id, $ = new Uint8Array(new Int32Array(w.computeStrides(d.shape)).buffer), E = new Uint8Array(new Int32Array(w.computeStrides(m)).buffer);
  return gN(v, It[r.dtype], $, b, k, p.batchSize, E, S), t.disposeData(d.dataId), t.disposeData(f.dataId), g.shape = p.outputShape, g;
}
var nle = { kernelName: vo, backendName: "wasm", setupFunc: ele, kernelFunc: tle };
var sle = false;
var rle = gn(wo, sle, "bool");
var ale = false;
var ile = gn(Va, ale, "bool");
var bN;
function ole(e) {
  bN = e.wasm.cwrap(Ua, null, ["number", "number", "number", "number"]);
}
function ule(e) {
  let { inputs: { x: t }, attrs: { alpha: n }, backend: s } = e, r = s.dataIdMap.get(t.dataId).id, a = s.makeOutput(t.shape, "float32");
  if (w.sizeFromShape(t.shape) !== 0) {
    let i = s.dataIdMap.get(a.dataId).id;
    bN(r, It[t.dtype], n, i);
  }
  return a;
}
var lle = { kernelName: Ua, backendName: "wasm", setupFunc: ole, kernelFunc: ule };
var cle = false;
var dle = gn(ko, cle, "bool");
var ple = false;
var hle = gn(Io, ple, "bool");
var fle = Kt(Ga);
var mle = false;
var gle = gn(So, mle, "bool");
var yN;
function ble(e) {
  yN = e.wasm.cwrap(Ha, null, ["number", "number", "number", "number"]);
}
function yle(e) {
  let { backend: t, inputs: n, attrs: s } = e, { reductionIndices: r, keepDims: a } = s, { x: i } = n, u = t.dataIdMap.get(i.dataId).id, l = i, { transposed: c, axes: p, originalAxes: d, inputWasTransposed: h } = Or(i, r, t);
  if (h) {
    let v = t.dataIdMap.get(c.dataId).id;
    l = c, u = v;
  }
  let f = l.shape.length;
  C.assertAxesAreInnerMostDims("max", p, f);
  let [m, g] = C.computeOutAndReduceShapes(l.shape, p), b = w.sizeFromShape(g), y = t.makeOutput(m, i.dtype);
  if (w.sizeFromShape(l.shape) !== 0) {
    let v = t.dataIdMap.get(y.dataId).id;
    yN(u, It[i.dtype], b, v);
  }
  if (h && t.disposeData(c.dataId), a) {
    let v = C.expandShapeToKeepDim(y.shape, d);
    y.shape = v;
  }
  return y;
}
var vle = { kernelName: Ha, backendName: "wasm", setupFunc: ble, kernelFunc: yle };
var xle = false;
var wle = gn(qa, xle);
var vN;
function kle(e) {
  vN = e.wasm.cwrap(ja, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Ile(e) {
  let { inputs: t, attrs: n, backend: s } = e, r = t.x, a = s.dataIdMap.get(r.dataId).id;
  w.assert(r.dtype === "float32", () => `Error in MaxPool: only float32 input is supported. Got ${r.dtype}.`);
  let { filterSize: i, strides: o, pad: u, dimRoundingMode: l } = n, c = C.computePool2DInfo(r.shape, i, o, 1, u, l), p = c.filterHeight, d = c.filterWidth, h = c.padInfo.top, f = c.padInfo.right, m = c.padInfo.bottom, g = c.padInfo.left, b = c.dilationHeight, y = c.dilationWidth, v = c.strideHeight, x = c.strideWidth, k = c.inChannels, S = c.outChannels;
  if (c.dataFormat !== "channelsLast")
    throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);
  let $ = s.makeOutput(c.outShape, "float32"), E = s.dataIdMap.get($.dataId).id;
  return vN(a, r.shape[0], r.shape[1], r.shape[2], p, d, h, f, m, g, b, y, v, x, k, S, E), $;
}
var Sle = { kernelName: ja, backendName: "wasm", setupFunc: kle, kernelFunc: Ile };
var xN;
function Cle(e) {
  xN = e.wasm.cwrap(Ka, null, ["number, number, number"]);
}
function Nle(e) {
  let { backend: t, inputs: n, attrs: s } = e, { axis: r, keepDims: a } = s, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, u = o, l = i, { transposed: c, axes: p, originalAxes: d, inputWasTransposed: h } = Or(i, r, t), f = p;
  if (h) {
    let x = t.dataIdMap.get(c.dataId).id;
    x !== o && (l = c, u = x, f = C.getInnerMostAxes(f.length, l.shape.length));
  }
  C.assertAxesAreInnerMostDims("mean", f, l.shape.length);
  let [m, g] = C.computeOutAndReduceShapes(l.shape, f), b = w.sizeFromShape(g), y = l;
  l.dtype !== "float32" && (y = ac({ backend: t, inputs: { x: l }, attrs: { dtype: "float32" } }), u = t.dataIdMap.get(y.dataId).id);
  let v = t.makeOutput(m, "float32");
  if (w.sizeFromShape(l.shape) !== 0) {
    let x = t.dataIdMap.get(v.dataId).id;
    xN(u, b, x);
  }
  if (h && t.disposeData(c.dataId), a) {
    let x = C.expandShapeToKeepDim(v.shape, d);
    v.shape = x;
  }
  return l.dtype !== "float32" && t.disposeData(y.dataId), v;
}
var Tle = { kernelName: Ka, backendName: "wasm", setupFunc: Cle, kernelFunc: Nle };
var wN;
function $le(e) {
  wN = e.wasm.cwrap(Xa, null, ["number", "number", "number", "number"]);
}
function _le(e) {
  let { backend: t, inputs: n, attrs: s } = e, { axis: r, keepDims: a } = s, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, u = o, l = i, { transposed: c, axes: p, originalAxes: d, inputWasTransposed: h } = Or(i, r, t);
  if (h) {
    let v = t.dataIdMap.get(c.dataId).id;
    v !== o && (l = c, u = v);
  }
  let f = l.shape.length;
  C.assertAxesAreInnerMostDims("min", p, f);
  let [m, g] = C.computeOutAndReduceShapes(l.shape, p), b = w.sizeFromShape(g), y = t.makeOutput(m, l.dtype);
  if (w.sizeFromShape(l.shape) !== 0) {
    let v = t.dataIdMap.get(y.dataId).id;
    wN(u, It[i.dtype], b, v);
  }
  if (h && t.disposeData(c.dataId), a) {
    let v = C.expandShapeToKeepDim(y.shape, d);
    y.shape = v;
  }
  return y;
}
var Ale = { kernelName: Xa, backendName: "wasm", setupFunc: $le, kernelFunc: _le };
var Ele = false;
var Rle = gn(Ya, Ele);
var kN = ((e) => (e[e.reflect = 0] = "reflect", e[e.symmetric = 1] = "symmetric", e))(kN || {});
var IN;
function Dle(e) {
  IN = e.wasm.cwrap(Qa, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function Fle(e) {
  let { inputs: { x: t }, backend: n, attrs: { paddings: s, mode: r } } = e, a = s.map((f, m) => f[0] + t.shape[m] + f[1]), i = n.dataIdMap.get(t.dataId).id, o = n.makeOutput(a, t.dtype), u = n.dataIdMap.get(o.dataId).id, l = new Uint8Array(new Int32Array(t.shape).buffer), c = s.map((f) => f[0]), p = s.map((f) => f[1]), d = new Uint8Array(new Int32Array(c).buffer), h = new Uint8Array(new Int32Array(p).buffer);
  return IN(i, l, t.shape.length, It[t.dtype], d, h, kN[r], u), o;
}
var Ole = { kernelName: Qa, backendName: "wasm", kernelFunc: Fle, setupFunc: Dle };
var Ple = true;
var zle = gn(Za, Ple);
var Mle = Kt(Co);
function Fv(e, t) {
  let n = new Int32Array(e.wasm.HEAPU8.buffer, t, 4), s = n[0], r = n[1], a = n[2], i = n[3];
  return e.wasm._free(t), { pSelectedIndices: s, selectedSize: r, pSelectedScores: a, pValidOutputs: i };
}
var SN;
function Lle(e) {
  SN = e.wasm.cwrap(To, "number", ["number", "number", "number", "number", "number"]);
}
function Ble(e) {
  let { backend: t, inputs: n, attrs: s } = e, { iouThreshold: r, maxOutputSize: a, scoreThreshold: i } = s, { boxes: o, scores: u } = n, l = t.dataIdMap.get(o.dataId).id, c = t.dataIdMap.get(u.dataId).id, p = SN(l, c, a, r, i), { pSelectedIndices: d, selectedSize: h, pSelectedScores: f, pValidOutputs: m } = Fv(t, p);
  return t.wasm._free(f), t.wasm._free(m), t.makeOutput([h], "int32", d);
}
var Vle = { kernelName: To, backendName: "wasm", setupFunc: Lle, kernelFunc: Ble };
var CN;
function Wle(e) {
  CN = e.wasm.cwrap(kl, "number", ["number", "number", "number", "number", "number", "bool"]);
}
function Ule(e) {
  let { backend: t, inputs: n, attrs: s } = e, { iouThreshold: r, maxOutputSize: a, scoreThreshold: i, padToMaxOutputSize: o } = s, { boxes: u, scores: l } = n, c = t.dataIdMap.get(u.dataId).id, p = t.dataIdMap.get(l.dataId).id, d = CN(c, p, a, r, i, o), { pSelectedIndices: h, selectedSize: f, pSelectedScores: m, pValidOutputs: g } = Fv(t, d);
  t.wasm._free(m);
  let b = t.makeOutput([f], "int32", h), y = t.makeOutput([], "int32", g);
  return [b, y];
}
var Gle = { kernelName: kl, backendName: "wasm", setupFunc: Wle, kernelFunc: Ule };
var NN;
function Hle(e) {
  NN = e.wasm.cwrap($o, "number", ["number", "number", "number", "number", "number", "number"]);
}
function qle(e) {
  let { backend: t, inputs: n, attrs: s } = e, { iouThreshold: r, maxOutputSize: a, scoreThreshold: i, softNmsSigma: o } = s, { boxes: u, scores: l } = n, c = t.dataIdMap.get(u.dataId).id, p = t.dataIdMap.get(l.dataId).id, d = NN(c, p, a, r, i, o), { pSelectedIndices: h, selectedSize: f, pSelectedScores: m, pValidOutputs: g } = Fv(t, d);
  t.wasm._free(g);
  let b = t.makeOutput([f], "int32", h), y = t.makeOutput([f], "float32", m);
  return [b, y];
}
var jle = { kernelName: $o, backendName: "wasm", setupFunc: Hle, kernelFunc: qle };
var Kle = false;
var Xle = gn(No, Kle, "bool");
var TN;
function Yle(e) {
  TN = e.wasm.cwrap(Ao, null, ["number", "number", "number", "number", "number"]);
}
function Qle(e) {
  let { inputs: t, backend: n, attrs: s } = e, { indices: r } = t, { depth: a, onValue: i, offValue: o } = s, u = n.makeOutput([...r.shape, a], "int32"), l = n.dataIdMap.get(u.dataId).id, p = n.dataIdMap.get(r.dataId).id;
  return TN(p, a, i, o, l), u;
}
var Zle = { kernelName: Ao, backendName: "wasm", setupFunc: Yle, kernelFunc: Qle };
function Jle(e) {
  let { inputs: { x: t }, backend: n } = e, s = n.makeOutput(t.shape, t.dtype);
  return n.typedArrayFromHeap(s).fill(1), s;
}
var ece = { kernelName: _o, backendName: "wasm", kernelFunc: Jle };
function tce(e) {
  let { inputs: t, backend: n, attrs: s } = e, { axis: r } = s;
  if (t.length === 1)
    return eg({ inputs: { input: t[0] }, backend: n, attrs: { dim: r } });
  let a = t[0].shape, i = t[0].dtype;
  t.forEach((c) => {
    w.assertShapesMatch(a, c.shape, "All tensors passed to stack must have matching shapes"), w.assert(i === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let o = [], u = t.map((c) => {
    let p = eg({ inputs: { input: c }, backend: n, attrs: { dim: r } });
    return o.push(p), p;
  }), l = tN({ inputs: u, backend: n, attrs: { axis: r } });
  return o.forEach((c) => n.disposeData(c.dataId)), l;
}
var nce = { kernelName: Eo, backendName: "wasm", kernelFunc: tce };
var $N;
function sce(e) {
  $N = e.wasm.cwrap(Ja, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function rce(e) {
  let { inputs: { x: t }, backend: n, attrs: { paddings: s, constantValue: r } } = e, a = s.map((m, g) => m[0] + t.shape[g] + m[1]);
  if (w.sizeFromShape(t.shape) === 0)
    return cN({ backend: n, attrs: { shape: a, value: r, dtype: t.dtype } });
  let i = n.dataIdMap.get(t.dataId).id, o = n.makeOutput(a, t.dtype), l = n.dataIdMap.get(o.dataId).id, c = new Uint8Array(new Int32Array(t.shape).buffer), p = s.map((m) => m[0]), d = s.map((m) => m[1]), h = new Uint8Array(new Int32Array(p).buffer), f = new Uint8Array(new Int32Array(d).buffer);
  return $N(i, c, t.shape.length, It[t.dtype], h, f, r, l), o;
}
var _N = { kernelName: Ja, backendName: "wasm", kernelFunc: rce, setupFunc: sce };
var ace = false;
var ice = gn(ei, ace);
var AN;
function oce(e) {
  AN = e.wasm.cwrap(ti, null, ["number", "number", "number"]);
}
function uce(e) {
  let { inputs: t, backend: n } = e, { x: s, alpha: r } = t, a = n.dataIdMap.get(s.dataId).id, i = n.dataIdMap.get(r.dataId).id, o = a, u = s, l = u;
  u.dtype !== "float32" && (l = ac({ backend: n, inputs: { x: s }, attrs: { dtype: "float32" } }), o = n.dataIdMap.get(l.dataId).id);
  let c = n.makeOutput(s.shape, "float32"), p = n.dataIdMap.get(c.dataId).id;
  return AN(o, i, p), u.dtype !== "float32" && n.disposeData(l.dataId), c;
}
var lce = { kernelName: ti, backendName: "wasm", setupFunc: oce, kernelFunc: uce };
var EN;
function cce(e) {
  EN = e.wasm.cwrap(ni, null, ["number", "number", "number", "number"]);
}
function dce(e) {
  let { backend: t, inputs: n, attrs: s } = e, { axis: r, keepDims: a } = s, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, u = o, l = i, { transposed: c, axes: p, originalAxes: d, inputWasTransposed: h } = Or(i, r, t), f = p;
  if (h) {
    let v = t.dataIdMap.get(c.dataId).id;
    v !== o && (l = c, u = v, f = C.getInnerMostAxes(f.length, l.shape.length));
  }
  C.assertAxesAreInnerMostDims("prod", f, l.shape.length);
  let [m, g] = C.computeOutAndReduceShapes(l.shape, f), b = w.sizeFromShape(g), y = t.makeOutput(m, l.dtype);
  if (w.sizeFromShape(l.shape) !== 0) {
    let v = t.dataIdMap.get(y.dataId).id;
    EN(u, b, It[y.dtype], v);
  }
  if (h && t.disposeData(c.dataId), a) {
    let v = C.expandShapeToKeepDim(y.shape, d);
    y.shape = v;
  }
  return y;
}
var pce = { kernelName: ni, backendName: "wasm", setupFunc: cce, kernelFunc: dce };
var hce = (e) => {
  let { backend: t, attrs: n } = e, { start: s, stop: r, step: a, dtype: i } = n, o = iv(s, r, a, i), u = t.makeOutput([o.length], i);
  return t.typedArrayFromHeap(u).set(o), u;
};
var fce = { kernelName: Il, backendName: "wasm", kernelFunc: hce };
var mce = true;
var gce = gn(Oa, mce);
var bce = Kt(si);
var yce = Kt(ai);
var RN;
function vce(e) {
  RN = e.wasm.cwrap(ri, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function xce(e) {
  let { backend: t, inputs: n, attrs: s } = e, { images: r } = n, { alignCorners: a, halfPixelCenters: i, size: o } = s, [u, l] = o, [c, p, d, h] = r.shape, f = [c, u, l, h], m = t.dataIdMap.get(r.dataId), g;
  m.dtype !== "float32" && (g = ac({ backend: t, inputs: { x: r }, attrs: { dtype: "float32" } }), m = t.dataIdMap.get(g.dataId));
  let b = m.id, y = t.makeOutput(f, "float32");
  if (w.sizeFromShape(r.shape) === 0)
    return y;
  let v = t.dataIdMap.get(y.dataId).id;
  return RN(b, c, p, d, h, u, l, a ? 1 : 0, i ? 1 : 0, v), g != null && t.disposeData(g.dataId), y;
}
var wce = { kernelName: ri, backendName: "wasm", setupFunc: vce, kernelFunc: xce };
var DN;
function kce(e) {
  DN = e.wasm.cwrap(Do, null, ["number", "array", "number", "array", "number", "number"]);
}
function Ice(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { dims: a } = s, i = w.parseAxisParam(a, r.shape);
  if (r.shape.length === 0)
    return nh({ inputs: { x: r }, backend: n });
  let o = n.makeOutput(r.shape, r.dtype), u = n.dataIdMap.get(r.dataId).id, l = n.dataIdMap.get(o.dataId).id, c = new Uint8Array(new Int32Array(i).buffer), p = new Uint8Array(new Int32Array(r.shape).buffer);
  DN(u, c, i.length, p, r.shape.length, l);
  let d = yn({ inputs: { x: o }, attrs: { shape: r.shape }, backend: n });
  return n.disposeData(o.dataId), d;
}
var Sce = { kernelName: Do, backendName: "wasm", kernelFunc: Ice, setupFunc: kce };
var FN;
function Cce(e) {
  FN = e.wasm.cwrap(jo, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function Nce(e) {
  let { inputs: t, backend: n, attrs: s } = e, { image: r } = t, { radians: a, fillValue: i, center: o } = s, u = n.makeOutput(r.shape, r.dtype), l = n.dataIdMap.get(r.dataId).id, c = n.dataIdMap.get(u.dataId).id, [p, d, h, f] = r.shape, [m, g] = C.getImageCenter(o, d, h), b = i === 0, y = 255, v = typeof i == "number" ? [i, i, i, b ? 0 : y] : [...i, y], x = new Uint8Array(new Int32Array(v).buffer);
  return FN(l, p, d, h, f, a, m, g, x, v.length, c), u;
}
var Tce = { kernelName: jo, backendName: "wasm", kernelFunc: Nce, setupFunc: Cce };
var $ce = Kt(Fo);
var _ce = Kt(ii);
var ON;
function Ace(e) {
  ON = e.wasm.cwrap(Oo, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function Ece(e) {
  let { backend: t, inputs: n, attrs: s } = e, { indices: r, updates: a } = n, { shape: i } = s, o = t.makeOutput(i, a.dtype);
  if (w.sizeFromShape(i) === 0)
    return o;
  let { sliceRank: u, numUpdates: l, sliceSize: c, strides: p, outputSize: d } = Ok.calculateShapes(a, r, i), f = t.dataIdMap.get(r.dataId).id, g = t.dataIdMap.get(a.dataId).id, b = new Uint8Array(new Int32Array(p).buffer), y = t.dataIdMap.get(o.dataId).id;
  return ON(f, g, It[a.dtype], u, l, c, b, d, y), o;
}
var Rce = { kernelName: Oo, backendName: "wasm", setupFunc: Ace, kernelFunc: Ece };
var PN;
function Dce(e) {
  PN = e.wasm.cwrap("SelectV2", null, ["number", "number", "number", "number", "number"]);
}
function Fce(e) {
  let { inputs: t, backend: n } = e, { condition: s, t: r, e: a } = t, i = n.dataIdMap.get(s.dataId).id, o = n.dataIdMap.get(r.dataId).id, u = n.dataIdMap.get(a.dataId).id, l = n.makeOutput(r.shape, r.dtype), c = n.dataIdMap.get(l.dataId).id, p = s.shape.length, d = r.shape.length, h = p === 0 || p > 1 || d === 1 ? 1 : w.sizeFromShape(r.shape.slice(1));
  return PN(i, o, u, h, c), l;
}
var Oce = { kernelName: Po, backendName: "wasm", kernelFunc: Fce, setupFunc: Dce };
var zN;
function Pce(e) {
  zN = e.wasm.cwrap(ui, null, ["number", "number"]);
}
function zce(e) {
  let { backend: t, inputs: { x: n } } = e, s = t.dataIdMap.get(n.dataId).id, r = t.makeOutput(n.shape, n.dtype), a = t.dataIdMap.get(r.dataId).id;
  return w.sizeFromShape(r.shape) === 0 || zN(s, a), r;
}
var Mce = { kernelName: "Sigmoid", backendName: "wasm", setupFunc: Pce, kernelFunc: zce };
var Lce = Kt(oi);
var MN;
function Bce(e) {
  MN = e.wasm.cwrap(di, null, ["number", "number", "number", "number"]);
}
function Vce(e) {
  let { backend: t, inputs: { logits: n }, attrs: { dim: s } } = e, r = t.dataIdMap.get(n.dataId).id, a = t.makeOutput(n.shape, n.dtype), i = t.dataIdMap.get(a.dataId).id, o = n.shape[s], u = w.sizeFromShape(n.shape) / o;
  return w.sizeFromShape(a.shape) === 0 || MN(r, i, o, u), a;
}
var Wce = { kernelName: di, backendName: "wasm", setupFunc: Bce, kernelFunc: Vce };
function Uce(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, { blockShape: a, paddings: i } = s, o = w.sizeFromShape(a), u = [[0, 0]];
  u.push(...i);
  for (let S = 1 + a.length; S < r.shape.length; ++S)
    u.push([0, 0]);
  let l = _N.kernelFunc({ inputs: { x: r }, backend: n, attrs: { paddings: u, constantValue: 0 } }), c = C.getReshaped(l.shape, a, o, false), p = C.getPermuted(c.length, a.length, false), d = C.getReshapedPermuted(l.shape, a, o, false), m = yn({ inputs: { x: l }, backend: n, attrs: { shape: c } }), y = kr({ inputs: { x: m }, backend: n, attrs: { perm: p } }), k = yn({ inputs: { x: y }, backend: n, attrs: { shape: d } });
  return n.disposeData(l.dataId), n.disposeData(m.dataId), n.disposeData(y.dataId), k;
}
var Gce = { kernelName: Lo, backendName: "wasm", kernelFunc: Uce };
var LN;
function Hce(e) {
  LN = e.wasm.cwrap("SparseFillEmptyRows", "number", ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function qce(e) {
  let { backend: t, inputs: n } = e, { indices: s, values: r, denseShape: a, defaultValue: i } = n, o = s.shape[0], u = s.shape[1], l = t.readSync(a.dataId)[0], c = [o + l, u], p = t.dataIdMap.get(s.dataId).id, d = t.dataIdMap.get(r.dataId).id, h = t.dataIdMap.get(i.dataId).id, f = t.makeOutput(c, s.dtype), m = t.dataIdMap.get(f.dataId).id, g = t.makeOutput(c.slice(0, 1), r.dtype), b = t.dataIdMap.get(g.dataId).id, y = t.makeOutput([l], "bool"), v = t.dataIdMap.get(y.dataId).id, x = t.makeOutput([o], s.dtype), k = t.dataIdMap.get(x.dataId).id, S = t.makeOutput([4], "int32"), $ = t.dataIdMap.get(S.dataId).id, E = LN(p, d, It[r.dtype], o, l, u, h, m, b, v, k, $), A = t.readSync(S.dataId), P;
  switch (A[0]) {
    case 1: {
      P = C.getSparseFillEmptyRowsIndicesDenseShapeMismatch(A[1]);
      break;
    }
    case 2: {
      P = C.getSparseFillEmptyRowsNegativeIndexErrorMessage(A[1], A[2]);
      break;
    }
    case 3:
      P = C.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(A[1], A[2], A[3]);
      break;
    default:
      P = "";
  }
  if (t.disposeData(S.dataId), P)
    throw t.disposeData(f.dataId), t.disposeData(g.dataId), t.disposeData(y.dataId), t.disposeData(x.dataId), new Error(P);
  let R = f, F = g;
  return E !== c[0] && (R = xa({ inputs: { x: f }, attrs: { begin: 0, size: [E, u] }, backend: t }), F = xa({ inputs: { x: g }, attrs: { begin: 0, size: E }, backend: t }), t.disposeData(f.dataId), t.disposeData(g.dataId)), [R, F, y, x];
}
var jce = { kernelName: ap, backendName: "wasm", setupFunc: Hce, kernelFunc: qce };
var BN;
function Kce(e) {
  BN = e.wasm.cwrap(_l, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function Xce(e) {
  let { backend: t, inputs: n } = e, { inputIndices: s, inputShape: r, newShape: a } = n;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
  if (a.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${a.shape}`);
  let i = t.dataIdMap.get(s.dataId).id, o = t.dataIdMap.get(r.dataId).id, u = t.dataIdMap.get(a.dataId).id, l = s.shape[0], c = w.sizeFromShape(a.shape), p = t.makeOutput([l, c], s.dtype), d = t.dataIdMap.get(p.dataId).id, h = t.makeOutput([c], a.dtype), f = t.dataIdMap.get(h.dataId).id, m = t.makeOutput([3], "int32"), g = t.dataIdMap.get(m.dataId).id;
  BN(i, o, u, l, d, f, g);
  let b = t.readSync(m.dataId), y;
  switch (b[0]) {
    case 0: {
      y = C.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(b[1], b[2]);
      break;
    }
    case 1: {
      y = C.getSparseReshapeNegativeOutputDimErrorMessage(b[1], b[2]);
      break;
    }
    case 2:
      y = C.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage();
      break;
    case 3: {
      let v = Array.from(t.readSync(r.dataId)), x = Array.from(t.readSync(h.dataId));
      y = C.getSparseReshapeInputOutputMultipleErrorMessage(v, x);
      break;
    }
    case 4: {
      let v = Array.from(t.readSync(r.dataId)), x = Array.from(t.readSync(h.dataId));
      y = C.getSparseReshapeInputOutputMismatchErrorMessage(v, x);
      break;
    }
    default:
      y = "";
  }
  if (t.disposeData(m.dataId), y)
    throw t.disposeData(p.dataId), t.disposeData(h.dataId), new Error(y);
  return [p, h];
}
var Yce = { kernelName: _l, backendName: "wasm", setupFunc: Kce, kernelFunc: Xce };
var VN;
function WN(e) {
  VN = e.wasm.cwrap("SparseSegmentReduction", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function UN(e, t) {
  let { backend: n, inputs: s } = e, { data: r, indices: a, segmentIds: i } = s, o = a.shape[0], u = n.readSync(i.dataId, o - 1, o)[0], c = o > 0 ? u + 1 : 0;
  if (c < 0)
    throw new Error(C.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let p = r.shape.slice();
  p[0] = c;
  let d = n.dataIdMap.get(r.dataId).id, h = n.dataIdMap.get(a.dataId).id, f = n.dataIdMap.get(i.dataId).id, m = n.makeOutput(p, r.dtype), g = n.dataIdMap.get(m.dataId).id, b = n.makeOutput([4], "int32"), y = n.dataIdMap.get(b.dataId).id;
  VN(d, It[r.dtype], r.shape[0], h, f, g, y, t, 0);
  let v = n.readSync(b.dataId), x;
  switch (v[0]) {
    case 0: {
      x = C.getSparseSegmentReductionNegativeSegmentIdsErrorMessage();
      break;
    }
    case 1: {
      x = C.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();
      break;
    }
    case 2:
      x = C.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(v[1], v[2]);
      break;
    case 3:
      x = C.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(v[1], v[2], v[3]);
      break;
    default:
      x = "";
  }
  if (n.disposeData(b.dataId), x)
    throw n.disposeData(m.dataId), new Error(x);
  return m;
}
function Qce(e) {
  return UN(e, true);
}
var Zce = { kernelName: ip, backendName: "wasm", setupFunc: WN, kernelFunc: Qce };
function Jce(e) {
  return UN(e, false);
}
var ede = { kernelName: op, backendName: "wasm", setupFunc: WN, kernelFunc: Jce };
function tde(e) {
  let { inputs: t, attrs: n, backend: s } = e, { x: r } = t, { numOrSizeSplits: a, axis: i } = n, o = w.parseAxisParam(i, r.shape)[0], u = C.prepareSplitSize(r, a, o), l = new Array(r.shape.length).fill(0), c = r.shape.slice();
  return u.map((p) => {
    let d = [...c];
    d[o] = p;
    let h = xa({ inputs: { x: r }, attrs: { begin: l, size: d }, backend: s });
    return l[o] += p, h;
  });
}
var nde = { kernelName: Bo, backendName: "wasm", kernelFunc: tde };
var sde = Kt(li);
var rde = Kt(Al);
var ade = true;
var ide = gn(pi, ade);
var GN;
function ode(e) {
  GN = e.wasm.cwrap(gi, null, ["number", "number", "number", "number"]);
}
function ude(e) {
  let { backend: t, inputs: n, attrs: s } = e, { alpha: r } = s, { x: a } = n, i = t.dataIdMap.get(a.dataId).id, o = t.makeOutput(a.shape, a.dtype), u = t.dataIdMap.get(o.dataId).id;
  return GN(i, r, It[a.dtype], u), o;
}
var lde = { kernelName: gi, backendName: "wasm", setupFunc: ode, kernelFunc: ude };
var HN;
function cde(e) {
  HN = e.wasm.cwrap(Vo, null, ["number", "array", "number", "array", "array", "array", "array", "array", "number", "number"]);
}
function dde(e) {
  let { backend: t, inputs: n, attrs: s } = e, { x: r } = n, { begin: a, end: i, strides: o, beginMask: u, endMask: l, ellipsisMask: c, newAxisMask: p, shrinkAxisMask: d } = s, { finalShapeSparse: h, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: b, begin: y, end: v, strides: x } = wt.sliceInfo(r.shape, a, i, o, u, l, c, p, d), k;
  if (m)
    k = yn({ inputs: { x: r }, backend: t, attrs: { shape: f } });
  else if (g || b) {
    w.assert(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    let S = wt.computeOutShape(y, v, x), $ = xa({ inputs: { x: r }, backend: t, attrs: { begin: y, size: S } });
    k = yn({ inputs: { x: $ }, backend: t, attrs: { shape: f } }), t.disposeData($.dataId);
  } else {
    let S = t.makeOutput(h, "float32"), $ = t.dataIdMap.get(r.dataId).id, E = new Uint8Array(new Int32Array(w.computeStrides(r.shape)).buffer), A = new Uint8Array(new Int32Array(y).buffer), P = new Uint8Array(new Int32Array(v).buffer), R = new Uint8Array(new Int32Array(x).buffer), F = new Uint8Array(new Int32Array(h).buffer), T = new Uint8Array(new Int32Array(w.computeStrides(h)).buffer), z = t.dataIdMap.get(S.dataId).id;
    HN($, E, r.shape.length, A, P, R, F, T, h.length, z), k = yn({ inputs: { x: S }, backend: t, attrs: { shape: f } }), t.disposeData(S.dataId);
  }
  return k;
}
var pde = { kernelName: Vo, backendName: "wasm", setupFunc: cde, kernelFunc: dde };
var hde = true;
var fde = gn(hi, hde);
var qN;
function mde(e) {
  qN = e.wasm.cwrap(ci, null, ["number", "number", "number", "number"]);
}
function gde(e) {
  let { backend: t, inputs: n, attrs: s } = e, { axis: r, keepDims: a } = s, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, u = o, l = i, { transposed: c, axes: p, originalAxes: d, inputWasTransposed: h } = Or(i, r, t), f = p;
  if (h) {
    let v = t.dataIdMap.get(c.dataId).id;
    v !== o && (l = c, u = v, f = C.getInnerMostAxes(f.length, l.shape.length));
  }
  C.assertAxesAreInnerMostDims("sum", f, l.shape.length);
  let [m, g] = C.computeOutAndReduceShapes(l.shape, f), b = w.sizeFromShape(g), y = t.makeOutput(m, l.dtype);
  if (w.sizeFromShape(l.shape) !== 0) {
    let v = t.dataIdMap.get(y.dataId).id;
    qN(u, b, It[y.dtype], v);
  }
  if (h && t.disposeData(c.dataId), a) {
    let v = C.expandShapeToKeepDim(y.shape, d);
    y.shape = v;
  }
  return y;
}
var bde = { kernelName: ci, backendName: "wasm", setupFunc: mde, kernelFunc: gde };
var yde = Kt(Wo);
var vde = Kt(fi);
var jN;
function xde(e) {
  jN = e.wasm.cwrap(Nr, null, ["number", "array", "number", "array", "number", "number"]);
}
function wde(e) {
  let { inputs: t, backend: n, attrs: s } = e, { x: r } = t, a = n.dataIdMap.get(r.dataId).id, { reps: i } = s, o = new Array(r.shape.length);
  for (let d = 0; d < o.length; d++)
    o[d] = r.shape[d] * i[d];
  let u = new Uint8Array(new Int32Array(r.shape).buffer), l = new Uint8Array(new Int32Array(o).buffer), c = n.makeOutput(o, r.dtype), p = n.dataIdMap.get(c.dataId).id;
  return jN(a, u, r.shape.length, l, o.length, It[c.dtype], p), c;
}
var kde = { kernelName: Nr, backendName: "wasm", setupFunc: xde, kernelFunc: wde };
var KN;
function Ide(e) {
  KN = e.wasm.cwrap(Uo, null, ["number", "array", "number", "number", "number", "bool", "number", "number"]);
}
var Sde = ({ inputs: e, backend: t, attrs: n }) => {
  let { x: s } = e, { k: r, sorted: a } = n, i = t.dataIdMap.get(s.dataId).id, o = new Uint8Array(new Int32Array(s.shape).buffer), u = s.shape.slice();
  u[u.length - 1] = r;
  let l = t.makeOutput(u, s.dtype), c = t.dataIdMap.get(l.dataId).id, p = t.makeOutput(u, "int32"), d = t.dataIdMap.get(p.dataId).id;
  return KN(i, o, s.shape.length, It[s.dtype], r, a, c, d), [l, p];
};
var Cde = { kernelName: Uo, backendName: "wasm", setupFunc: Ide, kernelFunc: Sde };
var XN;
function Nde(e) {
  XN = e.wasm.cwrap(Go, null, ["number", "number", "bool", "number", "number", "number", "number", "number", "number", "array", "number", "number", "number", "number", "number"]);
}
function Tde(e) {
  let { backend: t, inputs: n, attrs: s } = e, { image: r, transforms: a } = n, { interpolation: i, fillMode: o, fillValue: u, outputShape: l } = s, [c, p, d, h] = r.shape, [f, m] = l != null ? l : [p, d], g = [c, f, m, h], b = new Uint8Array(new Int32Array(w.computeStrides(r.shape)).buffer), y = t.makeOutput(g, r.dtype), v = t.dataIdMap.get(y.dataId).id, k = t.dataIdMap.get(r.dataId).id, $ = t.dataIdMap.get(a.dataId).id, E = i === "nearest" ? 1 : 2, A;
  switch (o) {
    case "constant":
      A = 1;
      break;
    case "reflect":
      A = 2;
      break;
    case "wrap":
      A = 3;
      break;
    case "nearest":
      A = 4;
      break;
    default:
      A = 1;
      break;
  }
  return XN(k, $, a.shape[0] > 1, c, f, m, h, d, p, b, r.shape.length - 1, E, A, u, v), y;
}
var $de = { kernelName: Go, backendName: "wasm", setupFunc: Nde, kernelFunc: Tde };
function _de(e) {
  let { inputs: t, backend: n, attrs: s } = e, { value: r } = t, { axis: a } = s;
  a < 0 && (a += r.shape.length);
  let i = r.shape[a], o = r.shape.length, u = new Array(o - 1), l = 0;
  for (let h = 0; h < o; h++)
    h !== a && (u[l++] = r.shape[h]);
  let c = new Array(i), p = new Array(o).fill(0), d = r.shape.slice();
  d[a] = 1;
  for (let h = 0; h < c.length; h++)
    p[a] = h, c[h] = xa({ inputs: { x: r }, attrs: { begin: p, size: d }, backend: n });
  return c.map(({ dataId: h, dtype: f }) => ({ dataId: h, dtype: f, shape: u }));
}
var Ade = { kernelName: Ho, backendName: "wasm", kernelFunc: _de };
function Ede(e) {
  let { inputs: { x: t }, backend: n } = e, s = n.makeOutput(t.shape, t.dtype);
  return n.typedArrayFromHeap(s).fill(0), s;
}
var Rde = { kernelName: qo, backendName: "wasm", kernelFunc: Ede };
var Dde = [woe, koe, Soe, Toe, Ooe, Moe, Voe, Goe, Koe, eue, tue, nue, aue, iue, lue, pue, hue, fue, bue, xue, Iue, Nue, _ue, Aue, Rue, Due, Fue, Oue, Mue, Lue, Vue, Gue, jue, Yue, Jue, nle, rle, ile, $oe, lle, dle, hle, fle, gle, vle, wle, Sle, Tle, Ale, Rle, Ole, zle, Mle, Vle, Gle, jle, Xle, Zle, ece, nce, _N, ice, lce, pce, fce, gce, bce, yce, Hoe, wce, Sce, Tce, $ce, _ce, Rce, Oce, Mce, Lce, Zoe, Wce, Gce, jce, Yce, Zce, ede, nde, sde, rde, ide, lde, pde, fde, bde, yde, vde, kde, Cde, $de, Roe, Ade, Rde];
for (let e of Dde)
  El(e);
var tg = X();
tg.registerFlag("WASM_HAS_SIMD_SUPPORT", async () => WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11])));
tg.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT", async () => {
  if (tg.get("IS_NODE"))
    return false;
  try {
    return new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11]));
  } catch (e) {
    return false;
  }
});
var Gw = wa(c$());
var Fde = `"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",function(data){onmessage({data:data})});var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8"))},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"
");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=((info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports});self.onmessage=(e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob==="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module).then(function(instance){Module=instance})}else if(e.data.cmd==="run"){Module["__performance_now_clock_drift"]=performance.now()-e.data.time;Module["__emscripten_thread_init"](e.data.threadInfoStruct,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInit();try{var result=Module["invokeEntryPoint"](e.data.start_routine,e.data.arg);if(Module["keepRuntimeAlive"]()){Module["PThread"].setExitStatus(result)}else{Module["__emscripten_thread_exit"](result)}}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processThreadQueue"){if(Module["_pthread_self"]()){Module["_emscripten_current_thread_process_queued_calls"]()}}else if(e.data.cmd==="processProxyingQueue"){if(Module["_pthread_self"]()){Module["_emscripten_proxy_execute_queue"](e.data.queue)}}else{err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){err("worker.js onmessage() captured an uncaught exception: "+ex);if(ex&&ex.stack)err(ex.stack);if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}});`;
var Ode = wa(d$());
var Pde = class extends sl {
  constructor(e) {
    super(), this.wasm = e, this.dataIdNextNumber = 1, this.wasm.tfjs.initWithThreadsCount(YN), ng = this.wasm.tfjs.getThreadsCount(), this.dataIdMap = new Hd(this, Ss());
  }
  write(e, t, n) {
    let s = { id: this.dataIdNextNumber++ };
    return this.move(s, e, t, n, 1), s;
  }
  numDataIds() {
    return this.dataIdMap.numDataIds();
  }
  async time(e) {
    let t = w.now();
    return e(), { kernelMs: w.now() - t };
  }
  move(e, t, n, s, r) {
    let a = this.dataIdNextNumber++;
    if (s === "string") {
      let l = t;
      this.dataIdMap.set(e, { id: a, stringBytes: l, shape: n, dtype: s, memoryOffset: null, refCount: r });
      return;
    }
    let i = w.sizeFromShape(n), o = i * w.bytesPerElement(s), u = this.wasm._malloc(o);
    this.dataIdMap.set(e, { id: a, memoryOffset: u, shape: n, dtype: s, refCount: r }), this.wasm.tfjs.registerTensor(a, i, u), t != null && this.wasm.HEAPU8.set(new Uint8Array(t.buffer, t.byteOffset, o), u);
  }
  async read(e) {
    return this.readSync(e);
  }
  readSync(e, t, n) {
    let { memoryOffset: s, dtype: r, shape: a, stringBytes: i } = this.dataIdMap.get(e);
    if (r === "string")
      return (t == null || t === 0) && (n == null || n >= i.length) ? i : i.slice(t, n);
    t = t || 0, n = n || w.sizeFromShape(a);
    let o = w.bytesPerElement(r), u = this.wasm.HEAPU8.slice(s + t * o, s + n * o);
    return Lde(u.buffer, r);
  }
  disposeData(e, t = false) {
    if (this.dataIdMap.has(e)) {
      let n = this.dataIdMap.get(e);
      if (n.refCount--, !t && n.refCount > 0)
        return false;
      this.wasm._free(n.memoryOffset), this.wasm.tfjs.disposeData(n.id), this.dataIdMap.delete(e);
    }
    return true;
  }
  refCount(e) {
    return this.dataIdMap.has(e) ? this.dataIdMap.get(e).refCount : 0;
  }
  incRef(e) {
    let t = this.dataIdMap.get(e);
    t != null && t.refCount++;
  }
  floatPrecision() {
    return 32;
  }
  getMemoryOffset(e) {
    return this.dataIdMap.get(e).memoryOffset;
  }
  dispose() {
    this.wasm.tfjs.dispose(), "PThread" in this.wasm && this.wasm.PThread.terminateAllThreads(), this.wasm = null;
  }
  memory() {
    return { unreliable: false };
  }
  makeOutput(e, t, n) {
    let s;
    if (n == null)
      s = this.write(null, e, t);
    else {
      let r = this.dataIdNextNumber++;
      s = { id: r }, this.dataIdMap.set(s, { id: r, memoryOffset: n, shape: e, dtype: t, refCount: 1 });
      let a = w.sizeFromShape(e);
      this.wasm.tfjs.registerTensor(r, a, n);
    }
    return { dataId: s, shape: e, dtype: t };
  }
  typedArrayFromHeap({ shape: e, dtype: t, dataId: n }) {
    let s = this.wasm.HEAPU8.buffer, { memoryOffset: r } = this.dataIdMap.get(n), a = w.sizeFromShape(e);
    switch (t) {
      case "float32":
        return new Float32Array(s, r, a);
      case "int32":
        return new Int32Array(s, r, a);
      case "bool":
        return new Uint8Array(s, r, a);
      default:
        throw new Error(`Unknown dtype ${t}`);
    }
  }
};
function zde(e) {
  return (t, n) => (w.fetch(e, { credentials: "same-origin" }).then((s) => {
    s.ok || t.env.a(`failed to load wasm binary file at '${e}'`), s.arrayBuffer().then((r) => {
      WebAssembly.instantiate(r, t).then((a) => {
        n(a.instance, a.module);
      });
    });
  }), {});
}
function Hw(e, t, n) {
  if (Wd != null)
    return Wd;
  let s = "tfjs-backend-wasm.wasm";
  return e && t ? s = "tfjs-backend-wasm-threaded-simd.wasm" : e && (s = "tfjs-backend-wasm-simd.wasm"), Bu != null && Bu[s] != null ? Bu[s] : n + s;
}
async function Mde() {
  let [e, t] = await Promise.all([X().getAsync("WASM_HAS_SIMD_SUPPORT"), X().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);
  return new Promise((n, s) => {
    let r = {};
    r.locateFile = (o, u) => {
      if (o.endsWith(".worker.js")) {
        let l = Fde.replace(/\n/g, "\\n"), c = new Blob([l], { type: "application/javascript" });
        return URL.createObjectURL(c);
      }
      return o.endsWith(".wasm") ? Hw(e, t, zu != null ? zu : u) : u + o;
    }, Ov && (r.instantiateWasm = zde(Hw(e, t, zu != null ? zu : "")));
    let a = false;
    r.onAbort = () => {
      if (a || Vu)
        return;
      Vu = true, s({ message: "Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers" });
    };
    let i;
    t && e && Wd == null ? (r.mainScriptUrlOrBlob = new Blob(["var WasmBackendModuleThreadedSimd = " + Gw.default.toString()], { type: "text/javascript" }), i = (0, Gw.default)(r)) : i = (0, Ode.default)(r), i.then((o) => {
      a = true, Vu = false;
      let u = null;
      o.tfjs = { init: o.cwrap("init", null, []), initWithThreadsCount: o.cwrap("init_with_threads_count", null, ["number"]), getThreadsCount: o.cwrap("get_threads_count", "number", []), registerTensor: o.cwrap("register_tensor", null, ["number", "number", "number"]), disposeData: o.cwrap("dispose_data", u, ["number"]), dispose: o.cwrap("dispose", u, []) }, n({ wasm: o });
    });
  });
}
function Lde(e, t) {
  switch (t) {
    case "float32":
      return new Float32Array(e);
    case "int32":
      return new Int32Array(e);
    case "bool":
      return new Uint8Array(e);
    default:
      throw new Error(`Unknown dtype ${t}`);
  }
}
var Bde = ["tfjs-backend-wasm.wasm", "tfjs-backend-wasm-simd.wasm", "tfjs-backend-wasm-threaded-simd.wasm"];
var Wd = null;
var zu = null;
var Bu = {};
var Vu = false;
var Ov = false;
function Jpe(e, t = false) {
  if (Xk("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release."), Vu)
    throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");
  Wd = e, Ov = t;
}
function ehe(e, t = false) {
  if (Vu)
    throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");
  if (typeof e == "string")
    zu = e;
  else {
    Bu = e;
    let n = Bde.filter((s) => Bu[s] == null);
    if (n.length > 0)
      throw new Error(`There were no entries found for the following binaries: ${n.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`);
  }
  Ov = t;
}
var YN = -1;
var ng = -1;
function the(e) {
  YN = e;
}
function nhe() {
  if (ng === -1)
    throw new Error("WASM backend not initialized.");
  return ng;
}
var she = "0.0.0";
var Vde = 2;
fp("wasm", async () => {
  let { wasm: e } = await Mde();
  return new Pde(e);
}, Vde);
var rr = "3.16.0-20220421";
var rhe = { tfjs: rr, "tfjs-core": rr, "tfjs-data": rr, "tfjs-layers": rr, "tfjs-converter": rr, "tfjs-backend-cpu": rr, "tfjs-backend-webgl": rr, "tfjs-backend-wasm": rr };

// src/image/imagefxshaders.ts
var vertexIdentity = `
  precision highp float;
  attribute vec2 pos;
  attribute vec2 uv;
  varying vec2 vUv;
  uniform float flipY;
  void main(void) {
    vUv = uv;
    gl_Position = vec4(pos.x, pos.y*flipY, 0.0, 1.);
  }
`;
var colorMatrixWithAlpha = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform float m[20];
  void main(void) {
    vec4 c = texture2D(texture, vUv);
    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[3] * c.a + m[4];
    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[8] * c.a + m[9];
    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[13] * c.a + m[14];
    gl_FragColor.a = m[15] * c.r + m[16] * c.g + m[17] * c.b + m[18] * c.a + m[19];
  }
`;
var colorMatrixWithoutAlpha = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform float m[20];
  void main(void) {
    vec4 c = texture2D(texture, vUv);
    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[4];
    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[9];
    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[14];
    gl_FragColor.a = c.a;
  }
`;
var pixelate = `
  precision highp float;
  varying vec2 vUv;
  uniform vec2 size;
  uniform sampler2D texture;
  vec2 pixelate(vec2 coord, vec2 size) {
    return floor( coord / size ) * size;
  }
  void main(void) {
    gl_FragColor = vec4(0.0);
    vec2 coord = pixelate(vUv, size);
    gl_FragColor += texture2D(texture, coord);
  }
`;
var blur = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform vec2 px;
  void main(void) {
    gl_FragColor = vec4(0.0);
    gl_FragColor += texture2D(texture, vUv + vec2(-7.0*px.x, -7.0*px.y))*0.0044299121055113265;
    gl_FragColor += texture2D(texture, vUv + vec2(-6.0*px.x, -6.0*px.y))*0.00895781211794;
    gl_FragColor += texture2D(texture, vUv + vec2(-5.0*px.x, -5.0*px.y))*0.0215963866053;
    gl_FragColor += texture2D(texture, vUv + vec2(-4.0*px.x, -4.0*px.y))*0.0443683338718;
    gl_FragColor += texture2D(texture, vUv + vec2(-3.0*px.x, -3.0*px.y))*0.0776744219933;
    gl_FragColor += texture2D(texture, vUv + vec2(-2.0*px.x, -2.0*px.y))*0.115876621105;
    gl_FragColor += texture2D(texture, vUv + vec2(-1.0*px.x, -1.0*px.y))*0.147308056121;
    gl_FragColor += texture2D(texture, vUv                             )*0.159576912161;
    gl_FragColor += texture2D(texture, vUv + vec2( 1.0*px.x,  1.0*px.y))*0.147308056121;
    gl_FragColor += texture2D(texture, vUv + vec2( 2.0*px.x,  2.0*px.y))*0.115876621105;
    gl_FragColor += texture2D(texture, vUv + vec2( 3.0*px.x,  3.0*px.y))*0.0776744219933;
    gl_FragColor += texture2D(texture, vUv + vec2( 4.0*px.x,  4.0*px.y))*0.0443683338718;
    gl_FragColor += texture2D(texture, vUv + vec2( 5.0*px.x,  5.0*px.y))*0.0215963866053;
    gl_FragColor += texture2D(texture, vUv + vec2( 6.0*px.x,  6.0*px.y))*0.00895781211794;
    gl_FragColor += texture2D(texture, vUv + vec2( 7.0*px.x,  7.0*px.y))*0.0044299121055113265;
  }
`;
var convolution = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform vec2 px;
  uniform float m[9];
  void main(void) {
    vec4 c11 = texture2D(texture, vUv - px); // top left
    vec4 c12 = texture2D(texture, vec2(vUv.x, vUv.y - px.y)); // top center
    vec4 c13 = texture2D(texture, vec2(vUv.x + px.x, vUv.y - px.y)); // top right
    vec4 c21 = texture2D(texture, vec2(vUv.x - px.x, vUv.y) ); // mid left
    vec4 c22 = texture2D(texture, vUv); // mid center
    vec4 c23 = texture2D(texture, vec2(vUv.x + px.x, vUv.y) ); // mid right
    vec4 c31 = texture2D(texture, vec2(vUv.x - px.x, vUv.y + px.y) ); // bottom left
    vec4 c32 = texture2D(texture, vec2(vUv.x, vUv.y + px.y) ); // bottom center
    vec4 c33 = texture2D(texture, vUv + px ); // bottom right
    gl_FragColor = 
    c11 * m[0] + c12 * m[1] + c22 * m[2] +
    c21 * m[3] + c22 * m[4] + c23 * m[5] +
    c31 * m[6] + c32 * m[7] + c33 * m[8];
    gl_FragColor.a = c22.a;
  }
`;

// src/image/imagefx.ts
var collect = (source, prefix, collection) => {
  const r = new RegExp("\\b" + prefix + " \\w+ (\\w+)", "ig");
  source.replace(r, (match3, name) => {
    collection[name] = 0;
    return match3;
  });
};
var GLProgram = class {
  constructor(gl2, vertexSource, fragmentSource) {
    __publicField(this, "uniform", {});
    __publicField(this, "attribute", {});
    __publicField(this, "gl");
    __publicField(this, "id");
    __publicField(this, "compile", (source, type) => {
      const shader = this.gl.createShader(type);
      if (!shader) {
        log("filter: could not create shader");
        return null;
      }
      this.gl.shaderSource(shader, source);
      this.gl.compileShader(shader);
      if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
        log(`filter: gl compile failed: ${this.gl.getShaderInfoLog(shader)}`);
        return null;
      }
      return shader;
    });
    this.gl = gl2;
    const vertexShader = this.compile(vertexSource, this.gl.VERTEX_SHADER);
    const fragmentShader = this.compile(fragmentSource, this.gl.FRAGMENT_SHADER);
    this.id = this.gl.createProgram();
    if (!vertexShader || !fragmentShader)
      return;
    if (!this.id) {
      log("filter: could not create webgl program");
      return;
    }
    this.gl.attachShader(this.id, vertexShader);
    this.gl.attachShader(this.id, fragmentShader);
    this.gl.linkProgram(this.id);
    if (!this.gl.getProgramParameter(this.id, this.gl.LINK_STATUS)) {
      log(`filter: gl link failed: ${this.gl.getProgramInfoLog(this.id)}`);
      return;
    }
    this.gl.useProgram(this.id);
    collect(vertexSource, "attribute", this.attribute);
    for (const a in this.attribute)
      this.attribute[a] = this.gl.getAttribLocation(this.id, a);
    collect(vertexSource, "uniform", this.uniform);
    collect(fragmentSource, "uniform", this.uniform);
    for (const u in this.uniform)
      this.uniform[u] = this.gl.getUniformLocation(this.id, u);
  }
};
function GLImageFilter() {
  let drawCount = 0;
  let sourceTexture = null;
  let lastInChain = false;
  let currentFramebufferIndex = -1;
  let tempFramebuffers = [null, null];
  let filterChain = [];
  let vertexBuffer = null;
  let currentProgram = null;
  const fxcanvas = canvas(100, 100);
  const shaderProgramCache = {};
  const DRAW = { INTERMEDIATE: 1 };
  const gl2 = fxcanvas.getContext("webgl");
  if (!gl2) {
    log("filter: cannot get webgl context");
    return;
  }
  this.gl = gl2;
  function resize(width, height) {
    if (width === fxcanvas.width && height === fxcanvas.height)
      return;
    fxcanvas.width = width;
    fxcanvas.height = height;
    if (!vertexBuffer) {
      const vertices = new Float32Array([-1, -1, 0, 1, 1, -1, 1, 1, -1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 1, 1, 1, 1, 1, 0]);
      vertexBuffer = gl2.createBuffer();
      gl2.bindBuffer(gl2.ARRAY_BUFFER, vertexBuffer);
      gl2.bufferData(gl2.ARRAY_BUFFER, vertices, gl2.STATIC_DRAW);
      gl2.pixelStorei(gl2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
    }
    gl2.viewport(0, 0, fxcanvas.width, fxcanvas.height);
    tempFramebuffers = [null, null];
  }
  function createFramebufferTexture(width, height) {
    const fbo = gl2.createFramebuffer();
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, fbo);
    const renderbuffer = gl2.createRenderbuffer();
    gl2.bindRenderbuffer(gl2.RENDERBUFFER, renderbuffer);
    const texture = gl2.createTexture();
    gl2.bindTexture(gl2.TEXTURE_2D, texture);
    gl2.texImage2D(gl2.TEXTURE_2D, 0, gl2.RGBA, width, height, 0, gl2.RGBA, gl2.UNSIGNED_BYTE, null);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MAG_FILTER, gl2.LINEAR);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MIN_FILTER, gl2.LINEAR);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_S, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_T, gl2.CLAMP_TO_EDGE);
    gl2.framebufferTexture2D(gl2.FRAMEBUFFER, gl2.COLOR_ATTACHMENT0, gl2.TEXTURE_2D, texture, 0);
    gl2.bindTexture(gl2.TEXTURE_2D, null);
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, null);
    return { fbo, texture };
  }
  function getTempFramebuffer(index2) {
    tempFramebuffers[index2] = tempFramebuffers[index2] || createFramebufferTexture(fxcanvas.width, fxcanvas.height);
    return tempFramebuffers[index2];
  }
  function draw(flags = 0) {
    if (!currentProgram)
      return;
    let source = null;
    let target = null;
    let flipY = false;
    if (drawCount === 0)
      source = sourceTexture;
    else
      source = getTempFramebuffer(currentFramebufferIndex).texture || null;
    drawCount++;
    if (lastInChain && !(flags & DRAW.INTERMEDIATE)) {
      target = null;
      flipY = drawCount % 2 === 0;
    } else {
      currentFramebufferIndex = (currentFramebufferIndex + 1) % 2;
      target = getTempFramebuffer(currentFramebufferIndex).fbo || null;
    }
    gl2.bindTexture(gl2.TEXTURE_2D, source);
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, target);
    gl2.uniform1f(currentProgram.uniform["flipY"], flipY ? -1 : 1);
    gl2.drawArrays(gl2.TRIANGLES, 0, 6);
  }
  function compileShader(fragmentSource) {
    if (shaderProgramCache[fragmentSource]) {
      currentProgram = shaderProgramCache[fragmentSource];
      gl2.useProgram((currentProgram ? currentProgram.id : null) || null);
      return currentProgram;
    }
    currentProgram = new GLProgram(gl2, vertexIdentity, fragmentSource);
    if (!currentProgram) {
      log("filter: could not get webgl program");
      return null;
    }
    const floatSize = Float32Array.BYTES_PER_ELEMENT;
    const vertSize = 4 * floatSize;
    gl2.enableVertexAttribArray(currentProgram.attribute["pos"]);
    gl2.vertexAttribPointer(currentProgram.attribute["pos"], 2, gl2.FLOAT, false, vertSize, 0 * floatSize);
    gl2.enableVertexAttribArray(currentProgram.attribute["uv"]);
    gl2.vertexAttribPointer(currentProgram.attribute["uv"], 2, gl2.FLOAT, false, vertSize, 2 * floatSize);
    shaderProgramCache[fragmentSource] = currentProgram;
    return currentProgram;
  }
  const filter = {
    colorMatrix: (matrix) => {
      const m = new Float32Array(matrix);
      m[4] /= 255;
      m[9] /= 255;
      m[14] /= 255;
      m[19] /= 255;
      const shader = m[18] === 1 && m[3] === 0 && m[8] === 0 && m[13] === 0 && m[15] === 0 && m[16] === 0 && m[17] === 0 && m[19] === 0 ? colorMatrixWithoutAlpha : colorMatrixWithAlpha;
      const program = compileShader(shader);
      if (!program)
        return;
      gl2.uniform1fv(program.uniform["m"], m);
      draw();
    },
    brightness: (brightness) => {
      const b = (brightness || 0) + 1;
      filter.colorMatrix([
        b,
        0,
        0,
        0,
        0,
        0,
        b,
        0,
        0,
        0,
        0,
        0,
        b,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    saturation: (amount) => {
      const x = (amount || 0) * 2 / 3 + 1;
      const y = (x - 1) * -0.5;
      filter.colorMatrix([
        x,
        y,
        y,
        0,
        0,
        y,
        x,
        y,
        0,
        0,
        y,
        y,
        x,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    desaturate: () => {
      filter.saturation(-1);
    },
    contrast: (amount) => {
      const v = (amount || 0) + 1;
      const o = -128 * (v - 1);
      filter.colorMatrix([
        v,
        0,
        0,
        0,
        o,
        0,
        v,
        0,
        0,
        o,
        0,
        0,
        v,
        0,
        o,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    negative: () => {
      filter.contrast(-2);
    },
    hue: (rotation) => {
      rotation = (rotation || 0) / 180 * Math.PI;
      const cos = Math.cos(rotation);
      const sin = Math.sin(rotation);
      const lumR = 0.213;
      const lumG = 0.715;
      const lumB = 0.072;
      filter.colorMatrix([
        lumR + cos * (1 - lumR) + sin * -lumR,
        lumG + cos * -lumG + sin * -lumG,
        lumB + cos * -lumB + sin * (1 - lumB),
        0,
        0,
        lumR + cos * -lumR + sin * 0.143,
        lumG + cos * (1 - lumG) + sin * 0.14,
        lumB + cos * -lumB + sin * -0.283,
        0,
        0,
        lumR + cos * -lumR + sin * -(1 - lumR),
        lumG + cos * -lumG + sin * lumG,
        lumB + cos * (1 - lumB) + sin * lumB,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    desaturateLuminance: () => {
      filter.colorMatrix([
        0.2764723,
        0.929708,
        0.0938197,
        0,
        -37.1,
        0.2764723,
        0.929708,
        0.0938197,
        0,
        -37.1,
        0.2764723,
        0.929708,
        0.0938197,
        0,
        -37.1,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    sepia: () => {
      filter.colorMatrix([
        0.393,
        0.7689999,
        0.18899999,
        0,
        0,
        0.349,
        0.6859999,
        0.16799999,
        0,
        0,
        0.272,
        0.5339999,
        0.13099999,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    brownie: () => {
      filter.colorMatrix([
        0.5997023498159715,
        0.34553243048391263,
        -0.2708298674538042,
        0,
        47.43192855600873,
        -0.037703249837783157,
        0.8609577587992641,
        0.15059552388459913,
        0,
        -36.96841498319127,
        0.24113635128153335,
        -0.07441037908422492,
        0.44972182064877153,
        0,
        -7.562075277591283,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    vintagePinhole: () => {
      filter.colorMatrix([
        0.6279345635605994,
        0.3202183420819367,
        -0.03965408211312453,
        0,
        9.651285835294123,
        0.02578397704808868,
        0.6441188644374771,
        0.03259127616149294,
        0,
        7.462829176470591,
        0.0466055556782719,
        -0.0851232987247891,
        0.5241648018700465,
        0,
        5.159190588235296,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    kodachrome: () => {
      filter.colorMatrix([
        1.1285582396593525,
        -0.3967382283601348,
        -0.03992559172921793,
        0,
        63.72958762196502,
        -0.16404339962244616,
        1.0835251566291304,
        -0.05498805115633132,
        0,
        24.732407896706203,
        -0.16786010706155763,
        -0.5603416277695248,
        1.6014850761964943,
        0,
        35.62982807460946,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    technicolor: () => {
      filter.colorMatrix([
        1.9125277891456083,
        -0.8545344976951645,
        -0.09155508482755585,
        0,
        11.793603434377337,
        -0.3087833385928097,
        1.7658908555458428,
        -0.10601743074722245,
        0,
        -70.35205161461398,
        -0.231103377548616,
        -0.7501899197440212,
        1.847597816108189,
        0,
        30.950940869491138,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    polaroid: () => {
      filter.colorMatrix([
        1.438,
        -0.062,
        -0.062,
        0,
        0,
        -0.122,
        1.378,
        -0.122,
        0,
        0,
        -0.016,
        -0.016,
        1.483,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    shiftToBGR: () => {
      filter.colorMatrix([
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    convolution: (matrix) => {
      const m = new Float32Array(matrix);
      const pixelSizeX = 1 / fxcanvas.width;
      const pixelSizeY = 1 / fxcanvas.height;
      const program = compileShader(convolution);
      if (!program)
        return;
      gl2.uniform1fv(program.uniform["m"], m);
      gl2.uniform2f(program.uniform["px"], pixelSizeX, pixelSizeY);
      draw();
    },
    detectEdges: () => {
      filter.convolution.call(this, [
        0,
        1,
        0,
        1,
        -4,
        1,
        0,
        1,
        0
      ]);
    },
    sobelX: () => {
      filter.convolution.call(this, [
        -1,
        0,
        1,
        -2,
        0,
        2,
        -1,
        0,
        1
      ]);
    },
    sobelY: () => {
      filter.convolution.call(this, [
        -1,
        -2,
        -1,
        0,
        0,
        0,
        1,
        2,
        1
      ]);
    },
    sharpen: (amount) => {
      const a = amount || 1;
      filter.convolution.call(this, [
        0,
        -1 * a,
        0,
        -1 * a,
        1 + 4 * a,
        -1 * a,
        0,
        -1 * a,
        0
      ]);
    },
    emboss: (size2) => {
      const s = size2 || 1;
      filter.convolution.call(this, [
        -2 * s,
        -1 * s,
        0,
        -1 * s,
        1,
        1 * s,
        0,
        1 * s,
        2 * s
      ]);
    },
    blur: (size2) => {
      const blurSizeX = size2 / 7 / fxcanvas.width;
      const blurSizeY = size2 / 7 / fxcanvas.height;
      const program = compileShader(blur);
      if (!program)
        return;
      gl2.uniform2f(program.uniform["px"], 0, blurSizeY);
      draw(DRAW.INTERMEDIATE);
      gl2.uniform2f(program.uniform["px"], blurSizeX, 0);
      draw();
    },
    pixelate: (size2) => {
      const blurSizeX = size2 / fxcanvas.width;
      const blurSizeY = size2 / fxcanvas.height;
      const program = compileShader(pixelate);
      if (!program)
        return;
      gl2.uniform2f(program.uniform["size"], blurSizeX, blurSizeY);
      draw();
    }
  };
  this.add = function(name) {
    const args = Array.prototype.slice.call(arguments, 1);
    const func = filter[name];
    filterChain.push({ func, args });
  };
  this.reset = function() {
    filterChain = [];
  };
  this.get = function() {
    return filterChain;
  };
  this.apply = function(image) {
    resize(image.width, image.height);
    drawCount = 0;
    if (!sourceTexture)
      sourceTexture = gl2.createTexture();
    gl2.bindTexture(gl2.TEXTURE_2D, sourceTexture);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_S, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_T, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MIN_FILTER, gl2.NEAREST);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MAG_FILTER, gl2.NEAREST);
    gl2.texImage2D(gl2.TEXTURE_2D, 0, gl2.RGBA, gl2.RGBA, gl2.UNSIGNED_BYTE, image);
    for (let i = 0; i < filterChain.length; i++) {
      lastInChain = i === filterChain.length - 1;
      const f = filterChain[i];
      f.func.apply(this, f.args || []);
    }
    return fxcanvas;
  };
  this.draw = function(image) {
    this.add("brightness", 0);
    return this.apply(image);
  };
}

// src/image/enhance.ts
async function histogramEqualization(inputImage) {
  const squeeze = inputImage.shape.length === 4 ? gr(inputImage) : inputImage;
  const channels = Bn(squeeze, 3, 2);
  const min = [gm(channels[0]), gm(channels[1]), gm(channels[2])];
  const max = [As(channels[0]), As(channels[1]), As(channels[2])];
  const absMax = await Promise.all(max.map((channel) => channel.data()));
  const maxValue = 0.99 * Math.max(absMax[0][0], absMax[1][0], absMax[2][0]);
  const sub = [ge(channels[0], min[0]), ge(channels[1], min[1]), ge(channels[2], min[2])];
  const range = [ge(max[0], min[0]), ge(max[1], min[1]), ge(max[2], min[2])];
  const fact = [xe(maxValue, range[0]), xe(maxValue, range[1]), xe(maxValue, range[2])];
  const enh = [V(sub[0], fact[0]), V(sub[1], fact[1]), V(sub[2], fact[2])];
  const rgb2 = es([enh[0], enh[1], enh[2]], 2);
  const reshape = G(rgb2, [1, squeeze.shape[0], squeeze.shape[1], 3]);
  Re([...channels, ...min, ...max, ...sub, ...range, ...fact, ...enh, rgb2, squeeze]);
  return reshape;
}

// src/image/image.ts
var maxSize = 3840;
var inCanvas = null;
var outCanvas = null;
var tmpCanvas = null;
var fx2;
var last = {
  inputSum: 0,
  cacheDiff: 1,
  sumMethod: 0,
  inputTensor: void 0
};
function canvas(width, height) {
  let c;
  if (env.browser) {
    if (env.worker) {
      if (typeof OffscreenCanvas === "undefined")
        throw new Error("canvas error: attempted to run in web worker but OffscreenCanvas is not supported");
      c = new OffscreenCanvas(width, height);
    } else {
      if (typeof document === "undefined")
        throw new Error("canvas error: attempted to run in browser but DOM is not defined");
      c = document.createElement("canvas");
      c.width = width;
      c.height = height;
    }
  } else {
    if (typeof env.Canvas !== "undefined")
      c = new env.Canvas(width, height);
    else if (typeof globalThis.Canvas !== "undefined")
      c = new globalThis.Canvas(width, height);
  }
  return c;
}
function copy(input, output) {
  const outputCanvas = output || canvas(input.width, input.height);
  const ctx = outputCanvas.getContext("2d");
  ctx.drawImage(input, 0, 0);
  return outputCanvas;
}
async function process2(input, config3, getTensor = true) {
  if (!input) {
    if (config3.debug)
      log("input error: input is missing");
    return { tensor: null, canvas: null };
  }
  if (!(input instanceof et) && !(typeof Image !== "undefined" && input instanceof Image) && !(typeof env.Canvas !== "undefined" && input instanceof env.Canvas) && !(typeof globalThis.Canvas !== "undefined" && input instanceof globalThis.Canvas) && !(typeof ImageData !== "undefined" && input instanceof ImageData) && !(typeof ImageBitmap !== "undefined" && input instanceof ImageBitmap) && !(typeof HTMLImageElement !== "undefined" && input instanceof HTMLImageElement) && !(typeof HTMLMediaElement !== "undefined" && input instanceof HTMLMediaElement) && !(typeof HTMLVideoElement !== "undefined" && input instanceof HTMLVideoElement) && !(typeof HTMLCanvasElement !== "undefined" && input instanceof HTMLCanvasElement) && !(typeof OffscreenCanvas !== "undefined" && input instanceof OffscreenCanvas)) {
    throw new Error("input error: type is not recognized");
  }
  if (input instanceof et) {
    let tensor = null;
    if (input["isDisposedInternal"])
      throw new Error("input error: attempted to use tensor but it is disposed");
    if (!input["shape"])
      throw new Error("input error: attempted to use tensor without a shape");
    if (input.shape.length === 3) {
      if (input.shape[2] === 3) {
        tensor = Pn(input, 0);
      } else if (input.shape[2] === 4) {
        const rgb2 = lb(input, [0, 0, 0], [-1, -1, 3]);
        tensor = Pn(rgb2, 0);
        Re(rgb2);
      }
    } else if (input.shape.length === 4) {
      if (input.shape[3] === 3) {
        tensor = cr(input);
      } else if (input.shape[3] === 4) {
        tensor = kd(input, [0, 0, 0, 0], [-1, -1, -1, 3]);
      }
    }
    if (tensor == null || tensor.shape.length !== 4 || tensor.shape[0] !== 1 || tensor.shape[3] !== 3)
      throw new Error(`input error: attempted to use tensor with unrecognized shape: ${input["shape"]}`);
    if (tensor.dtype === "int32") {
      const cast = ce(tensor, "float32");
      Re(tensor);
      tensor = cast;
    }
    return { tensor, canvas: config3.filter.return ? outCanvas : null };
  } else {
    if (typeof input["readyState"] !== "undefined" && input["readyState"] <= 2) {
      if (config3.debug)
        log("input stream is not ready");
      return { tensor: null, canvas: inCanvas };
    }
    const originalWidth = input["naturalWidth"] || input["videoWidth"] || input["width"] || input["shape"] && input["shape"][1] > 0;
    const originalHeight = input["naturalHeight"] || input["videoHeight"] || input["height"] || input["shape"] && input["shape"][2] > 0;
    if (!originalWidth || !originalHeight) {
      if (config3.debug)
        log("cannot determine input dimensions");
      return { tensor: null, canvas: inCanvas };
    }
    let targetWidth = originalWidth;
    let targetHeight = originalHeight;
    if (targetWidth > maxSize) {
      targetWidth = maxSize;
      targetHeight = Math.trunc(targetWidth * originalHeight / originalWidth);
    }
    if (targetHeight > maxSize) {
      targetHeight = maxSize;
      targetWidth = Math.trunc(targetHeight * originalWidth / originalHeight);
    }
    if ((config3.filter.width || 0) > 0)
      targetWidth = config3.filter.width;
    else if ((config3.filter.height || 0) > 0)
      targetWidth = originalWidth * ((config3.filter.height || 0) / originalHeight);
    if ((config3.filter.height || 0) > 0)
      targetHeight = config3.filter.height;
    else if ((config3.filter.width || 0) > 0)
      targetHeight = originalHeight * ((config3.filter.width || 0) / originalWidth);
    if (!targetWidth || !targetHeight)
      throw new Error("input error: cannot determine dimension");
    if (!inCanvas || (inCanvas == null ? void 0 : inCanvas.width) !== targetWidth || (inCanvas == null ? void 0 : inCanvas.height) !== targetHeight)
      inCanvas = canvas(targetWidth, targetHeight);
    const inCtx = inCanvas.getContext("2d");
    if (typeof ImageData !== "undefined" && input instanceof ImageData) {
      inCtx.putImageData(input, 0, 0);
    } else {
      if (config3.filter.flip && typeof inCtx.translate !== "undefined") {
        inCtx.translate(originalWidth, 0);
        inCtx.scale(-1, 1);
        inCtx.drawImage(input, 0, 0, originalWidth, originalHeight, 0, 0, inCanvas == null ? void 0 : inCanvas.width, inCanvas == null ? void 0 : inCanvas.height);
        inCtx.setTransform(1, 0, 0, 1, 0, 0);
      } else {
        inCtx.drawImage(input, 0, 0, originalWidth, originalHeight, 0, 0, inCanvas == null ? void 0 : inCanvas.width, inCanvas == null ? void 0 : inCanvas.height);
      }
    }
    if (!outCanvas || inCanvas.width !== outCanvas.width || (inCanvas == null ? void 0 : inCanvas.height) !== (outCanvas == null ? void 0 : outCanvas.height))
      outCanvas = canvas(inCanvas.width, inCanvas.height);
    if (config3.filter.enabled && env.webgl.supported) {
      if (!fx2)
        fx2 = env.browser ? new GLImageFilter() : null;
      env.filter = !!fx2;
      if (!fx2 || !fx2.add) {
        if (config3.debug)
          log("input process error: cannot initialize filters");
        env.webgl.supported = false;
        config3.filter.enabled = false;
        copy(inCanvas, outCanvas);
      } else {
        fx2.reset();
        if (config3.filter.brightness !== 0)
          fx2.add("brightness", config3.filter.brightness);
        if (config3.filter.contrast !== 0)
          fx2.add("contrast", config3.filter.contrast);
        if (config3.filter.sharpness !== 0)
          fx2.add("sharpen", config3.filter.sharpness);
        if (config3.filter.blur !== 0)
          fx2.add("blur", config3.filter.blur);
        if (config3.filter.saturation !== 0)
          fx2.add("saturation", config3.filter.saturation);
        if (config3.filter.hue !== 0)
          fx2.add("hue", config3.filter.hue);
        if (config3.filter.negative)
          fx2.add("negative");
        if (config3.filter.sepia)
          fx2.add("sepia");
        if (config3.filter.vintage)
          fx2.add("brownie");
        if (config3.filter.sepia)
          fx2.add("sepia");
        if (config3.filter.kodachrome)
          fx2.add("kodachrome");
        if (config3.filter.technicolor)
          fx2.add("technicolor");
        if (config3.filter.polaroid)
          fx2.add("polaroid");
        if (config3.filter.pixelate !== 0)
          fx2.add("pixelate", config3.filter.pixelate);
        if (fx2.get() > 0)
          outCanvas = fx2.apply(inCanvas);
        else
          outCanvas = fx2.draw(inCanvas);
      }
    } else {
      copy(inCanvas, outCanvas);
      if (fx2)
        fx2 = null;
      env.filter = !!fx2;
    }
    if (!getTensor)
      return { tensor: null, canvas: outCanvas };
    if (!outCanvas)
      throw new Error("canvas error: cannot create output");
    let pixels;
    let depth = 3;
    if (typeof ImageData !== "undefined" && input instanceof ImageData || input["data"] && input["width"] && input["height"]) {
      if (env.browser && Ek) {
        pixels = Ek ? Ek.fromPixels(input) : null;
      } else {
        depth = input["data"].length / input["height"] / input["width"];
        const arr = new Uint8Array(input["data"]["buffer"]);
        pixels = fs(arr, [input["height"], input["width"], depth], "int32");
      }
    } else {
      if (!tmpCanvas || outCanvas.width !== tmpCanvas.width || outCanvas.height !== tmpCanvas.height)
        tmpCanvas = canvas(outCanvas.width, outCanvas.height);
      if (Ek && env.browser) {
        if (config3.backend === "webgl" || config3.backend === "humangl" || config3.backend === "webgpu") {
          pixels = Ek.fromPixels(outCanvas);
        } else {
          tmpCanvas = copy(outCanvas);
          pixels = Ek.fromPixels(tmpCanvas);
        }
      } else {
        const tempCanvas = copy(outCanvas);
        const tempCtx = tempCanvas.getContext("2d");
        const tempData = tempCtx.getImageData(0, 0, targetWidth, targetHeight);
        depth = tempData.data.length / targetWidth / targetHeight;
        const arr = new Uint8Array(tempData.data.buffer);
        pixels = fs(arr, [targetWidth, targetHeight, depth]);
      }
    }
    if (depth === 4) {
      const rgb2 = lb(pixels, [0, 0, 0], [-1, -1, 3]);
      Re(pixels);
      pixels = rgb2;
    }
    if (!pixels)
      throw new Error("input error: cannot create tensor");
    const casted = ce(pixels, "float32");
    const tensor = config3.filter.equalization ? await histogramEqualization(casted) : Pn(casted, 0);
    Re([pixels, casted]);
    return { tensor, canvas: config3.filter.return ? outCanvas : null };
  }
}
async function skip(config3, input) {
  let skipFrame = false;
  if (config3.cacheSensitivity === 0 || !input.shape || input.shape.length !== 4 || input.shape[1] > 2048 || input.shape[2] > 2048)
    return skipFrame;
  if (!last.inputTensor) {
    last.inputTensor = cr(input);
  } else if (last.inputTensor.shape[1] !== input.shape[1] || last.inputTensor.shape[2] !== input.shape[2]) {
    Re(last.inputTensor);
    last.inputTensor = cr(input);
  } else {
    const t = {};
    t.diff = ge(input, last.inputTensor);
    t.squared = V(t.diff, t.diff);
    t.sum = ve(t.squared);
    const diffSum = await t.sum.data();
    const diffRelative = diffSum[0] / (input.shape[1] || 1) / (input.shape[2] || 1) / 255 / 3;
    Re([last.inputTensor, t.diff, t.squared, t.sum]);
    last.inputTensor = cr(input);
    skipFrame = diffRelative <= (config3.cacheSensitivity || 0);
  }
  return skipFrame;
}
async function compare(config3, input1, input2) {
  const t = {};
  if (!input1 || !input2 || input1.shape.length !== 4 || input1.shape.length !== input2.shape.length) {
    if (!config3.debug)
      log("invalid input tensor or tensor shapes do not match:", input1.shape, input2.shape);
    return 0;
  }
  if (input1.shape[0] !== 1 || input2.shape[0] !== 1 || input1.shape[3] !== 3 || input2.shape[3] !== 3) {
    if (!config3.debug)
      log("input tensors must be of shape [1, height, width, 3]:", input1.shape, input2.shape);
    return 0;
  }
  t.input1 = cr(input1);
  t.input2 = input1.shape[1] !== input2.shape[1] || input1.shape[2] !== input2.shape[2] ? jn.resizeBilinear(input2, [input1.shape[1], input1.shape[2]]) : cr(input2);
  t.diff = ge(t.input1, t.input2);
  t.squared = V(t.diff, t.diff);
  t.sum = ve(t.squared);
  const diffSum = await t.sum.data();
  const diffRelative = diffSum[0] / (input1.shape[1] || 1) / (input1.shape[2] || 1) / 255 / 3;
  Re([t.input1, t.input2, t.diff, t.squared, t.sum]);
  return diffRelative;
}

// src/util/env.ts
var Env = class {
  constructor() {
    __publicField(this, "browser");
    __publicField(this, "node");
    __publicField(this, "worker");
    __publicField(this, "platform", "");
    __publicField(this, "agent", "");
    __publicField(this, "backends", []);
    __publicField(this, "initial");
    __publicField(this, "filter");
    __publicField(this, "tfjs");
    __publicField(this, "offscreen");
    __publicField(this, "perfadd", false);
    __publicField(this, "wasm", {
      supported: void 0,
      backend: void 0,
      simd: void 0,
      multithread: void 0
    });
    __publicField(this, "webgl", {
      supported: void 0,
      backend: void 0,
      version: void 0,
      renderer: void 0
    });
    __publicField(this, "webgpu", {
      supported: void 0,
      backend: void 0,
      adapter: void 0
    });
    __publicField(this, "cpu", {
      model: void 0,
      flags: []
    });
    __publicField(this, "kernels", []);
    __publicField(this, "Canvas");
    __publicField(this, "Image");
    __publicField(this, "ImageData");
    this.browser = typeof navigator !== "undefined";
    this.node = typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    this.tfjs = { version: rhe["tfjs-core"] };
    this.offscreen = typeof OffscreenCanvas !== "undefined";
    this.initial = true;
    this.worker = this.browser && this.offscreen ? typeof WorkerGlobalScope !== "undefined" : void 0;
    if (typeof navigator !== "undefined") {
      const raw = navigator.userAgent.match(/\(([^()]+)\)/g);
      if (raw && raw[0]) {
        const platformMatch = raw[0].match(/\(([^()]+)\)/g);
        this.platform = platformMatch && platformMatch[0] ? platformMatch[0].replace(/\(|\)/g, "") : "";
        this.agent = navigator.userAgent.replace(raw[0], "");
        if (this.platform[1])
          this.agent = this.agent.replace(raw[1], "");
        this.agent = this.agent.replace(/  /g, " ");
      }
    } else if (typeof process !== "undefined") {
      this.platform = `${process.platform} ${process.arch}`;
      this.agent = `NodeJS ${process.version}`;
    }
  }
  async updateBackend() {
    this.backends = Object.keys(Ss().registryFactory);
    this.wasm.supported = typeof WebAssembly !== "undefined";
    this.wasm.backend = this.backends.includes("wasm");
    if (this.wasm.supported && this.wasm.backend && tpe() === "wasm") {
      this.wasm.simd = await X().getAsync("WASM_HAS_SIMD_SUPPORT");
      this.wasm.multithread = await X().getAsync("WASM_HAS_MULTITHREAD_SUPPORT");
    }
    const c = canvas(100, 100);
    const ctx = c ? c.getContext("webgl2") : void 0;
    this.webgl.supported = typeof ctx !== "undefined";
    this.webgl.backend = this.backends.includes("webgl");
    if (this.webgl.supported && this.webgl.backend && (tpe() === "webgl" || tpe() === "humangl")) {
      const gl2 = WA().gpgpu !== "undefined" ? await WA().getGPGPUContext().gl : null;
      if (gl2) {
        this.webgl.version = gl2.getParameter(gl2.VERSION);
        this.webgl.renderer = gl2.getParameter(gl2.RENDERER);
      }
    }
    this.webgpu.supported = this.browser && typeof navigator["gpu"] !== "undefined";
    this.webgpu.backend = this.backends.includes("webgpu");
    try {
      if (this.webgpu.supported)
        this.webgpu.adapter = (await navigator["gpu"].requestAdapter()).name;
    } catch (e) {
      this.webgpu.supported = false;
    }
    try {
      this.kernels = em(tpe()).map((kernel) => kernel.kernelName.toLowerCase());
    } catch (e) {
    }
  }
  async updateCPU() {
    const cpu = { model: "", flags: [] };
    if (this.node && this.platform.startsWith("linux")) {
    }
    if (!this["cpu"])
      Object.defineProperty(this, "cpu", { value: cpu });
    else
      this["cpu"] = cpu;
  }
};
var env = new Env();

// src/tfjs/load.ts
var options = {
  cacheModels: false,
  verbose: true,
  debug: false,
  modelBasePath: ""
};
async function httpHandler(url, init2) {
  if (options.debug)
    log("load model fetch:", url, init2);
  return fetch(url, init2);
}
function setModelLoadOptions(config3) {
  options.cacheModels = config3.cacheModels;
  options.verbose = config3.debug;
  options.modelBasePath = config3.modelBasePath;
}
async function loadModel(modelPath) {
  const modelUrl = join(options.modelBasePath, modelPath || "");
  const modelPathSegments = modelUrl.split("/");
  const cachedModelName = "indexeddb://" + modelPathSegments[modelPathSegments.length - 1].replace(".json", "");
  const cachedModels = await An.listModels();
  const modelCached = options.cacheModels && Object.keys(cachedModels).includes(cachedModelName);
  const tfLoadOptions = typeof fetch === "undefined" ? {} : { fetchFunc: (url, init2) => httpHandler(url, init2) };
  const model18 = new B4(modelCached ? cachedModelName : modelUrl, tfLoadOptions);
  let loaded = false;
  try {
    model18.findIOHandler();
    if (options.debug)
      log("model load handler:", model18.handler);
    const artifacts = await model18.handler.load();
    model18.loadSync(artifacts);
    if (options.verbose)
      log("load model:", model18["modelUrl"]);
    loaded = true;
  } catch (err) {
    log("error loading model:", modelUrl, err);
  }
  if (loaded && options.cacheModels && !modelCached) {
    try {
      const saveResult = await model18.save(cachedModelName);
      log("model saved:", cachedModelName, saveResult);
    } catch (err) {
      log("error saving model:", modelUrl, err);
    }
  }
  return model18;
}

// package.json
var version = "2.7.0";

// src/models.ts
var models_exports = {};
__export(models_exports, {
  Models: () => Models,
  load: () => load19,
  reset: () => reset,
  validate: () => validate2
});

// src/gear/gear.ts
var model;
var last2 = [];
var raceNames = ["white", "black", "asian", "indian", "other"];
var ageWeights = [15, 23, 28, 35.5, 45.5, 55.5, 65];
var lastCount = 0;
var lastTime = 0;
var skipped = Number.MAX_SAFE_INTEGER;
async function load(config3) {
  if (env.initial)
    model = null;
  if (!model)
    model = await loadModel(config3.face["gear"]);
  else if (config3.debug)
    log("cached model:", model["modelUrl"]);
  return model;
}
async function predict(image, config3, idx, count2) {
  var _a2, _b2;
  if (!model)
    return { age: 0, gender: "unknown", genderScore: 0, race: [] };
  const skipFrame = skipped < (((_a2 = config3.face["gear"]) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face["gear"]) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount === count2 && last2[idx]) {
    skipped++;
    return last2[idx];
  }
  skipped = 0;
  return new Promise(async (resolve) => {
    var _a3, _b3;
    if (!(model == null ? void 0 : model.inputs[0].shape))
      return;
    const t = {};
    const box = [[0, 0.1, 0.9, 0.9]];
    t.resize = jn.cropAndResize(image, box, [0], [model.inputs[0].shape[2], model.inputs[0].shape[1]]);
    const obj = { age: 0, gender: "unknown", genderScore: 0, race: [] };
    if ((_a3 = config3.face["gear"]) == null ? void 0 : _a3.enabled)
      [t.age, t.gender, t.race] = model.execute(t.resize, ["age_output", "gender_output", "race_output"]);
    const gender = await t.gender.data();
    obj.gender = gender[0] > gender[1] ? "male" : "female";
    obj.genderScore = Math.round(100 * (gender[0] > gender[1] ? gender[0] : gender[1])) / 100;
    const race = await t.race.data();
    for (let i = 0; i < race.length; i++) {
      if (race[i] > (((_b3 = config3.face["gear"]) == null ? void 0 : _b3.minConfidence) || 0.2))
        obj.race.push({ score: Math.round(100 * race[i]) / 100, race: raceNames[i] });
    }
    obj.race.sort((a, b) => b.score - a.score);
    const ageDistribution = Array.from(await t.age.data());
    const ageSorted = ageDistribution.map((a, i) => [ageWeights[i], a]).sort((a, b) => b[1] - a[1]);
    let age = ageSorted[0][0];
    for (let i = 1; i < ageSorted.length; i++)
      age += ageSorted[i][1] * (ageSorted[i][0] - age);
    obj.age = Math.round(10 * age) / 10;
    Object.keys(t).forEach((tensor) => Re(t[tensor]));
    last2[idx] = obj;
    lastCount = count2;
    lastTime = now();
    resolve(obj);
  });
}

// src/tfjs/constants.ts
var constants = {
  tf255: 255,
  tf1: 1,
  tf2: 2,
  tf05: 0.5,
  tf127: 127.5,
  rgb: [0.2989, 0.587, 0.114]
};
function init() {
  constants.tf255 = we(255, "float32");
  constants.tf1 = we(1, "float32");
  constants.tf2 = we(2, "float32");
  constants.tf05 = we(0.5, "float32");
  constants.tf127 = we(127.5, "float32");
  constants.rgb = Qt([0.2989, 0.587, 0.114], "float32");
}

// src/gear/ssrnet-age.ts
var model2;
var last3 = [];
var lastCount2 = 0;
var lastTime2 = 0;
var skipped2 = Number.MAX_SAFE_INTEGER;
async function load2(config3) {
  if (env.initial)
    model2 = null;
  if (!model2)
    model2 = await loadModel(config3.face["ssrnet"].modelPathAge);
  else if (config3.debug)
    log("cached model:", model2["modelUrl"]);
  return model2;
}
async function predict2(image, config3, idx, count2) {
  var _a2, _b2, _c, _d2;
  if (!model2)
    return { age: 0 };
  const skipFrame = skipped2 < (((_a2 = config3.face["ssrnet"]) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face["ssrnet"]) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime2;
  if (config3.skipAllowed && skipFrame && skipTime && lastCount2 === count2 && ((_c = last3[idx]) == null ? void 0 : _c.age) && ((_d2 = last3[idx]) == null ? void 0 : _d2.age) > 0) {
    skipped2++;
    return last3[idx];
  }
  skipped2 = 0;
  return new Promise(async (resolve) => {
    if (!(model2 == null ? void 0 : model2.inputs) || !model2.inputs[0] || !model2.inputs[0].shape)
      return;
    const t = {};
    t.resize = jn.resizeBilinear(image, [model2.inputs[0].shape[2], model2.inputs[0].shape[1]], false);
    t.enhance = V(t.resize, constants.tf255);
    const obj = { age: 0 };
    if (config3.face["ssrnet"].enabled)
      t.age = model2.execute(t.enhance);
    if (t.age) {
      const data = await t.age.data();
      obj.age = Math.trunc(10 * data[0]) / 10;
    }
    Object.keys(t).forEach((tensor) => Re(t[tensor]));
    last3[idx] = obj;
    lastCount2 = count2;
    lastTime2 = now();
    resolve(obj);
  });
}

// src/gear/ssrnet-gender.ts
var model3;
var last4 = [];
var lastCount3 = 0;
var lastTime3 = 0;
var skipped3 = Number.MAX_SAFE_INTEGER;
var rgb = [0.2989, 0.587, 0.114];
async function load3(config3) {
  if (env.initial)
    model3 = null;
  if (!model3)
    model3 = await loadModel(config3.face["ssrnet"].modelPathGender);
  else if (config3.debug)
    log("cached model:", model3["modelUrl"]);
  return model3;
}
async function predict3(image, config3, idx, count2) {
  var _a2, _b2, _c, _d2;
  if (!model3)
    return { gender: "unknown", genderScore: 0 };
  const skipFrame = skipped3 < (((_a2 = config3.face["ssrnet"]) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face["ssrnet"]) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime3;
  if (config3.skipAllowed && skipFrame && skipTime && lastCount3 === count2 && ((_c = last4[idx]) == null ? void 0 : _c.gender) && ((_d2 = last4[idx]) == null ? void 0 : _d2.genderScore) > 0) {
    skipped3++;
    return last4[idx];
  }
  skipped3 = 0;
  return new Promise(async (resolve) => {
    if (!(model3 == null ? void 0 : model3.inputs[0].shape))
      return;
    const t = {};
    t.resize = jn.resizeBilinear(image, [model3.inputs[0].shape[2], model3.inputs[0].shape[1]], false);
    t.enhance = j(() => {
      const [red, green, blue] = Bn(t.resize, 3, 3);
      const redNorm = V(red, rgb[0]);
      const greenNorm = V(green, rgb[1]);
      const blueNorm = V(blue, rgb[2]);
      const grayscale = JA([redNorm, greenNorm, blueNorm]);
      const normalize = V(ge(grayscale, constants.tf05), 2);
      return normalize;
    });
    const obj = { gender: "unknown", genderScore: 0 };
    if (config3.face["ssrnet"].enabled)
      t.gender = model3.execute(t.enhance);
    const data = await t.gender.data();
    obj.gender = data[0] > data[1] ? "female" : "male";
    obj.genderScore = data[0] > data[1] ? Math.trunc(100 * data[0]) / 100 : Math.trunc(100 * data[1]) / 100;
    Object.keys(t).forEach((tensor) => Re(t[tensor]));
    last4[idx] = obj;
    lastCount3 = count2;
    lastTime3 = now();
    resolve(obj);
  });
}

// src/face/antispoof.ts
var model4;
var cached = [];
var skipped4 = Number.MAX_SAFE_INTEGER;
var lastCount4 = 0;
var lastTime4 = 0;
async function load4(config3) {
  var _a2;
  if (env.initial)
    model4 = null;
  if (!model4)
    model4 = await loadModel((_a2 = config3.face.antispoof) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model4["modelUrl"]);
  return model4;
}
async function predict4(image, config3, idx, count2) {
  var _a2, _b2;
  if (!model4)
    return 0;
  const skipTime = (((_a2 = config3.face.antispoof) == null ? void 0 : _a2.skipTime) || 0) > now() - lastTime4;
  const skipFrame = skipped4 < (((_b2 = config3.face.antispoof) == null ? void 0 : _b2.skipFrames) || 0);
  if (config3.skipAllowed && skipTime && skipFrame && lastCount4 === count2 && cached[idx]) {
    skipped4++;
    return cached[idx];
  }
  skipped4 = 0;
  return new Promise(async (resolve) => {
    const resize = jn.resizeBilinear(image, [(model4 == null ? void 0 : model4.inputs[0].shape) ? model4.inputs[0].shape[2] : 0, (model4 == null ? void 0 : model4.inputs[0].shape) ? model4.inputs[0].shape[1] : 0], false);
    const res = model4 == null ? void 0 : model4.execute(resize);
    const num = (await res.data())[0];
    cached[idx] = Math.round(100 * num) / 100;
    lastCount4 = count2;
    lastTime4 = now();
    Re([resize, res]);
    resolve(cached[idx]);
  });
}

// src/face/facemeshcoords.ts
var meshAnnotations = {
  silhouette: [
    10,
    338,
    297,
    332,
    284,
    251,
    389,
    356,
    454,
    323,
    361,
    288,
    397,
    365,
    379,
    378,
    400,
    377,
    152,
    148,
    176,
    149,
    150,
    136,
    172,
    58,
    132,
    93,
    234,
    127,
    162,
    21,
    54,
    103,
    67,
    109
  ],
  lipsUpperOuter: [61, 185, 40, 39, 37, 0, 267, 269, 270, 409, 291],
  lipsLowerOuter: [146, 91, 181, 84, 17, 314, 405, 321, 375, 291],
  lipsUpperInner: [78, 191, 80, 81, 82, 13, 312, 311, 310, 415, 308],
  lipsLowerInner: [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308],
  rightEyeUpper0: [246, 161, 160, 159, 158, 157, 173],
  rightEyeLower0: [33, 7, 163, 144, 145, 153, 154, 155, 133],
  rightEyeUpper1: [247, 30, 29, 27, 28, 56, 190],
  rightEyeLower1: [130, 25, 110, 24, 23, 22, 26, 112, 243],
  rightEyeUpper2: [113, 225, 224, 223, 222, 221, 189],
  rightEyeLower2: [226, 31, 228, 229, 230, 231, 232, 233, 244],
  rightEyeLower3: [143, 111, 117, 118, 119, 120, 121, 128, 245],
  rightEyebrowUpper: [156, 70, 63, 105, 66, 107, 55, 193],
  rightEyebrowLower: [35, 124, 46, 53, 52, 65],
  rightEyeIris: [473, 474, 475, 476, 477],
  leftEyeUpper0: [466, 388, 387, 386, 385, 384, 398],
  leftEyeLower0: [263, 249, 390, 373, 374, 380, 381, 382, 362],
  leftEyeUpper1: [467, 260, 259, 257, 258, 286, 414],
  leftEyeLower1: [359, 255, 339, 254, 253, 252, 256, 341, 463],
  leftEyeUpper2: [342, 445, 444, 443, 442, 441, 413],
  leftEyeLower2: [446, 261, 448, 449, 450, 451, 452, 453, 464],
  leftEyeLower3: [372, 340, 346, 347, 348, 349, 350, 357, 465],
  leftEyebrowUpper: [383, 300, 293, 334, 296, 336, 285, 417],
  leftEyebrowLower: [265, 353, 276, 283, 282, 295],
  leftEyeIris: [468, 469, 470, 471, 472],
  midwayBetweenEyes: [168],
  noseTip: [1],
  noseBottom: [2],
  noseRightCorner: [98],
  noseLeftCorner: [327],
  rightCheek: [205],
  leftCheek: [425]
};
var meshLandmarks = {
  count: 468,
  mouth: 13,
  symmetryLine: [13, meshAnnotations["midwayBetweenEyes"][0]]
};
var blazeFaceLandmarks = {
  leftEye: 0,
  rightEye: 1,
  nose: 2,
  mouth: 3,
  leftEar: 4,
  rightEar: 5,
  symmetryLine: [3, 2]
};
var irisIndices = [
  { key: "EyeUpper0", indices: [9, 10, 11, 12, 13, 14, 15] },
  { key: "EyeUpper1", indices: [25, 26, 27, 28, 29, 30, 31] },
  { key: "EyeUpper2", indices: [41, 42, 43, 44, 45, 46, 47] },
  { key: "EyeLower0", indices: [0, 1, 2, 3, 4, 5, 6, 7, 8] },
  { key: "EyeLower1", indices: [16, 17, 18, 19, 20, 21, 22, 23, 24] },
  { key: "EyeLower2", indices: [32, 33, 34, 35, 36, 37, 38, 39, 40] },
  { key: "EyeLower3", indices: [54, 55, 56, 57, 58, 59, 60, 61, 62] },
  { key: "EyebrowUpper", indices: [63, 64, 65, 66, 67, 68, 69, 70] },
  { key: "EyebrowLower", indices: [48, 49, 50, 51, 52, 53] }
];
var UV468 = [
  [0.499976992607117, 0.652534008026123],
  [0.500025987625122, 0.547487020492554],
  [0.499974012374878, 0.602371990680695],
  [0.482113003730774, 0.471979022026062],
  [0.500150978565216, 0.527155995368958],
  [0.499909996986389, 0.498252987861633],
  [0.499523013830185, 0.40106201171875],
  [0.289712011814117, 0.380764007568359],
  [0.499954998493195, 0.312398016452789],
  [0.499987006187439, 0.269918978214264],
  [0.500023007392883, 0.107050001621246],
  [0.500023007392883, 0.666234016418457],
  [0.5000159740448, 0.679224014282227],
  [0.500023007392883, 0.692348003387451],
  [0.499976992607117, 0.695277988910675],
  [0.499976992607117, 0.70593398809433],
  [0.499976992607117, 0.719385027885437],
  [0.499976992607117, 0.737019002437592],
  [0.499967992305756, 0.781370997428894],
  [0.499816000461578, 0.562981009483337],
  [0.473773002624512, 0.573909997940063],
  [0.104906998574734, 0.254140973091125],
  [0.365929991006851, 0.409575998783112],
  [0.338757991790771, 0.41302502155304],
  [0.311120003461838, 0.409460008144379],
  [0.274657994508743, 0.389131009578705],
  [0.393361985683441, 0.403706014156342],
  [0.345234006643295, 0.344011008739471],
  [0.370094001293182, 0.346076011657715],
  [0.319321990013123, 0.347265005111694],
  [0.297903001308441, 0.353591024875641],
  [0.24779200553894, 0.410809993743896],
  [0.396889001131058, 0.842755019664764],
  [0.280097991228104, 0.375599980354309],
  [0.106310002505779, 0.399955987930298],
  [0.2099249958992, 0.391353011131287],
  [0.355807989835739, 0.534406006336212],
  [0.471751004457474, 0.65040397644043],
  [0.474155008792877, 0.680191993713379],
  [0.439785003662109, 0.657229006290436],
  [0.414617002010345, 0.66654098033905],
  [0.450374007225037, 0.680860996246338],
  [0.428770989179611, 0.682690978050232],
  [0.374971002340317, 0.727805018424988],
  [0.486716985702515, 0.547628998756409],
  [0.485300987958908, 0.527395009994507],
  [0.257764995098114, 0.314490020275116],
  [0.401223003864288, 0.455172002315521],
  [0.429818987846375, 0.548614978790283],
  [0.421351999044418, 0.533740997314453],
  [0.276895999908447, 0.532056987285614],
  [0.483370006084442, 0.499586999416351],
  [0.33721199631691, 0.282882988452911],
  [0.296391993761063, 0.293242990970612],
  [0.169294998049736, 0.193813979625702],
  [0.447580009698868, 0.302609980106354],
  [0.392390012741089, 0.353887975215912],
  [0.354490011930466, 0.696784019470215],
  [0.067304998636246, 0.730105042457581],
  [0.442739009857178, 0.572826027870178],
  [0.457098007202148, 0.584792017936707],
  [0.381974011659622, 0.694710969924927],
  [0.392388999462128, 0.694203019142151],
  [0.277076005935669, 0.271932005882263],
  [0.422551989555359, 0.563233017921448],
  [0.385919004678726, 0.281364023685455],
  [0.383103013038635, 0.255840003490448],
  [0.331431001424789, 0.119714021682739],
  [0.229923993349075, 0.232002973556519],
  [0.364500999450684, 0.189113974571228],
  [0.229622006416321, 0.299540996551514],
  [0.173287004232407, 0.278747975826263],
  [0.472878992557526, 0.666198015213013],
  [0.446828007698059, 0.668527007102966],
  [0.422762006521225, 0.673889994621277],
  [0.445307999849319, 0.580065965652466],
  [0.388103008270264, 0.693961024284363],
  [0.403039008378983, 0.706539988517761],
  [0.403629004955292, 0.693953037261963],
  [0.460041999816895, 0.557139039039612],
  [0.431158006191254, 0.692366003990173],
  [0.452181994915009, 0.692366003990173],
  [0.475387006998062, 0.692366003990173],
  [0.465828001499176, 0.779190003871918],
  [0.472328990697861, 0.736225962638855],
  [0.473087012767792, 0.717857003211975],
  [0.473122000694275, 0.704625964164734],
  [0.473033010959625, 0.695277988910675],
  [0.427942007780075, 0.695277988910675],
  [0.426479011774063, 0.703539967536926],
  [0.423162013292313, 0.711845993995667],
  [0.4183090031147, 0.720062971115112],
  [0.390094995498657, 0.639572978019714],
  [0.013953999616206, 0.560034036636353],
  [0.499913990497589, 0.58014702796936],
  [0.413199990987778, 0.69539999961853],
  [0.409626007080078, 0.701822996139526],
  [0.468080013990402, 0.601534962654114],
  [0.422728985548019, 0.585985004901886],
  [0.463079988956451, 0.593783974647522],
  [0.37211999297142, 0.47341400384903],
  [0.334562003612518, 0.496073007583618],
  [0.411671012639999, 0.546965003013611],
  [0.242175996303558, 0.14767599105835],
  [0.290776997804642, 0.201445996761322],
  [0.327338010072708, 0.256527006626129],
  [0.399509996175766, 0.748921036720276],
  [0.441727995872498, 0.261676013469696],
  [0.429764986038208, 0.187834024429321],
  [0.412198007106781, 0.108901023864746],
  [0.288955003023148, 0.398952007293701],
  [0.218936994671822, 0.435410976409912],
  [0.41278201341629, 0.398970007896423],
  [0.257135003805161, 0.355440020561218],
  [0.427684992551804, 0.437960982322693],
  [0.448339998722076, 0.536936044692993],
  [0.178560003638268, 0.45755398273468],
  [0.247308000922203, 0.457193970680237],
  [0.286267012357712, 0.467674970626831],
  [0.332827985286713, 0.460712015628815],
  [0.368755996227264, 0.447206974029541],
  [0.398963987827301, 0.432654976844788],
  [0.476410001516342, 0.405806005001068],
  [0.189241006970406, 0.523923993110657],
  [0.228962004184723, 0.348950982093811],
  [0.490725994110107, 0.562400996685028],
  [0.404670000076294, 0.485132992267609],
  [0.019469000399113, 0.401564002037048],
  [0.426243007183075, 0.420431017875671],
  [0.396993011236191, 0.548797011375427],
  [0.266469985246658, 0.376977026462555],
  [0.439121007919312, 0.51895797252655],
  [0.032313998788595, 0.644356966018677],
  [0.419054001569748, 0.387154996395111],
  [0.462783008813858, 0.505746960639954],
  [0.238978996872902, 0.779744982719421],
  [0.198220998048782, 0.831938028335571],
  [0.107550002634525, 0.540755033493042],
  [0.183610007166862, 0.740257024765015],
  [0.134409993886948, 0.333683013916016],
  [0.385764002799988, 0.883153975009918],
  [0.490967005491257, 0.579378008842468],
  [0.382384985685349, 0.508572995662689],
  [0.174399003386497, 0.397670984268188],
  [0.318785011768341, 0.39623498916626],
  [0.343364000320435, 0.400596976280212],
  [0.396100014448166, 0.710216999053955],
  [0.187885001301765, 0.588537991046906],
  [0.430987000465393, 0.944064974784851],
  [0.318993002176285, 0.898285031318665],
  [0.266247987747192, 0.869701027870178],
  [0.500023007392883, 0.190576016902924],
  [0.499976992607117, 0.954452991485596],
  [0.366169989109039, 0.398822009563446],
  [0.393207013607025, 0.39553701877594],
  [0.410373002290726, 0.391080021858215],
  [0.194993004202843, 0.342101991176605],
  [0.388664990663528, 0.362284004688263],
  [0.365961998701096, 0.355970978736877],
  [0.343364000320435, 0.355356991291046],
  [0.318785011768341, 0.35834002494812],
  [0.301414996385574, 0.363156020641327],
  [0.058132998645306, 0.319076001644135],
  [0.301414996385574, 0.387449026107788],
  [0.499987989664078, 0.618434011936188],
  [0.415838003158569, 0.624195992946625],
  [0.445681989192963, 0.566076993942261],
  [0.465844005346298, 0.620640993118286],
  [0.49992299079895, 0.351523995399475],
  [0.288718998432159, 0.819945991039276],
  [0.335278987884521, 0.852819979190826],
  [0.440512001514435, 0.902418971061707],
  [0.128294005990028, 0.791940987110138],
  [0.408771991729736, 0.373893976211548],
  [0.455606997013092, 0.451801002025604],
  [0.499877005815506, 0.908990025520325],
  [0.375436991453171, 0.924192011356354],
  [0.11421000212431, 0.615022003650665],
  [0.448662012815475, 0.695277988910675],
  [0.4480200111866, 0.704632043838501],
  [0.447111994028091, 0.715808033943176],
  [0.444831997156143, 0.730794012546539],
  [0.430011987686157, 0.766808986663818],
  [0.406787008047104, 0.685672998428345],
  [0.400738000869751, 0.681069016456604],
  [0.392399996519089, 0.677703022956848],
  [0.367855995893478, 0.663918972015381],
  [0.247923001646996, 0.601333022117615],
  [0.452769994735718, 0.420849978923798],
  [0.43639200925827, 0.359887003898621],
  [0.416164010763168, 0.368713974952698],
  [0.413385987281799, 0.692366003990173],
  [0.228018000721931, 0.683571994304657],
  [0.468268007040024, 0.352671027183533],
  [0.411361992359161, 0.804327011108398],
  [0.499989002943039, 0.469825029373169],
  [0.479153990745544, 0.442654013633728],
  [0.499974012374878, 0.439637005329132],
  [0.432112008333206, 0.493588984012604],
  [0.499886006116867, 0.866917014122009],
  [0.49991300702095, 0.821729004383087],
  [0.456548988819122, 0.819200992584229],
  [0.344549000263214, 0.745438992977142],
  [0.37890899181366, 0.574010014533997],
  [0.374292999505997, 0.780184984207153],
  [0.319687992334366, 0.570737957954407],
  [0.357154995203018, 0.604269981384277],
  [0.295284003019333, 0.621580958366394],
  [0.447750002145767, 0.862477004528046],
  [0.410986006259918, 0.508723020553589],
  [0.31395098567009, 0.775308012962341],
  [0.354128003120422, 0.812552988529205],
  [0.324548006057739, 0.703992962837219],
  [0.189096003770828, 0.646299958229065],
  [0.279776990413666, 0.71465802192688],
  [0.1338230073452, 0.682700991630554],
  [0.336768001317978, 0.644733011722565],
  [0.429883986711502, 0.466521978378296],
  [0.455527991056442, 0.548622965812683],
  [0.437114000320435, 0.558896005153656],
  [0.467287987470627, 0.529924988746643],
  [0.414712011814117, 0.335219979286194],
  [0.37704598903656, 0.322777986526489],
  [0.344107985496521, 0.320150971412659],
  [0.312875986099243, 0.32233202457428],
  [0.283526003360748, 0.333190023899078],
  [0.241245999932289, 0.382785975933075],
  [0.102986000478268, 0.468762993812561],
  [0.267612010240555, 0.424560010433197],
  [0.297879010438919, 0.433175981044769],
  [0.333433985710144, 0.433878004550934],
  [0.366427004337311, 0.426115989685059],
  [0.396012008190155, 0.416696012020111],
  [0.420121014118195, 0.41022801399231],
  [0.007561000064015, 0.480777025222778],
  [0.432949006557465, 0.569517970085144],
  [0.458638995885849, 0.479089021682739],
  [0.473466008901596, 0.545744001865387],
  [0.476087987422943, 0.563830018043518],
  [0.468472003936768, 0.555056989192963],
  [0.433990985155106, 0.582361996173859],
  [0.483518004417419, 0.562983989715576],
  [0.482482999563217, 0.57784903049469],
  [0.42645001411438, 0.389798998832703],
  [0.438998997211456, 0.39649498462677],
  [0.450067013502121, 0.400434017181396],
  [0.289712011814117, 0.368252992630005],
  [0.276670008897781, 0.363372981548309],
  [0.517862021923065, 0.471948027610779],
  [0.710287988185883, 0.380764007568359],
  [0.526226997375488, 0.573909997940063],
  [0.895093023777008, 0.254140973091125],
  [0.634069979190826, 0.409575998783112],
  [0.661242008209229, 0.41302502155304],
  [0.688880026340485, 0.409460008144379],
  [0.725341975688934, 0.389131009578705],
  [0.606630027294159, 0.40370500087738],
  [0.654766023159027, 0.344011008739471],
  [0.629905998706818, 0.346076011657715],
  [0.680678009986877, 0.347265005111694],
  [0.702096998691559, 0.353591024875641],
  [0.75221198797226, 0.410804986953735],
  [0.602918028831482, 0.842862963676453],
  [0.719901978969574, 0.375599980354309],
  [0.893692970275879, 0.399959981441498],
  [0.790081977844238, 0.391354024410248],
  [0.643998026847839, 0.534487962722778],
  [0.528249025344849, 0.65040397644043],
  [0.525849997997284, 0.680191040039062],
  [0.560214996337891, 0.657229006290436],
  [0.585384011268616, 0.66654098033905],
  [0.549625992774963, 0.680860996246338],
  [0.57122802734375, 0.682691991329193],
  [0.624852001667023, 0.72809898853302],
  [0.513050019741058, 0.547281980514526],
  [0.51509702205658, 0.527251958847046],
  [0.742246985435486, 0.314507007598877],
  [0.598631024360657, 0.454979002475739],
  [0.570338010787964, 0.548575043678284],
  [0.578631997108459, 0.533622980117798],
  [0.723087012767792, 0.532054007053375],
  [0.516445994377136, 0.499638974666595],
  [0.662801027297974, 0.282917976379395],
  [0.70362401008606, 0.293271005153656],
  [0.830704987049103, 0.193813979625702],
  [0.552385985851288, 0.302568018436432],
  [0.607609987258911, 0.353887975215912],
  [0.645429015159607, 0.696707010269165],
  [0.932694971561432, 0.730105042457581],
  [0.557260990142822, 0.572826027870178],
  [0.542901992797852, 0.584792017936707],
  [0.6180260181427, 0.694710969924927],
  [0.607590973377228, 0.694203019142151],
  [0.722943007946014, 0.271963000297546],
  [0.577413976192474, 0.563166975975037],
  [0.614082992076874, 0.281386971473694],
  [0.616907000541687, 0.255886018276215],
  [0.668509006500244, 0.119913995265961],
  [0.770092010498047, 0.232020974159241],
  [0.635536015033722, 0.189248979091644],
  [0.77039098739624, 0.299556016921997],
  [0.826722025871277, 0.278755009174347],
  [0.527121007442474, 0.666198015213013],
  [0.553171992301941, 0.668527007102966],
  [0.577238023281097, 0.673889994621277],
  [0.554691970348358, 0.580065965652466],
  [0.611896991729736, 0.693961024284363],
  [0.59696102142334, 0.706539988517761],
  [0.596370995044708, 0.693953037261963],
  [0.539958000183105, 0.557139039039612],
  [0.568841993808746, 0.692366003990173],
  [0.547818005084991, 0.692366003990173],
  [0.52461302280426, 0.692366003990173],
  [0.534089982509613, 0.779141008853912],
  [0.527670979499817, 0.736225962638855],
  [0.526912987232208, 0.717857003211975],
  [0.526877999305725, 0.704625964164734],
  [0.526966989040375, 0.695277988910675],
  [0.572058022022247, 0.695277988910675],
  [0.573521018028259, 0.703539967536926],
  [0.57683801651001, 0.711845993995667],
  [0.581691026687622, 0.720062971115112],
  [0.609944999217987, 0.639909982681274],
  [0.986046016216278, 0.560034036636353],
  [0.5867999792099, 0.69539999961853],
  [0.590372025966644, 0.701822996139526],
  [0.531915009021759, 0.601536989212036],
  [0.577268004417419, 0.585934996604919],
  [0.536915004253387, 0.593786001205444],
  [0.627542972564697, 0.473352015018463],
  [0.665585994720459, 0.495950996875763],
  [0.588353991508484, 0.546862006187439],
  [0.757824003696442, 0.14767599105835],
  [0.709249973297119, 0.201507985591888],
  [0.672684013843536, 0.256581008434296],
  [0.600408971309662, 0.74900496006012],
  [0.55826598405838, 0.261672019958496],
  [0.570303976535797, 0.187870979309082],
  [0.588165998458862, 0.109044015407562],
  [0.711045026779175, 0.398952007293701],
  [0.781069993972778, 0.435405015945435],
  [0.587247014045715, 0.398931980133057],
  [0.742869973182678, 0.355445981025696],
  [0.572156012058258, 0.437651991844177],
  [0.55186802148819, 0.536570012569427],
  [0.821442008018494, 0.457556009292603],
  [0.752701997756958, 0.457181990146637],
  [0.71375697851181, 0.467626988887787],
  [0.66711300611496, 0.460672974586487],
  [0.631101012229919, 0.447153985500336],
  [0.6008620262146, 0.432473003864288],
  [0.523481011390686, 0.405627012252808],
  [0.810747981071472, 0.523926019668579],
  [0.771045982837677, 0.348959028720856],
  [0.509127020835876, 0.562718033790588],
  [0.595292985439301, 0.485023975372314],
  [0.980530977249146, 0.401564002037048],
  [0.573499977588654, 0.420000016689301],
  [0.602994978427887, 0.548687994480133],
  [0.733529984951019, 0.376977026462555],
  [0.560611009597778, 0.519016981124878],
  [0.967685997486115, 0.644356966018677],
  [0.580985009670258, 0.387160003185272],
  [0.537728011608124, 0.505385041236877],
  [0.760966002941132, 0.779752969741821],
  [0.801778972148895, 0.831938028335571],
  [0.892440974712372, 0.54076099395752],
  [0.816350996494293, 0.740260004997253],
  [0.865594983100891, 0.333687007427216],
  [0.614073991775513, 0.883246004581451],
  [0.508952975273132, 0.579437971115112],
  [0.617941975593567, 0.508316040039062],
  [0.825608015060425, 0.397674977779388],
  [0.681214988231659, 0.39623498916626],
  [0.656635999679565, 0.400596976280212],
  [0.603900015354156, 0.710216999053955],
  [0.81208598613739, 0.588539004325867],
  [0.56801301240921, 0.944564998149872],
  [0.681007981300354, 0.898285031318665],
  [0.733752012252808, 0.869701027870178],
  [0.633830010890961, 0.398822009563446],
  [0.606792986392975, 0.39553701877594],
  [0.589659988880157, 0.391062021255493],
  [0.805015981197357, 0.342108011245728],
  [0.611334979534149, 0.362284004688263],
  [0.634037971496582, 0.355970978736877],
  [0.656635999679565, 0.355356991291046],
  [0.681214988231659, 0.35834002494812],
  [0.698584973812103, 0.363156020641327],
  [0.941866993904114, 0.319076001644135],
  [0.698584973812103, 0.387449026107788],
  [0.584177017211914, 0.624107003211975],
  [0.554318010807037, 0.566076993942261],
  [0.534153997898102, 0.62064003944397],
  [0.711217999458313, 0.819975018501282],
  [0.664629995822906, 0.852871000766754],
  [0.559099972248077, 0.902631998062134],
  [0.871706008911133, 0.791940987110138],
  [0.591234028339386, 0.373893976211548],
  [0.544341027736664, 0.451583981513977],
  [0.624562978744507, 0.924192011356354],
  [0.88577002286911, 0.615028977394104],
  [0.551338016986847, 0.695277988910675],
  [0.551980018615723, 0.704632043838501],
  [0.552887976169586, 0.715808033943176],
  [0.555167973041534, 0.730794012546539],
  [0.569944024085999, 0.767035007476807],
  [0.593203008174896, 0.685675978660583],
  [0.599261999130249, 0.681069016456604],
  [0.607599973678589, 0.677703022956848],
  [0.631937980651855, 0.663500010967255],
  [0.752032995223999, 0.601315021514893],
  [0.547226011753082, 0.420395016670227],
  [0.563543975353241, 0.359827995300293],
  [0.583841025829315, 0.368713974952698],
  [0.586614012718201, 0.692366003990173],
  [0.771915018558502, 0.683578014373779],
  [0.531597018241882, 0.352482974529266],
  [0.588370978832245, 0.804440975189209],
  [0.52079701423645, 0.442565023899078],
  [0.567984998226166, 0.493479013442993],
  [0.543282985687256, 0.819254994392395],
  [0.655317008495331, 0.745514988899231],
  [0.621008992195129, 0.574018001556396],
  [0.625559985637665, 0.78031200170517],
  [0.680198013782501, 0.570719003677368],
  [0.64276397228241, 0.604337990283966],
  [0.704662978649139, 0.621529996395111],
  [0.552012026309967, 0.862591981887817],
  [0.589071989059448, 0.508637011051178],
  [0.685944974422455, 0.775357007980347],
  [0.645735025405884, 0.812640011310577],
  [0.675342977046967, 0.703978002071381],
  [0.810858011245728, 0.646304965019226],
  [0.72012197971344, 0.714666962623596],
  [0.866151988506317, 0.682704985141754],
  [0.663187026977539, 0.644596993923187],
  [0.570082008838654, 0.466325998306274],
  [0.544561982154846, 0.548375964164734],
  [0.562758982181549, 0.558784961700439],
  [0.531987011432648, 0.530140042304993],
  [0.585271000862122, 0.335177004337311],
  [0.622952997684479, 0.32277899980545],
  [0.655896008014679, 0.320163011550903],
  [0.687132000923157, 0.322345972061157],
  [0.716481983661652, 0.333200991153717],
  [0.758756995201111, 0.382786989212036],
  [0.897013008594513, 0.468769013881683],
  [0.732392013072968, 0.424547016620636],
  [0.70211398601532, 0.433162987232208],
  [0.66652500629425, 0.433866024017334],
  [0.633504986763, 0.426087975502014],
  [0.603875994682312, 0.416586995124817],
  [0.579657971858978, 0.409945011138916],
  [0.992439985275269, 0.480777025222778],
  [0.567192018032074, 0.569419980049133],
  [0.54136598110199, 0.478899002075195],
  [0.526564002037048, 0.546118021011353],
  [0.523913025856018, 0.563830018043518],
  [0.531529009342194, 0.555056989192963],
  [0.566035985946655, 0.582329034805298],
  [0.51631098985672, 0.563053965568542],
  [0.5174720287323, 0.577877044677734],
  [0.573594987392426, 0.389806985855103],
  [0.560697972774506, 0.395331978797913],
  [0.549755990505219, 0.399751007556915],
  [0.710287988185883, 0.368252992630005],
  [0.723330020904541, 0.363372981548309]
];
var TRI468 = [
  127,
  34,
  139,
  11,
  0,
  37,
  232,
  231,
  120,
  72,
  37,
  39,
  128,
  121,
  47,
  232,
  121,
  128,
  104,
  69,
  67,
  175,
  171,
  148,
  157,
  154,
  155,
  118,
  50,
  101,
  73,
  39,
  40,
  9,
  151,
  108,
  48,
  115,
  131,
  194,
  204,
  211,
  74,
  40,
  185,
  80,
  42,
  183,
  40,
  92,
  186,
  230,
  229,
  118,
  202,
  212,
  214,
  83,
  18,
  17,
  76,
  61,
  146,
  160,
  29,
  30,
  56,
  157,
  173,
  106,
  204,
  194,
  135,
  214,
  192,
  203,
  165,
  98,
  21,
  71,
  68,
  51,
  45,
  4,
  144,
  24,
  23,
  77,
  146,
  91,
  205,
  50,
  187,
  201,
  200,
  18,
  91,
  106,
  182,
  90,
  91,
  181,
  85,
  84,
  17,
  206,
  203,
  36,
  148,
  171,
  140,
  92,
  40,
  39,
  193,
  189,
  244,
  159,
  158,
  28,
  247,
  246,
  161,
  236,
  3,
  196,
  54,
  68,
  104,
  193,
  168,
  8,
  117,
  228,
  31,
  189,
  193,
  55,
  98,
  97,
  99,
  126,
  47,
  100,
  166,
  79,
  218,
  155,
  154,
  26,
  209,
  49,
  131,
  135,
  136,
  150,
  47,
  126,
  217,
  223,
  52,
  53,
  45,
  51,
  134,
  211,
  170,
  140,
  67,
  69,
  108,
  43,
  106,
  91,
  230,
  119,
  120,
  226,
  130,
  247,
  63,
  53,
  52,
  238,
  20,
  242,
  46,
  70,
  156,
  78,
  62,
  96,
  46,
  53,
  63,
  143,
  34,
  227,
  173,
  155,
  133,
  123,
  117,
  111,
  44,
  125,
  19,
  236,
  134,
  51,
  216,
  206,
  205,
  154,
  153,
  22,
  39,
  37,
  167,
  200,
  201,
  208,
  36,
  142,
  100,
  57,
  212,
  202,
  20,
  60,
  99,
  28,
  158,
  157,
  35,
  226,
  113,
  160,
  159,
  27,
  204,
  202,
  210,
  113,
  225,
  46,
  43,
  202,
  204,
  62,
  76,
  77,
  137,
  123,
  116,
  41,
  38,
  72,
  203,
  129,
  142,
  64,
  98,
  240,
  49,
  102,
  64,
  41,
  73,
  74,
  212,
  216,
  207,
  42,
  74,
  184,
  169,
  170,
  211,
  170,
  149,
  176,
  105,
  66,
  69,
  122,
  6,
  168,
  123,
  147,
  187,
  96,
  77,
  90,
  65,
  55,
  107,
  89,
  90,
  180,
  101,
  100,
  120,
  63,
  105,
  104,
  93,
  137,
  227,
  15,
  86,
  85,
  129,
  102,
  49,
  14,
  87,
  86,
  55,
  8,
  9,
  100,
  47,
  121,
  145,
  23,
  22,
  88,
  89,
  179,
  6,
  122,
  196,
  88,
  95,
  96,
  138,
  172,
  136,
  215,
  58,
  172,
  115,
  48,
  219,
  42,
  80,
  81,
  195,
  3,
  51,
  43,
  146,
  61,
  171,
  175,
  199,
  81,
  82,
  38,
  53,
  46,
  225,
  144,
  163,
  110,
  246,
  33,
  7,
  52,
  65,
  66,
  229,
  228,
  117,
  34,
  127,
  234,
  107,
  108,
  69,
  109,
  108,
  151,
  48,
  64,
  235,
  62,
  78,
  191,
  129,
  209,
  126,
  111,
  35,
  143,
  163,
  161,
  246,
  117,
  123,
  50,
  222,
  65,
  52,
  19,
  125,
  141,
  221,
  55,
  65,
  3,
  195,
  197,
  25,
  7,
  33,
  220,
  237,
  44,
  70,
  71,
  139,
  122,
  193,
  245,
  247,
  130,
  33,
  71,
  21,
  162,
  153,
  158,
  159,
  170,
  169,
  150,
  188,
  174,
  196,
  216,
  186,
  92,
  144,
  160,
  161,
  2,
  97,
  167,
  141,
  125,
  241,
  164,
  167,
  37,
  72,
  38,
  12,
  145,
  159,
  160,
  38,
  82,
  13,
  63,
  68,
  71,
  226,
  35,
  111,
  158,
  153,
  154,
  101,
  50,
  205,
  206,
  92,
  165,
  209,
  198,
  217,
  165,
  167,
  97,
  220,
  115,
  218,
  133,
  112,
  243,
  239,
  238,
  241,
  214,
  135,
  169,
  190,
  173,
  133,
  171,
  208,
  32,
  125,
  44,
  237,
  86,
  87,
  178,
  85,
  86,
  179,
  84,
  85,
  180,
  83,
  84,
  181,
  201,
  83,
  182,
  137,
  93,
  132,
  76,
  62,
  183,
  61,
  76,
  184,
  57,
  61,
  185,
  212,
  57,
  186,
  214,
  207,
  187,
  34,
  143,
  156,
  79,
  239,
  237,
  123,
  137,
  177,
  44,
  1,
  4,
  201,
  194,
  32,
  64,
  102,
  129,
  213,
  215,
  138,
  59,
  166,
  219,
  242,
  99,
  97,
  2,
  94,
  141,
  75,
  59,
  235,
  24,
  110,
  228,
  25,
  130,
  226,
  23,
  24,
  229,
  22,
  23,
  230,
  26,
  22,
  231,
  112,
  26,
  232,
  189,
  190,
  243,
  221,
  56,
  190,
  28,
  56,
  221,
  27,
  28,
  222,
  29,
  27,
  223,
  30,
  29,
  224,
  247,
  30,
  225,
  238,
  79,
  20,
  166,
  59,
  75,
  60,
  75,
  240,
  147,
  177,
  215,
  20,
  79,
  166,
  187,
  147,
  213,
  112,
  233,
  244,
  233,
  128,
  245,
  128,
  114,
  188,
  114,
  217,
  174,
  131,
  115,
  220,
  217,
  198,
  236,
  198,
  131,
  134,
  177,
  132,
  58,
  143,
  35,
  124,
  110,
  163,
  7,
  228,
  110,
  25,
  356,
  389,
  368,
  11,
  302,
  267,
  452,
  350,
  349,
  302,
  303,
  269,
  357,
  343,
  277,
  452,
  453,
  357,
  333,
  332,
  297,
  175,
  152,
  377,
  384,
  398,
  382,
  347,
  348,
  330,
  303,
  304,
  270,
  9,
  336,
  337,
  278,
  279,
  360,
  418,
  262,
  431,
  304,
  408,
  409,
  310,
  415,
  407,
  270,
  409,
  410,
  450,
  348,
  347,
  422,
  430,
  434,
  313,
  314,
  17,
  306,
  307,
  375,
  387,
  388,
  260,
  286,
  414,
  398,
  335,
  406,
  418,
  364,
  367,
  416,
  423,
  358,
  327,
  251,
  284,
  298,
  281,
  5,
  4,
  373,
  374,
  253,
  307,
  320,
  321,
  425,
  427,
  411,
  421,
  313,
  18,
  321,
  405,
  406,
  320,
  404,
  405,
  315,
  16,
  17,
  426,
  425,
  266,
  377,
  400,
  369,
  322,
  391,
  269,
  417,
  465,
  464,
  386,
  257,
  258,
  466,
  260,
  388,
  456,
  399,
  419,
  284,
  332,
  333,
  417,
  285,
  8,
  346,
  340,
  261,
  413,
  441,
  285,
  327,
  460,
  328,
  355,
  371,
  329,
  392,
  439,
  438,
  382,
  341,
  256,
  429,
  420,
  360,
  364,
  394,
  379,
  277,
  343,
  437,
  443,
  444,
  283,
  275,
  440,
  363,
  431,
  262,
  369,
  297,
  338,
  337,
  273,
  375,
  321,
  450,
  451,
  349,
  446,
  342,
  467,
  293,
  334,
  282,
  458,
  461,
  462,
  276,
  353,
  383,
  308,
  324,
  325,
  276,
  300,
  293,
  372,
  345,
  447,
  382,
  398,
  362,
  352,
  345,
  340,
  274,
  1,
  19,
  456,
  248,
  281,
  436,
  427,
  425,
  381,
  256,
  252,
  269,
  391,
  393,
  200,
  199,
  428,
  266,
  330,
  329,
  287,
  273,
  422,
  250,
  462,
  328,
  258,
  286,
  384,
  265,
  353,
  342,
  387,
  259,
  257,
  424,
  431,
  430,
  342,
  353,
  276,
  273,
  335,
  424,
  292,
  325,
  307,
  366,
  447,
  345,
  271,
  303,
  302,
  423,
  266,
  371,
  294,
  455,
  460,
  279,
  278,
  294,
  271,
  272,
  304,
  432,
  434,
  427,
  272,
  407,
  408,
  394,
  430,
  431,
  395,
  369,
  400,
  334,
  333,
  299,
  351,
  417,
  168,
  352,
  280,
  411,
  325,
  319,
  320,
  295,
  296,
  336,
  319,
  403,
  404,
  330,
  348,
  349,
  293,
  298,
  333,
  323,
  454,
  447,
  15,
  16,
  315,
  358,
  429,
  279,
  14,
  15,
  316,
  285,
  336,
  9,
  329,
  349,
  350,
  374,
  380,
  252,
  318,
  402,
  403,
  6,
  197,
  419,
  318,
  319,
  325,
  367,
  364,
  365,
  435,
  367,
  397,
  344,
  438,
  439,
  272,
  271,
  311,
  195,
  5,
  281,
  273,
  287,
  291,
  396,
  428,
  199,
  311,
  271,
  268,
  283,
  444,
  445,
  373,
  254,
  339,
  263,
  466,
  249,
  282,
  334,
  296,
  449,
  347,
  346,
  264,
  447,
  454,
  336,
  296,
  299,
  338,
  10,
  151,
  278,
  439,
  455,
  292,
  407,
  415,
  358,
  371,
  355,
  340,
  345,
  372,
  390,
  249,
  466,
  346,
  347,
  280,
  442,
  443,
  282,
  19,
  94,
  370,
  441,
  442,
  295,
  248,
  419,
  197,
  263,
  255,
  359,
  440,
  275,
  274,
  300,
  383,
  368,
  351,
  412,
  465,
  263,
  467,
  466,
  301,
  368,
  389,
  380,
  374,
  386,
  395,
  378,
  379,
  412,
  351,
  419,
  436,
  426,
  322,
  373,
  390,
  388,
  2,
  164,
  393,
  370,
  462,
  461,
  164,
  0,
  267,
  302,
  11,
  12,
  374,
  373,
  387,
  268,
  12,
  13,
  293,
  300,
  301,
  446,
  261,
  340,
  385,
  384,
  381,
  330,
  266,
  425,
  426,
  423,
  391,
  429,
  355,
  437,
  391,
  327,
  326,
  440,
  457,
  438,
  341,
  382,
  362,
  459,
  457,
  461,
  434,
  430,
  394,
  414,
  463,
  362,
  396,
  369,
  262,
  354,
  461,
  457,
  316,
  403,
  402,
  315,
  404,
  403,
  314,
  405,
  404,
  313,
  406,
  405,
  421,
  418,
  406,
  366,
  401,
  361,
  306,
  408,
  407,
  291,
  409,
  408,
  287,
  410,
  409,
  432,
  436,
  410,
  434,
  416,
  411,
  264,
  368,
  383,
  309,
  438,
  457,
  352,
  376,
  401,
  274,
  275,
  4,
  421,
  428,
  262,
  294,
  327,
  358,
  433,
  416,
  367,
  289,
  455,
  439,
  462,
  370,
  326,
  2,
  326,
  370,
  305,
  460,
  455,
  254,
  449,
  448,
  255,
  261,
  446,
  253,
  450,
  449,
  252,
  451,
  450,
  256,
  452,
  451,
  341,
  453,
  452,
  413,
  464,
  463,
  441,
  413,
  414,
  258,
  442,
  441,
  257,
  443,
  442,
  259,
  444,
  443,
  260,
  445,
  444,
  467,
  342,
  445,
  459,
  458,
  250,
  289,
  392,
  290,
  290,
  328,
  460,
  376,
  433,
  435,
  250,
  290,
  392,
  411,
  416,
  433,
  341,
  463,
  464,
  453,
  464,
  465,
  357,
  465,
  412,
  343,
  412,
  399,
  360,
  363,
  440,
  437,
  399,
  456,
  420,
  456,
  363,
  401,
  435,
  288,
  372,
  383,
  353,
  339,
  255,
  249,
  448,
  261,
  255,
  133,
  243,
  190,
  133,
  155,
  112,
  33,
  246,
  247,
  33,
  130,
  25,
  398,
  384,
  286,
  362,
  398,
  414,
  362,
  463,
  341,
  263,
  359,
  467,
  263,
  249,
  255,
  466,
  467,
  260,
  75,
  60,
  166,
  238,
  239,
  79,
  162,
  127,
  139,
  72,
  11,
  37,
  121,
  232,
  120,
  73,
  72,
  39,
  114,
  128,
  47,
  233,
  232,
  128,
  103,
  104,
  67,
  152,
  175,
  148,
  173,
  157,
  155,
  119,
  118,
  101,
  74,
  73,
  40,
  107,
  9,
  108,
  49,
  48,
  131,
  32,
  194,
  211,
  184,
  74,
  185,
  191,
  80,
  183,
  185,
  40,
  186,
  119,
  230,
  118,
  210,
  202,
  214,
  84,
  83,
  17,
  77,
  76,
  146,
  161,
  160,
  30,
  190,
  56,
  173,
  182,
  106,
  194,
  138,
  135,
  192,
  129,
  203,
  98,
  54,
  21,
  68,
  5,
  51,
  4,
  145,
  144,
  23,
  90,
  77,
  91,
  207,
  205,
  187,
  83,
  201,
  18,
  181,
  91,
  182,
  180,
  90,
  181,
  16,
  85,
  17,
  205,
  206,
  36,
  176,
  148,
  140,
  165,
  92,
  39,
  245,
  193,
  244,
  27,
  159,
  28,
  30,
  247,
  161,
  174,
  236,
  196,
  103,
  54,
  104,
  55,
  193,
  8,
  111,
  117,
  31,
  221,
  189,
  55,
  240,
  98,
  99,
  142,
  126,
  100,
  219,
  166,
  218,
  112,
  155,
  26,
  198,
  209,
  131,
  169,
  135,
  150,
  114,
  47,
  217,
  224,
  223,
  53,
  220,
  45,
  134,
  32,
  211,
  140,
  109,
  67,
  108,
  146,
  43,
  91,
  231,
  230,
  120,
  113,
  226,
  247,
  105,
  63,
  52,
  241,
  238,
  242,
  124,
  46,
  156,
  95,
  78,
  96,
  70,
  46,
  63,
  116,
  143,
  227,
  116,
  123,
  111,
  1,
  44,
  19,
  3,
  236,
  51,
  207,
  216,
  205,
  26,
  154,
  22,
  165,
  39,
  167,
  199,
  200,
  208,
  101,
  36,
  100,
  43,
  57,
  202,
  242,
  20,
  99,
  56,
  28,
  157,
  124,
  35,
  113,
  29,
  160,
  27,
  211,
  204,
  210,
  124,
  113,
  46,
  106,
  43,
  204,
  96,
  62,
  77,
  227,
  137,
  116,
  73,
  41,
  72,
  36,
  203,
  142,
  235,
  64,
  240,
  48,
  49,
  64,
  42,
  41,
  74,
  214,
  212,
  207,
  183,
  42,
  184,
  210,
  169,
  211,
  140,
  170,
  176,
  104,
  105,
  69,
  193,
  122,
  168,
  50,
  123,
  187,
  89,
  96,
  90,
  66,
  65,
  107,
  179,
  89,
  180,
  119,
  101,
  120,
  68,
  63,
  104,
  234,
  93,
  227,
  16,
  15,
  85,
  209,
  129,
  49,
  15,
  14,
  86,
  107,
  55,
  9,
  120,
  100,
  121,
  153,
  145,
  22,
  178,
  88,
  179,
  197,
  6,
  196,
  89,
  88,
  96,
  135,
  138,
  136,
  138,
  215,
  172,
  218,
  115,
  219,
  41,
  42,
  81,
  5,
  195,
  51,
  57,
  43,
  61,
  208,
  171,
  199,
  41,
  81,
  38,
  224,
  53,
  225,
  24,
  144,
  110,
  105,
  52,
  66,
  118,
  229,
  117,
  227,
  34,
  234,
  66,
  107,
  69,
  10,
  109,
  151,
  219,
  48,
  235,
  183,
  62,
  191,
  142,
  129,
  126,
  116,
  111,
  143,
  7,
  163,
  246,
  118,
  117,
  50,
  223,
  222,
  52,
  94,
  19,
  141,
  222,
  221,
  65,
  196,
  3,
  197,
  45,
  220,
  44,
  156,
  70,
  139,
  188,
  122,
  245,
  139,
  71,
  162,
  145,
  153,
  159,
  149,
  170,
  150,
  122,
  188,
  196,
  206,
  216,
  92,
  163,
  144,
  161,
  164,
  2,
  167,
  242,
  141,
  241,
  0,
  164,
  37,
  11,
  72,
  12,
  144,
  145,
  160,
  12,
  38,
  13,
  70,
  63,
  71,
  31,
  226,
  111,
  157,
  158,
  154,
  36,
  101,
  205,
  203,
  206,
  165,
  126,
  209,
  217,
  98,
  165,
  97,
  237,
  220,
  218,
  237,
  239,
  241,
  210,
  214,
  169,
  140,
  171,
  32,
  241,
  125,
  237,
  179,
  86,
  178,
  180,
  85,
  179,
  181,
  84,
  180,
  182,
  83,
  181,
  194,
  201,
  182,
  177,
  137,
  132,
  184,
  76,
  183,
  185,
  61,
  184,
  186,
  57,
  185,
  216,
  212,
  186,
  192,
  214,
  187,
  139,
  34,
  156,
  218,
  79,
  237,
  147,
  123,
  177,
  45,
  44,
  4,
  208,
  201,
  32,
  98,
  64,
  129,
  192,
  213,
  138,
  235,
  59,
  219,
  141,
  242,
  97,
  97,
  2,
  141,
  240,
  75,
  235,
  229,
  24,
  228,
  31,
  25,
  226,
  230,
  23,
  229,
  231,
  22,
  230,
  232,
  26,
  231,
  233,
  112,
  232,
  244,
  189,
  243,
  189,
  221,
  190,
  222,
  28,
  221,
  223,
  27,
  222,
  224,
  29,
  223,
  225,
  30,
  224,
  113,
  247,
  225,
  99,
  60,
  240,
  213,
  147,
  215,
  60,
  20,
  166,
  192,
  187,
  213,
  243,
  112,
  244,
  244,
  233,
  245,
  245,
  128,
  188,
  188,
  114,
  174,
  134,
  131,
  220,
  174,
  217,
  236,
  236,
  198,
  134,
  215,
  177,
  58,
  156,
  143,
  124,
  25,
  110,
  7,
  31,
  228,
  25,
  264,
  356,
  368,
  0,
  11,
  267,
  451,
  452,
  349,
  267,
  302,
  269,
  350,
  357,
  277,
  350,
  452,
  357,
  299,
  333,
  297,
  396,
  175,
  377,
  381,
  384,
  382,
  280,
  347,
  330,
  269,
  303,
  270,
  151,
  9,
  337,
  344,
  278,
  360,
  424,
  418,
  431,
  270,
  304,
  409,
  272,
  310,
  407,
  322,
  270,
  410,
  449,
  450,
  347,
  432,
  422,
  434,
  18,
  313,
  17,
  291,
  306,
  375,
  259,
  387,
  260,
  424,
  335,
  418,
  434,
  364,
  416,
  391,
  423,
  327,
  301,
  251,
  298,
  275,
  281,
  4,
  254,
  373,
  253,
  375,
  307,
  321,
  280,
  425,
  411,
  200,
  421,
  18,
  335,
  321,
  406,
  321,
  320,
  405,
  314,
  315,
  17,
  423,
  426,
  266,
  396,
  377,
  369,
  270,
  322,
  269,
  413,
  417,
  464,
  385,
  386,
  258,
  248,
  456,
  419,
  298,
  284,
  333,
  168,
  417,
  8,
  448,
  346,
  261,
  417,
  413,
  285,
  326,
  327,
  328,
  277,
  355,
  329,
  309,
  392,
  438,
  381,
  382,
  256,
  279,
  429,
  360,
  365,
  364,
  379,
  355,
  277,
  437,
  282,
  443,
  283,
  281,
  275,
  363,
  395,
  431,
  369,
  299,
  297,
  337,
  335,
  273,
  321,
  348,
  450,
  349,
  359,
  446,
  467,
  283,
  293,
  282,
  250,
  458,
  462,
  300,
  276,
  383,
  292,
  308,
  325,
  283,
  276,
  293,
  264,
  372,
  447,
  346,
  352,
  340,
  354,
  274,
  19,
  363,
  456,
  281,
  426,
  436,
  425,
  380,
  381,
  252,
  267,
  269,
  393,
  421,
  200,
  428,
  371,
  266,
  329,
  432,
  287,
  422,
  290,
  250,
  328,
  385,
  258,
  384,
  446,
  265,
  342,
  386,
  387,
  257,
  422,
  424,
  430,
  445,
  342,
  276,
  422,
  273,
  424,
  306,
  292,
  307,
  352,
  366,
  345,
  268,
  271,
  302,
  358,
  423,
  371,
  327,
  294,
  460,
  331,
  279,
  294,
  303,
  271,
  304,
  436,
  432,
  427,
  304,
  272,
  408,
  395,
  394,
  431,
  378,
  395,
  400,
  296,
  334,
  299,
  6,
  351,
  168,
  376,
  352,
  411,
  307,
  325,
  320,
  285,
  295,
  336,
  320,
  319,
  404,
  329,
  330,
  349,
  334,
  293,
  333,
  366,
  323,
  447,
  316,
  15,
  315,
  331,
  358,
  279,
  317,
  14,
  316,
  8,
  285,
  9,
  277,
  329,
  350,
  253,
  374,
  252,
  319,
  318,
  403,
  351,
  6,
  419,
  324,
  318,
  325,
  397,
  367,
  365,
  288,
  435,
  397,
  278,
  344,
  439,
  310,
  272,
  311,
  248,
  195,
  281,
  375,
  273,
  291,
  175,
  396,
  199,
  312,
  311,
  268,
  276,
  283,
  445,
  390,
  373,
  339,
  295,
  282,
  296,
  448,
  449,
  346,
  356,
  264,
  454,
  337,
  336,
  299,
  337,
  338,
  151,
  294,
  278,
  455,
  308,
  292,
  415,
  429,
  358,
  355,
  265,
  340,
  372,
  388,
  390,
  466,
  352,
  346,
  280,
  295,
  442,
  282,
  354,
  19,
  370,
  285,
  441,
  295,
  195,
  248,
  197,
  457,
  440,
  274,
  301,
  300,
  368,
  417,
  351,
  465,
  251,
  301,
  389,
  385,
  380,
  386,
  394,
  395,
  379,
  399,
  412,
  419,
  410,
  436,
  322,
  387,
  373,
  388,
  326,
  2,
  393,
  354,
  370,
  461,
  393,
  164,
  267,
  268,
  302,
  12,
  386,
  374,
  387,
  312,
  268,
  13,
  298,
  293,
  301,
  265,
  446,
  340,
  380,
  385,
  381,
  280,
  330,
  425,
  322,
  426,
  391,
  420,
  429,
  437,
  393,
  391,
  326,
  344,
  440,
  438,
  458,
  459,
  461,
  364,
  434,
  394,
  428,
  396,
  262,
  274,
  354,
  457,
  317,
  316,
  402,
  316,
  315,
  403,
  315,
  314,
  404,
  314,
  313,
  405,
  313,
  421,
  406,
  323,
  366,
  361,
  292,
  306,
  407,
  306,
  291,
  408,
  291,
  287,
  409,
  287,
  432,
  410,
  427,
  434,
  411,
  372,
  264,
  383,
  459,
  309,
  457,
  366,
  352,
  401,
  1,
  274,
  4,
  418,
  421,
  262,
  331,
  294,
  358,
  435,
  433,
  367,
  392,
  289,
  439,
  328,
  462,
  326,
  94,
  2,
  370,
  289,
  305,
  455,
  339,
  254,
  448,
  359,
  255,
  446,
  254,
  253,
  449,
  253,
  252,
  450,
  252,
  256,
  451,
  256,
  341,
  452,
  414,
  413,
  463,
  286,
  441,
  414,
  286,
  258,
  441,
  258,
  257,
  442,
  257,
  259,
  443,
  259,
  260,
  444,
  260,
  467,
  445,
  309,
  459,
  250,
  305,
  289,
  290,
  305,
  290,
  460,
  401,
  376,
  435,
  309,
  250,
  392,
  376,
  411,
  433,
  453,
  341,
  464,
  357,
  453,
  465,
  343,
  357,
  412,
  437,
  343,
  399,
  344,
  360,
  440,
  420,
  437,
  456,
  360,
  420,
  363,
  361,
  401,
  288,
  265,
  372,
  353,
  390,
  339,
  249,
  339,
  448,
  255
];
var VTX68 = [
  127,
  234,
  132,
  58,
  172,
  150,
  149,
  148,
  152,
  377,
  378,
  379,
  397,
  288,
  361,
  454,
  356,
  70,
  63,
  105,
  66,
  107,
  336,
  296,
  334,
  293,
  300,
  168,
  6,
  195,
  4,
  98,
  97,
  2,
  326,
  327,
  33,
  160,
  158,
  133,
  153,
  144,
  362,
  385,
  387,
  263,
  373,
  380,
  57,
  40,
  37,
  0,
  267,
  270,
  287,
  321,
  314,
  17,
  84,
  91,
  78,
  81,
  13,
  311,
  308,
  402,
  14,
  178
];
var VTX33 = [33, 133, 362, 263, 1, 62, 308, 159, 145, 386, 374, 6, 102, 331, 2, 13, 14, 70, 105, 107, 336, 334, 300, 54, 10, 284, 50, 280, 234, 454, 58, 288, 152];
var VTX7 = [33, 133, 362, 263, 1, 78, 308];
var UV68 = VTX68.map((x) => UV468[x]);
var UV33 = VTX33.map((x) => UV468[x]);
var UV7 = VTX7.map((x) => UV468[x]);
function connectionsToIndices(connections) {
  const indices = connections.map((connection) => connection[0]);
  indices.push(connections[connections.length - 1][1]);
  return indices;
}
var pairsLips = [
  [61, 146],
  [146, 91],
  [91, 181],
  [181, 84],
  [84, 17],
  [17, 314],
  [314, 405],
  [405, 321],
  [321, 375],
  [375, 291],
  [61, 185],
  [185, 40],
  [40, 39],
  [39, 37],
  [37, 0],
  [0, 267],
  [267, 269],
  [269, 270],
  [270, 409],
  [409, 291],
  [78, 95],
  [95, 88],
  [88, 178],
  [178, 87],
  [87, 14],
  [14, 317],
  [317, 402],
  [402, 318],
  [318, 324],
  [324, 308],
  [78, 191],
  [191, 80],
  [80, 81],
  [81, 82],
  [82, 13],
  [13, 312],
  [312, 311],
  [311, 310],
  [310, 415],
  [415, 308]
];
var pairsLeftEye = [[263, 249], [249, 390], [390, 373], [373, 374], [374, 380], [380, 381], [381, 382], [382, 362], [263, 466], [466, 388], [388, 387], [387, 386], [386, 385], [385, 384], [384, 398], [398, 362]];
var pairsLeftEyebrow = [[276, 283], [283, 282], [282, 295], [295, 285], [300, 293], [293, 334], [334, 296], [296, 336]];
var pairsLeftIris = [[474, 475], [475, 476], [476, 477], [477, 474]];
var pairsRightEye = [[33, 7], [7, 163], [163, 144], [144, 145], [145, 153], [153, 154], [154, 155], [155, 133], [33, 246], [246, 161], [161, 160], [160, 159], [159, 158], [158, 157], [157, 173], [173, 133]];
var pairsRightEyebrow = [[46, 53], [53, 52], [52, 65], [65, 55], [70, 63], [63, 105], [105, 66], [66, 107]];
var pairsRightIris = [[469, 470], [470, 471], [471, 472], [472, 469]];
var pairsFaceContour = [
  [10, 338],
  [338, 297],
  [297, 332],
  [332, 284],
  [284, 251],
  [251, 389],
  [389, 356],
  [356, 454],
  [454, 323],
  [323, 361],
  [361, 288],
  [288, 397],
  [397, 365],
  [365, 379],
  [379, 378],
  [378, 400],
  [400, 377],
  [377, 152],
  [152, 148],
  [148, 176],
  [176, 149],
  [149, 150],
  [150, 136],
  [136, 172],
  [172, 58],
  [58, 132],
  [132, 93],
  [93, 234],
  [234, 127],
  [127, 162],
  [162, 21],
  [21, 54],
  [54, 103],
  [103, 67],
  [67, 109],
  [109, 10]
];
var contourKeypoints = {
  lips: connectionsToIndices(pairsLips),
  leftEye: connectionsToIndices(pairsLeftEye),
  leftEyebrow: connectionsToIndices(pairsLeftEyebrow),
  leftIris: connectionsToIndices(pairsLeftIris),
  rightEye: connectionsToIndices(pairsRightEye),
  rightEyebrow: connectionsToIndices(pairsRightEyebrow),
  rightIris: connectionsToIndices(pairsRightIris),
  faceOval: connectionsToIndices(pairsFaceContour)
};

// src/face/facemeshutil.ts
var getBoxSize = (box) => [Math.abs(box.endPoint[0] - box.startPoint[0]), Math.abs(box.endPoint[1] - box.startPoint[1])];
var getBoxCenter = (box) => [box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2, box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2, 1];
var clampBox = (box, input) => box ? [
  Math.trunc(Math.max(0, box.startPoint[0])),
  Math.trunc(Math.max(0, box.startPoint[1])),
  Math.trunc(Math.min(input.shape[2] || 0, box.endPoint[0]) - Math.max(0, box.startPoint[0])),
  Math.trunc(Math.min(input.shape[1] || 0, box.endPoint[1]) - Math.max(0, box.startPoint[1]))
] : [0, 0, 0, 0];
var getRawBox = (box, input) => box ? [
  box.startPoint[0] / (input.shape[2] || 0),
  box.startPoint[1] / (input.shape[1] || 0),
  (box.endPoint[0] - box.startPoint[0]) / (input.shape[2] || 0),
  (box.endPoint[1] - box.startPoint[1]) / (input.shape[1] || 0)
] : [0, 0, 0, 0];
var scaleBoxCoordinates = (box, factor) => {
  const startPoint = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]];
  const endPoint = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]];
  return { startPoint, endPoint, landmarks: box.landmarks, confidence: box.confidence };
};
var cutAndResize = (box, image, cropSize) => {
  const h = image.shape[1];
  const w10 = image.shape[2];
  const cutBox = [box.startPoint[1] / h, box.startPoint[0] / w10, box.endPoint[1] / h, box.endPoint[0] / w10];
  const crop = jn.cropAndResize(image, [cutBox], [0], cropSize);
  const norm = xe(crop, constants.tf255);
  Re(crop);
  return norm;
};
var enlargeBox = (box, factor) => {
  const center = getBoxCenter(box);
  const size2 = getBoxSize(box);
  const halfSize = [factor * size2[0] / 2, factor * size2[1] / 2];
  return { startPoint: [center[0] - halfSize[0], center[1] - halfSize[1]], endPoint: [center[0] + halfSize[0], center[1] + halfSize[1]], landmarks: box.landmarks, confidence: box.confidence };
};
var squarifyBox = (box) => {
  const centers = getBoxCenter(box);
  const size2 = getBoxSize(box);
  const halfSize = Math.max(...size2) / 2;
  return { startPoint: [Math.round(centers[0] - halfSize), Math.round(centers[1] - halfSize)], endPoint: [Math.round(centers[0] + halfSize), Math.round(centers[1] + halfSize)], landmarks: box.landmarks, confidence: box.confidence };
};
var calculateLandmarksBoundingBox = (landmarks) => {
  const x = landmarks.map((d) => d[0]);
  const y = landmarks.map((d) => d[1]);
  return { startPoint: [Math.min(...x), Math.min(...y)], endPoint: [Math.max(...x), Math.max(...y)], landmarks };
};
var fixedRotationMatrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
var normalizeRadians = (angle) => angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));
var computeRotation = (point1, point2) => normalizeRadians(Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]));
var buildTranslationMatrix = (x, y) => [[1, 0, x], [0, 1, y], [0, 0, 1]];
var dot = (v12, v22) => {
  let product = 0;
  for (let i = 0; i < v12.length; i++)
    product += v12[i] * v22[i];
  return product;
};
var getColumnFrom2DArr = (arr, columnIndex) => {
  const column = [];
  for (let i = 0; i < arr.length; i++)
    column.push(arr[i][columnIndex]);
  return column;
};
var multiplyTransformMatrices = (mat1, mat2) => {
  const product = [];
  const size2 = mat1.length;
  for (let row = 0; row < size2; row++) {
    product.push([]);
    for (let col = 0; col < size2; col++)
      product[row].push(dot(mat1[row], getColumnFrom2DArr(mat2, col)));
  }
  return product;
};
var buildRotationMatrix = (rotation, center) => {
  const cosA = Math.cos(rotation);
  const sinA = Math.sin(rotation);
  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];
  const translationMatrix = buildTranslationMatrix(center[0], center[1]);
  const translationTimesRotation = multiplyTransformMatrices(translationMatrix, rotationMatrix);
  const negativeTranslationMatrix = buildTranslationMatrix(-center[0], -center[1]);
  return multiplyTransformMatrices(translationTimesRotation, negativeTranslationMatrix);
};
var invertTransformMatrix = (matrix) => {
  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];
  const translationComponent = [matrix[0][2], matrix[1][2]];
  const invertedTranslation = [-dot(rotationComponent[0], translationComponent), -dot(rotationComponent[1], translationComponent)];
  return [rotationComponent[0].concat(invertedTranslation[0]), rotationComponent[1].concat(invertedTranslation[1]), [0, 0, 1]];
};
var rotatePoint = (homogeneousCoordinate, rotationMatrix) => [dot(homogeneousCoordinate, rotationMatrix[0]), dot(homogeneousCoordinate, rotationMatrix[1])];
function generateAnchors(inputSize10) {
  const spec = { strides: [inputSize10 / 16, inputSize10 / 8], anchors: [2, 6] };
  const anchors3 = [];
  for (let i = 0; i < spec.strides.length; i++) {
    const stride = spec.strides[i];
    const gridRows = Math.floor((inputSize10 + stride - 1) / stride);
    const gridCols = Math.floor((inputSize10 + stride - 1) / stride);
    const anchorsNum = spec.anchors[i];
    for (let gridY = 0; gridY < gridRows; gridY++) {
      const anchorY = stride * (gridY + 0.5);
      for (let gridX = 0; gridX < gridCols; gridX++) {
        const anchorX = stride * (gridX + 0.5);
        for (let n = 0; n < anchorsNum; n++)
          anchors3.push([anchorX, anchorY]);
      }
    }
  }
  return anchors3;
}
function transformRawCoords(coordsRaw, box, angle, rotationMatrix, inputSize10) {
  const boxSize = getBoxSize(box);
  const coordsScaled = coordsRaw.map((coord) => [
    boxSize[0] / inputSize10 * (coord[0] - inputSize10 / 2),
    boxSize[1] / inputSize10 * (coord[1] - inputSize10 / 2),
    coord[2] || 0
  ]);
  const largeAngle = angle && angle !== 0 && Math.abs(angle) > 0.2;
  const coordsRotationMatrix = largeAngle ? buildRotationMatrix(angle, [0, 0]) : fixedRotationMatrix;
  const coordsRotated = largeAngle ? coordsScaled.map((coord) => [...rotatePoint(coord, coordsRotationMatrix), coord[2]]) : coordsScaled;
  const inverseRotationMatrix = largeAngle ? invertTransformMatrix(rotationMatrix) : fixedRotationMatrix;
  const boxCenter = getBoxCenter(box);
  const offsets = [dot(boxCenter, inverseRotationMatrix[0]), dot(boxCenter, inverseRotationMatrix[1])];
  return coordsRotated.map((coord) => [
    Math.trunc(coord[0] + offsets[0]),
    Math.trunc(coord[1] + offsets[1]),
    Math.trunc(coord[2] || 0)
  ]);
}
function correctFaceRotation(rotate, box, input, inputSize10) {
  const symmetryLine = box.landmarks.length >= meshLandmarks.count ? meshLandmarks.symmetryLine : blazeFaceLandmarks.symmetryLine;
  let angle = 0;
  let rotationMatrix = fixedRotationMatrix;
  let face4;
  if (rotate && env.kernels.includes("rotatewithoffset")) {
    angle = computeRotation(box.landmarks[symmetryLine[0]], box.landmarks[symmetryLine[1]]);
    const largeAngle = angle && angle !== 0 && Math.abs(angle) > 0.2;
    if (largeAngle) {
      const center = getBoxCenter(box);
      const centerRaw = [center[0] / input.shape[2], center[1] / input.shape[1]];
      const rotated = jn.rotateWithOffset(input, angle, 0, centerRaw);
      rotationMatrix = buildRotationMatrix(-angle, center);
      face4 = cutAndResize(box, rotated, [inputSize10, inputSize10]);
      Re(rotated);
    } else {
      face4 = cutAndResize(box, input, [inputSize10, inputSize10]);
    }
  } else {
    face4 = cutAndResize(box, input, [inputSize10, inputSize10]);
  }
  return [angle, rotationMatrix, face4];
}
var findFaceCenter = (mesh) => {
  const x = mesh.map((m) => m[0]);
  const y = mesh.map((m) => m[1]);
  return [Math.min(...x) + (Math.max(...x) - Math.min(...x)) / 2, Math.min(...y) + (Math.max(...y) - Math.min(...y)) / 2];
};
var calculateFaceBox = (mesh, previousBox) => {
  const center = findFaceCenter(mesh);
  const boxSize = getBoxSize(previousBox);
  const calculatedBox = {
    startPoint: [center[0] - boxSize[0] / 2, center[1] - boxSize[1] / 2],
    endPoint: [center[0] + boxSize[0] / 2, center[1] + boxSize[1] / 2]
  };
  return calculatedBox;
};

// src/face/blazeface.ts
var keypointsCount = 6;
var faceBoxScaleFactor = 1.4;
var model5;
var anchors = null;
var inputSize = 0;
var inputSizeT = null;
var size = () => inputSize;
async function load5(config3) {
  var _a2;
  if (env.initial)
    model5 = null;
  if (!model5)
    model5 = await loadModel((_a2 = config3.face.detector) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model5["modelUrl"]);
  inputSize = model5.inputs[0].shape ? model5.inputs[0].shape[2] : 0;
  inputSizeT = we(inputSize, "int32");
  anchors = Yi(generateAnchors(inputSize));
  return model5;
}
function decodeBounds(boxOutputs) {
  const t = {};
  t.boxStarts = qe(boxOutputs, [0, 1], [-1, 2]);
  t.centers = ie(t.boxStarts, anchors);
  t.boxSizes = qe(boxOutputs, [0, 3], [-1, 2]);
  t.boxSizesNormalized = xe(t.boxSizes, inputSizeT);
  t.centersNormalized = xe(t.centers, inputSizeT);
  t.halfBoxSize = xe(t.boxSizesNormalized, constants.tf2);
  t.starts = ge(t.centersNormalized, t.halfBoxSize);
  t.ends = ie(t.centersNormalized, t.halfBoxSize);
  t.startNormalized = V(t.starts, inputSizeT);
  t.endNormalized = V(t.ends, inputSizeT);
  const boxes = KE([t.startNormalized, t.endNormalized], 1);
  Object.keys(t).forEach((tensor) => Re(t[tensor]));
  return boxes;
}
async function getBoxes(inputImage, config3) {
  var _a2, _b2, _c, _d2;
  if (!inputImage || inputImage["isDisposedInternal"] || inputImage.shape.length !== 4 || inputImage.shape[1] < 1 || inputImage.shape[2] < 1)
    return [];
  const t = {};
  t.resized = jn.resizeBilinear(inputImage, [inputSize, inputSize]);
  t.div = xe(t.resized, constants.tf127);
  t.normalized = ge(t.div, constants.tf05);
  const res = model5 == null ? void 0 : model5.execute(t.normalized);
  if (Array.isArray(res)) {
    const sorted = res.sort((a, b) => a.size - b.size);
    t.concat384 = Ft([sorted[0], sorted[2]], 2);
    t.concat512 = Ft([sorted[1], sorted[3]], 2);
    t.concat = Ft([t.concat512, t.concat384], 1);
    t.batch = gr(t.concat, 0);
  } else {
    t.batch = gr(res);
  }
  Re(res);
  t.boxes = decodeBounds(t.batch);
  t.logits = qe(t.batch, [0, 0], [-1, 1]);
  t.sigmoid = qs(t.logits);
  t.scores = gr(t.sigmoid);
  t.nms = await jn.nonMaxSuppressionAsync(t.boxes, t.scores, ((_a2 = config3.face.detector) == null ? void 0 : _a2.maxDetected) || 0, ((_b2 = config3.face.detector) == null ? void 0 : _b2.iouThreshold) || 0, ((_c = config3.face.detector) == null ? void 0 : _c.minConfidence) || 0);
  const nms = await t.nms.array();
  const boxes = [];
  const scores = await t.scores.data();
  for (let i = 0; i < nms.length; i++) {
    const confidence = scores[nms[i]];
    if (confidence > (((_d2 = config3.face.detector) == null ? void 0 : _d2.minConfidence) || 0)) {
      const b = {};
      b.bbox = qe(t.boxes, [nms[i], 0], [1, -1]);
      b.slice = qe(t.batch, [nms[i], keypointsCount - 1], [1, -1]);
      b.squeeze = gr(b.slice);
      b.landmarks = G(b.squeeze, [keypointsCount, -1]);
      const points = await b.bbox.data();
      const rawBox = {
        startPoint: [points[0], points[1]],
        endPoint: [points[2], points[3]],
        landmarks: await b.landmarks.array(),
        confidence
      };
      const scaledBox = scaleBoxCoordinates(rawBox, [(inputImage.shape[2] || 0) / inputSize, (inputImage.shape[1] || 0) / inputSize]);
      const enlargedBox = enlargeBox(scaledBox, config3.face["scale"] || faceBoxScaleFactor);
      const squaredBox = squarifyBox(enlargedBox);
      boxes.push(squaredBox);
      Object.keys(b).forEach((tensor) => Re(b[tensor]));
    }
  }
  Object.keys(t).forEach((tensor) => Re(t[tensor]));
  return boxes;
}

// src/body/blazeposecoords.ts
var blazeposecoords_exports = {};
__export(blazeposecoords_exports, {
  connected: () => connected,
  kpt: () => kpt
});
var kpt = [
  "nose",
  "leftEyeInside",
  "leftEye",
  "leftEyeOutside",
  "rightEyeInside",
  "rightEye",
  "rightEyeOutside",
  "leftEar",
  "rightEar",
  "leftMouth",
  "rightMouth",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "leftWrist",
  "rightWrist",
  "leftPinky",
  "rightPinky",
  "leftIndex",
  "rightIndex",
  "leftThumb",
  "rightThumb",
  "leftHip",
  "rightHip",
  "leftKnee",
  "rightKnee",
  "leftAnkle",
  "rightAnkle",
  "leftHeel",
  "rightHeel",
  "leftFoot",
  "rightFoot",
  "bodyCenter",
  "bodyTop",
  "leftPalm",
  "leftHand",
  "rightPalm",
  "rightHand"
];
var connected = {
  shoulders: ["leftShoulder", "rightShoulder"],
  hips: ["rightHip", "leftHip"],
  mouth: ["leftMouth", "rightMouth"],
  leftLegUpper: ["leftHip", "leftKnee"],
  leftLegLower: ["leftKnee", "leftAnkle"],
  leftFoot: ["leftAnkle", "leftHeel", "leftFoot"],
  leftTorso: ["leftShoulder", "leftHip"],
  leftArmUpper: ["leftShoulder", "leftElbow"],
  leftArmLower: ["leftElbow", "leftWrist"],
  leftHand: ["leftWrist", "leftPalm"],
  leftHandPinky: ["leftPalm", "leftPinky"],
  leftHandIndex: ["leftPalm", "leftIndex"],
  leftHandThumb: ["leftPalm", "leftThumb"],
  leftEyeOutline: ["leftEyeInside", "leftEyeOutside"],
  rightLegUpper: ["rightHip", "rightKnee"],
  rightLegLower: ["rightKnee", "rightAnkle"],
  rightFoot: ["rightAnkle", "rightHeel", "rightFoot"],
  rightTorso: ["rightShoulder", "rightHip"],
  rightArmUpper: ["rightShoulder", "rightElbow"],
  rightArmLower: ["rightElbow", "rightWrist"],
  rightHand: ["rightWrist", "rightPalm"],
  rightHandPinky: ["rightPalm", "rightPinky"],
  rightHandIndex: ["rightPalm", "rightIndex"],
  rightHandThumb: ["rightPalm", "rightThumb"],
  rightEyeOutline: ["rightEyeInside", "rightEyeOutside"]
};

// src/body/blazeposedetector.ts
var inputSize2 = 224;
var anchorTensor;
var numLayers = 5;
var strides = [8, 16, 32, 32, 32];
async function createAnchors() {
  const anchors3 = [];
  let layerId = 0;
  while (layerId < numLayers) {
    let anchorCount = 0;
    let lastSameStrideLayer = layerId;
    while (lastSameStrideLayer < strides.length && strides[lastSameStrideLayer] === strides[layerId]) {
      anchorCount += 2;
      lastSameStrideLayer++;
    }
    const stride = strides[layerId];
    const featureMapHeight = Math.ceil(inputSize2 / stride);
    const featureMapWidth = Math.ceil(inputSize2 / stride);
    for (let y = 0; y < featureMapHeight; ++y) {
      for (let x = 0; x < featureMapWidth; ++x) {
        for (let anchorId = 0; anchorId < anchorCount; ++anchorId) {
          anchors3.push({ x: (x + 0.5) / featureMapWidth, y: (y + 0.5) / featureMapHeight });
        }
      }
    }
    layerId = lastSameStrideLayer;
  }
  anchorTensor = { x: Qt(anchors3.map((a) => a.x)), y: Qt(anchors3.map((a) => a.y)) };
}

// src/util/box.ts
function calc(keypoints, outputSize2 = [1, 1]) {
  const coords = [keypoints.map((pt2) => pt2[0]), keypoints.map((pt2) => pt2[1])];
  const min = [Math.min(...coords[0]), Math.min(...coords[1])];
  const max = [Math.max(...coords[0]), Math.max(...coords[1])];
  const box = [min[0], min[1], max[0] - min[0], max[1] - min[1]];
  const boxRaw = [box[0] / outputSize2[0], box[1] / outputSize2[1], box[2] / outputSize2[0], box[3] / outputSize2[1]];
  return { box, boxRaw };
}
function square(keypoints, outputSize2 = [1, 1]) {
  const coords = [keypoints.map((pt2) => pt2[0]), keypoints.map((pt2) => pt2[1])];
  const min = [Math.min(...coords[0]), Math.min(...coords[1])];
  const max = [Math.max(...coords[0]), Math.max(...coords[1])];
  const center = [(min[0] + max[0]) / 2, (min[1] + max[1]) / 2];
  const dist = Math.max(center[0] - min[0], center[1] - min[1], -center[0] + max[0], -center[1] + max[1]);
  const box = [Math.trunc(center[0] - dist), Math.trunc(center[1] - dist), Math.trunc(2 * dist), Math.trunc(2 * dist)];
  const boxRaw = [box[0] / outputSize2[0], box[1] / outputSize2[1], box[2] / outputSize2[0], box[3] / outputSize2[1]];
  return { box, boxRaw };
}
function scale(box, scaleFact) {
  const dist = [box[2] * scaleFact, box[3] * scaleFact];
  const newBox = [
    box[0] - (dist[0] - box[2]) / 2,
    box[1] - (dist[1] - box[3]) / 2,
    dist[0],
    dist[1]
  ];
  return newBox;
}

// src/body/blazepose.ts
var env2 = { initial: true };
var models = { detector: null, landmarks: null };
var inputSize3 = { detector: [224, 224], landmarks: [256, 256] };
var skipped5 = Number.MAX_SAFE_INTEGER;
var outputNodes = {
  landmarks: ["ld_3d", "activation_segmentation", "activation_heatmap", "world_3d", "output_poseflag"],
  detector: []
};
var cache = null;
var cropBox;
var padding = [[0, 0], [0, 0], [0, 0], [0, 0]];
var lastTime5 = 0;
var sigmoid = (x) => 1 - 1 / (1 + Math.exp(x));
async function loadDetect(config3) {
  if (env2.initial)
    models.detector = null;
  if (!models.detector && config3.body["detector"] && config3.body["detector"]["modelPath"] || "") {
    models.detector = await loadModel(config3.body["detector"]["modelPath"]);
    const inputs = Object.values(models.detector.modelSignature["inputs"]);
    inputSize3.detector[0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
    inputSize3.detector[1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug && models.detector)
    log("cached model:", models.detector["modelUrl"]);
  await createAnchors();
  return models.detector;
}
async function loadPose(config3) {
  if (env2.initial)
    models.landmarks = null;
  if (!models.landmarks) {
    models.landmarks = await loadModel(config3.body.modelPath);
    const inputs = Object.values(models.landmarks.modelSignature["inputs"]);
    inputSize3.landmarks[0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
    inputSize3.landmarks[1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", models.landmarks["modelUrl"]);
  return models.landmarks;
}
async function prepareImage(input, size2) {
  const t = {};
  if (!input.shape || !input.shape[1] || !input.shape[2])
    return input;
  let final;
  if (cropBox) {
    t.cropped = jn.cropAndResize(input, [cropBox], [0], [input.shape[1], input.shape[2]]);
  }
  if (input.shape[1] !== input.shape[2]) {
    const height = [
      input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0,
      input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0
    ];
    const width = [
      input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0,
      input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0
    ];
    padding = [
      [0, 0],
      height,
      width,
      [0, 0]
    ];
    t.pad = bi(t.cropped || input, padding);
    t.resize = jn.resizeBilinear(t.pad, [size2, size2]);
    final = xe(t.resize, constants.tf255);
  } else if (input.shape[1] !== size2) {
    t.resize = jn.resizeBilinear(t.cropped || input, [size2, size2]);
    final = xe(t.resize, constants.tf255);
  } else {
    final = xe(t.cropped || input, constants.tf255);
  }
  Object.keys(t).forEach((tensor) => Re(t[tensor]));
  return final;
}
function rescaleKeypoints(keypoints, outputSize2) {
  for (const kpt4 of keypoints) {
    kpt4.position = [
      Math.trunc(kpt4.position[0] * (outputSize2[0] + padding[2][0] + padding[2][1]) / outputSize2[0] - padding[2][0]),
      Math.trunc(kpt4.position[1] * (outputSize2[1] + padding[1][0] + padding[1][1]) / outputSize2[1] - padding[1][0]),
      kpt4.position[2]
    ];
    kpt4.positionRaw = [kpt4.position[0] / outputSize2[0], kpt4.position[1] / outputSize2[1], 2 * kpt4.position[2] / (outputSize2[0] + outputSize2[1])];
  }
  if (cropBox) {
    for (const kpt4 of keypoints) {
      kpt4.positionRaw = [
        kpt4.positionRaw[0] + cropBox[1],
        kpt4.positionRaw[1] + cropBox[0],
        kpt4.positionRaw[2]
      ];
      kpt4.position = [
        Math.trunc(kpt4.positionRaw[0] * outputSize2[0]),
        Math.trunc(kpt4.positionRaw[1] * outputSize2[1]),
        kpt4.positionRaw[2]
      ];
    }
  }
  return keypoints;
}
async function fixKeypoints(keypoints) {
  const leftPalm = keypoints.find((k) => k.part === "leftPalm");
  const leftWrist = keypoints.find((k) => k.part === "leftWrist");
  const leftIndex = keypoints.find((k) => k.part === "leftIndex");
  leftPalm.position[2] = ((leftWrist.position[2] || 0) + (leftIndex.position[2] || 0)) / 2;
  const rightPalm = keypoints.find((k) => k.part === "rightPalm");
  const rightWrist = keypoints.find((k) => k.part === "rightWrist");
  const rightIndex = keypoints.find((k) => k.part === "rightIndex");
  rightPalm.position[2] = ((rightWrist.position[2] || 0) + (rightIndex.position[2] || 0)) / 2;
}
async function detectLandmarks(input, config3, outputSize2) {
  var _a2;
  const t = {};
  [t.ld, t.segmentation, t.heatmap, t.world, t.poseflag] = (_a2 = models.landmarks) == null ? void 0 : _a2.execute(input, outputNodes.landmarks);
  const poseScore = (await t.poseflag.data())[0];
  const points = await t.ld.data();
  const distances = await t.world.data();
  Object.keys(t).forEach((tensor) => Re(t[tensor]));
  const keypointsRelative = [];
  const depth = 5;
  for (let i = 0; i < points.length / depth; i++) {
    const score = sigmoid(points[depth * i + 3]);
    const presence = sigmoid(points[depth * i + 4]);
    const adjScore = Math.trunc(100 * score * presence * poseScore) / 100;
    const positionRaw = [points[depth * i + 0] / inputSize3.landmarks[0], points[depth * i + 1] / inputSize3.landmarks[1], points[depth * i + 2] + 0];
    const position = [Math.trunc(outputSize2[0] * positionRaw[0]), Math.trunc(outputSize2[1] * positionRaw[1]), positionRaw[2]];
    const distance2 = [distances[depth * i + 0], distances[depth * i + 1], distances[depth * i + 2] + 0];
    keypointsRelative.push({ part: kpt[i], positionRaw, position, distance: distance2, score: adjScore });
  }
  if (poseScore < (config3.body.minConfidence || 0))
    return null;
  fixKeypoints(keypointsRelative);
  const keypoints = rescaleKeypoints(keypointsRelative, outputSize2);
  const kpts = keypoints.map((k) => k.position);
  const boxes = calc(kpts, [outputSize2[0], outputSize2[1]]);
  const annotations2 = {};
  for (const [name, indexes] of Object.entries(connected)) {
    const pt2 = [];
    for (let i = 0; i < indexes.length - 1; i++) {
      const pt0 = keypoints.find((kpt4) => kpt4.part === indexes[i]);
      const pt1 = keypoints.find((kpt4) => kpt4.part === indexes[i + 1]);
      if (pt0 && pt1)
        pt2.push([pt0.position, pt1.position]);
    }
    annotations2[name] = pt2;
  }
  const body4 = { id: 0, score: Math.trunc(100 * poseScore) / 100, box: boxes.box, boxRaw: boxes.boxRaw, keypoints, annotations: annotations2 };
  return body4;
}
async function predict5(input, config3) {
  const outputSize2 = [input.shape[2] || 0, input.shape[1] || 0];
  const skipTime = (config3.body.skipTime || 0) > now() - lastTime5;
  const skipFrame = skipped5 < (config3.body.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && cache !== null) {
    skipped5++;
  } else {
    const t = {};
    t.landmarks = await prepareImage(input, 256);
    cache = await detectLandmarks(t.landmarks, config3, outputSize2);
    Object.keys(t).forEach((tensor) => Re(t[tensor]));
    lastTime5 = now();
    skipped5 = 0;
  }
  return cache ? [cache] : [];
}

// src/object/labels.ts
var labels = [
  { class: 1, label: "person" },
  { class: 2, label: "bicycle" },
  { class: 3, label: "car" },
  { class: 4, label: "motorcycle" },
  { class: 5, label: "airplane" },
  { class: 6, label: "bus" },
  { class: 7, label: "train" },
  { class: 8, label: "truck" },
  { class: 9, label: "boat" },
  { class: 10, label: "traffic light" },
  { class: 11, label: "fire hydrant" },
  { class: 12, label: "stop sign" },
  { class: 13, label: "parking meter" },
  { class: 14, label: "bench" },
  { class: 15, label: "bird" },
  { class: 16, label: "cat" },
  { class: 17, label: "dog" },
  { class: 18, label: "horse" },
  { class: 19, label: "sheep" },
  { class: 20, label: "cow" },
  { class: 21, label: "elephant" },
  { class: 22, label: "bear" },
  { class: 23, label: "zebra" },
  { class: 24, label: "giraffe" },
  { class: 25, label: "backpack" },
  { class: 26, label: "umbrella" },
  { class: 27, label: "handbag" },
  { class: 28, label: "tie" },
  { class: 29, label: "suitcase" },
  { class: 30, label: "frisbee" },
  { class: 31, label: "skis" },
  { class: 32, label: "snowboard" },
  { class: 33, label: "sports ball" },
  { class: 34, label: "kite" },
  { class: 35, label: "baseball bat" },
  { class: 36, label: "baseball glove" },
  { class: 37, label: "skateboard" },
  { class: 38, label: "surfboard" },
  { class: 39, label: "tennis racket" },
  { class: 40, label: "bottle" },
  { class: 41, label: "wine glass" },
  { class: 42, label: "cup" },
  { class: 43, label: "fork" },
  { class: 44, label: "knife" },
  { class: 45, label: "spoon" },
  { class: 46, label: "bowl" },
  { class: 47, label: "banana" },
  { class: 48, label: "apple" },
  { class: 49, label: "sandwich" },
  { class: 50, label: "orange" },
  { class: 51, label: "broccoli" },
  { class: 52, label: "carrot" },
  { class: 53, label: "hot dog" },
  { class: 54, label: "pizza" },
  { class: 55, label: "donut" },
  { class: 56, label: "cake" },
  { class: 57, label: "chair" },
  { class: 58, label: "couch" },
  { class: 59, label: "potted plant" },
  { class: 60, label: "bed" },
  { class: 61, label: "dining table" },
  { class: 62, label: "toilet" },
  { class: 63, label: "tv" },
  { class: 64, label: "laptop" },
  { class: 65, label: "mouse" },
  { class: 66, label: "remote" },
  { class: 67, label: "keyboard" },
  { class: 68, label: "cell phone" },
  { class: 69, label: "microwave" },
  { class: 70, label: "oven" },
  { class: 71, label: "toaster" },
  { class: 72, label: "sink" },
  { class: 73, label: "refrigerator" },
  { class: 74, label: "book" },
  { class: 75, label: "clock" },
  { class: 76, label: "vase" },
  { class: 77, label: "scissors" },
  { class: 78, label: "teddy bear" },
  { class: 79, label: "hair drier" },
  { class: 80, label: "toothbrush" }
];

// src/object/centernet.ts
var model6;
var inputSize4 = 0;
var last5 = [];
var lastTime6 = 0;
var skipped6 = Number.MAX_SAFE_INTEGER;
async function load6(config3) {
  if (env.initial)
    model6 = null;
  if (!model6) {
    model6 = await loadModel(config3.object.modelPath);
    const inputs = Object.values(model6.modelSignature["inputs"]);
    inputSize4 = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", model6["modelUrl"]);
  return model6;
}
async function process3(res, outputShape, config3) {
  if (!res)
    return [];
  const t = {};
  const results = [];
  const detections = await res.array();
  t.squeeze = gr(res);
  const arr = Bn(t.squeeze, 6, 1);
  t.stack = es([arr[1], arr[0], arr[3], arr[2]], 1);
  t.boxes = gr(t.stack);
  t.scores = gr(arr[4]);
  t.classes = gr(arr[5]);
  Re([res, ...arr]);
  t.nms = await jn.nonMaxSuppressionAsync(t.boxes, t.scores, config3.object.maxDetected, config3.object.iouThreshold, config3.object.minConfidence || 0);
  const nms = await t.nms.data();
  let i = 0;
  for (const id2 of Array.from(nms)) {
    const score = Math.trunc(100 * detections[0][id2][4]) / 100;
    const classVal = detections[0][id2][5];
    const label = labels[classVal].label;
    const [x, y] = [
      detections[0][id2][0] / inputSize4,
      detections[0][id2][1] / inputSize4
    ];
    const boxRaw = [
      x,
      y,
      detections[0][id2][2] / inputSize4 - x,
      detections[0][id2][3] / inputSize4 - y
    ];
    const box = [
      Math.trunc(boxRaw[0] * outputShape[0]),
      Math.trunc(boxRaw[1] * outputShape[1]),
      Math.trunc(boxRaw[2] * outputShape[0]),
      Math.trunc(boxRaw[3] * outputShape[1])
    ];
    results.push({ id: i++, score, class: classVal, label, box, boxRaw });
  }
  Object.keys(t).forEach((tensor) => Re(t[tensor]));
  return results;
}
async function predict6(input, config3) {
  const skipTime = (config3.object.skipTime || 0) > now() - lastTime6;
  const skipFrame = skipped6 < (config3.object.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && last5.length > 0) {
    skipped6++;
    return last5;
  }
  skipped6 = 0;
  return new Promise(async (resolve) => {
    const outputSize2 = [input.shape[2] || 0, input.shape[1] || 0];
    const resize = jn.resizeBilinear(input, [inputSize4, inputSize4]);
    const objectT = config3.object.enabled ? model6 == null ? void 0 : model6.execute(resize, ["tower_0/detections"]) : null;
    lastTime6 = now();
    Re(resize);
    const obj = await process3(objectT, outputSize2, config3);
    last5 = obj;
    resolve(obj);
  });
}

// src/body/efficientposecoords.ts
var efficientposecoords_exports = {};
__export(efficientposecoords_exports, {
  connected: () => connected2,
  kpt: () => kpt2
});
var kpt2 = [
  "head",
  "neck",
  "rightShoulder",
  "rightElbow",
  "rightWrist",
  "chest",
  "leftShoulder",
  "leftElbow",
  "leftWrist",
  "bodyCenter",
  "rightHip",
  "rightKnee",
  "rightAnkle",
  "leftHip",
  "leftKnee",
  "leftAnkle"
];
var connected2 = {
  leftLeg: ["leftHip", "leftKnee", "leftAnkle"],
  rightLeg: ["rightHip", "rightKnee", "rightAnkle"],
  torso: ["leftShoulder", "rightShoulder", "rightHip", "leftHip", "leftShoulder"],
  leftArm: ["leftShoulder", "leftElbow", "leftWrist"],
  rightArm: ["rightShoulder", "rightElbow", "rightWrist"],
  head: []
};

// src/body/efficientpose.ts
var model7;
var lastTime7 = 0;
var cache2 = { id: 0, keypoints: [], box: [0, 0, 0, 0], boxRaw: [0, 0, 0, 0], score: 0, annotations: {} };
var skipped7 = Number.MAX_SAFE_INTEGER;
async function load7(config3) {
  if (env.initial)
    model7 = null;
  if (!model7)
    model7 = await loadModel(config3.body.modelPath);
  else if (config3.debug)
    log("cached model:", model7["modelUrl"]);
  return model7;
}
async function max2d(inputs, minScore) {
  const [width, height] = inputs.shape;
  const reshaped = G(inputs, [height * width]);
  const max = As(reshaped, 0);
  const newScore = (await max.data())[0];
  Re([reshaped, max]);
  if (newScore > minScore) {
    const coordinates = qu(reshaped, 0);
    const mod = ND(coordinates, width);
    const x = (await mod.data())[0];
    const div = xe(coordinates, we(width, "int32"));
    const y = (await div.data())[0];
    Re([mod, div]);
    return [x, y, newScore];
  }
  return [0, 0, newScore];
}
async function predict7(image, config3) {
  const skipTime = (config3.body.skipTime || 0) > now() - lastTime7;
  const skipFrame = skipped7 < (config3.body.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && Object.keys(cache2.keypoints).length > 0) {
    skipped7++;
    return [cache2];
  }
  skipped7 = 0;
  return new Promise(async (resolve) => {
    var _a2;
    const tensor = j(() => {
      if (!(model7 == null ? void 0 : model7.inputs[0].shape))
        return null;
      const resize = jn.resizeBilinear(image, [model7.inputs[0].shape[2], model7.inputs[0].shape[1]], false);
      const enhance2 = V(resize, constants.tf2);
      const norm = ge(enhance2, constants.tf1);
      return norm;
    });
    let resT;
    if (config3.body.enabled)
      resT = model7 == null ? void 0 : model7.execute(tensor);
    lastTime7 = now();
    Re(tensor);
    if (resT) {
      cache2.keypoints.length = 0;
      const squeeze = resT.squeeze();
      Re(resT);
      const stack = squeeze.unstack(2);
      Re(squeeze);
      for (let id2 = 0; id2 < stack.length; id2++) {
        const [x10, y10, partScore] = await max2d(stack[id2], config3.body.minConfidence);
        if (partScore > (((_a2 = config3.body) == null ? void 0 : _a2.minConfidence) || 0)) {
          cache2.keypoints.push({
            score: Math.round(100 * partScore) / 100,
            part: kpt2[id2],
            positionRaw: [
              x10 / model7.inputs[0].shape[2],
              y10 / model7.inputs[0].shape[1]
            ],
            position: [
              Math.round(image.shape[2] * x10 / model7.inputs[0].shape[2]),
              Math.round(image.shape[1] * y10 / model7.inputs[0].shape[1])
            ]
          });
        }
      }
      stack.forEach((s) => Re(s));
    }
    cache2.score = cache2.keypoints.reduce((prev, curr) => curr.score > prev ? curr.score : prev, 0);
    const x = cache2.keypoints.map((a) => a.position[0]);
    const y = cache2.keypoints.map((a) => a.position[1]);
    cache2.box = [
      Math.min(...x),
      Math.min(...y),
      Math.max(...x) - Math.min(...x),
      Math.max(...y) - Math.min(...y)
    ];
    const xRaw = cache2.keypoints.map((a) => a.positionRaw[0]);
    const yRaw = cache2.keypoints.map((a) => a.positionRaw[1]);
    cache2.boxRaw = [
      Math.min(...xRaw),
      Math.min(...yRaw),
      Math.max(...xRaw) - Math.min(...xRaw),
      Math.max(...yRaw) - Math.min(...yRaw)
    ];
    for (const [name, indexes] of Object.entries(connected2)) {
      const pt2 = [];
      for (let i = 0; i < indexes.length - 1; i++) {
        const pt0 = cache2.keypoints.find((kpt4) => kpt4.part === indexes[i]);
        const pt1 = cache2.keypoints.find((kpt4) => kpt4.part === indexes[i + 1]);
        if (pt0 && pt1 && pt0.score > (config3.body.minConfidence || 0) && pt1.score > (config3.body.minConfidence || 0))
          pt2.push([pt0.position, pt1.position]);
      }
      cache2.annotations[name] = pt2;
    }
    resolve([cache2]);
  });
}

// src/gear/emotion.ts
var annotations = ["angry", "disgust", "fear", "happy", "sad", "surprise", "neutral"];
var model8;
var last6 = [];
var lastCount5 = 0;
var lastTime8 = 0;
var skipped8 = Number.MAX_SAFE_INTEGER;
async function load8(config3) {
  var _a2;
  if (env.initial)
    model8 = null;
  if (!model8)
    model8 = await loadModel((_a2 = config3.face.emotion) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model8["modelUrl"]);
  return model8;
}
async function predict8(image, config3, idx, count2) {
  var _a2, _b2;
  if (!model8)
    return [];
  const skipFrame = skipped8 < (((_a2 = config3.face.emotion) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face.emotion) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime8;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount5 === count2 && last6[idx] && last6[idx].length > 0) {
    skipped8++;
    return last6[idx];
  }
  skipped8 = 0;
  return new Promise(async (resolve) => {
    var _a3, _b3;
    const obj = [];
    if ((_a3 = config3.face.emotion) == null ? void 0 : _a3.enabled) {
      const t = {};
      const inputSize10 = (model8 == null ? void 0 : model8.inputs[0].shape) ? model8.inputs[0].shape[2] : 0;
      t.resize = jn.resizeBilinear(image, [inputSize10, inputSize10], false);
      t.channels = V(t.resize, constants.rgb);
      t.grayscale = ve(t.channels, 3, true);
      t.grayscaleSub = ge(t.grayscale, constants.tf05);
      t.grayscaleMul = V(t.grayscaleSub, constants.tf2);
      t.emotion = model8 == null ? void 0 : model8.execute(t.grayscaleMul);
      lastTime8 = now();
      const data = await t.emotion.data();
      for (let i = 0; i < data.length; i++) {
        if (data[i] > (((_b3 = config3.face.emotion) == null ? void 0 : _b3.minConfidence) || 0))
          obj.push({ score: Math.min(0.99, Math.trunc(100 * data[i]) / 100), emotion: annotations[i] });
      }
      obj.sort((a, b) => b.score - a.score);
      Object.keys(t).forEach((tensor) => Re(t[tensor]));
    }
    last6[idx] = obj;
    lastCount5 = count2;
    resolve(obj);
  });
}

// src/face/mobilefacenet.ts
var model9;
var last7 = [];
var lastCount6 = 0;
var lastTime9 = 0;
var skipped9 = Number.MAX_SAFE_INTEGER;
async function load9(config3) {
  if (env.initial)
    model9 = null;
  if (!model9)
    model9 = await loadModel(config3.face["mobilefacenet"].modelPath);
  else if (config3.debug)
    log("cached model:", model9["modelUrl"]);
  return model9;
}
async function predict9(input, config3, idx, count2) {
  var _a2, _b2;
  if (!model9)
    return [];
  const skipFrame = skipped9 < (((_a2 = config3.face["embedding"]) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face["embedding"]) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime9;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount6 === count2 && last7[idx]) {
    skipped9++;
    return last7[idx];
  }
  return new Promise(async (resolve) => {
    var _a3;
    let data = [];
    if (((_a3 = config3.face["embedding"]) == null ? void 0 : _a3.enabled) && (model9 == null ? void 0 : model9.inputs[0].shape)) {
      const t = {};
      t.crop = jn.resizeBilinear(input, [model9.inputs[0].shape[2], model9.inputs[0].shape[1]], false);
      t.data = model9 == null ? void 0 : model9.execute(t.crop);
      const output = await t.data.data();
      data = Array.from(output);
    }
    last7[idx] = data;
    lastCount6 = count2;
    lastTime9 = now();
    resolve(data);
  });
}

// src/face/iris.ts
var model10;
var inputSize5 = 0;
var irisEnlarge = 2.3;
var leftOutline = meshAnnotations["leftEyeLower0"];
var rightOutline = meshAnnotations["rightEyeLower0"];
var eyeLandmarks = {
  leftBounds: [leftOutline[0], leftOutline[leftOutline.length - 1]],
  rightBounds: [rightOutline[0], rightOutline[rightOutline.length - 1]]
};
var irisLandmarks = {
  upperCenter: 3,
  lowerCenter: 4,
  index: 71,
  numCoordinates: 76
};
async function load10(config3) {
  var _a2;
  if (env.initial)
    model10 = null;
  if (!model10)
    model10 = await loadModel((_a2 = config3.face.iris) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model10["modelUrl"]);
  inputSize5 = model10.inputs[0].shape ? model10.inputs[0].shape[2] : 0;
  if (inputSize5 === -1)
    inputSize5 = 64;
  return model10;
}
function replaceIrisCoords(rawCoords, newCoords, prefix, keys) {
  for (let i = 0; i < irisIndices.length; i++) {
    const { key, indices } = irisIndices[i];
    const originalIndices = meshAnnotations[`${prefix}${key}`];
    if (!keys || keys.includes(key)) {
      for (let j10 = 0; j10 < indices.length; j10++) {
        const index2 = indices[j10];
        rawCoords[originalIndices[j10]] = [
          newCoords[index2][0],
          newCoords[index2][1],
          (newCoords[index2][2] + rawCoords[originalIndices[j10]][2]) / 2
        ];
      }
    }
  }
}
var getLeftToRightEyeDepthDifference = (rawCoords) => {
  const leftEyeZ = rawCoords[eyeLandmarks.leftBounds[0]][2];
  const rightEyeZ = rawCoords[eyeLandmarks.rightBounds[0]][2];
  return leftEyeZ - rightEyeZ;
};
var getEyeBox = (rawCoords, face4, eyeInnerCornerIndex, eyeOuterCornerIndex, meshSize, flip = false) => {
  const box = squarifyBox(enlargeBox(calculateLandmarksBoundingBox([rawCoords[eyeInnerCornerIndex], rawCoords[eyeOuterCornerIndex]]), irisEnlarge));
  const boxSize = getBoxSize(box);
  let crop = jn.cropAndResize(face4, [[
    box.startPoint[1] / meshSize,
    box.startPoint[0] / meshSize,
    box.endPoint[1] / meshSize,
    box.endPoint[0] / meshSize
  ]], [0], [inputSize5, inputSize5]);
  if (flip && env.kernels.includes("flipleftright")) {
    const flipped = jn.flipLeftRight(crop);
    Re(crop);
    crop = flipped;
  }
  return { box, boxSize, crop };
};
var getEyeCoords = (eyeData, eyeBox, eyeBoxSize, flip = false) => {
  const eyeRawCoords = [];
  for (let i = 0; i < irisLandmarks.numCoordinates; i++) {
    const x = eyeData[i * 3];
    const y = eyeData[i * 3 + 1];
    const z = eyeData[i * 3 + 2];
    eyeRawCoords.push([
      (flip ? 1 - x / inputSize5 : x / inputSize5) * eyeBoxSize[0] + eyeBox.startPoint[0],
      y / inputSize5 * eyeBoxSize[1] + eyeBox.startPoint[1],
      z
    ]);
  }
  return { rawCoords: eyeRawCoords, iris: eyeRawCoords.slice(irisLandmarks.index) };
};
var getAdjustedIrisCoords = (rawCoords, irisCoords, direction) => {
  const upperCenterZ = rawCoords[meshAnnotations[`${direction}EyeUpper0`][irisLandmarks.upperCenter]][2];
  const lowerCenterZ = rawCoords[meshAnnotations[`${direction}EyeLower0`][irisLandmarks.lowerCenter]][2];
  const averageZ = (upperCenterZ + lowerCenterZ) / 2;
  return irisCoords.map((coord, i) => {
    let z = averageZ;
    if (i === 2) {
      z = upperCenterZ;
    } else if (i === 4) {
      z = lowerCenterZ;
    }
    return [coord[0], coord[1], z];
  });
};
async function augmentIris(rawCoords, face4, config3, meshSize) {
  if (!model10) {
    if (config3.debug)
      log("face mesh iris detection requested, but model is not loaded");
    return rawCoords;
  }
  const { box: leftEyeBox, boxSize: leftEyeBoxSize, crop: leftEyeCrop } = getEyeBox(rawCoords, face4, eyeLandmarks.leftBounds[0], eyeLandmarks.leftBounds[1], meshSize, true);
  const { box: rightEyeBox, boxSize: rightEyeBoxSize, crop: rightEyeCrop } = getEyeBox(rawCoords, face4, eyeLandmarks.rightBounds[0], eyeLandmarks.rightBounds[1], meshSize, true);
  const combined = Ft([leftEyeCrop, rightEyeCrop]);
  Re(leftEyeCrop);
  Re(rightEyeCrop);
  const eyePredictions = model10.execute(combined);
  Re(combined);
  const eyePredictionsData = await eyePredictions.data();
  Re(eyePredictions);
  const leftEyeData = eyePredictionsData.slice(0, irisLandmarks.numCoordinates * 3);
  const { rawCoords: leftEyeRawCoords, iris: leftIrisRawCoords } = getEyeCoords(leftEyeData, leftEyeBox, leftEyeBoxSize, true);
  const rightEyeData = eyePredictionsData.slice(irisLandmarks.numCoordinates * 3);
  const { rawCoords: rightEyeRawCoords, iris: rightIrisRawCoords } = getEyeCoords(rightEyeData, rightEyeBox, rightEyeBoxSize, false);
  const leftToRightEyeDepthDifference = getLeftToRightEyeDepthDifference(rawCoords);
  if (Math.abs(leftToRightEyeDepthDifference) < 30) {
    replaceIrisCoords(rawCoords, leftEyeRawCoords, "left", null);
    replaceIrisCoords(rawCoords, rightEyeRawCoords, "right", null);
  } else if (leftToRightEyeDepthDifference < 1) {
    replaceIrisCoords(rawCoords, leftEyeRawCoords, "left", ["EyeUpper0", "EyeLower0"]);
  } else {
    replaceIrisCoords(rawCoords, rightEyeRawCoords, "right", ["EyeUpper0", "EyeLower0"]);
  }
  const adjustedLeftIrisCoords = getAdjustedIrisCoords(rawCoords, leftIrisRawCoords, "left");
  const adjustedRightIrisCoords = getAdjustedIrisCoords(rawCoords, rightIrisRawCoords, "right");
  const newCoords = rawCoords.concat(adjustedLeftIrisCoords).concat(adjustedRightIrisCoords);
  return newCoords;
}

// src/face/attention.ts
var attentionDefinitions = {
  eyeLLower: [33, 7, 163, 144, 145, 153, 154, 155, 133],
  eyeRLower: [263, 249, 390, 373, 374, 380, 381, 382, 362],
  lips: [185, 96, 90, 181, 84, 17, 314, 405, 320, 307, 409, 40, 39, 73, 37, 0, 267, 269, 270, 409, 40, 88, 178, 178, 87, 14, 268, 402, 318, 324, 409, 80, 41, 38, 87, 12, 268, 303, 318, 324, 185, 95, 80, 81, 85, 16, 315, 404, 319, 325, 409, 40, 39, 73, 72, 0, 302, 303, 270, 408, 185, 88, 88, 81, 82, 15, 316, 403, 319, 324, 409, 80, 41, 38, 87, 12, 268, 303, 318, 324],
  eyeL: [33, 7, 163, 144, 145, 153, 154, 155, 133, 246, 161, 160, 159, 158, 157, 173, 130, 25, 110, 24, 23, 22, 26, 112, 243, 247, 30, 29, 27, 28, 56, 190, 226, 31, 228, 229, 230, 231, 232, 233, 244, 113, 225, 224, 223, 222, 221, 189, 35, 124, 46, 53, 52, 65, 143, 111, 117, 118, 119, 120, 121, 128, 245, 156, 70, 63, 105, 66, 107, 55, 193],
  eyeR: [263, 249, 390, 373, 374, 380, 381, 382, 362, 466, 388, 387, 386, 385, 384, 398, 359, 255, 339, 254, 253, 252, 256, 341, 463, 467, 260, 259, 257, 258, 286, 414, 446, 261, 448, 449, 450, 451, 452, 453, 464, 342, 445, 444, 443, 442, 441, 413, 265, 353, 276, 283, 282, 295, 372, 340, 346, 347, 348, 349, 350, 357, 465, 383, 300, 293, 334, 296, 336, 285, 417]
};
async function augment(rawCoords, results) {
  const t = {
    irisL: results[3].dataSync(),
    irisR: results[1].dataSync(),
    eyeL: results[0].dataSync(),
    eyeR: results[6].dataSync(),
    lips: results[5].dataSync()
  };
  const irisRDepth = attentionDefinitions.eyeRLower.reduce((prev, curr) => prev += rawCoords[curr][2], 0) / attentionDefinitions.eyeRLower.length;
  for (let i = 0; i < t.irisR.length / 2; i++)
    rawCoords.push([t.irisR[2 * i + 0], t.irisR[2 * i + 1], irisRDepth]);
  const irisLDepth = attentionDefinitions.eyeLLower.reduce((prev, curr) => prev += rawCoords[curr][2], 0) / attentionDefinitions.eyeLLower.length;
  for (let i = 0; i < t.irisL.length / 2; i++)
    rawCoords.push([t.irisL[2 * i + 0], t.irisL[2 * i + 1], irisLDepth]);
  for (let i = 0; i < t.eyeL.length / 2; i++)
    rawCoords[attentionDefinitions.eyeL[i]] = [t.eyeL[2 * i + 0], t.eyeL[2 * i + 1], rawCoords[attentionDefinitions.eyeL[i]][2]];
  for (let i = 0; i < t.eyeR.length / 2; i++)
    rawCoords[attentionDefinitions.eyeR[i]] = [t.eyeR[2 * i + 0], t.eyeR[2 * i + 1], rawCoords[attentionDefinitions.eyeR[i]][2]];
  for (let i = 0; i < t.lips.length / 2; i++)
    rawCoords[attentionDefinitions.lips[i]] = [t.lips[2 * i + 0], t.lips[2 * i + 1], rawCoords[attentionDefinitions.lips[i]][2]];
  return rawCoords;
}

// src/face/facemesh.ts
var cache3 = {
  boxes: [],
  skipped: Number.MAX_SAFE_INTEGER,
  timestamp: 0
};
var model11 = null;
var inputSize6 = 0;
async function predict10(input, config3) {
  var _a2, _b2, _c, _d2, _e, _f, _g2, _h, _i, _j2;
  const skipTime = (((_a2 = config3.face.detector) == null ? void 0 : _a2.skipTime) || 0) > now() - cache3.timestamp;
  const skipFrame = cache3.skipped < (((_b2 = config3.face.detector) == null ? void 0 : _b2.skipFrames) || 0);
  if (!config3.skipAllowed || !skipTime || !skipFrame || cache3.boxes.length === 0) {
    cache3.boxes = await getBoxes(input, config3);
    cache3.timestamp = now();
    cache3.skipped = 0;
  } else {
    cache3.skipped++;
  }
  const faces = [];
  const newCache = [];
  let id2 = 0;
  for (let i = 0; i < cache3.boxes.length; i++) {
    const box = cache3.boxes[i];
    let angle = 0;
    let rotationMatrix;
    const face4 = {
      id: id2++,
      mesh: [],
      meshRaw: [],
      box: [0, 0, 0, 0],
      boxRaw: [0, 0, 0, 0],
      score: 0,
      boxScore: 0,
      faceScore: 0,
      annotations: {}
    };
    [angle, rotationMatrix, face4.tensor] = correctFaceRotation((_c = config3.face.detector) == null ? void 0 : _c.rotation, box, input, ((_d2 = config3.face.mesh) == null ? void 0 : _d2.enabled) ? inputSize6 : size());
    if ((_e = config3 == null ? void 0 : config3.filter) == null ? void 0 : _e.equalization) {
      const equilized = await histogramEqualization(face4.tensor);
      Re(face4.tensor);
      face4.tensor = equilized;
    }
    face4.boxScore = Math.round(100 * box.confidence) / 100;
    if (!((_f = config3.face.mesh) == null ? void 0 : _f.enabled)) {
      face4.box = clampBox(box, input);
      face4.boxRaw = getRawBox(box, input);
      face4.score = face4.boxScore;
      face4.mesh = box.landmarks.map((pt2) => [
        (box.startPoint[0] + box.endPoint[0]) / 2 + (box.endPoint[0] + box.startPoint[0]) * pt2[0] / size(),
        (box.startPoint[1] + box.endPoint[1]) / 2 + (box.endPoint[1] + box.startPoint[1]) * pt2[1] / size()
      ]);
      face4.meshRaw = face4.mesh.map((pt2) => [pt2[0] / (input.shape[2] || 0), pt2[1] / (input.shape[1] || 0), (pt2[2] || 0) / inputSize6]);
      for (const key of Object.keys(blazeFaceLandmarks)) {
        face4.annotations[key] = [face4.mesh[blazeFaceLandmarks[key]]];
      }
    } else if (!model11) {
      if (config3.debug)
        log("face mesh detection requested, but model is not loaded");
    } else {
      const results = model11.execute(face4.tensor);
      const confidence = results.find((t) => t.shape[t.shape.length - 1] === 1);
      const contourCoords = results.find((t) => t.shape[t.shape.length - 1] === 1404);
      const faceConfidence = await confidence.data();
      face4.faceScore = Math.round(100 * faceConfidence[0]) / 100;
      const coordsReshaped = G(contourCoords, [-1, 3]);
      let rawCoords = await coordsReshaped.array();
      if (face4.faceScore < (((_g2 = config3.face.detector) == null ? void 0 : _g2.minConfidence) || 1)) {
        box.confidence = face4.faceScore;
      } else {
        if ((_h = config3.face.attention) == null ? void 0 : _h.enabled) {
          rawCoords = await augment(rawCoords, results);
        } else if ((_i = config3.face.iris) == null ? void 0 : _i.enabled) {
          rawCoords = await augmentIris(rawCoords, face4.tensor, config3, inputSize6);
        }
        face4.mesh = transformRawCoords(rawCoords, box, angle, rotationMatrix, inputSize6);
        face4.meshRaw = face4.mesh.map((pt2) => [pt2[0] / (input.shape[2] || 0), pt2[1] / (input.shape[1] || 0), (pt2[2] || 0) / inputSize6]);
        for (const key of Object.keys(meshAnnotations))
          face4.annotations[key] = meshAnnotations[key].map((index2) => face4.mesh[index2]);
        face4.score = face4.faceScore;
        const calculatedBox = { ...calculateFaceBox(face4.mesh, box), confidence: box.confidence, landmarks: box.landmarks };
        face4.box = clampBox(calculatedBox, input);
        face4.boxRaw = getRawBox(calculatedBox, input);
        newCache.push(calculatedBox);
      }
      Re([...results, coordsReshaped]);
    }
    if (face4.score > (((_j2 = config3.face.detector) == null ? void 0 : _j2.minConfidence) || 1))
      faces.push(face4);
    else
      Re(face4.tensor);
  }
  cache3.boxes = newCache;
  return faces;
}
async function load11(config3) {
  var _a2, _b2, _c;
  if (env.initial)
    model11 = null;
  if (!model11) {
    if ((_a2 = config3.face.attention) == null ? void 0 : _a2.enabled)
      model11 = await loadModel((_b2 = config3.face.attention) == null ? void 0 : _b2.modelPath);
    else
      model11 = await loadModel((_c = config3.face.mesh) == null ? void 0 : _c.modelPath);
  } else if (config3.debug) {
    log("cached model:", model11["modelUrl"]);
  }
  inputSize6 = model11.inputs[0].shape ? model11.inputs[0].shape[2] : 0;
  return model11;
}
var triangulation = TRI468;
var uvmap = UV468;

// src/face/faceres.ts
var model12;
var last8 = [];
var lastTime10 = 0;
var lastCount7 = 0;
var skipped10 = Number.MAX_SAFE_INTEGER;
async function load12(config3) {
  var _a2;
  if (env.initial)
    model12 = null;
  if (!model12)
    model12 = await loadModel((_a2 = config3.face.description) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model12["modelUrl"]);
  return model12;
}
function enhance(input) {
  const tensor = input.image || input.tensor || input;
  if (!(model12 == null ? void 0 : model12.inputs[0].shape))
    return tensor;
  const crop = jn.resizeBilinear(tensor, [model12.inputs[0].shape[2], model12.inputs[0].shape[1]], false);
  const norm = V(crop, constants.tf255);
  Re(crop);
  return norm;
}
async function predict11(image, config3, idx, count2) {
  var _a2, _b2, _c, _d2;
  if (!model12)
    return { age: 0, gender: "unknown", genderScore: 0, descriptor: [] };
  const skipFrame = skipped10 < (((_a2 = config3.face.description) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face.description) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime10;
  if (config3.skipAllowed && skipFrame && skipTime && lastCount7 === count2 && ((_c = last8[idx]) == null ? void 0 : _c.age) && ((_d2 = last8[idx]) == null ? void 0 : _d2.age) > 0) {
    skipped10++;
    return last8[idx];
  }
  skipped10 = 0;
  return new Promise(async (resolve) => {
    var _a3, _b3;
    const obj = {
      age: 0,
      gender: "unknown",
      genderScore: 0,
      descriptor: []
    };
    if ((_a3 = config3.face.description) == null ? void 0 : _a3.enabled) {
      const enhanced = enhance(image);
      const resT = model12 == null ? void 0 : model12.execute(enhanced);
      lastTime10 = now();
      Re(enhanced);
      const genderT = await resT.find((t) => t.shape[1] === 1);
      const gender = await genderT.data();
      const confidence = Math.trunc(200 * Math.abs(gender[0] - 0.5)) / 100;
      if (confidence > (((_b3 = config3.face.description) == null ? void 0 : _b3.minConfidence) || 0)) {
        obj.gender = gender[0] <= 0.5 ? "female" : "male";
        obj.genderScore = Math.min(0.99, confidence);
      }
      const argmax = qu(resT.find((t) => t.shape[1] === 100), 1);
      const age = (await argmax.data())[0];
      Re(argmax);
      const ageT = resT.find((t) => t.shape[1] === 100);
      const all2 = await ageT.data();
      obj.age = Math.round(all2[age - 1] > all2[age + 1] ? 10 * age - 100 * all2[age - 1] : 10 * age + 100 * all2[age + 1]) / 10;
      const desc = resT.find((t) => t.shape[1] === 1024);
      const descriptor = desc ? await desc.data() : [];
      obj.descriptor = Array.from(descriptor);
      resT.forEach((t) => Re(t));
    }
    last8[idx] = obj;
    lastCount7 = count2;
    resolve(obj);
  });
}

// src/hand/handposeutil.ts
function getBoxSize2(box) {
  return [
    Math.abs(box.endPoint[0] - box.startPoint[0]),
    Math.abs(box.endPoint[1] - box.startPoint[1])
  ];
}
function getBoxCenter2(box) {
  return [
    box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2,
    box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2
  ];
}
function cutBoxFromImageAndResize(box, image, cropSize) {
  const h = image.shape[1];
  const w10 = image.shape[2];
  const boxes = [[
    box.startPoint[1] / h,
    box.startPoint[0] / w10,
    box.endPoint[1] / h,
    box.endPoint[0] / w10
  ]];
  return jn.cropAndResize(image, boxes, [0], cropSize);
}
function scaleBoxCoordinates2(box, factor) {
  const startPoint = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]];
  const endPoint = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]];
  const palmLandmarks = box.palmLandmarks.map((coord) => {
    const scaledCoord = [coord[0] * factor[0], coord[1] * factor[1]];
    return scaledCoord;
  });
  return { startPoint, endPoint, palmLandmarks, confidence: box.confidence };
}
function enlargeBox2(box, factor = 1.5) {
  const center = getBoxCenter2(box);
  const size2 = getBoxSize2(box);
  const newHalfSize = [factor * size2[0] / 2, factor * size2[1] / 2];
  const startPoint = [center[0] - newHalfSize[0], center[1] - newHalfSize[1]];
  const endPoint = [center[0] + newHalfSize[0], center[1] + newHalfSize[1]];
  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };
}
function squarifyBox2(box) {
  const centers = getBoxCenter2(box);
  const size2 = getBoxSize2(box);
  const maxEdge = Math.max(...size2);
  const halfSize = maxEdge / 2;
  const startPoint = [centers[0] - halfSize, centers[1] - halfSize];
  const endPoint = [centers[0] + halfSize, centers[1] + halfSize];
  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };
}
function normalizeRadians2(angle) {
  return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));
}
function computeRotation2(point1, point2) {
  const radians = Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]);
  return normalizeRadians2(radians);
}
var buildTranslationMatrix2 = (x, y) => [[1, 0, x], [0, 1, y], [0, 0, 1]];
function dot2(v12, v22) {
  let product = 0;
  for (let i = 0; i < v12.length; i++) {
    product += v12[i] * v22[i];
  }
  return product;
}
function getColumnFrom2DArr2(arr, columnIndex) {
  const column = [];
  for (let i = 0; i < arr.length; i++) {
    column.push(arr[i][columnIndex]);
  }
  return column;
}
function multiplyTransformMatrices2(mat1, mat2) {
  const product = [];
  const size2 = mat1.length;
  for (let row = 0; row < size2; row++) {
    product.push([]);
    for (let col = 0; col < size2; col++) {
      product[row].push(dot2(mat1[row], getColumnFrom2DArr2(mat2, col)));
    }
  }
  return product;
}
function buildRotationMatrix2(rotation, center) {
  const cosA = Math.cos(rotation);
  const sinA = Math.sin(rotation);
  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];
  const translationMatrix = buildTranslationMatrix2(center[0], center[1]);
  const translationTimesRotation = multiplyTransformMatrices2(translationMatrix, rotationMatrix);
  const negativeTranslationMatrix = buildTranslationMatrix2(-center[0], -center[1]);
  return multiplyTransformMatrices2(translationTimesRotation, negativeTranslationMatrix);
}
function invertTransformMatrix2(matrix) {
  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];
  const translationComponent = [matrix[0][2], matrix[1][2]];
  const invertedTranslation = [
    -dot2(rotationComponent[0], translationComponent),
    -dot2(rotationComponent[1], translationComponent)
  ];
  return [
    rotationComponent[0].concat(invertedTranslation[0]),
    rotationComponent[1].concat(invertedTranslation[1]),
    [0, 0, 1]
  ];
}
function rotatePoint2(homogeneousCoordinate, rotationMatrix) {
  return [
    dot2(homogeneousCoordinate, rotationMatrix[0]),
    dot2(homogeneousCoordinate, rotationMatrix[1])
  ];
}

// src/hand/handposeanchors.ts
var anchors2 = [
  { x: 0.015625, y: 0.015625 },
  { x: 0.015625, y: 0.015625 },
  { x: 0.046875, y: 0.015625 },
  { x: 0.046875, y: 0.015625 },
  { x: 0.078125, y: 0.015625 },
  { x: 0.078125, y: 0.015625 },
  { x: 0.109375, y: 0.015625 },
  { x: 0.109375, y: 0.015625 },
  { x: 0.140625, y: 0.015625 },
  { x: 0.140625, y: 0.015625 },
  { x: 0.171875, y: 0.015625 },
  { x: 0.171875, y: 0.015625 },
  { x: 0.203125, y: 0.015625 },
  { x: 0.203125, y: 0.015625 },
  { x: 0.234375, y: 0.015625 },
  { x: 0.234375, y: 0.015625 },
  { x: 0.265625, y: 0.015625 },
  { x: 0.265625, y: 0.015625 },
  { x: 0.296875, y: 0.015625 },
  { x: 0.296875, y: 0.015625 },
  { x: 0.328125, y: 0.015625 },
  { x: 0.328125, y: 0.015625 },
  { x: 0.359375, y: 0.015625 },
  { x: 0.359375, y: 0.015625 },
  { x: 0.390625, y: 0.015625 },
  { x: 0.390625, y: 0.015625 },
  { x: 0.421875, y: 0.015625 },
  { x: 0.421875, y: 0.015625 },
  { x: 0.453125, y: 0.015625 },
  { x: 0.453125, y: 0.015625 },
  { x: 0.484375, y: 0.015625 },
  { x: 0.484375, y: 0.015625 },
  { x: 0.515625, y: 0.015625 },
  { x: 0.515625, y: 0.015625 },
  { x: 0.546875, y: 0.015625 },
  { x: 0.546875, y: 0.015625 },
  { x: 0.578125, y: 0.015625 },
  { x: 0.578125, y: 0.015625 },
  { x: 0.609375, y: 0.015625 },
  { x: 0.609375, y: 0.015625 },
  { x: 0.640625, y: 0.015625 },
  { x: 0.640625, y: 0.015625 },
  { x: 0.671875, y: 0.015625 },
  { x: 0.671875, y: 0.015625 },
  { x: 0.703125, y: 0.015625 },
  { x: 0.703125, y: 0.015625 },
  { x: 0.734375, y: 0.015625 },
  { x: 0.734375, y: 0.015625 },
  { x: 0.765625, y: 0.015625 },
  { x: 0.765625, y: 0.015625 },
  { x: 0.796875, y: 0.015625 },
  { x: 0.796875, y: 0.015625 },
  { x: 0.828125, y: 0.015625 },
  { x: 0.828125, y: 0.015625 },
  { x: 0.859375, y: 0.015625 },
  { x: 0.859375, y: 0.015625 },
  { x: 0.890625, y: 0.015625 },
  { x: 0.890625, y: 0.015625 },
  { x: 0.921875, y: 0.015625 },
  { x: 0.921875, y: 0.015625 },
  { x: 0.953125, y: 0.015625 },
  { x: 0.953125, y: 0.015625 },
  { x: 0.984375, y: 0.015625 },
  { x: 0.984375, y: 0.015625 },
  { x: 0.015625, y: 0.046875 },
  { x: 0.015625, y: 0.046875 },
  { x: 0.046875, y: 0.046875 },
  { x: 0.046875, y: 0.046875 },
  { x: 0.078125, y: 0.046875 },
  { x: 0.078125, y: 0.046875 },
  { x: 0.109375, y: 0.046875 },
  { x: 0.109375, y: 0.046875 },
  { x: 0.140625, y: 0.046875 },
  { x: 0.140625, y: 0.046875 },
  { x: 0.171875, y: 0.046875 },
  { x: 0.171875, y: 0.046875 },
  { x: 0.203125, y: 0.046875 },
  { x: 0.203125, y: 0.046875 },
  { x: 0.234375, y: 0.046875 },
  { x: 0.234375, y: 0.046875 },
  { x: 0.265625, y: 0.046875 },
  { x: 0.265625, y: 0.046875 },
  { x: 0.296875, y: 0.046875 },
  { x: 0.296875, y: 0.046875 },
  { x: 0.328125, y: 0.046875 },
  { x: 0.328125, y: 0.046875 },
  { x: 0.359375, y: 0.046875 },
  { x: 0.359375, y: 0.046875 },
  { x: 0.390625, y: 0.046875 },
  { x: 0.390625, y: 0.046875 },
  { x: 0.421875, y: 0.046875 },
  { x: 0.421875, y: 0.046875 },
  { x: 0.453125, y: 0.046875 },
  { x: 0.453125, y: 0.046875 },
  { x: 0.484375, y: 0.046875 },
  { x: 0.484375, y: 0.046875 },
  { x: 0.515625, y: 0.046875 },
  { x: 0.515625, y: 0.046875 },
  { x: 0.546875, y: 0.046875 },
  { x: 0.546875, y: 0.046875 },
  { x: 0.578125, y: 0.046875 },
  { x: 0.578125, y: 0.046875 },
  { x: 0.609375, y: 0.046875 },
  { x: 0.609375, y: 0.046875 },
  { x: 0.640625, y: 0.046875 },
  { x: 0.640625, y: 0.046875 },
  { x: 0.671875, y: 0.046875 },
  { x: 0.671875, y: 0.046875 },
  { x: 0.703125, y: 0.046875 },
  { x: 0.703125, y: 0.046875 },
  { x: 0.734375, y: 0.046875 },
  { x: 0.734375, y: 0.046875 },
  { x: 0.765625, y: 0.046875 },
  { x: 0.765625, y: 0.046875 },
  { x: 0.796875, y: 0.046875 },
  { x: 0.796875, y: 0.046875 },
  { x: 0.828125, y: 0.046875 },
  { x: 0.828125, y: 0.046875 },
  { x: 0.859375, y: 0.046875 },
  { x: 0.859375, y: 0.046875 },
  { x: 0.890625, y: 0.046875 },
  { x: 0.890625, y: 0.046875 },
  { x: 0.921875, y: 0.046875 },
  { x: 0.921875, y: 0.046875 },
  { x: 0.953125, y: 0.046875 },
  { x: 0.953125, y: 0.046875 },
  { x: 0.984375, y: 0.046875 },
  { x: 0.984375, y: 0.046875 },
  { x: 0.015625, y: 0.078125 },
  { x: 0.015625, y: 0.078125 },
  { x: 0.046875, y: 0.078125 },
  { x: 0.046875, y: 0.078125 },
  { x: 0.078125, y: 0.078125 },
  { x: 0.078125, y: 0.078125 },
  { x: 0.109375, y: 0.078125 },
  { x: 0.109375, y: 0.078125 },
  { x: 0.140625, y: 0.078125 },
  { x: 0.140625, y: 0.078125 },
  { x: 0.171875, y: 0.078125 },
  { x: 0.171875, y: 0.078125 },
  { x: 0.203125, y: 0.078125 },
  { x: 0.203125, y: 0.078125 },
  { x: 0.234375, y: 0.078125 },
  { x: 0.234375, y: 0.078125 },
  { x: 0.265625, y: 0.078125 },
  { x: 0.265625, y: 0.078125 },
  { x: 0.296875, y: 0.078125 },
  { x: 0.296875, y: 0.078125 },
  { x: 0.328125, y: 0.078125 },
  { x: 0.328125, y: 0.078125 },
  { x: 0.359375, y: 0.078125 },
  { x: 0.359375, y: 0.078125 },
  { x: 0.390625, y: 0.078125 },
  { x: 0.390625, y: 0.078125 },
  { x: 0.421875, y: 0.078125 },
  { x: 0.421875, y: 0.078125 },
  { x: 0.453125, y: 0.078125 },
  { x: 0.453125, y: 0.078125 },
  { x: 0.484375, y: 0.078125 },
  { x: 0.484375, y: 0.078125 },
  { x: 0.515625, y: 0.078125 },
  { x: 0.515625, y: 0.078125 },
  { x: 0.546875, y: 0.078125 },
  { x: 0.546875, y: 0.078125 },
  { x: 0.578125, y: 0.078125 },
  { x: 0.578125, y: 0.078125 },
  { x: 0.609375, y: 0.078125 },
  { x: 0.609375, y: 0.078125 },
  { x: 0.640625, y: 0.078125 },
  { x: 0.640625, y: 0.078125 },
  { x: 0.671875, y: 0.078125 },
  { x: 0.671875, y: 0.078125 },
  { x: 0.703125, y: 0.078125 },
  { x: 0.703125, y: 0.078125 },
  { x: 0.734375, y: 0.078125 },
  { x: 0.734375, y: 0.078125 },
  { x: 0.765625, y: 0.078125 },
  { x: 0.765625, y: 0.078125 },
  { x: 0.796875, y: 0.078125 },
  { x: 0.796875, y: 0.078125 },
  { x: 0.828125, y: 0.078125 },
  { x: 0.828125, y: 0.078125 },
  { x: 0.859375, y: 0.078125 },
  { x: 0.859375, y: 0.078125 },
  { x: 0.890625, y: 0.078125 },
  { x: 0.890625, y: 0.078125 },
  { x: 0.921875, y: 0.078125 },
  { x: 0.921875, y: 0.078125 },
  { x: 0.953125, y: 0.078125 },
  { x: 0.953125, y: 0.078125 },
  { x: 0.984375, y: 0.078125 },
  { x: 0.984375, y: 0.078125 },
  { x: 0.015625, y: 0.109375 },
  { x: 0.015625, y: 0.109375 },
  { x: 0.046875, y: 0.109375 },
  { x: 0.046875, y: 0.109375 },
  { x: 0.078125, y: 0.109375 },
  { x: 0.078125, y: 0.109375 },
  { x: 0.109375, y: 0.109375 },
  { x: 0.109375, y: 0.109375 },
  { x: 0.140625, y: 0.109375 },
  { x: 0.140625, y: 0.109375 },
  { x: 0.171875, y: 0.109375 },
  { x: 0.171875, y: 0.109375 },
  { x: 0.203125, y: 0.109375 },
  { x: 0.203125, y: 0.109375 },
  { x: 0.234375, y: 0.109375 },
  { x: 0.234375, y: 0.109375 },
  { x: 0.265625, y: 0.109375 },
  { x: 0.265625, y: 0.109375 },
  { x: 0.296875, y: 0.109375 },
  { x: 0.296875, y: 0.109375 },
  { x: 0.328125, y: 0.109375 },
  { x: 0.328125, y: 0.109375 },
  { x: 0.359375, y: 0.109375 },
  { x: 0.359375, y: 0.109375 },
  { x: 0.390625, y: 0.109375 },
  { x: 0.390625, y: 0.109375 },
  { x: 0.421875, y: 0.109375 },
  { x: 0.421875, y: 0.109375 },
  { x: 0.453125, y: 0.109375 },
  { x: 0.453125, y: 0.109375 },
  { x: 0.484375, y: 0.109375 },
  { x: 0.484375, y: 0.109375 },
  { x: 0.515625, y: 0.109375 },
  { x: 0.515625, y: 0.109375 },
  { x: 0.546875, y: 0.109375 },
  { x: 0.546875, y: 0.109375 },
  { x: 0.578125, y: 0.109375 },
  { x: 0.578125, y: 0.109375 },
  { x: 0.609375, y: 0.109375 },
  { x: 0.609375, y: 0.109375 },
  { x: 0.640625, y: 0.109375 },
  { x: 0.640625, y: 0.109375 },
  { x: 0.671875, y: 0.109375 },
  { x: 0.671875, y: 0.109375 },
  { x: 0.703125, y: 0.109375 },
  { x: 0.703125, y: 0.109375 },
  { x: 0.734375, y: 0.109375 },
  { x: 0.734375, y: 0.109375 },
  { x: 0.765625, y: 0.109375 },
  { x: 0.765625, y: 0.109375 },
  { x: 0.796875, y: 0.109375 },
  { x: 0.796875, y: 0.109375 },
  { x: 0.828125, y: 0.109375 },
  { x: 0.828125, y: 0.109375 },
  { x: 0.859375, y: 0.109375 },
  { x: 0.859375, y: 0.109375 },
  { x: 0.890625, y: 0.109375 },
  { x: 0.890625, y: 0.109375 },
  { x: 0.921875, y: 0.109375 },
  { x: 0.921875, y: 0.109375 },
  { x: 0.953125, y: 0.109375 },
  { x: 0.953125, y: 0.109375 },
  { x: 0.984375, y: 0.109375 },
  { x: 0.984375, y: 0.109375 },
  { x: 0.015625, y: 0.140625 },
  { x: 0.015625, y: 0.140625 },
  { x: 0.046875, y: 0.140625 },
  { x: 0.046875, y: 0.140625 },
  { x: 0.078125, y: 0.140625 },
  { x: 0.078125, y: 0.140625 },
  { x: 0.109375, y: 0.140625 },
  { x: 0.109375, y: 0.140625 },
  { x: 0.140625, y: 0.140625 },
  { x: 0.140625, y: 0.140625 },
  { x: 0.171875, y: 0.140625 },
  { x: 0.171875, y: 0.140625 },
  { x: 0.203125, y: 0.140625 },
  { x: 0.203125, y: 0.140625 },
  { x: 0.234375, y: 0.140625 },
  { x: 0.234375, y: 0.140625 },
  { x: 0.265625, y: 0.140625 },
  { x: 0.265625, y: 0.140625 },
  { x: 0.296875, y: 0.140625 },
  { x: 0.296875, y: 0.140625 },
  { x: 0.328125, y: 0.140625 },
  { x: 0.328125, y: 0.140625 },
  { x: 0.359375, y: 0.140625 },
  { x: 0.359375, y: 0.140625 },
  { x: 0.390625, y: 0.140625 },
  { x: 0.390625, y: 0.140625 },
  { x: 0.421875, y: 0.140625 },
  { x: 0.421875, y: 0.140625 },
  { x: 0.453125, y: 0.140625 },
  { x: 0.453125, y: 0.140625 },
  { x: 0.484375, y: 0.140625 },
  { x: 0.484375, y: 0.140625 },
  { x: 0.515625, y: 0.140625 },
  { x: 0.515625, y: 0.140625 },
  { x: 0.546875, y: 0.140625 },
  { x: 0.546875, y: 0.140625 },
  { x: 0.578125, y: 0.140625 },
  { x: 0.578125, y: 0.140625 },
  { x: 0.609375, y: 0.140625 },
  { x: 0.609375, y: 0.140625 },
  { x: 0.640625, y: 0.140625 },
  { x: 0.640625, y: 0.140625 },
  { x: 0.671875, y: 0.140625 },
  { x: 0.671875, y: 0.140625 },
  { x: 0.703125, y: 0.140625 },
  { x: 0.703125, y: 0.140625 },
  { x: 0.734375, y: 0.140625 },
  { x: 0.734375, y: 0.140625 },
  { x: 0.765625, y: 0.140625 },
  { x: 0.765625, y: 0.140625 },
  { x: 0.796875, y: 0.140625 },
  { x: 0.796875, y: 0.140625 },
  { x: 0.828125, y: 0.140625 },
  { x: 0.828125, y: 0.140625 },
  { x: 0.859375, y: 0.140625 },
  { x: 0.859375, y: 0.140625 },
  { x: 0.890625, y: 0.140625 },
  { x: 0.890625, y: 0.140625 },
  { x: 0.921875, y: 0.140625 },
  { x: 0.921875, y: 0.140625 },
  { x: 0.953125, y: 0.140625 },
  { x: 0.953125, y: 0.140625 },
  { x: 0.984375, y: 0.140625 },
  { x: 0.984375, y: 0.140625 },
  { x: 0.015625, y: 0.171875 },
  { x: 0.015625, y: 0.171875 },
  { x: 0.046875, y: 0.171875 },
  { x: 0.046875, y: 0.171875 },
  { x: 0.078125, y: 0.171875 },
  { x: 0.078125, y: 0.171875 },
  { x: 0.109375, y: 0.171875 },
  { x: 0.109375, y: 0.171875 },
  { x: 0.140625, y: 0.171875 },
  { x: 0.140625, y: 0.171875 },
  { x: 0.171875, y: 0.171875 },
  { x: 0.171875, y: 0.171875 },
  { x: 0.203125, y: 0.171875 },
  { x: 0.203125, y: 0.171875 },
  { x: 0.234375, y: 0.171875 },
  { x: 0.234375, y: 0.171875 },
  { x: 0.265625, y: 0.171875 },
  { x: 0.265625, y: 0.171875 },
  { x: 0.296875, y: 0.171875 },
  { x: 0.296875, y: 0.171875 },
  { x: 0.328125, y: 0.171875 },
  { x: 0.328125, y: 0.171875 },
  { x: 0.359375, y: 0.171875 },
  { x: 0.359375, y: 0.171875 },
  { x: 0.390625, y: 0.171875 },
  { x: 0.390625, y: 0.171875 },
  { x: 0.421875, y: 0.171875 },
  { x: 0.421875, y: 0.171875 },
  { x: 0.453125, y: 0.171875 },
  { x: 0.453125, y: 0.171875 },
  { x: 0.484375, y: 0.171875 },
  { x: 0.484375, y: 0.171875 },
  { x: 0.515625, y: 0.171875 },
  { x: 0.515625, y: 0.171875 },
  { x: 0.546875, y: 0.171875 },
  { x: 0.546875, y: 0.171875 },
  { x: 0.578125, y: 0.171875 },
  { x: 0.578125, y: 0.171875 },
  { x: 0.609375, y: 0.171875 },
  { x: 0.609375, y: 0.171875 },
  { x: 0.640625, y: 0.171875 },
  { x: 0.640625, y: 0.171875 },
  { x: 0.671875, y: 0.171875 },
  { x: 0.671875, y: 0.171875 },
  { x: 0.703125, y: 0.171875 },
  { x: 0.703125, y: 0.171875 },
  { x: 0.734375, y: 0.171875 },
  { x: 0.734375, y: 0.171875 },
  { x: 0.765625, y: 0.171875 },
  { x: 0.765625, y: 0.171875 },
  { x: 0.796875, y: 0.171875 },
  { x: 0.796875, y: 0.171875 },
  { x: 0.828125, y: 0.171875 },
  { x: 0.828125, y: 0.171875 },
  { x: 0.859375, y: 0.171875 },
  { x: 0.859375, y: 0.171875 },
  { x: 0.890625, y: 0.171875 },
  { x: 0.890625, y: 0.171875 },
  { x: 0.921875, y: 0.171875 },
  { x: 0.921875, y: 0.171875 },
  { x: 0.953125, y: 0.171875 },
  { x: 0.953125, y: 0.171875 },
  { x: 0.984375, y: 0.171875 },
  { x: 0.984375, y: 0.171875 },
  { x: 0.015625, y: 0.203125 },
  { x: 0.015625, y: 0.203125 },
  { x: 0.046875, y: 0.203125 },
  { x: 0.046875, y: 0.203125 },
  { x: 0.078125, y: 0.203125 },
  { x: 0.078125, y: 0.203125 },
  { x: 0.109375, y: 0.203125 },
  { x: 0.109375, y: 0.203125 },
  { x: 0.140625, y: 0.203125 },
  { x: 0.140625, y: 0.203125 },
  { x: 0.171875, y: 0.203125 },
  { x: 0.171875, y: 0.203125 },
  { x: 0.203125, y: 0.203125 },
  { x: 0.203125, y: 0.203125 },
  { x: 0.234375, y: 0.203125 },
  { x: 0.234375, y: 0.203125 },
  { x: 0.265625, y: 0.203125 },
  { x: 0.265625, y: 0.203125 },
  { x: 0.296875, y: 0.203125 },
  { x: 0.296875, y: 0.203125 },
  { x: 0.328125, y: 0.203125 },
  { x: 0.328125, y: 0.203125 },
  { x: 0.359375, y: 0.203125 },
  { x: 0.359375, y: 0.203125 },
  { x: 0.390625, y: 0.203125 },
  { x: 0.390625, y: 0.203125 },
  { x: 0.421875, y: 0.203125 },
  { x: 0.421875, y: 0.203125 },
  { x: 0.453125, y: 0.203125 },
  { x: 0.453125, y: 0.203125 },
  { x: 0.484375, y: 0.203125 },
  { x: 0.484375, y: 0.203125 },
  { x: 0.515625, y: 0.203125 },
  { x: 0.515625, y: 0.203125 },
  { x: 0.546875, y: 0.203125 },
  { x: 0.546875, y: 0.203125 },
  { x: 0.578125, y: 0.203125 },
  { x: 0.578125, y: 0.203125 },
  { x: 0.609375, y: 0.203125 },
  { x: 0.609375, y: 0.203125 },
  { x: 0.640625, y: 0.203125 },
  { x: 0.640625, y: 0.203125 },
  { x: 0.671875, y: 0.203125 },
  { x: 0.671875, y: 0.203125 },
  { x: 0.703125, y: 0.203125 },
  { x: 0.703125, y: 0.203125 },
  { x: 0.734375, y: 0.203125 },
  { x: 0.734375, y: 0.203125 },
  { x: 0.765625, y: 0.203125 },
  { x: 0.765625, y: 0.203125 },
  { x: 0.796875, y: 0.203125 },
  { x: 0.796875, y: 0.203125 },
  { x: 0.828125, y: 0.203125 },
  { x: 0.828125, y: 0.203125 },
  { x: 0.859375, y: 0.203125 },
  { x: 0.859375, y: 0.203125 },
  { x: 0.890625, y: 0.203125 },
  { x: 0.890625, y: 0.203125 },
  { x: 0.921875, y: 0.203125 },
  { x: 0.921875, y: 0.203125 },
  { x: 0.953125, y: 0.203125 },
  { x: 0.953125, y: 0.203125 },
  { x: 0.984375, y: 0.203125 },
  { x: 0.984375, y: 0.203125 },
  { x: 0.015625, y: 0.234375 },
  { x: 0.015625, y: 0.234375 },
  { x: 0.046875, y: 0.234375 },
  { x: 0.046875, y: 0.234375 },
  { x: 0.078125, y: 0.234375 },
  { x: 0.078125, y: 0.234375 },
  { x: 0.109375, y: 0.234375 },
  { x: 0.109375, y: 0.234375 },
  { x: 0.140625, y: 0.234375 },
  { x: 0.140625, y: 0.234375 },
  { x: 0.171875, y: 0.234375 },
  { x: 0.171875, y: 0.234375 },
  { x: 0.203125, y: 0.234375 },
  { x: 0.203125, y: 0.234375 },
  { x: 0.234375, y: 0.234375 },
  { x: 0.234375, y: 0.234375 },
  { x: 0.265625, y: 0.234375 },
  { x: 0.265625, y: 0.234375 },
  { x: 0.296875, y: 0.234375 },
  { x: 0.296875, y: 0.234375 },
  { x: 0.328125, y: 0.234375 },
  { x: 0.328125, y: 0.234375 },
  { x: 0.359375, y: 0.234375 },
  { x: 0.359375, y: 0.234375 },
  { x: 0.390625, y: 0.234375 },
  { x: 0.390625, y: 0.234375 },
  { x: 0.421875, y: 0.234375 },
  { x: 0.421875, y: 0.234375 },
  { x: 0.453125, y: 0.234375 },
  { x: 0.453125, y: 0.234375 },
  { x: 0.484375, y: 0.234375 },
  { x: 0.484375, y: 0.234375 },
  { x: 0.515625, y: 0.234375 },
  { x: 0.515625, y: 0.234375 },
  { x: 0.546875, y: 0.234375 },
  { x: 0.546875, y: 0.234375 },
  { x: 0.578125, y: 0.234375 },
  { x: 0.578125, y: 0.234375 },
  { x: 0.609375, y: 0.234375 },
  { x: 0.609375, y: 0.234375 },
  { x: 0.640625, y: 0.234375 },
  { x: 0.640625, y: 0.234375 },
  { x: 0.671875, y: 0.234375 },
  { x: 0.671875, y: 0.234375 },
  { x: 0.703125, y: 0.234375 },
  { x: 0.703125, y: 0.234375 },
  { x: 0.734375, y: 0.234375 },
  { x: 0.734375, y: 0.234375 },
  { x: 0.765625, y: 0.234375 },
  { x: 0.765625, y: 0.234375 },
  { x: 0.796875, y: 0.234375 },
  { x: 0.796875, y: 0.234375 },
  { x: 0.828125, y: 0.234375 },
  { x: 0.828125, y: 0.234375 },
  { x: 0.859375, y: 0.234375 },
  { x: 0.859375, y: 0.234375 },
  { x: 0.890625, y: 0.234375 },
  { x: 0.890625, y: 0.234375 },
  { x: 0.921875, y: 0.234375 },
  { x: 0.921875, y: 0.234375 },
  { x: 0.953125, y: 0.234375 },
  { x: 0.953125, y: 0.234375 },
  { x: 0.984375, y: 0.234375 },
  { x: 0.984375, y: 0.234375 },
  { x: 0.015625, y: 0.265625 },
  { x: 0.015625, y: 0.265625 },
  { x: 0.046875, y: 0.265625 },
  { x: 0.046875, y: 0.265625 },
  { x: 0.078125, y: 0.265625 },
  { x: 0.078125, y: 0.265625 },
  { x: 0.109375, y: 0.265625 },
  { x: 0.109375, y: 0.265625 },
  { x: 0.140625, y: 0.265625 },
  { x: 0.140625, y: 0.265625 },
  { x: 0.171875, y: 0.265625 },
  { x: 0.171875, y: 0.265625 },
  { x: 0.203125, y: 0.265625 },
  { x: 0.203125, y: 0.265625 },
  { x: 0.234375, y: 0.265625 },
  { x: 0.234375, y: 0.265625 },
  { x: 0.265625, y: 0.265625 },
  { x: 0.265625, y: 0.265625 },
  { x: 0.296875, y: 0.265625 },
  { x: 0.296875, y: 0.265625 },
  { x: 0.328125, y: 0.265625 },
  { x: 0.328125, y: 0.265625 },
  { x: 0.359375, y: 0.265625 },
  { x: 0.359375, y: 0.265625 },
  { x: 0.390625, y: 0.265625 },
  { x: 0.390625, y: 0.265625 },
  { x: 0.421875, y: 0.265625 },
  { x: 0.421875, y: 0.265625 },
  { x: 0.453125, y: 0.265625 },
  { x: 0.453125, y: 0.265625 },
  { x: 0.484375, y: 0.265625 },
  { x: 0.484375, y: 0.265625 },
  { x: 0.515625, y: 0.265625 },
  { x: 0.515625, y: 0.265625 },
  { x: 0.546875, y: 0.265625 },
  { x: 0.546875, y: 0.265625 },
  { x: 0.578125, y: 0.265625 },
  { x: 0.578125, y: 0.265625 },
  { x: 0.609375, y: 0.265625 },
  { x: 0.609375, y: 0.265625 },
  { x: 0.640625, y: 0.265625 },
  { x: 0.640625, y: 0.265625 },
  { x: 0.671875, y: 0.265625 },
  { x: 0.671875, y: 0.265625 },
  { x: 0.703125, y: 0.265625 },
  { x: 0.703125, y: 0.265625 },
  { x: 0.734375, y: 0.265625 },
  { x: 0.734375, y: 0.265625 },
  { x: 0.765625, y: 0.265625 },
  { x: 0.765625, y: 0.265625 },
  { x: 0.796875, y: 0.265625 },
  { x: 0.796875, y: 0.265625 },
  { x: 0.828125, y: 0.265625 },
  { x: 0.828125, y: 0.265625 },
  { x: 0.859375, y: 0.265625 },
  { x: 0.859375, y: 0.265625 },
  { x: 0.890625, y: 0.265625 },
  { x: 0.890625, y: 0.265625 },
  { x: 0.921875, y: 0.265625 },
  { x: 0.921875, y: 0.265625 },
  { x: 0.953125, y: 0.265625 },
  { x: 0.953125, y: 0.265625 },
  { x: 0.984375, y: 0.265625 },
  { x: 0.984375, y: 0.265625 },
  { x: 0.015625, y: 0.296875 },
  { x: 0.015625, y: 0.296875 },
  { x: 0.046875, y: 0.296875 },
  { x: 0.046875, y: 0.296875 },
  { x: 0.078125, y: 0.296875 },
  { x: 0.078125, y: 0.296875 },
  { x: 0.109375, y: 0.296875 },
  { x: 0.109375, y: 0.296875 },
  { x: 0.140625, y: 0.296875 },
  { x: 0.140625, y: 0.296875 },
  { x: 0.171875, y: 0.296875 },
  { x: 0.171875, y: 0.296875 },
  { x: 0.203125, y: 0.296875 },
  { x: 0.203125, y: 0.296875 },
  { x: 0.234375, y: 0.296875 },
  { x: 0.234375, y: 0.296875 },
  { x: 0.265625, y: 0.296875 },
  { x: 0.265625, y: 0.296875 },
  { x: 0.296875, y: 0.296875 },
  { x: 0.296875, y: 0.296875 },
  { x: 0.328125, y: 0.296875 },
  { x: 0.328125, y: 0.296875 },
  { x: 0.359375, y: 0.296875 },
  { x: 0.359375, y: 0.296875 },
  { x: 0.390625, y: 0.296875 },
  { x: 0.390625, y: 0.296875 },
  { x: 0.421875, y: 0.296875 },
  { x: 0.421875, y: 0.296875 },
  { x: 0.453125, y: 0.296875 },
  { x: 0.453125, y: 0.296875 },
  { x: 0.484375, y: 0.296875 },
  { x: 0.484375, y: 0.296875 },
  { x: 0.515625, y: 0.296875 },
  { x: 0.515625, y: 0.296875 },
  { x: 0.546875, y: 0.296875 },
  { x: 0.546875, y: 0.296875 },
  { x: 0.578125, y: 0.296875 },
  { x: 0.578125, y: 0.296875 },
  { x: 0.609375, y: 0.296875 },
  { x: 0.609375, y: 0.296875 },
  { x: 0.640625, y: 0.296875 },
  { x: 0.640625, y: 0.296875 },
  { x: 0.671875, y: 0.296875 },
  { x: 0.671875, y: 0.296875 },
  { x: 0.703125, y: 0.296875 },
  { x: 0.703125, y: 0.296875 },
  { x: 0.734375, y: 0.296875 },
  { x: 0.734375, y: 0.296875 },
  { x: 0.765625, y: 0.296875 },
  { x: 0.765625, y: 0.296875 },
  { x: 0.796875, y: 0.296875 },
  { x: 0.796875, y: 0.296875 },
  { x: 0.828125, y: 0.296875 },
  { x: 0.828125, y: 0.296875 },
  { x: 0.859375, y: 0.296875 },
  { x: 0.859375, y: 0.296875 },
  { x: 0.890625, y: 0.296875 },
  { x: 0.890625, y: 0.296875 },
  { x: 0.921875, y: 0.296875 },
  { x: 0.921875, y: 0.296875 },
  { x: 0.953125, y: 0.296875 },
  { x: 0.953125, y: 0.296875 },
  { x: 0.984375, y: 0.296875 },
  { x: 0.984375, y: 0.296875 },
  { x: 0.015625, y: 0.328125 },
  { x: 0.015625, y: 0.328125 },
  { x: 0.046875, y: 0.328125 },
  { x: 0.046875, y: 0.328125 },
  { x: 0.078125, y: 0.328125 },
  { x: 0.078125, y: 0.328125 },
  { x: 0.109375, y: 0.328125 },
  { x: 0.109375, y: 0.328125 },
  { x: 0.140625, y: 0.328125 },
  { x: 0.140625, y: 0.328125 },
  { x: 0.171875, y: 0.328125 },
  { x: 0.171875, y: 0.328125 },
  { x: 0.203125, y: 0.328125 },
  { x: 0.203125, y: 0.328125 },
  { x: 0.234375, y: 0.328125 },
  { x: 0.234375, y: 0.328125 },
  { x: 0.265625, y: 0.328125 },
  { x: 0.265625, y: 0.328125 },
  { x: 0.296875, y: 0.328125 },
  { x: 0.296875, y: 0.328125 },
  { x: 0.328125, y: 0.328125 },
  { x: 0.328125, y: 0.328125 },
  { x: 0.359375, y: 0.328125 },
  { x: 0.359375, y: 0.328125 },
  { x: 0.390625, y: 0.328125 },
  { x: 0.390625, y: 0.328125 },
  { x: 0.421875, y: 0.328125 },
  { x: 0.421875, y: 0.328125 },
  { x: 0.453125, y: 0.328125 },
  { x: 0.453125, y: 0.328125 },
  { x: 0.484375, y: 0.328125 },
  { x: 0.484375, y: 0.328125 },
  { x: 0.515625, y: 0.328125 },
  { x: 0.515625, y: 0.328125 },
  { x: 0.546875, y: 0.328125 },
  { x: 0.546875, y: 0.328125 },
  { x: 0.578125, y: 0.328125 },
  { x: 0.578125, y: 0.328125 },
  { x: 0.609375, y: 0.328125 },
  { x: 0.609375, y: 0.328125 },
  { x: 0.640625, y: 0.328125 },
  { x: 0.640625, y: 0.328125 },
  { x: 0.671875, y: 0.328125 },
  { x: 0.671875, y: 0.328125 },
  { x: 0.703125, y: 0.328125 },
  { x: 0.703125, y: 0.328125 },
  { x: 0.734375, y: 0.328125 },
  { x: 0.734375, y: 0.328125 },
  { x: 0.765625, y: 0.328125 },
  { x: 0.765625, y: 0.328125 },
  { x: 0.796875, y: 0.328125 },
  { x: 0.796875, y: 0.328125 },
  { x: 0.828125, y: 0.328125 },
  { x: 0.828125, y: 0.328125 },
  { x: 0.859375, y: 0.328125 },
  { x: 0.859375, y: 0.328125 },
  { x: 0.890625, y: 0.328125 },
  { x: 0.890625, y: 0.328125 },
  { x: 0.921875, y: 0.328125 },
  { x: 0.921875, y: 0.328125 },
  { x: 0.953125, y: 0.328125 },
  { x: 0.953125, y: 0.328125 },
  { x: 0.984375, y: 0.328125 },
  { x: 0.984375, y: 0.328125 },
  { x: 0.015625, y: 0.359375 },
  { x: 0.015625, y: 0.359375 },
  { x: 0.046875, y: 0.359375 },
  { x: 0.046875, y: 0.359375 },
  { x: 0.078125, y: 0.359375 },
  { x: 0.078125, y: 0.359375 },
  { x: 0.109375, y: 0.359375 },
  { x: 0.109375, y: 0.359375 },
  { x: 0.140625, y: 0.359375 },
  { x: 0.140625, y: 0.359375 },
  { x: 0.171875, y: 0.359375 },
  { x: 0.171875, y: 0.359375 },
  { x: 0.203125, y: 0.359375 },
  { x: 0.203125, y: 0.359375 },
  { x: 0.234375, y: 0.359375 },
  { x: 0.234375, y: 0.359375 },
  { x: 0.265625, y: 0.359375 },
  { x: 0.265625, y: 0.359375 },
  { x: 0.296875, y: 0.359375 },
  { x: 0.296875, y: 0.359375 },
  { x: 0.328125, y: 0.359375 },
  { x: 0.328125, y: 0.359375 },
  { x: 0.359375, y: 0.359375 },
  { x: 0.359375, y: 0.359375 },
  { x: 0.390625, y: 0.359375 },
  { x: 0.390625, y: 0.359375 },
  { x: 0.421875, y: 0.359375 },
  { x: 0.421875, y: 0.359375 },
  { x: 0.453125, y: 0.359375 },
  { x: 0.453125, y: 0.359375 },
  { x: 0.484375, y: 0.359375 },
  { x: 0.484375, y: 0.359375 },
  { x: 0.515625, y: 0.359375 },
  { x: 0.515625, y: 0.359375 },
  { x: 0.546875, y: 0.359375 },
  { x: 0.546875, y: 0.359375 },
  { x: 0.578125, y: 0.359375 },
  { x: 0.578125, y: 0.359375 },
  { x: 0.609375, y: 0.359375 },
  { x: 0.609375, y: 0.359375 },
  { x: 0.640625, y: 0.359375 },
  { x: 0.640625, y: 0.359375 },
  { x: 0.671875, y: 0.359375 },
  { x: 0.671875, y: 0.359375 },
  { x: 0.703125, y: 0.359375 },
  { x: 0.703125, y: 0.359375 },
  { x: 0.734375, y: 0.359375 },
  { x: 0.734375, y: 0.359375 },
  { x: 0.765625, y: 0.359375 },
  { x: 0.765625, y: 0.359375 },
  { x: 0.796875, y: 0.359375 },
  { x: 0.796875, y: 0.359375 },
  { x: 0.828125, y: 0.359375 },
  { x: 0.828125, y: 0.359375 },
  { x: 0.859375, y: 0.359375 },
  { x: 0.859375, y: 0.359375 },
  { x: 0.890625, y: 0.359375 },
  { x: 0.890625, y: 0.359375 },
  { x: 0.921875, y: 0.359375 },
  { x: 0.921875, y: 0.359375 },
  { x: 0.953125, y: 0.359375 },
  { x: 0.953125, y: 0.359375 },
  { x: 0.984375, y: 0.359375 },
  { x: 0.984375, y: 0.359375 },
  { x: 0.015625, y: 0.390625 },
  { x: 0.015625, y: 0.390625 },
  { x: 0.046875, y: 0.390625 },
  { x: 0.046875, y: 0.390625 },
  { x: 0.078125, y: 0.390625 },
  { x: 0.078125, y: 0.390625 },
  { x: 0.109375, y: 0.390625 },
  { x: 0.109375, y: 0.390625 },
  { x: 0.140625, y: 0.390625 },
  { x: 0.140625, y: 0.390625 },
  { x: 0.171875, y: 0.390625 },
  { x: 0.171875, y: 0.390625 },
  { x: 0.203125, y: 0.390625 },
  { x: 0.203125, y: 0.390625 },
  { x: 0.234375, y: 0.390625 },
  { x: 0.234375, y: 0.390625 },
  { x: 0.265625, y: 0.390625 },
  { x: 0.265625, y: 0.390625 },
  { x: 0.296875, y: 0.390625 },
  { x: 0.296875, y: 0.390625 },
  { x: 0.328125, y: 0.390625 },
  { x: 0.328125, y: 0.390625 },
  { x: 0.359375, y: 0.390625 },
  { x: 0.359375, y: 0.390625 },
  { x: 0.390625, y: 0.390625 },
  { x: 0.390625, y: 0.390625 },
  { x: 0.421875, y: 0.390625 },
  { x: 0.421875, y: 0.390625 },
  { x: 0.453125, y: 0.390625 },
  { x: 0.453125, y: 0.390625 },
  { x: 0.484375, y: 0.390625 },
  { x: 0.484375, y: 0.390625 },
  { x: 0.515625, y: 0.390625 },
  { x: 0.515625, y: 0.390625 },
  { x: 0.546875, y: 0.390625 },
  { x: 0.546875, y: 0.390625 },
  { x: 0.578125, y: 0.390625 },
  { x: 0.578125, y: 0.390625 },
  { x: 0.609375, y: 0.390625 },
  { x: 0.609375, y: 0.390625 },
  { x: 0.640625, y: 0.390625 },
  { x: 0.640625, y: 0.390625 },
  { x: 0.671875, y: 0.390625 },
  { x: 0.671875, y: 0.390625 },
  { x: 0.703125, y: 0.390625 },
  { x: 0.703125, y: 0.390625 },
  { x: 0.734375, y: 0.390625 },
  { x: 0.734375, y: 0.390625 },
  { x: 0.765625, y: 0.390625 },
  { x: 0.765625, y: 0.390625 },
  { x: 0.796875, y: 0.390625 },
  { x: 0.796875, y: 0.390625 },
  { x: 0.828125, y: 0.390625 },
  { x: 0.828125, y: 0.390625 },
  { x: 0.859375, y: 0.390625 },
  { x: 0.859375, y: 0.390625 },
  { x: 0.890625, y: 0.390625 },
  { x: 0.890625, y: 0.390625 },
  { x: 0.921875, y: 0.390625 },
  { x: 0.921875, y: 0.390625 },
  { x: 0.953125, y: 0.390625 },
  { x: 0.953125, y: 0.390625 },
  { x: 0.984375, y: 0.390625 },
  { x: 0.984375, y: 0.390625 },
  { x: 0.015625, y: 0.421875 },
  { x: 0.015625, y: 0.421875 },
  { x: 0.046875, y: 0.421875 },
  { x: 0.046875, y: 0.421875 },
  { x: 0.078125, y: 0.421875 },
  { x: 0.078125, y: 0.421875 },
  { x: 0.109375, y: 0.421875 },
  { x: 0.109375, y: 0.421875 },
  { x: 0.140625, y: 0.421875 },
  { x: 0.140625, y: 0.421875 },
  { x: 0.171875, y: 0.421875 },
  { x: 0.171875, y: 0.421875 },
  { x: 0.203125, y: 0.421875 },
  { x: 0.203125, y: 0.421875 },
  { x: 0.234375, y: 0.421875 },
  { x: 0.234375, y: 0.421875 },
  { x: 0.265625, y: 0.421875 },
  { x: 0.265625, y: 0.421875 },
  { x: 0.296875, y: 0.421875 },
  { x: 0.296875, y: 0.421875 },
  { x: 0.328125, y: 0.421875 },
  { x: 0.328125, y: 0.421875 },
  { x: 0.359375, y: 0.421875 },
  { x: 0.359375, y: 0.421875 },
  { x: 0.390625, y: 0.421875 },
  { x: 0.390625, y: 0.421875 },
  { x: 0.421875, y: 0.421875 },
  { x: 0.421875, y: 0.421875 },
  { x: 0.453125, y: 0.421875 },
  { x: 0.453125, y: 0.421875 },
  { x: 0.484375, y: 0.421875 },
  { x: 0.484375, y: 0.421875 },
  { x: 0.515625, y: 0.421875 },
  { x: 0.515625, y: 0.421875 },
  { x: 0.546875, y: 0.421875 },
  { x: 0.546875, y: 0.421875 },
  { x: 0.578125, y: 0.421875 },
  { x: 0.578125, y: 0.421875 },
  { x: 0.609375, y: 0.421875 },
  { x: 0.609375, y: 0.421875 },
  { x: 0.640625, y: 0.421875 },
  { x: 0.640625, y: 0.421875 },
  { x: 0.671875, y: 0.421875 },
  { x: 0.671875, y: 0.421875 },
  { x: 0.703125, y: 0.421875 },
  { x: 0.703125, y: 0.421875 },
  { x: 0.734375, y: 0.421875 },
  { x: 0.734375, y: 0.421875 },
  { x: 0.765625, y: 0.421875 },
  { x: 0.765625, y: 0.421875 },
  { x: 0.796875, y: 0.421875 },
  { x: 0.796875, y: 0.421875 },
  { x: 0.828125, y: 0.421875 },
  { x: 0.828125, y: 0.421875 },
  { x: 0.859375, y: 0.421875 },
  { x: 0.859375, y: 0.421875 },
  { x: 0.890625, y: 0.421875 },
  { x: 0.890625, y: 0.421875 },
  { x: 0.921875, y: 0.421875 },
  { x: 0.921875, y: 0.421875 },
  { x: 0.953125, y: 0.421875 },
  { x: 0.953125, y: 0.421875 },
  { x: 0.984375, y: 0.421875 },
  { x: 0.984375, y: 0.421875 },
  { x: 0.015625, y: 0.453125 },
  { x: 0.015625, y: 0.453125 },
  { x: 0.046875, y: 0.453125 },
  { x: 0.046875, y: 0.453125 },
  { x: 0.078125, y: 0.453125 },
  { x: 0.078125, y: 0.453125 },
  { x: 0.109375, y: 0.453125 },
  { x: 0.109375, y: 0.453125 },
  { x: 0.140625, y: 0.453125 },
  { x: 0.140625, y: 0.453125 },
  { x: 0.171875, y: 0.453125 },
  { x: 0.171875, y: 0.453125 },
  { x: 0.203125, y: 0.453125 },
  { x: 0.203125, y: 0.453125 },
  { x: 0.234375, y: 0.453125 },
  { x: 0.234375, y: 0.453125 },
  { x: 0.265625, y: 0.453125 },
  { x: 0.265625, y: 0.453125 },
  { x: 0.296875, y: 0.453125 },
  { x: 0.296875, y: 0.453125 },
  { x: 0.328125, y: 0.453125 },
  { x: 0.328125, y: 0.453125 },
  { x: 0.359375, y: 0.453125 },
  { x: 0.359375, y: 0.453125 },
  { x: 0.390625, y: 0.453125 },
  { x: 0.390625, y: 0.453125 },
  { x: 0.421875, y: 0.453125 },
  { x: 0.421875, y: 0.453125 },
  { x: 0.453125, y: 0.453125 },
  { x: 0.453125, y: 0.453125 },
  { x: 0.484375, y: 0.453125 },
  { x: 0.484375, y: 0.453125 },
  { x: 0.515625, y: 0.453125 },
  { x: 0.515625, y: 0.453125 },
  { x: 0.546875, y: 0.453125 },
  { x: 0.546875, y: 0.453125 },
  { x: 0.578125, y: 0.453125 },
  { x: 0.578125, y: 0.453125 },
  { x: 0.609375, y: 0.453125 },
  { x: 0.609375, y: 0.453125 },
  { x: 0.640625, y: 0.453125 },
  { x: 0.640625, y: 0.453125 },
  { x: 0.671875, y: 0.453125 },
  { x: 0.671875, y: 0.453125 },
  { x: 0.703125, y: 0.453125 },
  { x: 0.703125, y: 0.453125 },
  { x: 0.734375, y: 0.453125 },
  { x: 0.734375, y: 0.453125 },
  { x: 0.765625, y: 0.453125 },
  { x: 0.765625, y: 0.453125 },
  { x: 0.796875, y: 0.453125 },
  { x: 0.796875, y: 0.453125 },
  { x: 0.828125, y: 0.453125 },
  { x: 0.828125, y: 0.453125 },
  { x: 0.859375, y: 0.453125 },
  { x: 0.859375, y: 0.453125 },
  { x: 0.890625, y: 0.453125 },
  { x: 0.890625, y: 0.453125 },
  { x: 0.921875, y: 0.453125 },
  { x: 0.921875, y: 0.453125 },
  { x: 0.953125, y: 0.453125 },
  { x: 0.953125, y: 0.453125 },
  { x: 0.984375, y: 0.453125 },
  { x: 0.984375, y: 0.453125 },
  { x: 0.015625, y: 0.484375 },
  { x: 0.015625, y: 0.484375 },
  { x: 0.046875, y: 0.484375 },
  { x: 0.046875, y: 0.484375 },
  { x: 0.078125, y: 0.484375 },
  { x: 0.078125, y: 0.484375 },
  { x: 0.109375, y: 0.484375 },
  { x: 0.109375, y: 0.484375 },
  { x: 0.140625, y: 0.484375 },
  { x: 0.140625, y: 0.484375 },
  { x: 0.171875, y: 0.484375 },
  { x: 0.171875, y: 0.484375 },
  { x: 0.203125, y: 0.484375 },
  { x: 0.203125, y: 0.484375 },
  { x: 0.234375, y: 0.484375 },
  { x: 0.234375, y: 0.484375 },
  { x: 0.265625, y: 0.484375 },
  { x: 0.265625, y: 0.484375 },
  { x: 0.296875, y: 0.484375 },
  { x: 0.296875, y: 0.484375 },
  { x: 0.328125, y: 0.484375 },
  { x: 0.328125, y: 0.484375 },
  { x: 0.359375, y: 0.484375 },
  { x: 0.359375, y: 0.484375 },
  { x: 0.390625, y: 0.484375 },
  { x: 0.390625, y: 0.484375 },
  { x: 0.421875, y: 0.484375 },
  { x: 0.421875, y: 0.484375 },
  { x: 0.453125, y: 0.484375 },
  { x: 0.453125, y: 0.484375 },
  { x: 0.484375, y: 0.484375 },
  { x: 0.484375, y: 0.484375 },
  { x: 0.515625, y: 0.484375 },
  { x: 0.515625, y: 0.484375 },
  { x: 0.546875, y: 0.484375 },
  { x: 0.546875, y: 0.484375 },
  { x: 0.578125, y: 0.484375 },
  { x: 0.578125, y: 0.484375 },
  { x: 0.609375, y: 0.484375 },
  { x: 0.609375, y: 0.484375 },
  { x: 0.640625, y: 0.484375 },
  { x: 0.640625, y: 0.484375 },
  { x: 0.671875, y: 0.484375 },
  { x: 0.671875, y: 0.484375 },
  { x: 0.703125, y: 0.484375 },
  { x: 0.703125, y: 0.484375 },
  { x: 0.734375, y: 0.484375 },
  { x: 0.734375, y: 0.484375 },
  { x: 0.765625, y: 0.484375 },
  { x: 0.765625, y: 0.484375 },
  { x: 0.796875, y: 0.484375 },
  { x: 0.796875, y: 0.484375 },
  { x: 0.828125, y: 0.484375 },
  { x: 0.828125, y: 0.484375 },
  { x: 0.859375, y: 0.484375 },
  { x: 0.859375, y: 0.484375 },
  { x: 0.890625, y: 0.484375 },
  { x: 0.890625, y: 0.484375 },
  { x: 0.921875, y: 0.484375 },
  { x: 0.921875, y: 0.484375 },
  { x: 0.953125, y: 0.484375 },
  { x: 0.953125, y: 0.484375 },
  { x: 0.984375, y: 0.484375 },
  { x: 0.984375, y: 0.484375 },
  { x: 0.015625, y: 0.515625 },
  { x: 0.015625, y: 0.515625 },
  { x: 0.046875, y: 0.515625 },
  { x: 0.046875, y: 0.515625 },
  { x: 0.078125, y: 0.515625 },
  { x: 0.078125, y: 0.515625 },
  { x: 0.109375, y: 0.515625 },
  { x: 0.109375, y: 0.515625 },
  { x: 0.140625, y: 0.515625 },
  { x: 0.140625, y: 0.515625 },
  { x: 0.171875, y: 0.515625 },
  { x: 0.171875, y: 0.515625 },
  { x: 0.203125, y: 0.515625 },
  { x: 0.203125, y: 0.515625 },
  { x: 0.234375, y: 0.515625 },
  { x: 0.234375, y: 0.515625 },
  { x: 0.265625, y: 0.515625 },
  { x: 0.265625, y: 0.515625 },
  { x: 0.296875, y: 0.515625 },
  { x: 0.296875, y: 0.515625 },
  { x: 0.328125, y: 0.515625 },
  { x: 0.328125, y: 0.515625 },
  { x: 0.359375, y: 0.515625 },
  { x: 0.359375, y: 0.515625 },
  { x: 0.390625, y: 0.515625 },
  { x: 0.390625, y: 0.515625 },
  { x: 0.421875, y: 0.515625 },
  { x: 0.421875, y: 0.515625 },
  { x: 0.453125, y: 0.515625 },
  { x: 0.453125, y: 0.515625 },
  { x: 0.484375, y: 0.515625 },
  { x: 0.484375, y: 0.515625 },
  { x: 0.515625, y: 0.515625 },
  { x: 0.515625, y: 0.515625 },
  { x: 0.546875, y: 0.515625 },
  { x: 0.546875, y: 0.515625 },
  { x: 0.578125, y: 0.515625 },
  { x: 0.578125, y: 0.515625 },
  { x: 0.609375, y: 0.515625 },
  { x: 0.609375, y: 0.515625 },
  { x: 0.640625, y: 0.515625 },
  { x: 0.640625, y: 0.515625 },
  { x: 0.671875, y: 0.515625 },
  { x: 0.671875, y: 0.515625 },
  { x: 0.703125, y: 0.515625 },
  { x: 0.703125, y: 0.515625 },
  { x: 0.734375, y: 0.515625 },
  { x: 0.734375, y: 0.515625 },
  { x: 0.765625, y: 0.515625 },
  { x: 0.765625, y: 0.515625 },
  { x: 0.796875, y: 0.515625 },
  { x: 0.796875, y: 0.515625 },
  { x: 0.828125, y: 0.515625 },
  { x: 0.828125, y: 0.515625 },
  { x: 0.859375, y: 0.515625 },
  { x: 0.859375, y: 0.515625 },
  { x: 0.890625, y: 0.515625 },
  { x: 0.890625, y: 0.515625 },
  { x: 0.921875, y: 0.515625 },
  { x: 0.921875, y: 0.515625 },
  { x: 0.953125, y: 0.515625 },
  { x: 0.953125, y: 0.515625 },
  { x: 0.984375, y: 0.515625 },
  { x: 0.984375, y: 0.515625 },
  { x: 0.015625, y: 0.546875 },
  { x: 0.015625, y: 0.546875 },
  { x: 0.046875, y: 0.546875 },
  { x: 0.046875, y: 0.546875 },
  { x: 0.078125, y: 0.546875 },
  { x: 0.078125, y: 0.546875 },
  { x: 0.109375, y: 0.546875 },
  { x: 0.109375, y: 0.546875 },
  { x: 0.140625, y: 0.546875 },
  { x: 0.140625, y: 0.546875 },
  { x: 0.171875, y: 0.546875 },
  { x: 0.171875, y: 0.546875 },
  { x: 0.203125, y: 0.546875 },
  { x: 0.203125, y: 0.546875 },
  { x: 0.234375, y: 0.546875 },
  { x: 0.234375, y: 0.546875 },
  { x: 0.265625, y: 0.546875 },
  { x: 0.265625, y: 0.546875 },
  { x: 0.296875, y: 0.546875 },
  { x: 0.296875, y: 0.546875 },
  { x: 0.328125, y: 0.546875 },
  { x: 0.328125, y: 0.546875 },
  { x: 0.359375, y: 0.546875 },
  { x: 0.359375, y: 0.546875 },
  { x: 0.390625, y: 0.546875 },
  { x: 0.390625, y: 0.546875 },
  { x: 0.421875, y: 0.546875 },
  { x: 0.421875, y: 0.546875 },
  { x: 0.453125, y: 0.546875 },
  { x: 0.453125, y: 0.546875 },
  { x: 0.484375, y: 0.546875 },
  { x: 0.484375, y: 0.546875 },
  { x: 0.515625, y: 0.546875 },
  { x: 0.515625, y: 0.546875 },
  { x: 0.546875, y: 0.546875 },
  { x: 0.546875, y: 0.546875 },
  { x: 0.578125, y: 0.546875 },
  { x: 0.578125, y: 0.546875 },
  { x: 0.609375, y: 0.546875 },
  { x: 0.609375, y: 0.546875 },
  { x: 0.640625, y: 0.546875 },
  { x: 0.640625, y: 0.546875 },
  { x: 0.671875, y: 0.546875 },
  { x: 0.671875, y: 0.546875 },
  { x: 0.703125, y: 0.546875 },
  { x: 0.703125, y: 0.546875 },
  { x: 0.734375, y: 0.546875 },
  { x: 0.734375, y: 0.546875 },
  { x: 0.765625, y: 0.546875 },
  { x: 0.765625, y: 0.546875 },
  { x: 0.796875, y: 0.546875 },
  { x: 0.796875, y: 0.546875 },
  { x: 0.828125, y: 0.546875 },
  { x: 0.828125, y: 0.546875 },
  { x: 0.859375, y: 0.546875 },
  { x: 0.859375, y: 0.546875 },
  { x: 0.890625, y: 0.546875 },
  { x: 0.890625, y: 0.546875 },
  { x: 0.921875, y: 0.546875 },
  { x: 0.921875, y: 0.546875 },
  { x: 0.953125, y: 0.546875 },
  { x: 0.953125, y: 0.546875 },
  { x: 0.984375, y: 0.546875 },
  { x: 0.984375, y: 0.546875 },
  { x: 0.015625, y: 0.578125 },
  { x: 0.015625, y: 0.578125 },
  { x: 0.046875, y: 0.578125 },
  { x: 0.046875, y: 0.578125 },
  { x: 0.078125, y: 0.578125 },
  { x: 0.078125, y: 0.578125 },
  { x: 0.109375, y: 0.578125 },
  { x: 0.109375, y: 0.578125 },
  { x: 0.140625, y: 0.578125 },
  { x: 0.140625, y: 0.578125 },
  { x: 0.171875, y: 0.578125 },
  { x: 0.171875, y: 0.578125 },
  { x: 0.203125, y: 0.578125 },
  { x: 0.203125, y: 0.578125 },
  { x: 0.234375, y: 0.578125 },
  { x: 0.234375, y: 0.578125 },
  { x: 0.265625, y: 0.578125 },
  { x: 0.265625, y: 0.578125 },
  { x: 0.296875, y: 0.578125 },
  { x: 0.296875, y: 0.578125 },
  { x: 0.328125, y: 0.578125 },
  { x: 0.328125, y: 0.578125 },
  { x: 0.359375, y: 0.578125 },
  { x: 0.359375, y: 0.578125 },
  { x: 0.390625, y: 0.578125 },
  { x: 0.390625, y: 0.578125 },
  { x: 0.421875, y: 0.578125 },
  { x: 0.421875, y: 0.578125 },
  { x: 0.453125, y: 0.578125 },
  { x: 0.453125, y: 0.578125 },
  { x: 0.484375, y: 0.578125 },
  { x: 0.484375, y: 0.578125 },
  { x: 0.515625, y: 0.578125 },
  { x: 0.515625, y: 0.578125 },
  { x: 0.546875, y: 0.578125 },
  { x: 0.546875, y: 0.578125 },
  { x: 0.578125, y: 0.578125 },
  { x: 0.578125, y: 0.578125 },
  { x: 0.609375, y: 0.578125 },
  { x: 0.609375, y: 0.578125 },
  { x: 0.640625, y: 0.578125 },
  { x: 0.640625, y: 0.578125 },
  { x: 0.671875, y: 0.578125 },
  { x: 0.671875, y: 0.578125 },
  { x: 0.703125, y: 0.578125 },
  { x: 0.703125, y: 0.578125 },
  { x: 0.734375, y: 0.578125 },
  { x: 0.734375, y: 0.578125 },
  { x: 0.765625, y: 0.578125 },
  { x: 0.765625, y: 0.578125 },
  { x: 0.796875, y: 0.578125 },
  { x: 0.796875, y: 0.578125 },
  { x: 0.828125, y: 0.578125 },
  { x: 0.828125, y: 0.578125 },
  { x: 0.859375, y: 0.578125 },
  { x: 0.859375, y: 0.578125 },
  { x: 0.890625, y: 0.578125 },
  { x: 0.890625, y: 0.578125 },
  { x: 0.921875, y: 0.578125 },
  { x: 0.921875, y: 0.578125 },
  { x: 0.953125, y: 0.578125 },
  { x: 0.953125, y: 0.578125 },
  { x: 0.984375, y: 0.578125 },
  { x: 0.984375, y: 0.578125 },
  { x: 0.015625, y: 0.609375 },
  { x: 0.015625, y: 0.609375 },
  { x: 0.046875, y: 0.609375 },
  { x: 0.046875, y: 0.609375 },
  { x: 0.078125, y: 0.609375 },
  { x: 0.078125, y: 0.609375 },
  { x: 0.109375, y: 0.609375 },
  { x: 0.109375, y: 0.609375 },
  { x: 0.140625, y: 0.609375 },
  { x: 0.140625, y: 0.609375 },
  { x: 0.171875, y: 0.609375 },
  { x: 0.171875, y: 0.609375 },
  { x: 0.203125, y: 0.609375 },
  { x: 0.203125, y: 0.609375 },
  { x: 0.234375, y: 0.609375 },
  { x: 0.234375, y: 0.609375 },
  { x: 0.265625, y: 0.609375 },
  { x: 0.265625, y: 0.609375 },
  { x: 0.296875, y: 0.609375 },
  { x: 0.296875, y: 0.609375 },
  { x: 0.328125, y: 0.609375 },
  { x: 0.328125, y: 0.609375 },
  { x: 0.359375, y: 0.609375 },
  { x: 0.359375, y: 0.609375 },
  { x: 0.390625, y: 0.609375 },
  { x: 0.390625, y: 0.609375 },
  { x: 0.421875, y: 0.609375 },
  { x: 0.421875, y: 0.609375 },
  { x: 0.453125, y: 0.609375 },
  { x: 0.453125, y: 0.609375 },
  { x: 0.484375, y: 0.609375 },
  { x: 0.484375, y: 0.609375 },
  { x: 0.515625, y: 0.609375 },
  { x: 0.515625, y: 0.609375 },
  { x: 0.546875, y: 0.609375 },
  { x: 0.546875, y: 0.609375 },
  { x: 0.578125, y: 0.609375 },
  { x: 0.578125, y: 0.609375 },
  { x: 0.609375, y: 0.609375 },
  { x: 0.609375, y: 0.609375 },
  { x: 0.640625, y: 0.609375 },
  { x: 0.640625, y: 0.609375 },
  { x: 0.671875, y: 0.609375 },
  { x: 0.671875, y: 0.609375 },
  { x: 0.703125, y: 0.609375 },
  { x: 0.703125, y: 0.609375 },
  { x: 0.734375, y: 0.609375 },
  { x: 0.734375, y: 0.609375 },
  { x: 0.765625, y: 0.609375 },
  { x: 0.765625, y: 0.609375 },
  { x: 0.796875, y: 0.609375 },
  { x: 0.796875, y: 0.609375 },
  { x: 0.828125, y: 0.609375 },
  { x: 0.828125, y: 0.609375 },
  { x: 0.859375, y: 0.609375 },
  { x: 0.859375, y: 0.609375 },
  { x: 0.890625, y: 0.609375 },
  { x: 0.890625, y: 0.609375 },
  { x: 0.921875, y: 0.609375 },
  { x: 0.921875, y: 0.609375 },
  { x: 0.953125, y: 0.609375 },
  { x: 0.953125, y: 0.609375 },
  { x: 0.984375, y: 0.609375 },
  { x: 0.984375, y: 0.609375 },
  { x: 0.015625, y: 0.640625 },
  { x: 0.015625, y: 0.640625 },
  { x: 0.046875, y: 0.640625 },
  { x: 0.046875, y: 0.640625 },
  { x: 0.078125, y: 0.640625 },
  { x: 0.078125, y: 0.640625 },
  { x: 0.109375, y: 0.640625 },
  { x: 0.109375, y: 0.640625 },
  { x: 0.140625, y: 0.640625 },
  { x: 0.140625, y: 0.640625 },
  { x: 0.171875, y: 0.640625 },
  { x: 0.171875, y: 0.640625 },
  { x: 0.203125, y: 0.640625 },
  { x: 0.203125, y: 0.640625 },
  { x: 0.234375, y: 0.640625 },
  { x: 0.234375, y: 0.640625 },
  { x: 0.265625, y: 0.640625 },
  { x: 0.265625, y: 0.640625 },
  { x: 0.296875, y: 0.640625 },
  { x: 0.296875, y: 0.640625 },
  { x: 0.328125, y: 0.640625 },
  { x: 0.328125, y: 0.640625 },
  { x: 0.359375, y: 0.640625 },
  { x: 0.359375, y: 0.640625 },
  { x: 0.390625, y: 0.640625 },
  { x: 0.390625, y: 0.640625 },
  { x: 0.421875, y: 0.640625 },
  { x: 0.421875, y: 0.640625 },
  { x: 0.453125, y: 0.640625 },
  { x: 0.453125, y: 0.640625 },
  { x: 0.484375, y: 0.640625 },
  { x: 0.484375, y: 0.640625 },
  { x: 0.515625, y: 0.640625 },
  { x: 0.515625, y: 0.640625 },
  { x: 0.546875, y: 0.640625 },
  { x: 0.546875, y: 0.640625 },
  { x: 0.578125, y: 0.640625 },
  { x: 0.578125, y: 0.640625 },
  { x: 0.609375, y: 0.640625 },
  { x: 0.609375, y: 0.640625 },
  { x: 0.640625, y: 0.640625 },
  { x: 0.640625, y: 0.640625 },
  { x: 0.671875, y: 0.640625 },
  { x: 0.671875, y: 0.640625 },
  { x: 0.703125, y: 0.640625 },
  { x: 0.703125, y: 0.640625 },
  { x: 0.734375, y: 0.640625 },
  { x: 0.734375, y: 0.640625 },
  { x: 0.765625, y: 0.640625 },
  { x: 0.765625, y: 0.640625 },
  { x: 0.796875, y: 0.640625 },
  { x: 0.796875, y: 0.640625 },
  { x: 0.828125, y: 0.640625 },
  { x: 0.828125, y: 0.640625 },
  { x: 0.859375, y: 0.640625 },
  { x: 0.859375, y: 0.640625 },
  { x: 0.890625, y: 0.640625 },
  { x: 0.890625, y: 0.640625 },
  { x: 0.921875, y: 0.640625 },
  { x: 0.921875, y: 0.640625 },
  { x: 0.953125, y: 0.640625 },
  { x: 0.953125, y: 0.640625 },
  { x: 0.984375, y: 0.640625 },
  { x: 0.984375, y: 0.640625 },
  { x: 0.015625, y: 0.671875 },
  { x: 0.015625, y: 0.671875 },
  { x: 0.046875, y: 0.671875 },
  { x: 0.046875, y: 0.671875 },
  { x: 0.078125, y: 0.671875 },
  { x: 0.078125, y: 0.671875 },
  { x: 0.109375, y: 0.671875 },
  { x: 0.109375, y: 0.671875 },
  { x: 0.140625, y: 0.671875 },
  { x: 0.140625, y: 0.671875 },
  { x: 0.171875, y: 0.671875 },
  { x: 0.171875, y: 0.671875 },
  { x: 0.203125, y: 0.671875 },
  { x: 0.203125, y: 0.671875 },
  { x: 0.234375, y: 0.671875 },
  { x: 0.234375, y: 0.671875 },
  { x: 0.265625, y: 0.671875 },
  { x: 0.265625, y: 0.671875 },
  { x: 0.296875, y: 0.671875 },
  { x: 0.296875, y: 0.671875 },
  { x: 0.328125, y: 0.671875 },
  { x: 0.328125, y: 0.671875 },
  { x: 0.359375, y: 0.671875 },
  { x: 0.359375, y: 0.671875 },
  { x: 0.390625, y: 0.671875 },
  { x: 0.390625, y: 0.671875 },
  { x: 0.421875, y: 0.671875 },
  { x: 0.421875, y: 0.671875 },
  { x: 0.453125, y: 0.671875 },
  { x: 0.453125, y: 0.671875 },
  { x: 0.484375, y: 0.671875 },
  { x: 0.484375, y: 0.671875 },
  { x: 0.515625, y: 0.671875 },
  { x: 0.515625, y: 0.671875 },
  { x: 0.546875, y: 0.671875 },
  { x: 0.546875, y: 0.671875 },
  { x: 0.578125, y: 0.671875 },
  { x: 0.578125, y: 0.671875 },
  { x: 0.609375, y: 0.671875 },
  { x: 0.609375, y: 0.671875 },
  { x: 0.640625, y: 0.671875 },
  { x: 0.640625, y: 0.671875 },
  { x: 0.671875, y: 0.671875 },
  { x: 0.671875, y: 0.671875 },
  { x: 0.703125, y: 0.671875 },
  { x: 0.703125, y: 0.671875 },
  { x: 0.734375, y: 0.671875 },
  { x: 0.734375, y: 0.671875 },
  { x: 0.765625, y: 0.671875 },
  { x: 0.765625, y: 0.671875 },
  { x: 0.796875, y: 0.671875 },
  { x: 0.796875, y: 0.671875 },
  { x: 0.828125, y: 0.671875 },
  { x: 0.828125, y: 0.671875 },
  { x: 0.859375, y: 0.671875 },
  { x: 0.859375, y: 0.671875 },
  { x: 0.890625, y: 0.671875 },
  { x: 0.890625, y: 0.671875 },
  { x: 0.921875, y: 0.671875 },
  { x: 0.921875, y: 0.671875 },
  { x: 0.953125, y: 0.671875 },
  { x: 0.953125, y: 0.671875 },
  { x: 0.984375, y: 0.671875 },
  { x: 0.984375, y: 0.671875 },
  { x: 0.015625, y: 0.703125 },
  { x: 0.015625, y: 0.703125 },
  { x: 0.046875, y: 0.703125 },
  { x: 0.046875, y: 0.703125 },
  { x: 0.078125, y: 0.703125 },
  { x: 0.078125, y: 0.703125 },
  { x: 0.109375, y: 0.703125 },
  { x: 0.109375, y: 0.703125 },
  { x: 0.140625, y: 0.703125 },
  { x: 0.140625, y: 0.703125 },
  { x: 0.171875, y: 0.703125 },
  { x: 0.171875, y: 0.703125 },
  { x: 0.203125, y: 0.703125 },
  { x: 0.203125, y: 0.703125 },
  { x: 0.234375, y: 0.703125 },
  { x: 0.234375, y: 0.703125 },
  { x: 0.265625, y: 0.703125 },
  { x: 0.265625, y: 0.703125 },
  { x: 0.296875, y: 0.703125 },
  { x: 0.296875, y: 0.703125 },
  { x: 0.328125, y: 0.703125 },
  { x: 0.328125, y: 0.703125 },
  { x: 0.359375, y: 0.703125 },
  { x: 0.359375, y: 0.703125 },
  { x: 0.390625, y: 0.703125 },
  { x: 0.390625, y: 0.703125 },
  { x: 0.421875, y: 0.703125 },
  { x: 0.421875, y: 0.703125 },
  { x: 0.453125, y: 0.703125 },
  { x: 0.453125, y: 0.703125 },
  { x: 0.484375, y: 0.703125 },
  { x: 0.484375, y: 0.703125 },
  { x: 0.515625, y: 0.703125 },
  { x: 0.515625, y: 0.703125 },
  { x: 0.546875, y: 0.703125 },
  { x: 0.546875, y: 0.703125 },
  { x: 0.578125, y: 0.703125 },
  { x: 0.578125, y: 0.703125 },
  { x: 0.609375, y: 0.703125 },
  { x: 0.609375, y: 0.703125 },
  { x: 0.640625, y: 0.703125 },
  { x: 0.640625, y: 0.703125 },
  { x: 0.671875, y: 0.703125 },
  { x: 0.671875, y: 0.703125 },
  { x: 0.703125, y: 0.703125 },
  { x: 0.703125, y: 0.703125 },
  { x: 0.734375, y: 0.703125 },
  { x: 0.734375, y: 0.703125 },
  { x: 0.765625, y: 0.703125 },
  { x: 0.765625, y: 0.703125 },
  { x: 0.796875, y: 0.703125 },
  { x: 0.796875, y: 0.703125 },
  { x: 0.828125, y: 0.703125 },
  { x: 0.828125, y: 0.703125 },
  { x: 0.859375, y: 0.703125 },
  { x: 0.859375, y: 0.703125 },
  { x: 0.890625, y: 0.703125 },
  { x: 0.890625, y: 0.703125 },
  { x: 0.921875, y: 0.703125 },
  { x: 0.921875, y: 0.703125 },
  { x: 0.953125, y: 0.703125 },
  { x: 0.953125, y: 0.703125 },
  { x: 0.984375, y: 0.703125 },
  { x: 0.984375, y: 0.703125 },
  { x: 0.015625, y: 0.734375 },
  { x: 0.015625, y: 0.734375 },
  { x: 0.046875, y: 0.734375 },
  { x: 0.046875, y: 0.734375 },
  { x: 0.078125, y: 0.734375 },
  { x: 0.078125, y: 0.734375 },
  { x: 0.109375, y: 0.734375 },
  { x: 0.109375, y: 0.734375 },
  { x: 0.140625, y: 0.734375 },
  { x: 0.140625, y: 0.734375 },
  { x: 0.171875, y: 0.734375 },
  { x: 0.171875, y: 0.734375 },
  { x: 0.203125, y: 0.734375 },
  { x: 0.203125, y: 0.734375 },
  { x: 0.234375, y: 0.734375 },
  { x: 0.234375, y: 0.734375 },
  { x: 0.265625, y: 0.734375 },
  { x: 0.265625, y: 0.734375 },
  { x: 0.296875, y: 0.734375 },
  { x: 0.296875, y: 0.734375 },
  { x: 0.328125, y: 0.734375 },
  { x: 0.328125, y: 0.734375 },
  { x: 0.359375, y: 0.734375 },
  { x: 0.359375, y: 0.734375 },
  { x: 0.390625, y: 0.734375 },
  { x: 0.390625, y: 0.734375 },
  { x: 0.421875, y: 0.734375 },
  { x: 0.421875, y: 0.734375 },
  { x: 0.453125, y: 0.734375 },
  { x: 0.453125, y: 0.734375 },
  { x: 0.484375, y: 0.734375 },
  { x: 0.484375, y: 0.734375 },
  { x: 0.515625, y: 0.734375 },
  { x: 0.515625, y: 0.734375 },
  { x: 0.546875, y: 0.734375 },
  { x: 0.546875, y: 0.734375 },
  { x: 0.578125, y: 0.734375 },
  { x: 0.578125, y: 0.734375 },
  { x: 0.609375, y: 0.734375 },
  { x: 0.609375, y: 0.734375 },
  { x: 0.640625, y: 0.734375 },
  { x: 0.640625, y: 0.734375 },
  { x: 0.671875, y: 0.734375 },
  { x: 0.671875, y: 0.734375 },
  { x: 0.703125, y: 0.734375 },
  { x: 0.703125, y: 0.734375 },
  { x: 0.734375, y: 0.734375 },
  { x: 0.734375, y: 0.734375 },
  { x: 0.765625, y: 0.734375 },
  { x: 0.765625, y: 0.734375 },
  { x: 0.796875, y: 0.734375 },
  { x: 0.796875, y: 0.734375 },
  { x: 0.828125, y: 0.734375 },
  { x: 0.828125, y: 0.734375 },
  { x: 0.859375, y: 0.734375 },
  { x: 0.859375, y: 0.734375 },
  { x: 0.890625, y: 0.734375 },
  { x: 0.890625, y: 0.734375 },
  { x: 0.921875, y: 0.734375 },
  { x: 0.921875, y: 0.734375 },
  { x: 0.953125, y: 0.734375 },
  { x: 0.953125, y: 0.734375 },
  { x: 0.984375, y: 0.734375 },
  { x: 0.984375, y: 0.734375 },
  { x: 0.015625, y: 0.765625 },
  { x: 0.015625, y: 0.765625 },
  { x: 0.046875, y: 0.765625 },
  { x: 0.046875, y: 0.765625 },
  { x: 0.078125, y: 0.765625 },
  { x: 0.078125, y: 0.765625 },
  { x: 0.109375, y: 0.765625 },
  { x: 0.109375, y: 0.765625 },
  { x: 0.140625, y: 0.765625 },
  { x: 0.140625, y: 0.765625 },
  { x: 0.171875, y: 0.765625 },
  { x: 0.171875, y: 0.765625 },
  { x: 0.203125, y: 0.765625 },
  { x: 0.203125, y: 0.765625 },
  { x: 0.234375, y: 0.765625 },
  { x: 0.234375, y: 0.765625 },
  { x: 0.265625, y: 0.765625 },
  { x: 0.265625, y: 0.765625 },
  { x: 0.296875, y: 0.765625 },
  { x: 0.296875, y: 0.765625 },
  { x: 0.328125, y: 0.765625 },
  { x: 0.328125, y: 0.765625 },
  { x: 0.359375, y: 0.765625 },
  { x: 0.359375, y: 0.765625 },
  { x: 0.390625, y: 0.765625 },
  { x: 0.390625, y: 0.765625 },
  { x: 0.421875, y: 0.765625 },
  { x: 0.421875, y: 0.765625 },
  { x: 0.453125, y: 0.765625 },
  { x: 0.453125, y: 0.765625 },
  { x: 0.484375, y: 0.765625 },
  { x: 0.484375, y: 0.765625 },
  { x: 0.515625, y: 0.765625 },
  { x: 0.515625, y: 0.765625 },
  { x: 0.546875, y: 0.765625 },
  { x: 0.546875, y: 0.765625 },
  { x: 0.578125, y: 0.765625 },
  { x: 0.578125, y: 0.765625 },
  { x: 0.609375, y: 0.765625 },
  { x: 0.609375, y: 0.765625 },
  { x: 0.640625, y: 0.765625 },
  { x: 0.640625, y: 0.765625 },
  { x: 0.671875, y: 0.765625 },
  { x: 0.671875, y: 0.765625 },
  { x: 0.703125, y: 0.765625 },
  { x: 0.703125, y: 0.765625 },
  { x: 0.734375, y: 0.765625 },
  { x: 0.734375, y: 0.765625 },
  { x: 0.765625, y: 0.765625 },
  { x: 0.765625, y: 0.765625 },
  { x: 0.796875, y: 0.765625 },
  { x: 0.796875, y: 0.765625 },
  { x: 0.828125, y: 0.765625 },
  { x: 0.828125, y: 0.765625 },
  { x: 0.859375, y: 0.765625 },
  { x: 0.859375, y: 0.765625 },
  { x: 0.890625, y: 0.765625 },
  { x: 0.890625, y: 0.765625 },
  { x: 0.921875, y: 0.765625 },
  { x: 0.921875, y: 0.765625 },
  { x: 0.953125, y: 0.765625 },
  { x: 0.953125, y: 0.765625 },
  { x: 0.984375, y: 0.765625 },
  { x: 0.984375, y: 0.765625 },
  { x: 0.015625, y: 0.796875 },
  { x: 0.015625, y: 0.796875 },
  { x: 0.046875, y: 0.796875 },
  { x: 0.046875, y: 0.796875 },
  { x: 0.078125, y: 0.796875 },
  { x: 0.078125, y: 0.796875 },
  { x: 0.109375, y: 0.796875 },
  { x: 0.109375, y: 0.796875 },
  { x: 0.140625, y: 0.796875 },
  { x: 0.140625, y: 0.796875 },
  { x: 0.171875, y: 0.796875 },
  { x: 0.171875, y: 0.796875 },
  { x: 0.203125, y: 0.796875 },
  { x: 0.203125, y: 0.796875 },
  { x: 0.234375, y: 0.796875 },
  { x: 0.234375, y: 0.796875 },
  { x: 0.265625, y: 0.796875 },
  { x: 0.265625, y: 0.796875 },
  { x: 0.296875, y: 0.796875 },
  { x: 0.296875, y: 0.796875 },
  { x: 0.328125, y: 0.796875 },
  { x: 0.328125, y: 0.796875 },
  { x: 0.359375, y: 0.796875 },
  { x: 0.359375, y: 0.796875 },
  { x: 0.390625, y: 0.796875 },
  { x: 0.390625, y: 0.796875 },
  { x: 0.421875, y: 0.796875 },
  { x: 0.421875, y: 0.796875 },
  { x: 0.453125, y: 0.796875 },
  { x: 0.453125, y: 0.796875 },
  { x: 0.484375, y: 0.796875 },
  { x: 0.484375, y: 0.796875 },
  { x: 0.515625, y: 0.796875 },
  { x: 0.515625, y: 0.796875 },
  { x: 0.546875, y: 0.796875 },
  { x: 0.546875, y: 0.796875 },
  { x: 0.578125, y: 0.796875 },
  { x: 0.578125, y: 0.796875 },
  { x: 0.609375, y: 0.796875 },
  { x: 0.609375, y: 0.796875 },
  { x: 0.640625, y: 0.796875 },
  { x: 0.640625, y: 0.796875 },
  { x: 0.671875, y: 0.796875 },
  { x: 0.671875, y: 0.796875 },
  { x: 0.703125, y: 0.796875 },
  { x: 0.703125, y: 0.796875 },
  { x: 0.734375, y: 0.796875 },
  { x: 0.734375, y: 0.796875 },
  { x: 0.765625, y: 0.796875 },
  { x: 0.765625, y: 0.796875 },
  { x: 0.796875, y: 0.796875 },
  { x: 0.796875, y: 0.796875 },
  { x: 0.828125, y: 0.796875 },
  { x: 0.828125, y: 0.796875 },
  { x: 0.859375, y: 0.796875 },
  { x: 0.859375, y: 0.796875 },
  { x: 0.890625, y: 0.796875 },
  { x: 0.890625, y: 0.796875 },
  { x: 0.921875, y: 0.796875 },
  { x: 0.921875, y: 0.796875 },
  { x: 0.953125, y: 0.796875 },
  { x: 0.953125, y: 0.796875 },
  { x: 0.984375, y: 0.796875 },
  { x: 0.984375, y: 0.796875 },
  { x: 0.015625, y: 0.828125 },
  { x: 0.015625, y: 0.828125 },
  { x: 0.046875, y: 0.828125 },
  { x: 0.046875, y: 0.828125 },
  { x: 0.078125, y: 0.828125 },
  { x: 0.078125, y: 0.828125 },
  { x: 0.109375, y: 0.828125 },
  { x: 0.109375, y: 0.828125 },
  { x: 0.140625, y: 0.828125 },
  { x: 0.140625, y: 0.828125 },
  { x: 0.171875, y: 0.828125 },
  { x: 0.171875, y: 0.828125 },
  { x: 0.203125, y: 0.828125 },
  { x: 0.203125, y: 0.828125 },
  { x: 0.234375, y: 0.828125 },
  { x: 0.234375, y: 0.828125 },
  { x: 0.265625, y: 0.828125 },
  { x: 0.265625, y: 0.828125 },
  { x: 0.296875, y: 0.828125 },
  { x: 0.296875, y: 0.828125 },
  { x: 0.328125, y: 0.828125 },
  { x: 0.328125, y: 0.828125 },
  { x: 0.359375, y: 0.828125 },
  { x: 0.359375, y: 0.828125 },
  { x: 0.390625, y: 0.828125 },
  { x: 0.390625, y: 0.828125 },
  { x: 0.421875, y: 0.828125 },
  { x: 0.421875, y: 0.828125 },
  { x: 0.453125, y: 0.828125 },
  { x: 0.453125, y: 0.828125 },
  { x: 0.484375, y: 0.828125 },
  { x: 0.484375, y: 0.828125 },
  { x: 0.515625, y: 0.828125 },
  { x: 0.515625, y: 0.828125 },
  { x: 0.546875, y: 0.828125 },
  { x: 0.546875, y: 0.828125 },
  { x: 0.578125, y: 0.828125 },
  { x: 0.578125, y: 0.828125 },
  { x: 0.609375, y: 0.828125 },
  { x: 0.609375, y: 0.828125 },
  { x: 0.640625, y: 0.828125 },
  { x: 0.640625, y: 0.828125 },
  { x: 0.671875, y: 0.828125 },
  { x: 0.671875, y: 0.828125 },
  { x: 0.703125, y: 0.828125 },
  { x: 0.703125, y: 0.828125 },
  { x: 0.734375, y: 0.828125 },
  { x: 0.734375, y: 0.828125 },
  { x: 0.765625, y: 0.828125 },
  { x: 0.765625, y: 0.828125 },
  { x: 0.796875, y: 0.828125 },
  { x: 0.796875, y: 0.828125 },
  { x: 0.828125, y: 0.828125 },
  { x: 0.828125, y: 0.828125 },
  { x: 0.859375, y: 0.828125 },
  { x: 0.859375, y: 0.828125 },
  { x: 0.890625, y: 0.828125 },
  { x: 0.890625, y: 0.828125 },
  { x: 0.921875, y: 0.828125 },
  { x: 0.921875, y: 0.828125 },
  { x: 0.953125, y: 0.828125 },
  { x: 0.953125, y: 0.828125 },
  { x: 0.984375, y: 0.828125 },
  { x: 0.984375, y: 0.828125 },
  { x: 0.015625, y: 0.859375 },
  { x: 0.015625, y: 0.859375 },
  { x: 0.046875, y: 0.859375 },
  { x: 0.046875, y: 0.859375 },
  { x: 0.078125, y: 0.859375 },
  { x: 0.078125, y: 0.859375 },
  { x: 0.109375, y: 0.859375 },
  { x: 0.109375, y: 0.859375 },
  { x: 0.140625, y: 0.859375 },
  { x: 0.140625, y: 0.859375 },
  { x: 0.171875, y: 0.859375 },
  { x: 0.171875, y: 0.859375 },
  { x: 0.203125, y: 0.859375 },
  { x: 0.203125, y: 0.859375 },
  { x: 0.234375, y: 0.859375 },
  { x: 0.234375, y: 0.859375 },
  { x: 0.265625, y: 0.859375 },
  { x: 0.265625, y: 0.859375 },
  { x: 0.296875, y: 0.859375 },
  { x: 0.296875, y: 0.859375 },
  { x: 0.328125, y: 0.859375 },
  { x: 0.328125, y: 0.859375 },
  { x: 0.359375, y: 0.859375 },
  { x: 0.359375, y: 0.859375 },
  { x: 0.390625, y: 0.859375 },
  { x: 0.390625, y: 0.859375 },
  { x: 0.421875, y: 0.859375 },
  { x: 0.421875, y: 0.859375 },
  { x: 0.453125, y: 0.859375 },
  { x: 0.453125, y: 0.859375 },
  { x: 0.484375, y: 0.859375 },
  { x: 0.484375, y: 0.859375 },
  { x: 0.515625, y: 0.859375 },
  { x: 0.515625, y: 0.859375 },
  { x: 0.546875, y: 0.859375 },
  { x: 0.546875, y: 0.859375 },
  { x: 0.578125, y: 0.859375 },
  { x: 0.578125, y: 0.859375 },
  { x: 0.609375, y: 0.859375 },
  { x: 0.609375, y: 0.859375 },
  { x: 0.640625, y: 0.859375 },
  { x: 0.640625, y: 0.859375 },
  { x: 0.671875, y: 0.859375 },
  { x: 0.671875, y: 0.859375 },
  { x: 0.703125, y: 0.859375 },
  { x: 0.703125, y: 0.859375 },
  { x: 0.734375, y: 0.859375 },
  { x: 0.734375, y: 0.859375 },
  { x: 0.765625, y: 0.859375 },
  { x: 0.765625, y: 0.859375 },
  { x: 0.796875, y: 0.859375 },
  { x: 0.796875, y: 0.859375 },
  { x: 0.828125, y: 0.859375 },
  { x: 0.828125, y: 0.859375 },
  { x: 0.859375, y: 0.859375 },
  { x: 0.859375, y: 0.859375 },
  { x: 0.890625, y: 0.859375 },
  { x: 0.890625, y: 0.859375 },
  { x: 0.921875, y: 0.859375 },
  { x: 0.921875, y: 0.859375 },
  { x: 0.953125, y: 0.859375 },
  { x: 0.953125, y: 0.859375 },
  { x: 0.984375, y: 0.859375 },
  { x: 0.984375, y: 0.859375 },
  { x: 0.015625, y: 0.890625 },
  { x: 0.015625, y: 0.890625 },
  { x: 0.046875, y: 0.890625 },
  { x: 0.046875, y: 0.890625 },
  { x: 0.078125, y: 0.890625 },
  { x: 0.078125, y: 0.890625 },
  { x: 0.109375, y: 0.890625 },
  { x: 0.109375, y: 0.890625 },
  { x: 0.140625, y: 0.890625 },
  { x: 0.140625, y: 0.890625 },
  { x: 0.171875, y: 0.890625 },
  { x: 0.171875, y: 0.890625 },
  { x: 0.203125, y: 0.890625 },
  { x: 0.203125, y: 0.890625 },
  { x: 0.234375, y: 0.890625 },
  { x: 0.234375, y: 0.890625 },
  { x: 0.265625, y: 0.890625 },
  { x: 0.265625, y: 0.890625 },
  { x: 0.296875, y: 0.890625 },
  { x: 0.296875, y: 0.890625 },
  { x: 0.328125, y: 0.890625 },
  { x: 0.328125, y: 0.890625 },
  { x: 0.359375, y: 0.890625 },
  { x: 0.359375, y: 0.890625 },
  { x: 0.390625, y: 0.890625 },
  { x: 0.390625, y: 0.890625 },
  { x: 0.421875, y: 0.890625 },
  { x: 0.421875, y: 0.890625 },
  { x: 0.453125, y: 0.890625 },
  { x: 0.453125, y: 0.890625 },
  { x: 0.484375, y: 0.890625 },
  { x: 0.484375, y: 0.890625 },
  { x: 0.515625, y: 0.890625 },
  { x: 0.515625, y: 0.890625 },
  { x: 0.546875, y: 0.890625 },
  { x: 0.546875, y: 0.890625 },
  { x: 0.578125, y: 0.890625 },
  { x: 0.578125, y: 0.890625 },
  { x: 0.609375, y: 0.890625 },
  { x: 0.609375, y: 0.890625 },
  { x: 0.640625, y: 0.890625 },
  { x: 0.640625, y: 0.890625 },
  { x: 0.671875, y: 0.890625 },
  { x: 0.671875, y: 0.890625 },
  { x: 0.703125, y: 0.890625 },
  { x: 0.703125, y: 0.890625 },
  { x: 0.734375, y: 0.890625 },
  { x: 0.734375, y: 0.890625 },
  { x: 0.765625, y: 0.890625 },
  { x: 0.765625, y: 0.890625 },
  { x: 0.796875, y: 0.890625 },
  { x: 0.796875, y: 0.890625 },
  { x: 0.828125, y: 0.890625 },
  { x: 0.828125, y: 0.890625 },
  { x: 0.859375, y: 0.890625 },
  { x: 0.859375, y: 0.890625 },
  { x: 0.890625, y: 0.890625 },
  { x: 0.890625, y: 0.890625 },
  { x: 0.921875, y: 0.890625 },
  { x: 0.921875, y: 0.890625 },
  { x: 0.953125, y: 0.890625 },
  { x: 0.953125, y: 0.890625 },
  { x: 0.984375, y: 0.890625 },
  { x: 0.984375, y: 0.890625 },
  { x: 0.015625, y: 0.921875 },
  { x: 0.015625, y: 0.921875 },
  { x: 0.046875, y: 0.921875 },
  { x: 0.046875, y: 0.921875 },
  { x: 0.078125, y: 0.921875 },
  { x: 0.078125, y: 0.921875 },
  { x: 0.109375, y: 0.921875 },
  { x: 0.109375, y: 0.921875 },
  { x: 0.140625, y: 0.921875 },
  { x: 0.140625, y: 0.921875 },
  { x: 0.171875, y: 0.921875 },
  { x: 0.171875, y: 0.921875 },
  { x: 0.203125, y: 0.921875 },
  { x: 0.203125, y: 0.921875 },
  { x: 0.234375, y: 0.921875 },
  { x: 0.234375, y: 0.921875 },
  { x: 0.265625, y: 0.921875 },
  { x: 0.265625, y: 0.921875 },
  { x: 0.296875, y: 0.921875 },
  { x: 0.296875, y: 0.921875 },
  { x: 0.328125, y: 0.921875 },
  { x: 0.328125, y: 0.921875 },
  { x: 0.359375, y: 0.921875 },
  { x: 0.359375, y: 0.921875 },
  { x: 0.390625, y: 0.921875 },
  { x: 0.390625, y: 0.921875 },
  { x: 0.421875, y: 0.921875 },
  { x: 0.421875, y: 0.921875 },
  { x: 0.453125, y: 0.921875 },
  { x: 0.453125, y: 0.921875 },
  { x: 0.484375, y: 0.921875 },
  { x: 0.484375, y: 0.921875 },
  { x: 0.515625, y: 0.921875 },
  { x: 0.515625, y: 0.921875 },
  { x: 0.546875, y: 0.921875 },
  { x: 0.546875, y: 0.921875 },
  { x: 0.578125, y: 0.921875 },
  { x: 0.578125, y: 0.921875 },
  { x: 0.609375, y: 0.921875 },
  { x: 0.609375, y: 0.921875 },
  { x: 0.640625, y: 0.921875 },
  { x: 0.640625, y: 0.921875 },
  { x: 0.671875, y: 0.921875 },
  { x: 0.671875, y: 0.921875 },
  { x: 0.703125, y: 0.921875 },
  { x: 0.703125, y: 0.921875 },
  { x: 0.734375, y: 0.921875 },
  { x: 0.734375, y: 0.921875 },
  { x: 0.765625, y: 0.921875 },
  { x: 0.765625, y: 0.921875 },
  { x: 0.796875, y: 0.921875 },
  { x: 0.796875, y: 0.921875 },
  { x: 0.828125, y: 0.921875 },
  { x: 0.828125, y: 0.921875 },
  { x: 0.859375, y: 0.921875 },
  { x: 0.859375, y: 0.921875 },
  { x: 0.890625, y: 0.921875 },
  { x: 0.890625, y: 0.921875 },
  { x: 0.921875, y: 0.921875 },
  { x: 0.921875, y: 0.921875 },
  { x: 0.953125, y: 0.921875 },
  { x: 0.953125, y: 0.921875 },
  { x: 0.984375, y: 0.921875 },
  { x: 0.984375, y: 0.921875 },
  { x: 0.015625, y: 0.953125 },
  { x: 0.015625, y: 0.953125 },
  { x: 0.046875, y: 0.953125 },
  { x: 0.046875, y: 0.953125 },
  { x: 0.078125, y: 0.953125 },
  { x: 0.078125, y: 0.953125 },
  { x: 0.109375, y: 0.953125 },
  { x: 0.109375, y: 0.953125 },
  { x: 0.140625, y: 0.953125 },
  { x: 0.140625, y: 0.953125 },
  { x: 0.171875, y: 0.953125 },
  { x: 0.171875, y: 0.953125 },
  { x: 0.203125, y: 0.953125 },
  { x: 0.203125, y: 0.953125 },
  { x: 0.234375, y: 0.953125 },
  { x: 0.234375, y: 0.953125 },
  { x: 0.265625, y: 0.953125 },
  { x: 0.265625, y: 0.953125 },
  { x: 0.296875, y: 0.953125 },
  { x: 0.296875, y: 0.953125 },
  { x: 0.328125, y: 0.953125 },
  { x: 0.328125, y: 0.953125 },
  { x: 0.359375, y: 0.953125 },
  { x: 0.359375, y: 0.953125 },
  { x: 0.390625, y: 0.953125 },
  { x: 0.390625, y: 0.953125 },
  { x: 0.421875, y: 0.953125 },
  { x: 0.421875, y: 0.953125 },
  { x: 0.453125, y: 0.953125 },
  { x: 0.453125, y: 0.953125 },
  { x: 0.484375, y: 0.953125 },
  { x: 0.484375, y: 0.953125 },
  { x: 0.515625, y: 0.953125 },
  { x: 0.515625, y: 0.953125 },
  { x: 0.546875, y: 0.953125 },
  { x: 0.546875, y: 0.953125 },
  { x: 0.578125, y: 0.953125 },
  { x: 0.578125, y: 0.953125 },
  { x: 0.609375, y: 0.953125 },
  { x: 0.609375, y: 0.953125 },
  { x: 0.640625, y: 0.953125 },
  { x: 0.640625, y: 0.953125 },
  { x: 0.671875, y: 0.953125 },
  { x: 0.671875, y: 0.953125 },
  { x: 0.703125, y: 0.953125 },
  { x: 0.703125, y: 0.953125 },
  { x: 0.734375, y: 0.953125 },
  { x: 0.734375, y: 0.953125 },
  { x: 0.765625, y: 0.953125 },
  { x: 0.765625, y: 0.953125 },
  { x: 0.796875, y: 0.953125 },
  { x: 0.796875, y: 0.953125 },
  { x: 0.828125, y: 0.953125 },
  { x: 0.828125, y: 0.953125 },
  { x: 0.859375, y: 0.953125 },
  { x: 0.859375, y: 0.953125 },
  { x: 0.890625, y: 0.953125 },
  { x: 0.890625, y: 0.953125 },
  { x: 0.921875, y: 0.953125 },
  { x: 0.921875, y: 0.953125 },
  { x: 0.953125, y: 0.953125 },
  { x: 0.953125, y: 0.953125 },
  { x: 0.984375, y: 0.953125 },
  { x: 0.984375, y: 0.953125 },
  { x: 0.015625, y: 0.984375 },
  { x: 0.015625, y: 0.984375 },
  { x: 0.046875, y: 0.984375 },
  { x: 0.046875, y: 0.984375 },
  { x: 0.078125, y: 0.984375 },
  { x: 0.078125, y: 0.984375 },
  { x: 0.109375, y: 0.984375 },
  { x: 0.109375, y: 0.984375 },
  { x: 0.140625, y: 0.984375 },
  { x: 0.140625, y: 0.984375 },
  { x: 0.171875, y: 0.984375 },
  { x: 0.171875, y: 0.984375 },
  { x: 0.203125, y: 0.984375 },
  { x: 0.203125, y: 0.984375 },
  { x: 0.234375, y: 0.984375 },
  { x: 0.234375, y: 0.984375 },
  { x: 0.265625, y: 0.984375 },
  { x: 0.265625, y: 0.984375 },
  { x: 0.296875, y: 0.984375 },
  { x: 0.296875, y: 0.984375 },
  { x: 0.328125, y: 0.984375 },
  { x: 0.328125, y: 0.984375 },
  { x: 0.359375, y: 0.984375 },
  { x: 0.359375, y: 0.984375 },
  { x: 0.390625, y: 0.984375 },
  { x: 0.390625, y: 0.984375 },
  { x: 0.421875, y: 0.984375 },
  { x: 0.421875, y: 0.984375 },
  { x: 0.453125, y: 0.984375 },
  { x: 0.453125, y: 0.984375 },
  { x: 0.484375, y: 0.984375 },
  { x: 0.484375, y: 0.984375 },
  { x: 0.515625, y: 0.984375 },
  { x: 0.515625, y: 0.984375 },
  { x: 0.546875, y: 0.984375 },
  { x: 0.546875, y: 0.984375 },
  { x: 0.578125, y: 0.984375 },
  { x: 0.578125, y: 0.984375 },
  { x: 0.609375, y: 0.984375 },
  { x: 0.609375, y: 0.984375 },
  { x: 0.640625, y: 0.984375 },
  { x: 0.640625, y: 0.984375 },
  { x: 0.671875, y: 0.984375 },
  { x: 0.671875, y: 0.984375 },
  { x: 0.703125, y: 0.984375 },
  { x: 0.703125, y: 0.984375 },
  { x: 0.734375, y: 0.984375 },
  { x: 0.734375, y: 0.984375 },
  { x: 0.765625, y: 0.984375 },
  { x: 0.765625, y: 0.984375 },
  { x: 0.796875, y: 0.984375 },
  { x: 0.796875, y: 0.984375 },
  { x: 0.828125, y: 0.984375 },
  { x: 0.828125, y: 0.984375 },
  { x: 0.859375, y: 0.984375 },
  { x: 0.859375, y: 0.984375 },
  { x: 0.890625, y: 0.984375 },
  { x: 0.890625, y: 0.984375 },
  { x: 0.921875, y: 0.984375 },
  { x: 0.921875, y: 0.984375 },
  { x: 0.953125, y: 0.984375 },
  { x: 0.953125, y: 0.984375 },
  { x: 0.984375, y: 0.984375 },
  { x: 0.984375, y: 0.984375 },
  { x: 0.03125, y: 0.03125 },
  { x: 0.03125, y: 0.03125 },
  { x: 0.09375, y: 0.03125 },
  { x: 0.09375, y: 0.03125 },
  { x: 0.15625, y: 0.03125 },
  { x: 0.15625, y: 0.03125 },
  { x: 0.21875, y: 0.03125 },
  { x: 0.21875, y: 0.03125 },
  { x: 0.28125, y: 0.03125 },
  { x: 0.28125, y: 0.03125 },
  { x: 0.34375, y: 0.03125 },
  { x: 0.34375, y: 0.03125 },
  { x: 0.40625, y: 0.03125 },
  { x: 0.40625, y: 0.03125 },
  { x: 0.46875, y: 0.03125 },
  { x: 0.46875, y: 0.03125 },
  { x: 0.53125, y: 0.03125 },
  { x: 0.53125, y: 0.03125 },
  { x: 0.59375, y: 0.03125 },
  { x: 0.59375, y: 0.03125 },
  { x: 0.65625, y: 0.03125 },
  { x: 0.65625, y: 0.03125 },
  { x: 0.71875, y: 0.03125 },
  { x: 0.71875, y: 0.03125 },
  { x: 0.78125, y: 0.03125 },
  { x: 0.78125, y: 0.03125 },
  { x: 0.84375, y: 0.03125 },
  { x: 0.84375, y: 0.03125 },
  { x: 0.90625, y: 0.03125 },
  { x: 0.90625, y: 0.03125 },
  { x: 0.96875, y: 0.03125 },
  { x: 0.96875, y: 0.03125 },
  { x: 0.03125, y: 0.09375 },
  { x: 0.03125, y: 0.09375 },
  { x: 0.09375, y: 0.09375 },
  { x: 0.09375, y: 0.09375 },
  { x: 0.15625, y: 0.09375 },
  { x: 0.15625, y: 0.09375 },
  { x: 0.21875, y: 0.09375 },
  { x: 0.21875, y: 0.09375 },
  { x: 0.28125, y: 0.09375 },
  { x: 0.28125, y: 0.09375 },
  { x: 0.34375, y: 0.09375 },
  { x: 0.34375, y: 0.09375 },
  { x: 0.40625, y: 0.09375 },
  { x: 0.40625, y: 0.09375 },
  { x: 0.46875, y: 0.09375 },
  { x: 0.46875, y: 0.09375 },
  { x: 0.53125, y: 0.09375 },
  { x: 0.53125, y: 0.09375 },
  { x: 0.59375, y: 0.09375 },
  { x: 0.59375, y: 0.09375 },
  { x: 0.65625, y: 0.09375 },
  { x: 0.65625, y: 0.09375 },
  { x: 0.71875, y: 0.09375 },
  { x: 0.71875, y: 0.09375 },
  { x: 0.78125, y: 0.09375 },
  { x: 0.78125, y: 0.09375 },
  { x: 0.84375, y: 0.09375 },
  { x: 0.84375, y: 0.09375 },
  { x: 0.90625, y: 0.09375 },
  { x: 0.90625, y: 0.09375 },
  { x: 0.96875, y: 0.09375 },
  { x: 0.96875, y: 0.09375 },
  { x: 0.03125, y: 0.15625 },
  { x: 0.03125, y: 0.15625 },
  { x: 0.09375, y: 0.15625 },
  { x: 0.09375, y: 0.15625 },
  { x: 0.15625, y: 0.15625 },
  { x: 0.15625, y: 0.15625 },
  { x: 0.21875, y: 0.15625 },
  { x: 0.21875, y: 0.15625 },
  { x: 0.28125, y: 0.15625 },
  { x: 0.28125, y: 0.15625 },
  { x: 0.34375, y: 0.15625 },
  { x: 0.34375, y: 0.15625 },
  { x: 0.40625, y: 0.15625 },
  { x: 0.40625, y: 0.15625 },
  { x: 0.46875, y: 0.15625 },
  { x: 0.46875, y: 0.15625 },
  { x: 0.53125, y: 0.15625 },
  { x: 0.53125, y: 0.15625 },
  { x: 0.59375, y: 0.15625 },
  { x: 0.59375, y: 0.15625 },
  { x: 0.65625, y: 0.15625 },
  { x: 0.65625, y: 0.15625 },
  { x: 0.71875, y: 0.15625 },
  { x: 0.71875, y: 0.15625 },
  { x: 0.78125, y: 0.15625 },
  { x: 0.78125, y: 0.15625 },
  { x: 0.84375, y: 0.15625 },
  { x: 0.84375, y: 0.15625 },
  { x: 0.90625, y: 0.15625 },
  { x: 0.90625, y: 0.15625 },
  { x: 0.96875, y: 0.15625 },
  { x: 0.96875, y: 0.15625 },
  { x: 0.03125, y: 0.21875 },
  { x: 0.03125, y: 0.21875 },
  { x: 0.09375, y: 0.21875 },
  { x: 0.09375, y: 0.21875 },
  { x: 0.15625, y: 0.21875 },
  { x: 0.15625, y: 0.21875 },
  { x: 0.21875, y: 0.21875 },
  { x: 0.21875, y: 0.21875 },
  { x: 0.28125, y: 0.21875 },
  { x: 0.28125, y: 0.21875 },
  { x: 0.34375, y: 0.21875 },
  { x: 0.34375, y: 0.21875 },
  { x: 0.40625, y: 0.21875 },
  { x: 0.40625, y: 0.21875 },
  { x: 0.46875, y: 0.21875 },
  { x: 0.46875, y: 0.21875 },
  { x: 0.53125, y: 0.21875 },
  { x: 0.53125, y: 0.21875 },
  { x: 0.59375, y: 0.21875 },
  { x: 0.59375, y: 0.21875 },
  { x: 0.65625, y: 0.21875 },
  { x: 0.65625, y: 0.21875 },
  { x: 0.71875, y: 0.21875 },
  { x: 0.71875, y: 0.21875 },
  { x: 0.78125, y: 0.21875 },
  { x: 0.78125, y: 0.21875 },
  { x: 0.84375, y: 0.21875 },
  { x: 0.84375, y: 0.21875 },
  { x: 0.90625, y: 0.21875 },
  { x: 0.90625, y: 0.21875 },
  { x: 0.96875, y: 0.21875 },
  { x: 0.96875, y: 0.21875 },
  { x: 0.03125, y: 0.28125 },
  { x: 0.03125, y: 0.28125 },
  { x: 0.09375, y: 0.28125 },
  { x: 0.09375, y: 0.28125 },
  { x: 0.15625, y: 0.28125 },
  { x: 0.15625, y: 0.28125 },
  { x: 0.21875, y: 0.28125 },
  { x: 0.21875, y: 0.28125 },
  { x: 0.28125, y: 0.28125 },
  { x: 0.28125, y: 0.28125 },
  { x: 0.34375, y: 0.28125 },
  { x: 0.34375, y: 0.28125 },
  { x: 0.40625, y: 0.28125 },
  { x: 0.40625, y: 0.28125 },
  { x: 0.46875, y: 0.28125 },
  { x: 0.46875, y: 0.28125 },
  { x: 0.53125, y: 0.28125 },
  { x: 0.53125, y: 0.28125 },
  { x: 0.59375, y: 0.28125 },
  { x: 0.59375, y: 0.28125 },
  { x: 0.65625, y: 0.28125 },
  { x: 0.65625, y: 0.28125 },
  { x: 0.71875, y: 0.28125 },
  { x: 0.71875, y: 0.28125 },
  { x: 0.78125, y: 0.28125 },
  { x: 0.78125, y: 0.28125 },
  { x: 0.84375, y: 0.28125 },
  { x: 0.84375, y: 0.28125 },
  { x: 0.90625, y: 0.28125 },
  { x: 0.90625, y: 0.28125 },
  { x: 0.96875, y: 0.28125 },
  { x: 0.96875, y: 0.28125 },
  { x: 0.03125, y: 0.34375 },
  { x: 0.03125, y: 0.34375 },
  { x: 0.09375, y: 0.34375 },
  { x: 0.09375, y: 0.34375 },
  { x: 0.15625, y: 0.34375 },
  { x: 0.15625, y: 0.34375 },
  { x: 0.21875, y: 0.34375 },
  { x: 0.21875, y: 0.34375 },
  { x: 0.28125, y: 0.34375 },
  { x: 0.28125, y: 0.34375 },
  { x: 0.34375, y: 0.34375 },
  { x: 0.34375, y: 0.34375 },
  { x: 0.40625, y: 0.34375 },
  { x: 0.40625, y: 0.34375 },
  { x: 0.46875, y: 0.34375 },
  { x: 0.46875, y: 0.34375 },
  { x: 0.53125, y: 0.34375 },
  { x: 0.53125, y: 0.34375 },
  { x: 0.59375, y: 0.34375 },
  { x: 0.59375, y: 0.34375 },
  { x: 0.65625, y: 0.34375 },
  { x: 0.65625, y: 0.34375 },
  { x: 0.71875, y: 0.34375 },
  { x: 0.71875, y: 0.34375 },
  { x: 0.78125, y: 0.34375 },
  { x: 0.78125, y: 0.34375 },
  { x: 0.84375, y: 0.34375 },
  { x: 0.84375, y: 0.34375 },
  { x: 0.90625, y: 0.34375 },
  { x: 0.90625, y: 0.34375 },
  { x: 0.96875, y: 0.34375 },
  { x: 0.96875, y: 0.34375 },
  { x: 0.03125, y: 0.40625 },
  { x: 0.03125, y: 0.40625 },
  { x: 0.09375, y: 0.40625 },
  { x: 0.09375, y: 0.40625 },
  { x: 0.15625, y: 0.40625 },
  { x: 0.15625, y: 0.40625 },
  { x: 0.21875, y: 0.40625 },
  { x: 0.21875, y: 0.40625 },
  { x: 0.28125, y: 0.40625 },
  { x: 0.28125, y: 0.40625 },
  { x: 0.34375, y: 0.40625 },
  { x: 0.34375, y: 0.40625 },
  { x: 0.40625, y: 0.40625 },
  { x: 0.40625, y: 0.40625 },
  { x: 0.46875, y: 0.40625 },
  { x: 0.46875, y: 0.40625 },
  { x: 0.53125, y: 0.40625 },
  { x: 0.53125, y: 0.40625 },
  { x: 0.59375, y: 0.40625 },
  { x: 0.59375, y: 0.40625 },
  { x: 0.65625, y: 0.40625 },
  { x: 0.65625, y: 0.40625 },
  { x: 0.71875, y: 0.40625 },
  { x: 0.71875, y: 0.40625 },
  { x: 0.78125, y: 0.40625 },
  { x: 0.78125, y: 0.40625 },
  { x: 0.84375, y: 0.40625 },
  { x: 0.84375, y: 0.40625 },
  { x: 0.90625, y: 0.40625 },
  { x: 0.90625, y: 0.40625 },
  { x: 0.96875, y: 0.40625 },
  { x: 0.96875, y: 0.40625 },
  { x: 0.03125, y: 0.46875 },
  { x: 0.03125, y: 0.46875 },
  { x: 0.09375, y: 0.46875 },
  { x: 0.09375, y: 0.46875 },
  { x: 0.15625, y: 0.46875 },
  { x: 0.15625, y: 0.46875 },
  { x: 0.21875, y: 0.46875 },
  { x: 0.21875, y: 0.46875 },
  { x: 0.28125, y: 0.46875 },
  { x: 0.28125, y: 0.46875 },
  { x: 0.34375, y: 0.46875 },
  { x: 0.34375, y: 0.46875 },
  { x: 0.40625, y: 0.46875 },
  { x: 0.40625, y: 0.46875 },
  { x: 0.46875, y: 0.46875 },
  { x: 0.46875, y: 0.46875 },
  { x: 0.53125, y: 0.46875 },
  { x: 0.53125, y: 0.46875 },
  { x: 0.59375, y: 0.46875 },
  { x: 0.59375, y: 0.46875 },
  { x: 0.65625, y: 0.46875 },
  { x: 0.65625, y: 0.46875 },
  { x: 0.71875, y: 0.46875 },
  { x: 0.71875, y: 0.46875 },
  { x: 0.78125, y: 0.46875 },
  { x: 0.78125, y: 0.46875 },
  { x: 0.84375, y: 0.46875 },
  { x: 0.84375, y: 0.46875 },
  { x: 0.90625, y: 0.46875 },
  { x: 0.90625, y: 0.46875 },
  { x: 0.96875, y: 0.46875 },
  { x: 0.96875, y: 0.46875 },
  { x: 0.03125, y: 0.53125 },
  { x: 0.03125, y: 0.53125 },
  { x: 0.09375, y: 0.53125 },
  { x: 0.09375, y: 0.53125 },
  { x: 0.15625, y: 0.53125 },
  { x: 0.15625, y: 0.53125 },
  { x: 0.21875, y: 0.53125 },
  { x: 0.21875, y: 0.53125 },
  { x: 0.28125, y: 0.53125 },
  { x: 0.28125, y: 0.53125 },
  { x: 0.34375, y: 0.53125 },
  { x: 0.34375, y: 0.53125 },
  { x: 0.40625, y: 0.53125 },
  { x: 0.40625, y: 0.53125 },
  { x: 0.46875, y: 0.53125 },
  { x: 0.46875, y: 0.53125 },
  { x: 0.53125, y: 0.53125 },
  { x: 0.53125, y: 0.53125 },
  { x: 0.59375, y: 0.53125 },
  { x: 0.59375, y: 0.53125 },
  { x: 0.65625, y: 0.53125 },
  { x: 0.65625, y: 0.53125 },
  { x: 0.71875, y: 0.53125 },
  { x: 0.71875, y: 0.53125 },
  { x: 0.78125, y: 0.53125 },
  { x: 0.78125, y: 0.53125 },
  { x: 0.84375, y: 0.53125 },
  { x: 0.84375, y: 0.53125 },
  { x: 0.90625, y: 0.53125 },
  { x: 0.90625, y: 0.53125 },
  { x: 0.96875, y: 0.53125 },
  { x: 0.96875, y: 0.53125 },
  { x: 0.03125, y: 0.59375 },
  { x: 0.03125, y: 0.59375 },
  { x: 0.09375, y: 0.59375 },
  { x: 0.09375, y: 0.59375 },
  { x: 0.15625, y: 0.59375 },
  { x: 0.15625, y: 0.59375 },
  { x: 0.21875, y: 0.59375 },
  { x: 0.21875, y: 0.59375 },
  { x: 0.28125, y: 0.59375 },
  { x: 0.28125, y: 0.59375 },
  { x: 0.34375, y: 0.59375 },
  { x: 0.34375, y: 0.59375 },
  { x: 0.40625, y: 0.59375 },
  { x: 0.40625, y: 0.59375 },
  { x: 0.46875, y: 0.59375 },
  { x: 0.46875, y: 0.59375 },
  { x: 0.53125, y: 0.59375 },
  { x: 0.53125, y: 0.59375 },
  { x: 0.59375, y: 0.59375 },
  { x: 0.59375, y: 0.59375 },
  { x: 0.65625, y: 0.59375 },
  { x: 0.65625, y: 0.59375 },
  { x: 0.71875, y: 0.59375 },
  { x: 0.71875, y: 0.59375 },
  { x: 0.78125, y: 0.59375 },
  { x: 0.78125, y: 0.59375 },
  { x: 0.84375, y: 0.59375 },
  { x: 0.84375, y: 0.59375 },
  { x: 0.90625, y: 0.59375 },
  { x: 0.90625, y: 0.59375 },
  { x: 0.96875, y: 0.59375 },
  { x: 0.96875, y: 0.59375 },
  { x: 0.03125, y: 0.65625 },
  { x: 0.03125, y: 0.65625 },
  { x: 0.09375, y: 0.65625 },
  { x: 0.09375, y: 0.65625 },
  { x: 0.15625, y: 0.65625 },
  { x: 0.15625, y: 0.65625 },
  { x: 0.21875, y: 0.65625 },
  { x: 0.21875, y: 0.65625 },
  { x: 0.28125, y: 0.65625 },
  { x: 0.28125, y: 0.65625 },
  { x: 0.34375, y: 0.65625 },
  { x: 0.34375, y: 0.65625 },
  { x: 0.40625, y: 0.65625 },
  { x: 0.40625, y: 0.65625 },
  { x: 0.46875, y: 0.65625 },
  { x: 0.46875, y: 0.65625 },
  { x: 0.53125, y: 0.65625 },
  { x: 0.53125, y: 0.65625 },
  { x: 0.59375, y: 0.65625 },
  { x: 0.59375, y: 0.65625 },
  { x: 0.65625, y: 0.65625 },
  { x: 0.65625, y: 0.65625 },
  { x: 0.71875, y: 0.65625 },
  { x: 0.71875, y: 0.65625 },
  { x: 0.78125, y: 0.65625 },
  { x: 0.78125, y: 0.65625 },
  { x: 0.84375, y: 0.65625 },
  { x: 0.84375, y: 0.65625 },
  { x: 0.90625, y: 0.65625 },
  { x: 0.90625, y: 0.65625 },
  { x: 0.96875, y: 0.65625 },
  { x: 0.96875, y: 0.65625 },
  { x: 0.03125, y: 0.71875 },
  { x: 0.03125, y: 0.71875 },
  { x: 0.09375, y: 0.71875 },
  { x: 0.09375, y: 0.71875 },
  { x: 0.15625, y: 0.71875 },
  { x: 0.15625, y: 0.71875 },
  { x: 0.21875, y: 0.71875 },
  { x: 0.21875, y: 0.71875 },
  { x: 0.28125, y: 0.71875 },
  { x: 0.28125, y: 0.71875 },
  { x: 0.34375, y: 0.71875 },
  { x: 0.34375, y: 0.71875 },
  { x: 0.40625, y: 0.71875 },
  { x: 0.40625, y: 0.71875 },
  { x: 0.46875, y: 0.71875 },
  { x: 0.46875, y: 0.71875 },
  { x: 0.53125, y: 0.71875 },
  { x: 0.53125, y: 0.71875 },
  { x: 0.59375, y: 0.71875 },
  { x: 0.59375, y: 0.71875 },
  { x: 0.65625, y: 0.71875 },
  { x: 0.65625, y: 0.71875 },
  { x: 0.71875, y: 0.71875 },
  { x: 0.71875, y: 0.71875 },
  { x: 0.78125, y: 0.71875 },
  { x: 0.78125, y: 0.71875 },
  { x: 0.84375, y: 0.71875 },
  { x: 0.84375, y: 0.71875 },
  { x: 0.90625, y: 0.71875 },
  { x: 0.90625, y: 0.71875 },
  { x: 0.96875, y: 0.71875 },
  { x: 0.96875, y: 0.71875 },
  { x: 0.03125, y: 0.78125 },
  { x: 0.03125, y: 0.78125 },
  { x: 0.09375, y: 0.78125 },
  { x: 0.09375, y: 0.78125 },
  { x: 0.15625, y: 0.78125 },
  { x: 0.15625, y: 0.78125 },
  { x: 0.21875, y: 0.78125 },
  { x: 0.21875, y: 0.78125 },
  { x: 0.28125, y: 0.78125 },
  { x: 0.28125, y: 0.78125 },
  { x: 0.34375, y: 0.78125 },
  { x: 0.34375, y: 0.78125 },
  { x: 0.40625, y: 0.78125 },
  { x: 0.40625, y: 0.78125 },
  { x: 0.46875, y: 0.78125 },
  { x: 0.46875, y: 0.78125 },
  { x: 0.53125, y: 0.78125 },
  { x: 0.53125, y: 0.78125 },
  { x: 0.59375, y: 0.78125 },
  { x: 0.59375, y: 0.78125 },
  { x: 0.65625, y: 0.78125 },
  { x: 0.65625, y: 0.78125 },
  { x: 0.71875, y: 0.78125 },
  { x: 0.71875, y: 0.78125 },
  { x: 0.78125, y: 0.78125 },
  { x: 0.78125, y: 0.78125 },
  { x: 0.84375, y: 0.78125 },
  { x: 0.84375, y: 0.78125 },
  { x: 0.90625, y: 0.78125 },
  { x: 0.90625, y: 0.78125 },
  { x: 0.96875, y: 0.78125 },
  { x: 0.96875, y: 0.78125 },
  { x: 0.03125, y: 0.84375 },
  { x: 0.03125, y: 0.84375 },
  { x: 0.09375, y: 0.84375 },
  { x: 0.09375, y: 0.84375 },
  { x: 0.15625, y: 0.84375 },
  { x: 0.15625, y: 0.84375 },
  { x: 0.21875, y: 0.84375 },
  { x: 0.21875, y: 0.84375 },
  { x: 0.28125, y: 0.84375 },
  { x: 0.28125, y: 0.84375 },
  { x: 0.34375, y: 0.84375 },
  { x: 0.34375, y: 0.84375 },
  { x: 0.40625, y: 0.84375 },
  { x: 0.40625, y: 0.84375 },
  { x: 0.46875, y: 0.84375 },
  { x: 0.46875, y: 0.84375 },
  { x: 0.53125, y: 0.84375 },
  { x: 0.53125, y: 0.84375 },
  { x: 0.59375, y: 0.84375 },
  { x: 0.59375, y: 0.84375 },
  { x: 0.65625, y: 0.84375 },
  { x: 0.65625, y: 0.84375 },
  { x: 0.71875, y: 0.84375 },
  { x: 0.71875, y: 0.84375 },
  { x: 0.78125, y: 0.84375 },
  { x: 0.78125, y: 0.84375 },
  { x: 0.84375, y: 0.84375 },
  { x: 0.84375, y: 0.84375 },
  { x: 0.90625, y: 0.84375 },
  { x: 0.90625, y: 0.84375 },
  { x: 0.96875, y: 0.84375 },
  { x: 0.96875, y: 0.84375 },
  { x: 0.03125, y: 0.90625 },
  { x: 0.03125, y: 0.90625 },
  { x: 0.09375, y: 0.90625 },
  { x: 0.09375, y: 0.90625 },
  { x: 0.15625, y: 0.90625 },
  { x: 0.15625, y: 0.90625 },
  { x: 0.21875, y: 0.90625 },
  { x: 0.21875, y: 0.90625 },
  { x: 0.28125, y: 0.90625 },
  { x: 0.28125, y: 0.90625 },
  { x: 0.34375, y: 0.90625 },
  { x: 0.34375, y: 0.90625 },
  { x: 0.40625, y: 0.90625 },
  { x: 0.40625, y: 0.90625 },
  { x: 0.46875, y: 0.90625 },
  { x: 0.46875, y: 0.90625 },
  { x: 0.53125, y: 0.90625 },
  { x: 0.53125, y: 0.90625 },
  { x: 0.59375, y: 0.90625 },
  { x: 0.59375, y: 0.90625 },
  { x: 0.65625, y: 0.90625 },
  { x: 0.65625, y: 0.90625 },
  { x: 0.71875, y: 0.90625 },
  { x: 0.71875, y: 0.90625 },
  { x: 0.78125, y: 0.90625 },
  { x: 0.78125, y: 0.90625 },
  { x: 0.84375, y: 0.90625 },
  { x: 0.84375, y: 0.90625 },
  { x: 0.90625, y: 0.90625 },
  { x: 0.90625, y: 0.90625 },
  { x: 0.96875, y: 0.90625 },
  { x: 0.96875, y: 0.90625 },
  { x: 0.03125, y: 0.96875 },
  { x: 0.03125, y: 0.96875 },
  { x: 0.09375, y: 0.96875 },
  { x: 0.09375, y: 0.96875 },
  { x: 0.15625, y: 0.96875 },
  { x: 0.15625, y: 0.96875 },
  { x: 0.21875, y: 0.96875 },
  { x: 0.21875, y: 0.96875 },
  { x: 0.28125, y: 0.96875 },
  { x: 0.28125, y: 0.96875 },
  { x: 0.34375, y: 0.96875 },
  { x: 0.34375, y: 0.96875 },
  { x: 0.40625, y: 0.96875 },
  { x: 0.40625, y: 0.96875 },
  { x: 0.46875, y: 0.96875 },
  { x: 0.46875, y: 0.96875 },
  { x: 0.53125, y: 0.96875 },
  { x: 0.53125, y: 0.96875 },
  { x: 0.59375, y: 0.96875 },
  { x: 0.59375, y: 0.96875 },
  { x: 0.65625, y: 0.96875 },
  { x: 0.65625, y: 0.96875 },
  { x: 0.71875, y: 0.96875 },
  { x: 0.71875, y: 0.96875 },
  { x: 0.78125, y: 0.96875 },
  { x: 0.78125, y: 0.96875 },
  { x: 0.84375, y: 0.96875 },
  { x: 0.84375, y: 0.96875 },
  { x: 0.90625, y: 0.96875 },
  { x: 0.90625, y: 0.96875 },
  { x: 0.96875, y: 0.96875 },
  { x: 0.96875, y: 0.96875 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 }
];

// src/hand/handposedetector.ts
var HandDetector = class {
  constructor(model18) {
    __publicField(this, "model");
    __publicField(this, "anchors");
    __publicField(this, "anchorsTensor");
    __publicField(this, "inputSize");
    __publicField(this, "inputSizeTensor");
    __publicField(this, "doubleInputSizeTensor");
    this.model = model18;
    this.anchors = anchors2.map((anchor) => [anchor.x, anchor.y]);
    this.anchorsTensor = Yi(this.anchors);
    this.inputSize = this.model && this.model.inputs && this.model.inputs[0].shape ? this.model.inputs[0].shape[2] : 0;
    this.inputSizeTensor = Qt([this.inputSize, this.inputSize]);
    this.doubleInputSizeTensor = Qt([this.inputSize * 2, this.inputSize * 2]);
  }
  normalizeBoxes(boxes) {
    const t = {};
    t.boxOffsets = qe(boxes, [0, 0], [-1, 2]);
    t.boxSizes = qe(boxes, [0, 2], [-1, 2]);
    t.div = xe(t.boxOffsets, this.inputSizeTensor);
    t.boxCenterPoints = ie(t.div, this.anchorsTensor);
    t.halfBoxSizes = xe(t.boxSizes, this.doubleInputSizeTensor);
    t.sub = ge(t.boxCenterPoints, t.halfBoxSizes);
    t.startPoints = V(t.sub, this.inputSizeTensor);
    t.add = ie(t.boxCenterPoints, t.halfBoxSizes);
    t.endPoints = V(t.add, this.inputSizeTensor);
    const res = KE([t.startPoints, t.endPoints], 1);
    Object.keys(t).forEach((tensor) => Re(t[tensor]));
    return res;
  }
  normalizeLandmarks(rawPalmLandmarks, index2) {
    const t = {};
    t.reshape = G(rawPalmLandmarks, [-1, 7, 2]);
    t.div = xe(t.reshape, this.inputSizeTensor);
    t.landmarks = ie(t.div, this.anchors[index2]);
    const res = V(t.landmarks, this.inputSizeTensor);
    Object.keys(t).forEach((tensor) => Re(t[tensor]));
    return res;
  }
  async predict(input, config3) {
    const t = {};
    t.resize = jn.resizeBilinear(input, [this.inputSize, this.inputSize]);
    t.div = xe(t.resize, constants.tf127);
    t.image = ge(t.div, constants.tf1);
    t.batched = this.model.execute(t.image);
    t.predictions = gr(t.batched);
    t.slice = qe(t.predictions, [0, 0], [-1, 1]);
    t.sigmoid = qs(t.slice);
    t.scores = gr(t.sigmoid);
    const scores = await t.scores.data();
    t.boxes = qe(t.predictions, [0, 1], [-1, 4]);
    t.norm = this.normalizeBoxes(t.boxes);
    t.nms = await jn.nonMaxSuppressionAsync(t.norm, t.scores, 3 * config3.hand.maxDetected, config3.hand.iouThreshold, config3.hand.minConfidence);
    const nms = await t.nms.array();
    const hands = [];
    for (const index2 of nms) {
      const p = {};
      p.box = qe(t.norm, [index2, 0], [1, -1]);
      p.slice = qe(t.predictions, [index2, 5], [1, 14]);
      p.norm = this.normalizeLandmarks(p.slice, index2);
      p.palmLandmarks = G(p.norm, [-1, 2]);
      const box = await p.box.data();
      const startPoint = box.slice(0, 2);
      const endPoint = box.slice(2, 4);
      const palmLandmarks = await p.palmLandmarks.array();
      const hand3 = { startPoint, endPoint, palmLandmarks, confidence: scores[index2] };
      const scaled = scaleBoxCoordinates2(hand3, [input.shape[2] / this.inputSize, input.shape[1] / this.inputSize]);
      hands.push(scaled);
      Object.keys(p).forEach((tensor) => Re(p[tensor]));
    }
    Object.keys(t).forEach((tensor) => Re(t[tensor]));
    return hands;
  }
};

// src/hand/handposepipeline.ts
var palmBoxEnlargeFactor = 5;
var handBoxEnlargeFactor = 1.65;
var palmLandmarkIds = [0, 5, 9, 13, 17, 1, 2];
var palmLandmarksPalmBase = 0;
var palmLandmarksMiddleFingerBase = 2;
var lastTime11 = 0;
var HandPipeline = class {
  constructor(handDetector, handPoseModel2) {
    __publicField(this, "handDetector");
    __publicField(this, "handPoseModel");
    __publicField(this, "inputSize");
    __publicField(this, "storedBoxes");
    __publicField(this, "skipped");
    __publicField(this, "detectedHands");
    this.handDetector = handDetector;
    this.handPoseModel = handPoseModel2;
    this.inputSize = this.handPoseModel && this.handPoseModel.inputs[0].shape ? this.handPoseModel.inputs[0].shape[2] : 0;
    this.storedBoxes = [];
    this.skipped = Number.MAX_SAFE_INTEGER;
    this.detectedHands = 0;
  }
  calculateLandmarksBoundingBox(landmarks) {
    const xs2 = landmarks.map((d) => d[0]);
    const ys2 = landmarks.map((d) => d[1]);
    const startPoint = [Math.min(...xs2), Math.min(...ys2)];
    const endPoint = [Math.max(...xs2), Math.max(...ys2)];
    return { startPoint, endPoint };
  }
  getBoxForPalmLandmarks(palmLandmarks, rotationMatrix) {
    const rotatedPalmLandmarks = palmLandmarks.map((coord) => rotatePoint2([...coord, 1], rotationMatrix));
    const boxAroundPalm = this.calculateLandmarksBoundingBox(rotatedPalmLandmarks);
    return enlargeBox2(squarifyBox2(boxAroundPalm), palmBoxEnlargeFactor);
  }
  getBoxForHandLandmarks(landmarks) {
    const boundingBox = this.calculateLandmarksBoundingBox(landmarks);
    const boxAroundHand = enlargeBox2(squarifyBox2(boundingBox), handBoxEnlargeFactor);
    boxAroundHand.palmLandmarks = [];
    for (let i = 0; i < palmLandmarkIds.length; i++) {
      boxAroundHand.palmLandmarks.push(landmarks[palmLandmarkIds[i]].slice(0, 2));
    }
    return boxAroundHand;
  }
  transformRawCoords(rawCoords, box2, angle, rotationMatrix) {
    const boxSize = getBoxSize2(box2);
    const scaleFactor = [boxSize[0] / this.inputSize, boxSize[1] / this.inputSize, (boxSize[0] + boxSize[1]) / this.inputSize / 2];
    const coordsScaled = rawCoords.map((coord) => [
      scaleFactor[0] * (coord[0] - this.inputSize / 2),
      scaleFactor[1] * (coord[1] - this.inputSize / 2),
      scaleFactor[2] * coord[2]
    ]);
    const coordsRotationMatrix = buildRotationMatrix2(angle, [0, 0]);
    const coordsRotated = coordsScaled.map((coord) => {
      const rotated = rotatePoint2(coord, coordsRotationMatrix);
      return [...rotated, coord[2]];
    });
    const inverseRotationMatrix = invertTransformMatrix2(rotationMatrix);
    const boxCenter = [...getBoxCenter2(box2), 1];
    const originalBoxCenter = [
      dot2(boxCenter, inverseRotationMatrix[0]),
      dot2(boxCenter, inverseRotationMatrix[1])
    ];
    return coordsRotated.map((coord) => [
      Math.trunc(coord[0] + originalBoxCenter[0]),
      Math.trunc(coord[1] + originalBoxCenter[1]),
      Math.trunc(coord[2])
    ]);
  }
  async estimateHands(image, config3) {
    let useFreshBox = false;
    let boxes;
    const skipTime = (config3.hand.skipTime || 0) > now() - lastTime11;
    const skipFrame = this.skipped < (config3.hand.skipFrames || 0);
    if (config3.skipAllowed && skipTime && skipFrame) {
      boxes = await this.handDetector.predict(image, config3);
      this.skipped = 0;
    }
    if (config3.skipAllowed)
      this.skipped++;
    if (boxes && boxes.length > 0 && (boxes.length !== this.detectedHands && this.detectedHands !== config3.hand.maxDetected || !config3.hand.landmarks)) {
      this.detectedHands = 0;
      this.storedBoxes = [...boxes];
      if (this.storedBoxes.length > 0)
        useFreshBox = true;
    }
    const hands = [];
    for (let i = 0; i < this.storedBoxes.length; i++) {
      const currentBox = this.storedBoxes[i];
      if (!currentBox)
        continue;
      if (config3.hand.landmarks) {
        const angle = config3.hand.rotation ? computeRotation2(currentBox.palmLandmarks[palmLandmarksPalmBase], currentBox.palmLandmarks[palmLandmarksMiddleFingerBase]) : 0;
        const palmCenter = getBoxCenter2(currentBox);
        const palmCenterNormalized = [palmCenter[0] / image.shape[2], palmCenter[1] / image.shape[1]];
        const rotatedImage = config3.hand.rotation && env.kernels.includes("rotatewithoffset") ? jn.rotateWithOffset(image, angle, 0, palmCenterNormalized) : image.clone();
        const rotationMatrix = buildRotationMatrix2(-angle, palmCenter);
        const newBox = useFreshBox ? this.getBoxForPalmLandmarks(currentBox.palmLandmarks, rotationMatrix) : currentBox;
        const croppedInput = cutBoxFromImageAndResize(newBox, rotatedImage, [this.inputSize, this.inputSize]);
        const handImage = xe(croppedInput, constants.tf255);
        Re(croppedInput);
        Re(rotatedImage);
        const [confidenceT, keypoints] = this.handPoseModel.execute(handImage);
        lastTime11 = now();
        Re(handImage);
        const confidence = (await confidenceT.data())[0];
        Re(confidenceT);
        if (confidence >= config3.hand.minConfidence / 4) {
          const keypointsReshaped = G(keypoints, [-1, 3]);
          const rawCoords = await keypointsReshaped.array();
          Re(keypoints);
          Re(keypointsReshaped);
          const coords = this.transformRawCoords(rawCoords, newBox, angle, rotationMatrix);
          const nextBoundingBox = this.getBoxForHandLandmarks(coords);
          this.storedBoxes[i] = { ...nextBoundingBox, confidence };
          const result = {
            landmarks: coords,
            confidence,
            boxConfidence: currentBox.confidence,
            fingerConfidence: confidence,
            box: { topLeft: nextBoundingBox.startPoint, bottomRight: nextBoundingBox.endPoint }
          };
          hands.push(result);
        } else {
          this.storedBoxes[i] = null;
        }
        Re(keypoints);
      } else {
        const enlarged = enlargeBox2(squarifyBox2(currentBox), handBoxEnlargeFactor);
        const result = {
          confidence: currentBox.confidence,
          boxConfidence: currentBox.confidence,
          fingerConfidence: 0,
          box: { topLeft: enlarged.startPoint, bottomRight: enlarged.endPoint },
          landmarks: []
        };
        hands.push(result);
      }
    }
    this.storedBoxes = this.storedBoxes.filter((a) => a !== null);
    this.detectedHands = hands.length;
    if (hands.length > config3.hand.maxDetected)
      hands.length = config3.hand.maxDetected;
    return hands;
  }
};

// src/hand/fingerdef.ts
var Finger = {
  thumb: 0,
  index: 1,
  middle: 2,
  ring: 3,
  pinky: 4,
  all: [0, 1, 2, 3, 4],
  nameMapping: { 0: "thumb", 1: "index", 2: "middle", 3: "ring", 4: "pinky" },
  pointsMapping: {
    0: [[0, 1], [1, 2], [2, 3], [3, 4]],
    1: [[0, 5], [5, 6], [6, 7], [7, 8]],
    2: [[0, 9], [9, 10], [10, 11], [11, 12]],
    3: [[0, 13], [13, 14], [14, 15], [15, 16]],
    4: [[0, 17], [17, 18], [18, 19], [19, 20]]
  },
  getName: (value) => Finger.nameMapping[value],
  getPoints: (value) => Finger.pointsMapping[value]
};
var FingerCurl = {
  none: 0,
  half: 1,
  full: 2,
  nameMapping: { 0: "none", 1: "half", 2: "full" },
  getName: (value) => FingerCurl.nameMapping[value]
};
var FingerDirection = {
  verticalUp: 0,
  verticalDown: 1,
  horizontalLeft: 2,
  horizontalRight: 3,
  diagonalUpRight: 4,
  diagonalUpLeft: 5,
  diagonalDownRight: 6,
  diagonalDownLeft: 7,
  nameMapping: { 0: "verticalUp", 1: "verticalDown", 2: "horizontalLeft", 3: "horizontalRight", 4: "diagonalUpRight", 5: "diagonalUpLeft", 6: "diagonalDownRight", 7: "diagonalDownLeft" },
  getName: (value) => FingerDirection.nameMapping[value]
};
var FingerGesture = class {
  constructor(name) {
    __publicField(this, "name");
    __publicField(this, "curls");
    __publicField(this, "directions");
    __publicField(this, "weights");
    __publicField(this, "weightsRelative");
    this.name = name;
    this.curls = {};
    this.directions = {};
    this.weights = [1, 1, 1, 1, 1];
    this.weightsRelative = [1, 1, 1, 1, 1];
  }
  curl(finger, curl, confidence) {
    if (typeof this.curls[finger] === "undefined")
      this.curls[finger] = [];
    this.curls[finger].push([curl, confidence]);
  }
  direction(finger, position, confidence) {
    if (!this.directions[finger])
      this.directions[finger] = [];
    this.directions[finger].push([position, confidence]);
  }
  weight(finger, weight) {
    this.weights[finger] = weight;
    const total = this.weights.reduce((a, b) => a + b, 0);
    this.weightsRelative = this.weights.map((el2) => el2 * 5 / total);
  }
  matchAgainst(detectedCurls, detectedDirections) {
    let confidence = 0;
    for (const fingerIdx in detectedCurls) {
      const detectedCurl = detectedCurls[fingerIdx];
      const expectedCurls = this.curls[fingerIdx];
      if (typeof expectedCurls === "undefined") {
        confidence += this.weightsRelative[fingerIdx];
        continue;
      }
      for (const [expectedCurl, score] of expectedCurls) {
        if (detectedCurl === expectedCurl) {
          confidence += score * this.weightsRelative[fingerIdx];
          break;
        }
      }
    }
    for (const fingerIdx in detectedDirections) {
      const detectedDirection = detectedDirections[fingerIdx];
      const expectedDirections = this.directions[fingerIdx];
      if (typeof expectedDirections === "undefined") {
        confidence += this.weightsRelative[fingerIdx];
        continue;
      }
      for (const [expectedDirection, score] of expectedDirections) {
        if (detectedDirection === expectedDirection) {
          confidence += score * this.weightsRelative[fingerIdx];
          break;
        }
      }
    }
    return confidence / 10;
  }
};

// src/hand/fingergesture.ts
var { thumb, index, middle, ring, pinky } = Finger;
var { none, half, full } = FingerCurl;
var { verticalUp, verticalDown, horizontalLeft, horizontalRight, diagonalUpRight, diagonalUpLeft, diagonalDownRight, diagonalDownLeft } = FingerDirection;
var ThumbsUp = new FingerGesture("thumbs up");
ThumbsUp.curl(thumb, none, 1);
ThumbsUp.direction(thumb, verticalUp, 1);
ThumbsUp.direction(thumb, diagonalUpLeft, 0.25);
ThumbsUp.direction(thumb, diagonalUpRight, 0.25);
for (const finger of [Finger.index, Finger.middle, Finger.ring, Finger.pinky]) {
  ThumbsUp.curl(finger, full, 1);
  ThumbsUp.direction(finger, horizontalLeft, 1);
  ThumbsUp.direction(finger, horizontalRight, 1);
}
var Victory = new FingerGesture("victory");
Victory.curl(thumb, half, 0.5);
Victory.curl(thumb, none, 0.5);
Victory.direction(thumb, verticalUp, 1);
Victory.direction(thumb, diagonalUpLeft, 1);
Victory.curl(index, none, 1);
Victory.direction(index, verticalUp, 0.75);
Victory.direction(index, diagonalUpLeft, 1);
Victory.curl(middle, none, 1);
Victory.direction(middle, verticalUp, 1);
Victory.direction(middle, diagonalUpLeft, 0.75);
Victory.curl(ring, full, 1);
Victory.direction(ring, verticalUp, 0.2);
Victory.direction(ring, diagonalUpLeft, 1);
Victory.direction(ring, horizontalLeft, 0.2);
Victory.curl(pinky, full, 1);
Victory.direction(pinky, verticalUp, 0.2);
Victory.direction(pinky, diagonalUpLeft, 1);
Victory.direction(pinky, horizontalLeft, 0.2);
Victory.weight(index, 2);
Victory.weight(middle, 2);
var Point = new FingerGesture("point");
Point.curl(thumb, full, 1);
Point.curl(index, none, 0.5);
Point.curl(middle, full, 0.5);
Point.curl(ring, full, 0.5);
Point.curl(pinky, full, 0.5);
Point.weight(index, 2);
Point.weight(middle, 2);
var MiddleFinger = new FingerGesture("middle finger");
MiddleFinger.curl(thumb, none, 1);
MiddleFinger.curl(index, full, 0.5);
MiddleFinger.curl(middle, full, 0.5);
MiddleFinger.curl(ring, full, 0.5);
MiddleFinger.curl(pinky, full, 0.5);
MiddleFinger.weight(index, 2);
MiddleFinger.weight(middle, 2);
var OpenPalm = new FingerGesture("open palm");
OpenPalm.curl(thumb, none, 0.75);
OpenPalm.curl(index, none, 0.75);
OpenPalm.curl(middle, none, 0.75);
OpenPalm.curl(ring, none, 0.75);
OpenPalm.curl(pinky, none, 0.75);
var fingergesture_default = [ThumbsUp, Victory, Point, MiddleFinger, OpenPalm];

// src/hand/fingerpose.ts
var minConfidence = 0.7;
var options2 = {
  HALF_CURL_START_LIMIT: 60,
  NO_CURL_START_LIMIT: 130,
  DISTANCE_VOTE_POWER: 1.1,
  SINGLE_ANGLE_VOTE_POWER: 0.9,
  TOTAL_ANGLE_VOTE_POWER: 1.6
};
function calculateSlope(point1x, point1y, point2x, point2y) {
  const value = (point1y - point2y) / (point1x - point2x);
  let slope = Math.atan(value) * 180 / Math.PI;
  if (slope <= 0)
    slope = -slope;
  else if (slope > 0)
    slope = 180 - slope;
  return slope;
}
function getSlopes(point1, point2) {
  if (!point1 || !point2)
    return [0, 0];
  const slopeXY = calculateSlope(point1[0], point1[1], point2[0], point2[1]);
  if (point1.length === 2)
    return slopeXY;
  const slopeYZ = calculateSlope(point1[1], point1[2], point2[1], point2[2]);
  return [slopeXY, slopeYZ];
}
function angleOrientationAt(angle, weightageAt = 1) {
  let isVertical = 0;
  let isDiagonal = 0;
  let isHorizontal = 0;
  if (angle >= 75 && angle <= 105)
    isVertical = 1 * weightageAt;
  else if (angle >= 25 && angle <= 155)
    isDiagonal = 1 * weightageAt;
  else
    isHorizontal = 1 * weightageAt;
  return [isVertical, isDiagonal, isHorizontal];
}
function estimateFingerCurl(startPoint, midPoint, endPoint) {
  const start_mid_x_dist = startPoint[0] - midPoint[0];
  const start_end_x_dist = startPoint[0] - endPoint[0];
  const mid_end_x_dist = midPoint[0] - endPoint[0];
  const start_mid_y_dist = startPoint[1] - midPoint[1];
  const start_end_y_dist = startPoint[1] - endPoint[1];
  const mid_end_y_dist = midPoint[1] - endPoint[1];
  const start_mid_z_dist = startPoint[2] - midPoint[2];
  const start_end_z_dist = startPoint[2] - endPoint[2];
  const mid_end_z_dist = midPoint[2] - endPoint[2];
  const start_mid_dist = Math.sqrt(start_mid_x_dist * start_mid_x_dist + start_mid_y_dist * start_mid_y_dist + start_mid_z_dist * start_mid_z_dist);
  const start_end_dist = Math.sqrt(start_end_x_dist * start_end_x_dist + start_end_y_dist * start_end_y_dist + start_end_z_dist * start_end_z_dist);
  const mid_end_dist = Math.sqrt(mid_end_x_dist * mid_end_x_dist + mid_end_y_dist * mid_end_y_dist + mid_end_z_dist * mid_end_z_dist);
  let cos_in = (mid_end_dist * mid_end_dist + start_mid_dist * start_mid_dist - start_end_dist * start_end_dist) / (2 * mid_end_dist * start_mid_dist);
  if (cos_in > 1)
    cos_in = 1;
  else if (cos_in < -1)
    cos_in = -1;
  let angleOfCurve = Math.acos(cos_in);
  angleOfCurve = 57.2958 * angleOfCurve % 180;
  let fingerCurl;
  if (angleOfCurve > options2.NO_CURL_START_LIMIT)
    fingerCurl = FingerCurl.none;
  else if (angleOfCurve > options2.HALF_CURL_START_LIMIT)
    fingerCurl = FingerCurl.half;
  else
    fingerCurl = FingerCurl.full;
  return fingerCurl;
}
function estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x) {
  let estimatedDirection;
  if (max_dist_x === Math.abs(start_end_x_dist)) {
    if (start_end_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  } else if (max_dist_x === Math.abs(start_mid_x_dist)) {
    if (start_mid_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  } else {
    if (mid_end_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  }
  return estimatedDirection;
}
function estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y) {
  let estimatedDirection;
  if (max_dist_y === Math.abs(start_end_y_dist)) {
    if (start_end_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  } else if (max_dist_y === Math.abs(start_mid_y_dist)) {
    if (start_mid_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  } else {
    if (mid_end_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  }
  return estimatedDirection;
}
function estimateDiagonalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y, start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x) {
  let estimatedDirection;
  const reqd_vertical_direction = estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y);
  const reqd_horizontal_direction = estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  if (reqd_vertical_direction === FingerDirection.verticalUp) {
    if (reqd_horizontal_direction === FingerDirection.horizontalLeft)
      estimatedDirection = FingerDirection.diagonalUpLeft;
    else
      estimatedDirection = FingerDirection.diagonalUpRight;
  } else {
    if (reqd_horizontal_direction === FingerDirection.horizontalLeft)
      estimatedDirection = FingerDirection.diagonalDownLeft;
    else
      estimatedDirection = FingerDirection.diagonalDownRight;
  }
  return estimatedDirection;
}
function calculateFingerDirection(startPoint, midPoint, endPoint, fingerSlopes) {
  const start_mid_x_dist = startPoint[0] - midPoint[0];
  const start_end_x_dist = startPoint[0] - endPoint[0];
  const mid_end_x_dist = midPoint[0] - endPoint[0];
  const start_mid_y_dist = startPoint[1] - midPoint[1];
  const start_end_y_dist = startPoint[1] - endPoint[1];
  const mid_end_y_dist = midPoint[1] - endPoint[1];
  const max_dist_x = Math.max(Math.abs(start_mid_x_dist), Math.abs(start_end_x_dist), Math.abs(mid_end_x_dist));
  const max_dist_y = Math.max(Math.abs(start_mid_y_dist), Math.abs(start_end_y_dist), Math.abs(mid_end_y_dist));
  let voteVertical = 0;
  let voteDiagonal = 0;
  let voteHorizontal = 0;
  const start_end_x_y_dist_ratio = max_dist_y / (max_dist_x + 1e-5);
  if (start_end_x_y_dist_ratio > 1.5)
    voteVertical += options2.DISTANCE_VOTE_POWER;
  else if (start_end_x_y_dist_ratio > 0.66)
    voteDiagonal += options2.DISTANCE_VOTE_POWER;
  else
    voteHorizontal += options2.DISTANCE_VOTE_POWER;
  const start_mid_dist = Math.sqrt(start_mid_x_dist * start_mid_x_dist + start_mid_y_dist * start_mid_y_dist);
  const start_end_dist = Math.sqrt(start_end_x_dist * start_end_x_dist + start_end_y_dist * start_end_y_dist);
  const mid_end_dist = Math.sqrt(mid_end_x_dist * mid_end_x_dist + mid_end_y_dist * mid_end_y_dist);
  const max_dist = Math.max(start_mid_dist, start_end_dist, mid_end_dist);
  let calc_start_point_x = startPoint[0];
  let calc_start_point_y = startPoint[1];
  let calc_end_point_x = endPoint[0];
  let calc_end_point_y = endPoint[1];
  if (max_dist === start_mid_dist) {
    calc_end_point_x = endPoint[0];
    calc_end_point_y = endPoint[1];
  } else if (max_dist === mid_end_dist) {
    calc_start_point_x = midPoint[0];
    calc_start_point_y = midPoint[1];
  }
  const calcStartPoint = [calc_start_point_x, calc_start_point_y];
  const calcEndPoint = [calc_end_point_x, calc_end_point_y];
  const totalAngle = getSlopes(calcStartPoint, calcEndPoint);
  const votes = angleOrientationAt(totalAngle, options2.TOTAL_ANGLE_VOTE_POWER);
  voteVertical += votes[0];
  voteDiagonal += votes[1];
  voteHorizontal += votes[2];
  for (const fingerSlope of fingerSlopes) {
    const fingerVotes = angleOrientationAt(fingerSlope, options2.SINGLE_ANGLE_VOTE_POWER);
    voteVertical += fingerVotes[0];
    voteDiagonal += fingerVotes[1];
    voteHorizontal += fingerVotes[2];
  }
  let estimatedDirection;
  if (voteVertical === Math.max(voteVertical, voteDiagonal, voteHorizontal)) {
    estimatedDirection = estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y);
  } else if (voteHorizontal === Math.max(voteDiagonal, voteHorizontal)) {
    estimatedDirection = estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  } else {
    estimatedDirection = estimateDiagonalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y, start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  }
  return estimatedDirection;
}
function estimate(landmarks) {
  const slopesXY = [];
  const slopesYZ = [];
  const fingerCurls = [];
  const fingerDirections = [];
  if (!landmarks)
    return { curls: fingerCurls, directions: fingerDirections };
  for (const finger of Finger.all) {
    const points = Finger.getPoints(finger);
    const slopeAtXY = [];
    const slopeAtYZ = [];
    for (const point2 of points) {
      const point1 = landmarks[point2[0]];
      const point22 = landmarks[point2[1]];
      const slopes = getSlopes(point1, point22);
      const slopeXY = slopes[0];
      const slopeYZ = slopes[1];
      slopeAtXY.push(slopeXY);
      slopeAtYZ.push(slopeYZ);
    }
    slopesXY.push(slopeAtXY);
    slopesYZ.push(slopeAtYZ);
  }
  for (const finger of Finger.all) {
    const pointIndexAt = finger === Finger.thumb ? 1 : 0;
    const fingerPointsAt = Finger.getPoints(finger);
    const startPoint = landmarks[fingerPointsAt[pointIndexAt][0]];
    const midPoint = landmarks[fingerPointsAt[pointIndexAt + 1][1]];
    const endPoint = landmarks[fingerPointsAt[3][1]];
    const fingerCurled = estimateFingerCurl(startPoint, midPoint, endPoint);
    const fingerPosition = calculateFingerDirection(startPoint, midPoint, endPoint, slopesXY[finger].slice(pointIndexAt));
    fingerCurls[finger] = fingerCurled;
    fingerDirections[finger] = fingerPosition;
  }
  return { curls: fingerCurls, directions: fingerDirections };
}
function analyze(keypoints) {
  if (!keypoints || keypoints.length === 0)
    return null;
  const estimatorRes = estimate(keypoints);
  const landmarks = {};
  for (const fingerIdx of Finger.all) {
    landmarks[Finger.getName(fingerIdx)] = {
      curl: FingerCurl.getName(estimatorRes.curls[fingerIdx]),
      direction: FingerDirection.getName(estimatorRes.directions[fingerIdx])
    };
  }
  return landmarks;
}
function match(keypoints) {
  const poses = [];
  if (!keypoints || keypoints.length === 0)
    return poses;
  const estimatorRes = estimate(keypoints);
  for (const gesture2 of fingergesture_default) {
    const confidence = gesture2.matchAgainst(estimatorRes.curls, estimatorRes.directions);
    if (confidence >= minConfidence)
      poses.push({ name: gesture2.name, confidence });
  }
  return poses;
}

// src/hand/handpose.ts
var meshAnnotations2 = {
  thumb: [1, 2, 3, 4],
  index: [5, 6, 7, 8],
  middle: [9, 10, 11, 12],
  ring: [13, 14, 15, 16],
  pinky: [17, 18, 19, 20],
  palm: [0]
};
var handDetectorModel;
var handPoseModel;
var handPipeline;
async function predict12(input, config3) {
  const predictions = await handPipeline.estimateHands(input, config3);
  if (!predictions)
    return [];
  const hands = [];
  for (let i = 0; i < predictions.length; i++) {
    const annotations2 = {};
    if (predictions[i].landmarks) {
      for (const key of Object.keys(meshAnnotations2)) {
        annotations2[key] = meshAnnotations2[key].map((index2) => predictions[i].landmarks[index2]);
      }
    }
    const keypoints = predictions[i].landmarks;
    let box = [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, 0, 0];
    let boxRaw = [0, 0, 0, 0];
    if (keypoints && keypoints.length > 0) {
      for (const pt2 of keypoints) {
        if (pt2[0] < box[0])
          box[0] = pt2[0];
        if (pt2[1] < box[1])
          box[1] = pt2[1];
        if (pt2[0] > box[2])
          box[2] = pt2[0];
        if (pt2[1] > box[3])
          box[3] = pt2[1];
      }
      box[2] -= box[0];
      box[3] -= box[1];
      boxRaw = [box[0] / (input.shape[2] || 0), box[1] / (input.shape[1] || 0), box[2] / (input.shape[2] || 0), box[3] / (input.shape[1] || 0)];
    } else {
      box = predictions[i].box ? [
        Math.trunc(Math.max(0, predictions[i].box.topLeft[0])),
        Math.trunc(Math.max(0, predictions[i].box.topLeft[1])),
        Math.trunc(Math.min(input.shape[2] || 0, predictions[i].box.bottomRight[0]) - Math.max(0, predictions[i].box.topLeft[0])),
        Math.trunc(Math.min(input.shape[1] || 0, predictions[i].box.bottomRight[1]) - Math.max(0, predictions[i].box.topLeft[1]))
      ] : [0, 0, 0, 0];
      boxRaw = [
        predictions[i].box.topLeft[0] / (input.shape[2] || 0),
        predictions[i].box.topLeft[1] / (input.shape[1] || 0),
        (predictions[i].box.bottomRight[0] - predictions[i].box.topLeft[0]) / (input.shape[2] || 0),
        (predictions[i].box.bottomRight[1] - predictions[i].box.topLeft[1]) / (input.shape[1] || 0)
      ];
    }
    const landmarks = analyze(keypoints);
    hands.push({
      id: i,
      score: Math.round(100 * predictions[i].confidence) / 100,
      boxScore: Math.round(100 * predictions[i].boxConfidence) / 100,
      fingerScore: Math.round(100 * predictions[i].fingerConfidence) / 100,
      label: "hand",
      box,
      boxRaw,
      keypoints,
      annotations: annotations2,
      landmarks
    });
  }
  return hands;
}
async function load13(config3) {
  var _a2, _b2;
  if (env.initial) {
    handDetectorModel = null;
    handPoseModel = null;
  }
  if (!handDetectorModel || !handPoseModel) {
    [handDetectorModel, handPoseModel] = await Promise.all([
      config3.hand.enabled ? loadModel((_a2 = config3.hand.detector) == null ? void 0 : _a2.modelPath) : null,
      config3.hand.landmarks ? loadModel((_b2 = config3.hand.skeleton) == null ? void 0 : _b2.modelPath) : null
    ]);
  } else {
    if (config3.debug)
      log("cached model:", handDetectorModel["modelUrl"]);
    if (config3.debug)
      log("cached model:", handPoseModel["modelUrl"]);
  }
  const handDetector = new HandDetector(handDetectorModel);
  handPipeline = new HandPipeline(handDetector, handPoseModel);
  return [handDetectorModel, handPoseModel];
}

// src/hand/handtrack.ts
var models2 = [null, null];
var modelOutputNodes = ["StatefulPartitionedCall/Postprocessor/Slice", "StatefulPartitionedCall/Postprocessor/ExpandDims_1"];
var inputSize7 = [[0, 0], [0, 0]];
var classes = ["hand", "fist", "pinch", "point", "face", "tip", "pinchtip"];
var faceIndex = 4;
var boxExpandFact = 1.6;
var maxDetectorResolution = 512;
var detectorExpandFact = 1.4;
var skipped11 = Number.MAX_SAFE_INTEGER;
var lastTime12 = 0;
var outputSize = [0, 0];
var cache4 = {
  boxes: [],
  hands: []
};
var fingerMap = {
  thumb: [1, 2, 3, 4],
  index: [5, 6, 7, 8],
  middle: [9, 10, 11, 12],
  ring: [13, 14, 15, 16],
  pinky: [17, 18, 19, 20],
  base: [0],
  palm: [0, 17, 13, 9, 5, 1, 0]
};
async function loadDetect2(config3) {
  var _a2;
  if (env.initial)
    models2[0] = null;
  if (!models2[0]) {
    fakeOps(["tensorlistreserve", "enter", "tensorlistfromtensor", "merge", "loopcond", "switch", "exit", "tensorliststack", "nextiteration", "tensorlistsetitem", "tensorlistgetitem", "reciprocal", "shape", "split", "where"], config3);
    models2[0] = await loadModel((_a2 = config3.hand.detector) == null ? void 0 : _a2.modelPath);
    const inputs = Object.values(models2[0].modelSignature["inputs"]);
    inputSize7[0][0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
    inputSize7[0][1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", models2[0]["modelUrl"]);
  return models2[0];
}
async function loadSkeleton(config3) {
  var _a2;
  if (env.initial)
    models2[1] = null;
  if (!models2[1]) {
    models2[1] = await loadModel((_a2 = config3.hand.skeleton) == null ? void 0 : _a2.modelPath);
    const inputs = Object.values(models2[1].modelSignature["inputs"]);
    inputSize7[1][0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
    inputSize7[1][1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", models2[1]["modelUrl"]);
  return models2[1];
}
async function detectHands(input, config3) {
  const hands = [];
  if (!input || !models2[0])
    return hands;
  const t = {};
  const ratio = (input.shape[2] || 1) / (input.shape[1] || 1);
  const height = Math.min(Math.round((input.shape[1] || 0) / 8) * 8, maxDetectorResolution);
  const width = Math.round(height * ratio / 8) * 8;
  t.resize = jn.resizeBilinear(input, [height, width]);
  t.cast = ce(t.resize, "int32");
  [t.rawScores, t.rawBoxes] = await models2[0].executeAsync(t.cast, modelOutputNodes);
  t.boxes = gr(t.rawBoxes, [0, 2]);
  t.scores = gr(t.rawScores, [0]);
  const classScores = Fs(t.scores, 1);
  Re(classScores[faceIndex]);
  classScores.splice(faceIndex, 1);
  t.filtered = es(classScores, 1);
  Re(classScores);
  t.max = As(t.filtered, 1);
  t.argmax = qu(t.filtered, 1);
  let id2 = 0;
  t.nms = await jn.nonMaxSuppressionAsync(t.boxes, t.max, (config3.hand.maxDetected || 0) + 1, config3.hand.iouThreshold || 0, config3.hand.minConfidence || 1);
  const nms = await t.nms.data();
  const scores = await t.max.data();
  const classNum = await t.argmax.data();
  for (const nmsIndex of Array.from(nms)) {
    const boxSlice = qe(t.boxes, nmsIndex, 1);
    const boxYX = await boxSlice.data();
    Re(boxSlice);
    const boxData = [boxYX[1], boxYX[0], boxYX[3] - boxYX[1], boxYX[2] - boxYX[0]];
    const boxRaw = scale(boxData, detectorExpandFact);
    const boxFull = [Math.trunc(boxData[0] * outputSize[0]), Math.trunc(boxData[1] * outputSize[1]), Math.trunc(boxData[2] * outputSize[0]), Math.trunc(boxData[3] * outputSize[1])];
    const score = scores[nmsIndex];
    const label = classes[classNum[nmsIndex]];
    const hand3 = { id: id2++, score, box: boxFull, boxRaw, label };
    hands.push(hand3);
  }
  Object.keys(t).forEach((tensor) => Re(t[tensor]));
  hands.sort((a, b) => b.score - a.score);
  if (hands.length > (config3.hand.maxDetected || 1))
    hands.length = config3.hand.maxDetected || 1;
  return hands;
}
async function detectFingers(input, h, config3) {
  const hand3 = {
    id: h.id,
    score: Math.round(100 * h.score) / 100,
    boxScore: Math.round(100 * h.score) / 100,
    fingerScore: 0,
    box: h.box,
    boxRaw: h.boxRaw,
    label: h.label,
    keypoints: [],
    landmarks: {},
    annotations: {}
  };
  if (input && models2[1] && config3.hand.landmarks && h.score > (config3.hand.minConfidence || 0)) {
    const t = {};
    const boxCrop = [h.boxRaw[1], h.boxRaw[0], h.boxRaw[3] + h.boxRaw[1], h.boxRaw[2] + h.boxRaw[0]];
    t.crop = jn.cropAndResize(input, [boxCrop], [0], [inputSize7[1][0], inputSize7[1][1]], "bilinear");
    t.div = xe(t.crop, constants.tf255);
    [t.score, t.keypoints] = models2[1].execute(t.div, ["Identity_1", "Identity"]);
    const rawScore = (await t.score.data())[0];
    const score = (100 - Math.trunc(100 / (1 + Math.exp(rawScore)))) / 100;
    if (score >= (config3.hand.minConfidence || 0)) {
      hand3.fingerScore = score;
      t.reshaped = G(t.keypoints, [-1, 3]);
      const coordsData = await t.reshaped.array();
      const coordsRaw = coordsData.map((kpt4) => [kpt4[0] / inputSize7[1][1], kpt4[1] / inputSize7[1][0], kpt4[2] || 0]);
      const coordsNorm = coordsRaw.map((kpt4) => [kpt4[0] * h.boxRaw[2], kpt4[1] * h.boxRaw[3], kpt4[2] || 0]);
      hand3.keypoints = coordsNorm.map((kpt4) => [outputSize[0] * (kpt4[0] + h.boxRaw[0]), outputSize[1] * (kpt4[1] + h.boxRaw[1]), kpt4[2] || 0]);
      hand3.landmarks = analyze(hand3.keypoints);
      for (const key of Object.keys(fingerMap)) {
        hand3.annotations[key] = fingerMap[key].map((index2) => hand3.landmarks && hand3.keypoints[index2] ? hand3.keypoints[index2] : null);
      }
    }
    Object.keys(t).forEach((tensor) => Re(t[tensor]));
  }
  return hand3;
}
async function predict13(input, config3) {
  var _a2, _b2;
  if (!models2[0] || !models2[1] || !((_a2 = models2[0]) == null ? void 0 : _a2.inputs[0].shape) || !((_b2 = models2[1]) == null ? void 0 : _b2.inputs[0].shape))
    return [];
  outputSize = [input.shape[2] || 0, input.shape[1] || 0];
  skipped11++;
  const skipTime = (config3.hand.skipTime || 0) > now() - lastTime12;
  const skipFrame = skipped11 < (config3.hand.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame) {
    return cache4.hands;
  }
  return new Promise(async (resolve) => {
    const skipTimeExtended = 3 * (config3.hand.skipTime || 0) > now() - lastTime12;
    const skipFrameExtended = skipped11 < 3 * (config3.hand.skipFrames || 0);
    if (config3.skipAllowed && cache4.hands.length === config3.hand.maxDetected) {
      cache4.hands = await Promise.all(cache4.boxes.map((handBox) => detectFingers(input, handBox, config3)));
    } else if (config3.skipAllowed && skipTimeExtended && skipFrameExtended && cache4.hands.length > 0) {
      cache4.hands = await Promise.all(cache4.boxes.map((handBox) => detectFingers(input, handBox, config3)));
    } else {
      cache4.boxes = await detectHands(input, config3);
      lastTime12 = now();
      cache4.hands = await Promise.all(cache4.boxes.map((handBox) => detectFingers(input, handBox, config3)));
      skipped11 = 0;
    }
    const oldCache = [...cache4.boxes];
    cache4.boxes.length = 0;
    if (config3.cacheSensitivity > 0) {
      for (let i = 0; i < cache4.hands.length; i++) {
        const boxKpt = square(cache4.hands[i].keypoints, outputSize);
        if (boxKpt.box[2] / (input.shape[2] || 1) > 0.05 && boxKpt.box[3] / (input.shape[1] || 1) > 0.05 && cache4.hands[i].fingerScore && cache4.hands[i].fingerScore > (config3.hand.minConfidence || 0)) {
          const boxScale = scale(boxKpt.box, boxExpandFact);
          const boxScaleRaw = scale(boxKpt.boxRaw, boxExpandFact);
          cache4.boxes.push({ ...oldCache[i], box: boxScale, boxRaw: boxScaleRaw });
        }
      }
    }
    for (let i = 0; i < cache4.hands.length; i++) {
      const bbox = calc(cache4.hands[i].keypoints, outputSize);
      cache4.hands[i].box = bbox.box;
      cache4.hands[i].boxRaw = bbox.boxRaw;
    }
    resolve(cache4.hands);
  });
}

// src/face/liveness.ts
var model13;
var cached2 = [];
var skipped12 = Number.MAX_SAFE_INTEGER;
var lastCount8 = 0;
var lastTime13 = 0;
async function load14(config3) {
  var _a2;
  if (env.initial)
    model13 = null;
  if (!model13)
    model13 = await loadModel((_a2 = config3.face.liveness) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model13["modelUrl"]);
  return model13;
}
async function predict14(image, config3, idx, count2) {
  var _a2, _b2;
  if (!model13)
    return 0;
  const skipTime = (((_a2 = config3.face.liveness) == null ? void 0 : _a2.skipTime) || 0) > now() - lastTime13;
  const skipFrame = skipped12 < (((_b2 = config3.face.liveness) == null ? void 0 : _b2.skipFrames) || 0);
  if (config3.skipAllowed && skipTime && skipFrame && lastCount8 === count2 && cached2[idx]) {
    skipped12++;
    return cached2[idx];
  }
  skipped12 = 0;
  return new Promise(async (resolve) => {
    const resize = jn.resizeBilinear(image, [(model13 == null ? void 0 : model13.inputs[0].shape) ? model13.inputs[0].shape[2] : 0, (model13 == null ? void 0 : model13.inputs[0].shape) ? model13.inputs[0].shape[1] : 0], false);
    const res = model13 == null ? void 0 : model13.execute(resize);
    const num = (await res.data())[0];
    cached2[idx] = Math.round(100 * num) / 100;
    lastCount8 = count2;
    lastTime13 = now();
    Re([resize, res]);
    resolve(cached2[idx]);
  });
}

// src/body/movenetcoords.ts
var movenetcoords_exports = {};
__export(movenetcoords_exports, {
  connected: () => connected3,
  horizontal: () => horizontal,
  kpt: () => kpt3,
  relative: () => relative,
  vertical: () => vertical
});
var kpt3 = [
  "nose",
  "leftEye",
  "rightEye",
  "leftEar",
  "rightEar",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "leftWrist",
  "rightWrist",
  "leftHip",
  "rightHip",
  "leftKnee",
  "rightKnee",
  "leftAnkle",
  "rightAnkle"
];
var horizontal = [
  ["leftEye", "rightEye"],
  ["leftEar", "rightEar"],
  ["leftShoulder", "rightShoulder"],
  ["leftElbow", "rightElbow"],
  ["leftWrist", "rightWrist"],
  ["leftHip", "rightHip"],
  ["leftKnee", "rightKnee"],
  ["leftAnkle", "rightAnkle"]
];
var vertical = [
  ["leftKnee", "leftShoulder"],
  ["rightKnee", "rightShoulder"],
  ["leftAnkle", "leftKnee"],
  ["rightAnkle", "rightKnee"]
];
var relative = [
  [["leftHip", "rightHip"], ["leftShoulder", "rightShoulder"]],
  [["leftElbow", "rightElbow"], ["leftShoulder", "rightShoulder"]]
];
var connected3 = {
  leftLeg: ["leftHip", "leftKnee", "leftAnkle"],
  rightLeg: ["rightHip", "rightKnee", "rightAnkle"],
  torso: ["leftShoulder", "rightShoulder", "rightHip", "leftHip", "leftShoulder"],
  leftArm: ["leftShoulder", "leftElbow", "leftWrist"],
  rightArm: ["rightShoulder", "rightElbow", "rightWrist"],
  head: []
};

// src/body/movenetfix.ts
var maxJitter = 5e-3;
var cache5 = {
  keypoints: [],
  padding: [[0, 0], [0, 0], [0, 0], [0, 0]]
};
function bodyParts(body4) {
  for (const pair of horizontal) {
    const left = body4.keypoints.findIndex((kp2) => kp2.part === pair[0]);
    const right = body4.keypoints.findIndex((kp2) => kp2.part === pair[1]);
    if (body4.keypoints[left] && body4.keypoints[right]) {
      if (body4.keypoints[left].position[0] < body4.keypoints[right].position[0]) {
        const tmp = body4.keypoints[left];
        body4.keypoints[left] = body4.keypoints[right];
        body4.keypoints[right] = tmp;
      }
    }
  }
  for (const pair of vertical) {
    const lower = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[0]);
    const higher = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[1]);
    if (body4.keypoints[lower] && body4.keypoints[higher]) {
      if (body4.keypoints[lower].position[1] < body4.keypoints[higher].position[1]) {
        body4.keypoints.splice(lower, 1);
      }
    }
  }
  for (const [pair, compare2] of relative) {
    const left = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[0]);
    const right = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[1]);
    const leftTo = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === compare2[0]);
    const rightTo = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === compare2[1]);
    if (!body4.keypoints[leftTo] || !body4.keypoints[rightTo])
      continue;
    const distanceLeft = body4.keypoints[left] ? [
      Math.abs(body4.keypoints[leftTo].position[0] - body4.keypoints[left].position[0]),
      Math.abs(body4.keypoints[rightTo].position[0] - body4.keypoints[left].position[0])
    ] : [0, 0];
    const distanceRight = body4.keypoints[right] ? [
      Math.abs(body4.keypoints[rightTo].position[0] - body4.keypoints[right].position[0]),
      Math.abs(body4.keypoints[leftTo].position[0] - body4.keypoints[right].position[0])
    ] : [0, 0];
    if (distanceLeft[0] > distanceLeft[1] || distanceRight[0] > distanceRight[1]) {
      const tmp = body4.keypoints[left];
      body4.keypoints[left] = body4.keypoints[right];
      body4.keypoints[right] = tmp;
    }
  }
}
function jitter(keypoints) {
  for (let i = 0; i < keypoints.length; i++) {
    if (keypoints[i] && cache5.keypoints[i]) {
      const diff = [Math.abs(keypoints[i].positionRaw[0] - cache5.keypoints[i].positionRaw[0]), Math.abs(keypoints[i].positionRaw[1] - cache5.keypoints[i].positionRaw[1])];
      if (diff[0] < maxJitter && diff[1] < maxJitter) {
        keypoints[i] = cache5.keypoints[i];
      } else {
        cache5.keypoints[i] = keypoints[i];
      }
    } else {
      cache5.keypoints[i] = keypoints[i];
    }
  }
  return keypoints;
}
function padInput(input, inputSize10) {
  const t = {};
  if (!input.shape || !input.shape[1] || !input.shape[2])
    return input;
  cache5.padding = [
    [0, 0],
    [input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0, input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0],
    [input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0, input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0],
    [0, 0]
  ];
  t.pad = bi(input, cache5.padding);
  t.resize = jn.resizeBilinear(t.pad, [inputSize10, inputSize10]);
  const final = ce(t.resize, "int32");
  Object.keys(t).forEach((tensor) => Re(t[tensor]));
  return final;
}
function rescaleBody(body4, outputSize2) {
  body4.keypoints = body4.keypoints.filter((kpt4) => kpt4 && kpt4.position);
  for (const kpt4 of body4.keypoints) {
    kpt4.position = [
      kpt4.position[0] * (outputSize2[0] + cache5.padding[2][0] + cache5.padding[2][1]) / outputSize2[0] - cache5.padding[2][0],
      kpt4.position[1] * (outputSize2[1] + cache5.padding[1][0] + cache5.padding[1][1]) / outputSize2[1] - cache5.padding[1][0]
    ];
    kpt4.positionRaw = [
      kpt4.position[0] / outputSize2[0],
      kpt4.position[1] / outputSize2[1]
    ];
  }
  const rescaledBoxes = calc(body4.keypoints.map((pt2) => pt2.position), outputSize2);
  body4.box = rescaledBoxes.box;
  body4.boxRaw = rescaledBoxes.boxRaw;
  return body4;
}

// src/body/movenet.ts
var model14;
var inputSize8 = 0;
var skipped13 = Number.MAX_SAFE_INTEGER;
var cache6 = {
  boxes: [],
  bodies: [],
  last: 0
};
async function load15(config3) {
  if (env.initial)
    model14 = null;
  if (!model14) {
    fakeOps(["size"], config3);
    model14 = await loadModel(config3.body.modelPath);
  } else if (config3.debug)
    log("cached model:", model14["modelUrl"]);
  inputSize8 = model14.inputs[0].shape ? model14.inputs[0].shape[2] : 0;
  if (inputSize8 < 64)
    inputSize8 = 256;
  return model14;
}
async function parseSinglePose(res, config3, image) {
  const kpt4 = res[0][0];
  const keypoints = [];
  let score = 0;
  for (let id2 = 0; id2 < kpt4.length; id2++) {
    score = kpt4[id2][2];
    if (score > config3.body.minConfidence) {
      const positionRaw = [kpt4[id2][1], kpt4[id2][0]];
      keypoints.push({
        score: Math.round(100 * score) / 100,
        part: kpt3[id2],
        positionRaw,
        position: [
          Math.round((image.shape[2] || 0) * positionRaw[0]),
          Math.round((image.shape[1] || 0) * positionRaw[1])
        ]
      });
    }
  }
  score = keypoints.reduce((prev, curr) => curr.score > prev ? curr.score : prev, 0);
  const bodies = [];
  const newBox = calc(keypoints.map((pt2) => pt2.position), [image.shape[2], image.shape[1]]);
  const annotations2 = {};
  for (const [name, indexes] of Object.entries(connected3)) {
    const pt2 = [];
    for (let i = 0; i < indexes.length - 1; i++) {
      const pt0 = keypoints.find((kp2) => kp2.part === indexes[i]);
      const pt1 = keypoints.find((kp2) => kp2.part === indexes[i + 1]);
      if (pt0 && pt1 && pt0.score > (config3.body.minConfidence || 0) && pt1.score > (config3.body.minConfidence || 0))
        pt2.push([pt0.position, pt1.position]);
    }
    annotations2[name] = pt2;
  }
  const body4 = { id: 0, score, box: newBox.box, boxRaw: newBox.boxRaw, keypoints, annotations: annotations2 };
  bodyParts(body4);
  bodies.push(body4);
  return bodies;
}
async function parseMultiPose(res, config3, image) {
  const bodies = [];
  for (let id2 = 0; id2 < res[0].length; id2++) {
    const kpt4 = res[0][id2];
    const totalScore = Math.round(100 * kpt4[51 + 4]) / 100;
    if (totalScore > config3.body.minConfidence) {
      const keypoints = [];
      for (let i = 0; i < 17; i++) {
        const score = kpt4[3 * i + 2];
        if (score > config3.body.minConfidence) {
          const positionRaw = [kpt4[3 * i + 1], kpt4[3 * i + 0]];
          keypoints.push({
            part: kpt3[i],
            score: Math.round(100 * score) / 100,
            positionRaw,
            position: [Math.round((image.shape[2] || 0) * positionRaw[0]), Math.round((image.shape[1] || 0) * positionRaw[1])]
          });
        }
      }
      const newBox = calc(keypoints.map((pt2) => pt2.position), [image.shape[2], image.shape[1]]);
      const annotations2 = {};
      for (const [name, indexes] of Object.entries(connected3)) {
        const pt2 = [];
        for (let i = 0; i < indexes.length - 1; i++) {
          const pt0 = keypoints.find((kp2) => kp2.part === indexes[i]);
          const pt1 = keypoints.find((kp2) => kp2.part === indexes[i + 1]);
          if (pt0 && pt1 && pt0.score > (config3.body.minConfidence || 0) && pt1.score > (config3.body.minConfidence || 0))
            pt2.push([pt0.position, pt1.position]);
        }
        annotations2[name] = pt2;
      }
      const body4 = { id: id2, score: totalScore, box: newBox.box, boxRaw: newBox.boxRaw, keypoints: [...keypoints], annotations: annotations2 };
      bodyParts(body4);
      bodies.push(body4);
    }
  }
  bodies.sort((a, b) => b.score - a.score);
  if (bodies.length > config3.body.maxDetected)
    bodies.length = config3.body.maxDetected;
  return bodies;
}
async function predict15(input, config3) {
  if (!model14 || !(model14 == null ? void 0 : model14.inputs[0].shape))
    return [];
  if (!config3.skipAllowed)
    cache6.boxes.length = 0;
  skipped13++;
  const skipTime = (config3.body.skipTime || 0) > now() - cache6.last;
  const skipFrame = skipped13 < (config3.body.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame) {
    return cache6.bodies;
  }
  return new Promise(async (resolve) => {
    const t = {};
    skipped13 = 0;
    t.input = padInput(input, inputSize8);
    t.res = model14 == null ? void 0 : model14.execute(t.input);
    cache6.last = now();
    const res = await t.res.array();
    cache6.bodies = t.res.shape[2] === 17 ? await parseSinglePose(res, config3, input) : await parseMultiPose(res, config3, input);
    for (const body4 of cache6.bodies) {
      rescaleBody(body4, [input.shape[2] || 1, input.shape[1] || 1]);
      jitter(body4.keypoints);
    }
    Object.keys(t).forEach((tensor) => Re(t[tensor]));
    resolve(cache6.bodies);
  });
}

// src/object/nanodet.ts
var model15;
var last9 = [];
var lastTime14 = 0;
var skipped14 = Number.MAX_SAFE_INTEGER;
var inputSize9 = 0;
var scaleBox = 2.5;
async function load16(config3) {
  if (!model15 || env.initial) {
    model15 = await loadModel(config3.object.modelPath);
    const inputs = Object.values(model15.modelSignature["inputs"]);
    inputSize9 = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", model15["modelUrl"]);
  return model15;
}
async function process4(res, outputShape, config3) {
  let id2 = 0;
  let results = [];
  for (const strideSize of [1, 2, 4]) {
    j(async () => {
      const baseSize = strideSize * 13;
      const scoresT = gr(res.find((a) => a.shape[1] === baseSize ** 2 && (a.shape[2] || 0) === labels.length));
      const featuresT = gr(res.find((a) => a.shape[1] === baseSize ** 2 && (a.shape[2] || 0) < labels.length));
      const boxesMax = featuresT.reshape([-1, 4, featuresT.shape[1] / 4]);
      const boxIdx = await boxesMax.argMax(2).array();
      const scores = await scoresT.array();
      for (let i = 0; i < scoresT.shape[0]; i++) {
        for (let j10 = 0; j10 < scoresT.shape[1]; j10++) {
          const score = scores[i][j10];
          if (score > (config3.object.minConfidence || 0) && j10 !== 61) {
            const cx2 = (0.5 + Math.trunc(i % baseSize)) / baseSize;
            const cy2 = (0.5 + Math.trunc(i / baseSize)) / baseSize;
            const boxOffset = boxIdx[i].map((a) => a * (baseSize / strideSize / inputSize9));
            const [x, y] = [
              cx2 - scaleBox / strideSize * boxOffset[0],
              cy2 - scaleBox / strideSize * boxOffset[1]
            ];
            const [w10, h] = [
              cx2 + scaleBox / strideSize * boxOffset[2] - x,
              cy2 + scaleBox / strideSize * boxOffset[3] - y
            ];
            let boxRaw = [x, y, w10, h];
            boxRaw = boxRaw.map((a) => Math.max(0, Math.min(a, 1)));
            const box = [
              boxRaw[0] * outputShape[0],
              boxRaw[1] * outputShape[1],
              boxRaw[2] * outputShape[0],
              boxRaw[3] * outputShape[1]
            ];
            const result = {
              id: id2++,
              score: Math.round(100 * score) / 100,
              class: j10 + 1,
              label: labels[j10].label,
              box: box.map((a) => Math.trunc(a)),
              boxRaw
            };
            results.push(result);
          }
        }
      }
    });
  }
  res.forEach((t) => Re(t));
  const nmsBoxes = results.map((a) => [a.boxRaw[1], a.boxRaw[0], a.boxRaw[3], a.boxRaw[2]]);
  const nmsScores = results.map((a) => a.score);
  let nmsIdx = [];
  if (nmsBoxes && nmsBoxes.length > 0) {
    const nms = await jn.nonMaxSuppressionAsync(nmsBoxes, nmsScores, config3.object.maxDetected, config3.object.iouThreshold, config3.object.minConfidence);
    nmsIdx = await nms.data();
    Re(nms);
  }
  results = results.filter((_val, idx) => nmsIdx.includes(idx)).sort((a, b) => b.score - a.score);
  return results;
}
async function predict16(image, config3) {
  const skipTime = (config3.object.skipTime || 0) > now() - lastTime14;
  const skipFrame = skipped14 < (config3.object.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && last9.length > 0) {
    skipped14++;
    return last9;
  }
  skipped14 = 0;
  if (!env.kernels.includes("mod") || !env.kernels.includes("sparsetodense"))
    return last9;
  return new Promise(async (resolve) => {
    const outputSize2 = [image.shape[2] || 0, image.shape[1] || 0];
    const resize = jn.resizeBilinear(image, [inputSize9, inputSize9], false);
    const norm = xe(resize, constants.tf255);
    const transpose = norm.transpose([0, 3, 1, 2]);
    Re(norm);
    Re(resize);
    let objectT;
    if (config3.object.enabled)
      objectT = model15.execute(transpose);
    lastTime14 = now();
    Re(transpose);
    const obj = await process4(objectT, outputSize2, config3);
    last9 = obj;
    resolve(obj);
  });
}

// src/body/posenetutils.ts
var partNames = [
  "nose",
  "leftEye",
  "rightEye",
  "leftEar",
  "rightEar",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "leftWrist",
  "rightWrist",
  "leftHip",
  "rightHip",
  "leftKnee",
  "rightKnee",
  "leftAnkle",
  "rightAnkle"
];
var count = partNames.length;
var partIds = partNames.reduce((result, jointName, i) => {
  result[jointName] = i;
  return result;
}, {});
var connectedPartNames = [
  ["leftHip", "leftShoulder"],
  ["leftElbow", "leftShoulder"],
  ["leftElbow", "leftWrist"],
  ["leftHip", "leftKnee"],
  ["leftKnee", "leftAnkle"],
  ["rightHip", "rightShoulder"],
  ["rightElbow", "rightShoulder"],
  ["rightElbow", "rightWrist"],
  ["rightHip", "rightKnee"],
  ["rightKnee", "rightAnkle"],
  ["leftShoulder", "rightShoulder"],
  ["leftHip", "rightHip"]
];
var connectedPartIndices = connectedPartNames.map(([jointNameA, jointNameB]) => [partIds[jointNameA], partIds[jointNameB]]);
var poseChain = [
  ["nose", "leftEye"],
  ["leftEye", "leftEar"],
  ["nose", "rightEye"],
  ["rightEye", "rightEar"],
  ["nose", "leftShoulder"],
  ["leftShoulder", "leftElbow"],
  ["leftElbow", "leftWrist"],
  ["leftShoulder", "leftHip"],
  ["leftHip", "leftKnee"],
  ["leftKnee", "leftAnkle"],
  ["nose", "rightShoulder"],
  ["rightShoulder", "rightElbow"],
  ["rightElbow", "rightWrist"],
  ["rightShoulder", "rightHip"],
  ["rightHip", "rightKnee"],
  ["rightKnee", "rightAnkle"]
];
function getBoundingBox(keypoints) {
  const coord = keypoints.reduce(({ maxX, maxY, minX, minY }, { position: { x, y } }) => ({
    maxX: Math.max(maxX, x),
    maxY: Math.max(maxY, y),
    minX: Math.min(minX, x),
    minY: Math.min(minY, y)
  }), {
    maxX: Number.NEGATIVE_INFINITY,
    maxY: Number.NEGATIVE_INFINITY,
    minX: Number.POSITIVE_INFINITY,
    minY: Number.POSITIVE_INFINITY
  });
  return [coord.minX, coord.minY, coord.maxX - coord.minX, coord.maxY - coord.minY];
}
function scalePoses(poses, [height, width], [inputResolutionHeight, inputResolutionWidth]) {
  const scaleY = height / inputResolutionHeight;
  const scaleX = width / inputResolutionWidth;
  const scalePose = (pose, i) => ({
    id: i,
    score: pose.score,
    boxRaw: [pose.box[0] / inputResolutionWidth, pose.box[1] / inputResolutionHeight, pose.box[2] / inputResolutionWidth, pose.box[3] / inputResolutionHeight],
    box: [Math.trunc(pose.box[0] * scaleX), Math.trunc(pose.box[1] * scaleY), Math.trunc(pose.box[2] * scaleX), Math.trunc(pose.box[3] * scaleY)],
    keypoints: pose.keypoints.map(({ score, part, position }) => ({
      score,
      part,
      position: [Math.trunc(position.x * scaleX), Math.trunc(position.y * scaleY)],
      positionRaw: [position.x / inputResolutionHeight, position.y / inputResolutionHeight]
    })),
    annotations: {}
  });
  const scaledPoses = poses.map((pose, i) => scalePose(pose, i));
  return scaledPoses;
}
var MaxHeap = class {
  constructor(maxSize2, getElementValue) {
    __publicField(this, "priorityQueue");
    __publicField(this, "numberOfElements");
    __publicField(this, "getElementValue");
    this.priorityQueue = new Array(maxSize2);
    this.numberOfElements = -1;
    this.getElementValue = getElementValue;
  }
  enqueue(x) {
    this.priorityQueue[++this.numberOfElements] = x;
    this.swim(this.numberOfElements);
  }
  dequeue() {
    const max = this.priorityQueue[0];
    this.exchange(0, this.numberOfElements--);
    this.sink(0);
    this.priorityQueue[this.numberOfElements + 1] = null;
    return max;
  }
  empty() {
    return this.numberOfElements === -1;
  }
  size() {
    return this.numberOfElements + 1;
  }
  all() {
    return this.priorityQueue.slice(0, this.numberOfElements + 1);
  }
  max() {
    return this.priorityQueue[0];
  }
  swim(k) {
    while (k > 0 && this.less(Math.floor(k / 2), k)) {
      this.exchange(k, Math.floor(k / 2));
      k = Math.floor(k / 2);
    }
  }
  sink(k) {
    while (2 * k <= this.numberOfElements) {
      let j10 = 2 * k;
      if (j10 < this.numberOfElements && this.less(j10, j10 + 1))
        j10++;
      if (!this.less(k, j10))
        break;
      this.exchange(k, j10);
      k = j10;
    }
  }
  getValueAt(i) {
    return this.getElementValue(this.priorityQueue[i]);
  }
  less(i, j10) {
    return this.getValueAt(i) < this.getValueAt(j10);
  }
  exchange(i, j10) {
    const t = this.priorityQueue[i];
    this.priorityQueue[i] = this.priorityQueue[j10];
    this.priorityQueue[j10] = t;
  }
};
function getOffsetPoint(y, x, keypoint, offsets) {
  return {
    y: offsets.get(y, x, keypoint),
    x: offsets.get(y, x, keypoint + count)
  };
}
function getImageCoords(part, outputStride2, offsets) {
  const { heatmapY, heatmapX, id: keypoint } = part;
  const { y, x } = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);
  return {
    x: part.heatmapX * outputStride2 + x,
    y: part.heatmapY * outputStride2 + y
  };
}
function clamp(a, min, max) {
  if (a < min)
    return min;
  if (a > max)
    return max;
  return a;
}
function squaredDistance(y12, x12, y22, x22) {
  const dy2 = y22 - y12;
  const dx2 = x22 - x12;
  return dy2 * dy2 + dx2 * dx2;
}
function addVectors(a, b) {
  return { x: a.x + b.x, y: a.y + b.y };
}

// src/body/posenet.ts
var model16;
var poseNetOutputs = ["MobilenetV1/offset_2/BiasAdd", "MobilenetV1/heatmap_2/BiasAdd", "MobilenetV1/displacement_fwd_2/BiasAdd", "MobilenetV1/displacement_bwd_2/BiasAdd"];
var localMaximumRadius = 1;
var outputStride = 16;
var squaredNmsRadius = 50 ** 2;
function traverse(edgeId, sourceKeypoint, targetId, scores, offsets, displacements, offsetRefineStep = 2) {
  const getDisplacement = (point2) => ({
    y: displacements.get(point2.y, point2.x, edgeId),
    x: displacements.get(point2.y, point2.x, displacements.shape[2] / 2 + edgeId)
  });
  const getStridedIndexNearPoint = (point2, height2, width2) => ({
    y: clamp(Math.round(point2.y / outputStride), 0, height2 - 1),
    x: clamp(Math.round(point2.x / outputStride), 0, width2 - 1)
  });
  const [height, width] = scores.shape;
  const sourceKeypointIndices = getStridedIndexNearPoint(sourceKeypoint.position, height, width);
  const displacement = getDisplacement(sourceKeypointIndices);
  const displacedPoint = addVectors(sourceKeypoint.position, displacement);
  let targetKeypoint = displacedPoint;
  for (let i = 0; i < offsetRefineStep; i++) {
    const targetKeypointIndices = getStridedIndexNearPoint(targetKeypoint, height, width);
    const offsetPoint = getOffsetPoint(targetKeypointIndices.y, targetKeypointIndices.x, targetId, offsets);
    targetKeypoint = addVectors({ x: targetKeypointIndices.x * outputStride, y: targetKeypointIndices.y * outputStride }, { x: offsetPoint.x, y: offsetPoint.y });
  }
  const targetKeyPointIndices = getStridedIndexNearPoint(targetKeypoint, height, width);
  const score = scores.get(targetKeyPointIndices.y, targetKeyPointIndices.x, targetId);
  return { position: targetKeypoint, part: partNames[targetId], score };
}
function decodePose(root, scores, offsets, displacementsFwd, displacementsBwd) {
  const tuples = poseChain.map(([parentJoinName, childJoinName]) => [partIds[parentJoinName], partIds[childJoinName]]);
  const edgesFwd = tuples.map(([, childJointId]) => childJointId);
  const edgesBwd = tuples.map(([parentJointId]) => parentJointId);
  const numParts = scores.shape[2];
  const numEdges = edgesFwd.length;
  const keypoints = new Array(numParts);
  const rootPoint = getImageCoords(root.part, outputStride, offsets);
  keypoints[root.part.id] = {
    score: root.score,
    part: partNames[root.part.id],
    position: rootPoint
  };
  for (let edge = numEdges - 1; edge >= 0; --edge) {
    const sourceId = edgesFwd[edge];
    const targetId = edgesBwd[edge];
    if (keypoints[sourceId] && !keypoints[targetId]) {
      keypoints[targetId] = traverse(edge, keypoints[sourceId], targetId, scores, offsets, displacementsBwd);
    }
  }
  for (let edge = 0; edge < numEdges; ++edge) {
    const sourceId = edgesBwd[edge];
    const targetId = edgesFwd[edge];
    if (keypoints[sourceId] && !keypoints[targetId]) {
      keypoints[targetId] = traverse(edge, keypoints[sourceId], targetId, scores, offsets, displacementsFwd);
    }
  }
  return keypoints;
}
function scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, scores) {
  const [height, width] = scores.shape;
  let localMaximum = true;
  const yStart = Math.max(heatmapY - localMaximumRadius, 0);
  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);
  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {
    const xStart = Math.max(heatmapX - localMaximumRadius, 0);
    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);
    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {
      if (scores.get(yCurrent, xCurrent, keypointId) > score) {
        localMaximum = false;
        break;
      }
    }
    if (!localMaximum)
      break;
  }
  return localMaximum;
}
function buildPartWithScoreQueue(minConfidence2, scores) {
  const [height, width, numKeypoints] = scores.shape;
  const queue = new MaxHeap(height * width * numKeypoints, ({ score }) => score);
  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {
    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {
      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {
        const score = scores.get(heatmapY, heatmapX, keypointId);
        if (score < minConfidence2)
          continue;
        if (scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, scores))
          queue.enqueue({ score, part: { heatmapY, heatmapX, id: keypointId } });
      }
    }
  }
  return queue;
}
function withinRadius(poses, { x, y }, keypointId) {
  return poses.some(({ keypoints }) => {
    var _a2;
    const correspondingKeypoint = (_a2 = keypoints[keypointId]) == null ? void 0 : _a2.position;
    if (!correspondingKeypoint)
      return false;
    return squaredDistance(y, x, correspondingKeypoint.y, correspondingKeypoint.x) <= squaredNmsRadius;
  });
}
function getInstanceScore(existingPoses, keypoints) {
  const notOverlappedKeypointScores = keypoints.reduce((result, { position, score }, keypointId) => {
    if (!withinRadius(existingPoses, position, keypointId))
      result += score;
    return result;
  }, 0);
  return notOverlappedKeypointScores / keypoints.length;
}
function decode(offsets, scores, displacementsFwd, displacementsBwd, maxDetected, minConfidence2) {
  const poses = [];
  const queue = buildPartWithScoreQueue(minConfidence2, scores);
  while (poses.length < maxDetected && !queue.empty()) {
    const root = queue.dequeue();
    const rootImageCoords = getImageCoords(root.part, outputStride, offsets);
    if (withinRadius(poses, rootImageCoords, root.part.id))
      continue;
    let keypoints = decodePose(root, scores, offsets, displacementsFwd, displacementsBwd);
    keypoints = keypoints.filter((a) => a.score > minConfidence2);
    const score = getInstanceScore(poses, keypoints);
    const box = getBoundingBox(keypoints);
    if (score > minConfidence2)
      poses.push({ keypoints, box, score: Math.round(100 * score) / 100 });
  }
  return poses;
}
async function predict17(input, config3) {
  const res = j(() => {
    if (!model16.inputs[0].shape)
      return [];
    const resized = jn.resizeBilinear(input, [model16.inputs[0].shape[2], model16.inputs[0].shape[1]]);
    const normalized = ge(xe(ce(resized, "float32"), 127.5), 1);
    const results = model16.execute(normalized, poseNetOutputs);
    const results3d = results.map((y) => gr(y, [0]));
    results3d[1] = qs(results3d[1]);
    return results3d;
  });
  const buffers = await Promise.all(res.map((tensor) => tensor.buffer()));
  for (const t of res)
    Re(t);
  const decoded = await decode(buffers[0], buffers[1], buffers[2], buffers[3], config3.body.maxDetected, config3.body.minConfidence);
  if (!model16.inputs[0].shape)
    return [];
  const scaled = scalePoses(decoded, [input.shape[1], input.shape[2]], [model16.inputs[0].shape[2], model16.inputs[0].shape[1]]);
  return scaled;
}
async function load17(config3) {
  if (!model16 || env.initial)
    model16 = await loadModel(config3.body.modelPath);
  else if (config3.debug)
    log("cached model:", model16["modelUrl"]);
  return model16;
}

// src/segmentation/segmentation.ts
var model17;
var busy = false;
async function load18(config3) {
  if (!model17 || env.initial)
    model17 = await loadModel(config3.segmentation.modelPath);
  else if (config3.debug)
    log("cached model:", model17["modelUrl"]);
  return model17;
}
async function process5(input, background, config3) {
  var _a2, _b2;
  if (busy)
    return { data: [], canvas: null, alpha: null };
  busy = true;
  if (!model17)
    await load18(config3);
  const inputImage = await process2(input, config3);
  const width = ((_a2 = inputImage.tensor) == null ? void 0 : _a2.shape[2]) || 0;
  const height = ((_b2 = inputImage.tensor) == null ? void 0 : _b2.shape[1]) || 0;
  if (!inputImage.tensor)
    return { data: [], canvas: null, alpha: null };
  const t = {};
  t.resize = jn.resizeBilinear(inputImage.tensor, [model17.inputs[0].shape ? model17.inputs[0].shape[1] : 0, model17.inputs[0].shape ? model17.inputs[0].shape[2] : 0], false);
  Re(inputImage.tensor);
  t.norm = xe(t.resize, constants.tf255);
  t.res = model17.execute(t.norm);
  t.squeeze = gr(t.res, 0);
  if (t.squeeze.shape[2] === 2) {
    t.softmax = cb(t.squeeze);
    [t.bg, t.fg] = Fs(t.softmax, 2);
    t.expand = Pn(t.fg, 2);
    t.pad = Pn(t.expand, 0);
    t.crop = jn.cropAndResize(t.pad, [[0, 0, 0.5, 0.5]], [0], [width, height]);
    t.data = gr(t.crop, 0);
  } else {
    t.data = jn.resizeBilinear(t.squeeze, [height, width]);
  }
  const data = Array.from(await t.data.data());
  if (env.node && !env.Canvas && typeof ImageData === "undefined") {
    if (config3.debug)
      log("canvas support missing");
    Object.keys(t).forEach((tensor) => Re(t[tensor]));
    return { data, canvas: null, alpha: null };
  }
  const alphaCanvas = canvas(width, height);
  if (Ek)
    await Ek.toPixels(t.data, alphaCanvas);
  const alphaCtx = alphaCanvas.getContext("2d");
  if (config3.segmentation.blur && config3.segmentation.blur > 0)
    alphaCtx.filter = `blur(${config3.segmentation.blur}px)`;
  const alphaData = alphaCtx.getImageData(0, 0, width, height);
  const compositeCanvas = canvas(width, height);
  const compositeCtx = compositeCanvas.getContext("2d");
  if (inputImage.canvas)
    compositeCtx.drawImage(inputImage.canvas, 0, 0);
  compositeCtx.globalCompositeOperation = "darken";
  if (config3.segmentation.blur && config3.segmentation.blur > 0)
    compositeCtx.filter = `blur(${config3.segmentation.blur}px)`;
  compositeCtx.drawImage(alphaCanvas, 0, 0);
  compositeCtx.globalCompositeOperation = "source-over";
  compositeCtx.filter = "none";
  const compositeData = compositeCtx.getImageData(0, 0, width, height);
  for (let i = 0; i < width * height; i++)
    compositeData.data[4 * i + 3] = alphaData.data[4 * i + 0];
  compositeCtx.putImageData(compositeData, 0, 0);
  let mergedCanvas = null;
  if (background && compositeCanvas) {
    mergedCanvas = canvas(width, height);
    const bgImage = await process2(background, config3);
    Re(bgImage.tensor);
    const ctxMerge = mergedCanvas.getContext("2d");
    ctxMerge.drawImage(bgImage.canvas, 0, 0, mergedCanvas.width, mergedCanvas.height);
    ctxMerge.drawImage(compositeCanvas, 0, 0);
  }
  Object.keys(t).forEach((tensor) => Re(t[tensor]));
  busy = false;
  return { data, canvas: compositeCanvas, alpha: alphaCanvas };
}

// src/models.ts
var Models = class {
  constructor() {
    __publicField(this, "ssrnetage", null);
    __publicField(this, "gear", null);
    __publicField(this, "blazeposedetect", null);
    __publicField(this, "blazepose", null);
    __publicField(this, "centernet", null);
    __publicField(this, "efficientpose", null);
    __publicField(this, "mobilefacenet", null);
    __publicField(this, "emotion", null);
    __publicField(this, "facedetect", null);
    __publicField(this, "faceiris", null);
    __publicField(this, "facemesh", null);
    __publicField(this, "faceres", null);
    __publicField(this, "ssrnetgender", null);
    __publicField(this, "handpose", null);
    __publicField(this, "handskeleton", null);
    __publicField(this, "handtrack", null);
    __publicField(this, "liveness", null);
    __publicField(this, "movenet", null);
    __publicField(this, "nanodet", null);
    __publicField(this, "posenet", null);
    __publicField(this, "segmentation", null);
    __publicField(this, "antispoof", null);
  }
};
function reset(instance) {
  for (const model18 of Object.keys(instance.models))
    instance.models[model18] = null;
}
async function load19(instance) {
  var _a2, _b2, _c, _d2, _e, _f, _g2, _h, _i, _j2, _k2, _l2, _m2, _n2, _o2, _p2, _q2, _r2, _s2, _t2, _u2, _v2, _w2, _x2, _y2, _z2, _A2, _B2, _C2, _D2, _E2;
  if (env.initial)
    reset(instance);
  if (instance.config.hand.enabled) {
    if (!instance.models.handpose && ((_b2 = (_a2 = instance.config.hand.detector) == null ? void 0 : _a2.modelPath) == null ? void 0 : _b2.includes("handdetect")))
      [instance.models.handpose, instance.models.handskeleton] = await load13(instance.config);
    if (!instance.models.handskeleton && instance.config.hand.landmarks && ((_d2 = (_c = instance.config.hand.detector) == null ? void 0 : _c.modelPath) == null ? void 0 : _d2.includes("handdetect")))
      [instance.models.handpose, instance.models.handskeleton] = await load13(instance.config);
  }
  if (instance.config.body.enabled && !instance.models.blazepose && ((_f = (_e = instance.config.body) == null ? void 0 : _e.modelPath) == null ? void 0 : _f.includes("blazepose")))
    instance.models.blazepose = loadPose(instance.config);
  if (instance.config.body.enabled && !instance.models.blazeposedetect && instance.config.body["detector"] && instance.config.body["detector"]["modelPath"])
    instance.models.blazeposedetect = loadDetect(instance.config);
  if (instance.config.body.enabled && !instance.models.efficientpose && ((_h = (_g2 = instance.config.body) == null ? void 0 : _g2.modelPath) == null ? void 0 : _h.includes("efficientpose")))
    instance.models.efficientpose = load7(instance.config);
  if (instance.config.body.enabled && !instance.models.movenet && ((_j2 = (_i = instance.config.body) == null ? void 0 : _i.modelPath) == null ? void 0 : _j2.includes("movenet")))
    instance.models.movenet = load15(instance.config);
  if (instance.config.body.enabled && !instance.models.posenet && ((_l2 = (_k2 = instance.config.body) == null ? void 0 : _k2.modelPath) == null ? void 0 : _l2.includes("posenet")))
    instance.models.posenet = load17(instance.config);
  if (instance.config.face.enabled && !instance.models.facedetect)
    instance.models.facedetect = load5(instance.config);
  if (instance.config.face.enabled && ((_m2 = instance.config.face.antispoof) == null ? void 0 : _m2.enabled) && !instance.models.antispoof)
    instance.models.antispoof = load4(instance.config);
  if (instance.config.face.enabled && ((_n2 = instance.config.face.liveness) == null ? void 0 : _n2.enabled) && !instance.models.liveness)
    instance.models.liveness = load14(instance.config);
  if (instance.config.face.enabled && ((_o2 = instance.config.face.description) == null ? void 0 : _o2.enabled) && !instance.models.faceres)
    instance.models.faceres = load12(instance.config);
  if (instance.config.face.enabled && ((_p2 = instance.config.face.emotion) == null ? void 0 : _p2.enabled) && !instance.models.emotion)
    instance.models.emotion = load8(instance.config);
  if (instance.config.face.enabled && ((_q2 = instance.config.face.iris) == null ? void 0 : _q2.enabled) && !((_r2 = instance.config.face.attention) == null ? void 0 : _r2.enabled) && !instance.models.faceiris)
    instance.models.faceiris = load10(instance.config);
  if (instance.config.face.enabled && ((_s2 = instance.config.face.mesh) == null ? void 0 : _s2.enabled) && !instance.models.facemesh)
    instance.models.facemesh = load11(instance.config);
  if (instance.config.face.enabled && ((_t2 = instance.config.face["gear"]) == null ? void 0 : _t2.enabled) && !instance.models.gear)
    instance.models.gear = load(instance.config);
  if (instance.config.face.enabled && ((_u2 = instance.config.face["ssrnet"]) == null ? void 0 : _u2.enabled) && !instance.models.ssrnetage)
    instance.models.ssrnetage = load2(instance.config);
  if (instance.config.face.enabled && ((_v2 = instance.config.face["ssrnet"]) == null ? void 0 : _v2.enabled) && !instance.models.ssrnetgender)
    instance.models.ssrnetgender = load3(instance.config);
  if (instance.config.face.enabled && ((_w2 = instance.config.face["mobilefacenet"]) == null ? void 0 : _w2.enabled) && !instance.models.mobilefacenet)
    instance.models.mobilefacenet = load9(instance.config);
  if (instance.config.hand.enabled && !instance.models.handtrack && ((_y2 = (_x2 = instance.config.hand.detector) == null ? void 0 : _x2.modelPath) == null ? void 0 : _y2.includes("handtrack")))
    instance.models.handtrack = loadDetect2(instance.config);
  if (instance.config.hand.enabled && instance.config.hand.landmarks && !instance.models.handskeleton && ((_A2 = (_z2 = instance.config.hand.detector) == null ? void 0 : _z2.modelPath) == null ? void 0 : _A2.includes("handtrack")))
    instance.models.handskeleton = loadSkeleton(instance.config);
  if (instance.config.object.enabled && !instance.models.centernet && ((_C2 = (_B2 = instance.config.object) == null ? void 0 : _B2.modelPath) == null ? void 0 : _C2.includes("centernet")))
    instance.models.centernet = load6(instance.config);
  if (instance.config.object.enabled && !instance.models.nanodet && ((_E2 = (_D2 = instance.config.object) == null ? void 0 : _D2.modelPath) == null ? void 0 : _E2.includes("nanodet")))
    instance.models.nanodet = load16(instance.config);
  if (instance.config.segmentation.enabled && !instance.models.segmentation)
    instance.models.segmentation = load18(instance.config);
  for await (const model18 of Object.keys(instance.models)) {
    if (instance.models[model18] && typeof instance.models[model18] !== "undefined")
      instance.models[model18] = await instance.models[model18];
  }
}
async function validate2(instance) {
  const simpleOps = ["const", "placeholder", "noop", "pad", "squeeze", "add", "sub", "mul", "div"];
  for (const defined of Object.keys(instance.models)) {
    const model18 = instance.models[defined];
    if (!model18)
      continue;
    const ops = [];
    const executor = model18 == null ? void 0 : model18.executor;
    if (executor && executor.graph.nodes) {
      for (const kernel of Object.values(executor.graph.nodes)) {
        const op2 = kernel.op.toLowerCase();
        if (!ops.includes(op2))
          ops.push(op2);
      }
    } else {
      if (!executor && instance.config.debug)
        log("model signature not determined:", defined);
    }
    const missing = [];
    for (const op2 of ops) {
      if (!simpleOps.includes(op2) && !instance.env.kernels.includes(op2) && !instance.env.kernels.includes(op2.replace("_", "")) && !instance.env.kernels.includes(op2.replace("native", "")) && !instance.env.kernels.includes(op2.replace("v2", ""))) {
        missing.push(op2);
      }
    }
    if (instance.config.debug && missing.length > 0)
      log("model validation failed:", defined, missing);
  }
}

// src/tfjs/humangl.ts
var config2 = {
  name: "humangl",
  priority: 999,
  canvas: null,
  gl: null,
  extensions: [],
  webGLattr: {
    alpha: false,
    antialias: false,
    premultipliedAlpha: false,
    preserveDrawingBuffer: false,
    depth: false,
    stencil: false,
    failIfMajorPerformanceCaveat: false,
    desynchronized: true
  }
};
function extensions() {
  const gl2 = config2.gl;
  if (!gl2)
    return;
  config2.extensions = gl2.getSupportedExtensions();
}
async function register(instance) {
  var _a2;
  if (instance.config.backend !== "humangl")
    return;
  if (config2.name in Ss().registry && (!config2.gl || !config2.gl.getParameter(config2.gl.VERSION))) {
    log("error: humangl backend invalid context");
    reset(instance);
  }
  if (!spe(config2.name)) {
    try {
      config2.canvas = await canvas(100, 100);
    } catch (err) {
      log("error: cannot create canvas:", err);
      return;
    }
    try {
      config2.gl = (_a2 = config2.canvas) == null ? void 0 : _a2.getContext("webgl2", config2.webGLattr);
      const glv2 = config2.gl.getParameter(config2.gl.VERSION).includes("2.0");
      if (!glv2) {
        log("override: using fallback webgl backend as webgl 2.0 is not detected");
        instance.config.backend = "webgl";
        return;
      }
      if (config2.canvas) {
        config2.canvas.addEventListener("webglcontextlost", async (e) => {
          log("error: humangl:", e.type);
          log("possible browser memory leak using webgl or conflict with multiple backend registrations");
          instance.emit("error");
          throw new Error("backend error: webgl context lost");
        });
        config2.canvas.addEventListener("webglcontextrestored", (e) => {
          log("error: humangl context restored:", e);
        });
        config2.canvas.addEventListener("webglcontextcreationerror", (e) => {
          log("error: humangl context create:", e);
        });
      }
    } catch (err) {
      log("error: cannot get WebGL context:", err);
      return;
    }
    try {
      D5(2, config2.gl);
    } catch (err) {
      log("error: cannot set WebGL context:", err);
      return;
    }
    try {
      const ctx = new Xf(config2.gl);
      fp(config2.name, () => new G1(ctx), config2.priority);
    } catch (err) {
      log("error: cannot register WebGL backend:", err);
      return;
    }
    try {
      const kernels = em("webgl");
      kernels.forEach((kernelConfig) => {
        const newKernelConfig = { ...kernelConfig, backendName: config2.name };
        El(newKernelConfig);
      });
    } catch (err) {
      log("error: cannot update WebGL backend registration:", err);
      return;
    }
    const current = WA().getGPGPUContext ? WA().getGPGPUContext().gl : null;
    if (current) {
      log(`humangl webgl version:${current.getParameter(current.VERSION)} renderer:${current.getParameter(current.RENDERER)}`);
    } else {
      log("error: no current gl context:", current, config2.gl);
      return;
    }
    try {
      rk.set("WEBGL_VERSION", 2);
    } catch (err) {
      log("error: cannot set WebGL backend flags:", err);
      return;
    }
    extensions();
    log("backend registered:", config2.name);
  }
}

// src/tfjs/backend.ts
function registerCustomOps() {
  if (!env.kernels.includes("mod")) {
    const kernelMod = {
      kernelName: "Mod",
      backendName: tpe(),
      kernelFunc: (op2) => j(() => ge(op2.inputs.a, V(xe(op2.inputs.a, op2.inputs.b), op2.inputs.b)))
    };
    El(kernelMod);
    env.kernels.push("mod");
  }
  if (!env.kernels.includes("floormod")) {
    const kernelMod = {
      kernelName: "FloorMod",
      backendName: tpe(),
      kernelFunc: (op2) => j(() => Yk(op2.inputs.a / op2.inputs.b) * op2.inputs.b + ND(op2.inputs.a, op2.inputs.b))
    };
    El(kernelMod);
    env.kernels.push("floormod");
  }
}
async function check(instance, force = false) {
  instance.state = "backend";
  if (force || env.initial || instance.config.backend && instance.config.backend.length > 0 && tpe() !== instance.config.backend) {
    const timeStamp = now();
    if (instance.config.backend && instance.config.backend.length > 0) {
      if (typeof window === "undefined" && typeof WorkerGlobalScope !== "undefined" && instance.config.debug) {
        if (instance.config.debug)
          log("running inside web worker");
      }
      if (env.browser && instance.config.backend === "tensorflow") {
        if (instance.config.debug)
          log("override: backend set to tensorflow while running in browser");
        instance.config.backend = "humangl";
      }
      if (env.node && (instance.config.backend === "webgl" || instance.config.backend === "humangl")) {
        if (instance.config.debug)
          log(`override: backend set to ${instance.config.backend} while running in nodejs`);
        instance.config.backend = "tensorflow";
      }
      if (env.browser && instance.config.backend === "webgpu") {
        if (typeof navigator === "undefined" || typeof navigator["gpu"] === "undefined") {
          log("override: backend set to webgpu but browser does not support webgpu");
          instance.config.backend = "humangl";
        } else {
          const adapter = await navigator["gpu"].requestAdapter();
          if (instance.config.debug)
            log("enumerated webgpu adapter:", adapter);
        }
      }
      if (instance.config.backend === "humangl")
        await register(instance);
      const available = Object.keys(Ss().registryFactory);
      if (instance.config.debug)
        log("available backends:", available);
      if (!available.includes(instance.config.backend)) {
        log(`error: backend ${instance.config.backend} not found in registry`);
        instance.config.backend = env.node ? "tensorflow" : "webgl";
        if (instance.config.debug)
          log(`override: setting backend ${instance.config.backend}`);
      }
      if (instance.config.debug)
        log("setting backend:", instance.config.backend);
      if (instance.config.backend === "wasm") {
        if (instance.config.debug)
          log("wasm path:", instance.config.wasmPath);
        if (typeof (tfjs_esm_exports == null ? void 0 : tfjs_esm_exports.setWasmPaths) !== "undefined")
          await ehe(instance.config.wasmPath, instance.config.wasmPlatformFetch);
        else
          throw new Error("backend error: attempting to use wasm backend but wasm path is not set");
        const simd = await X().getAsync("WASM_HAS_SIMD_SUPPORT");
        const mt2 = await X().getAsync("WASM_HAS_MULTITHREAD_SUPPORT");
        if (instance.config.debug)
          log(`wasm execution: ${simd ? "SIMD" : "no SIMD"} ${mt2 ? "multithreaded" : "singlethreaded"}`);
        if (instance.config.debug && !simd)
          log("warning: wasm simd support is not enabled");
      }
      try {
        await Jde(instance.config.backend);
        await epe();
        init();
      } catch (err) {
        log("error: cannot set backend:", instance.config.backend, err);
        return false;
      }
    }
    if (tpe() === "humangl") {
      rk.set("CHECK_COMPUTATION_FOR_ERRORS", false);
      rk.set("WEBGL_CPU_FORWARD", true);
      rk.set("WEBGL_USE_SHAPES_UNIFORMS", true);
      rk.set("CPU_HANDOFF_SIZE_THRESHOLD", 256);
      if (typeof instance.config["deallocate"] !== "undefined" && instance.config["deallocate"]) {
        log("changing webgl: WEBGL_DELETE_TEXTURE_THRESHOLD:", true);
        rk.set("WEBGL_DELETE_TEXTURE_THRESHOLD", 0);
      }
      if (WA().getGPGPUContext) {
        const gl2 = await WA().getGPGPUContext().gl;
        if (instance.config.debug)
          log(`gl version:${gl2.getParameter(gl2.VERSION)} renderer:${gl2.getParameter(gl2.RENDERER)}`);
      }
    }
    if (tpe() === "webgpu") {
    }
    jde();
    await epe();
    instance.performance.initBackend = Math.trunc(now() - timeStamp);
    instance.config.backend = tpe();
    await env.updateBackend();
    registerCustomOps();
  }
  return true;
}
function fakeOps(kernelNames, config3) {
  for (const kernelName of kernelNames) {
    const kernelConfig = {
      kernelName,
      backendName: config3.backend,
      kernelFunc: () => {
        if (config3.debug)
          log("kernelFunc", kernelName, config3.backend);
      }
    };
    El(kernelConfig);
  }
  env.kernels = em(tpe()).map((kernel) => kernel.kernelName.toLowerCase());
}

// src/draw/draw.ts
var draw_exports = {};
__export(draw_exports, {
  all: () => all,
  body: () => body,
  canvas: () => canvas2,
  face: () => face,
  gesture: () => gesture,
  hand: () => hand,
  object: () => object,
  options: () => options3,
  person: () => person
});

// src/draw/primitives.ts
var getCanvasContext = (input) => {
  if (!input)
    log("draw error: invalid canvas");
  else if (!input.getContext)
    log("draw error: canvas context not defined");
  else {
    const ctx = input.getContext("2d");
    if (!ctx)
      log("draw error: cannot get canvas context");
    else
      return ctx;
  }
  return null;
};
var rad2deg = (theta) => Math.round(theta * 180 / Math.PI);
var colorDepth = (z, opt2) => {
  if (!opt2.useDepth || typeof z === "undefined")
    return opt2.color;
  const rgb2 = Uint8ClampedArray.from([127 + 2 * z, 127 - 2 * z, 255]);
  const color = `rgba(${rgb2[0]}, ${rgb2[1]}, ${rgb2[2]}, ${opt2.alpha})`;
  return color;
};
function point(ctx, x, y, z, localOptions) {
  ctx.fillStyle = colorDepth(z, localOptions);
  ctx.beginPath();
  ctx.arc(x, y, localOptions.pointSize, 0, 2 * Math.PI);
  ctx.fill();
}
function rect(ctx, x, y, width, height, localOptions) {
  ctx.beginPath();
  ctx.lineWidth = localOptions.lineWidth;
  if (localOptions.useCurves) {
    const cx2 = (x + x + width) / 2;
    const cy2 = (y + y + height) / 2;
    ctx.ellipse(cx2, cy2, width / 2, height / 2, 0, 0, 2 * Math.PI);
  } else {
    ctx.moveTo(x + localOptions.roundRect, y);
    ctx.lineTo(x + width - localOptions.roundRect, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + localOptions.roundRect);
    ctx.lineTo(x + width, y + height - localOptions.roundRect);
    ctx.quadraticCurveTo(x + width, y + height, x + width - localOptions.roundRect, y + height);
    ctx.lineTo(x + localOptions.roundRect, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - localOptions.roundRect);
    ctx.lineTo(x, y + localOptions.roundRect);
    ctx.quadraticCurveTo(x, y, x + localOptions.roundRect, y);
    ctx.closePath();
  }
  ctx.stroke();
}
function lines(ctx, points, localOptions) {
  if (points.length < 2)
    return;
  ctx.beginPath();
  ctx.moveTo(points[0][0], points[0][1]);
  for (const pt2 of points) {
    ctx.strokeStyle = colorDepth(pt2[2], localOptions);
    ctx.lineTo(Math.trunc(pt2[0]), Math.trunc(pt2[1]));
  }
  ctx.stroke();
  if (localOptions.fillPolygons) {
    ctx.closePath();
    ctx.fill();
  }
}
function curves(ctx, points, localOptions) {
  if (points.length < 2)
    return;
  ctx.lineWidth = localOptions.lineWidth;
  if (!localOptions.useCurves || points.length <= 2) {
    lines(ctx, points, localOptions);
    return;
  }
  ctx.moveTo(points[0][0], points[0][1]);
  for (let i = 0; i < points.length - 2; i++) {
    const xc = (points[i][0] + points[i + 1][0]) / 2;
    const yc = (points[i][1] + points[i + 1][1]) / 2;
    ctx.quadraticCurveTo(points[i][0], points[i][1], xc, yc);
  }
  ctx.quadraticCurveTo(points[points.length - 2][0], points[points.length - 2][1], points[points.length - 1][0], points[points.length - 1][1]);
  ctx.stroke();
  if (localOptions.fillPolygons) {
    ctx.closePath();
    ctx.fill();
  }
}
function arrow(ctx, from, to2, radius = 5) {
  let angle;
  let x;
  let y;
  ctx.beginPath();
  ctx.moveTo(from[0], from[1]);
  ctx.lineTo(to2[0], to2[1]);
  angle = Math.atan2(to2[1] - from[1], to2[0] - from[0]);
  x = radius * Math.cos(angle) + to2[0];
  y = radius * Math.sin(angle) + to2[1];
  ctx.moveTo(x, y);
  angle += 1 / 3 * (2 * Math.PI);
  x = radius * Math.cos(angle) + to2[0];
  y = radius * Math.sin(angle) + to2[1];
  ctx.lineTo(x, y);
  angle += 1 / 3 * (2 * Math.PI);
  x = radius * Math.cos(angle) + to2[0];
  y = radius * Math.sin(angle) + to2[1];
  ctx.lineTo(x, y);
  ctx.closePath();
  ctx.stroke();
  ctx.fill();
}

// src/draw/options.ts
var options3 = {
  color: "rgba(173, 216, 230, 0.6)",
  labelColor: "rgba(173, 216, 230, 1)",
  shadowColor: "black",
  alpha: 0.5,
  font: 'small-caps 16px "Segoe UI"',
  lineHeight: 18,
  lineWidth: 4,
  pointSize: 2,
  roundRect: 8,
  drawPoints: false,
  drawLabels: true,
  drawBoxes: true,
  drawAttention: true,
  drawGestures: true,
  drawPolygons: true,
  drawGaze: true,
  fillPolygons: false,
  useDepth: true,
  useCurves: false
};

// src/draw/face.ts
var opt;
function drawLabels(f, ctx) {
  if (opt.drawLabels) {
    const labels2 = [];
    labels2.push(`face: ${Math.trunc(100 * f.score)}%`);
    if (f.genderScore)
      labels2.push(`${f.gender || ""} ${Math.trunc(100 * f.genderScore)}%`);
    if (f.age)
      labels2.push(`age: ${f.age || ""}`);
    if (f.iris)
      labels2.push(`distance: ${f.iris}`);
    if (f.real)
      labels2.push(`real: ${Math.trunc(100 * f.real)}%`);
    if (f.live)
      labels2.push(`live: ${Math.trunc(100 * f.live)}%`);
    if (f.emotion && f.emotion.length > 0) {
      const emotion = f.emotion.map((a) => `${Math.trunc(100 * a.score)}% ${a.emotion}`);
      if (emotion.length > 3)
        emotion.length = 3;
      labels2.push(emotion.join(" "));
    }
    if (f.rotation && f.rotation.angle && f.rotation.gaze) {
      if (f.rotation.angle.roll)
        labels2.push(`roll: ${rad2deg(f.rotation.angle.roll)}\xB0 yaw:${rad2deg(f.rotation.angle.yaw)}\xB0 pitch:${rad2deg(f.rotation.angle.pitch)}\xB0`);
      if (f.rotation.gaze.bearing)
        labels2.push(`gaze: ${rad2deg(f.rotation.gaze.bearing)}\xB0`);
    }
    if (labels2.length === 0)
      labels2.push("face");
    ctx.fillStyle = opt.color;
    for (let i = labels2.length - 1; i >= 0; i--) {
      const x = Math.max(f.box[0], 0);
      const y = i * opt.lineHeight + f.box[1];
      if (opt.shadowColor && opt.shadowColor !== "") {
        ctx.fillStyle = opt.shadowColor;
        ctx.fillText(labels2[i], x + 5, y + 16);
      }
      ctx.fillStyle = opt.labelColor;
      ctx.fillText(labels2[i], x + 4, y + 15);
    }
  }
}
function drawIrisElipse(f, ctx) {
  if (f.annotations && f.annotations["leftEyeIris"] && f.annotations["leftEyeIris"][0]) {
    ctx.strokeStyle = opt.useDepth ? "rgba(255, 200, 255, 0.3)" : opt.color;
    ctx.beginPath();
    const sizeX = Math.abs(f.annotations["leftEyeIris"][3][0] - f.annotations["leftEyeIris"][1][0]) / 2;
    const sizeY = Math.abs(f.annotations["leftEyeIris"][4][1] - f.annotations["leftEyeIris"][2][1]) / 2;
    ctx.ellipse(f.annotations["leftEyeIris"][0][0], f.annotations["leftEyeIris"][0][1], sizeX, sizeY, 0, 0, 2 * Math.PI);
    ctx.stroke();
    if (opt.fillPolygons) {
      ctx.fillStyle = opt.useDepth ? "rgba(255, 255, 200, 0.3)" : opt.color;
      ctx.fill();
    }
  }
  if (f.annotations && f.annotations["rightEyeIris"] && f.annotations["rightEyeIris"][0]) {
    ctx.strokeStyle = opt.useDepth ? "rgba(255, 200, 255, 0.3)" : opt.color;
    ctx.beginPath();
    const sizeX = Math.abs(f.annotations["rightEyeIris"][3][0] - f.annotations["rightEyeIris"][1][0]) / 2;
    const sizeY = Math.abs(f.annotations["rightEyeIris"][4][1] - f.annotations["rightEyeIris"][2][1]) / 2;
    ctx.ellipse(f.annotations["rightEyeIris"][0][0], f.annotations["rightEyeIris"][0][1], sizeX, sizeY, 0, 0, 2 * Math.PI);
    ctx.stroke();
    if (opt.fillPolygons) {
      ctx.fillStyle = opt.useDepth ? "rgba(255, 255, 200, 0.3)" : opt.color;
      ctx.fill();
    }
  }
}
function drawGazeSpheres(f, ctx) {
  var _a2;
  if (opt.drawGaze && ((_a2 = f.rotation) == null ? void 0 : _a2.angle) && typeof Path2D !== "undefined") {
    ctx.strokeStyle = "pink";
    const valX = f.box[0] + f.box[2] / 2 - f.box[3] * rad2deg(f.rotation.angle.yaw) / 90;
    const valY = f.box[1] + f.box[3] / 2 + f.box[2] * rad2deg(f.rotation.angle.pitch) / 90;
    const pathV = new Path2D(`
      M ${f.box[0] + f.box[2] / 2} ${f.box[1]}
      C
        ${valX} ${f.box[1]},
        ${valX} ${f.box[1] + f.box[3]},
        ${f.box[0] + f.box[2] / 2} ${f.box[1] + f.box[3]}
    `);
    const pathH = new Path2D(`
      M ${f.box[0]} ${f.box[1] + f.box[3] / 2}
      C 
        ${f.box[0]} ${valY},
        ${f.box[0] + f.box[2]} ${valY},
        ${f.box[0] + f.box[2]} ${f.box[1] + f.box[3] / 2}
    `);
    ctx.stroke(pathH);
    ctx.stroke(pathV);
  }
}
function drawGazeArrows(f, ctx) {
  var _a2, _b2, _c, _d2;
  if (opt.drawGaze && ((_b2 = (_a2 = f.rotation) == null ? void 0 : _a2.gaze) == null ? void 0 : _b2.strength) && ((_d2 = (_c = f.rotation) == null ? void 0 : _c.gaze) == null ? void 0 : _d2.bearing) && f.annotations["leftEyeIris"] && f.annotations["rightEyeIris"] && f.annotations["leftEyeIris"][0] && f.annotations["rightEyeIris"][0]) {
    ctx.strokeStyle = "pink";
    ctx.fillStyle = "pink";
    const leftGaze = [
      f.annotations["leftEyeIris"][0][0] + Math.sin(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[3],
      f.annotations["leftEyeIris"][0][1] + Math.cos(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[2]
    ];
    arrow(ctx, [f.annotations["leftEyeIris"][0][0], f.annotations["leftEyeIris"][0][1]], [leftGaze[0], leftGaze[1]], 4);
    const rightGaze = [
      f.annotations["rightEyeIris"][0][0] + Math.sin(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[3],
      f.annotations["rightEyeIris"][0][1] + Math.cos(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[2]
    ];
    arrow(ctx, [f.annotations["rightEyeIris"][0][0], f.annotations["rightEyeIris"][0][1]], [rightGaze[0], rightGaze[1]], 4);
  }
}
function drawFacePolygons(f, ctx) {
  if (opt.drawPolygons && f.mesh.length >= 468) {
    ctx.lineWidth = 1;
    for (let i = 0; i < TRI468.length / 3; i++) {
      const points = [TRI468[i * 3 + 0], TRI468[i * 3 + 1], TRI468[i * 3 + 2]].map((index2) => f.mesh[index2]);
      lines(ctx, points, opt);
    }
    drawIrisElipse(f, ctx);
  }
}
function drawFacePoints(f, ctx) {
  if (opt.drawPoints && f.mesh.length >= 468) {
    for (let i = 0; i < f.mesh.length; i++) {
      point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2], opt);
      if (opt.drawAttention) {
        if (attentionDefinitions.lips.includes(i))
          point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2] + 127, opt);
        if (attentionDefinitions.eyeL.includes(i))
          point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2] - 127, opt);
        if (attentionDefinitions.eyeR.includes(i))
          point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2] - 127, opt);
      }
    }
  }
}
function drawFaceBoxes(f, ctx) {
  if (opt.drawBoxes) {
    rect(ctx, f.box[0], f.box[1], f.box[2], f.box[3], opt);
  }
}
async function face(inCanvas2, result, drawOptions) {
  opt = mergeDeep(options3, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.font = opt.font;
  ctx.strokeStyle = opt.color;
  ctx.fillStyle = opt.color;
  for (const f of result) {
    drawFaceBoxes(f, ctx);
    drawLabels(f, ctx);
    if (f.mesh && f.mesh.length > 0) {
      drawFacePoints(f, ctx);
      drawFacePolygons(f, ctx);
      drawGazeSpheres(f, ctx);
      drawGazeArrows(f, ctx);
    }
  }
}

// src/draw/body.ts
async function body(inCanvas2, result, drawOptions) {
  var _a2;
  const localOptions = mergeDeep(options3, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  for (let i = 0; i < result.length; i++) {
    ctx.strokeStyle = localOptions.color;
    ctx.fillStyle = localOptions.color;
    ctx.lineWidth = localOptions.lineWidth;
    ctx.font = localOptions.font;
    if (localOptions.drawBoxes && result[i].box && ((_a2 = result[i].box) == null ? void 0 : _a2.length) === 4) {
      rect(ctx, result[i].box[0], result[i].box[1], result[i].box[2], result[i].box[3], localOptions);
      if (localOptions.drawLabels) {
        if (localOptions.shadowColor && localOptions.shadowColor !== "") {
          ctx.fillStyle = localOptions.shadowColor;
          ctx.fillText(`body ${100 * result[i].score}%`, result[i].box[0] + 3, 1 + result[i].box[1] + localOptions.lineHeight, result[i].box[2]);
        }
        ctx.fillStyle = localOptions.labelColor;
        ctx.fillText(`body ${100 * result[i].score}%`, result[i].box[0] + 2, 0 + result[i].box[1] + localOptions.lineHeight, result[i].box[2]);
      }
    }
    if (localOptions.drawPoints && result[i].keypoints) {
      for (let pt2 = 0; pt2 < result[i].keypoints.length; pt2++) {
        if (!result[i].keypoints[pt2].score || result[i].keypoints[pt2].score === 0)
          continue;
        ctx.fillStyle = colorDepth(result[i].keypoints[pt2].position[2], localOptions);
        point(ctx, result[i].keypoints[pt2].position[0], result[i].keypoints[pt2].position[1], 0, localOptions);
      }
    }
    if (localOptions.drawLabels && result[i].keypoints) {
      ctx.font = localOptions.font;
      for (const pt2 of result[i].keypoints) {
        if (!pt2.score || pt2.score === 0)
          continue;
        ctx.fillStyle = colorDepth(pt2.position[2], localOptions);
        ctx.fillText(`${pt2.part} ${Math.trunc(100 * pt2.score)}%`, pt2.position[0] + 4, pt2.position[1] + 4);
      }
    }
    if (localOptions.drawPolygons && result[i].keypoints && result[i].annotations) {
      for (const part of Object.values(result[i].annotations)) {
        for (const connected4 of part)
          curves(ctx, connected4, localOptions);
      }
    }
  }
}

// src/draw/hand.ts
async function hand(inCanvas2, result, drawOptions) {
  const localOptions = mergeDeep(options3, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  ctx.font = localOptions.font;
  for (const h of result) {
    if (localOptions.drawBoxes) {
      ctx.strokeStyle = localOptions.color;
      ctx.fillStyle = localOptions.color;
      rect(ctx, h.box[0], h.box[1], h.box[2], h.box[3], localOptions);
      if (localOptions.drawLabels) {
        if (localOptions.shadowColor && localOptions.shadowColor !== "") {
          ctx.fillStyle = localOptions.shadowColor;
          ctx.fillText(`hand:${Math.trunc(100 * h.score)}%`, h.box[0] + 3, 1 + h.box[1] + localOptions.lineHeight, h.box[2]);
        }
        ctx.fillStyle = localOptions.labelColor;
        ctx.fillText(`hand:${Math.trunc(100 * h.score)}%`, h.box[0] + 2, 0 + h.box[1] + localOptions.lineHeight, h.box[2]);
      }
      ctx.stroke();
    }
    if (localOptions.drawPoints) {
      if (h.keypoints && h.keypoints.length > 0) {
        for (const pt2 of h.keypoints) {
          ctx.fillStyle = colorDepth(pt2[2], localOptions);
          point(ctx, pt2[0], pt2[1], 0, localOptions);
        }
      }
    }
    if (localOptions.drawLabels && h.annotations) {
      const addHandLabel = (part, title) => {
        if (!part || part.length === 0 || !part[0])
          return;
        const z = part[part.length - 1][2] || -256;
        ctx.fillStyle = colorDepth(z, localOptions);
        ctx.fillText(title, part[part.length - 1][0] + 4, part[part.length - 1][1] + 4);
      };
      ctx.font = localOptions.font;
      addHandLabel(h.annotations["index"], "index");
      addHandLabel(h.annotations["middle"], "middle");
      addHandLabel(h.annotations["ring"], "ring");
      addHandLabel(h.annotations["pinky"], "pinky");
      addHandLabel(h.annotations["thumb"], "thumb");
      addHandLabel(h.annotations["palm"], "palm");
    }
    if (localOptions.drawPolygons && h.annotations) {
      const addHandLine = (part) => {
        if (!part || part.length === 0 || !part[0])
          return;
        for (let i = 0; i < part.length; i++) {
          ctx.beginPath();
          const z = part[i][2] || 0;
          ctx.strokeStyle = colorDepth(i * z, localOptions);
          ctx.moveTo(part[i > 0 ? i - 1 : 0][0], part[i > 0 ? i - 1 : 0][1]);
          ctx.lineTo(part[i][0], part[i][1]);
          ctx.stroke();
        }
      };
      ctx.lineWidth = localOptions.lineWidth;
      addHandLine(h.annotations["index"]);
      addHandLine(h.annotations["middle"]);
      addHandLine(h.annotations["ring"]);
      addHandLine(h.annotations["pinky"]);
      addHandLine(h.annotations["thumb"]);
    }
  }
}

// src/draw/object.ts
async function object(inCanvas2, result, drawOptions) {
  const localOptions = mergeDeep(options3, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  ctx.font = localOptions.font;
  for (const h of result) {
    if (localOptions.drawBoxes) {
      ctx.strokeStyle = localOptions.color;
      ctx.fillStyle = localOptions.color;
      rect(ctx, h.box[0], h.box[1], h.box[2], h.box[3], localOptions);
      if (localOptions.drawLabels) {
        const label = `${h.label} ${Math.round(100 * h.score)}%`;
        if (localOptions.shadowColor && localOptions.shadowColor !== "") {
          ctx.fillStyle = localOptions.shadowColor;
          ctx.fillText(label, h.box[0] + 3, 1 + h.box[1] + localOptions.lineHeight, h.box[2]);
        }
        ctx.fillStyle = localOptions.labelColor;
        ctx.fillText(label, h.box[0] + 2, 0 + h.box[1] + localOptions.lineHeight, h.box[2]);
      }
      ctx.stroke();
    }
  }
}

// src/draw/gesture.ts
async function gesture(inCanvas2, result, drawOptions) {
  const localOptions = mergeDeep(options3, drawOptions);
  if (!result || !inCanvas2)
    return;
  if (localOptions.drawGestures) {
    const ctx = getCanvasContext(inCanvas2);
    if (!ctx)
      return;
    ctx.font = localOptions.font;
    ctx.fillStyle = localOptions.color;
    let i = 1;
    for (let j10 = 0; j10 < result.length; j10++) {
      let where = [];
      let what = [];
      [where, what] = Object.entries(result[j10]);
      if (what.length > 1 && what[1].length > 0) {
        const who = where[1] > 0 ? `#${where[1]}` : "";
        const label = `${where[0]} ${who}: ${what[1]}`;
        if (localOptions.shadowColor && localOptions.shadowColor !== "") {
          ctx.fillStyle = localOptions.shadowColor;
          ctx.fillText(label, 8, 2 + i * localOptions.lineHeight);
        }
        ctx.fillStyle = localOptions.labelColor;
        ctx.fillText(label, 6, 0 + i * localOptions.lineHeight);
        i += 1;
      }
    }
  }
}

// src/draw/draw.ts
var drawTime = 0;
async function person(inCanvas2, result, drawOptions) {
  const localOptions = mergeDeep(options3, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  ctx.font = localOptions.font;
  for (let i = 0; i < result.length; i++) {
    if (localOptions.drawBoxes) {
      ctx.strokeStyle = localOptions.color;
      ctx.fillStyle = localOptions.color;
      rect(ctx, result[i].box[0], result[i].box[1], result[i].box[2], result[i].box[3], localOptions);
      if (localOptions.drawLabels) {
        const label = `person #${i}`;
        if (localOptions.shadowColor && localOptions.shadowColor !== "") {
          ctx.fillStyle = localOptions.shadowColor;
          ctx.fillText(label, result[i].box[0] + 3, 1 + result[i].box[1] + localOptions.lineHeight, result[i].box[2]);
        }
        ctx.fillStyle = localOptions.labelColor;
        ctx.fillText(label, result[i].box[0] + 2, 0 + result[i].box[1] + localOptions.lineHeight, result[i].box[2]);
      }
      ctx.stroke();
    }
  }
}
async function canvas2(input, output) {
  if (!input || !output)
    return;
  const ctx = getCanvasContext(output);
  if (!ctx)
    return;
  ctx.drawImage(input, 0, 0);
}
async function all(inCanvas2, result, drawOptions) {
  if (!result || !result.performance || !result || !inCanvas2)
    return null;
  const timeStamp = now();
  const localOptions = mergeDeep(options3, drawOptions);
  const promise = Promise.all([
    face(inCanvas2, result.face, localOptions),
    body(inCanvas2, result.body, localOptions),
    hand(inCanvas2, result.hand, localOptions),
    object(inCanvas2, result.object, localOptions),
    gesture(inCanvas2, result.gesture, localOptions)
  ]);
  drawTime = env.perfadd ? drawTime + Math.round(now() - timeStamp) : Math.round(now() - timeStamp);
  result.performance.draw = drawTime;
  return promise;
}

// src/face/mask.ts
var expandFact = 0.1;
var alpha = 0.5;
function insidePoly(x, y, polygon) {
  let inside = false;
  let j10 = polygon.length - 1;
  for (let i = 0; i < polygon.length; j10 = i++) {
    if (polygon[i].y > y !== polygon[j10].y > y && x < (polygon[j10].x - polygon[i].x) * (y - polygon[i].y) / (polygon[j10].y - polygon[i].y) + polygon[i].x)
      inside = !inside;
  }
  return inside;
}
async function mask(face4) {
  if (!face4.tensor)
    return face4.tensor;
  if (!face4.mesh || face4.mesh.length < 100)
    return face4.tensor;
  const width = face4.tensor.shape[2] || 0;
  const height = face4.tensor.shape[1] || 0;
  const buffer = await face4.tensor.buffer();
  let silhouette = [];
  for (const pt2 of meshAnnotations.silhouette)
    silhouette.push({ x: (face4.mesh[pt2][0] - face4.box[0]) / face4.box[2], y: (face4.mesh[pt2][1] - face4.box[1]) / face4.box[3] });
  if (expandFact && expandFact > 0)
    silhouette = silhouette.map((pt2) => ({ x: pt2.x > 0.5 ? pt2.x + expandFact : pt2.x - expandFact, y: pt2.y > 0.5 ? pt2.y + expandFact : pt2.y - expandFact }));
  for (let x = 0; x < width; x++) {
    for (let y = 0; y < height; y++) {
      const inside = insidePoly(x / width, y / width, silhouette);
      if (!inside) {
        buffer.set(alpha * buffer.get(0, y, x, 0), 0, y, x, 0);
        buffer.set(alpha * buffer.get(0, y, x, 1), 0, y, x, 1);
        buffer.set(alpha * buffer.get(0, y, x, 2), 0, y, x, 2);
      }
    }
  }
  const output = buffer.toTensor();
  Re(buffer);
  return output;
}

// src/face/angles.ts
var calculateGaze = (face4) => {
  const radians = (pt1, pt2) => Math.atan2(pt1[1] - pt2[1], pt1[0] - pt2[0]);
  if (!face4.annotations["rightEyeIris"] || !face4.annotations["leftEyeIris"])
    return { bearing: 0, strength: 0 };
  const offsetIris = [0, -0.1];
  const eyeRatio = 1;
  const left = (face4.mesh[33][2] || 0) > (face4.mesh[263][2] || 0);
  const irisCenter = left ? face4.mesh[473] : face4.mesh[468];
  const eyeCenter = left ? [(face4.mesh[133][0] + face4.mesh[33][0]) / 2, (face4.mesh[133][1] + face4.mesh[33][1]) / 2] : [(face4.mesh[263][0] + face4.mesh[362][0]) / 2, (face4.mesh[263][1] + face4.mesh[362][1]) / 2];
  const eyeSize = left ? [face4.mesh[133][0] - face4.mesh[33][0], face4.mesh[23][1] - face4.mesh[27][1]] : [face4.mesh[263][0] - face4.mesh[362][0], face4.mesh[253][1] - face4.mesh[257][1]];
  const eyeDiff = [
    (eyeCenter[0] - irisCenter[0]) / eyeSize[0] - offsetIris[0],
    eyeRatio * (irisCenter[1] - eyeCenter[1]) / eyeSize[1] - offsetIris[1]
  ];
  let strength = Math.sqrt(eyeDiff[0] * eyeDiff[0] + eyeDiff[1] * eyeDiff[1]);
  strength = Math.min(strength, face4.boxRaw[2] / 2, face4.boxRaw[3] / 2);
  const bearing = (radians([0, 0], eyeDiff) + Math.PI / 2) % Math.PI;
  return { bearing, strength };
};
var calculateFaceAngle = (face4, imageSize) => {
  const normalize = (v) => {
    const length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    v[0] /= length;
    v[1] /= length;
    v[2] /= length;
    return v;
  };
  const subVectors = (a, b) => {
    const x = a[0] - b[0];
    const y = a[1] - b[1];
    const z = a[2] - b[2];
    return [x, y, z];
  };
  const crossVectors = (a, b) => {
    const x = a[1] * b[2] - a[2] * b[1];
    const y = a[2] * b[0] - a[0] * b[2];
    const z = a[0] * b[1] - a[1] * b[0];
    return [x, y, z];
  };
  const rotationMatrixToEulerAngle = (r) => {
    const [r00, _r01, _r02, r10, r11, r12, r20, r21, r22] = r;
    let thetaX;
    let thetaY;
    let thetaZ;
    if (r10 < 1) {
      if (r10 > -1) {
        thetaZ = Math.asin(r10);
        thetaY = Math.atan2(-r20, r00);
        thetaX = Math.atan2(-r12, r11);
      } else {
        thetaZ = -Math.PI / 2;
        thetaY = -Math.atan2(r21, r22);
        thetaX = 0;
      }
    } else {
      thetaZ = Math.PI / 2;
      thetaY = Math.atan2(r21, r22);
      thetaX = 0;
    }
    if (isNaN(thetaX))
      thetaX = 0;
    if (isNaN(thetaY))
      thetaY = 0;
    if (isNaN(thetaZ))
      thetaZ = 0;
    return { pitch: 2 * -thetaX, yaw: 2 * -thetaY, roll: 2 * -thetaZ };
  };
  const mesh = face4.meshRaw;
  if (!mesh || mesh.length < 300)
    return { angle: { pitch: 0, yaw: 0, roll: 0 }, matrix: [1, 0, 0, 0, 1, 0, 0, 0, 1], gaze: { bearing: 0, strength: 0 } };
  const size2 = Math.max(face4.boxRaw[2] * imageSize[0], face4.boxRaw[3] * imageSize[1]) / 1.5;
  const pts = [mesh[10], mesh[152], mesh[234], mesh[454]].map((pt2) => [pt2[0] * imageSize[0] / size2, pt2[1] * imageSize[1] / size2, pt2[2]]);
  const y_axis = normalize(subVectors(pts[1], pts[0]));
  let x_axis = normalize(subVectors(pts[3], pts[2]));
  const z_axis = normalize(crossVectors(x_axis, y_axis));
  x_axis = crossVectors(y_axis, z_axis);
  const matrix = [
    x_axis[0],
    x_axis[1],
    x_axis[2],
    y_axis[0],
    y_axis[1],
    y_axis[2],
    z_axis[0],
    z_axis[1],
    z_axis[2]
  ];
  const angle = rotationMatrixToEulerAngle(matrix);
  const gaze = mesh.length === 478 ? calculateGaze(face4) : { bearing: 0, strength: 0 };
  return { angle, matrix, gaze };
};

// src/face/face.ts
var detectFace = async (instance, input) => {
  var _a2, _b2, _c, _d2, _e, _f, _g2, _h, _i, _j2, _k2, _l2, _m2, _n2, _o2, _p2, _q2, _r2, _s2, _t2, _u2, _v2;
  let timeStamp = now();
  let ageRes;
  let gearRes;
  let genderRes;
  let emotionRes;
  let mobilefacenetRes;
  let antispoofRes;
  let livenessRes;
  let descRes;
  const faceRes = [];
  instance.state = "run:face";
  const faces = await predict10(input, instance.config);
  instance.performance.face = env.perfadd ? (instance.performance.face || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
  if (!input.shape || input.shape.length !== 4)
    return [];
  if (!faces)
    return [];
  for (let i = 0; i < faces.length; i++) {
    instance.analyze("Get Face");
    if (!faces[i].tensor || faces[i].tensor["isDisposedInternal"]) {
      log("Face object is disposed:", faces[i].tensor);
      continue;
    }
    if ((_a2 = instance.config.face.detector) == null ? void 0 : _a2.mask) {
      const masked = await mask(faces[i]);
      Re(faces[i].tensor);
      faces[i].tensor = masked;
    }
    const rotation = faces[i].mesh && faces[i].mesh.length > 200 ? calculateFaceAngle(faces[i], [input.shape[2], input.shape[1]]) : null;
    instance.analyze("Start Emotion:");
    if (instance.config.async) {
      emotionRes = ((_b2 = instance.config.face.emotion) == null ? void 0 : _b2.enabled) ? predict8(faces[i].tensor || fs([]), instance.config, i, faces.length) : [];
    } else {
      instance.state = "run:emotion";
      timeStamp = now();
      emotionRes = ((_c = instance.config.face.emotion) == null ? void 0 : _c.enabled) ? await predict8(faces[i].tensor || fs([]), instance.config, i, faces.length) : [];
      instance.performance.emotion = env.perfadd ? (instance.performance.emotion || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End Emotion:");
    instance.analyze("Start AntiSpoof:");
    if (instance.config.async) {
      antispoofRes = ((_d2 = instance.config.face.antispoof) == null ? void 0 : _d2.enabled) ? predict4(faces[i].tensor || fs([]), instance.config, i, faces.length) : 0;
    } else {
      instance.state = "run:antispoof";
      timeStamp = now();
      antispoofRes = ((_e = instance.config.face.antispoof) == null ? void 0 : _e.enabled) ? await predict4(faces[i].tensor || fs([]), instance.config, i, faces.length) : 0;
      instance.performance.antispoof = env.perfadd ? (instance.performance.antispoof || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End AntiSpoof:");
    instance.analyze("Start Liveness:");
    if (instance.config.async) {
      livenessRes = ((_f = instance.config.face.liveness) == null ? void 0 : _f.enabled) ? predict14(faces[i].tensor || fs([]), instance.config, i, faces.length) : 0;
    } else {
      instance.state = "run:liveness";
      timeStamp = now();
      livenessRes = ((_g2 = instance.config.face.liveness) == null ? void 0 : _g2.enabled) ? await predict14(faces[i].tensor || fs([]), instance.config, i, faces.length) : 0;
      instance.performance.liveness = env.perfadd ? (instance.performance.antispoof || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End Liveness:");
    instance.analyze("Start GEAR:");
    if (instance.config.async) {
      gearRes = ((_h = instance.config.face["gear"]) == null ? void 0 : _h.enabled) ? predict(faces[i].tensor || fs([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:gear";
      timeStamp = now();
      gearRes = ((_i = instance.config.face["gear"]) == null ? void 0 : _i.enabled) ? await predict(faces[i].tensor || fs([]), instance.config, i, faces.length) : null;
      instance.performance.gear = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End GEAR:");
    instance.analyze("Start SSRNet:");
    if (instance.config.async) {
      ageRes = ((_j2 = instance.config.face["ssrnet"]) == null ? void 0 : _j2.enabled) ? predict2(faces[i].tensor || fs([]), instance.config, i, faces.length) : null;
      genderRes = ((_k2 = instance.config.face["ssrnet"]) == null ? void 0 : _k2.enabled) ? predict3(faces[i].tensor || fs([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:ssrnet";
      timeStamp = now();
      ageRes = ((_l2 = instance.config.face["ssrnet"]) == null ? void 0 : _l2.enabled) ? await predict2(faces[i].tensor || fs([]), instance.config, i, faces.length) : null;
      genderRes = ((_m2 = instance.config.face["ssrnet"]) == null ? void 0 : _m2.enabled) ? await predict3(faces[i].tensor || fs([]), instance.config, i, faces.length) : null;
      instance.performance.ssrnet = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End SSRNet:");
    instance.analyze("Start MobileFaceNet:");
    if (instance.config.async) {
      mobilefacenetRes = ((_n2 = instance.config.face["mobilefacenet"]) == null ? void 0 : _n2.enabled) ? predict9(faces[i].tensor || fs([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:mobilefacenet";
      timeStamp = now();
      mobilefacenetRes = ((_o2 = instance.config.face["mobilefacenet"]) == null ? void 0 : _o2.enabled) ? await predict9(faces[i].tensor || fs([]), instance.config, i, faces.length) : null;
      instance.performance.mobilefacenet = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End MobileFaceNet:");
    instance.analyze("Start Description:");
    if (instance.config.async) {
      descRes = ((_p2 = instance.config.face.description) == null ? void 0 : _p2.enabled) ? predict11(faces[i].tensor || fs([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:description";
      timeStamp = now();
      descRes = ((_q2 = instance.config.face.description) == null ? void 0 : _q2.enabled) ? await predict11(faces[i].tensor || fs([]), instance.config, i, faces.length) : null;
      instance.performance.description = env.perfadd ? (instance.performance.description || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End Description:");
    if (instance.config.async) {
      [ageRes, genderRes, emotionRes, mobilefacenetRes, descRes, gearRes, antispoofRes, livenessRes] = await Promise.all([ageRes, genderRes, emotionRes, mobilefacenetRes, descRes, gearRes, antispoofRes, livenessRes]);
    }
    instance.analyze("Finish Face:");
    if (((_r2 = instance.config.face["ssrnet"]) == null ? void 0 : _r2.enabled) && ageRes && genderRes) {
      descRes = {
        ...descRes,
        age: ageRes.age,
        gender: genderRes.gender,
        genderScore: genderRes.genderScore
      };
    }
    if (((_s2 = instance.config.face["gear"]) == null ? void 0 : _s2.enabled) && gearRes) {
      descRes = {
        ...descRes,
        age: gearRes.age,
        gender: gearRes.gender,
        genderScore: gearRes.genderScore,
        race: gearRes.race
      };
    }
    if (((_t2 = instance.config.face["mobilefacenet"]) == null ? void 0 : _t2.enabled) && mobilefacenetRes) {
      descRes.descriptor = mobilefacenetRes;
    }
    if (!((_u2 = instance.config.face.iris) == null ? void 0 : _u2.enabled)) {
    }
    const irisSize = faces[i].annotations && faces[i].annotations.leftEyeIris && faces[i].annotations.leftEyeIris[0] && faces[i].annotations.rightEyeIris && faces[i].annotations.rightEyeIris[0] && faces[i].annotations.leftEyeIris.length > 0 && faces[i].annotations.rightEyeIris.length > 0 && faces[i].annotations.leftEyeIris[0] !== null && faces[i].annotations.rightEyeIris[0] !== null ? Math.max(Math.abs(faces[i].annotations.leftEyeIris[3][0] - faces[i].annotations.leftEyeIris[1][0]), Math.abs(faces[i].annotations.rightEyeIris[4][1] - faces[i].annotations.rightEyeIris[2][1])) / input.shape[2] : 0;
    const tensor = ((_v2 = instance.config.face.detector) == null ? void 0 : _v2.return) ? gr(faces[i].tensor) : null;
    Re(faces[i].tensor);
    if (faces[i].tensor)
      delete faces[i].tensor;
    const res = {
      ...faces[i],
      id: i
    };
    if (descRes == null ? void 0 : descRes.age)
      res.age = descRes.age;
    if (descRes == null ? void 0 : descRes.gender)
      res.gender = descRes.gender;
    if (descRes == null ? void 0 : descRes.genderScore)
      res.genderScore = descRes == null ? void 0 : descRes.genderScore;
    if (descRes == null ? void 0 : descRes.descriptor)
      res.embedding = descRes == null ? void 0 : descRes.descriptor;
    if (descRes == null ? void 0 : descRes.race)
      res.race = descRes == null ? void 0 : descRes.race;
    if (emotionRes)
      res.emotion = emotionRes;
    if (antispoofRes)
      res.real = antispoofRes;
    if (livenessRes)
      res.live = livenessRes;
    if (irisSize && irisSize !== 0)
      res.iris = Math.trunc(500 / irisSize / 11.7) / 100;
    if (rotation)
      res.rotation = rotation;
    if (tensor)
      res.tensor = tensor;
    faceRes.push(res);
    instance.analyze("End Face");
  }
  instance.analyze("End FaceMesh:");
  if (instance.config.async) {
    if (instance.performance.face)
      delete instance.performance.face;
    if (instance.performance.age)
      delete instance.performance.age;
    if (instance.performance.gender)
      delete instance.performance.gender;
    if (instance.performance.emotion)
      delete instance.performance.emotion;
  }
  return faceRes;
};

// src/gesture/gesture.ts
var body2 = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    const leftWrist = res[i].keypoints.find((a) => a.part === "leftWrist");
    const rightWrist = res[i].keypoints.find((a) => a.part === "rightWrist");
    const nose = res[i].keypoints.find((a) => a.part === "nose");
    if (nose && leftWrist && rightWrist && leftWrist.position[1] < nose.position[1] && rightWrist.position[1] < nose.position[1])
      gestures.push({ body: i, gesture: "i give up" });
    else if (nose && leftWrist && leftWrist.position[1] < nose.position[1])
      gestures.push({ body: i, gesture: "raise left hand" });
    else if (nose && rightWrist && rightWrist.position[1] < nose.position[1])
      gestures.push({ body: i, gesture: "raise right hand" });
    const leftShoulder = res[i].keypoints.find((a) => a.part === "leftShoulder");
    const rightShoulder = res[i].keypoints.find((a) => a.part === "rightShoulder");
    if (leftShoulder && rightShoulder && Math.abs(leftShoulder.positionRaw[1] - rightShoulder.positionRaw[1]) > 0.1) {
      gestures.push({ body: i, gesture: `leaning ${leftShoulder.position[1] > rightShoulder.position[1] ? "left" : "right"}` });
    }
  }
  return gestures;
};
var face2 = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    if (res[i].mesh && res[i].mesh.length > 450) {
      const zDiff = (res[i].mesh[33][2] || 0) - (res[i].mesh[263][2] || 0);
      const xDiff = res[i].mesh[33][0] - res[i].mesh[263][0];
      if (Math.abs(zDiff / xDiff) <= 0.15)
        gestures.push({ face: i, gesture: "facing center" });
      else
        gestures.push({ face: i, gesture: `facing ${zDiff < 0 ? "left" : "right"}` });
      const openLeft = Math.abs(res[i].mesh[374][1] - res[i].mesh[386][1]) / Math.abs(res[i].mesh[443][1] - res[i].mesh[450][1]);
      if (openLeft < 0.2)
        gestures.push({ face: i, gesture: "blink left eye" });
      const openRight = Math.abs(res[i].mesh[145][1] - res[i].mesh[159][1]) / Math.abs(res[i].mesh[223][1] - res[i].mesh[230][1]);
      if (openRight < 0.2)
        gestures.push({ face: i, gesture: "blink right eye" });
      const mouthOpen = Math.min(100, 500 * Math.abs(res[i].mesh[13][1] - res[i].mesh[14][1]) / Math.abs(res[i].mesh[10][1] - res[i].mesh[152][1]));
      if (mouthOpen > 10)
        gestures.push({ face: i, gesture: `mouth ${Math.trunc(mouthOpen)}% open` });
      const chinDepth = res[i].mesh[152][2] || 0;
      if (Math.abs(chinDepth) > 10)
        gestures.push({ face: i, gesture: `head ${chinDepth < 0 ? "up" : "down"}` });
    }
  }
  return gestures;
};
var iris = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    if (!res[i].annotations || !res[i].annotations.leftEyeIris || !res[i].annotations.leftEyeIris[0] || !res[i].annotations.rightEyeIris || !res[i].annotations.rightEyeIris[0])
      continue;
    const sizeXLeft = res[i].annotations.leftEyeIris[3][0] - res[i].annotations.leftEyeIris[1][0];
    const sizeYLeft = res[i].annotations.leftEyeIris[4][1] - res[i].annotations.leftEyeIris[2][1];
    const areaLeft = Math.abs(sizeXLeft * sizeYLeft);
    const sizeXRight = res[i].annotations.rightEyeIris[3][0] - res[i].annotations.rightEyeIris[1][0];
    const sizeYRight = res[i].annotations.rightEyeIris[4][1] - res[i].annotations.rightEyeIris[2][1];
    const areaRight = Math.abs(sizeXRight * sizeYRight);
    let center = false;
    const difference = Math.abs(areaLeft - areaRight) / Math.max(areaLeft, areaRight);
    if (difference < 0.25) {
      center = true;
      gestures.push({ iris: i, gesture: "facing center" });
    }
    const leftIrisCenterX = Math.abs(res[i].mesh[263][0] - res[i].annotations.leftEyeIris[0][0]) / res[i].box[2];
    const rightIrisCenterX = Math.abs(res[i].mesh[33][0] - res[i].annotations.rightEyeIris[0][0]) / res[i].box[2];
    if (leftIrisCenterX > 0.06 || rightIrisCenterX > 0.06)
      center = false;
    if (leftIrisCenterX > rightIrisCenterX) {
      if (leftIrisCenterX > 0.05)
        gestures.push({ iris: i, gesture: "looking right" });
    } else {
      if (rightIrisCenterX > 0.05)
        gestures.push({ iris: i, gesture: "looking left" });
    }
    const rightIrisCenterY = Math.abs(res[i].mesh[145][1] - res[i].annotations.rightEyeIris[0][1]) / res[i].box[3];
    const leftIrisCenterY = Math.abs(res[i].mesh[374][1] - res[i].annotations.leftEyeIris[0][1]) / res[i].box[3];
    if (leftIrisCenterY < 0.01 || rightIrisCenterY < 0.01 || leftIrisCenterY > 0.022 || rightIrisCenterY > 0.022)
      center = false;
    if (leftIrisCenterY < 0.01 || rightIrisCenterY < 0.01)
      gestures.push({ iris: i, gesture: "looking down" });
    if (leftIrisCenterY > 0.022 || rightIrisCenterY > 0.022)
      gestures.push({ iris: i, gesture: "looking up" });
    if (center)
      gestures.push({ iris: i, gesture: "looking center" });
  }
  return gestures;
};
var hand2 = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    const fingers = [];
    if (res[i]["annotations"]) {
      for (const [finger, pos] of Object.entries(res[i]["annotations"])) {
        if (finger !== "palmBase" && Array.isArray(pos) && pos[0])
          fingers.push({ name: finger.toLowerCase(), position: pos[0] });
      }
    }
    if (fingers && fingers.length > 0) {
      const closest = fingers.reduce((best, a) => (best.position[2] || 0) < (a.position[2] || 0) ? best : a);
      gestures.push({ hand: i, gesture: `${closest.name} forward` });
      const highest = fingers.reduce((best, a) => best.position[1] < a.position[1] ? best : a);
      gestures.push({ hand: i, gesture: `${highest.name} up` });
    }
    if (res[i]["keypoints"]) {
      const poses = match(res[i]["keypoints"]);
      for (const pose of poses)
        gestures.push({ hand: i, gesture: pose.name });
    }
  }
  return gestures;
};

// src/util/interpolate.ts
var bufferedResult = { face: [], body: [], hand: [], gesture: [], object: [], persons: [], performance: {}, timestamp: 0, error: null };
var interpolateTime = 0;
function calc2(newResult, config3) {
  var _a2, _b2, _c, _d2, _e, _f, _g2, _h, _i, _j2, _k2, _l2, _m2, _n2, _o2, _p2, _q2, _r2, _s2, _t2, _u2, _v2, _w2, _x2, _y2, _z2, _A2;
  const t02 = now();
  if (!newResult)
    return { face: [], body: [], hand: [], gesture: [], object: [], persons: [], performance: {}, timestamp: 0, error: null };
  const elapsed = Date.now() - newResult.timestamp;
  const bufferedFactor = elapsed < 1e3 ? 8 - Math.log(elapsed + 1) : 1;
  if (newResult.canvas)
    bufferedResult.canvas = newResult.canvas;
  if (newResult.error)
    bufferedResult.error = newResult.error;
  if (!bufferedResult.body || newResult.body.length !== bufferedResult.body.length) {
    bufferedResult.body = JSON.parse(JSON.stringify(newResult.body));
  } else {
    for (let i = 0; i < newResult.body.length; i++) {
      const box = newResult.body[i].box.map((newBoxCoord, j10) => ((bufferedFactor - 1) * bufferedResult.body[i].box[j10] + newBoxCoord) / bufferedFactor);
      const boxRaw = newResult.body[i].boxRaw.map((newBoxCoord, j10) => ((bufferedFactor - 1) * bufferedResult.body[i].boxRaw[j10] + newBoxCoord) / bufferedFactor);
      const keypoints = newResult.body[i].keypoints.map((newKpt, j10) => {
        var _a3, _b3, _c2, _d3, _e2, _f2, _g3, _h2, _i2;
        return {
          score: newKpt.score,
          part: newKpt.part,
          position: [
            bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j10].position[0] || 0) + (newKpt.position[0] || 0)) / bufferedFactor : newKpt.position[0],
            bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j10].position[1] || 0) + (newKpt.position[1] || 0)) / bufferedFactor : newKpt.position[1],
            bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j10].position[2] || 0) + (newKpt.position[2] || 0)) / bufferedFactor : newKpt.position[2]
          ],
          positionRaw: [
            bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j10].positionRaw[0] || 0) + (newKpt.positionRaw[0] || 0)) / bufferedFactor : newKpt.positionRaw[0],
            bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j10].positionRaw[1] || 0) + (newKpt.positionRaw[1] || 0)) / bufferedFactor : newKpt.positionRaw[1],
            bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j10].positionRaw[2] || 0) + (newKpt.positionRaw[2] || 0)) / bufferedFactor : newKpt.positionRaw[2]
          ],
          distance: [
            bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * (((_a3 = bufferedResult.body[i].keypoints[j10].distance) == null ? void 0 : _a3[0]) || 0) + (((_b3 = newKpt.distance) == null ? void 0 : _b3[0]) || 0)) / bufferedFactor : (_c2 = newKpt.distance) == null ? void 0 : _c2[0],
            bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * (((_d3 = bufferedResult.body[i].keypoints[j10].distance) == null ? void 0 : _d3[1]) || 0) + (((_e2 = newKpt.distance) == null ? void 0 : _e2[1]) || 0)) / bufferedFactor : (_f2 = newKpt.distance) == null ? void 0 : _f2[1],
            bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * (((_g3 = bufferedResult.body[i].keypoints[j10].distance) == null ? void 0 : _g3[2]) || 0) + (((_h2 = newKpt.distance) == null ? void 0 : _h2[2]) || 0)) / bufferedFactor : (_i2 = newKpt.distance) == null ? void 0 : _i2[2]
          ]
        };
      });
      const annotations2 = {};
      let coords = { connected: {} };
      if ((_b2 = (_a2 = config3.body) == null ? void 0 : _a2.modelPath) == null ? void 0 : _b2.includes("efficientpose"))
        coords = efficientposecoords_exports;
      else if ((_d2 = (_c = config3.body) == null ? void 0 : _c.modelPath) == null ? void 0 : _d2.includes("blazepose"))
        coords = blazeposecoords_exports;
      else if ((_f = (_e = config3.body) == null ? void 0 : _e.modelPath) == null ? void 0 : _f.includes("movenet"))
        coords = movenetcoords_exports;
      for (const [name, indexes] of Object.entries(coords.connected)) {
        const pt2 = [];
        for (let j10 = 0; j10 < indexes.length - 1; j10++) {
          const pt0 = keypoints.find((kp2) => kp2.part === indexes[j10]);
          const pt1 = keypoints.find((kp2) => kp2.part === indexes[j10 + 1]);
          if (pt0 && pt1)
            pt2.push([pt0.position, pt1.position]);
        }
        annotations2[name] = pt2;
      }
      bufferedResult.body[i] = { ...newResult.body[i], box, boxRaw, keypoints, annotations: annotations2 };
    }
  }
  if (!bufferedResult.hand || newResult.hand.length !== bufferedResult.hand.length) {
    bufferedResult.hand = JSON.parse(JSON.stringify(newResult.hand));
  } else {
    for (let i = 0; i < newResult.hand.length; i++) {
      const box = newResult.hand[i].box.map((b, j10) => ((bufferedFactor - 1) * bufferedResult.hand[i].box[j10] + b) / bufferedFactor);
      const boxRaw = newResult.hand[i].boxRaw.map((b, j10) => ((bufferedFactor - 1) * bufferedResult.hand[i].boxRaw[j10] + b) / bufferedFactor);
      if (bufferedResult.hand[i].keypoints.length !== newResult.hand[i].keypoints.length)
        bufferedResult.hand[i].keypoints = newResult.hand[i].keypoints;
      const keypoints = newResult.hand[i].keypoints && newResult.hand[i].keypoints.length > 0 ? newResult.hand[i].keypoints.map((landmark, j10) => landmark.map((coord, k) => ((bufferedFactor - 1) * (bufferedResult.hand[i].keypoints[j10][k] || 1) + (coord || 0)) / bufferedFactor)) : [];
      let annotations2 = {};
      if (Object.keys(bufferedResult.hand[i].annotations).length !== Object.keys(newResult.hand[i].annotations).length) {
        bufferedResult.hand[i].annotations = newResult.hand[i].annotations;
        annotations2 = bufferedResult.hand[i].annotations;
      } else if (newResult.hand[i].annotations) {
        for (const key of Object.keys(newResult.hand[i].annotations)) {
          annotations2[key] = newResult.hand[i].annotations[key] && newResult.hand[i].annotations[key][0] ? newResult.hand[i].annotations[key].map((val, j10) => val.map((coord, k) => ((bufferedFactor - 1) * bufferedResult.hand[i].annotations[key][j10][k] + coord) / bufferedFactor)) : null;
        }
      }
      bufferedResult.hand[i] = { ...newResult.hand[i], box, boxRaw, keypoints, annotations: annotations2 };
    }
  }
  if (!bufferedResult.face || newResult.face.length !== bufferedResult.face.length) {
    bufferedResult.face = JSON.parse(JSON.stringify(newResult.face));
  } else {
    for (let i = 0; i < newResult.face.length; i++) {
      const box = newResult.face[i].box.map((b, j10) => ((bufferedFactor - 1) * bufferedResult.face[i].box[j10] + b) / bufferedFactor);
      const boxRaw = newResult.face[i].boxRaw.map((b, j10) => ((bufferedFactor - 1) * bufferedResult.face[i].boxRaw[j10] + b) / bufferedFactor);
      if (newResult.face[i].rotation) {
        const rotation = { matrix: [0, 0, 0, 0, 0, 0, 0, 0, 0], angle: { roll: 0, yaw: 0, pitch: 0 }, gaze: { bearing: 0, strength: 0 } };
        rotation.matrix = (_g2 = newResult.face[i].rotation) == null ? void 0 : _g2.matrix;
        rotation.angle = {
          roll: ((bufferedFactor - 1) * (((_i = (_h = bufferedResult.face[i].rotation) == null ? void 0 : _h.angle) == null ? void 0 : _i.roll) || 0) + (((_k2 = (_j2 = newResult.face[i].rotation) == null ? void 0 : _j2.angle) == null ? void 0 : _k2.roll) || 0)) / bufferedFactor,
          yaw: ((bufferedFactor - 1) * (((_m2 = (_l2 = bufferedResult.face[i].rotation) == null ? void 0 : _l2.angle) == null ? void 0 : _m2.yaw) || 0) + (((_o2 = (_n2 = newResult.face[i].rotation) == null ? void 0 : _n2.angle) == null ? void 0 : _o2.yaw) || 0)) / bufferedFactor,
          pitch: ((bufferedFactor - 1) * (((_q2 = (_p2 = bufferedResult.face[i].rotation) == null ? void 0 : _p2.angle) == null ? void 0 : _q2.pitch) || 0) + (((_s2 = (_r2 = newResult.face[i].rotation) == null ? void 0 : _r2.angle) == null ? void 0 : _s2.pitch) || 0)) / bufferedFactor
        };
        rotation.gaze = {
          bearing: ((bufferedFactor - 1) * (((_u2 = (_t2 = bufferedResult.face[i].rotation) == null ? void 0 : _t2.gaze) == null ? void 0 : _u2.bearing) || 0) + (((_w2 = (_v2 = newResult.face[i].rotation) == null ? void 0 : _v2.gaze) == null ? void 0 : _w2.bearing) || 0)) / bufferedFactor,
          strength: ((bufferedFactor - 1) * (((_y2 = (_x2 = bufferedResult.face[i].rotation) == null ? void 0 : _x2.gaze) == null ? void 0 : _y2.strength) || 0) + (((_A2 = (_z2 = newResult.face[i].rotation) == null ? void 0 : _z2.gaze) == null ? void 0 : _A2.strength) || 0)) / bufferedFactor
        };
        bufferedResult.face[i] = { ...newResult.face[i], rotation, box, boxRaw };
      }
      bufferedResult.face[i] = { ...newResult.face[i], box, boxRaw };
    }
  }
  if (!bufferedResult.object || newResult.object.length !== bufferedResult.object.length) {
    bufferedResult.object = JSON.parse(JSON.stringify(newResult.object));
  } else {
    for (let i = 0; i < newResult.object.length; i++) {
      const box = newResult.object[i].box.map((b, j10) => ((bufferedFactor - 1) * bufferedResult.object[i].box[j10] + b) / bufferedFactor);
      const boxRaw = newResult.object[i].boxRaw.map((b, j10) => ((bufferedFactor - 1) * bufferedResult.object[i].boxRaw[j10] + b) / bufferedFactor);
      bufferedResult.object[i] = { ...newResult.object[i], box, boxRaw };
    }
  }
  if (newResult.persons) {
    const newPersons = newResult.persons;
    if (!bufferedResult.persons || newPersons.length !== bufferedResult.persons.length) {
      bufferedResult.persons = JSON.parse(JSON.stringify(newPersons));
    } else {
      for (let i = 0; i < newPersons.length; i++) {
        bufferedResult.persons[i].box = newPersons[i].box.map((box, j10) => ((bufferedFactor - 1) * bufferedResult.persons[i].box[j10] + box) / bufferedFactor);
      }
    }
  }
  if (newResult.gesture)
    bufferedResult.gesture = newResult.gesture;
  const t12 = now();
  interpolateTime = env.perfadd ? interpolateTime + Math.round(t12 - t02) : Math.round(t12 - t02);
  if (newResult.performance)
    bufferedResult.performance = { ...newResult.performance, interpolate: interpolateTime };
  return bufferedResult;
}

// src/face/match.ts
var match_exports = {};
__export(match_exports, {
  distance: () => distance,
  match: () => match2,
  similarity: () => similarity
});
function distance(descriptor1, descriptor2, options4 = { order: 2, multiplier: 25 }) {
  let sum = 0;
  for (let i = 0; i < descriptor1.length; i++) {
    const diff = !options4.order || options4.order === 2 ? descriptor1[i] - descriptor2[i] : Math.abs(descriptor1[i] - descriptor2[i]);
    sum += !options4.order || options4.order === 2 ? diff * diff : diff ** options4.order;
  }
  return (options4.multiplier || 20) * sum;
}
var normalizeDistance = (dist, order, min, max) => {
  if (dist === 0)
    return 1;
  const root = order === 2 ? Math.sqrt(dist) : dist ** (1 / order);
  const norm = (1 - root / 100 - min) / (max - min);
  const clamp2 = Math.max(Math.min(norm, 1), 0);
  return clamp2;
};
function similarity(descriptor1, descriptor2, options4 = { order: 2, multiplier: 25, min: 0.2, max: 0.8 }) {
  const dist = distance(descriptor1, descriptor2, options4);
  return normalizeDistance(dist, options4.order || 2, options4.min || 0, options4.max || 1);
}
function match2(descriptor, descriptors, options4 = { order: 2, multiplier: 25, threshold: 0, min: 0.2, max: 0.8 }) {
  if (!Array.isArray(descriptor) || !Array.isArray(descriptors) || descriptor.length < 64 || descriptors.length === 0 || descriptor.length !== descriptors[0].length) {
    return { index: -1, distance: Number.POSITIVE_INFINITY, similarity: 0 };
  }
  let lowestDistance = Number.MAX_SAFE_INTEGER;
  let index2 = -1;
  for (let i = 0; i < descriptors.length; i++) {
    const res = distance(descriptor, descriptors[i], options4);
    if (res < lowestDistance) {
      lowestDistance = res;
      index2 = i;
    }
    if (lowestDistance < (options4.threshold || 0))
      break;
  }
  const normalizedSimilarity = normalizeDistance(lowestDistance, options4.order || 2, options4.min || 0, options4.max || 1);
  return { index: index2, distance: lowestDistance, similarity: normalizedSimilarity };
}

// src/util/persons.ts
function join2(faces, bodies, hands, gestures, shape) {
  var _a2, _b2, _c, _d2, _e, _f, _g2, _h, _i, _j2, _k2, _l2, _m2, _n2, _o2, _p2;
  let id2 = 0;
  const persons = [];
  for (const face4 of faces) {
    const person2 = { id: id2++, face: face4, body: null, hands: { left: null, right: null }, gestures: [], box: [0, 0, 0, 0] };
    for (const body4 of bodies) {
      if (face4.box[0] > body4.box[0] && face4.box[0] < body4.box[0] + body4.box[2] && face4.box[1] + face4.box[3] > body4.box[1] && face4.box[1] + face4.box[3] < body4.box[1] + body4.box[3]) {
        person2.body = body4;
      }
    }
    if (person2.body) {
      for (const hand3 of hands) {
        if (hand3.box[0] + hand3.box[2] > person2.body.box[0] && hand3.box[0] + hand3.box[2] < person2.body.box[0] + person2.body.box[2] && hand3.box[1] + hand3.box[3] > person2.body.box[1] && hand3.box[1] + hand3.box[3] < person2.body.box[1] + person2.body.box[3]) {
          if (person2.hands)
            person2.hands.left = hand3;
        }
        if (hand3.box[0] < person2.body.box[0] + person2.body.box[2] && hand3.box[0] > person2.body.box[0] && hand3.box[1] + hand3.box[3] > person2.body.box[1] && hand3.box[1] + hand3.box[3] < person2.body.box[1] + person2.body.box[3]) {
          if (person2.hands)
            person2.hands.right = hand3;
        }
      }
    }
    for (const gesture2 of gestures) {
      if (gesture2["face"] !== void 0 && gesture2["face"] === face4.id)
        (_a2 = person2.gestures) == null ? void 0 : _a2.push(gesture2);
      else if (gesture2["iris"] !== void 0 && gesture2["iris"] === face4.id)
        (_b2 = person2.gestures) == null ? void 0 : _b2.push(gesture2);
      else if (gesture2["body"] !== void 0 && gesture2["body"] === ((_c = person2.body) == null ? void 0 : _c.id))
        (_d2 = person2.gestures) == null ? void 0 : _d2.push(gesture2);
      else if (gesture2["hand"] !== void 0 && gesture2["hand"] === ((_f = (_e = person2.hands) == null ? void 0 : _e.left) == null ? void 0 : _f.id))
        (_g2 = person2.gestures) == null ? void 0 : _g2.push(gesture2);
      else if (gesture2["hand"] !== void 0 && gesture2["hand"] === ((_i = (_h = person2.hands) == null ? void 0 : _h.right) == null ? void 0 : _i.id))
        (_j2 = person2.gestures) == null ? void 0 : _j2.push(gesture2);
    }
    const x = [];
    const y = [];
    const extractXY = (box) => {
      if (box && box.length === 4) {
        x.push(box[0], box[0] + box[2]);
        y.push(box[1], box[1] + box[3]);
      }
    };
    extractXY((_k2 = person2.face) == null ? void 0 : _k2.box);
    extractXY((_l2 = person2.body) == null ? void 0 : _l2.box);
    extractXY((_n2 = (_m2 = person2.hands) == null ? void 0 : _m2.left) == null ? void 0 : _n2.box);
    extractXY((_p2 = (_o2 = person2.hands) == null ? void 0 : _o2.right) == null ? void 0 : _p2.box);
    const minX = Math.min(...x);
    const minY = Math.min(...y);
    person2.box = [minX, minY, Math.max(...x) - minX, Math.max(...y) - minY];
    if (shape && shape[1] && shape[2])
      person2.boxRaw = [person2.box[0] / shape[2], person2.box[1] / shape[1], person2.box[2] / shape[2], person2.box[3] / shape[1]];
    persons.push(person2);
  }
  return persons;
}

// src/sample.ts
var face3 = `
/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUA
AAABAAAARgEoAAMAAAABAAIAAAExAAIAAAARAAAATgAAAAAAAABgAAAAAQAAAGAAAAABcGFpbnQu
bmV0IDQuMi4xMwAA/9sAQwAGBAUGBQQGBgUGBwcGCAoQCgoJCQoUDg8MEBcUGBgXFBYWGh0lHxob
IxwWFiAsICMmJykqKRkfLTAtKDAlKCko/9sAQwEHBwcKCAoTCgoTKBoWGigoKCgoKCgoKCgoKCgo
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo/8AAEQgBAAEAAwEhAAIRAQMRAf/E
AB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAE
EQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZH
SElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1
tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEB
AQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXET
IjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFla
Y2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
x8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A+qaKACigApGOKAML
Xp8xlF5A7V4X8RtYs7PzfNImnx8sa8Kp9z3q2tEgp6angWs62ZZ5CTGoJ6DArGNz5p+UrID6EUrF
PUlW1EuN0XNW7PQ2L5j3JnoKXN0KijqNP0eYoqXBdgPuuo+ZPeupisWn2Jd4+0r924XgsQOCff3/
AJ1FzRKxDqGii6m3siiQ8F1XGfXI6YNWLfRbiRQMkcZI9fpTDluT2/h6Qy8gDPbtmtG38JeY480Z
5zSLUTZg8M28YwYxjAArXtdPt402qgHbpSaLWhma3o0Uqk7Nx9DWLaaVblgPs6qRyds2M/gRSQp9
zZOni2iWS2hlQ+kjYz9OMGrdjq89vIPPVhj+8M/lQyDq9P1WOYBlMZz1AOD+VdDaTiReOKulK0jO
tHmi0WDTlr0TyxRVhT8tJjIX+9SUxHXUV553BRQAVBcPhSBTSuxPY86+IGti0s5I7dsORy9fM3i6
8e8mfDO5P90ZrWWiJicNPpZZtxV/xrW0jQt4DOv6Vk2dEEdTY6BHuB25rpbPSo0QARjP0qTRI17W
wA/hFaMWmoQMgflQXYsDS142rU9tpqqenfNA7GgtihxkdKuRW6qMY/GkDZY8sY4Ap4hXbyB+VArk
EtuH4wPyrk/EGkOm+a3jw3suRQLc5i38SX9hJ9nnY+XnBUdPyNdFY6pa3KkkAE9l6f8AfJ/pSJT6
GhDmI+Zb4ZRycdv6ium0nUhKFydrelTsNnS2829RnrVgV6NKXNG55lWPLIM81Op+WrZkRMfmNNzT
A7GivPO4KKAEY4XNYWt3vkwPg4OK0giJdjw/xrqhm87Zs8tc7pX5A+leSajf6aHYJ50kn4AZpTep
rBWRm2Vobm4BXfyehPFdnpmnBFUY5rI2SN63tlToK0YI+KZpFF+3QdavwoKTLtoW0Toaswpk5pCb
LCxipAhoIuP2dKevHXoaYDylRyxhlwRQI4nxVoCXWZI1GfpXGtbSWjYPGP73+NIGupt6TqMsLruZ
ih4xnP5V09mQ+JLd8gn0xSYJnVaVdkook69K34zuUGunDS3Rx4qOzHVIp4rrOMY3NJQI7GivPO8K
KAILt9kZrz3xlebYiu8KCCWb0XvW0NFch6ysfO3jLVjfXLIn+pQkKorl7WxNxIPl71g2dUUdpo+l
pBGvHPet23iC8ihFosrxirkHQUFo0IF4FXI1O726CpKLacCrMJoJLYHAPpTwucHpSRJJ5e4AZI9x
UqpxzVpCuOC8cUpQUMRnXttuB4rjNdsYyeVwfXpmpGmcvcQyafMCFJjPY10eg34BUg4DcZP8jUO4
HaRq3lLNF+IHet7R7jz7c56rwa2wz9+xhiVeFy/T1PFegeaNPWigDsc0ZrzzvDNIaAM7VpNqdegr
xL4l6kywyRhseZ19lrdfAZL4jxYg3Fw20d63tJsdrDI5rm3Z3R0R0Mce1eKnQYAplIkWrMJ45oZS
NO3PHbNXIyfpSGWowSOasxLUiZdjFSqtNEMkUemKlAGKsRJjAppFAiORMjmsTVrNZEO4cfSoZSOD
1eJ7WXBUzQZ+7nkfSo7e2Ei+ZaMzxntjBX2NSU1Y6/wxqojiEFzkA8KTXYaUoWRyv3W5rSjpNHPX
+BmpSg8V6J5gUUAdhRXnneFFAGHrTfu5PpXzj8S70/aZtxzztXFbv4DKHxHI+H4GZiz9zxXXW8G3
GBXMjvLRXAx0oPGPSmMVeOnWrMTYpFI0bcg1fh54xmgovRcD3qxETSIZcRvzp+/BpEkqsBUqsM9K
q4Em4Gkxk0yRGXrVW6i8yFhkg+tJjRxGsWrxllkUMh9eK5uMz6bcebbnfG33kPcVkay2OntPKuo0
nhXI67c8qa7Lw3c+adjcEDGK1paSRhVV4s6A0or0jyRRQ1AHX0V553hRQBz+vNtt5z3xXzX8Qbdm
uic5YnOMdK3l8JnTXvlbwpYl+WySOgrp5YfLOOB9O1c62O7qQkc+9RsKChFPWp4DluOlSykaNruH
ArUgHShFNF2NT1qxGO3NBmyxGcE1N2560CFzjrUysO9JAPDDjFOVuKoQuSRTWouBkazbCa3cd8cV
wF7IISQccHBzUSWpV9C3o1x5b5GAjdQD1rs9DjC3kckbEhqKfxIzn8LOupRXqnkPccBSkUAzraK8
87wooA5rxMSI3HqK8B8bQl9Q8sffY5b/AAraXwkUviNrw9pH2W1ViMMRTdRjw4HpWNtDti9TPc4P
FQs2M5qdyyMHLcfjV63HTAoBGtap0wK0YxigpsuRDtVhVYd6GQydVwwIqdRnqKCR23I5pCMUW6gD
YNKuetAEise9KTxQBWuFyhrznxNZkXjFeN3I+tTIZg2OqmzmxNF0PO3vXp/g2+hukVl4zyPanTXv
JmVR+60dpThXpnlPceopWFAbnV0V553hSGgRynjC5FujOey14Ssp1HxNmTnc+a3kvcIpv37HoEYQ
QmMdVHSsnVbYJF5jVk0dsNzlruVIsl2wKxbjWrVHILjg1CRbZJb+ILHPzyhfStODWLQgFJFYd+el
UJM27HUIXxhga1Y5lLVLKLkMnoauxnPPrSEx7ShF+Y/n2qrc6xBbhizDAqkK1zJuvG9nbg8ZA681
ly/Ei052RO3uKAsZlx8QGd8xxvt9Aa1NH8dK7AXMcip64zigdkdrZX8F7EJLdwwNXMkrz1qRMRly
CK4TxmpidWI49felPYSOMmi80NIoOV6qRzXYeA5SskYPfirpfEjGr8LPWVHyD6U4CvQPL3ZItOYc
UDOoNFeed4Uhpks4H4iE/Z5MeleMeGULeLgjds10S+BGdL+Jc9OSBU2Huc5Nc74yvUtrcDBrJnZF
63PJdXvLy/lKWw46bvQVz82jXhkLO5Y+9ZlsYthcRnbIjY9R3q3awTRkEM3WmJI6C0ea3dGRsr1x
XY6TqW9FLHnjrUs0izpLK5DDjofSta3ckH09KRUkZuuTvFGdvPauE1Y3U6Mqbssf/rUxHPTaJPK2
ZmJPbBqzY6DCZh5xJC9s9aBJHU6dpemJjfEmfetJtI0+VPkUr/unFOxdiextHs33W07YHQHk11mk
Xb3KbZ1xIvcd6LEyWho4Nct41sTPYb16ipexCPPZN+wYGCvH1rrPAEJmvkPoc1VL4kZVvgZ6yFwK
cBXoHkkqinFaVyzo80GuE7WJRQSziPiGdthK5HQV4x4J/wBI8WPIewNdEvgRNL42emO/yj1UHNef
eNpRczbC+I17DvWT2OqJxc0sMK4TCisy41q0hfEkqj8aixdwTXNOlwvmqD9anS9tXH7uVG+hosO4
/wC0oOhrR0+6G4YNIEzsNEuCxAPNdjZruA4xxUmjINSjURksOlcbqFykbnjFA1sYGoassaknCqO5
rl7rxhGm7yBnBxuJq0rkSlYpw+NLlsfd5P8AerVsvHEqSBHwPVgcgVpyMyVXU3rXxcHYETAk+hru
/DWti6ZSTyOKzZqndHaxvvUGq2rQ+dYyqR24qWI8dvbr7LqDxyDAzXpvw6FvIxePGSM06Xxoyr/A
zviKFHNegeX1J41zUhXioGbuaSuM6wpCaBHG/EcA6HN/exxXjXw2jL67cv8A3Qa6H8CFR+NnoWpO
I4XI44rxLxrqjQzSEsQM1gdSPM9U1uR1YbmWIdXHf2rmpIb67YS28UrRlsLI3c/jW0VZGUpO5pW1
jfLNOjahawzwReYI5cjzMkDavHJ5/SrVv9uhtPtVxCPLBwzxnlT9KGghLU3tKvvPjHzbl7EGuisJ
GRxWLOg7nRXJEbDjmvSNK+aFSfSoZr0KutRkphc4NcRrdkVjL9aVio7Hk3iqS8ubhrWzUlsZY9kG
cZNc5D4aee5MclzJIFTzHAO0MfatqSOWu7bFS1srDUZEis0vIZoUxPvfcC+4/dx2xjr712XiTwXb
WmlQ6hol3cRhoFd4rlg3zY5wR0GelavQwjq7GD4etdVvSnk2wAB+9v8A8mvcfA2kXiRo0/UdcDis
ZnTTulqeoWqbUAJqWUb42X1FZlnjfjSwlGrr5S/eNdD4RkvLAAQ4yRyaUZcruVKl7TQ9I0G+mnzH
ckFwM8VuIK7ac3KF2eXiKapz5UWYxipNtMyNejNch0jSar3cjR27uoyQCRVRWom9DxTx54gu5fMi
lbKdMVjfCZPNlv5v9rFbVHpYqjGzbOn8SzFI9o715L4u0r7arYzk+lYdTqSujy7U/C0u4vHk+WwO
xuh9q3J9dgvbdVukMV1EwbDDgn04rZMwlHoZ+orZ6hfQ3RWVnQYCgZAq+8U0ln5NtBsV2yxYcfgK
JtW0CnB31LlroVwJ1nQLGDjeP7w+lb0dsFxjrWB0tHS6NuWPJ6A16ToUm63T3Gallr4S7cxiTjrX
PaxaF7dlVeSMUhxZ5jd+H7qCa4eF3DSE5x3zXN3Wk6jbyeaiFWUY6ZyPStYS5SalPmVipFbX0E4c
W0alvmPHJrag0rVvEE6LdljGpG2NRtQD+tW5XMI0uU9M8NeFo9PiQhecDIIrtrOMIoG3H4VlJm9t
C6CB06VPGM1IHLeItGS6uw+ORT7e3jsbQvj7gzUNam0JaWE+HN7NqOqX80n3FO1RXo8YzXdS+BHk
4z+KyzGPapcU2YIv7qQtiuaxvcaWqG4O6FwfSrS1JbPnrxoxkv7qIfejcitj4V2f2exumI+8+aKn
xHTT+G5d8Txlm4rjLxMsQwzWT3OiK0Mm6sEkVsAcjFc1d+FEmlGwEDPQVopaEuOpr6f4ZWNAu3tW
vHpAj5ZQcUFIWaDjGMVUMQ3cVDBmvbhY7QAV2nh+T/R1yeKhlrY31+b61FcQK6nIoJMi401WblRi
qr6PCw5UYq9y+YgOgWzNkRrx3xWjp+nx2v3FQcelAbmko9anQ4GBUNisPHWr1qMrQhS2K11HvmYV
hamcxSRZ5xRIqluS/DKAQQXZxyXrvo2FdlL4EeZjH+/ZbjNSZpswLNBrE1Gt7VE4ODVIlnh/j61F
j4lmeTGyUbq6LwdEqWbeX0YbhSqfEddP4Bddj4JIrhL5d8h7VjI6oLQqKNzelWre3yc4/ClFjaL6
wqBxxUUxwCKu5BmXRA6c+9ZjP83FSBoQuPs4BrsNBlUW659KmRrDY6G1lyQtW3Hy0lqQ1qVJnAbm
oy3b9KYJCqRj3o4zRctIlhjLHmpSuOBRbQOpLGpPFaES7UqkZzKN1KsEc87/AHUUmvPLTVGv72aQ
k7WJwKmRrQ3ud74Ltilgz4++2a6iNDXdS0gjyMU71my7GpqTbxSbMki3SViajTTHqkSeR/GeyZmg
nQHkEE1S+F+oPPavBL96I4/Cia1udVF+4dVrkW+Fq8+v4tjMDWUkdVJ6WM0cNV+F+MVmjUcZgqnP
1qpNNnkcVRLiZtxIS1UzzIF7mghlxUZpVQdq6nTVdAoAOKzkbQWhvwM6gMM1twOJYx3NOJE11Kt1
H1/pVVlwBkk+9NocXoOQ45FPj+fkUJFF2NSB700v/hTEty5ZpkjvVyUgcCq6GM9zC14/8Se6GcZQ
1574Xs5WkI2HBPHFQ1dm1KSSZ7Rotn9l0+KPHIHNacae1dy0Vjxaj5ptlhVp+2s2CJ9ppCKzuWNx
zSFc1SYrHNeNdIGpaYw25ZeRXmvheyk0jVpEdcLJ0q3ZxNKTa0O3vQHg/DNcHrsJDmsmjspnNzNt
fFIJ24GazOhC+azDmgZIOOKBsp3J2qSaZodubq58yQ4QAnmhGT3NO18pb7BORmu205LfYpyKVkWp
Oxr5gKYWoIZWgfGfloFq1qTPLubnGO1RPtxg4P0oBAkY/hBz6VNDDkZ6AU0W2WSdqkdKr9ZOaGSj
VtcLHmnOcgmmYvcz7mBLy3MbdD1q9ouiRK6bUAVeelOC1InPlidSsWMDFOCEdq3uefykqrinYqGy
rFvApMVka2DAowKAsMkRXQqwyDXn/iWyitNQ3qPl6itIvRoF8RXinW4tQ6HI6GuW8SIVBPalc6qe
5x9x97r3qruwTjrWZ0ksZ9TUmcDNAmZ9/wAoao63rR0+w22MLPtAzt6mghmfofiB76LdJBJBIp5D
d/oa7bSdWLIPnpDi9TM8TeKdas51XTbIyxd3J/pXS+E/EFxqNoFu7do5OmD60maHWrnZyDRkn/69
MlEyOR0xntVoNx+FUgYjPxg4FLCuWDZyKQr2RoRnP0qO+nEFpJITgAUzLqZnhu6+0rknOTXpOmwJ
Fbrt5yMmnHYyr6Oxb2ijaKLnPYMClwKQWK3n0hn+lachHOJ9pNNN0apQFzsY10a4v4hXQh0xpieQ
MA1XLZNjhK80cT8OdV+3Wl3A7ZZJCw+hrR1qLcjZ/CsbnfHRnFXseHJArOYYbrUs1uPhYbuatqFP
ByfSkMq3UIINYkto+87Tx6GkSxfsDbflGD7CtTw/pk4nzITtPIFMFudsukh4Rxz71paTpKwP5jcn
0qTRy0NORMDgVCqewoJTJgAoxjntTiTu7fWmFxAcnn1q3EPl+X8KZMi4gKqB1Peob/Tv7Us5bfeU
yOoq4R5nYxqT5I8xieH9J1DTbvyJELRg8ODwa9Ms5mSFV9BWiptbnNVrKdmif7Q1KLg96XIZc5Is
pNL5pqeUrmMtZs0jzV08phchaY00zH1p2ZNxjS1g+LdJOt6U9ssmxjyGp2urDjLlaZzng/wUPDqz
TSTmWeTrjpVjVk3Rvjr2rnqQ5dDvo1XUd2cTqSNk9OKxXGCeKxZ1DAxHTr2q5C/y8GokUhsz54qu
uCxzSQjQ0+FZblR2ro4bZYiMVQ0dBb7Qi5x0qzuG5QOh71LYErDufpSeWrHnimIXbjkUjLkH1Hem
gGxryc+tXI19KYmWegq9YLiLJ7mtqS945cS7QsWehqxA9dEjz4krPSxyZqbFFhGxUm6smjRM55Lk
HvSvNxXTY57kLT+9MNwKdhXGm5FIbkU7Bca1wMEVhaiuQcVhXWiZ14R6tHGanGBI2OtYkqEHjgVy
s9ErEeo6UBsHipKEZs5qpPdRxcbhx70NCSuybTNWihc5brW9Fq6vjMnFSdEIdDRi8RRKygZbHFbu
m6nb3RA3gMegNJhOm0jbXGOoxTuCc1Rz3FyoGKawz9KaAVcZqeMgCmIkB4FaUTbYwB6V00Fuzixb
0SFMuDU8Mlbs4UPeXHeiOXkUrDuXYnyKk3cVk0ap6HMxxketSMhrcwRC0dMMZFMQ3yzSeVQAeUaz
9Vj8uPd271nVV4m+GdpnHX67pCeKyLtBtNcR6xlk9RVeWTb3qRnO6trgttyIfm71z7ai8j7/AJmN
DNqUVa5Yi1AnjynHuBV+11YJhWWXcP8AZNSzqgmaEerSsf3NtIQP4mGKtRavdRgMIpVI9KjU0a7n
R6T43uYQI7qN2Tpkqciu503VVuQGAYZHQjFVc4alPlZrpKGAznpTwxOc9+lWjIlUACnM4XApiLNk
nmvnsK0NvpXZRVonmYqV52GsmanhXitTmFkSiJTSAvwrxUxXIrJ7miOfjf1pzNWxkRlqYWpgJupu
6gQbuahvIxPA6eo4pNXVioS5WmefakGhndH4INZs5DJXA10PaTurmLO21uKpSZqGMoXGnRzBiyjd
9Kx5rcQS428fSkjanLoaOliHGZFB56VswW+mtPufcBsGOAfmxz+tFkd8HpoaUx09FAtFY8DO71qb
Sms/Nb7RbecG6AEjFLS5c78t+p0djpVs9wsyQiJAdyr1rW+zqjErzSe559Sbk9S3C+MA1bjbgE1S
MSXzMVG0vNUI2tPKrAuCMnrVzNd0PhR49W/O2xrHmp4TxVMzQshpIzzQBehqesnuaI5VGzT2bitz
FEbNTC1ADS1JupgG6l3UAc14s04yR/aYRll+8BXCtLncDXFWjys9TCz5oW7GddH5qqNzWDOgQnC8
VSuo1kHzAGkPYopEY2+RWxV23Vzj5G/Kg3jWaNazhZuqNXS6TaKhB2c0jR1nJWOlhOxRxU4YkCgx
Y0OQatQyDbyaaFYe8uF4NY3iC9ltbVGj43NTIL3h7WzMihjzXVQXYYDdW9Cf2WcOJpfaRZ3g9KsQ
mupnCLIabGeaAL0LcVY3cVmzRHIxtUhetzEjZqjLUAIWpN1ArhupwagAfDKQ3Q1594v0c2bm6tx+
5Y8j+6ayrR5onThp8s7dzkZjuqAAmuBnqC7c0iwgtzSA0rWzjfGRW3ZadDu4AoNYo2rfS4v7orSh
05UA2r0pDbsTm29KRottBNyJ0wpJ9KhD7f6U0ikNWffIFBz60zVUW52ow4UcUN6EPcx44WsbgOmd
ua7TT5Bd24KHnFKnLlZFSN4koluLdueRWvp14swweG9DXoxldHlTjYtzGoo25qzEvwtUxas2jRPQ
5CNqkLVsYoYzUzdQA3dSFqBBmnqaBhuqhriCXTpVIzxUz+Fl03aSPI9QTypW2/dz0qKNw3SvOPZR
Mqin8VLKRcs3O4Cuk0w/MDjt1NBtHY6O2IIHY1pxgFaETIRwMkjtVSUEk4570MlFW5bap6dKzWm8
1tqH8aY+hp2FvGoGayNevVt7/ap4xzUvYjqTLtvLPcvJxSaVcyWsxTnFZlnT2t15xHmCtOBYwQy4
B9q7cPO+jPPxFO2qLEj5HWo42+aus4HpoX4W4FTF+KlotbHII9SFuK0MUNZqiLUDE3UbqBBupwag
Bc1DefPbyD/ZND2KjujyPWlKzuPesRZjHJXms9lMuw3StjnmphKDSLTJ7OfE3JrpbO4GQc9qlnRA
3LO82k5NbFvdADkjBoCSHyXIIIzgVQvdRigT7wzjgUzO1jHknlvG7qnp61etYFQDIpCZoqVijzXn
3iC8EmsOuaCGb/heR/s0ijkVv6fbxy3QMg5xmsnuX0Ldzut3+UYTPWk+2GJSe+M1pFtamcldalmx
1eO4XaThhWnC+TXqR2PHqL3maUJ4qRjxSEjj42qXdxVmaGs1MJoATfSbqBAG5p6mgAzTJTmNvpQU
tzzHXY83D/U1zF5FhjgV5r3Pa6FMsV5HWnLe7RhqBRdmTwagN2d2K2rPU1C5LAnPrUs6Iysbdrq6
f3gK0BrUKj/WClY05iM6xLOcQAj3NT29uznfKSzHuadzNu7NSBFjHNSm5VO9IRnajqoWMhTzXFtA
bvUfMduSeg702Qz0rS7FbTToQFwzjJqaGTFyfK5PQViyzUuFmuIdgGABya5u/vTaN5cnUHFUmLoZ
zyskwlgJweSK6zQdUEwVJeGr0aUrxPLxEfe0OrhPAqVjxWhznGRtUwatDK4jNxURbmkAm6jNABup
6tQAFqhupNtu59qUnZFwV5JHnWsHdIx96w5lz15rzT2uhRmt85xWbcxMnUGmZlB0bdxmrNvFIcfM
350mWjbs7YkDJY/jW5ZWW4jikWkdNp9mqYJFaJdEHHakUULu/VB1rLn1Ld/FgetMGYd/qWSQmSa0
/AemS32pfa7piLeLkg9z6UmQtz0W7uQ2cZx0A9BVzR7cAea6j2rPqX0L99KRat5A6Dk1wOoKZ52a
YfMORTYRLujiGWEq6/NWza2yKQVHNdOHerRy4laJo6TTnbbtb8KuM3Fdh5z3OJjbmpt3FaMxAtUZ
agBN1GaQBzTwaAAms3VbjERUGsa07RsdeFpuUuY4jUjljWTKK4j02RE4IpJYFk6imQkVl0xWarsO
mAEcUi0bNnZBR0rWtoguMCkUi21wI161mXuocEKaYXMS4u+pY/hVCSWSY4HT0pEmlouiSahdpEBl
mOceleiwWcNjClvHgJH97Hc1EmVFFi3Czy7mwIl/WtJbjP7uLgd/apQ2VNVvtsBhiPzdK5S4nAuR
nqOCaTGi9pcytPlU+XpmumtWII44rah8ZjiNIXRuWeNvvViQ/LXpJWPJbu7nCRvVkNxVsxBmqJmo
EPiXca0YLMuOlJsuKuPlsSi5IrNuG8s4HWs5VEkbwoOTKsk+FJY4rC1K53k1xTk5O7PSpwVNWRzt
4cms+WpKICtSLTETQj5q0YeBSGiys23pUguGxQMq3E59ayrm4x3yaAKiRtO2WPHcmhruKFxFajzZ
ScA44qRHoXhuMaLpxaUg6hcDLMf4F9KlhuDeXGASIl+8azZslYma68y48m1+7nFW5rtbRNhb5z1p
iMKbUg0zuW4A4rPgb7VdKXOMmpA7HRbMS7nUYiUda0lkQOBngVrS+JGdbWLRt2bAx5BqeQ/LXpnj
PQ4GJ+ashuK0MhWaoWcA0AaOmASMK7jRNPWYBmHyiuepO2x10qfcv6vYxCzYqoGK4HVYVTJrmb5l
c6oaM5TUJ8EgGsG4kLNUHT0M64OaqMMikSRsuKbnFMRLG3zVehOaGNE445NNlnVFpDMu6uie9Vo1
8z5mOAOST2pDK91cNN+5tsrH3PrW54a06KxT7fdrlh/q1Pc+tJ6IUdZGvHPLezMcnBOWbsPap5r3
ylFtbdT1xUWNWzU0/Zbwlgfmx8zGsHWtRHmMqE59aAMyNifvHPc1f0gtPdqkY5JosJHeNci2tktY
euPnNY+oXWZEVJNrZ9aun8SIq/CzodHuriIokhDIR1ronbKZr0o6o8ipoz//2Q==`;
var body3 = `
/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAsICAoIBwsKCQoNDAsNERwSEQ8PESIZGhQcKSQrKigk
JyctMkA3LTA9MCcnOEw5PUNFSElIKzZPVU5GVEBHSEX/2wBDAQwNDREPESESEiFFLicuRUVFRUVF
RUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUX/wAARCASwBLADASIA
AhEBAxEB/8QAGwABAAIDAQEAAAAAAAAAAAAAAAEDAgQFBgf/xABDEAEAAgECBAMECQIDBgUFAQAA
AQIDBBEFEiExE0FRBiJhcRQjMkJSgZGhsWLBJDNyFSVTY3OSNEPR4fAHFjWCokT/xAAYAQEAAwEA
AAAAAAAAAAAAAAAAAQIDBP/EACARAQEBAQADAQEBAQEBAAAAAAABAhEDITFBEjJRIhP/2gAMAwEA
AhEDEQA/APqYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAKNTq8OkxzfNkisQC8eb1XtRNbzXT4q7eU2nu0MntRq/D8StMccvW29ZmdvgjsTyvZjxOLj
+s8WLxn8TFPXs6Oj9oct7c14rkxz22nrB2I49KOdTjelmszfmpMeUxv/AA28OqwZ4icWWtt/SUi4
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmdo3nsPNe0Pt
Fh09Z0+DNWL7+9O/7A3eJcZppsV5raI27esvH6jX5ddM25p79Ilo59VbUZOe2Tm/PeGvfPfT2iKR
PLv1+DO678XmW/a97U6TtOyzTbTF538/T9WjTNecm9a7126tqk3rSYxY5ta1plRZqZNXGjyZcPXl
mZmsx+qjBrsuO16xM7eXRt04JrdTltk5OWJnfaWf0a2lty5MdZnfzSn+WOHiOutFpjHa9e8bQ2fp
+alYy462pk7zXbuxjPesbRS0f6ZZV1ET1tErzXFLHo+A+1ddZf6NrI8PJHa1vN6iJi0bxMTHwfOa
zhzd61v1846utwniM6DUdb3nBaNrVmd9vjC/ZVePYirBqMWppz4rxaPgtEAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAItaK1m09ojcHnvarjM8P0vh49+a/eY8ng9D
h1fGM1rxjtGPfvbzdbjuTJxHX48cTPNltM/KsS9Dw7S49Jp6UpHaGe2vjz1y9J7LYK13vHWe7bj2
ex1tvM80ekuxW3RnW3Vm6P5jRx8H0+OYmMcb+bapo8GKPdpC6bQwtdHU8JpWkdJ/JweL6e23iU67
d4dubSqyVi9Zi0bwIs68XGp36TtEq7ZJmZmevzdbifCKWtbJinkt6eTgZPFw32t+sRurbWVzxs1y
Rv6T8V1NZNPtfq0seTm+Kevr+SZuxXjvaPiV8N4viycto9HseG6+uu08W6Rkj7UPmFck1tE1nlmP
Ld3eA8V8HVVi1pjq6Ma/pnqce/ERMTETHaUrKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAADW19+TQ5p/p2bLS4v04Zmt5VjeQeJ4bjnLqsupv+Ka1+ERLv4reTmcNxcuC
vy3l0qdI2hlr66sT02ot0ZV7qqrInruzrVZLGSZ37JjqgYTG0K5lbaFVhDT1Ub456RPweY4hixWi
eSdpjvD1eWejz3FNHWYtkpvFo9EIseb3tS3SerOms22rfpPqZKzvvHSYUz70TExG6Gdbs2rljeJ/
Mx5L0vEzPaelnOi98c9J2bFNTFpit47+a+PVUvx9T9nOIfT+GV5p3yY/ds67wvsXqpxau+G09Lx+
r3TqrEAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADV4ljnLw3U0jvO
O0fs2lWqyUw6XLkyfYrWZkHldBEV09eveG3Fq1mI3jd4vPrOIaid8G9MP3Y38k6fNrt/rMk9Ou8s
tfXXn49rGWInuy8SO/k5Gl1E3rG/fzbOe94wTy99mbRvTrMOOvNfJWsesywniukrG/jU6fF43WYN
TmtEeJtEQ06aSmK2+bNtEd+qfSO17unF9Hmvy1y13XWyVmN4tExLxVK8PmNq5NrT58zawam+m/yc
0Xj8NpRYSvQZ7xEOdqI3rPozxayNRXe0ct/ON03jmrKB5nV4q1yTO20Obmv4c+cx8HoeI6WZpNoj
q83niYmYscU0r8aJ6T1n49zeJ+Meqm1drb9J+Kd5p136StGVem9l9TbHxLDFp7W7+sS+q1nesT6w
+PcAzVjiGHftzQ+v4f8AJpv6On8jH9ZgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAABp8VrW/C9TW0ztOO3b5Nxp8VmI4bn37TWYB8f1HFtTfUfR9FWJmsdZ9I7MtJxDX5s
d8ta1y0xzteaR2277rcuhycP12SceLxMeWNpjttHwlu8I0mfQ1y+D7k5YmJmY36T36Ka43z/AF1t
cI1ds+qxVj7/AEej19PCw9HJ4NoK4OIU5Y35YmZdzVTGebVZabx5jJS+Tmns81rNLm1Wrzc9rVw4
Yibbem72mXTTS0w0M3BvEta1bWrM95ie5EanY87wXgNOL6XPfxraXLhra/W28bR/dzYzarBqJxRe
bzE7Rt5vWU9n8mPHOGmS0Ypnea1naJb+k9ncNLR7u2y/WcxXO4TOoyUrN6zD0FaW5Y3hu49FiwUi
KxCvLMR0hlW0jn6ukWw3iXjOJzbDlneOj3GaN6zDzfFOH+LE7SRGo83XNSZ2lbG2/WfdlvaT2cy6
rNFInlrv1mfJ37cK4PwTTxOoidRm2+/2/KFuyMp47XB4LivXiunrH2b2iH2qn2K/J8x4fGDNxTSZ
9Nh8OviRvTyfT6xtWI+DeXs9MNZubypASqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAOZx6/LoOWPvWiHTcf2hiZ0e8fc2mf1E5+vP/AEeuSd7RC2uKtI6QjHfeINTfwtPf
Jvty9WPfbt/lucP03gxfJf7d/wBoReYpm97zaNeLb4Ims9Nt94auDjem1Wo5PFi1onylS+1o7l8V
bxvtupjDMdNkYtXS1+Stt+m63xImEJ4xjHER2ZxMUjeUTO3VRmydBbjLJqPi08mbeVOXJPq1sl5Q
Vbkz9+rRy35rxHqzmZlVEe/Ez5LRlW5iyfR6zffaIjq1OSNZps2a21rZInafSPJhxGMl9LStLRWM
lorM/A4dkrWbYfLZC2W/7K6eubX6b4RzT+W76K8b7G6X62cu3Sten59nsm3j+OXz3/0ANGIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0OIYfpOHPijvNNo+fdvtXJO18k/
/OwPFYbz2ls3jx8VqW6xMdWPEdP9D4lkx/dt79flLLHbkxTPwY6nt2512ORTRzE2x4/dpE7cvkme
E4IrW3hRMxO8THRtU1FKWtvtvK2upx22rzRCtXkqzh2jtF7ZbT122b01ndnpuWuP3Z3+Ky20qDVv
fauzVy3mejZzNK8dVjqi87KLRLYtXruqvXzkQp7Qoid88R6rcl+WGlW0/Sa22mfhCZOq2x082ix6
jkm822pO8VrPdr4dNObVeDo8XW3uzMbzK+mvxT7szE27cvnu9j7PcNjSaXx8mOIzZevbrEeic5tN
+SZnpt8J4fHD9HXHO3PPW0x/DeBtJxx29vaAJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAKNRim9Z5e89Nl4DzXtVh5babURHrSf7f3ec1+qnDorWrvvt5Pccb0n0zhmWk
Rvevv1+cPE2rGTFNZU26PFfxwa5dVkjelI2772nZnX6bbrEUq3o0d678u8wmuDL2ittvVjXdneeK
cGv4jpJ6U56+kS7+j118+GLXpakzHaWlp9NNY3tv+bbiYiNoQy1y30uyZJlrWmZnuym6q1iIJnop
yW2Te8bdWnnypQqzZOadokiIpSZntWN5lrxki19vNRxrUeBwnNNd+fJEY6/OejXLn3Xe/wDp9wyn
E8uo4lqqxblv7lJ26T6vpD5X7G8QycKzeBMbzMRM1/FH/wA/h9QwZ6ajDXLitvWzRgsAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeL45w+dDrZvWv1OWd4+E+j2jX
12jx67TWw5Y6T2nzifU+rZ1y9eHwzDYxxEy18+DJodXfT5o96vafWPVbjyxDn1OOzHudbM0rt2UW
iI69mVtRXZq5tREb9VUoy2iIlRbJ0UX1VZ6btTLrI7V6yk62M2oisT1c7JmtkttVMUyZp6x0beDS
RWOvdKijDimvWd3G9pNRMfRcNfvZOb9Hpb0itJeP47k/3hgjaZnbaP1XxWW3T0movbNS0W645nbf
0nrMPpXs3xamoxdJiLbe/X1n8Uf3fKsOTw4jbaXo+EarJhtGTHMxeJ6xH7Sti9Zaj6x3HM4NxXFx
DS1mtoi8dJrv2l011QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AGjxLhODieOIye7kr9m8d4eM4to9RwjPXFa0ZIvG9bR0fQXmPbDFvTTZPOJmEWS/V8bs9R43NxLL
G8eFbePg1bajU5/s0l1ceKLx1hbjwRE9mOpx0y2uRTSZsm3PMw2aaKtIjo6kYo9EXpET0hVLXxYK
xC6MZvyx1lFs0RHfaPiCnU12pLyHGNDbUajBekWma2npWN3p8+opa20e9LSyZLxExTlpM+vdOdcZ
a9tPS8MyUvFrzWlI6727u1pYxYrbVmb7x+TQx6au3Nqcl7/0rcmW9axGnwZJj1novmxnZXV0fFp4
ZxLBPgTGK8xzXr5fOH0bFlpmxVyY7Rato3iYfNuG2x56Wrqa8s2jz+7Lu8O12bS6jkwzN6THNNI6
tvrN68Y4rxlx1vHa0bskAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAA4XtTTm0OKfTJ/aXdcL2pyRGjwU362yb7fkJz9eTxxyZJjyltRXzUZK7TFtl9Lbwy06YzrHwa+
fJFd/wCVt8m0bQ0eS2qzcm+1K/an+zNZFL5M1pjFXeI72ky48eGnPkvNp27+TPU6nHpMfLXaIjpE
erk5dRMxOfN1mPeisfshW1ne1a1577Y6x5R3U0zze31FOWI6ze0byU098kRlzbxM9qrMlPDpyRMR
Md5Vt/Ihp5898mWZm1pjftE91uCt7fCI7dWeHDEW3t723l6rslqxWZnasR+SYhFbzhnfxJ2jyeq9
lcGXWZcmW0zWKxHLaI7794eJx5fpfEKabT8t8l5isddo3l9S4VjrwrRUwzSJt3tav3pdOL6Y6dXD
j8HFWm+/KsU4NRXPvtWazHquWVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAa+fXYNP9u8b+kdZBsDkZOO135cWOZn4y5Wu4xqctbe9y19Kp4njt6vi+PDm8DFMWybbzPlV
5PiGtz67UxbNbeKTtWIjaIXYpnwuaftT5tXJT3vmi1pMsrU5qIrG1V1a+5DCa7b9GFbRr5J6Wnbt
Cu+Wmk0m8956z8ZWZNorbfzcbX5rZslazPux3hUt41NTntktObJ13+zX1bek01r4/HzVm0bxPXy/
+bNfDgjVa2uOY92kdfg6ufJOKvLXtttVVSqbcta2vM7zXtHpLQy5ZtMd+vWd+7Zy3mdJHXra3f0c
vUarw7zFY5rT2hH1Lavnrgx81p3U49Pk4nE5L35MO/StfNRXR5tXnrS8W67WvfyiPSPi7uLHFK1p
jrtSsbR5Lc4RzsXBaYreP4l45esRD2HD9fnw6evvWvO3Tfr0aGk0U55ra0TFInv6uzgrXFXlx0i0
77RPlC83Yj+JW7oddqr6vHzTTw9/f6dod+L1t9m0T8pcbFSmPHER3892W0zPuz+jSbVvidkcqmfP
Sel7bekrI4n4dZnPWIrHeYnZee2Wpy8dEaml4npNZblw5qzb8M9JbYgAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAABEzFYmZnaI7yCXL1XGa0jJXT0571nbee27DiXEprp8nhbxG20W8
5cbD0ikfnKO+urTPvjoZdXqctdsmTaPSvRpWmsdZ6yztfaGplvv3lWW1tyRlz1x0vkn7Vo5atTNe
Y0+1o79V2KsZsvX7Ne5mwxnyTNvsx2iGneM/rCdRSuOsTasTt5kRFtpjqmOH4t4nk7estiMNa97R
Hwhna0iuKTEdmGWa4672nZtRele1N59Zlq6vLOSsYorEc07qcW65euzRvtXvPZy52naZ7ujr6fXV
rWdukREK8+njHgmZmPc67bq6ivVWhxxgxZLztNrT1mZ/SP4VZs0zaOvfp84WUtNsXLvtv3699+rU
z7+Jtt5qURqMnPpctaR1rMSw4ZoK57eNk6xHaJRh97Ltt7lo5Z+L1HAPZvVauZ2nFTSzMTzeJEz8
to6xPfvsZntPZ9rXxabmxzefdrv0j1dXh/BcmstW1qxTHHasR3+b0GPhGl+kWmd64dNEVjf73T7X
y8vy+Ddx6O3iRakxTH5RXrMw1/lX+3Itw2MFIraN48qRHdZi0cUjmmPen9noox1iO0fNzdXEYrTt
stcmd9aX0bJ+HePmiKTitO8TMLZ1cVjrMfqpz6ys4pjfrPRWZ9rXXptUit6zO+23VyaRHEc05L1/
w9J9ys/en1ljqdVbwYw452tlnl3jyjzbmmiMeKtYjpEbLeTXPUU8ee/+qjJpsV5rbkrFqzE1tEbT
DpYNbW21Mnu29fKWna0KbqTdjXXjld0cvQ63ltGHNPSfs2n+HUbS9c2s2UASqAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAOVxPWe99HpP8ArmP4b+r1EabT3yT3iOkesvMVtN7za07zad5l
XV5GmM9vVfEstvDx0jtaVVMlq+UJ18b5cMRvPeSuK87bUt+i2Z3PtG7zXpjkzXt6R+TXyTMzvM7t
ydHqZ+zhv1+Cv/ZuqvPTHMfOYaTMil1a1K2vHSLTELq2v+KWzThGo84rH5rq8JzedqR+ZeI7WnOS
34pYTafWXR/2Pln/AMyrKOCWnvmiPyR6O1y9585lhWJvl557Q6eo4T4dYiMvW3b3UanhldHpJtGX
e09unmjsT7eb1l4trI2t0hsZfrdNO0bzy+nzU20/+NmkzO9esz+TZxWis9dttvPv+Tn21jjaW8zn
26bTG3mp1M/Wzv3t0jyWXiKZJmsTERaZhXXDbNl8WaztWenxZLstPp5pau8frDtVrNMM5cfTfpMf
3aunxxbes9d/R09Dp8ebJi09ptFr3jtt2WyrW9wy1Jx132mK+Xq9PotT0iIU19ntLtExa3T47T+q
6nBaYvsZstZ+cT/LeMnUi0TXffo1s2m8Ws2/OIMWk5Jib5L328rS2t94Sh5TV4ppklpW6PT6rh+P
NbebTHyas8E081mZy5P2W6OFhjxNTE/hr/LoRO0Kvo9dPqctKzMxEx1la5t3tdnjnMs4noievcrO
yZjeFF1OSnNV0OG62cn1GWffj7Mz5w05joovzY7xes7TE7w0xrjPeex6Ua+j1UarBFu1o6Wj0lsN
3JfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrU5o0+nvlt92P3BxuM6nxNRGCs+7Tv8
2hToxm1r3m9utrTvMsonqyt7XTmcja0u3O6FMfi5t/u0/lzdJM81p9O3zdvHTwsUR5+bfPqOfX1h
dqV+3O7bs1+T31oqmI3TEM4rvCdkDGIIhlFd2daboS0NXG2bD6bufxXU1vlmu/u4us/N0+L1tTSx
kr9qk7w89j1FNZMV3jxLzvaJ8mer+LSOZqK2xZotbvljfr/89U453rXt9lse081xZtNjx7TGKu0t
DHlrevSevaN5Y6+tJ8c7VRNMt63n3ub+6/R54rERMztDYy4a5omclYmfxKcenrjtHLvtPrCnVmdb
eFe3JXmjy6eS/DrMuLVYsta9Mdt++6qLxO+0dEc8UmInr18iUfReHcXrqccb9Z27Q61Lb13eJ9nc
1Z35rTvE9avY4bTkpG8xEfB05vYxqybc07R281naGMREdoT5JQqy9mply7Q3bV3iXG1eXw7TWSka
c258t7+tpT5/BjT7MfHqndz12Z+M4lMMKyziUJJiN1WSu9fku23RaOgKNJqbaTU1t9yelo+D0cTE
xEx1iXmM1Nt3W4PqvFweDaffx9vjDbGvxz+TP66QDRiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAOJxzU73rp6z296zsZMkYsdr2naKxvLyObNOfNfJbvad1dXkaeOdpvsc2yuZVzfbfqybutwu
s5s8R92J3dvJb3tnO4HSMegtmt3nfZvYp8SZl0z45NfSK7onH1bNcfRFqnUKJr0Y7dVtq7prjEsK
0XVpEM6028mW20IHK41aPo3J6zs4ODhdcvPnvExFevNXpMOrxi/PlrTee7PLX6Pwa09uaNlKtHg9
dM3z5d7ReOu02nu0JzZMfblrv5R5uvrcdImZ26T1mYhxs1Os7RH93PZ7axuafNfLitvbaYU3yZYt
PXs9NwHhui1HBa5LVicsb81onrEuVqNNSuS8Y67dZ6xPZa59Il9uX41vEitImZme3q2Kxbxora0T
Md/ROSa4Ztkj7c9OafL5LuGYubmyX3iu/TfbdSfVnpvZLT/XZK233+Mbbva1xRXyiPk8pwbH4N6T
adq5a71n0tD1WDL4tPe6Xr0tDpz8YVnJHWEXYxbqlBedoef4tW0XraO09HdyztSZcbUz43C+ee9b
SVMaeOfqq7+jGckQ1Yz7+7v2RN/WXPXZPjci2+2yyJaVMuy+uSJlA2d+pNoVRbeDcSxyTE+TDDlt
pdRXLTynrHrDOyiyZeVFnY9TjvXJjres71tG8MnJ4Nqt4tp7T1jrV1nRL1x2cvABKAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAHJ49qfD09cNZ97JPX5PPw2uI6j6Vrsl/ux7tfk1mWr7dOM8iLdm
vfebREefRsWldw7SxqNbWbR7lPesrn3Vteo7dYjDpMGCvfbeXQ0uLlxRLRxROfUc34p6fCHYrXlr
EejqrjY8uzCYW7MZjdVKqK9VlaxCYrsnYExBMRMJRPZA8/xPHtmpP9W2xx76vhWOInvt/C7ike7N
vwzE9kcapGfhlevTaFbFo8RqJ5vy8/RoW09ek0msxHfp3dzNoLzp4zUmZpMbT8HJyYJi20X2n0lh
ZY1li/RaidBF4w2mK3jrHaFGp1lN+tptPp5IjBkid5mIp16TKu0abBPv33vPlM7z+iPdFNcWXU5I
tkrNce/b1W5db1nTaf3ax9q0fxDW1ebNk2phty1mOu09VOm8W19orEz23j1TwfSeERFuEYMddptW
d43dvBn21eKJ75KbW+cf/JcTgMxXTb3nbljz+TpcPmc2uyZO1KRtVtGVdi0bx07qJnllsRO6rNTe
N4XVamsy8mnvPwc3R2jPwe8TPbdlxXNOPSZfhWWpwO85OFzv57qrODkzeHntSe8Sn6Rv0a3EZ218
8nXekfr1a0ZLVnqx19dWb6demXybOO7lYMvNMdW9S/VVLo0us7tPHdtUtEwJiZU3jq2Jhham8CVG
PNODNTJXvWd3qcWSubFXJWd4tG8PK3pPd1OB6veLaa89Y61/u2xfxh5c/rsgNHOAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAANLimq+i6O0xPv392rdeZ4rq/pOqnlnelOkIt5F8Z7Wj27I2I6sb25YY
V1ImY3dbQ08LRc23vZp2j5OJG+XJWle9p2h6HHtbJXFT7OOIpX+7TxT31j5rycdTh+Dpz+XaG/sw
w18PHWseULN2trBE9UcrJKBhFU7JAQi0dEomegNDUYovM7x3jb5tO1ZvpbaTLtzRExWfWPJ08kbT
Ex5NXWYYyV5omYtHWJieyeDzuizfRs19Jn6TM7Ru1uMcJxZqTkw+5f4ebqa7SV1MR4tdrx2vEfy1
axqsNOTLjnLXytVXi3Xj8+nmsxTLM16d5npPyUzpekTtSK+U7vS6vQ/SYmK1vWPS1HOn2dvvvvE/
tDO5XlcO+LbfHSd/W3o6/BdDOXPTnj3Kz38rS6Wm4FNrRyRzTH3p6RH/AKvR8L4dXSzE3jmtHn5I
mbfqLV+m4dbLSsZInHjr3iI6zLpYaxS01rHuxHRHiT9mv6s67Vj1aqL6326MrWiYa+/Q54BxPaGe
XRZpj8MquB4+Xg8zPnB7SX30to379GxpK1xcHiKz5IS8xr8PLPixH2bftLTy05o6dHYyVjLhy0t1
izjZa3pMVv3iO/qz1G2L+NbSajbNyW7xLsY8kTDz+fJXFqKZN4iZnafi6WHL0iYlStI7OO+7axW2
crFl7dW9jvE9ULN+J3ZbdFGOy+AYWpEqN7afNXLj+1Wd23KrJVMvCzseh0+auow1yU7WhY4fCdV4
OadPefcvPuz6S7jol649Tl4AJVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAV581NPhtkvO0R+4NPi2
r8DB4dJ9+/7Q83Po2NTqLanNbLfvPaPSFDHV66sZ5ET0hRknyW2lTtMyouz0c8usx2n7s7vScKwx
zc1vu/y85p+maJh6Th+SOWeveXR4/wDLm8v+nX5mUWa9bbrInolmu5jdTNkxYFk2Isr3TuCzeGMz
+THdEyDDJO9Ja823rt2XWnya946pGvktDXta0ztWu/ybvLE9dkcoOf4GbJPWK1j49VmLh9JtE33v
Mevb9G7WsW8l1ccREISophiJ2jpDYpijbaOjOuOJ8ujOdqxsgVcsUjaETYvbaFFrgu5lVsm0yUtu
ryg43H5m+GIj1XcJzePoL4pnrWGtxmfchr8JvfHS1622if3QljzTTLes+qrNjrkiYtCzPMxnm095
YZJ6boS5teB49Tqscza97VtvWvlv8V/FOF34RrIxTM2xXjelp/eHoeA6XnzReY3ivX/0dfivDcfE
9HbDbaLx1pb0lOs+jO7K8Lis3cN+0NKcd9PmthzV5clJ2mF9J9GHHVL108dm1SznYr/Ft0tuhLb8
mNohFbMhLWy0mJ3rPXvDvcO1karBG8/WV6Wj+7kWrvDDBlvpdRGSnbzj1hpjX4z8mOx6UYYstc2O
uSk71tG7Ns5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ2jeXneJ62dVl5KT9VTt8Z9W9xbWclPo+O
fft9qfSHEU1pv48ftYST23ZTDC/p0YtlVuvVjMbM5+LCZjYGWGdrTPxiHY4ffaf3cjTxz1v6xMS6
Olty2iXVj/Dk8n+ndrkhnGRo1v8AFdW3RCrZ5uiYsqrboncSu508yjmZRYQt50TfowYTbYGVrKrT
uTZjvukQnYhMIGVY2ZxPVWyrHVCWzXpVXkt3TE7Va+W4K7X3jv1auTNy3jdba0RZpamfroQN7Hk3
6wr1GTaN2OOJiu6Mu98NvgDi8Wy74d/yZ8PiPAiO2zU4nb6qIn1bugjfFE/ASp1ke9u15mbbRDZ1
Mb823kx0Ontn1OOkedoJCvT8I03gaKsz9q/WW+isRWsVjtHRKyrhe0XCfpWL6Vgr9fjjrEfeh5fF
feH0V5Dj3DPoOo+k4a/U5J6xH3ZZ7z3228evytOk7NvFbo0cdols47bSybt7HbddHVqUs2aW3Qnq
xVeu8LILR3SlZw3V/R8nhXn6u0/pLuPMXjeHT4Zruf6jLPvR9mZ8/g1xrvpz+TH7HUAaMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAABRq9VXSYJyW79qx6yvmdo3l5viGs+maqYrO+OnSvx+KLeLZz2te1rZL2v
ed7WneZYWnZl5K72YV1xEyxmeqJljzIEWlVkszvbZp5soN3h2SJz3pP3odCnuWmPRxuERfJrZmtZ
mtY96fR28kbX3dXj/wAuTyf6bmK+9YX1s0cNtm3Sd4LFY2K23W1s16StiUJW7bp22RW3RluBuruz
mWEgrmCGWyNkoExKE1QlPmsqRDKeyBjaejWy2W3ttDUyz1QKslvehVqKTNosyyTvELabXptIJpaP
B39Ia2mz+JGpr51jdZefDx2hzuHZObNq58poJaGtjxJ2+LoaKP8ADRPo5+T3skx5OhpOmC0fBNQ0
5yTbn+bt8A0u9raiY6RHLVwY62mI6zMvaaHBGn0mPHt1iN5+aYVsACBXqMFNTgviyxvW0bSsAeE1
mkvw7V2w5Ote9besJx2er4rw2nEdNNekZa9aW9JeQjnxZLYskTW9Z2mJY7zz26fHrrdpbZsY7NGt
mxjvso1b9NmUwpx33XRO4K7VUTE1nmrvEx1bVo2VWiJE/XY4frY1WPlt0y17x6/FuPM0m+HJGTHO
1qu9pNVXVYt46Xj7VfRtnXXL5MfzexsALsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHM4jxOMFJphmJv529Dq
ZLfjDjPEIx450+K3v2+1MeUOHSOWFc3nJkmZnf4yujpVlqunOeFpV2nctLCZUXRM7MJtsWlRkv3Q
ky5NmpWt9RnrixVm17TtEQnJabXisRMzPSIew9n+CRoccajURvqLx5/chfOest642OGcIpoOG2w7
ROW9d72+LQvXevyejcPUU5M+SvpLeOataraw2a0dLbLqTtK1G3Es4lVWWUSoldFtmcXUbpidgXzK
GEW3TuCUSncnsDFMMLSms9EC6J6FpVzbZE5ALy0809ZbFr9GtfrEoFMzuuwz0Ueey3HbaBLDXe7i
tMOfwWnP9I+NZbuttvhs1uBRtXPb4SDm3iIvf57N7Dbl0VrS5+XrltEd+Z1Jx7cNms9N4TURRw3T
+PrcO3WszEvZOD7P6aYiMlvu16S7y1QAIAABxOPcLnUY/pWCv1tI96I+9DtgmXl68Biy7/NtUu3+
O8HnFa2s0tfd75KR5fFyMWTdhrPHVnX9R0cd21S3Rzsdm1iuqs256wrmGcT0RYSx5d047X02SMmO
esd49YRE9WcdSXhZ2O1p89NRji9J+cei1xMc3wXi+KZj1j1dTTaqmor06WjvWW+ddcu8XK8BZmAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAMMmWmKu952UZ9XFZmuP3revlDTtzWnmvO8q3XGmfHb9ZanV3yxtWeWn7y4es
vPNtDqZJ6Ts5mppvdl/XXRMyfGvSNlu/RVvtOzLfoipLT1VTKbSpvfogRkvtDVyZOhkyvQcA4Dzz
XV6yvTvTHMfvK+c9U3rkW+zvA/D21urr789cdZ8vi9KDb45rejl8Rry6iJ/FV1HP4vXbBTJEfYt1
+UpiHM295bXsqrO9l8QkZ0lZEqqLeyBZHZLGvZkhIndADKJ3TMoqWQMZ6pjsxll2jsCLSrmU2lFY
36gieyu0LJk3jbsga0wdqzK20QpyztQGprL/AFMrOE05NLkt6qdVWZxNrSe5o9vWBLiUjnzXn0vL
q555dHt8HOwV928/1z/LpzXxbYccRvzTB+jucOwxh0dI22mY3ltIrHLWIjyjZKyoAAAAACJiJjaY
3iXleM8InR5J1GniZw2n3oj7s/8Ao9Wi9a3rNbRE1mNpifNFnVs65XhcWTdt47bnFuF24dm8TFEz
p7T0/pn0a+HJux1OOrOux08d1ndqY7tillVkzExLOk7yd4YxGwluViJhE45raL0na0dtlWO0+bZr
1TKi+2zptZGTamT3b/tLacvJjiY3XaTWdYxZZ6/dtPm1zrv1z78fPcbwC7EAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhkyV
xUm152iAZWtFazNp2iGhm1Vss8uP3aevnKrNntqLdelI7VRHRnrX/HRjx/tZREVjZXeybW6KbWZt
pCZ6S08tN7Nmbb7zCrJtyoS5145bSx5mWafelr3tsKmS/o08uXyhlly7RPV2+AcBnPNdZrK+53pS
fP4ytnPVda4y4BwHxOXV6uvu96Unz+MvVxG0bQRG0bR2G0nHLb2gCUDX12LxtFmpHeazt82wT1gH
mMN4tWs+rcr2aEV8DU5sM/cvO3yb+O0csLUTSdrLphRE8tlkZI7Atr2ZMazDJVKTYSCawi7Ksq7z
1QERvLK3ZGPrKbyCrbdnMcsbeaa18/RhvvM7oGEwTG0JmYYTIML22a2e28xELM19oURPNO4lOem+
n3ZY5+prVnMc2GYU4/L4A0a15cNf6rz/AC6fC6+NxCPOuOu/5tHJTbHj+F5/l1+BYumXJMd9o3/d
MRXYASgAAAAAAABhlxUz4rY8lYtS0bTEvH8R4ffhmo6bzhtPu29Pg9mq1Gnx6rDbFmrzVsizq2df
zXkMWTeIbNL7tbXaHLwzUctvexWn3bmPL8WFnHVL326VZ91MfFVjvvVlz79kLrcf2m7j7bNHH3bl
J2SirLQoy4t1++7G0dBC/RanxI8PJPv18/WG241+alovSdrV6w6mDNGfFF4/OPSW2b1zeTPL1aAs
zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAVZ9RXBTe3WZ7R6iZOpzZq4ac1p+UermZMl89+a/byj0Ra9815ted59PQ32hlrXXRjH
DpCLX6ML5NlNsm/ZRqstfdXzbsZt06sLZNvNB1Za8RDWyZdo7q8udq5Mu/mIMt4md2lmy7JzZuWJ
dHgfBL8RvGo1MTXTxPSPx/8AstJ1XWpIs4BwSdbeNVqq/URPu0n73/s9hEREbRG0QUpWlYrWIisR
tER5JbSccur2gCUAAAAPM8Sry8Uyz67fwuxbzVPGsE49XGbvF42V4M0TEL33ERnktsxpk3sumK2j
admFdPFZ33VS2Mdui2J3UU6LYlFSsN2O5NkCyJ6K7T1TEsbAsxdpReerKkTFGMxvYEz0rsqtbbpC
b2VT1QEzuwtbaGUxspuJU3neWdKoiu8rq12gCI92YatLcublnzbEz1aOptyZqTuDHLfxN6R0+t5X
qdJhjBp6UiPLeXl9NSMnEKxHa1+bb8nrlvxUAAAAAAAAAAABTqtNj1eC2LLXeto/R43VabJw/VTh
ydY+7b1h7ho8V4dXiGlmvbJXrS3xRZ1fGv5rzeHN02bEW3cys3xZJx5ImtqztMS3MeTeGFjqlb2O
8btql3NpbZtYsnSBLeiWfdTjtutid+ghherHS5p0+f3vsX6T8Fkw181d4lMvEWdnHaGnw/UeNh5L
T7+PpPxbjdyWcvAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAo1Oprgr63ntAmTqdRqK4K9etp7Q5d7Wy2m953lNrWyWm953mVd77R0
Za1104xxlN9lV8qnJl2a9s3xUXX2ybsJyRDWtl3YWydEC+2VRkzeW6q+T4tbJm+KRdfK1cmWZnlr
vNp7RC/R6HU8SycmCk7ed57Q9ZwvgOn4fEXtHi5/O9o7fJaZ6z1uRyOEezVstq6jiEbV71xevzer
rWtKxWsRFY6REeSRrJxz22gCUAAAAAANbX6aNVpL0npMRvWfSXlKamsRMVvXm+EvZXjmpaPWHzfL
oNRjzXicfWJ8phfPxFejx72x7xMzK+sXiNoiXlq+Pi6fWV/VfTNqfLJl/WTg9Pji8R70LqvMV1Gq
j/zcv6yz+lanzzZP1lWpelTET6S81Gp1P/Gyf90s412rjtnyfqql6asREdWM9+jz9eJ6yP8Az7uh
odZqMt458tpB1JvEViI3/RhzRt13/R1MNaziiZiJn5K9ZNceKZiIiQcu/WekT+iYrWI3lzdTrs+8
8uW0fJzcur1Np/zsn6g79phVaIeetqNR/wAXJ/3SwnUaj/i5P+6UD0ldonum161h5mNRqP8Ai5P1
lNtRqJjacuT9Qd22WN5aGeZyZd/KHJy59RHbLf8AVq31Gp/4uT9ZEvS8Lr/vSs2npzRtL1z53wK+
oza/HW2XJNd99pmX0Rb8VAAAAAAAAAAAAAAcHj/C5yV+l4I9+v24jzj1cLFk8nu5jeNpeW41wmdL
knU6ev1Vp96sfdn/ANFdTrXG+eq1q5F2LLtbZoY8m8d11bbSydErsYsm+zZrO/zcnBm226uhiyRK
EtrvCrJDOJTeu8A1MWX6Lqq5N/dnpb5O5ExMbx2cPNTeJb/DM/iYPDtPvY+nzhri/jDy5/W6AuwA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAa2p1UYo5adbz+xbxMlvqJ1OqjDHLXree0ejmzNrWm953tPmTPWbWneZ7yoy5YhjrXXTjH8s75N
mtkyxt0VZM2/m175N1V03yTKubMLXVXybeYLLX2VXy7eam+b0bOg4VquJW+rry4/O9uyZOq3UjVm
9r25axMzPaIdvhns1kzbZddM0p5Y47z8/R2+HcF03Doi1a8+Xzvbv+TotJnjDXkt+K8ODHp8cY8N
IpSO0RCwF2YAAAAAAAAACvUZYw6fJkntWN3k8dfHz2vLucdz8mkjFE9bz1+UOZosX1UzPm0nqI/W
MYo9FlcPNklfFGeH/NshLGun+Cz6PtHZtVZWlRLS+jxPkRpIn7rdoupHTdA5s6SI+7H6Mfo+32Y2
+To3neSIiZ7A0IjPXpXLePlMotGW3272t85datKzHZjbTVnsDj+FG/2Y/RlGP4R+jo20u7H6N1Ql
o+H8I/REY957R+jpfReiK6eOYHLtj2tttH6KrY/6Y/R2c+kjeJiFVtLG24hxpw7/AHY/RRkw9O37
O99Hrt1YX0tfOBLjcGp4XF8c+u8fs9c4dcVcGemSI61nd3IneN1orQAAAAAAAAAAAAABFqxes1tE
TE9JiUgPKcX4RbRXnNgiZwWnrH4XPi28PdXpW9JraImsxtMS8pxXhF9DecuGJtgmf+1TWW2N/la1
L7N7T5e3Vy6W3hsYcvLbqzbO9jvvCzvDR0+XeO7crO6FmGSvRThy/RtVXJ92elvk2rRvDUzU7pl4
izsd2J3jeBpcNz+Lg5LT7+Pp+Xk3W7js5eAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADs0NTrN96Yp6edkW8Wzm6+LNTq4pvTHO9vOfRoWtt
1mes95YWvs1s2fZldddOczLPLn2ju0MmebT3YZc2/mpm3qqllN1drsbZIhr3yzvtHf4AsvlYYseb
V5Yx4KTe0+UQ6nDvZ3UazbJqd8OKeu33peq0eh0+hxcmnxxWPOfOfm0mP+steT/ji8N9mKY9suum
L37+HHaPm9DSlaVitKxWsdohI0Y22gAgAAAAAAAAAABXnyRhw3yT92Nwef4xm8bVzET0rPJH5d12
CvLhho3rN9RWs9Z23n5y6O21YhrVYbdGOCfrrLPJRpv863zVS6FS09SvZj3lVZZRdPSqmnSWdrIE
ebOkK4ldTsgW1WKqd1oMZhEVZyRAImOjGI6rJ7IiATNd46qL02bHkiaxaoNGY2n4ImPgtyV2n0Vo
Gvlx7x2beiyTk08RPevSVUxux00+Fn2n7N+n5rRFb4AAAAAAAAAAAAAAACLVres1tETWekxKQHlu
L8InR2nPp43wz3j8P/s5dLveWrFqzW0bxPeJeV4xwmdFec+CJnDM9Y/CrY1xv8qvTZ+WYdbDk5oh
5zHk283U0eo3jaZZ2N5XYjrCnLSJhOK+8d1kxvCqzSwZvousrb7k9LfJ3nB1OLeJdLhufx9LEWn3
6e7LXN9Ofy5/W4AuxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAETaKxMzO0Qi9646Ta07RDmZ9VbPbaOlI7Qi3i+c3TPUaqcu9adKfy0722ZXvFa9
XO1OrjrESxt66ZJmcjPUanlidmhkzTZVfLN5VWvsC2b7R3U3yqrZZtO1esz2h2+F+zWTUcuXXTNM
feKR3n5+iZLVbqRzNJo9TxHLyaekz62ntD1fDOA6fQbZL7Zc/wCKY6R8odLBgxabFGPDSKUjyiFj
SZkYa3aALKAAAAAAAAAAAAAADQ4pl2pTFH3p3n5Q33E12Tn1eSfKscsLZ+orS00eJqbW+Lfnu1tF
XaJnZsz3WpCfsyp00fWSvmPdVYOmSUDd8kR3InoQosy7JmUX7MdwZ17ro7KKT1XRPRAsrO0rYndr
79V1ZBaQiJ6JgCSIJASwrO07MpV2nqBlrv1a1o2bf2qtfLXaQUTO0sb05o3jv3ZXhjS20xEphW5h
yeJjjf7UdJWNKLziyRePsz0lux1SgAQAAAAAAAAAAAAAADG9K5KTS8Rato2mJZAPIcU4ZbQZuekT
OC3afT4NXFkmlntc2GmoxWx5K71tG0vHa/RX0GpmlutJ61t6wrY2xr8dXS5uesN+tt4ef0eaa223
2dnHk3juyreM81OaFGiy/RtZET9jJ7s/2bdutd2jqKeic3iNTsd8a2h1H0jTVtP2o6W+bZbOO+gA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABje9cdJt
adohGTLXFTmvO0fy52bJfU23t0pHaqLeL5xdK9Rnvqb+cUjtCi94xxvK3JetKuHrdZvaa1ljb10y
cnIs1Wt3naJc++TmVWvMz1YWybfMGdsm3eWek0mo4jm8PT0mfW3lDf4V7P5tdMZdRviwfvZ6/TaX
DpMMYsFIpWPTzXmf+steT8jn8L4Dp+HxF77Zc/4pjpHydYGjC3oAAAAAAAAAAAAAAAAADG9opS1p
7RG7zszN6WtPe0zLua+3Joss/wBOzhzG2OsL5+IrY09dsSyYRijbHEMvOChb7KjF0yS2LQ169Mso
S24noyrPVXWejNVKbTuw3T3REdQWU6LYlVvsyiUDPfqupPRr79VuOQX1lZEqoZxIMksd0gT2VT0l
bPZVbuCaW8i8bwr32WxbcGnkjaZa9p2ndv5qbw5+aNugLItF6TEtvTX5sMb969HMpfazc0d9stqe
vVZDdAQAAAAAAAAAAAAAAAADV1+iprtPOO/2u9bektoB4TJTJpNRbHkja1Z6uto8viVht+0HDvpG
H6Tjj6zHHvbecONw7Ltfkmeqmo6Ma69DXbbZTkr1mGWO3RneOaGbZRoM30fVzSelMnT83aef1FZ7
x3h1tBqfpGnjmn369LNc3sc3kzy9bQCzIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAa+q1dNNXr7157VhGp1Xh70x+9f9ocy283m1p5rz3mVbrjXHjt91lz
5c9+fJ1nyjyhdM8lZlOOIiqrUXikd+kMreunnI5XEdX4dZiZcG+XmtNl/F83PeeWWHDOGanieSKY
q+5H2rz2hMzWd1Iqx1yajJXHhrNrW6REeb1nCPZumn2z62Ivl7xTyr/6uhwzhGn4Zj2xxzZJ+1kn
vLoNJnjHW7TbbsAszAAAAAAAAAAAAAAAAAAAAaPFrbaSK/itEOXt0rDf4xb/ACa/GZacRvaF58Q2
IjasQnzPIhCU92tMbZGzHmotG10C6nZkwpPRmipIllEbMIZIE7solgmJBnCyk9VMM6z1BtVllEqK
z0WRILYlluriWcSDJVbusV27gwInaSWM9ECyZ3hqamnSWxFmOSOaqRx725bNnSZNs9J+OynVY+WZ
YYr7TE+nVaIr0Ais81Yn1hKAAAAAAAAAAAAAAAAAABExvG09peU4nov9n66L0j6q/WPg9Y1OJaON
ZpL0+9HWs/EWzeVz9PbmrEtnyc3h9reHy26TWdnSr2YX6657ijLXpLX0+onSamL/AHJ6W+Tbv2aW
ekTv16JzeI1Ox6KJiYiY7Slz+E6jxdN4dp3vj6fl5Og2clnKACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ2jeQRMxEbzO0Q08uqtkma4ulfO3r8lefUePMxWf
cjy9WvlzVxV6T1Z61/x0Y8f7Wc7Ur1lqVy+LqOWJ2hp6rXddon5rOF1tfmz5OkT0qzb8dWbxjp1c
biuuilJ5Z6r+IcQrixzEy8zl1E6rNt1tMztFY81sztU1eRucN4ffi2p5esRM72n0h7rS6XFo8FcO
CkVpX082nwXh3+z9FWLxHi36328vg6TZyW9ABAAAAAAAAAAAAAAAAAAAAAADj8Unm1tK/hqppHvw
y1k8/EMk+m0GOPeafiFpCZYwolnXspvHvLa9mF46gmnZmwozRUiUCBKYYsoBLOFbKAX0llEqqyzi
QXRLOJVRLOOwLIljZMEgrlhKyYYTAK5nZPN0RZjugUanHzVlz6xtLq361c+9eXItPpXX0dubTU+E
bL2lw2++O1fSW6m/VYAISAAAAAAAAAAAAAAAAAp1GbwcfTreelYEydcuMcRrM/L9nnlsV6wqpi2r
tv133mfWVkRyRtEdGFva7MzkYZNoamWN4bV4mYa9qztKIujhVppxGI8r1mJegeZpknBqKZY+7L0t
LRekWrO8TG8Ns/HJ5ZypAWZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAADS12fp4VJ6z9qVuq1HgUiI+3bpDl589cOKZmevqprXPTbx477rDJlrhr1nq4+s182tMRP
RqaziXiZJrWekNG17ZbxWJ336M5LXRbI3dLTJrs07RMY6fan1dHLrowY+X7MVjt6N3R6Kul0EbWm
s7bz8Z+LnabQX43r7Y53php/mXj+Dnv0f1JO1x/8ZxbUzj02O15mfLtD13AvZqnDds+pmMmo26el
XX0Wh0/D8EYtNjilY7+s/NstpOOTW7QBKgAAAAAAAAAAAAAAAAAAAAAADG88tLW9I3BwJtz6nNf1
vK/DHVqYJ3pzT5y3MPZeojOWMQylEKpTVjZnDCwkqzYQyRRICATCITAJZQxhMAshnEq4ZQC2srKq
qrIBZCWNZZgwswmFloVyCu0dFcx1WyrtCBhv5NTPHXds2U5o3hIz4ffbPt+KHUcTSW5c9Jme0u2v
VYAKpAAAAAAAAAAAAAAAAYZctcVOa35R6tLrltN795/YvknNqrfhpPLH92V5isd9mWq6fHjk6rn0
ZxG8KK5Jm/wbVZiYZtqrmkqL023bkxvCiY3lJHNyRG81mHS4Rn5sNsNp64+3yaWaNrzOzHBl+i6q
mT7s9J+S+ay8mex6EIneN47SNXKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAImYiJme0JafEs3h6fkidrZOn5eaLeJk7eOdm1Hi2vmtPTry/CHmOJcUvmvOPF1n09Pm
6HF9ZGm01qxO3R5vSY7XwzmzTy47zzTEd7en5Mfvt2/PURWdo3tvPrPlKymbktFqTtMTvHzbOLDG
f63JXbFX7FdnoODcDprZpq9TjiMMTvSn4vj8l5fxnrk91saPSa7i2hpOfbTVt5x1m0fLydzR6PDo
dPGHBXasd585n1lsRERG0dIF5OOe6tAEqgAAAAAAAAAAAAAAAAAAAAAAADX11+TRZrf0y2Gjxe22
gtH4piP3TPpXKwxtjhuYo9xq442iIblI2pC1RET2ILd9kxCqRjZmwlCSEohIJAQAAJZISDKGUd2M
MoBnVbVVCyAWVWeSuqyOwIlXZZKue4MJV2WWYT2QKbKL9YlfdRdIo35b7/Hd3KTzUrPrDh27uxpb
c2mpPwX/ABX9XAKpAAAAAAAAAAAAAACekTIp1eTwtJmv+GkyJn1oafeazbfpMzLR4jq/o8b823zX
6XNF8ERCvTcNpxLV5LauvPhx9Irv3lhztdtv8TtaWLicXrt03jzjzb2k1nid56ty3s/w+a7Uwzjn
1raejlarhmbhl/FpbxMO/fzj5p/ixSeXOvTtRfeI280ZI26tfDm3pWe63LaZx7qtGvniJ6tPLvOK
fOa9WzbJvTbza02jl3n5SSljscK1MajSxWZ96nSW88xw/VfQ9XMT9nfa3yemid43jtLeXsce88qQ
EqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADia3UTm1l4j7OP3Y/u
7Vp2rM+kPJW1PhYcmS0+9MzKm/jbwz31weMzbV8UppazPL9q0/BF4rk1GLDSNqxPWPhCnHmnNrtT
qPKteWPm6U6OdHaZvO+SaRNvhv12Ub/q3FhtrNVj0uKOt56z6R5y9zix1w4qY6RtWsREOJ7L6OKa
S2rvX6zNM7T6Vh3mmZyOfya7eACzIAAAAAAAAAAAAAAAAAAAAAAAAAAczjVvqMVfW/8AZ03I41bf
Lp6/OVs/UVrY47NyOzUxd4bUJpEbb3Z7IiOrKIVSjZhMLJYyhKIgmGUQSDESIEbJEgQmCITEAmGU
IiGUAyhZVhDOoM4Wx2VQtqBKuyyWEgqlhKyyuyBVaGtkbNmvk7A15l1eH2300R6TMORPSXT4ZO+O
8fFefEX63gEAAAAAAAAAAAAAAAq1WPxdLlp+Kkx+y1Fvsz8gjhaDauGK8sx07y3OE3m1tT6RaP4c
vU6yMNKUx73zT0ilY3l2eF6a+m0kRl/zbzz3+Ez5M8z26fJruW6wzYq5sV8d43raNpZjRzPPaTmx
5b6bJ9rHO3zb2WJ8GWPEscY9bgzxH2t62n19GWW0eHOzHU5XbjXZ1x8WTnz2iZ7S2M1IjH2+LX0V
KTqs8zO9ot0j8nUthi1J3UaOFMTfLFo6xMbS9BwHWTqdHOO8+/hnln5eTjYMFo1WTH5VnePzXcIm
2k4zlpPSmXy/hfF5eMfJns69OA2cgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAADG/2LfJ874rW845mubliY7bPoto5qzHrDz0+yePNF41OotaJ7RWNtpV1OtfHqZ715fhu
j8adNpcVfeyzE2/vLuanhOu1nEctIxTTFa/+ZPbZ3eHcF0vDbTfFE2yzG03t32+DokynXl9+leDB
TTYKYccbUpWIhYCzEAAAAAAAAAAAAAAAAAAAAAAAAAAAAcXjE/4zDH9M/wAu04XF5/3jj/0f3Wz9
RUYmzDWxS2I7FSyjuzY1ZKpRKEygEwiWUIkGIk2QJNhKQhMIhkCYZQxhlAMoZwwZwgWQshVCyATL
CWc9ldpBhZXLOVdpQK7NfJPRdaWvknoDVvPvOnwuel4+TlXn3nS4VPvXj4QtEV0wAAAAAAAAAAAA
AAAAAVV02CmTxK4qRf8AFFeq0AAAanEsfPpZmO9Ji0NDLfkwdOsulrumiyzHlVzJrz4Ovoy26vB8
cTBa9NffLtMY77Rv8Yegx5ImkKdJoY1HC81Y+3OSbVn0mGGkmbY45u6tnrrTOu2xGO0RxCd+nNVj
qKxTV1vH2pjaGtnyzXXYdo96ZmGXEMk15b7/AGZiVerWPTYckZcNbx5wzc7hGbnxXxzPWk7x8pdF
0S9jh1OXgAlUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAcPjEf4/FP9H93ccXjMf4vDP9Mx+62fqKrx+S+GvibEFSsqyYwlVK
ZYsmIMoRKYJQIPIEiQ2ATCUQygCGUIhMAyhnDCGUIFkLIV1ZxIMpVWWSrsCuyqyyyq09ECq8tfJK
66jJ2Bp5J6upwn7dv9Lk5J951uE/av8AJaIrqAAAAAAAAAAAAAAAAAAAAAAq1Mc2myxPnWf4cmtu
XT9fR0tffk0WSe28bfq5Wbamm3326MtunwfK6PCv/AxPraZ/dz9PO97/AOqf5dHhdZrw7Dv3mOb9
XOxRFM+avpe38mvkPHf/AFWlrKba7Tzt99ZxKkfR7euyNXMTrtPHfa0z+zPiM/UR8Zj+Wbdu8HpN
M2bfzrV13M4dO2pyR61dNvj44/J/oAWZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADj8bj63BPzdhyeNx0wz8ZWz9RWri7Nmv
VrYu0NmqaRZHZlDGGSiwxZSgCEkCBCQSCQBMJRCYgEsoYx3Z17AlMIhlCBnDOGEM4AlhZZKq4KrK
7LLKrIFN2vdfZReAaObu6/CO9vk5OePR1uEd7fJeIrqAIAAAAAAAAAAAAAAAAAAAAGtxCk5NFliI
3mI32+XVyNTyZOHTee946PQKPoeDffw4777eW/yVs60xv+ZxOnr4Okx1t05KRv8Ao41Z5q3yed5m
XY1szXRZ5jvFJ/hxItP0aOSN9q7yrtr4f2tHFM5+KT16Yq/vK/iGSbXw4vO14UcPx5MGfNbPG18m
1oj4THRsTw7VanPXVYpi3gzMcnrvCnG11JOupwuN8+a3pEQ6jT4divjxWnJExa09pbjbM5HHu90A
JUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAHM41H1GOf6nTc/jEf4Ws+lls/UX45uGekNujTwdm5RNIthKIZKLDFlsiQIShIC
EgCUJ7AmGTGO7IDzZQhMSDJMMYZQgZwzhhDOATuqssmVdgVWVWWyqtCBTeVF19lF+wNLNG7q8I+9
8nLyupwnt+S8RXUAQAAAAAAAAAAAAAAAAAAAAAAItWL1mto3iY2lyrcLyUxzix2ia2nvPeK+jrCL
OrTVnxpanhuPPemSs8l6RtE7dJj0ldpNP9GwRSZ3neZmV4cR/Vs4AJQAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANHi1d9H
M+kt5ra+vPoskfDdOfqK4mn7Q3aNHBPZu0W0RdDOGFWcKLCJZeTGQQlCQSgASBsCYZQxhlAJTAmA
TsmAgGcM4YQyjsgRLC3VnaVcgwsrt3Z2V2QK7tbJ1bN5a9waeWO7p8Knt8nNyebpcK8vkvlFdQBA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK9RXmwZI+ErEWjesx6wQeZwejeo0cccuW8
elpblJaaRGxVnCuss4ZrMvJEgCAASISCQIBlCYYpieoM0wx8k7gzIRueYM4Z79FcSy3QEsLJmWFp
BjaVVpZWlXMoGNmvkXXlr3kGtknu6XCf7OXkl1OEdl8orqgIAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAHmskcmtzV/rls0U62OXiWX4zErcc9GmkRfWVkSqqziWayxCPIANwBIhIJSxS
CRG6dwZwlhEs4BluMdzfqgZxLLdXuy3AmVdpZTKuZBjaVVpWWV2QlhZRdfZRcGpl7urwfrzfJy8r
rcH61vPyWitdMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHA4nHLxKZ9awnH2ZcY
jbW459aq8fZpfiI2IZwrqzhmsz3Ebm4JN0AMhCQSIASndiAziWUSriWcAyRujc80DM3RCfIETLCW
UsZEsJYSslXZAwlTddPZTkBp5e7r8Gj6rJPxhx8k9Xa4PG2C8/FaK10QAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAcfjcbZMFvnDWx9m5x2PqcNvS+zSxT7sNPxH62YZQwqzhRZO6UCB
KUAJTux3SDIRuAncQAmJZRLBMSgZ7iIAZRKd2DICUSlAljLCYWMLIFVukNfI2bNbIDTyT7zu8Ijb
Sz/qcG/2nf4T/wCE/wD2WnxWt4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHL9oL
+Hw2cm28VvEuPptfgyVj6yIn0no7/FtJfW8NzYMe3PaPd39d3iMug1WktNc2C9dvPbeP1aZ9xF+v
T471tHu2iflK2HkqWmvaZj5Surqc9Ps5bx+alTHqYHm68S1Vf/NmfnC2vGNTXvyT84Ql6A3cSvHM
sfaxVn5Ssrxyv3sM/lKB1xza8bwT3pePyWV4tpZ+/MfOEjfGrXiGlt2zV/PotrqcN/s5aT/+wLRj
FontMSlAlKEgndO6IAZQljDIEgeQljLCzOVdkCu/SGrkbF56NPNeKxMzMRHxENe0+89DwuNtHHzl
5PJr8NcnLW3Pbf7r1nCZm2gpae8zMrz4i/W6AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAETETG0xukB4HVaeMHEtRi26RedvkyjBSfX9W77QYvC4xz7dMlYlrU7M929dWJLFc6aPK0q
7YLxPS0S22FlP6q38Zac0yR92s/KVc3tHfFf8tpbcsLRvB/dR/8ALLVnU0r9uL1+dZI1mnmdvGpv
6TOy6ym+Oto2tWJ+cJ/tW+KLK5KW+zes/KU7tG+h01p64qx8Y6NXNo6Y+uPJlp8rLf0rfG7MXtHa
0x8pZxqs9e2a8f8A7Oj7HaTHn0+f6RWM23LETfr6vRW4PoL99NT8ui7F4+vEdXXtnt+fVbXjGsr/
AOZE/OsPS29nuH27YrV+VpeV9pdPXhOtw49NG9Mld55+vXcTPd42I47qo7xSfyWV9oM8d8VJ/VxM
d8l46xWF9cV7en6o/qLfxp2I9ob+eCv/AHMo9op89P8A/wBORGmyT5R+qfo2X8P7n9Q/jTsx7RR5
6ef+4/8AuHftg/8A6cWcOSO9J/WEbWr3pY7Efzp2Lcfv5YK/9zWy8d1E/ZpSv5Oba1/+Hb9lc+LP
bFt87I7E/wAabWbiurvEx4nL/pjZzc2bJkn372t85ZXx55/BX85lucC0vPxnTxlnnjm32mOiZqUu
LJ2p4TwnVavNWaYbRTfre0bQ99pcH0bT0xb78vmtiIiNojaErMwAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAHnfarF7umzRHaZrLjYrdIen9ocPi8JyTt1xzF4eUw23rCm3R4r6bMy
wt6kdTaWLdjswmNoZontsCm0K5XWjopnuDC0dGpqG5bs08/daKV672MjbSaif6oh6Z5f2LtvptRX
0tEvUN3Jfo8f7cYve0eX4zV7B5z20xc/C8eSPuZIRficfXlcPaG7ino08HWIbePpLF2NuiyOyrHK
3fZFSwuovHVfaVF4QK5YWTM9UT0EKry6Ps1Tn4zjn8NZn9nOtLseydObiWW34cf918fWfk+PYANn
KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq1WKM+ly4p+/WYeBxTNd6zG0xO0
vobw3FcP0bi2em20Tbmj5Srr418V9sa2Z7qKyzi07MXUylhaU7yjqhLCeiq3ddaFNxFYW7NLNG8t
zya+WO6Va9J7FW66mvwidnrXiPY3Ny8RyUn71Jj9Ht3RPjk19HK9pMHj8D1ER3rHN+jqqtTjjNps
uOe16zAifXzfTz7kNyndpYazS9qT0mszDdoxrsi6m8LazMq6zDOsq1ZEyrt1WWlXaUCqyq0rbKbi
Fdp6PReyFd8uqv8ACsfy83aXrPZHHto89/xX2/SP/dpj6y8vx6EBq5gAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAB5n2q03LfDqqx39y39npmlxbS/TOG5se29tuavzgWzeV4mtui2
O3RRSY2hdVhqO2MvI36iu9lUsrSrvDHn6spnmSiq5jooyV6tq1VV69RC32byTh43h8otMx+r6I+Z
aK/g8TwX7bXh9Mid4iW+fjl8n1ICWb57xLBOm4zqse20Tbmj8+qKdnS9q8PhcTw5tumSm0/OHMxz
0Za+uzx3sX1t0Zxurr1ZxvspWiZYWZbsbT0QK7KLrZVZJFaqt5vbezNOTg9J/FaZeJns93wCvLwb
T/GJn92uGHldIBowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADuAPA67F9H4l
qMW20VvO3yRWW97T4fC4rXJHSMtI/WGhVlue3b473K2KzMML4+62tujG9pnozXaOSOVFMnVbmq1t
trJRW5E7wwvUxTvCyY6CHOt7moxz6Wh9PxTzYaT61h8x1MbZK/OH0zTf+Fxf6I/htj45vL9WgLMn
mvbPFvocGWO9L7fq85p5maw9d7VYvE4JkmPu2if3eW0+PasdFNOnxfF1Y2hlykRsmY+LJ0MZjZXa
eq2eyi8oQTO0KLdZWzPRjWu6VaqtHR73g0bcI0sf0Q8Nkq93wqNuFaWP+XDTDDytwBowAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAef9q8HNpcGaI60vtPyl56k9Iew49j8ThGe
PwxFv0l4zH2U26fDfTYiyJljvsjf4sm6vJ1hrXjq2MkqLdZEVbgbMx0auGdmzNt6iHN1Ub5af6of
TdPG2nxx6Vj+HzaaTm1+nx/iyVj930ysbViPRrj45vL9SAuyc7j1efguqj+jd4/T33rD3HEcPj8O
1GP8WOY/Z4TTT7sKadHhbcsZnaCJ3TPZk6VdrKbTutmP0U2nqgrGOsr8deiuI2X09EqKM1dt3uuG
f/jdN/06/wAPE546S9rwud+Gaaf+XH8NMMPK2wGjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAABrcRp4nDtRWPPHP8PCYusPoWSvNjtX1iYfPuWaXtX8MzCuvjfw32siu8ptXoxi
0wy5t4YulReqmazu2skbquURWFInddM7VYRGyL291KFnCcfj8e0le/Lbmn8n0N4b2Ur4nHLWmPsY
5e5a5+OXyXugBZmiY3iY9Xz7NjnTa3Ph/BeYj5PoTxftFg8Hjk2iOmWkW/Psrr418V5WrWd2faFc
V2jdnEMXWxntupmN7NiYU27iWML6dVMVnddjgVqMsdHr+CW5uE6f4Rt+7yuSsTDv+zWXn0WTHP3L
/tK+GHl+O0A1c4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Dn93W56/wDM
t/L3z59qp24jn+OS38lnpr4r7ZxHQ2TEstt3PXUrt27K57rr1VT0BjKnJPRbMqMs7QlV2fYvHvrd
VknyrEfu9m8f7FZI8fVU85iJewbT45NfQBKo817W4eulzxHaZrL0rje09ItwqbfhtBVs3leai8RD
KLw1sduesL606dWFdsZT1jdhNeq6K9DlhCVUU6s4jZnt1YzAhnM71dH2bycmszY/K1d/0c6OzY4R
fwuK4p8rTstn6z8k7HrwGzkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHz3
Vxvr80/8y38voTwGpj/F5/8AqT/JfjTx/WVeyY6FPspc9dZPVXaOq2WEwIUTVRmjo2rNfLHRI3vZ
DJycXtX8dZh7t879nsnhcbwz23tt+r6I2nxyb+gCVBzuPY/E4PqI9K7ui19fTxNBnp60n+Aj5/pJ
3jZu1aOnnltMNussdfXbm+l3ZM9URHREdZVXTuT1Nk7boQiOkJw28PU47/htEp5eivJPLMTCZ9Vv
x7mJ3iJ9UqNHk8XR4b+tIXuhxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD
weqjbWZ4/wCZP8vePCaz/wDIaiP+Zb+UX408f0r9lOxWOifJhXWjfyYWllPRXYQxnrCrJHRd3YZI
6A1NJecHEsN/S0T+76bE7xE+r5dk93LW3pL6ZpMni6PDf8VIn9m2fjm8s9rgFmQxvHNS0esbMiew
PnHLyai9fS0w2aNfUTtrs3+uf5bGPqy068fF227KtSsdFlKqNGMV6myyY6sbdIQI8tlOWOi6Jhhk
j3RD0vA8nicMx9etZmHRcT2Zyb6XNT8N9/2dt0T449T2AJVAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAHhdfG3E9TH9cvdPEcXjk4zqI/q3L8aeP6xr2TsxpLOekMK6mFo6qpXSrm
OqBixvHSVmzC4OfqK7S9/wAByeLwbTW9K7fo8Fqo6Paeyl+fglI/Da0NcMPK7QC7AAB8313TiOf/
AKk/y2MHWrX4jG3E9R/1Lfyv0/aFNOrHxuU7LI7MMayGTVlHWUXhNe6Z6wIUsb9d1m20q7dkDpez
N9tRqKT5xEvRvKez9+Xis1/FSYerb5+OTyf6AFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAB43j9eXjN/jWJ/Z7J5L2mry8Upb8VIF8f6aGOey2eynHvOy7bowrrYSxZSwQJ2YXZ
92N4BoanrEvVexmTm4blr+HJ/aHltRHSXofYm/1Wrp5RaJaYY+X49WA0c4AD51xONuKan/qW/lbp
+0MOLRtxbU/9SU4J7KadWPjep2WQrr2WRPRk1TvsndXMpiRCb9FNu0rbTuqvKBscCjfi9PhWZeue
V9n434rafTHL1TfPxy+T/QAszAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHmv
avHtfTZfnV6VxPajHzcNrf8ABeJFs/XnMcr4no18c+6vr2YadkY2YM57sEDLyY37Mo7MMnYGlqO0
vQ+xNfqNVb1tEfs87qZ2rL0/sVX/AHdnt65P7Q0wx8vx6UBo5wAHz/jUbcX1PT78qtO2vaCnJxjP
8Zif2amnnspp04+OjWejKJ6MKdmcMmyJn4m5ZHzEVPMwtJv0VZLbQDqezcb8RzT6Y/7vUPM+ytZt
n1OTyiIh6Ztn45N/6AFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABocbxeLw
nUR5xXm/Rvq8+OMuDJjntaswEeBxT0bNZ6NatZpNqz3rO0rqsdO3PxlaWEMpY+aqWXkryT0ZT2V3
7A0dVPuy9f7G124NM/iyT/Z4zWT7sw957MYfB4Fp4/FE2/WWmGHldcBowAAeM9qKcvFeb8VIly9P
0nq7ntbTbVYL+tJj93CwT76unR4/jo0nozhhTsy3Y1sWljM9Ce7HyQIm3RRlttVbaWrnt0Sh6n2U
x8vD8mSfv3/h3XN4Bi8Lg2nj8Uc36y6TeOPXugCUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAPD8RxeBxXUU26Tbmj8+quro+02Lw+I4ssdslNvzhzazvDPbq8d7GW7Dfqz2VzG
0s2qd+iu/Zn5Ksk9BVztX1mI8930zh2LwOHabH+HHWP2fNYp4+vwYvxXiP3fUqxtWIjyjZtj45/L
faQFmQADzftfj3w6fJ6WmHmsP23rvaqnNwqLfhvEvIYZ+sV038bo0noy36MK9oZQxrdMyrlnMbMZ
QKrS1M07zEestq/RRjr4utwY/wAV4j91p9V18fQdJj8LR4ccfdpEfsuREbREJbuMAAAAAAAAAAAA
BAJAAAAEAJEAJQAJQAJEAJQAJQAJEACUJAQlAJEAJQAJQJAAAEAJEAJBAAAJAABAJEJAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwvanDzaPFmjvjv8A
tLztJ3h7HjGHx+FainnFeaPnHV4vFbeIU038VbHeGF+kso7Mb9mTdhKnLK3dRm7SIrHhGPxeP6Sv
9cT/AHfSnz72Zx+J7Q45/BWZ/Z9BbZ+OXyfQBZQABzeP4/E4NqI9Ii36S8Ng/wAx9C4jTxOH6ivr
jn+Hz3B/mQi/GvjdCnWNlsdI2V07LIlg6USrt2ZzZXMoFV+zPhGLxeOaavpbm/RVltEN72Yx+Jxm
b7dKUmf7L5+s9/HtRA2cqRACRACRACRACUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQCQQCRACRACRCQBCQBCQB
ACRACRACRACRACL1i9LVntMbPATTwdRkxT3pea/u+gPE8Xx+DxrPHlaYt+qNfGvjvtXXsi0dOrKk
dEXjZg6VMtbP2bMtXUdpEV0/Y2nNxbNf8OP+727xvsXH+N1U/wBEfy9k3nxyb+gCVQAGOWvNivX1
rMPnGGOXNNfOJ2fSZ6w+dZKeHxDPX8N7R+6L8a+L63KdoZ7q6zvEMpnowdKJ6ywmWUyqvIKM0vQ+
x+D6rU55+9aKx+TzWa36vbezmDwODYenW+95/Nphj5L6dQBo5wAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAEiAAAEoA
AAAAAAAAAAAAAEAkEAkRuAkQbgkQAkQAkQAkQAl5T2nx8nEMOT8dNv0l6pwfarHvpcGWPu32/WCr
YvK4mOem6b9mGKd4Z3idmFdka0y1c892zfpMtLPaNpEV6D2Kj/Eauf6YeweQ9ieuTVz8K/3evbT4
5NfQBKoAA8FxCvJxrUx/XMvevD8Zry8fz/Haf2RfjTx/6RSOnRMyypHu9kXjowrqVSrvPRnZVl6V
kK0775MsUjvadn0nT4ow6bFijtSsVfPuFYvpPGtNTy54mfy6vorXDm8l9pEC7JIgBIgBIgBIgBIg
BIgBIhIAgBIhIAgBIgBIIBIAAhIAhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAA
AAAAAAAAABAJQkAEAAAAAAAAAAjc3BIjdG4Mkbo5kcwMjdhzHMDPc3V8xzAs3N1fMjmBZubq+Y5g
Wbm6vmOYFm5ur5jmBZubq+Y5gWbm6vmOYFm5ur5jmBZubq+Y5gWbm6vmTzAz3N2HMnmBlu5ftFTx
OEZJ/DMW/d0t2rxKni8N1FPWkiZ9eS08e7Cy8dGGn6UhZaJljXZGnmc3UT3dPP2cnUT78xCIV6j2
H/8A9c/6f7vXPI+w8bU1U+vL/d63du5NfUiDcVSIAS8b7RV5eOb/AIqRL2TyXtNX/e2KfXH/AHlF
+NPH/pr4+2xcxx0hFpY11K7R16KM32ZWz3UaidqSgrc9kcPicWyZJjfw6T+727y3sXh2xarN+K0V
h6lvPjj3e0ASqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJQAAAAAkQAkQAkAAAAAAAAAAAAAAA
EgAAAAAAAAAAAAAAAAAAAAAgAAABKDcAN0bgkY8xzAyRux5kcwM9zdXNkTcFm6OZXzMeYFvMibKu
ZHMC2bo51U2RuC2bom6rc3BZzom6sBZzI52ADPnOdggFnMc6skFnMc6rc3BbznOp3RzAv50c6nml
HMC/nOf4qOY5wX85zqOc5wbHOc7X5znBsc6edr85zg2ec52vzpi4NjmY5bROG+/bllVzsNTk5dLl
n0pP8BHmMHWNmzt0aum8obm08vVjfrtnxztR0mXHzTvaZdjVRMTLkZo6yiFen9iZ2pqY/wBP93rN
3kPY+/LfPX1rE/u9XzN3HfqzdO6vmTuIZ7m7Hc3Bnu8t7TR/vHBP9E/y9Pu837SV31umn+if5Rfi
/j/01MMb1hjkrtKzBG0bMsmOZY11tOYamr6Und0LUc7XT7u3rJPqL8er9lcPhcFpbzyWm39v7O00
+FYvA4Zpsc94xxu227jv1IAgAAAAAAAAABKAAAASgASgBIgBIgBIgBIhIAAAAAAAAAAAAAAAAAAC
UACUJAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAg3AEbomQZbo3YzLGbAz3RNlc3YzcFs2YzdVN2
M2Bdzom6nmNwW86JurTAMuY3REJ2BB1ZRVMVBhsbSsiqeUFXLucq3lTygp5TlXcpygp5TlXcpygp
5TlXcqOUFXKjlXcrGYBXysdlswiYBVMdUTCyY6sZBWxlnMMZgGLGZZSwkDdHMiWO4MuY5mEyjcFn
N1OdVzHMC3nTzqeY5gX85zqOZPMC+Lqdbk20eb/RKOZr8QybaK/XvtH7iZ9aGlp2luzT3fg19NHS
OjbmPcYX67XH1XSZ9XIzRvMuzrK7zLkZYmYnciunb9lZ5dTk+OP+71cXeP8AZnJ/ip2nf3J/l6iL
/Fu5L9bMWZczXi6YuIbEWTzKIuyiwLt3nuO25uI4a/hx7/rLuczg8TicvFLbfdpEK6+NPH/phhjo
stLGkctUWnoxrrU3j1cnWTzZq1jzl1clo5Zcu8c+txR63iP3Tn6pv4+g4o5cVI9IiGe7CJ2iE7t3
GyN2O6dwSINwSISAlAAlACRAAlAAlACRACRCQAAAAAAAAAASgASISAAAAAAAAAAAAACQAAAAAAAA
AAAAAASAAAAAAAAAAAAAAAAIAAAQCAJljuljsCJlhMs9mOwMJYys5TkBVsjZdyHICrZPKt5E8oK4
qmKrOVOwMIqyirPY2Bjyp2ZbAI2NmSARsbMgEbI2ZAMdjZICNkbMkSCNmOzJEgx2YyzljMAwlhKy
WEwCuWErJhhMArlhLOWEgxljMpljIImWMyTKJA3N0IBO5vux3NwZbnMx3NwZczT4jf3MdPW27a3a
fJOq1XNP2KdIRfi+J2trSYfcjeF+Wm1OicVeWIiN9kai8xjY12ORqultnI1Ecsujq79XP1FovWYI
rTgeq+j8QrWZ+3Mx+r2UXeC0WG2Ti2kiN5mL807eUREvbzbaejefHJv62Iv8WUXa0WTFhVtRdlF2
rz9WUXBtc7jR9dqc2T1ttHyhvZMvJitb0jdq6XHNcNenWVN3028U99WRj6Kb02be3Tq18/SN2Lpc
3UdN9nOmZrqKX/DaJ/d0svvTLRzV3jomK6+Pd1vvWJj0ZczT0mXxNJht60hfFnQ4qu3N1cWTEgs3
Tur5k7gz3N2O5uDM3Y7m4MtxBuCQASIASIASAAAAAAACRCQAAAAAAAAEoSAAAAAAAAAAAlAAlCQA
AAAAAAAAAAASAAAAAAAAAAAAIASgAAAEJAQJQCNkbMgGOyOVnsAw5TlZ7GwMOVPKy2NgY7GzIBGx
skA2AAAAAAAAAAQkBAEghEskAxYzDPZGwK5hjMLJhjMAqmGEwumrCagomFcw2JqqtUFEsLLrV82F
o7gqljKyYYTGwMZRKUSCAQAboJnaN5Bjkneu0d5W4ccViIiOzHFWbTzNumP1Zarr8eeRMbxDW1Mx
NO67NbkhzNVnmInqzaOZrL93JyZeV0M1++7S02jvxDWxhxx033tPpC8Z6rrezWjmZyazJG2/u03h
2vFibTHoqvamiwVwY+nLGzV0+SZ1Mx8G0/45tOhzJ5lXMc3UVXRdlF1HP+iYsDPLPPy49/tz1+Te
pSIr0ho6ak5Ms5J8o2q6NImOrHV7XX488ypzTtHXo0s9t6zG7c1G1qz6ubeZiZ3UatXJG3yauSO7
cvMTEx5tPLb3prPRMVr0HB8vicNxf0+7+kt+LOJwTJyY/Bnz3tH93X36N58cWvq6LSyiyndMSlC7
mZcymLJiwLosmJVRLKLAtiU7q4lMSCzc3YxJuDMRuAlKAEgAAAlAkAAAAAABKAEgAAAAAJAAAAAA
AAAAAAAEgAAAAAAAAAAAAAkAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAhIAAACAAAASgAAAAAAEAAAA
hGzJAImGMwzQDDZjNVuyNgUTVhNGxysZqDVmiu1G5NN2M4waM0+DCaN2cbGcQNGaMZq3JxMJxA1J
qx2bU4kU09slorWNwa20z02RXHbJbl26QvtFovbHWkxEdJt5y2MOHlr2U1W3jx+1hiw8vSO63lmI
XRTaEWmtY6snRHO1VpmJ+DjavpSZl2s8b7y4HFcnh0n0gha5ebJN55KRM2mdoiPN6fh+kpwXh0Wy
RHj5Otp/s5Ps1p62y31+em9aTMYt/OfVfxTiPjZ52naI7fBrI5t66xz5+a1rW7yx0eSL6iZjtEOX
qNbSletom3lENjh2fbHzbbWt3iVozruc+5ztWubf4M4ybpQ2Oboyrva0Vjza8WdDR4OkXt3n9ldX
kaePP9VtYqctYhdvt5oivTeCZ2YOxXk6ubqMfV0b9mrljfqlFcq88k7z2U5axeItDa1OPessuC8P
ya7XRWYnwqdbT/ZMilvIu4dpslNdixXja8Y5tt85djZdbDWnGOesRtXFtuw6T27No5Kx2OrKYQlC
ExKJgBnEpiyvdlEgsizKLKollFgWxLKJVRLKJBbEp3VxLKJBnuMWQJEbpBIAAAJAAAABIAAAAAAA
lAJAAAAAAAAAAAAAASAAAAAAAAAAAAAJAAAABAJABAlAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAA
AAABAJQAAAAgAABAAI2EoBGyJhkgGPKxmqxAKpownHC+YRMdN5BrTj67R3bOn01o7p01Iv71u89o
b9a7LfBTfS1vWI2jf12VfQPSW8KX2mas+NC2iv6xMNfJpMnLtEbuuxtMRCtzF55NR5rPps1N/ctP
y6uHreE6nXZ4pak48X3rT06fB7fNeI33cbX6mI32R/MWu7XF116aDSRhxbRERs8f499bkyZeeKae
kzE2mdon81/tfxDLGOunwbzlzbx08oaHBvZHJlx48mrvaa94pu04y617576rNGLRRM0397JEd/lu
9Dw/S3x4qxffo6mm4NjwUiKY4iI9Ib1dHFY6QIaNabbrYrLfrpJtaK1rMzPZb/s+05IpP59OyLeJ
k7eNfRaOc1ue32I7fGXYpi5Y77M8OGMeOKxHSFsU3Y29deZMzirl6dlVvhLatCjJHeYQv1rXnps1
8k9/VsW6qLVmZIi1rzitlvFKRvaZ2h6TSaenC9FFY+3brM+sqeG8Prp4+kZ+lvuxPkr1mqm95nfp
DXM459676a2q1dsV7XietvNno78+CJn1cjX6mOeIm0bR33dfRU5NJjidt9t5afjG/V6JZ7I2QMNh
nyo2BhsMuVG3wAhMSbbQRAMolnE+iuGUSCyJZRKuGUSCyJZK4llEgyZMYTuCUsYSCQASISAAAlCQ
AAAAAAEoASCASAAAAAAAAAAAAlACRACQAAAAAAAAAEgCEoASCAAAAAAAAAAAAAAAAAAAAAAABAAA
AAAAAAAISAIAAAAAAQAAACASgAAAQJAQAAhIDHZhln3do7z0WS18mWsajHjmes7pg3dNi5aRMNqO
yvDHTpPRaigHZhN4hHRlaVN59JY3zRENLUavaO+yq0iNVlitJ6vNcR1MVi0zO0era1/Ea0rPvbz5
PM5MWp45qvo2GZrhmfrsnpHpHzTCseEcM/2vrr8Q1Eb4qzy44nziPN63HpYiIiI7LNHoqabBTFii
IpSNohuVxrKtWMEejPwY9G1FFmHB4mWJn7MdfnIM9JpIx15to5pbUaas/a6rqViI7MxPxqX0UT1r
O3wVzpbR2hviP5i03Y5s6a879FNtHljydhExCv8AMTPJXBnRZbz0iG5ptFjwe/l96zctMVamTJtE
yTMibu1VrdTzRMR0j0ed4lr64MVpm0RERvMz5NvX62uOJ69XhOKX1HH9bHDtFvNYnfJeOy0Z2ojX
6jjnEq6fRUmccTvN/J9H0eKcOnx45neaxEbubwHgOHg+milI3vP2resu3Wu0JQmITsmISDHZHKz2
JgFc1RMLJhGwK9iIZ7MZgEdgmAEwyiWCdwWRLKJVxKYsC2JTuriWUSDNlEsIlMAySx3SCRCQSIAS
AAACRACQAAAAAAASIASAAAAAAAAAAAAAAACRACRACQASIAAAAAAAAAAAAAAAAAAAAAAAAQCUAAAA
AAAAAAIAAAAAAAAQAAAAAACBICBICAAEJAQJQCJcLjuS2ny6fPG/LWdpd1o8T0X07SXx/e7wCdJx
Wa0jmneHQpxPDMdZmJfNtZm49weZrh0/j4o7VtSZ2+Uw0/8A7o49k92vBLc/ntFohFW9PqGXimOI
6Tu1L8T3eCx6r2t1O3JwvHjifO99v7t/Bwf2l1PXU6rS6eJ8qUm8x+so5TsekzcSjbvs4mt4rzW5
K2mbT0itesy2cHsvbvqtbmyz5xERWP2jd1tJwrTaONsOKtZ8585+cnDrzmn4Rq+IZObUROHD32n7
Vv8A0ej0uhxaXFGPFSK1j0bkY4jyZRVZVXFGUVWbGwKsk8mObekNrSW3pWf1a2aYjHbm7bNnQ1id
PW0TvuDdhJEbQABMsLW2R0ZTMQrvfbz2YWzVhpanUxEd0dWkW5c8R5uXxDX1w4pnfr5Q19XxKuOJ
2neXltVqtVxbV/RdJ715+1bypANfiOu1HENV9C0MTfNeesx2rD1PAeBYuE6aKx72W3W9/WVnBuB4
eF4dqRzZbdb5J72l160WVK02ZxCYhOwI23TsnY2BGxsnYBjsiYZsZBjMMZZSgGEolMsQDdG6NwZ7
piVe6YkFsSziVMWZRILolMSriWUSCyJTuwhMSDMRCQSI3SAlACRCQAAEoAEoASAAAAAAAAACUACR
ACQAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAABAAAAAAAAAAAAACBKAAAAAAAQ
JQAAAhICEbJAYTWJ7wx8KvpC0BV4ceieWGewDHlNmWwCNjZICNhIDmcZredBecdpiY69FXCOLW+i
UiZidukulmxxlx2paN4mNng+K4+I8Hy2yaTfl37TXetoCPfRxfp1qi3F48ofKMvtvxak8s6LDv61
rZji9rPaLUf5PC+bfttS0q8q3p9W/wBrRMdpUZuKdN99nzvFqPbTVz7nD8OKs+do2/mW3h4D7Xaq
ZnPrtNpqz35aRaYOHY9Zk4pNt9rR+rl6zi+OnS+WN57Rv1lXp/YrNaYtruL6zNPnGO3hxP6O5w/2
f0HDuun09Yv55Le9afznqcOvO4tBreMTHu30unnva0bWt8on+70nDuE4OHYYx4Kbesz3tPrMuhGO
IjpDOKrK9YVpsyiGUQnYGOyUgI2SlAIEmwMWMs9kTAMJYzDOYRMArmGErZhhMArlHmzmGMwDE3Ts
bAbs4swj5pgFkSziVcM4BZEsolXDKAZwyhjCYBkACQhIAAAAAAAJAAAAAAAAAAAAAAAAAAAShIAA
AAAAAAJAAAAAAAAAAAAAABAJEAAAAAAAAAAAAAAAIEoBKAAAAAAAAAAAAAAABAlAAAAAAAIAAAAA
BAkBAkBAkBAlACEgMZjdjbFW8bWrEx8YWANb6Fp+bfwab+vLDKMFK9qxH5L0bAr8OPRPKz2AY7J2
SbAjYZAI2E7AIEgIEgIEgMdkSy2NgY7MdlmyNoBXsxmFuyNgVTVjNV3KjlBRNTlXTVHKCrlIqt5T
lBhEMohlFerLlBjEMohMVTEARDKCITsAk2AEgAAAkAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAD/
2Q==`;

// src/warmup.ts
async function warmupBitmap(instance) {
  const b64toBlob = (base64, type = "application/octet-stream") => fetch(`data:${type};base64,${base64}`).then((res2) => res2.blob());
  let blob;
  let res;
  switch (instance.config.warmup) {
    case "face":
      blob = await b64toBlob(face3);
      break;
    case "body":
    case "full":
      blob = await b64toBlob(body3);
      break;
    default:
      blob = null;
  }
  if (blob) {
    const bitmap = await createImageBitmap(blob);
    res = await instance.detect(bitmap, instance.config);
    bitmap.close();
  }
  return res;
}
async function warmupCanvas(instance) {
  return new Promise((resolve) => {
    let src;
    switch (instance.config.warmup) {
      case "face":
        src = "data:image/jpeg;base64," + face3;
        break;
      case "full":
      case "body":
        src = "data:image/jpeg;base64," + body3;
        break;
      default:
        src = null;
    }
    let img;
    if (typeof Image !== "undefined")
      img = new Image();
    else if (env.Image)
      img = new env.Image();
    else
      return;
    img.onload = async () => {
      const canvas3 = canvas(img.naturalWidth, img.naturalHeight);
      if (!canvas3) {
        log("Warmup: Canvas not found");
        resolve(void 0);
      } else {
        const ctx = canvas3.getContext("2d");
        if (ctx)
          ctx.drawImage(img, 0, 0);
        const tensor = await instance.image(canvas3);
        const res = await instance.detect(tensor.tensor, instance.config);
        resolve(res);
      }
    };
    if (src)
      img.src = src;
    else
      resolve(void 0);
  });
}
async function warmupNode(instance) {
  const atob2 = (str) => Buffer.from(str, "base64");
  let img;
  if (instance.config.warmup === "face")
    img = atob2(face3);
  else
    img = atob2(body3);
  let res;
  if ("node" in tfjs_esm_exports) {
    const data = (void 0).decodeJpeg(img);
    const expanded = data.expandDims(0);
    instance.tf.dispose(data);
    res = await instance.detect(expanded, instance.config);
    instance.tf.dispose(expanded);
  } else {
    if (instance.config.debug)
      log("Warmup tfjs-node not loaded");
  }
  return res;
}
async function runInference(instance) {
  let res;
  if (typeof createImageBitmap === "function")
    res = await warmupBitmap(instance);
  else if (typeof Image !== "undefined" || env.Canvas !== void 0)
    res = await warmupCanvas(instance);
  else
    res = await warmupNode(instance);
  return res;
}
async function runCompile(allModels) {
  const backendType = tpe();
  const webGLBackend = WA();
  if (backendType !== "webgl" && backendType !== "humangl" || (!webGLBackend || !webGLBackend.checkCompileCompletion)) {
    return;
  }
  X().set("ENGINE_COMPILE_ONLY", true);
  const numTensorsStart = Ss().state.numTensors;
  const compiledModels = [];
  for (const [modelName, model18] of Object.entries(allModels).filter(([key, val]) => key !== null && val !== null)) {
    const shape = model18.inputs && model18.inputs[0] && model18.inputs[0].shape ? [...model18.inputs[0].shape] : [1, 64, 64, 3];
    const dtype = model18.inputs && model18.inputs[0] && model18.inputs[0].dtype ? model18.inputs[0].dtype : "float32";
    for (let dim = 0; dim < shape.length; dim++) {
      if (shape[dim] === -1)
        shape[dim] = dim === 0 ? 1 : 64;
    }
    const tensor = $t(shape, dtype);
    try {
      const res = model18.execute(tensor);
      compiledModels.push(modelName);
      if (Array.isArray(res))
        res.forEach((t) => Re(t));
      else
        Re(res);
    } catch (e) {
      log("compile fail model:", modelName);
    }
    Re(tensor);
  }
  const kernels = await webGLBackend.checkCompileCompletionAsync();
  webGLBackend.getUniformLocations();
  log("compile pass models:", compiledModels);
  log("compile pass kernels:", kernels.length);
  X().set("ENGINE_COMPILE_ONLY", false);
  const numTensorsEnd = Ss().state.numTensors;
  if (numTensorsEnd - numTensorsStart > 0)
    log("tensor leak:", numTensorsEnd - numTensorsStart);
}
async function warmup(instance, userConfig) {
  const t02 = now();
  instance.state = "warmup";
  if (userConfig)
    instance.config = mergeDeep(instance.config, userConfig);
  if (!instance.config.warmup || instance.config.warmup.length === 0 || instance.config.warmup === "none") {
    return { face: [], body: [], hand: [], gesture: [], object: [], performance: instance.performance, timestamp: now(), persons: [], error: null };
  }
  return new Promise(async (resolve) => {
    await runCompile(instance.models);
    const res = await runInference(instance);
    const t12 = now();
    if (instance.config.debug)
      log("warmup", instance.config.warmup, Math.round(t12 - t02), "ms");
    instance.emit("warmup");
    resolve(res);
  });
}

// src/human.ts
var _numTensors, _analyzeMemoryLeaks, _checkSanity, _sanity;
var Human = class {
  constructor(userConfig) {
    __publicField(this, "version");
    __publicField(this, "config");
    __publicField(this, "result");
    __publicField(this, "state");
    __publicField(this, "process");
    __publicField(this, "tf");
    __publicField(this, "env");
    __publicField(this, "draw");
    __publicField(this, "models");
    __publicField(this, "events");
    __publicField(this, "faceTriangulation");
    __publicField(this, "faceUVMap");
    __publicField(this, "performance");
    __privateAdd(this, _numTensors, void 0);
    __privateAdd(this, _analyzeMemoryLeaks, void 0);
    __privateAdd(this, _checkSanity, void 0);
    __publicField(this, "gl");
    __publicField(this, "analyze", (...msg) => {
      if (!__privateGet(this, _analyzeMemoryLeaks))
        return;
      const currentTensors = this.tf.engine().state.numTensors;
      const previousTensors = __privateGet(this, _numTensors);
      __privateSet(this, _numTensors, currentTensors);
      const leaked = currentTensors - previousTensors;
      if (leaked !== 0)
        log(...msg, leaked);
    });
    __privateAdd(this, _sanity, (input) => {
      if (!__privateGet(this, _checkSanity))
        return null;
      if (!input)
        return "input is not defined";
      if (this.env.node && !(input instanceof et))
        return "input must be a tensor";
      try {
        this.tf.getBackend();
      } catch (e) {
        return "backend not loaded";
      }
      return null;
    });
    __publicField(this, "similarity", similarity);
    __publicField(this, "distance", distance);
    __publicField(this, "match", match2);
    __publicField(this, "emit", (event) => {
      var _a2;
      if (this.events && this.events.dispatchEvent)
        (_a2 = this.events) == null ? void 0 : _a2.dispatchEvent(new Event(event));
    });
    this.env = env;
    config.wasmPath = rhe["tfjs-core"].includes("-") ? "https://vladmandic.github.io/tfjs/dist/" : `https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@${qde}/dist/`;
    config.modelBasePath = env.browser ? "../models/" : "file://models/";
    config.backend = env.browser ? "humangl" : "tensorflow";
    this.version = version;
    Object.defineProperty(this, "version", { value: version });
    this.config = JSON.parse(JSON.stringify(config));
    Object.seal(this.config);
    this.config.cacheModels = typeof indexedDB !== "undefined";
    if (userConfig)
      this.config = mergeDeep(this.config, userConfig);
    setModelLoadOptions(this.config);
    this.tf = tfjs_esm_exports;
    this.state = "idle";
    __privateSet(this, _numTensors, 0);
    __privateSet(this, _analyzeMemoryLeaks, false);
    __privateSet(this, _checkSanity, false);
    this.performance = {};
    this.events = typeof EventTarget !== "undefined" ? new EventTarget() : void 0;
    this.models = new Models();
    this.draw = {
      options: options3,
      canvas: (input, output) => canvas2(input, output),
      face: (output, result, options4) => face(output, result, options4),
      body: (output, result, options4) => body(output, result, options4),
      hand: (output, result, options4) => hand(output, result, options4),
      gesture: (output, result, options4) => gesture(output, result, options4),
      object: (output, result, options4) => object(output, result, options4),
      person: (output, result, options4) => person(output, result, options4),
      all: (output, result, options4) => all(output, result, options4)
    };
    this.result = { face: [], body: [], hand: [], gesture: [], object: [], performance: {}, timestamp: 0, persons: [], error: null };
    this.process = { tensor: null, canvas: null };
    this.faceTriangulation = triangulation;
    this.faceUVMap = uvmap;
    this.gl = config2;
    this.emit("create");
  }
  reset() {
    const currentBackend = this.config.backend;
    this.config = JSON.parse(JSON.stringify(config));
    this.config.backend = currentBackend;
  }
  validate(userConfig) {
    return validate(config, userConfig || this.config);
  }
  now() {
    return now();
  }
  image(input, getTensor = true) {
    return process2(input, this.config, getTensor);
  }
  async segmentation(input, background) {
    return process5(input, background, this.config);
  }
  enhance(input) {
    return enhance(input);
  }
  compare(firstImageTensor, secondImageTensor) {
    return compare(this.config, firstImageTensor, secondImageTensor);
  }
  async init() {
    await check(this, true);
    await this.tf.ready();
  }
  async load(userConfig) {
    this.state = "load";
    const timeStamp = now();
    const count2 = Object.values(this.models).filter((model18) => model18).length;
    if (userConfig)
      this.config = mergeDeep(this.config, userConfig);
    if (this.env.initial) {
      if (this.config.debug)
        log(`version: ${this.version}`);
      if (this.config.debug)
        log(`tfjs version: ${this.tf.version["tfjs-core"]}`);
      if (!await check(this))
        log("error: backend check failed");
      await epe();
      if (this.env.browser) {
        if (this.config.debug)
          log("configuration:", this.config);
        if (this.config.debug)
          log("environment:", this.env);
        if (this.config.debug)
          log("tf flags:", this.tf.ENV["flags"]);
      }
    }
    await load19(this);
    if (this.env.initial && this.config.debug)
      log("tf engine state:", this.tf.engine().state.numBytes, "bytes", this.tf.engine().state.numTensors, "tensors");
    this.env.initial = false;
    const loaded = Object.values(this.models).filter((model18) => model18).length;
    if (loaded !== count2) {
      await validate2(this);
      this.emit("load");
    }
    const current = Math.trunc(now() - timeStamp);
    if (current > (this.performance.loadModels || 0))
      this.performance.loadModels = this.env.perfadd ? (this.performance.loadModels || 0) + current : current;
  }
  next(result = this.result) {
    return calc2(result, this.config);
  }
  async warmup(userConfig) {
    const t02 = now();
    const res = await warmup(this, userConfig);
    const t12 = now();
    this.performance.warmup = Math.trunc(t12 - t02);
    return res;
  }
  async profile(input, userConfig) {
    const profile = await this.tf.profile(() => this.detect(input, userConfig));
    const kernels = {};
    for (const kernel of profile.kernels) {
      if (kernels[kernel.name])
        kernels[kernel.name] += kernel.kernelTimeMs;
      else
        kernels[kernel.name] = kernel.kernelTimeMs;
    }
    const kernelArr = [];
    Object.entries(kernels).forEach((key) => kernelArr.push({ name: key[0], ms: key[1] }));
    kernelArr.sort((a, b) => b.ms - a.ms);
    kernelArr.length = 20;
    const res = {};
    for (const kernel of kernelArr)
      res[kernel.name] = kernel.ms;
    return res;
  }
  async detect(input, userConfig) {
    this.state = "detect";
    return new Promise(async (resolve) => {
      var _a2, _b2, _c, _d2, _e, _f, _g2, _h, _i, _j2, _k2, _l2, _m2, _n2, _o2, _p2, _q2, _r2, _s2, _t2, _u2, _v2;
      this.state = "config";
      let timeStamp;
      this.config = mergeDeep(this.config, userConfig);
      this.state = "check";
      const error = __privateGet(this, _sanity).call(this, input);
      if (error) {
        log(error, input);
        this.emit("error");
        resolve({ face: [], body: [], hand: [], gesture: [], object: [], performance: this.performance, timestamp: now(), persons: [], error });
      }
      const timeStart = now();
      await check(this);
      await this.load();
      timeStamp = now();
      this.state = "image";
      const img = await process2(input, this.config);
      this.process = img;
      this.performance.inputProcess = this.env.perfadd ? (this.performance.inputProcess || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      this.analyze("Get Image:");
      if (!img.tensor) {
        if (this.config.debug)
          log("could not convert input to tensor");
        this.emit("error");
        resolve({ face: [], body: [], hand: [], gesture: [], object: [], performance: this.performance, timestamp: now(), persons: [], error: "could not convert input to tensor" });
        return;
      }
      this.emit("image");
      timeStamp = now();
      this.config.skipAllowed = await skip(this.config, img.tensor);
      if (!this.performance.totalFrames)
        this.performance.totalFrames = 0;
      if (!this.performance.cachedFrames)
        this.performance.cachedFrames = 0;
      this.performance.totalFrames++;
      if (this.config.skipAllowed)
        this.performance.cachedFrames++;
      this.performance.cacheCheck = this.env.perfadd ? (this.performance.cacheCheck || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      this.analyze("Check Changed:");
      let faceRes = [];
      let bodyRes = [];
      let handRes = [];
      let objectRes = [];
      this.state = "detect:face";
      if (this.config.async) {
        faceRes = this.config.face.enabled ? detectFace(this, img.tensor) : [];
        if (this.performance.face)
          delete this.performance.face;
      } else {
        timeStamp = now();
        faceRes = this.config.face.enabled ? await detectFace(this, img.tensor) : [];
        this.performance.face = this.env.perfadd ? (this.performance.face || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      if (this.config.async && (this.config.body.maxDetected === -1 || this.config.hand.maxDetected === -1))
        faceRes = await faceRes;
      this.analyze("Start Body:");
      this.state = "detect:body";
      const bodyConfig = this.config.body.maxDetected === -1 ? mergeDeep(this.config, { body: { maxDetected: this.config.face.enabled ? 1 * faceRes.length : 1 } }) : this.config;
      if (this.config.async) {
        if ((_a2 = this.config.body.modelPath) == null ? void 0 : _a2.includes("posenet"))
          bodyRes = this.config.body.enabled ? predict17(img.tensor, bodyConfig) : [];
        else if ((_b2 = this.config.body.modelPath) == null ? void 0 : _b2.includes("blazepose"))
          bodyRes = this.config.body.enabled ? predict5(img.tensor, bodyConfig) : [];
        else if ((_c = this.config.body.modelPath) == null ? void 0 : _c.includes("efficientpose"))
          bodyRes = this.config.body.enabled ? predict7(img.tensor, bodyConfig) : [];
        else if ((_d2 = this.config.body.modelPath) == null ? void 0 : _d2.includes("movenet"))
          bodyRes = this.config.body.enabled ? predict15(img.tensor, bodyConfig) : [];
        if (this.performance.body)
          delete this.performance.body;
      } else {
        timeStamp = now();
        if ((_e = this.config.body.modelPath) == null ? void 0 : _e.includes("posenet"))
          bodyRes = this.config.body.enabled ? await predict17(img.tensor, bodyConfig) : [];
        else if ((_f = this.config.body.modelPath) == null ? void 0 : _f.includes("blazepose"))
          bodyRes = this.config.body.enabled ? await predict5(img.tensor, bodyConfig) : [];
        else if ((_g2 = this.config.body.modelPath) == null ? void 0 : _g2.includes("efficientpose"))
          bodyRes = this.config.body.enabled ? await predict7(img.tensor, bodyConfig) : [];
        else if ((_h = this.config.body.modelPath) == null ? void 0 : _h.includes("movenet"))
          bodyRes = this.config.body.enabled ? await predict15(img.tensor, bodyConfig) : [];
        this.performance.body = this.env.perfadd ? (this.performance.body || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      this.analyze("End Body:");
      this.analyze("Start Hand:");
      this.state = "detect:hand";
      const handConfig = this.config.hand.maxDetected === -1 ? mergeDeep(this.config, { hand: { maxDetected: this.config.face.enabled ? 2 * faceRes.length : 1 } }) : this.config;
      if (this.config.async) {
        if ((_j2 = (_i = this.config.hand.detector) == null ? void 0 : _i.modelPath) == null ? void 0 : _j2.includes("handdetect"))
          handRes = this.config.hand.enabled ? predict12(img.tensor, handConfig) : [];
        else if ((_l2 = (_k2 = this.config.hand.detector) == null ? void 0 : _k2.modelPath) == null ? void 0 : _l2.includes("handtrack"))
          handRes = this.config.hand.enabled ? predict13(img.tensor, handConfig) : [];
        if (this.performance.hand)
          delete this.performance.hand;
      } else {
        timeStamp = now();
        if ((_n2 = (_m2 = this.config.hand.detector) == null ? void 0 : _m2.modelPath) == null ? void 0 : _n2.includes("handdetect"))
          handRes = this.config.hand.enabled ? await predict12(img.tensor, handConfig) : [];
        else if ((_p2 = (_o2 = this.config.hand.detector) == null ? void 0 : _o2.modelPath) == null ? void 0 : _p2.includes("handtrack"))
          handRes = this.config.hand.enabled ? await predict13(img.tensor, handConfig) : [];
        this.performance.hand = this.env.perfadd ? (this.performance.hand || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      this.analyze("End Hand:");
      this.analyze("Start Object:");
      this.state = "detect:object";
      if (this.config.async) {
        if ((_q2 = this.config.object.modelPath) == null ? void 0 : _q2.includes("nanodet"))
          objectRes = this.config.object.enabled ? predict16(img.tensor, this.config) : [];
        else if ((_r2 = this.config.object.modelPath) == null ? void 0 : _r2.includes("centernet"))
          objectRes = this.config.object.enabled ? predict6(img.tensor, this.config) : [];
        if (this.performance.object)
          delete this.performance.object;
      } else {
        timeStamp = now();
        if ((_s2 = this.config.object.modelPath) == null ? void 0 : _s2.includes("nanodet"))
          objectRes = this.config.object.enabled ? await predict16(img.tensor, this.config) : [];
        else if ((_t2 = this.config.object.modelPath) == null ? void 0 : _t2.includes("centernet"))
          objectRes = this.config.object.enabled ? await predict6(img.tensor, this.config) : [];
        this.performance.object = this.env.perfadd ? (this.performance.object || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      this.analyze("End Object:");
      this.state = "detect:await";
      if (this.config.async)
        [faceRes, bodyRes, handRes, objectRes] = await Promise.all([faceRes, bodyRes, handRes, objectRes]);
      this.state = "detect:gesture";
      let gestureRes = [];
      if (this.config.gesture.enabled) {
        timeStamp = now();
        gestureRes = [...face2(faceRes), ...body2(bodyRes), ...hand2(handRes), ...iris(faceRes)];
        if (!this.config.async)
          this.performance.gesture = this.env.perfadd ? (this.performance.gesture || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
        else if (this.performance.gesture)
          delete this.performance.gesture;
      }
      this.performance.total = this.env.perfadd ? (this.performance.total || 0) + Math.trunc(now() - timeStart) : Math.trunc(now() - timeStart);
      const shape = ((_v2 = (_u2 = this.process) == null ? void 0 : _u2.tensor) == null ? void 0 : _v2.shape) || [];
      this.result = {
        face: faceRes,
        body: bodyRes,
        hand: handRes,
        gesture: gestureRes,
        object: objectRes,
        performance: this.performance,
        canvas: this.process.canvas,
        timestamp: Date.now(),
        error: null,
        get persons() {
          return join2(faceRes, bodyRes, handRes, gestureRes, shape);
        }
      };
      Re(img.tensor);
      this.emit("detect");
      this.state = "idle";
      resolve(this.result);
    });
  }
};
_numTensors = new WeakMap();
_analyzeMemoryLeaks = new WeakMap();
_checkSanity = new WeakMap();
_sanity = new WeakMap();
export {
  Human,
  Human as default,
  config as defaults,
  draw_exports as draw,
  env,
  match_exports as match,
  models_exports as models
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use backend file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Human main module
 * @default Human Library
 * @summary <https://github.com/vladmandic/human>
 * @author <https://github.com/vladmandic>
 * @copyright <https://github.com/vladmandic>
 * @license MIT
 */
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
/** @license See the LICENSE file. */
//# sourceMappingURL=human.esm.js.map
