/*
  Human
  homepage: <https://github.com/vladmandic/human>
  author: <https://github.com/vladmandic>'
*/

var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __require = typeof require !== "undefined" ? require : (x) => {
  throw new Error('Dynamic require of "' + x + '" is not supported');
};
var __export = (target, all2) => {
  __markAsModule(target);
  for (var name in all2)
    __defProp(target, name, { get: all2[name], enumerable: true });
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// src/helpers.ts
function join(folder, file) {
  const separator = folder.endsWith("/") ? "" : "/";
  const skipJoin = file.startsWith(".") || file.startsWith("/") || file.startsWith("http:") || file.startsWith("https:") || file.startsWith("file:");
  const path = skipJoin ? `${file}` : `${folder}${separator}${file}`;
  if (!path.toLocaleLowerCase().includes(".json"))
    throw new Error(`Human: ModelPath Error: ${path} Expecting JSON file`);
  return path;
}
function log(...msg) {
  const dt = new Date();
  const ts2 = `${dt.getHours().toString().padStart(2, "0")}:${dt.getMinutes().toString().padStart(2, "0")}:${dt.getSeconds().toString().padStart(2, "0")}.${dt.getMilliseconds().toString().padStart(3, "0")}`;
  if (msg)
    console.log(ts2, "Human:", ...msg);
}
var now = () => {
  if (typeof performance !== "undefined")
    return performance.now();
  return parseInt((Number(process.hrtime.bigint()) / 1e3 / 1e3).toString());
};
function mergeDeep(...objects) {
  const isObject = (obj) => obj && typeof obj === "object";
  return objects.reduce((prev, obj) => {
    Object.keys(obj || {}).forEach((key) => {
      const pVal = prev[key];
      const oVal = obj[key];
      if (Array.isArray(pVal) && Array.isArray(oVal))
        prev[key] = pVal.concat(...oVal);
      else if (isObject(pVal) && isObject(oVal))
        prev[key] = mergeDeep(pVal, oVal);
      else
        prev[key] = oVal;
    });
    return prev;
  }, {});
}

// src/config.ts
var config = {
  backend: "webgl",
  modelBasePath: "../models/",
  wasmPath: "",
  debug: true,
  async: true,
  warmup: "full",
  cacheSensitivity: 0.75,
  skipFrame: false,
  filter: {
    enabled: true,
    width: 0,
    height: 0,
    flip: false,
    return: true,
    brightness: 0,
    contrast: 0,
    sharpness: 0,
    blur: 0,
    saturation: 0,
    hue: 0,
    negative: false,
    sepia: false,
    vintage: false,
    kodachrome: false,
    technicolor: false,
    polaroid: false,
    pixelate: 0
  },
  gesture: {
    enabled: true
  },
  face: {
    enabled: true,
    detector: {
      modelPath: "blazeface.json",
      rotation: true,
      maxDetected: 15,
      skipFrames: 15,
      minConfidence: 0.2,
      iouThreshold: 0.1,
      return: false
    },
    mesh: {
      enabled: true,
      modelPath: "facemesh.json"
    },
    iris: {
      enabled: true,
      modelPath: "iris.json"
    },
    description: {
      enabled: true,
      modelPath: "faceres.json",
      skipFrames: 11,
      minConfidence: 0.1
    },
    emotion: {
      enabled: true,
      minConfidence: 0.1,
      skipFrames: 17,
      modelPath: "emotion.json"
    }
  },
  body: {
    enabled: true,
    modelPath: "movenet-lightning.json",
    maxDetected: 1,
    minConfidence: 0.2,
    skipFrames: 1
  },
  hand: {
    enabled: true,
    rotation: true,
    skipFrames: 18,
    minConfidence: 0.8,
    iouThreshold: 0.2,
    maxDetected: 1,
    landmarks: true,
    detector: {
      modelPath: "handdetect.json"
    },
    skeleton: {
      modelPath: "handskeleton.json"
    }
  },
  object: {
    enabled: false,
    modelPath: "mb3-centernet.json",
    minConfidence: 0.2,
    iouThreshold: 0.4,
    maxDetected: 10,
    skipFrames: 19
  },
  segmentation: {
    enabled: false,
    modelPath: "selfie.json"
  }
};

// src/sysinfo.ts
function info() {
  let platform = "";
  let agent = "";
  if (typeof navigator !== "undefined") {
    const raw = navigator.userAgent.match(/\(([^()]+)\)/g);
    if (raw && raw[0]) {
      const platformMatch = raw[0].match(/\(([^()]+)\)/g);
      platform = platformMatch && platformMatch[0] ? platformMatch[0].replace(/\(|\)/g, "") : "";
      agent = navigator.userAgent.replace(raw[0], "");
      if (platform[1])
        agent = agent.replace(raw[1], "");
      agent = agent.replace(/  /g, " ");
    }
  } else if (typeof process !== "undefined") {
    platform = `${process.platform} ${process.arch}`;
    agent = `NodeJS ${process.version}`;
  }
  return { platform, agent };
}

// dist/tfjs.esm.js
var tfjs_esm_exports = {};
__export(tfjs_esm_exports, {
  Abs: () => Vs,
  Acos: () => Ni,
  Acosh: () => Ti,
  AdadeltaOptimizer: () => xp,
  AdagradOptimizer: () => yp,
  AdamOptimizer: () => bp,
  AdamaxOptimizer: () => wp,
  Add: () => Wn,
  AddN: () => So,
  All: () => Ei,
  Any: () => Ai,
  ArgMax: () => Io,
  ArgMin: () => Xa,
  Asin: () => $i,
  Asinh: () => Di,
  Atan: () => Ri,
  Atan2: () => Oi,
  Atanh: () => Fi,
  AvgPool: () => No,
  AvgPool3D: () => Ya,
  AvgPool3DGrad: () => xc,
  AvgPoolGrad: () => gc,
  BackendWasm: () => My,
  BatchMatMul: () => To,
  BatchToSpaceND: () => Ws,
  Bincount: () => yc,
  BroadcastArgs: () => Zh,
  BroadcastTo: () => XI,
  Callback: () => mv,
  CallbackList: () => C_,
  Cast: () => Qn,
  Ceil: () => Eo,
  ClipByValue: () => eo,
  Complex: () => bc,
  ComplexAbs: () => Za,
  Concat: () => js,
  Conv2D: () => Ao,
  Conv2DBackpropFilter: () => wc,
  Conv2DBackpropInput: () => $o,
  Conv3D: () => Ja,
  Conv3DBackpropFilterV2: () => kc,
  Conv3DBackpropInputV2: () => _c,
  Cos: () => Do,
  Cosh: () => Ro,
  CropAndResize: () => Pi,
  Cumsum: () => Fo,
  CustomCallback: () => I_,
  DataStorage: () => Ka,
  DenseBincount: () => vc,
  DepthToSpace: () => Mi,
  DepthwiseConv2dNative: () => Oo,
  DepthwiseConv2dNativeBackpropFilter: () => Cc,
  DepthwiseConv2dNativeBackpropInput: () => Sc,
  Diag: () => Ic,
  Dilation2D: () => Qa,
  Dilation2DBackpropFilter: () => Dm,
  Dilation2DBackpropInput: () => $m,
  ENV: () => gw,
  EarlyStopping: () => fv,
  Einsum: () => Nc,
  Elu: () => Mo,
  EluGrad: () => Tc,
  Environment: () => Yh,
  Equal: () => zi,
  Erf: () => Li,
  Exp: () => Lo,
  ExpandDims: () => Gs,
  Expm1: () => Bi,
  FFT: () => Ec,
  Fill: () => el,
  FlipLeftRight: () => Vi,
  Floor: () => zo,
  FloorDiv: () => Bo,
  FromPixels: () => Rm,
  FusedBatchNorm: () => Vo,
  FusedConv2D: () => ni,
  FusedDepthwiseConv2D: () => oi,
  GPGPUContext: () => hy,
  GatherNd: () => Wi,
  GatherV2: () => Us,
  GraphModel: () => jv,
  Greater: () => ji,
  GreaterEqual: () => Wo,
  History: () => S_,
  IFFT: () => Ac,
  Identity: () => to,
  Imag: () => $c,
  InputSpec: () => _t,
  IsFinite: () => Gi,
  IsInf: () => Ui,
  IsNan: () => Hi,
  KernelBackend: () => Ls,
  LRN: () => tl,
  LRNGrad: () => Rc,
  LayerVariable: () => Yg,
  LayersModel: () => Xn,
  LeakyRelu: () => jo,
  Less: () => qi,
  LessEqual: () => Ki,
  LinSpace: () => Dc,
  Log: () => Go,
  Log1p: () => Xi,
  LogSoftmax: () => YI,
  LogicalAnd: () => Yi,
  LogicalNot: () => jl,
  LogicalOr: () => Gl,
  MathBackendCPU: () => Pu,
  MathBackendWebGL: () => Hu,
  Max: () => Uo,
  MaxPool: () => qo,
  MaxPool3D: () => rl,
  MaxPool3DGrad: () => Oc,
  MaxPoolGrad: () => Fc,
  MaxPoolWithArgmax: () => Pc,
  Maximum: () => Ho,
  Mean: () => Ko,
  Min: () => Xo,
  Minimum: () => Yo,
  MirrorPad: () => Zo,
  Mod: () => Zi,
  MomentumOptimizer: () => kp,
  Multinomial: () => Mc,
  Multiply: () => Jo,
  Neg: () => Hs,
  NonMaxSuppressionV3: () => Qi,
  NonMaxSuppressionV4: () => ea,
  NonMaxSuppressionV5: () => ta,
  NotEqual: () => Ji,
  OP_SCOPE_SUFFIX: () => S1,
  OneHot: () => Qo,
  OnesLike: () => qs,
  Optimizer: () => Wr,
  Pack: () => Ks,
  PadV2: () => es,
  Pool: () => fse,
  Pow: () => ts,
  Prelu: () => rs,
  Prod: () => ra,
  RMSPropOptimizer: () => _p,
  RNN: () => On,
  Range: () => nl,
  Rank: () => Iw,
  Real: () => Lc,
  RealDiv: () => Po,
  Reciprocal: () => na,
  Reduction: () => qt,
  Relu: () => ns,
  Relu6: () => ss,
  Reshape: () => Xs,
  ResizeBilinear: () => os,
  ResizeBilinearGrad: () => Bc,
  ResizeNearestNeighbor: () => ol,
  ResizeNearestNeighborGrad: () => zc,
  Reverse: () => is,
  RotateWithOffset: () => ma,
  Round: () => as,
  Rsqrt: () => ls,
  SGDOptimizer: () => dl,
  ScatterNd: () => oa,
  Select: () => Ys,
  Selu: () => sa,
  Sequential: () => $a,
  Sigmoid: () => cs,
  Sign: () => aa,
  Sin: () => us,
  Sinh: () => ia,
  Slice: () => Zs,
  Softmax: () => fs,
  Softplus: () => la,
  SpaceToBatchND: () => Js,
  SparseFillEmptyRows: () => Vc,
  SparseReshape: () => Wc,
  SparseSegmentMean: () => jc,
  SparseSegmentSum: () => Gc,
  SparseToDense: () => Uc,
  SplitV: () => Qs,
  Sqrt: () => ps,
  Square: () => sl,
  SquaredDifference: () => ds,
  Step: () => ro,
  StridedSlice: () => ua,
  StringNGrams: () => Hc,
  StringSplit: () => qc,
  StringToHashBucketFast: () => Kc,
  Sub: () => hs,
  Sum: () => ms,
  SymbolicTensor: () => on,
  Tan: () => gs,
  Tanh: () => xs,
  Tensor: () => je,
  TensorBuffer: () => ct,
  Tile: () => jn,
  TopK: () => ca,
  Transform: () => pa,
  Transpose: () => ys,
  Unique: () => Xc,
  Unpack: () => ei,
  UnsortedSegmentSum: () => il,
  Variable: () => ul,
  ZerosLike: () => ti,
  _FusedMatMul: () => ri,
  abs: () => Tt,
  acos: () => tk,
  acosh: () => rk,
  add: () => Y,
  addN: () => nk,
  all: () => Gm,
  any: () => lp,
  argMax: () => ba,
  argMin: () => ok,
  asin: () => sk,
  asinh: () => ik,
  atan: () => ak,
  atan2: () => lk,
  atanh: () => uk,
  avgPool: () => nu,
  avgPool3d: () => Um,
  backend: () => kN,
  backend_util: () => S,
  basicLSTMCell: () => b4,
  batchNorm: () => ai,
  batchNorm2d: () => fk,
  batchNorm3d: () => dk,
  batchNorm4d: () => hk,
  batchToSpaceND: () => ou,
  bincount: () => Hm,
  booleanMaskAsync: () => XIe,
  broadcastArgs: () => gk,
  broadcastTo: () => su,
  browser: () => cg,
  buffer: () => Se,
  callbacks: () => PX,
  cast: () => J,
  ceil: () => xk,
  clipByValue: () => Sr,
  clone: () => hn,
  complex: () => $n,
  concat: () => tt,
  concat1d: () => yk,
  concat2d: () => bk,
  concat3d: () => wk,
  concat4d: () => kk,
  constraints: () => PE,
  conv1d: () => qm,
  conv2d: () => Dn,
  conv2dTranspose: () => Km,
  conv3d: () => Xm,
  conv3dTranspose: () => _k,
  copyRegisteredKernels: () => wse,
  cos: () => iu,
  cosh: () => Ym,
  cosineWindow: () => Tg,
  cumsum: () => Zm,
  customGrad: () => Qr,
  data: () => s0,
  denseBincount: () => vk,
  deprecationWarn: () => ek,
  depthToSpace: () => Ck,
  depthwiseConv2d: () => ka,
  deregisterOp: () => LX,
  device_util: () => Ql,
  diag: () => K4,
  dilation2d: () => Sk,
  disableDeprecationWarnings: () => nue,
  dispose: () => Ae,
  disposeVariables: () => oue,
  div: () => ue,
  divNoNan: () => Ik,
  dot: () => rU,
  dropout: () => UN,
  einsum: () => Nk,
  elu: () => _a,
  enableDebugMode: () => rue,
  enableProdMode: () => tue,
  enclosingPowerOfTwo: () => HN,
  engine: () => ks,
  env: () => j,
  equal: () => Dr,
  erf: () => Tk,
  exp: () => tr,
  expandDims: () => gr,
  expm1: () => Ek,
  eye: () => pp,
  fft: () => gu,
  fill: () => _s,
  findBackend: () => cue,
  findBackendFactory: () => pue,
  floor: () => va,
  floorDiv: () => jm,
  forceHalfFloat: () => BP,
  fused: () => lo,
  gather: () => li,
  gatherND: () => jN,
  gather_util: () => pg,
  getBackend: () => lue,
  getGradient: () => bw,
  getKernel: () => Om,
  getKernelsForBackend: () => Jh,
  gpgpu_util: () => VO,
  grad: () => NU,
  grads: () => TU,
  greater: () => Ht,
  greaterEqual: () => Un,
  ifft: () => fl,
  imag: () => au,
  image: () => bn,
  inTopKAsync: () => sNe,
  initializers: () => rA,
  input: () => O_,
  io: () => $r,
  irfft: () => ff,
  isFinite: () => xU,
  isInf: () => bU,
  isNaN: () => Ak,
  keep: () => Dt,
  kernel_impls: () => Mr,
  layers: () => MA,
  leakyRelu: () => lu,
  less: () => Jm,
  lessEqual: () => Hn,
  linalg: () => RT,
  linspace: () => $k,
  loadGraphModel: () => m7,
  loadLayersModel: () => K5,
  localResponseNormalization: () => Dk,
  log: () => Ir,
  log1p: () => uu,
  logSigmoid: () => FU,
  logSoftmax: () => Qm,
  logSumExp: () => Pk,
  logicalAnd: () => Fr,
  logicalNot: () => cu,
  logicalOr: () => tf,
  logicalXor: () => HU,
  losses: () => tFe,
  matMul: () => Me,
  math: () => oN,
  max: () => Vr,
  maxPool: () => pu,
  maxPool3d: () => rf,
  maxPoolWithArgmax: () => Mk,
  maximum: () => Rn,
  mean: () => Ct,
  memory: () => Wm,
  meshgrid: () => JU,
  metrics: () => LA,
  min: () => mp,
  minimum: () => Ca,
  mirrorPad: () => Lk,
  mod: () => zk,
  model: () => H5,
  models: () => zA,
  moments: () => fp,
  movingAverage: () => k1e,
  mul: () => F,
  multiRNNCell: () => iH,
  multinomial: () => Bk,
  neg: () => Ke,
  nextFrame: () => xf,
  norm: () => Ig,
  notEqual: () => ci,
  oneHot: () => xa,
  ones: () => rr,
  onesLike: () => xr,
  op: () => I,
  outerProduct: () => pH,
  pad: () => xn,
  pad1d: () => dH,
  pad2d: () => gH,
  pad3d: () => yH,
  pad4d: () => wH,
  pool: () => SH,
  pow: () => yn,
  prelu: () => fu,
  print: () => Gw,
  prod: () => nf,
  profile: () => sue,
  rand: () => AH,
  randomGamma: () => LH,
  randomNormal: () => _g,
  randomUniform: () => vs,
  range: () => Sa,
  ready: () => aue,
  real: () => ml,
  reciprocal: () => Zk,
  registerBackend: () => ap,
  registerCallbackConstructor: () => X5,
  registerGradient: () => ZI,
  registerKernel: () => Ul,
  registerOp: () => MX,
  regularizers: () => BA,
  relu: () => Or,
  relu6: () => of,
  removeBackend: () => uue,
  reshape: () => O,
  reverse: () => lr,
  reverse1d: () => qH,
  reverse2d: () => XH,
  reverse3d: () => ZH,
  reverse4d: () => QH,
  rfft: () => xu,
  round: () => sf,
  rsqrt: () => af,
  scalar: () => ce,
  scatterND: () => VN,
  scatter_util: () => fg,
  selu: () => lf,
  separableConv2d: () => Jk,
  sequential: () => q5,
  serialization: () => ee,
  setBackend: () => VG,
  setPlatform: () => mue,
  setWasmPath: () => Hoe,
  setWasmPaths: () => qoe,
  setWebGLContext: () => W0,
  setdiff1dAsync: () => Qk,
  shared: () => Yx,
  sigmoid: () => Jr,
  sign: () => e_,
  signal: () => TRe,
  sin: () => uf,
  sinh: () => cf,
  slice: () => Oe,
  slice1d: () => pf,
  slice2d: () => vg,
  slice3d: () => mf,
  slice4d: () => hp,
  slice_util: () => ar,
  softmax: () => hu,
  softplus: () => ui,
  spaceToBatchND: () => mu,
  sparse: () => gf,
  sparseToDense: () => Ng,
  spectral: () => vRe,
  split: () => mr,
  sqrt: () => St,
  square: () => We,
  squaredDifference: () => df,
  squeeze: () => en,
  stack: () => nr,
  step: () => Ia,
  stridedSlice: () => t_,
  string: () => Pg,
  sub: () => le,
  sum: () => me,
  sumOutType: () => Zl,
  tan: () => r_,
  tanh: () => wa,
  tensor: () => vr,
  tensor1d: () => At,
  tensor2d: () => pi,
  tensor3d: () => Kw,
  tensor4d: () => Sq,
  tensor5d: () => Iq,
  tensor6d: () => Nq,
  tensor_util: () => io,
  test_util: () => wN,
  tidy: () => z,
  tile: () => Rr,
  time: () => iue,
  topk: () => n_,
  train: () => vu,
  transpose: () => Ve,
  truncatedNormal: () => yu,
  unique: () => Cg,
  unregisterGradient: () => bse,
  unregisterKernel: () => yse,
  unsortedSegmentSum: () => o_,
  unstack: () => Nr,
  upcastType: () => pr,
  util: () => b,
  valueAndGrad: () => EU,
  valueAndGrads: () => AU,
  variable: () => s_,
  variableGrads: () => yg,
  version: () => FWt,
  version_converter: () => f7,
  version_core: () => BG,
  version_cpu: () => q7,
  version_layers: () => Vf,
  version_wasm: () => Koe,
  version_webgl: () => PJ,
  webgl: () => Cwt,
  webgl_util: () => $O,
  where: () => Et,
  whereAsync: () => hf,
  zeros: () => ht,
  zerosLike: () => Ie
});
var jW = Object.create;
var qh = Object.defineProperty;
var GW = Object.getOwnPropertyDescriptor;
var UW = Object.getOwnPropertyNames;
var HW = Object.getPrototypeOf;
var qW = Object.prototype.hasOwnProperty;
var FI = (r) => qh(r, "__esModule", { value: true });
var pc = typeof __require != "undefined" ? __require : (r) => {
  throw new Error('Dynamic require of "' + r + '" is not supported');
};
var Ut = (r, e) => () => (e || r((e = { exports: {} }).exports, e), e.exports);
var He = (r, e) => {
  FI(r);
  for (var t in e)
    qh(r, t, { get: e[t], enumerable: true });
};
var KW = (r, e, t) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let n of UW(e))
      !qW.call(r, n) && n !== "default" && qh(r, n, { get: () => e[n], enumerable: !(t = GW(e, n)) || t.enumerable });
  return r;
};
var Bl = (r) => KW(FI(qh(r != null ? jW(HW(r)) : {}, "default", r && r.__esModule && "default" in r ? { get: () => r.default, enumerable: true } : { value: r, enumerable: true })), r);
var l1 = Ut((_se, a1) => {
  a1.exports = Vt;
  var no = null;
  try {
    no = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
  } catch (r) {
  }
  function Vt(r, e, t) {
    this.low = r | 0, this.high = e | 0, this.unsigned = !!t;
  }
  Vt.prototype.__isLong__;
  Object.defineProperty(Vt.prototype, "__isLong__", { value: true });
  function En(r) {
    return (r && r.__isLong__) === true;
  }
  Vt.isLong = En;
  var JI = {}, QI = {};
  function Hl(r, e) {
    var t, n, o;
    return e ? (r >>>= 0, (o = 0 <= r && r < 256) && (n = QI[r], n) ? n : (t = Wt(r, (r | 0) < 0 ? -1 : 0, true), o && (QI[r] = t), t)) : (r |= 0, (o = -128 <= r && r < 128) && (n = JI[r], n) ? n : (t = Wt(r, r < 0 ? -1 : 0, false), o && (JI[r] = t), t));
  }
  Vt.fromInt = Hl;
  function oo(r, e) {
    if (isNaN(r))
      return e ? ql : so;
    if (e) {
      if (r < 0)
        return ql;
      if (r >= t1)
        return i1;
    } else {
      if (r <= -r1)
        return An;
      if (r + 1 >= r1)
        return s1;
    }
    return r < 0 ? oo(-r, e).neg() : Wt(r % Zc | 0, r / Zc | 0, e);
  }
  Vt.fromNumber = oo;
  function Wt(r, e, t) {
    return new Vt(r, e, t);
  }
  Vt.fromBits = Wt;
  var Qh = Math.pow;
  function kw(r, e, t) {
    if (r.length === 0)
      throw Error("empty string");
    if (r === "NaN" || r === "Infinity" || r === "+Infinity" || r === "-Infinity")
      return so;
    if (typeof e == "number" ? (t = e, e = false) : e = !!e, t = t || 10, t < 2 || 36 < t)
      throw RangeError("radix");
    var n;
    if ((n = r.indexOf("-")) > 0)
      throw Error("interior hyphen");
    if (n === 0)
      return kw(r.substring(1), e, t).neg();
    for (var o = oo(Qh(t, 8)), s = so, a = 0; a < r.length; a += 8) {
      var i = Math.min(8, r.length - a), l = parseInt(r.substring(a, a + i), t);
      if (i < 8) {
        var u = oo(Qh(t, i));
        s = s.mul(u).add(oo(l));
      } else
        s = s.mul(o), s = s.add(oo(l));
    }
    return s.unsigned = e, s;
  }
  Vt.fromString = kw;
  function bs(r, e) {
    return typeof r == "number" ? oo(r, e) : typeof r == "string" ? kw(r, e) : Wt(r.low, r.high, typeof e == "boolean" ? e : r.unsigned);
  }
  Vt.fromValue = bs;
  var e1 = 1 << 16, Sj = 1 << 24, Zc = e1 * e1, t1 = Zc * Zc, r1 = t1 / 2, n1 = Hl(Sj), so = Hl(0);
  Vt.ZERO = so;
  var ql = Hl(0, true);
  Vt.UZERO = ql;
  var Jc = Hl(1);
  Vt.ONE = Jc;
  var o1 = Hl(1, true);
  Vt.UONE = o1;
  var _w = Hl(-1);
  Vt.NEG_ONE = _w;
  var s1 = Wt(4294967295 | 0, 2147483647 | 0, false);
  Vt.MAX_VALUE = s1;
  var i1 = Wt(4294967295 | 0, 4294967295 | 0, true);
  Vt.MAX_UNSIGNED_VALUE = i1;
  var An = Wt(0, 2147483648 | 0, false);
  Vt.MIN_VALUE = An;
  var be = Vt.prototype;
  be.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };
  be.toNumber = function() {
    return this.unsigned ? (this.high >>> 0) * Zc + (this.low >>> 0) : this.high * Zc + (this.low >>> 0);
  };
  be.toString = function(e) {
    if (e = e || 10, e < 2 || 36 < e)
      throw RangeError("radix");
    if (this.isZero())
      return "0";
    if (this.isNegative())
      if (this.eq(An)) {
        var t = oo(e), n = this.div(t), o = n.mul(t).sub(this);
        return n.toString(e) + o.toInt().toString(e);
      } else
        return "-" + this.neg().toString(e);
    for (var s = oo(Qh(e, 6), this.unsigned), a = this, i = ""; ; ) {
      var l = a.div(s), u = a.sub(l.mul(s)).toInt() >>> 0, c = u.toString(e);
      if (a = l, a.isZero())
        return c + i;
      for (; c.length < 6; )
        c = "0" + c;
      i = "" + c + i;
    }
  };
  be.getHighBits = function() {
    return this.high;
  };
  be.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  };
  be.getLowBits = function() {
    return this.low;
  };
  be.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  };
  be.getNumBitsAbs = function() {
    if (this.isNegative())
      return this.eq(An) ? 64 : this.neg().getNumBitsAbs();
    for (var e = this.high != 0 ? this.high : this.low, t = 31; t > 0 && (e & 1 << t) == 0; t--)
      ;
    return this.high != 0 ? t + 33 : t + 1;
  };
  be.isZero = function() {
    return this.high === 0 && this.low === 0;
  };
  be.eqz = be.isZero;
  be.isNegative = function() {
    return !this.unsigned && this.high < 0;
  };
  be.isPositive = function() {
    return this.unsigned || this.high >= 0;
  };
  be.isOdd = function() {
    return (this.low & 1) == 1;
  };
  be.isEven = function() {
    return (this.low & 1) == 0;
  };
  be.equals = function(e) {
    return En(e) || (e = bs(e)), this.unsigned !== e.unsigned && this.high >>> 31 == 1 && e.high >>> 31 == 1 ? false : this.high === e.high && this.low === e.low;
  };
  be.eq = be.equals;
  be.notEquals = function(e) {
    return !this.eq(e);
  };
  be.neq = be.notEquals;
  be.ne = be.notEquals;
  be.lessThan = function(e) {
    return this.comp(e) < 0;
  };
  be.lt = be.lessThan;
  be.lessThanOrEqual = function(e) {
    return this.comp(e) <= 0;
  };
  be.lte = be.lessThanOrEqual;
  be.le = be.lessThanOrEqual;
  be.greaterThan = function(e) {
    return this.comp(e) > 0;
  };
  be.gt = be.greaterThan;
  be.greaterThanOrEqual = function(e) {
    return this.comp(e) >= 0;
  };
  be.gte = be.greaterThanOrEqual;
  be.ge = be.greaterThanOrEqual;
  be.compare = function(e) {
    if (En(e) || (e = bs(e)), this.eq(e))
      return 0;
    var t = this.isNegative(), n = e.isNegative();
    return t && !n ? -1 : !t && n ? 1 : this.unsigned ? e.high >>> 0 > this.high >>> 0 || e.high === this.high && e.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(e).isNegative() ? -1 : 1;
  };
  be.comp = be.compare;
  be.negate = function() {
    return !this.unsigned && this.eq(An) ? An : this.not().add(Jc);
  };
  be.neg = be.negate;
  be.add = function(e) {
    En(e) || (e = bs(e));
    var t = this.high >>> 16, n = this.high & 65535, o = this.low >>> 16, s = this.low & 65535, a = e.high >>> 16, i = e.high & 65535, l = e.low >>> 16, u = e.low & 65535, c = 0, p = 0, m = 0, f = 0;
    return f += s + u, m += f >>> 16, f &= 65535, m += o + l, p += m >>> 16, m &= 65535, p += n + i, c += p >>> 16, p &= 65535, c += t + a, c &= 65535, Wt(m << 16 | f, c << 16 | p, this.unsigned);
  };
  be.subtract = function(e) {
    return En(e) || (e = bs(e)), this.add(e.neg());
  };
  be.sub = be.subtract;
  be.multiply = function(e) {
    if (this.isZero())
      return so;
    if (En(e) || (e = bs(e)), no) {
      var t = no.mul(this.low, this.high, e.low, e.high);
      return Wt(t, no.get_high(), this.unsigned);
    }
    if (e.isZero())
      return so;
    if (this.eq(An))
      return e.isOdd() ? An : so;
    if (e.eq(An))
      return this.isOdd() ? An : so;
    if (this.isNegative())
      return e.isNegative() ? this.neg().mul(e.neg()) : this.neg().mul(e).neg();
    if (e.isNegative())
      return this.mul(e.neg()).neg();
    if (this.lt(n1) && e.lt(n1))
      return oo(this.toNumber() * e.toNumber(), this.unsigned);
    var n = this.high >>> 16, o = this.high & 65535, s = this.low >>> 16, a = this.low & 65535, i = e.high >>> 16, l = e.high & 65535, u = e.low >>> 16, c = e.low & 65535, p = 0, m = 0, f = 0, d = 0;
    return d += a * c, f += d >>> 16, d &= 65535, f += s * c, m += f >>> 16, f &= 65535, f += a * u, m += f >>> 16, f &= 65535, m += o * c, p += m >>> 16, m &= 65535, m += s * u, p += m >>> 16, m &= 65535, m += a * l, p += m >>> 16, m &= 65535, p += n * c + o * u + s * l + a * i, p &= 65535, Wt(f << 16 | d, p << 16 | m, this.unsigned);
  };
  be.mul = be.multiply;
  be.divide = function(e) {
    if (En(e) || (e = bs(e)), e.isZero())
      throw Error("division by zero");
    if (no) {
      if (!this.unsigned && this.high === -2147483648 && e.low === -1 && e.high === -1)
        return this;
      var t = (this.unsigned ? no.div_u : no.div_s)(this.low, this.high, e.low, e.high);
      return Wt(t, no.get_high(), this.unsigned);
    }
    if (this.isZero())
      return this.unsigned ? ql : so;
    var n, o, s;
    if (this.unsigned) {
      if (e.unsigned || (e = e.toUnsigned()), e.gt(this))
        return ql;
      if (e.gt(this.shru(1)))
        return o1;
      s = ql;
    } else {
      if (this.eq(An)) {
        if (e.eq(Jc) || e.eq(_w))
          return An;
        if (e.eq(An))
          return Jc;
        var a = this.shr(1);
        return n = a.div(e).shl(1), n.eq(so) ? e.isNegative() ? Jc : _w : (o = this.sub(e.mul(n)), s = n.add(o.div(e)), s);
      } else if (e.eq(An))
        return this.unsigned ? ql : so;
      if (this.isNegative())
        return e.isNegative() ? this.neg().div(e.neg()) : this.neg().div(e).neg();
      if (e.isNegative())
        return this.div(e.neg()).neg();
      s = so;
    }
    for (o = this; o.gte(e); ) {
      n = Math.max(1, Math.floor(o.toNumber() / e.toNumber()));
      for (var i = Math.ceil(Math.log(n) / Math.LN2), l = i <= 48 ? 1 : Qh(2, i - 48), u = oo(n), c = u.mul(e); c.isNegative() || c.gt(o); )
        n -= l, u = oo(n, this.unsigned), c = u.mul(e);
      u.isZero() && (u = Jc), s = s.add(u), o = o.sub(c);
    }
    return s;
  };
  be.div = be.divide;
  be.modulo = function(e) {
    if (En(e) || (e = bs(e)), no) {
      var t = (this.unsigned ? no.rem_u : no.rem_s)(this.low, this.high, e.low, e.high);
      return Wt(t, no.get_high(), this.unsigned);
    }
    return this.sub(this.div(e).mul(e));
  };
  be.mod = be.modulo;
  be.rem = be.modulo;
  be.not = function() {
    return Wt(~this.low, ~this.high, this.unsigned);
  };
  be.and = function(e) {
    return En(e) || (e = bs(e)), Wt(this.low & e.low, this.high & e.high, this.unsigned);
  };
  be.or = function(e) {
    return En(e) || (e = bs(e)), Wt(this.low | e.low, this.high | e.high, this.unsigned);
  };
  be.xor = function(e) {
    return En(e) || (e = bs(e)), Wt(this.low ^ e.low, this.high ^ e.high, this.unsigned);
  };
  be.shiftLeft = function(e) {
    return En(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e < 32 ? Wt(this.low << e, this.high << e | this.low >>> 32 - e, this.unsigned) : Wt(0, this.low << e - 32, this.unsigned);
  };
  be.shl = be.shiftLeft;
  be.shiftRight = function(e) {
    return En(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e < 32 ? Wt(this.low >>> e | this.high << 32 - e, this.high >> e, this.unsigned) : Wt(this.high >> e - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  };
  be.shr = be.shiftRight;
  be.shiftRightUnsigned = function(e) {
    if (En(e) && (e = e.toInt()), e &= 63, e === 0)
      return this;
    var t = this.high;
    if (e < 32) {
      var n = this.low;
      return Wt(n >>> e | t << 32 - e, t >>> e, this.unsigned);
    } else
      return e === 32 ? Wt(t, 0, this.unsigned) : Wt(t >>> e - 32, 0, this.unsigned);
  };
  be.shru = be.shiftRightUnsigned;
  be.shr_u = be.shiftRightUnsigned;
  be.toSigned = function() {
    return this.unsigned ? Wt(this.low, this.high, false) : this;
  };
  be.toUnsigned = function() {
    return this.unsigned ? this : Wt(this.low, this.high, true);
  };
  be.toBytes = function(e) {
    return e ? this.toBytesLE() : this.toBytesBE();
  };
  be.toBytesLE = function() {
    var e = this.high, t = this.low;
    return [t & 255, t >>> 8 & 255, t >>> 16 & 255, t >>> 24, e & 255, e >>> 8 & 255, e >>> 16 & 255, e >>> 24];
  };
  be.toBytesBE = function() {
    var e = this.high, t = this.low;
    return [e >>> 24, e >>> 16 & 255, e >>> 8 & 255, e & 255, t >>> 24, t >>> 16 & 255, t >>> 8 & 255, t & 255];
  };
  Vt.fromBytes = function(e, t, n) {
    return n ? Vt.fromBytesLE(e, t) : Vt.fromBytesBE(e, t);
  };
  Vt.fromBytesLE = function(e, t) {
    return new Vt(e[0] | e[1] << 8 | e[2] << 16 | e[3] << 24, e[4] | e[5] << 8 | e[6] << 16 | e[7] << 24, t);
  };
  Vt.fromBytesBE = function(e, t) {
    return new Vt(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7], e[0] << 24 | e[1] << 16 | e[2] << 8 | e[3], t);
  };
});
var H1 = Ut(() => {
});
var NN = Ut((IN, Vk) => {
  (function(r, e, t) {
    function n(i) {
      var l = this, u = a();
      l.next = function() {
        var c = 2091639 * l.s0 + l.c * 23283064365386963e-26;
        return l.s0 = l.s1, l.s1 = l.s2, l.s2 = c - (l.c = c | 0);
      }, l.c = 1, l.s0 = u(" "), l.s1 = u(" "), l.s2 = u(" "), l.s0 -= u(i), l.s0 < 0 && (l.s0 += 1), l.s1 -= u(i), l.s1 < 0 && (l.s1 += 1), l.s2 -= u(i), l.s2 < 0 && (l.s2 += 1), u = null;
    }
    function o(i, l) {
      return l.c = i.c, l.s0 = i.s0, l.s1 = i.s1, l.s2 = i.s2, l;
    }
    function s(i, l) {
      var u = new n(i), c = l && l.state, p = u.next;
      return p.int32 = function() {
        return u.next() * 4294967296 | 0;
      }, p.double = function() {
        return p() + (p() * 2097152 | 0) * 11102230246251565e-32;
      }, p.quick = p, c && (typeof c == "object" && o(c, u), p.state = function() {
        return o(u, {});
      }), p;
    }
    function a() {
      var i = 4022871197, l = function(u) {
        u = u.toString();
        for (var c = 0; c < u.length; c++) {
          i += u.charCodeAt(c);
          var p = 0.02519603282416938 * i;
          i = p >>> 0, p -= i, p *= i, i = p >>> 0, p -= i, i += p * 4294967296;
        }
        return (i >>> 0) * 23283064365386963e-26;
      };
      return l;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.alea = s;
  })(IN, typeof Vk == "object" && Vk, typeof define == "function" && define);
});
var EN = Ut((TN, Wk) => {
  (function(r, e, t) {
    function n(a) {
      var i = this, l = "";
      i.x = 0, i.y = 0, i.z = 0, i.w = 0, i.next = function() {
        var c = i.x ^ i.x << 11;
        return i.x = i.y, i.y = i.z, i.z = i.w, i.w ^= i.w >>> 19 ^ c ^ c >>> 8;
      }, a === (a | 0) ? i.x = a : l += a;
      for (var u = 0; u < l.length + 64; u++)
        i.x ^= l.charCodeAt(u) | 0, i.next();
    }
    function o(a, i) {
      return i.x = a.x, i.y = a.y, i.z = a.z, i.w = a.w, i;
    }
    function s(a, i) {
      var l = new n(a), u = i && i.state, c = function() {
        return (l.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var p = l.next() >>> 11, m = (l.next() >>> 0) / 4294967296, f = (p + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = l.next, c.quick = c, u && (typeof u == "object" && o(u, l), c.state = function() {
        return o(l, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.xor128 = s;
  })(TN, typeof Wk == "object" && Wk, typeof define == "function" && define);
});
var $N = Ut((AN, jk) => {
  (function(r, e, t) {
    function n(a) {
      var i = this, l = "";
      i.next = function() {
        var c = i.x ^ i.x >>> 2;
        return i.x = i.y, i.y = i.z, i.z = i.w, i.w = i.v, (i.d = i.d + 362437 | 0) + (i.v = i.v ^ i.v << 4 ^ (c ^ c << 1)) | 0;
      }, i.x = 0, i.y = 0, i.z = 0, i.w = 0, i.v = 0, a === (a | 0) ? i.x = a : l += a;
      for (var u = 0; u < l.length + 64; u++)
        i.x ^= l.charCodeAt(u) | 0, u == l.length && (i.d = i.x << 10 ^ i.x >>> 4), i.next();
    }
    function o(a, i) {
      return i.x = a.x, i.y = a.y, i.z = a.z, i.w = a.w, i.v = a.v, i.d = a.d, i;
    }
    function s(a, i) {
      var l = new n(a), u = i && i.state, c = function() {
        return (l.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var p = l.next() >>> 11, m = (l.next() >>> 0) / 4294967296, f = (p + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = l.next, c.quick = c, u && (typeof u == "object" && o(u, l), c.state = function() {
        return o(l, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.xorwow = s;
  })(AN, typeof jk == "object" && jk, typeof define == "function" && define);
});
var RN = Ut((DN, Gk) => {
  (function(r, e, t) {
    function n(a) {
      var i = this;
      i.next = function() {
        var u = i.x, c = i.i, p, m, f;
        return p = u[c], p ^= p >>> 7, m = p ^ p << 24, p = u[c + 1 & 7], m ^= p ^ p >>> 10, p = u[c + 3 & 7], m ^= p ^ p >>> 3, p = u[c + 4 & 7], m ^= p ^ p << 7, p = u[c + 7 & 7], p = p ^ p << 13, m ^= p ^ p << 9, u[c] = m, i.i = c + 1 & 7, m;
      };
      function l(u, c) {
        var p, m, f = [];
        if (c === (c | 0))
          m = f[0] = c;
        else
          for (c = "" + c, p = 0; p < c.length; ++p)
            f[p & 7] = f[p & 7] << 15 ^ c.charCodeAt(p) + f[p + 1 & 7] << 13;
        for (; f.length < 8; )
          f.push(0);
        for (p = 0; p < 8 && f[p] === 0; ++p)
          ;
        for (p == 8 ? m = f[7] = -1 : m = f[p], u.x = f, u.i = 0, p = 256; p > 0; --p)
          u.next();
      }
      l(i, a);
    }
    function o(a, i) {
      return i.x = a.x.slice(), i.i = a.i, i;
    }
    function s(a, i) {
      a == null && (a = +new Date());
      var l = new n(a), u = i && i.state, c = function() {
        return (l.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var p = l.next() >>> 11, m = (l.next() >>> 0) / 4294967296, f = (p + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = l.next, c.quick = c, u && (u.x && o(u, l), c.state = function() {
        return o(l, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.xorshift7 = s;
  })(DN, typeof Gk == "object" && Gk, typeof define == "function" && define);
});
var ON = Ut((FN, Uk) => {
  (function(r, e, t) {
    function n(a) {
      var i = this;
      i.next = function() {
        var u = i.w, c = i.X, p = i.i, m, f;
        return i.w = u = u + 1640531527 | 0, f = c[p + 34 & 127], m = c[p = p + 1 & 127], f ^= f << 13, m ^= m << 17, f ^= f >>> 15, m ^= m >>> 12, f = c[p] = f ^ m, i.i = p, f + (u ^ u >>> 16) | 0;
      };
      function l(u, c) {
        var p, m, f, d, h, g = [], y = 128;
        for (c === (c | 0) ? (m = c, c = null) : (c = c + "\0", m = 0, y = Math.max(y, c.length)), f = 0, d = -32; d < y; ++d)
          c && (m ^= c.charCodeAt((d + 32) % c.length)), d === 0 && (h = m), m ^= m << 10, m ^= m >>> 15, m ^= m << 4, m ^= m >>> 13, d >= 0 && (h = h + 1640531527 | 0, p = g[d & 127] ^= m + h, f = p == 0 ? f + 1 : 0);
        for (f >= 128 && (g[(c && c.length || 0) & 127] = -1), f = 127, d = 4 * 128; d > 0; --d)
          m = g[f + 34 & 127], p = g[f = f + 1 & 127], m ^= m << 13, p ^= p << 17, m ^= m >>> 15, p ^= p >>> 12, g[f] = m ^ p;
        u.w = h, u.X = g, u.i = f;
      }
      l(i, a);
    }
    function o(a, i) {
      return i.i = a.i, i.w = a.w, i.X = a.X.slice(), i;
    }
    function s(a, i) {
      a == null && (a = +new Date());
      var l = new n(a), u = i && i.state, c = function() {
        return (l.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var p = l.next() >>> 11, m = (l.next() >>> 0) / 4294967296, f = (p + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = l.next, c.quick = c, u && (u.X && o(u, l), c.state = function() {
        return o(l, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.xor4096 = s;
  })(FN, typeof Uk == "object" && Uk, typeof define == "function" && define);
});
var MN = Ut((PN, Hk) => {
  (function(r, e, t) {
    function n(a) {
      var i = this, l = "";
      i.next = function() {
        var c = i.b, p = i.c, m = i.d, f = i.a;
        return c = c << 25 ^ c >>> 7 ^ p, p = p - m | 0, m = m << 24 ^ m >>> 8 ^ f, f = f - c | 0, i.b = c = c << 20 ^ c >>> 12 ^ p, i.c = p = p - m | 0, i.d = m << 16 ^ p >>> 16 ^ f, i.a = f - c | 0;
      }, i.a = 0, i.b = 0, i.c = 2654435769 | 0, i.d = 1367130551, a === Math.floor(a) ? (i.a = a / 4294967296 | 0, i.b = a | 0) : l += a;
      for (var u = 0; u < l.length + 20; u++)
        i.b ^= l.charCodeAt(u) | 0, i.next();
    }
    function o(a, i) {
      return i.a = a.a, i.b = a.b, i.c = a.c, i.d = a.d, i;
    }
    function s(a, i) {
      var l = new n(a), u = i && i.state, c = function() {
        return (l.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var p = l.next() >>> 11, m = (l.next() >>> 0) / 4294967296, f = (p + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = l.next, c.quick = c, u && (typeof u == "object" && o(u, l), c.state = function() {
        return o(l, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.tychei = s;
  })(PN, typeof Hk == "object" && Hk, typeof define == "function" && define);
});
var qk = Ut(() => {
});
var LN = Ut((X_e, wg) => {
  (function(r, e) {
    var t = this, n = 256, o = 6, s = 52, a = "random", i = e.pow(n, o), l = e.pow(2, s), u = l * 2, c = n - 1, p;
    function m(x, k, C) {
      var A = [];
      k = k == true ? { entropy: true } : k || {};
      var $ = g(h(k.entropy ? [x, w(r)] : x == null ? y() : x, 3), A), R = new f(A), P = function() {
        for (var M = R.g(o), V = i, W = 0; M < l; )
          M = (M + W) * n, V *= n, W = R.g(1);
        for (; M >= u; )
          M /= 2, V /= 2, W >>>= 1;
        return (M + W) / V;
      };
      return P.int32 = function() {
        return R.g(4) | 0;
      }, P.quick = function() {
        return R.g(4) / 4294967296;
      }, P.double = P, g(w(R.S), r), (k.pass || C || function(M, V, W, G) {
        return G && (G.S && d(G, R), M.state = function() {
          return d(R, {});
        }), W ? (e[a] = M, V) : M;
      })(P, $, "global" in k ? k.global : this == e, k.state);
    }
    e["seed" + a] = m;
    function f(x) {
      var k, C = x.length, A = this, $ = 0, R = A.i = A.j = 0, P = A.S = [];
      for (C || (x = [C++]); $ < n; )
        P[$] = $++;
      for ($ = 0; $ < n; $++)
        P[$] = P[R = c & R + x[$ % C] + (k = P[$])], P[R] = k;
      (A.g = function(M) {
        for (var V, W = 0, G = A.i, U = A.j, H = A.S; M--; )
          V = H[G = c & G + 1], W = W * n + H[c & (H[G] = H[U = c & U + V]) + (H[U] = V)];
        return A.i = G, A.j = U, W;
      })(n);
    }
    function d(x, k) {
      return k.i = x.i, k.j = x.j, k.S = x.S.slice(), k;
    }
    function h(x, k) {
      var C = [], A = typeof x, $;
      if (k && A == "object")
        for ($ in x)
          try {
            C.push(h(x[$], k - 1));
          } catch (R) {
          }
      return C.length ? C : A == "string" ? x : x + "\0";
    }
    function g(x, k) {
      for (var C = x + "", A, $ = 0; $ < C.length; )
        k[c & $] = c & (A ^= k[c & $] * 19) + C.charCodeAt($++);
      return w(k);
    }
    function y() {
      try {
        var x;
        return p && (x = p.randomBytes) ? x = x(n) : (x = new Uint8Array(n), (t.crypto || t.msCrypto).getRandomValues(x)), w(x);
      } catch (A) {
        var k = t.navigator, C = k && k.plugins;
        return [+new Date(), t, C, t.screen, w(r)];
      }
    }
    function w(x) {
      return String.fromCharCode.apply(0, x);
    }
    if (g(e.random(), r), typeof wg == "object" && wg.exports) {
      wg.exports = m;
      try {
        p = qk();
      } catch (x) {
      }
    } else
      typeof define == "function" && define.amd && define(function() {
        return m;
      });
  })([], Math);
});
var Kk = Ut((Y_e, zN) => {
  var $H = NN(), DH = EN(), RH = $N(), FH = RN(), OH = ON(), PH = MN(), du = LN();
  du.alea = $H;
  du.xor128 = DH;
  du.xorwow = RH;
  du.xorshift7 = FH;
  du.xor4096 = OH;
  du.tychei = PH;
  zN.exports = du;
});
var w$ = Ut((b$, Gv) => {
  (function(r, e, t) {
    function n(i) {
      var l = this, u = a();
      l.next = function() {
        var c = 2091639 * l.s0 + l.c * 23283064365386963e-26;
        return l.s0 = l.s1, l.s1 = l.s2, l.s2 = c - (l.c = c | 0);
      }, l.c = 1, l.s0 = u(" "), l.s1 = u(" "), l.s2 = u(" "), l.s0 -= u(i), l.s0 < 0 && (l.s0 += 1), l.s1 -= u(i), l.s1 < 0 && (l.s1 += 1), l.s2 -= u(i), l.s2 < 0 && (l.s2 += 1), u = null;
    }
    function o(i, l) {
      return l.c = i.c, l.s0 = i.s0, l.s1 = i.s1, l.s2 = i.s2, l;
    }
    function s(i, l) {
      var u = new n(i), c = l && l.state, p = u.next;
      return p.int32 = function() {
        return u.next() * 4294967296 | 0;
      }, p.double = function() {
        return p() + (p() * 2097152 | 0) * 11102230246251565e-32;
      }, p.quick = p, c && (typeof c == "object" && o(c, u), p.state = function() {
        return o(u, {});
      }), p;
    }
    function a() {
      var i = 4022871197, l = function(u) {
        u = String(u);
        for (var c = 0; c < u.length; c++) {
          i += u.charCodeAt(c);
          var p = 0.02519603282416938 * i;
          i = p >>> 0, p -= i, p *= i, i = p >>> 0, p -= i, i += p * 4294967296;
        }
        return (i >>> 0) * 23283064365386963e-26;
      };
      return l;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.alea = s;
  })(b$, typeof Gv == "object" && Gv, typeof define == "function" && define);
});
var _$ = Ut((k$, Uv) => {
  (function(r, e, t) {
    function n(a) {
      var i = this, l = "";
      i.x = 0, i.y = 0, i.z = 0, i.w = 0, i.next = function() {
        var c = i.x ^ i.x << 11;
        return i.x = i.y, i.y = i.z, i.z = i.w, i.w ^= i.w >>> 19 ^ c ^ c >>> 8;
      }, a === (a | 0) ? i.x = a : l += a;
      for (var u = 0; u < l.length + 64; u++)
        i.x ^= l.charCodeAt(u) | 0, i.next();
    }
    function o(a, i) {
      return i.x = a.x, i.y = a.y, i.z = a.z, i.w = a.w, i;
    }
    function s(a, i) {
      var l = new n(a), u = i && i.state, c = function() {
        return (l.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var p = l.next() >>> 11, m = (l.next() >>> 0) / 4294967296, f = (p + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = l.next, c.quick = c, u && (typeof u == "object" && o(u, l), c.state = function() {
        return o(l, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.xor128 = s;
  })(k$, typeof Uv == "object" && Uv, typeof define == "function" && define);
});
var C$ = Ut((v$, Hv) => {
  (function(r, e, t) {
    function n(a) {
      var i = this, l = "";
      i.next = function() {
        var c = i.x ^ i.x >>> 2;
        return i.x = i.y, i.y = i.z, i.z = i.w, i.w = i.v, (i.d = i.d + 362437 | 0) + (i.v = i.v ^ i.v << 4 ^ (c ^ c << 1)) | 0;
      }, i.x = 0, i.y = 0, i.z = 0, i.w = 0, i.v = 0, a === (a | 0) ? i.x = a : l += a;
      for (var u = 0; u < l.length + 64; u++)
        i.x ^= l.charCodeAt(u) | 0, u == l.length && (i.d = i.x << 10 ^ i.x >>> 4), i.next();
    }
    function o(a, i) {
      return i.x = a.x, i.y = a.y, i.z = a.z, i.w = a.w, i.v = a.v, i.d = a.d, i;
    }
    function s(a, i) {
      var l = new n(a), u = i && i.state, c = function() {
        return (l.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var p = l.next() >>> 11, m = (l.next() >>> 0) / 4294967296, f = (p + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = l.next, c.quick = c, u && (typeof u == "object" && o(u, l), c.state = function() {
        return o(l, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.xorwow = s;
  })(v$, typeof Hv == "object" && Hv, typeof define == "function" && define);
});
var I$ = Ut((S$, qv) => {
  (function(r, e, t) {
    function n(a) {
      var i = this;
      i.next = function() {
        var u = i.x, c = i.i, p, m, f;
        return p = u[c], p ^= p >>> 7, m = p ^ p << 24, p = u[c + 1 & 7], m ^= p ^ p >>> 10, p = u[c + 3 & 7], m ^= p ^ p >>> 3, p = u[c + 4 & 7], m ^= p ^ p << 7, p = u[c + 7 & 7], p = p ^ p << 13, m ^= p ^ p << 9, u[c] = m, i.i = c + 1 & 7, m;
      };
      function l(u, c) {
        var p, m, f = [];
        if (c === (c | 0))
          m = f[0] = c;
        else
          for (c = "" + c, p = 0; p < c.length; ++p)
            f[p & 7] = f[p & 7] << 15 ^ c.charCodeAt(p) + f[p + 1 & 7] << 13;
        for (; f.length < 8; )
          f.push(0);
        for (p = 0; p < 8 && f[p] === 0; ++p)
          ;
        for (p == 8 ? m = f[7] = -1 : m = f[p], u.x = f, u.i = 0, p = 256; p > 0; --p)
          u.next();
      }
      l(i, a);
    }
    function o(a, i) {
      return i.x = a.x.slice(), i.i = a.i, i;
    }
    function s(a, i) {
      a == null && (a = +new Date());
      var l = new n(a), u = i && i.state, c = function() {
        return (l.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var p = l.next() >>> 11, m = (l.next() >>> 0) / 4294967296, f = (p + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = l.next, c.quick = c, u && (u.x && o(u, l), c.state = function() {
        return o(l, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.xorshift7 = s;
  })(S$, typeof qv == "object" && qv, typeof define == "function" && define);
});
var T$ = Ut((N$, Kv) => {
  (function(r, e, t) {
    function n(a) {
      var i = this;
      i.next = function() {
        var u = i.w, c = i.X, p = i.i, m, f;
        return i.w = u = u + 1640531527 | 0, f = c[p + 34 & 127], m = c[p = p + 1 & 127], f ^= f << 13, m ^= m << 17, f ^= f >>> 15, m ^= m >>> 12, f = c[p] = f ^ m, i.i = p, f + (u ^ u >>> 16) | 0;
      };
      function l(u, c) {
        var p, m, f, d, h, g = [], y = 128;
        for (c === (c | 0) ? (m = c, c = null) : (c = c + "\0", m = 0, y = Math.max(y, c.length)), f = 0, d = -32; d < y; ++d)
          c && (m ^= c.charCodeAt((d + 32) % c.length)), d === 0 && (h = m), m ^= m << 10, m ^= m >>> 15, m ^= m << 4, m ^= m >>> 13, d >= 0 && (h = h + 1640531527 | 0, p = g[d & 127] ^= m + h, f = p == 0 ? f + 1 : 0);
        for (f >= 128 && (g[(c && c.length || 0) & 127] = -1), f = 127, d = 4 * 128; d > 0; --d)
          m = g[f + 34 & 127], p = g[f = f + 1 & 127], m ^= m << 13, p ^= p << 17, m ^= m >>> 15, p ^= p >>> 12, g[f] = m ^ p;
        u.w = h, u.X = g, u.i = f;
      }
      l(i, a);
    }
    function o(a, i) {
      return i.i = a.i, i.w = a.w, i.X = a.X.slice(), i;
    }
    function s(a, i) {
      a == null && (a = +new Date());
      var l = new n(a), u = i && i.state, c = function() {
        return (l.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var p = l.next() >>> 11, m = (l.next() >>> 0) / 4294967296, f = (p + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = l.next, c.quick = c, u && (u.X && o(u, l), c.state = function() {
        return o(l, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.xor4096 = s;
  })(N$, typeof Kv == "object" && Kv, typeof define == "function" && define);
});
var A$ = Ut((E$, Xv) => {
  (function(r, e, t) {
    function n(a) {
      var i = this, l = "";
      i.next = function() {
        var c = i.b, p = i.c, m = i.d, f = i.a;
        return c = c << 25 ^ c >>> 7 ^ p, p = p - m | 0, m = m << 24 ^ m >>> 8 ^ f, f = f - c | 0, i.b = c = c << 20 ^ c >>> 12 ^ p, i.c = p = p - m | 0, i.d = m << 16 ^ p >>> 16 ^ f, i.a = f - c | 0;
      }, i.a = 0, i.b = 0, i.c = 2654435769 | 0, i.d = 1367130551, a === Math.floor(a) ? (i.a = a / 4294967296 | 0, i.b = a | 0) : l += a;
      for (var u = 0; u < l.length + 20; u++)
        i.b ^= l.charCodeAt(u) | 0, i.next();
    }
    function o(a, i) {
      return i.a = a.a, i.b = a.b, i.c = a.c, i.d = a.d, i;
    }
    function s(a, i) {
      var l = new n(a), u = i && i.state, c = function() {
        return (l.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var p = l.next() >>> 11, m = (l.next() >>> 0) / 4294967296, f = (p + m) / (1 << 21);
        while (f === 0);
        return f;
      }, c.int32 = l.next, c.quick = c, u && (typeof u == "object" && o(u, l), c.state = function() {
        return o(l, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t && t.amd ? t(function() {
      return s;
    }) : this.tychei = s;
  })(E$, typeof Xv == "object" && Xv, typeof define == "function" && define);
});
var D$ = Ut(($$, Ex) => {
  (function(r, e, t) {
    var n = 256, o = 6, s = 52, a = "random", i = t.pow(n, o), l = t.pow(2, s), u = l * 2, c = n - 1, p;
    function m(x, k, C) {
      var A = [];
      k = k == true ? { entropy: true } : k || {};
      var $ = g(h(k.entropy ? [x, w(e)] : x == null ? y() : x, 3), A), R = new f(A), P = function() {
        for (var M = R.g(o), V = i, W = 0; M < l; )
          M = (M + W) * n, V *= n, W = R.g(1);
        for (; M >= u; )
          M /= 2, V /= 2, W >>>= 1;
        return (M + W) / V;
      };
      return P.int32 = function() {
        return R.g(4) | 0;
      }, P.quick = function() {
        return R.g(4) / 4294967296;
      }, P.double = P, g(w(R.S), e), (k.pass || C || function(M, V, W, G) {
        return G && (G.S && d(G, R), M.state = function() {
          return d(R, {});
        }), W ? (t[a] = M, V) : M;
      })(P, $, "global" in k ? k.global : this == t, k.state);
    }
    function f(x) {
      var k, C = x.length, A = this, $ = 0, R = A.i = A.j = 0, P = A.S = [];
      for (C || (x = [C++]); $ < n; )
        P[$] = $++;
      for ($ = 0; $ < n; $++)
        P[$] = P[R = c & R + x[$ % C] + (k = P[$])], P[R] = k;
      (A.g = function(M) {
        for (var V, W = 0, G = A.i, U = A.j, H = A.S; M--; )
          V = H[G = c & G + 1], W = W * n + H[c & (H[G] = H[U = c & U + V]) + (H[U] = V)];
        return A.i = G, A.j = U, W;
      })(n);
    }
    function d(x, k) {
      return k.i = x.i, k.j = x.j, k.S = x.S.slice(), k;
    }
    function h(x, k) {
      var C = [], A = typeof x, $;
      if (k && A == "object")
        for ($ in x)
          try {
            C.push(h(x[$], k - 1));
          } catch (R) {
          }
      return C.length ? C : A == "string" ? x : x + "\0";
    }
    function g(x, k) {
      for (var C = x + "", A, $ = 0; $ < C.length; )
        k[c & $] = c & (A ^= k[c & $] * 19) + C.charCodeAt($++);
      return w(k);
    }
    function y() {
      try {
        var x;
        return p && (x = p.randomBytes) ? x = x(n) : (x = new Uint8Array(n), (r.crypto || r.msCrypto).getRandomValues(x)), w(x);
      } catch (A) {
        var k = r.navigator, C = k && k.plugins;
        return [+new Date(), r, C, r.screen, w(e)];
      }
    }
    function w(x) {
      return String.fromCharCode.apply(0, x);
    }
    if (g(t.random(), e), typeof Ex == "object" && Ex.exports) {
      Ex.exports = m;
      try {
        p = qk();
      } catch (x) {
      }
    } else
      typeof define == "function" && define.amd ? define(function() {
        return m;
      }) : t["seed" + a] = m;
  })(typeof self != "undefined" ? self : $$, [], Math);
});
var Yv = Ut((Pet, R$) => {
  var d7 = w$(), h7 = _$(), g7 = C$(), x7 = I$(), y7 = T$(), b7 = A$(), Ou = D$();
  Ou.alea = d7;
  Ou.xor128 = h7;
  Ou.xorwow = g7;
  Ou.xorshift7 = x7;
  Ou.xor4096 = y7;
  Ou.tychei = b7;
  R$.exports = Ou;
});
var Zv = Ut(() => {
});
var hm = Ut(() => {
});
var qV = Ut(() => {
});
var KV = Ut(() => {
});
var XV = Ut((Oy, xI) => {
  var gI = function() {
    var r = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0;
    return typeof __filename != "undefined" && (r = r || __filename), function(e) {
      e = e || {};
      function t() {
        return Q.buffer != Ue && ur(Q.buffer), pt;
      }
      function n() {
        return Q.buffer != Ue && ur(Q.buffer), ft;
      }
      function o() {
        return Q.buffer != Ue && ur(Q.buffer), Qt;
      }
      function s() {
        return Q.buffer != Ue && ur(Q.buffer), pn;
      }
      function a() {
        return Q.buffer != Ue && ur(Q.buffer), Zn;
      }
      var i = typeof e != "undefined" ? e : {}, l, u;
      i.ready = new Promise(function(N, D) {
        l = N, u = D;
      });
      var c = {}, p;
      for (p in i)
        i.hasOwnProperty(p) && (c[p] = i[p]);
      var m = [], f = "./this.program", d = function(N, D) {
        throw D;
      }, h = false, g = false, y = false, w = false;
      h = typeof window == "object", g = typeof importScripts == "function", y = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", w = !h && !y && !g;
      var x = i.ENVIRONMENT_IS_PTHREAD || false;
      x && (Ue = i.buffer);
      var k = "";
      function C(N) {
        return i.locateFile ? i.locateFile(N, k) : k + N;
      }
      var A, $, R, P, M, V;
      if (y) {
        g ? k = hm().dirname(k) + "/" : k = __dirname + "/", A = function(D, B) {
          return M || (M = pc("fs")), V || (V = hm()), D = V.normalize(D), M.readFileSync(D, B ? null : "utf8");
        }, R = function(D) {
          var B = A(D, true);
          return B.buffer || (B = new Uint8Array(B)), fe(B.buffer), B;
        }, process.argv.length > 1 && (f = process.argv[1].replace(/\\/g, "/")), m = process.argv.slice(2), process.on("uncaughtException", function(N) {
          if (!(N instanceof Im))
            throw N;
        }), process.on("unhandledRejection", Ci), d = function(N) {
          process.exit(N);
        }, i.inspect = function() {
          return "[Emscripten Module object]";
        };
        var W;
        try {
          W = qV();
        } catch (N) {
          throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), N;
        }
        global.Worker = W.Worker;
      } else
        w ? (typeof read != "undefined" && (A = function(D) {
          return read(D);
        }), R = function(D) {
          var B;
          return typeof readbuffer == "function" ? new Uint8Array(readbuffer(D)) : (B = read(D, "binary"), fe(typeof B == "object"), B);
        }, typeof scriptArgs != "undefined" ? m = scriptArgs : typeof arguments != "undefined" && (m = arguments), typeof quit == "function" && (d = function(N) {
          quit(N);
        }), typeof print != "undefined" && (typeof console == "undefined" && (console = {}), console.log = print, console.warn = console.error = typeof printErr != "undefined" ? printErr : print)) : (h || g) && (g ? k = self.location.href : typeof document != "undefined" && document.currentScript && (k = document.currentScript.src), typeof r != "undefined" && r && (k = r), k.indexOf("blob:") !== 0 ? k = k.substr(0, k.lastIndexOf("/") + 1) : k = "", y ? (A = function(D, B) {
          return M || (M = pc("fs")), V || (V = hm()), D = V.normalize(D), M.readFileSync(D, B ? null : "utf8");
        }, R = function(D) {
          var B = A(D, true);
          return B.buffer || (B = new Uint8Array(B)), fe(B.buffer), B;
        }) : (A = function(N) {
          var D = new XMLHttpRequest();
          return D.open("GET", N, false), D.send(null), D.responseText;
        }, g && (R = function(N) {
          var D = new XMLHttpRequest();
          return D.open("GET", N, false), D.responseType = "arraybuffer", D.send(null), new Uint8Array(D.response);
        }), $ = function(N, D, B) {
          var q = new XMLHttpRequest();
          q.open("GET", N, true), q.responseType = "arraybuffer", q.onload = function() {
            if (q.status == 200 || q.status == 0 && q.response) {
              D(q.response);
              return;
            }
            B();
          }, q.onerror = B, q.send(null);
        }), P = function(N) {
          document.title = N;
        });
      y && typeof performance == "undefined" && (global.performance = KV().performance);
      var G = i.print || console.log.bind(console), U = i.printErr || console.warn.bind(console);
      for (p in c)
        c.hasOwnProperty(p) && (i[p] = c[p]);
      c = null, i.arguments && (m = i.arguments), i.thisProgram && (f = i.thisProgram), i.quit && (d = i.quit);
      var H = Atomics.load, K = Atomics.store, re = Atomics.compareExchange, X;
      i.wasmBinary && (X = i.wasmBinary);
      var ne = i.noExitRuntime || true;
      typeof WebAssembly != "object" && Ci("no native wasm support detected");
      var Q, se, pe = false, ie;
      function fe(N, D) {
        N || Ci("Assertion failed: " + D);
      }
      function de(N) {
        var D = i["_" + N];
        return fe(D, "Cannot call unknown function " + N + ", make sure it is exported"), D;
      }
      function ge(N, D, B, q, ye) {
        var he = { string: function(qr) {
          var cc = 0;
          if (qr != null && qr !== 0) {
            var RI = (qr.length << 2) + 1;
            cc = ac(RI), qe(qr, cc, RI);
          }
          return cc;
        }, array: function(qr) {
          var cc = ac(qr.length);
          return It(qr, cc), cc;
        } };
        function xe(qr) {
          return D === "string" ? Ce(qr) : D === "boolean" ? Boolean(qr) : qr;
        }
        var Te = de(N), bt = [], kr = 0;
        if (q)
          for (var hr = 0; hr < q.length; hr++) {
            var qa = he[B[hr]];
            qa ? (kr === 0 && (kr = Sm()), bt[hr] = qa(q[hr])) : bt[hr] = q[hr];
          }
        var uc = Te.apply(null, bt);
        return uc = xe(uc), kr !== 0 && ic(kr), uc;
      }
      function we(N, D, B, q) {
        B = B || [];
        var ye = B.every(function(xe) {
          return xe === "number";
        }), he = D !== "string";
        return he && ye && !q ? de(N) : function() {
          return ge(N, D, B, arguments, q);
        };
      }
      function $e(N, D, B) {
        for (var q = D + B, ye = ""; !(D >= q); ) {
          var he = N[D++];
          if (!he)
            return ye;
          if (!(he & 128)) {
            ye += String.fromCharCode(he);
            continue;
          }
          var xe = N[D++] & 63;
          if ((he & 224) == 192) {
            ye += String.fromCharCode((he & 31) << 6 | xe);
            continue;
          }
          var Te = N[D++] & 63;
          if ((he & 240) == 224 ? he = (he & 15) << 12 | xe << 6 | Te : he = (he & 7) << 18 | xe << 12 | Te << 6 | N[D++] & 63, he < 65536)
            ye += String.fromCharCode(he);
          else {
            var bt = he - 65536;
            ye += String.fromCharCode(55296 | bt >> 10, 56320 | bt & 1023);
          }
        }
        return ye;
      }
      function Ce(N, D) {
        return N ? $e(n(), N, D) : "";
      }
      function Be(N, D, B, q) {
        if (!(q > 0))
          return 0;
        for (var ye = B, he = B + q - 1, xe = 0; xe < N.length; ++xe) {
          var Te = N.charCodeAt(xe);
          if (Te >= 55296 && Te <= 57343) {
            var bt = N.charCodeAt(++xe);
            Te = 65536 + ((Te & 1023) << 10) | bt & 1023;
          }
          if (Te <= 127) {
            if (B >= he)
              break;
            D[B++] = Te;
          } else if (Te <= 2047) {
            if (B + 1 >= he)
              break;
            D[B++] = 192 | Te >> 6, D[B++] = 128 | Te & 63;
          } else if (Te <= 65535) {
            if (B + 2 >= he)
              break;
            D[B++] = 224 | Te >> 12, D[B++] = 128 | Te >> 6 & 63, D[B++] = 128 | Te & 63;
          } else {
            if (B + 3 >= he)
              break;
            D[B++] = 240 | Te >> 18, D[B++] = 128 | Te >> 12 & 63, D[B++] = 128 | Te >> 6 & 63, D[B++] = 128 | Te & 63;
          }
        }
        return D[B] = 0, B - ye;
      }
      function qe(N, D, B) {
        return Be(N, n(), D, B);
      }
      function lt(N) {
        for (var D = 0, B = 0; B < N.length; ++B) {
          var q = N.charCodeAt(B);
          q >= 55296 && q <= 57343 && (q = 65536 + ((q & 1023) << 10) | N.charCodeAt(++B) & 1023), q <= 127 ? ++D : q <= 2047 ? D += 2 : q <= 65535 ? D += 3 : D += 4;
        }
        return D;
      }
      function It(N, D) {
        t().set(N, D);
      }
      function Nt(N, D) {
        return N % D > 0 && (N += D - N % D), N;
      }
      var Ue, pt, ft, Bt, In, Qt, pn, Br, Zn;
      function ur(N) {
        Ue = N, i.HEAP8 = pt = new Int8Array(N), i.HEAP16 = Bt = new Int16Array(N), i.HEAP32 = Qt = new Int32Array(N), i.HEAPU8 = ft = new Uint8Array(N), i.HEAPU16 = In = new Uint16Array(N), i.HEAPU32 = pn = new Uint32Array(N), i.HEAPF32 = Br = new Float32Array(N), i.HEAPF64 = Zn = new Float64Array(N);
      }
      var Nn = i.INITIAL_MEMORY || 16777216;
      if (x)
        Q = i.wasmMemory, Ue = i.buffer;
      else if (i.wasmMemory)
        Q = i.wasmMemory;
      else if (Q = new WebAssembly.Memory({ initial: Nn / 65536, maximum: 2147483648 / 65536, shared: true }), !(Q.buffer instanceof SharedArrayBuffer))
        throw U("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), y && console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"), Error("bad memory");
      Q && (Ue = Q.buffer), Nn = Ue.byteLength, ur(Ue);
      var Hr, wr = [], mn = [], zn = [], Ol = [], Wa = [], Ms = false, _i = false;
      x || mn.push({ func: function() {
        Bh();
      } });
      function gm() {
        if (!x) {
          if (i.preRun)
            for (typeof i.preRun == "function" && (i.preRun = [i.preRun]); i.preRun.length; )
              Nh(i.preRun.shift());
          rc(wr);
        }
      }
      function Pl() {
        Ms = true, !x && rc(mn);
      }
      function zy() {
        x || rc(zn);
      }
      function Ih() {
        x || (_i = true);
      }
      function fn() {
        if (!x) {
          if (i.postRun)
            for (typeof i.postRun == "function" && (i.postRun = [i.postRun]); i.postRun.length; )
              By(i.postRun.shift());
          rc(Wa);
        }
      }
      function Nh(N) {
        wr.unshift(N);
      }
      function By(N) {
        Wa.unshift(N);
      }
      var vi = 0, ja = null, Ml = null;
      function Vy(N) {
        fe(!x, "addRunDependency cannot be used in a pthread worker"), vi++, i.monitorRunDependencies && i.monitorRunDependencies(vi);
      }
      function Wy(N) {
        if (vi--, i.monitorRunDependencies && i.monitorRunDependencies(vi), vi == 0 && (ja !== null && (clearInterval(ja), ja = null), Ml)) {
          var D = Ml;
          Ml = null, D();
        }
      }
      i.preloadedImages = {}, i.preloadedAudios = {};
      function Ci(N) {
        i.onAbort && i.onAbort(N), x && console.error("Pthread aborting at " + new Error().stack), N += "", U(N), pe = true, ie = 1, N = "abort(" + N + "). Build with -s ASSERTIONS=1 for more info.";
        var D = new WebAssembly.RuntimeError(N);
        throw u(D), D;
      }
      function Th(N, D) {
        return String.prototype.startsWith ? N.startsWith(D) : N.indexOf(D) === 0;
      }
      var tc = "data:application/octet-stream;base64,";
      function Eh(N) {
        return Th(N, tc);
      }
      var jy = "file://";
      function Ah(N) {
        return Th(N, jy);
      }
      var dn = "tfjs-backend-wasm-threaded-simd.wasm";
      Eh(dn) || (dn = C(dn));
      function $h(N) {
        try {
          if (N == dn && X)
            return new Uint8Array(X);
          if (R)
            return R(N);
          throw "both async and sync fetching of the wasm failed";
        } catch (D) {
          Ci(D);
        }
      }
      function Gy() {
        if (!X && (h || g)) {
          if (typeof fetch == "function" && !Ah(dn))
            return fetch(dn, { credentials: "same-origin" }).then(function(N) {
              if (!N.ok)
                throw "failed to load wasm binary file at '" + dn + "'";
              return N.arrayBuffer();
            }).catch(function() {
              return $h(dn);
            });
          if ($)
            return new Promise(function(N, D) {
              $(dn, function(B) {
                N(new Uint8Array(B));
              }, D);
            });
        }
        return Promise.resolve().then(function() {
          return $h(dn);
        });
      }
      function Uy() {
        var N = { a: Ob };
        function D(xe, Te) {
          var bt = xe.exports;
          if (i.asm = bt, Hr = i.asm.F, se = Te, !x) {
            var kr = Ee.unusedWorkers.length;
            Ee.unusedWorkers.forEach(function(hr) {
              Ee.loadWasmModuleToWorker(hr, function() {
                --kr || Wy("wasm-instantiate");
              });
            });
          }
        }
        x || Vy("wasm-instantiate");
        function B(xe) {
          D(xe.instance, xe.module);
        }
        function q(xe) {
          return Gy().then(function(Te) {
            return WebAssembly.instantiate(Te, N);
          }).then(xe, function(Te) {
            U("failed to asynchronously prepare wasm: " + Te), Ci(Te);
          });
        }
        function ye() {
          return !X && typeof WebAssembly.instantiateStreaming == "function" && !Eh(dn) && !Ah(dn) && typeof fetch == "function" ? fetch(dn, { credentials: "same-origin" }).then(function(xe) {
            var Te = WebAssembly.instantiateStreaming(xe, N);
            return Te.then(B, function(bt) {
              return U("wasm streaming compile failed: " + bt), U("falling back to ArrayBuffer instantiation"), q(B);
            });
          }) : q(B);
        }
        if (i.instantiateWasm)
          try {
            var he = i.instantiateWasm(N, D);
            return he;
          } catch (xe) {
            return U("Module.instantiateWasm callback failed with error: " + xe), false;
          }
        return ye().catch(u), {};
      }
      var Hy = { 10024: function() {
        throw "Canceled!";
      }, 10042: function(N, D) {
        setTimeout(function() {
          NI(N, D);
        }, 0);
      } };
      function Dh() {
        Ee.initRuntime();
      }
      function rc(N) {
        for (; N.length > 0; ) {
          var D = N.shift();
          if (typeof D == "function") {
            D(i);
            continue;
          }
          var B = D.func;
          typeof B == "number" ? D.arg === void 0 ? Hr.get(B)() : Hr.get(B)(D.arg) : B(D.arg === void 0 ? null : D.arg);
        }
      }
      function xm(N, D) {
        if (N <= 0 || N > t().length || N & true || D < 0)
          return -28;
        if (D == 0)
          return 0;
        D >= 2147483647 && (D = 1 / 0);
        var B = Atomics.load(o(), lc >> 2), q = 0;
        if (B == N) {
          var ye = Atomics.compareExchange(o(), lc >> 2, B, 0);
          if (ye == B && (--D, q = 1, D <= 0))
            return 1;
        }
        var he = Atomics.notify(o(), N >> 2, D);
        if (he >= 0)
          return he + q;
        throw "Atomics.notify returned an unexpected value " + he;
      }
      i._emscripten_futex_wake = xm;
      function qy(N) {
        if (x)
          throw "Internal Error! killThread() can only ever be called from main application thread!";
        if (!N)
          throw "Internal Error! Null pthread_ptr in killThread!";
        o()[N + 12 >> 2] = 0;
        var D = Ee.pthreads[N];
        D.worker.terminate(), Ee.freeThreadData(D), Ee.runningWorkers.splice(Ee.runningWorkers.indexOf(D.worker), 1), D.worker.pthread = void 0;
      }
      function Ky(N) {
        if (x)
          throw "Internal Error! cancelThread() can only ever be called from main application thread!";
        if (!N)
          throw "Internal Error! Null pthread_ptr in cancelThread!";
        var D = Ee.pthreads[N];
        D.worker.postMessage({ cmd: "cancel" });
      }
      function Xy(N) {
        if (x)
          throw "Internal Error! cleanupThread() can only ever be called from main application thread!";
        if (!N)
          throw "Internal Error! Null pthread_ptr in cleanupThread!";
        var D = Ee.pthreads[N];
        if (D) {
          o()[N + 12 >> 2] = 0;
          var B = D.worker;
          Ee.returnWorkerToPool(B);
        }
      }
      var Ee = { unusedWorkers: [], runningWorkers: [], initMainThreadBlock: function() {
        for (var N = Math.min(4, Math.max(1, (navigator.hardwareConcurrency || 1) / 2)), D = 0; D < N; ++D)
          Ee.allocateUnusedWorker();
      }, initRuntime: function() {
        for (var N = zl(228), D = 0; D < 228 / 4; ++D)
          s()[N / 4 + D] = 0;
        o()[N + 12 >> 2] = N;
        var B = N + 152;
        o()[B >> 2] = B;
        for (var q = zl(512), D = 0; D < 128; ++D)
          s()[q / 4 + D] = 0;
        Atomics.store(s(), N + 100 >> 2, q), Atomics.store(s(), N + 40 >> 2, N), lw(N, !g, 1), II(N);
      }, initWorker: function() {
      }, pthreads: {}, threadExitHandlers: [], setThreadStatus: function() {
      }, runExitHandlers: function() {
        for (; Ee.threadExitHandlers.length > 0; )
          Ee.threadExitHandlers.pop()();
        x && sc() && SI();
      }, runExitHandlersAndDeinitThread: function(N, D) {
        Atomics.store(s(), N + 56 >> 2, 1), Atomics.store(s(), N + 60 >> 2, 0), Ee.runExitHandlers(), Atomics.store(s(), N + 4 >> 2, D), Atomics.store(s(), N + 0 >> 2, 1), xm(N + 0, 2147483647), lw(0, 0, 0);
      }, threadExit: function(N) {
        var D = sc();
        D && (Ee.runExitHandlersAndDeinitThread(D, N), x && postMessage({ cmd: "exit" }));
      }, threadCancel: function() {
        Ee.runExitHandlersAndDeinitThread(sc(), -1), postMessage({ cmd: "cancelDone" });
      }, terminateAllThreads: function() {
        for (var N in Ee.pthreads) {
          var D = Ee.pthreads[N];
          D && D.worker && Ee.returnWorkerToPool(D.worker);
        }
        Ee.pthreads = {};
        for (var B = 0; B < Ee.unusedWorkers.length; ++B) {
          var q = Ee.unusedWorkers[B];
          q.terminate();
        }
        Ee.unusedWorkers = [];
        for (var B = 0; B < Ee.runningWorkers.length; ++B) {
          var q = Ee.runningWorkers[B], D = q.pthread;
          Ee.freeThreadData(D), q.terminate();
        }
        Ee.runningWorkers = [];
      }, freeThreadData: function(N) {
        if (!!N) {
          if (N.threadInfoStruct) {
            var D = o()[N.threadInfoStruct + 100 >> 2];
            o()[N.threadInfoStruct + 100 >> 2] = 0, Cm(D), Cm(N.threadInfoStruct);
          }
          N.threadInfoStruct = 0, N.allocatedOwnStack && N.stackBase && Cm(N.stackBase), N.stackBase = 0, N.worker && (N.worker.pthread = null);
        }
      }, returnWorkerToPool: function(N) {
        Ee.runWithoutMainThreadQueuedCalls(function() {
          delete Ee.pthreads[N.pthread.threadInfoStruct], Ee.unusedWorkers.push(N), Ee.runningWorkers.splice(Ee.runningWorkers.indexOf(N), 1), Ee.freeThreadData(N.pthread), N.pthread = void 0;
        });
      }, runWithoutMainThreadQueuedCalls: function(N) {
        o()[DI >> 2] = 0;
        try {
          N();
        } finally {
          o()[DI >> 2] = 1;
        }
      }, receiveObjectTransfer: function(N) {
      }, loadWasmModuleToWorker: function(N, D) {
        N.onmessage = function(B) {
          var q = B.data, ye = q.cmd;
          if (N.pthread && (Ee.currentProxiedOperationCallerThread = N.pthread.threadInfoStruct), q.targetThread && q.targetThread != sc()) {
            var he = Ee.pthreads[q.targetThread];
            he ? he.worker.postMessage(B.data, q.transferList) : console.error('Internal error! Worker sent a message "' + ye + '" to target pthread ' + q.targetThread + ", but that thread no longer exists!"), Ee.currentProxiedOperationCallerThread = void 0;
            return;
          }
          if (ye === "processQueuedMainThreadWork")
            iw();
          else if (ye === "spawnThread")
            Lh(B.data);
          else if (ye === "cleanupThread")
            Xy(q.thread);
          else if (ye === "killThread")
            qy(q.thread);
          else if (ye === "cancelThread")
            Ky(q.thread);
          else if (ye === "loaded")
            N.loaded = true, D && D(N), N.runPthread && (N.runPthread(), delete N.runPthread);
          else if (ye === "print")
            G("Thread " + q.threadId + ": " + q.text);
          else if (ye === "printErr")
            U("Thread " + q.threadId + ": " + q.text);
          else if (ye === "alert")
            alert("Thread " + q.threadId + ": " + q.text);
          else if (ye === "exit") {
            var xe = N.pthread && Atomics.load(s(), N.pthread.threadInfoStruct + 64 >> 2);
            xe && Ee.returnWorkerToPool(N);
          } else if (ye === "exitProcess")
            try {
              WW(q.returnCode);
            } catch (Te) {
              if (Te instanceof Im)
                return;
              throw Te;
            }
          else
            ye === "cancelDone" ? Ee.returnWorkerToPool(N) : ye === "objectTransfer" ? Ee.receiveObjectTransfer(B.data) : B.data.target === "setimmediate" ? N.postMessage(B.data) : U("worker sent an unknown command " + ye);
          Ee.currentProxiedOperationCallerThread = void 0;
        }, N.onerror = function(B) {
          U("pthread sent an error! " + B.filename + ":" + B.lineno + ": " + B.message);
        }, y && (N.on("message", function(B) {
          N.onmessage({ data: B });
        }), N.on("error", function(B) {
          N.onerror(B);
        }), N.on("exit", function(B) {
        })), N.postMessage({ cmd: "load", urlOrBlob: i.mainScriptUrlOrBlob || r, wasmMemory: Q, wasmModule: se });
      }, allocateUnusedWorker: function() {
        var N = C("tfjs-backend-wasm-threaded-simd.worker.js");
        Ee.unusedWorkers.push(new Worker(N));
      }, getNewWorker: function() {
        return Ee.unusedWorkers.length == 0 && (Ee.allocateUnusedWorker(), Ee.loadWasmModuleToWorker(Ee.unusedWorkers[0])), Ee.unusedWorkers.length > 0 ? Ee.unusedWorkers.pop() : null;
      }, busySpinWait: function(N) {
        for (var D = performance.now() + N; performance.now() < D; )
          ;
      } };
      function Yy(N, D) {
        AI(N, D), ic(N);
      }
      i.establishStackSpace = Yy;
      function Zy() {
        return ne;
      }
      i.getNoExitRuntime = Zy;
      function Jy(N, D) {
        return Hr.get(N)(D);
      }
      i.invokeEntryPoint = Jy;
      function Qy(N, D, B, q) {
        Ci("Assertion failed: " + Ce(N) + ", at: " + [D ? Ce(D) : "unknown filename", B, q ? Ce(q) : "unknown function"]);
      }
      function eb(N, D) {
        var B = _main(N, D);
      }
      var Ll;
      y ? Ll = function() {
        var N = process.hrtime();
        return N[0] * 1e3 + N[1] / 1e6;
      } : x ? Ll = function() {
        return performance.now() - i.__performance_now_clock_drift;
      } : typeof dateNow != "undefined" ? Ll = dateNow : Ll = function() {
        return performance.now();
      };
      function tb(N) {
        return o()[vI() >> 2] = N, N;
      }
      function rb(N, D) {
        if (x)
          return Ga(1, 1, N, D);
      }
      function nb(N, D) {
        if (N == D)
          postMessage({ cmd: "processQueuedMainThreadWork" });
        else if (x)
          postMessage({ targetThread: N, cmd: "processThreadQueue" });
        else {
          var B = Ee.pthreads[N], q = B && B.worker;
          if (!q)
            return;
          q.postMessage({ cmd: "processThreadQueue" });
        }
        return 1;
      }
      function ob() {
        Ci();
      }
      function sb(N, D, B) {
        var q = cb(D, B);
        return Hy[N].apply(null, q);
      }
      function ib(N, D) {
      }
      function ab(N, D, B) {
        if (N <= 0 || N > t().length || N & true)
          return -28;
        if (h) {
          if (Atomics.load(o(), N >> 2) != D)
            return -6;
          for (var ye = performance.now(), he = ye + B, xe = Atomics.exchange(o(), lc >> 2, N); ; ) {
            if (ye = performance.now(), ye > he)
              return xe = Atomics.exchange(o(), lc >> 2, 0), -73;
            if (xe = Atomics.exchange(o(), lc >> 2, 0), xe == 0)
              break;
            if (iw(), Atomics.load(o(), N >> 2) != D)
              return -6;
            xe = Atomics.exchange(o(), lc >> 2, N);
          }
          return 0;
        } else {
          var q = Atomics.wait(o(), N >> 2, D, B);
          if (q === "timed-out")
            return -73;
          if (q === "not-equal")
            return -6;
          if (q === "ok")
            return 0;
          throw "Atomics.wait returned an unexpected value " + q;
        }
      }
      function lb(N, D, B) {
        n().copyWithin(N, D, D + B);
      }
      function ub() {
        return y ? pc("os").cpus().length : navigator.hardwareConcurrency;
      }
      function Ga(N, D) {
        for (var B = arguments.length - 2, q = Sm(), ye = B, he = ac(ye * 8), xe = he >> 3, Te = 0; Te < B; Te++) {
          var bt = arguments[2 + Te];
          a()[xe + Te] = bt;
        }
        var kr = EI(N, ye, he, D);
        return ic(q), kr;
      }
      var ym = [], bm = [];
      function cb(N, D) {
        bm.length = 0;
        var B;
        for (D >>= 2; B = n()[N++]; ) {
          var q = B < 105;
          q && D & 1 && D++, bm.push(q ? a()[D++ >> 1] : o()[D]), ++D;
        }
        return bm;
      }
      function pb(N, D, B) {
        ym.length = D;
        for (var q = B >> 3, ye = 0; ye < D; ye++)
          ym[ye] = a()[q + ye];
        var he = N < 0, xe = he ? Hy[-N - 1] : Fb[N];
        return xe.apply(null, ym);
      }
      function mb() {
        return n().length;
      }
      function fb(N) {
        try {
          return Q.grow(N - Ue.byteLength + 65535 >>> 16), ur(Q.buffer), 1;
        } catch (D) {
        }
      }
      function db(N) {
        var D = mb();
        if (N <= D)
          return false;
        var B = 2147483648;
        if (N > B)
          return false;
        for (var q = 1; q <= 4; q *= 2) {
          var ye = D * (1 + 0.2 / q);
          ye = Math.min(ye, N + 100663296);
          var he = Math.min(B, Nt(Math.max(N, ye), 65536)), xe = fb(he);
          if (xe)
            return true;
        }
        return false;
      }
      var Je = { inEventHandler: 0, removeAllEventListeners: function() {
        for (var N = Je.eventHandlers.length - 1; N >= 0; --N)
          Je._removeHandler(N);
        Je.eventHandlers = [], Je.deferredCalls = [];
      }, registerRemoveEventListeners: function() {
        Je.removeEventListenersRegistered || (Ol.push(Je.removeAllEventListeners), Je.removeEventListenersRegistered = true);
      }, deferredCalls: [], deferCall: function(N, D, B) {
        function q(xe, Te) {
          if (xe.length != Te.length)
            return false;
          for (var bt in xe)
            if (xe[bt] != Te[bt])
              return false;
          return true;
        }
        for (var ye in Je.deferredCalls) {
          var he = Je.deferredCalls[ye];
          if (he.targetFunction == N && q(he.argsList, B))
            return;
        }
        Je.deferredCalls.push({ targetFunction: N, precedence: D, argsList: B }), Je.deferredCalls.sort(function(xe, Te) {
          return xe.precedence < Te.precedence;
        });
      }, removeDeferredCalls: function(N) {
        for (var D = 0; D < Je.deferredCalls.length; ++D)
          Je.deferredCalls[D].targetFunction == N && (Je.deferredCalls.splice(D, 1), --D);
      }, canPerformEventHandlerRequests: function() {
        return Je.inEventHandler && Je.currentEventHandler.allowsDeferredCalls;
      }, runDeferredCalls: function() {
        if (!!Je.canPerformEventHandlerRequests())
          for (var N = 0; N < Je.deferredCalls.length; ++N) {
            var D = Je.deferredCalls[N];
            Je.deferredCalls.splice(N, 1), --N, D.targetFunction.apply(null, D.argsList);
          }
      }, eventHandlers: [], removeAllHandlersOnTarget: function(N, D) {
        for (var B = 0; B < Je.eventHandlers.length; ++B)
          Je.eventHandlers[B].target == N && (!D || D == Je.eventHandlers[B].eventTypeString) && Je._removeHandler(B--);
      }, _removeHandler: function(N) {
        var D = Je.eventHandlers[N];
        D.target.removeEventListener(D.eventTypeString, D.eventListenerFunc, D.useCapture), Je.eventHandlers.splice(N, 1);
      }, registerOrRemoveHandler: function(N) {
        var D = function(ye) {
          ++Je.inEventHandler, Je.currentEventHandler = N, Je.runDeferredCalls(), N.handlerFunc(ye), Je.runDeferredCalls(), --Je.inEventHandler;
        };
        if (N.callbackfunc)
          N.eventListenerFunc = D, N.target.addEventListener(N.eventTypeString, D, N.useCapture), Je.eventHandlers.push(N), Je.registerRemoveEventListeners();
        else
          for (var B = 0; B < Je.eventHandlers.length; ++B)
            Je.eventHandlers[B].target == N.target && Je.eventHandlers[B].eventTypeString == N.eventTypeString && Je._removeHandler(B--);
      }, queueEventHandlerOnThread_iiii: function(N, D, B, q, ye) {
        var he = Sm(), xe = ac(12);
        o()[xe >> 2] = B, o()[xe + 4 >> 2] = q, o()[xe + 8 >> 2] = ye, aw(0, N, 637534208, D, q, xe), ic(he);
      }, getTargetThreadForEventCallback: function(N) {
        switch (N) {
          case 1:
            return 0;
          case 2:
            return Ee.currentProxiedOperationCallerThread;
          default:
            return N;
        }
      }, getNodeNameForTarget: function(N) {
        return N ? N == window ? "#window" : N == screen ? "#screen" : N && N.nodeName ? N.nodeName : "" : "";
      }, fullscreenEnabled: function() {
        return document.fullscreenEnabled || document.webkitFullscreenEnabled;
      } };
      function hb(N) {
        var D = lt(N) + 1, B = zl(D);
        return qe(N, B, D), B;
      }
      function gb(N, D, B, q) {
        var ye = Sm(), he = ac(12), xe = 0;
        D && (xe = hb(D)), o()[he >> 2] = xe, o()[he + 4 >> 2] = B, o()[he + 8 >> 2] = q, aw(0, N, 657457152, 0, xe, he), ic(ye);
      }
      function xb(N, D, B, q) {
        D = D ? Ce(D) : "", gb(N, D, B, q);
      }
      function yb(N) {
        return N > 2 ? Ce(N) : N;
      }
      var bb = [0, typeof document != "undefined" ? document : 0, typeof window != "undefined" ? window : 0];
      function wb(N) {
        N = yb(N);
        var D = bb[N] || (typeof document != "undefined" ? document.querySelector(N) : void 0);
        return D;
      }
      function wm(N) {
        return wb(N);
      }
      function Rh(N, D, B) {
        var q = wm(N);
        if (!q)
          return -4;
        if (q.canvasSharedPtr && (o()[q.canvasSharedPtr >> 2] = D, o()[q.canvasSharedPtr + 4 >> 2] = B), q.offscreenCanvas || !q.controlTransferredOffscreen) {
          q.offscreenCanvas && (q = q.offscreenCanvas);
          var ye = false;
          if (q.GLctxObject && q.GLctxObject.GLctx) {
            var he = q.GLctxObject.GLctx.getParameter(2978);
            ye = he[0] === 0 && he[1] === 0 && he[2] === q.width && he[3] === q.height;
          }
          q.width = D, q.height = B, ye && q.GLctxObject.GLctx.viewport(0, 0, D, B);
        } else if (q.canvasSharedPtr) {
          var xe = o()[q.canvasSharedPtr + 8 >> 2];
          return xb(xe, N, D, B), 1;
        } else
          return -4;
        return 0;
      }
      function Fh(N, D, B) {
        return x ? Ga(2, 1, N, D, B) : Rh(N, D, B);
      }
      function kb(N, D, B) {
        var q = wm(N);
        return q ? Rh(N, D, B) : Fh(N, D, B);
      }
      function _b(N) {
      }
      function vb(N, D) {
      }
      function Cb(N) {
        var D = N.getExtension("ANGLE_instanced_arrays");
        if (D)
          return N.vertexAttribDivisor = function(B, q) {
            D.vertexAttribDivisorANGLE(B, q);
          }, N.drawArraysInstanced = function(B, q, ye, he) {
            D.drawArraysInstancedANGLE(B, q, ye, he);
          }, N.drawElementsInstanced = function(B, q, ye, he, xe) {
            D.drawElementsInstancedANGLE(B, q, ye, he, xe);
          }, 1;
      }
      function Sb(N) {
        var D = N.getExtension("OES_vertex_array_object");
        if (D)
          return N.createVertexArray = function() {
            return D.createVertexArrayOES();
          }, N.deleteVertexArray = function(B) {
            D.deleteVertexArrayOES(B);
          }, N.bindVertexArray = function(B) {
            D.bindVertexArrayOES(B);
          }, N.isVertexArray = function(B) {
            return D.isVertexArrayOES(B);
          }, 1;
      }
      function Ib(N) {
        var D = N.getExtension("WEBGL_draw_buffers");
        if (D)
          return N.drawBuffers = function(B, q) {
            D.drawBuffersWEBGL(B, q);
          }, 1;
      }
      function Nb(N) {
        return !!(N.multiDrawWebgl = N.getExtension("WEBGL_multi_draw"));
      }
      var dt = { counter: 1, buffers: [], programs: [], framebuffers: [], renderbuffers: [], textures: [], uniforms: [], shaders: [], vaos: [], contexts: {}, offscreenCanvases: {}, timerQueriesEXT: [], programInfos: {}, stringCache: {}, unpackAlignment: 4, recordError: function(D) {
        dt.lastError || (dt.lastError = D);
      }, getNewId: function(N) {
        for (var D = dt.counter++, B = N.length; B < D; B++)
          N[B] = null;
        return D;
      }, getSource: function(N, D, B, q) {
        for (var ye = "", he = 0; he < D; ++he) {
          var xe = q ? o()[q + he * 4 >> 2] : -1;
          ye += Ce(o()[B + he * 4 >> 2], xe < 0 ? void 0 : xe);
        }
        return ye;
      }, createContext: function(N, D) {
        var B = N.getContext("webgl", D);
        if (!B)
          return 0;
        var q = dt.registerContext(B, D);
        return q;
      }, registerContext: function(N, D) {
        var B = zl(8);
        o()[B + 4 >> 2] = sc();
        var q = { handle: B, attributes: D, version: D.majorVersion, GLctx: N };
        return N.canvas && (N.canvas.GLctxObject = q), dt.contexts[B] = q, (typeof D.enableExtensionsByDefault == "undefined" || D.enableExtensionsByDefault) && dt.initExtensions(q), B;
      }, makeContextCurrent: function(N) {
        return dt.currentContext = dt.contexts[N], i.ctx = Ua = dt.currentContext && dt.currentContext.GLctx, !(N && !Ua);
      }, getContext: function(N) {
        return dt.contexts[N];
      }, deleteContext: function(N) {
        dt.currentContext === dt.contexts[N] && (dt.currentContext = null), typeof Je == "object" && Je.removeAllHandlersOnTarget(dt.contexts[N].GLctx.canvas), dt.contexts[N] && dt.contexts[N].GLctx.canvas && (dt.contexts[N].GLctx.canvas.GLctxObject = void 0), Cm(dt.contexts[N].handle), dt.contexts[N] = null;
      }, initExtensions: function(N) {
        if (N || (N = dt.currentContext), !N.initExtensionsDone) {
          N.initExtensionsDone = true;
          var D = N.GLctx;
          Cb(D), Sb(D), Ib(D), D.disjointTimerQueryExt = D.getExtension("EXT_disjoint_timer_query"), Nb(D);
          var B = D.getSupportedExtensions() || [];
          B.forEach(function(q) {
            q.indexOf("lose_context") < 0 && q.indexOf("debug") < 0 && D.getExtension(q);
          });
        }
      }, populateUniformTable: function(N) {
        for (var D = dt.programs[N], B = dt.programInfos[N] = { uniforms: {}, maxUniformLength: 0, maxAttributeLength: -1, maxUniformBlockNameLength: -1 }, q = B.uniforms, ye = Ua.getProgramParameter(D, 35718), he = 0; he < ye; ++he) {
          var xe = Ua.getActiveUniform(D, he), Te = xe.name;
          B.maxUniformLength = Math.max(B.maxUniformLength, Te.length + 1), Te.slice(-1) == "]" && (Te = Te.slice(0, Te.lastIndexOf("[")));
          var bt = Ua.getUniformLocation(D, Te);
          if (bt) {
            var kr = dt.getNewId(dt.uniforms);
            q[Te] = [xe.size, kr], dt.uniforms[kr] = bt;
            for (var hr = 1; hr < xe.size; ++hr) {
              var qa = Te + "[" + hr + "]";
              bt = Ua.getUniformLocation(D, qa), kr = dt.getNewId(dt.uniforms), dt.uniforms[kr] = bt;
            }
          }
        }
      } }, Tb = ["default", "low-power", "high-performance"];
      function Eb(N, D) {
        var B = D >> 2, q = o()[B + (24 >> 2)], ye = { alpha: !!o()[B + (0 >> 2)], depth: !!o()[B + (4 >> 2)], stencil: !!o()[B + (8 >> 2)], antialias: !!o()[B + (12 >> 2)], premultipliedAlpha: !!o()[B + (16 >> 2)], preserveDrawingBuffer: !!o()[B + (20 >> 2)], powerPreference: Tb[q], failIfMajorPerformanceCaveat: !!o()[B + (28 >> 2)], majorVersion: o()[B + (32 >> 2)], minorVersion: o()[B + (36 >> 2)], enableExtensionsByDefault: o()[B + (40 >> 2)], explicitSwapControl: o()[B + (44 >> 2)], proxyContextToMainThread: o()[B + (48 >> 2)], renderViaOffscreenBackBuffer: o()[B + (52 >> 2)] }, he = wm(N);
        if (!he || ye.explicitSwapControl)
          return 0;
        var xe = dt.createContext(he, ye);
        return xe;
      }
      function Ab(N, D) {
        return Eb(N, D);
      }
      var nc = { mappings: {}, buffers: [null, [], []], printChar: function(N, D) {
        var B = nc.buffers[N];
        D === 0 || D === 10 ? ((N === 1 ? G : U)($e(B, 0)), B.length = 0) : B.push(D);
      }, varargs: void 0, get: function() {
        nc.varargs += 4;
        var N = o()[nc.varargs - 4 >> 2];
        return N;
      }, getStr: function(N) {
        var D = Ce(N);
        return D;
      }, get64: function(N, D) {
        return N;
      } };
      function Oh(N) {
        return x ? Ga(3, 1, N) : 0;
      }
      function Ph(N, D, B, q, ye) {
        if (x)
          return Ga(4, 1, N, D, B, q, ye);
      }
      function Mh(N, D, B, q) {
        if (x)
          return Ga(5, 1, N, D, B, q);
        for (var ye = 0, he = 0; he < B; he++) {
          for (var xe = o()[D + he * 8 >> 2], Te = o()[D + (he * 8 + 4) >> 2], bt = 0; bt < Te; bt++)
            nc.printChar(N, n()[xe + bt]);
          ye += Te;
        }
        return o()[q >> 2] = ye, 0;
      }
      function $b(N) {
        var D = Ee.threadExitHandlers.pop();
        N && D();
      }
      function Db(N, D) {
        Ee.threadExitHandlers.push(function() {
          Hr.get(N)(D);
        });
      }
      function Lh(N) {
        if (x)
          throw "Internal Error! spawnThread() can only ever be called from main application thread!";
        var D = Ee.getNewWorker();
        if (D.pthread !== void 0)
          throw "Internal error!";
        if (!N.pthread_ptr)
          throw "Internal error, no pthread ptr!";
        Ee.runningWorkers.push(D);
        for (var B = zl(128 * 4), q = 0; q < 128; ++q)
          o()[B + q * 4 >> 2] = 0;
        var ye = N.stackBase + N.stackSize, he = Ee.pthreads[N.pthread_ptr] = { worker: D, stackBase: N.stackBase, stackSize: N.stackSize, allocatedOwnStack: N.allocatedOwnStack, threadInfoStruct: N.pthread_ptr }, xe = he.threadInfoStruct >> 2;
        Atomics.store(s(), xe + (64 >> 2), N.detached), Atomics.store(s(), xe + (100 >> 2), B), Atomics.store(s(), xe + (40 >> 2), he.threadInfoStruct), Atomics.store(s(), xe + (80 >> 2), N.stackSize), Atomics.store(s(), xe + (76 >> 2), ye), Atomics.store(s(), xe + (104 >> 2), N.stackSize), Atomics.store(s(), xe + (104 + 8 >> 2), ye), Atomics.store(s(), xe + (104 + 12 >> 2), N.detached);
        var Te = CI(), bt = Te + 40;
        Atomics.store(s(), xe + (172 >> 2), bt), D.pthread = he;
        var kr = { cmd: "run", start_routine: N.startRoutine, arg: N.arg, threadInfoStruct: N.pthread_ptr, stackBase: N.stackBase, stackSize: N.stackSize };
        D.runPthread = function() {
          kr.time = performance.now(), D.postMessage(kr, N.transferList);
        }, D.loaded && (D.runPthread(), delete D.runPthread);
      }
      function Rb(N, D, B, q) {
        if (typeof SharedArrayBuffer == "undefined")
          return U("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
        if (!N)
          return U("pthread_create called with a null thread pointer!"), 28;
        var ye = [], he = 0;
        if (x && (ye.length === 0 || he))
          return TI(687865856, N, D, B, q);
        if (he)
          return he;
        var xe = 0, Te = 0, bt = 0;
        D && D != -1 ? (xe = o()[D >> 2], xe += 81920, Te = o()[D + 8 >> 2], bt = o()[D + 12 >> 2] !== 0) : xe = 2097152;
        var kr = Te == 0;
        kr ? Te = $I(16, xe) : (Te -= xe, fe(Te > 0));
        for (var hr = zl(228), qa = 0; qa < 228 >> 2; ++qa)
          s()[(hr >> 2) + qa] = 0;
        o()[N >> 2] = hr, o()[hr + 12 >> 2] = hr;
        var uc = hr + 152;
        o()[uc >> 2] = uc;
        var qr = { stackBase: Te, stackSize: xe, allocatedOwnStack: kr, detached: bt, startRoutine: B, pthread_ptr: hr, arg: q, transferList: ye };
        return x ? (qr.cmd = "spawnThread", postMessage(qr, ye)) : Lh(qr), 0;
      }
      function zh(N) {
        if (x)
          return Ga(6, 1, N);
        switch (N) {
          case 30:
            return 16384;
          case 85:
            var D = 2147483648;
            return D / 16384;
          case 132:
          case 133:
          case 12:
          case 137:
          case 138:
          case 15:
          case 235:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 149:
          case 13:
          case 10:
          case 236:
          case 153:
          case 9:
          case 21:
          case 22:
          case 159:
          case 154:
          case 14:
          case 77:
          case 78:
          case 139:
          case 82:
          case 68:
          case 67:
          case 164:
          case 11:
          case 29:
          case 47:
          case 48:
          case 95:
          case 52:
          case 51:
          case 46:
            return 200809;
          case 27:
          case 246:
          case 127:
          case 128:
          case 23:
          case 24:
          case 160:
          case 161:
          case 181:
          case 182:
          case 242:
          case 183:
          case 184:
          case 243:
          case 244:
          case 245:
          case 165:
          case 178:
          case 179:
          case 49:
          case 50:
          case 168:
          case 169:
          case 175:
          case 170:
          case 171:
          case 172:
          case 97:
          case 76:
          case 32:
          case 173:
          case 35:
          case 80:
          case 81:
          case 79:
            return -1;
          case 176:
          case 177:
          case 7:
          case 155:
          case 8:
          case 157:
          case 125:
          case 126:
          case 92:
          case 93:
          case 129:
          case 130:
          case 131:
          case 94:
          case 91:
            return 1;
          case 74:
          case 60:
          case 69:
          case 70:
          case 4:
            return 1024;
          case 31:
          case 42:
          case 72:
            return 32;
          case 87:
          case 26:
          case 33:
            return 2147483647;
          case 34:
          case 1:
            return 47839;
          case 38:
          case 36:
            return 99;
          case 43:
          case 37:
            return 2048;
          case 0:
            return 2097152;
          case 3:
            return 65536;
          case 28:
            return 32768;
          case 44:
            return 32767;
          case 75:
            return 16384;
          case 39:
            return 1e3;
          case 89:
            return 700;
          case 71:
            return 256;
          case 40:
            return 255;
          case 2:
            return 100;
          case 180:
            return 64;
          case 25:
            return 20;
          case 5:
            return 16;
          case 6:
            return 6;
          case 73:
            return 4;
          case 84:
            return typeof navigator == "object" && navigator.hardwareConcurrency || 1;
        }
        return tb(28), -1;
      }
      x || Ee.initMainThreadBlock();
      var Ua, Fb = [null, rb, Fh, Oh, Ph, Mh, zh], Ob = { e: Qy, r: eb, x: nb, b: ob, y: sb, j: ib, c: ab, d: xm, f: Ll, p: lb, z: ub, u: pb, q: db, v: kb, i: _b, t: vb, w: Ab, m: Oh, n: Ph, g: Mh, o: Dh, a: Q || i.wasmMemory, k: $b, l: Db, h: Rb, s: zh }, _I = Uy(), Bh = i.___wasm_call_ctors = function() {
        return (Bh = i.___wasm_call_ctors = i.asm.A).apply(null, arguments);
      }, Pb = i._init = function() {
        return (Pb = i._init = i.asm.B).apply(null, arguments);
      }, Mb = i._register_tensor = function() {
        return (Mb = i._register_tensor = i.asm.C).apply(null, arguments);
      }, Lb = i._dispose_data = function() {
        return (Lb = i._dispose_data = i.asm.D).apply(null, arguments);
      }, zb = i._dispose = function() {
        return (zb = i._dispose = i.asm.E).apply(null, arguments);
      }, Bb = i._Abs = function() {
        return (Bb = i._Abs = i.asm.G).apply(null, arguments);
      }, Vb = i._Add = function() {
        return (Vb = i._Add = i.asm.H).apply(null, arguments);
      }, Wb = i._AddN = function() {
        return (Wb = i._AddN = i.asm.I).apply(null, arguments);
      }, jb = i._All = function() {
        return (jb = i._All = i.asm.J).apply(null, arguments);
      }, Gb = i._Any = function() {
        return (Gb = i._Any = i.asm.K).apply(null, arguments);
      }, Ub = i._ArgMax = function() {
        return (Ub = i._ArgMax = i.asm.L).apply(null, arguments);
      }, Hb = i._AvgPool = function() {
        return (Hb = i._AvgPool = i.asm.M).apply(null, arguments);
      }, qb = i._BatchMatMul = function() {
        return (qb = i._BatchMatMul = i.asm.N).apply(null, arguments);
      }, Kb = i._Ceil = function() {
        return (Kb = i._Ceil = i.asm.O).apply(null, arguments);
      }, Xb = i._ClipByValue = function() {
        return (Xb = i._ClipByValue = i.asm.P).apply(null, arguments);
      }, Yb = i._Conv2D = function() {
        return (Yb = i._Conv2D = i.asm.Q).apply(null, arguments);
      }, Zb = i._Conv2DBackpropInput = function() {
        return (Zb = i._Conv2DBackpropInput = i.asm.R).apply(null, arguments);
      }, Jb = i._Cos = function() {
        return (Jb = i._Cos = i.asm.S).apply(null, arguments);
      }, Qb = i._Cosh = function() {
        return (Qb = i._Cosh = i.asm.T).apply(null, arguments);
      }, ew = i._CropAndResize = function() {
        return (ew = i._CropAndResize = i.asm.U).apply(null, arguments);
      }, tw = i._Cumsum = function() {
        return (tw = i._Cumsum = i.asm.V).apply(null, arguments);
      }, rw = i._DepthToSpace = function() {
        return (rw = i._DepthToSpace = i.asm.W).apply(null, arguments);
      }, nw = i._DepthwiseConv2dNative = function() {
        return (nw = i._DepthwiseConv2dNative = i.asm.X).apply(null, arguments);
      }, ow = i._Elu = function() {
        return (ow = i._Elu = i.asm.Y).apply(null, arguments);
      }, Vh = i._Equal = function() {
        return (Vh = i._Equal = i.asm.Z).apply(null, arguments);
      }, Wh = i._Exp = function() {
        return (Wh = i._Exp = i.asm._).apply(null, arguments);
      }, jh = i._FlipLeftRight = function() {
        return (jh = i._FlipLeftRight = i.asm.$).apply(null, arguments);
      }, km = i._Floor = function() {
        return (km = i._Floor = i.asm.aa).apply(null, arguments);
      }, oc = i._FloorDiv = function() {
        return (oc = i._FloorDiv = i.asm.ba).apply(null, arguments);
      }, sw = i._FusedBatchNorm = function() {
        return (sw = i._FusedBatchNorm = i.asm.ca).apply(null, arguments);
      }, _m = i._FusedConv2D = function() {
        return (_m = i._FusedConv2D = i.asm.da).apply(null, arguments);
      }, Z = i._FusedDepthwiseConv2D = function() {
        return (Z = i._FusedDepthwiseConv2D = i.asm.ea).apply(null, arguments);
      }, oe = i._Gather = function() {
        return (oe = i._Gather = i.asm.fa).apply(null, arguments);
      }, ve = i._GatherNd = function() {
        return (ve = i._GatherNd = i.asm.ga).apply(null, arguments);
      }, ut = i._Greater = function() {
        return (ut = i._Greater = i.asm.ha).apply(null, arguments);
      }, er = i._GreaterEqual = function() {
        return (er = i._GreaterEqual = i.asm.ia).apply(null, arguments);
      }, Gt = i._LeakyRelu = function() {
        return (Gt = i._LeakyRelu = i.asm.ja).apply(null, arguments);
      }, et = i._Less = function() {
        return (et = i._Less = i.asm.ka).apply(null, arguments);
      }, rt = i._LessEqual = function() {
        return (rt = i._LessEqual = i.asm.la).apply(null, arguments);
      }, Er = i._Log = function() {
        return (Er = i._Log = i.asm.ma).apply(null, arguments);
      }, Si = i._LogicalAnd = function() {
        return (Si = i._LogicalAnd = i.asm.na).apply(null, arguments);
      }, Ii = i._Max = function() {
        return (Ii = i._Max = i.asm.oa).apply(null, arguments);
      }, Gh = i._MaxPool = function() {
        return (Gh = i._MaxPool = i.asm.pa).apply(null, arguments);
      }, vm = i._Maximum = function() {
        return (vm = i._Maximum = i.asm.qa).apply(null, arguments);
      }, Tn = i._Mean = function() {
        return (Tn = i._Mean = i.asm.ra).apply(null, arguments);
      }, Ha = i._Min = function() {
        return (Ha = i._Min = i.asm.sa).apply(null, arguments);
      }, Uh = i._Minimum = function() {
        return (Uh = i._Minimum = i.asm.ta).apply(null, arguments);
      }, tW = i._MirrorPad = function() {
        return (tW = i._MirrorPad = i.asm.ua).apply(null, arguments);
      }, rW = i._Multiply = function() {
        return (rW = i._Multiply = i.asm.va).apply(null, arguments);
      }, nW = i._Neg = function() {
        return (nW = i._Neg = i.asm.wa).apply(null, arguments);
      }, oW = i._NonMaxSuppressionV3 = function() {
        return (oW = i._NonMaxSuppressionV3 = i.asm.xa).apply(null, arguments);
      }, sW = i._NonMaxSuppressionV4 = function() {
        return (sW = i._NonMaxSuppressionV4 = i.asm.ya).apply(null, arguments);
      }, iW = i._NonMaxSuppressionV5 = function() {
        return (iW = i._NonMaxSuppressionV5 = i.asm.za).apply(null, arguments);
      }, aW = i._NotEqual = function() {
        return (aW = i._NotEqual = i.asm.Aa).apply(null, arguments);
      }, lW = i._OneHot = function() {
        return (lW = i._OneHot = i.asm.Ba).apply(null, arguments);
      }, uW = i._PadV2 = function() {
        return (uW = i._PadV2 = i.asm.Ca).apply(null, arguments);
      }, cW = i._Pow = function() {
        return (cW = i._Pow = i.asm.Da).apply(null, arguments);
      }, pW = i._Prelu = function() {
        return (pW = i._Prelu = i.asm.Ea).apply(null, arguments);
      }, mW = i._Prod = function() {
        return (mW = i._Prod = i.asm.Fa).apply(null, arguments);
      }, fW = i._RealDiv = function() {
        return (fW = i._RealDiv = i.asm.Ga).apply(null, arguments);
      }, dW = i._Relu = function() {
        return (dW = i._Relu = i.asm.Ha).apply(null, arguments);
      }, hW = i._Relu6 = function() {
        return (hW = i._Relu6 = i.asm.Ia).apply(null, arguments);
      }, gW = i._ResizeBilinear = function() {
        return (gW = i._ResizeBilinear = i.asm.Ja).apply(null, arguments);
      }, xW = i._Reverse = function() {
        return (xW = i._Reverse = i.asm.Ka).apply(null, arguments);
      }, yW = i._RotateWithOffset = function() {
        return (yW = i._RotateWithOffset = i.asm.La).apply(null, arguments);
      }, bW = i._Round = function() {
        return (bW = i._Round = i.asm.Ma).apply(null, arguments);
      }, wW = i._Rsqrt = function() {
        return (wW = i._Rsqrt = i.asm.Na).apply(null, arguments);
      }, kW = i._ScatterNd = function() {
        return (kW = i._ScatterNd = i.asm.Oa).apply(null, arguments);
      }, _W = i._SelectV2 = function() {
        return (_W = i._SelectV2 = i.asm.Pa).apply(null, arguments);
      }, vW = i._Sigmoid = function() {
        return (vW = i._Sigmoid = i.asm.Qa).apply(null, arguments);
      }, CW = i._Sin = function() {
        return (CW = i._Sin = i.asm.Ra).apply(null, arguments);
      }, SW = i._Softmax = function() {
        return (SW = i._Softmax = i.asm.Sa).apply(null, arguments);
      }, IW = i._Sqrt = function() {
        return (IW = i._Sqrt = i.asm.Ta).apply(null, arguments);
      }, NW = i._Square = function() {
        return (NW = i._Square = i.asm.Ua).apply(null, arguments);
      }, TW = i._SquaredDifference = function() {
        return (TW = i._SquaredDifference = i.asm.Va).apply(null, arguments);
      }, EW = i._Step = function() {
        return (EW = i._Step = i.asm.Wa).apply(null, arguments);
      }, AW = i._StridedSlice = function() {
        return (AW = i._StridedSlice = i.asm.Xa).apply(null, arguments);
      }, $W = i._Sub = function() {
        return ($W = i._Sub = i.asm.Ya).apply(null, arguments);
      }, DW = i._Sum = function() {
        return (DW = i._Sum = i.asm.Za).apply(null, arguments);
      }, RW = i._Tan = function() {
        return (RW = i._Tan = i.asm._a).apply(null, arguments);
      }, FW = i._Tanh = function() {
        return (FW = i._Tanh = i.asm.$a).apply(null, arguments);
      }, OW = i._Tile = function() {
        return (OW = i._Tile = i.asm.ab).apply(null, arguments);
      }, PW = i._TopK = function() {
        return (PW = i._TopK = i.asm.bb).apply(null, arguments);
      }, MW = i._Transform = function() {
        return (MW = i._Transform = i.asm.cb).apply(null, arguments);
      }, LW = i._Transpose = function() {
        return (LW = i._Transpose = i.asm.db).apply(null, arguments);
      }, zW = i.__FusedMatMul = function() {
        return (zW = i.__FusedMatMul = i.asm.eb).apply(null, arguments);
      }, zl = i._malloc = function() {
        return (zl = i._malloc = i.asm.fb).apply(null, arguments);
      }, Cm = i._free = function() {
        return (Cm = i._free = i.asm.gb).apply(null, arguments);
      }, vI = i.___errno_location = function() {
        return (vI = i.___errno_location = i.asm.hb).apply(null, arguments);
      }, CI = i._emscripten_get_global_libc = function() {
        return (CI = i._emscripten_get_global_libc = i.asm.ib).apply(null, arguments);
      }, sc = i._pthread_self = function() {
        return (sc = i._pthread_self = i.asm.jb).apply(null, arguments);
      }, SI = i.___pthread_tsd_run_dtors = function() {
        return (SI = i.___pthread_tsd_run_dtors = i.asm.kb).apply(null, arguments);
      }, iw = i._emscripten_main_thread_process_queued_calls = function() {
        return (iw = i._emscripten_main_thread_process_queued_calls = i.asm.lb).apply(null, arguments);
      }, BW = i._emscripten_current_thread_process_queued_calls = function() {
        return (BW = i._emscripten_current_thread_process_queued_calls = i.asm.mb).apply(null, arguments);
      }, II = i._emscripten_register_main_browser_thread_id = function() {
        return (II = i._emscripten_register_main_browser_thread_id = i.asm.nb).apply(null, arguments);
      }, NI = i.__emscripten_do_dispatch_to_thread = function() {
        return (NI = i.__emscripten_do_dispatch_to_thread = i.asm.ob).apply(null, arguments);
      }, TI = i._emscripten_sync_run_in_main_thread_4 = function() {
        return (TI = i._emscripten_sync_run_in_main_thread_4 = i.asm.pb).apply(null, arguments);
      }, EI = i._emscripten_run_in_main_runtime_thread_js = function() {
        return (EI = i._emscripten_run_in_main_runtime_thread_js = i.asm.qb).apply(null, arguments);
      }, aw = i.__emscripten_call_on_thread = function() {
        return (aw = i.__emscripten_call_on_thread = i.asm.rb).apply(null, arguments);
      }, VW = i._emscripten_tls_init = function() {
        return (VW = i._emscripten_tls_init = i.asm.sb).apply(null, arguments);
      }, lw = i.__emscripten_thread_init = function() {
        return (lw = i.__emscripten_thread_init = i.asm.tb).apply(null, arguments);
      }, Sm = i.stackSave = function() {
        return (Sm = i.stackSave = i.asm.ub).apply(null, arguments);
      }, ic = i.stackRestore = function() {
        return (ic = i.stackRestore = i.asm.vb).apply(null, arguments);
      }, ac = i.stackAlloc = function() {
        return (ac = i.stackAlloc = i.asm.wb).apply(null, arguments);
      }, AI = i._emscripten_stack_set_limits = function() {
        return (AI = i._emscripten_stack_set_limits = i.asm.xb).apply(null, arguments);
      }, $I = i._memalign = function() {
        return ($I = i._memalign = i.asm.yb).apply(null, arguments);
      }, DI = i.__emscripten_allow_main_runtime_queued_calls = 10016, lc = i.__emscripten_main_thread_futex = 11652;
      i.cwrap = we, i.PThread = Ee, i.PThread = Ee, i.wasmMemory = Q, i.ExitStatus = Im;
      var Hh;
      function Im(N) {
        this.name = "ExitStatus", this.message = "Program terminated with exit(" + N + ")", this.status = N;
      }
      Ml = function N() {
        Hh || uw(), Hh || (Ml = N);
      };
      function uw(N) {
        if (N = N || m, vi > 0)
          return;
        if (x) {
          l(i), Pl(), postMessage({ cmd: "loaded" });
          return;
        }
        if (gm(), vi > 0)
          return;
        function D() {
          Hh || (Hh = true, i.calledRun = true, !pe && (Pl(), zy(), l(i), i.onRuntimeInitialized && i.onRuntimeInitialized(), fn()));
        }
        i.setStatus ? (i.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            i.setStatus("");
          }, 1), D();
        }, 1)) : D();
      }
      i.run = uw;
      function WW(N, D) {
        if (!(D && ne && N === 0)) {
          if (!D && x)
            throw postMessage({ cmd: "exitProcess", returnCode: N }), new Im(N);
          ne || (Ee.terminateAllThreads(), ie = N, Ih(), i.onExit && i.onExit(N), pe = true), d(N, new Im(N));
        }
      }
      if (i.preInit)
        for (typeof i.preInit == "function" && (i.preInit = [i.preInit]); i.preInit.length > 0; )
          i.preInit.pop()();
      return x && (ne = false, Ee.initWorker()), uw(), e.ready;
    };
  }();
  typeof Oy == "object" && typeof xI == "object" ? xI.exports = gI : typeof define == "function" && define.amd ? define([], function() {
    return gI;
  }) : typeof Oy == "object" && (Oy.WasmBackendModuleThreadedSimd = gI);
});
var ZV = Ut((Py, bI) => {
  var yI = function() {
    var r = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0;
    return typeof __filename != "undefined" && (r = r || __filename), function(e) {
      e = e || {};
      var t = typeof e != "undefined" ? e : {}, n, o;
      t.ready = new Promise(function(Z, oe) {
        n = Z, o = oe;
      });
      var s = {}, a;
      for (a in t)
        t.hasOwnProperty(a) && (s[a] = t[a]);
      var i = [], l = "./this.program", u = function(Z, oe) {
        throw oe;
      }, c = false, p = false, m = false, f = false;
      c = typeof window == "object", p = typeof importScripts == "function", m = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", f = !c && !m && !p;
      var d = "";
      function h(Z) {
        return t.locateFile ? t.locateFile(Z, d) : d + Z;
      }
      var g, y, w, x, k, C;
      m ? (p ? d = hm().dirname(d) + "/" : d = __dirname + "/", g = function(oe, ve) {
        return k || (k = pc("fs")), C || (C = hm()), oe = C.normalize(oe), k.readFileSync(oe, ve ? null : "utf8");
      }, w = function(oe) {
        var ve = g(oe, true);
        return ve.buffer || (ve = new Uint8Array(ve)), G(ve.buffer), ve;
      }, process.argv.length > 1 && (l = process.argv[1].replace(/\\/g, "/")), i = process.argv.slice(2), process.on("uncaughtException", function(Z) {
        if (!(Z instanceof sw))
          throw Z;
      }), process.on("unhandledRejection", Ms), u = function(Z) {
        process.exit(Z);
      }, t.inspect = function() {
        return "[Emscripten Module object]";
      }) : f ? (typeof read != "undefined" && (g = function(oe) {
        return read(oe);
      }), w = function(oe) {
        var ve;
        return typeof readbuffer == "function" ? new Uint8Array(readbuffer(oe)) : (ve = read(oe, "binary"), G(typeof ve == "object"), ve);
      }, typeof scriptArgs != "undefined" ? i = scriptArgs : typeof arguments != "undefined" && (i = arguments), typeof quit == "function" && (u = function(Z) {
        quit(Z);
      }), typeof print != "undefined" && (typeof console == "undefined" && (console = {}), console.log = print, console.warn = console.error = typeof printErr != "undefined" ? printErr : print)) : (c || p) && (p ? d = self.location.href : typeof document != "undefined" && document.currentScript && (d = document.currentScript.src), r && (d = r), d.indexOf("blob:") !== 0 ? d = d.substr(0, d.lastIndexOf("/") + 1) : d = "", g = function(Z) {
        var oe = new XMLHttpRequest();
        return oe.open("GET", Z, false), oe.send(null), oe.responseText;
      }, p && (w = function(Z) {
        var oe = new XMLHttpRequest();
        return oe.open("GET", Z, false), oe.responseType = "arraybuffer", oe.send(null), new Uint8Array(oe.response);
      }), y = function(Z, oe, ve) {
        var ut = new XMLHttpRequest();
        ut.open("GET", Z, true), ut.responseType = "arraybuffer", ut.onload = function() {
          if (ut.status == 200 || ut.status == 0 && ut.response) {
            oe(ut.response);
            return;
          }
          ve();
        }, ut.onerror = ve, ut.send(null);
      }, x = function(Z) {
        document.title = Z;
      });
      var A = t.print || console.log.bind(console), $ = t.printErr || console.warn.bind(console);
      for (a in s)
        s.hasOwnProperty(a) && (t[a] = s[a]);
      s = null, t.arguments && (i = t.arguments), t.thisProgram && (l = t.thisProgram), t.quit && (u = t.quit);
      var R;
      t.wasmBinary && (R = t.wasmBinary);
      var P = t.noExitRuntime || true;
      typeof WebAssembly != "object" && Ms("no native wasm support detected");
      var M, V = false, W;
      function G(Z, oe) {
        Z || Ms("Assertion failed: " + oe);
      }
      function U(Z) {
        var oe = t["_" + Z];
        return G(oe, "Cannot call unknown function " + Z + ", make sure it is exported"), oe;
      }
      function H(Z, oe, ve, ut, er) {
        var Gt = { string: function(Tn) {
          var Ha = 0;
          if (Tn != null && Tn !== 0) {
            var Uh = (Tn.length << 2) + 1;
            Ha = km(Uh), se(Tn, Ha, Uh);
          }
          return Ha;
        }, array: function(Tn) {
          var Ha = km(Tn.length);
          return pe(Tn, Ha), Ha;
        } };
        function et(Tn) {
          return oe === "string" ? ne(Tn) : oe === "boolean" ? Boolean(Tn) : Tn;
        }
        var rt = U(Z), Er = [], Si = 0;
        if (ut)
          for (var Ii = 0; Ii < ut.length; Ii++) {
            var Gh = Gt[ve[Ii]];
            Gh ? (Si === 0 && (Si = Wh()), Er[Ii] = Gh(ut[Ii])) : Er[Ii] = ut[Ii];
          }
        var vm = rt.apply(null, Er);
        return vm = et(vm), Si !== 0 && jh(Si), vm;
      }
      function K(Z, oe, ve, ut) {
        ve = ve || [];
        var er = ve.every(function(et) {
          return et === "number";
        }), Gt = oe !== "string";
        return Gt && er && !ut ? U(Z) : function() {
          return H(Z, oe, ve, arguments, ut);
        };
      }
      var re = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
      function X(Z, oe, ve) {
        for (var ut = oe + ve, er = oe; Z[er] && !(er >= ut); )
          ++er;
        if (er - oe > 16 && Z.subarray && re)
          return re.decode(Z.subarray(oe, er));
        for (var Gt = ""; oe < er; ) {
          var et = Z[oe++];
          if (!(et & 128)) {
            Gt += String.fromCharCode(et);
            continue;
          }
          var rt = Z[oe++] & 63;
          if ((et & 224) == 192) {
            Gt += String.fromCharCode((et & 31) << 6 | rt);
            continue;
          }
          var Er = Z[oe++] & 63;
          if ((et & 240) == 224 ? et = (et & 15) << 12 | rt << 6 | Er : et = (et & 7) << 18 | rt << 12 | Er << 6 | Z[oe++] & 63, et < 65536)
            Gt += String.fromCharCode(et);
          else {
            var Si = et - 65536;
            Gt += String.fromCharCode(55296 | Si >> 10, 56320 | Si & 1023);
          }
        }
        return Gt;
      }
      function ne(Z, oe) {
        return Z ? X(ge, Z, oe) : "";
      }
      function Q(Z, oe, ve, ut) {
        if (!(ut > 0))
          return 0;
        for (var er = ve, Gt = ve + ut - 1, et = 0; et < Z.length; ++et) {
          var rt = Z.charCodeAt(et);
          if (rt >= 55296 && rt <= 57343) {
            var Er = Z.charCodeAt(++et);
            rt = 65536 + ((rt & 1023) << 10) | Er & 1023;
          }
          if (rt <= 127) {
            if (ve >= Gt)
              break;
            oe[ve++] = rt;
          } else if (rt <= 2047) {
            if (ve + 1 >= Gt)
              break;
            oe[ve++] = 192 | rt >> 6, oe[ve++] = 128 | rt & 63;
          } else if (rt <= 65535) {
            if (ve + 2 >= Gt)
              break;
            oe[ve++] = 224 | rt >> 12, oe[ve++] = 128 | rt >> 6 & 63, oe[ve++] = 128 | rt & 63;
          } else {
            if (ve + 3 >= Gt)
              break;
            oe[ve++] = 240 | rt >> 18, oe[ve++] = 128 | rt >> 12 & 63, oe[ve++] = 128 | rt >> 6 & 63, oe[ve++] = 128 | rt & 63;
          }
        }
        return oe[ve] = 0, ve - er;
      }
      function se(Z, oe, ve) {
        return Q(Z, ge, oe, ve);
      }
      function pe(Z, oe) {
        de.set(Z, oe);
      }
      function ie(Z, oe) {
        return Z % oe > 0 && (Z += oe - Z % oe), Z;
      }
      var fe, de, ge, we, $e, Ce, Be, qe, lt;
      function It(Z) {
        fe = Z, t.HEAP8 = de = new Int8Array(Z), t.HEAP16 = we = new Int16Array(Z), t.HEAP32 = Ce = new Int32Array(Z), t.HEAPU8 = ge = new Uint8Array(Z), t.HEAPU16 = $e = new Uint16Array(Z), t.HEAPU32 = Be = new Uint32Array(Z), t.HEAPF32 = qe = new Float32Array(Z), t.HEAPF64 = lt = new Float64Array(Z);
      }
      var Nt = t.INITIAL_MEMORY || 16777216, Ue, pt = [], ft = [], Bt = [], In = [], Qt = false;
      ft.push({ func: function() {
        Dh();
      } });
      function pn() {
        if (t.preRun)
          for (typeof t.preRun == "function" && (t.preRun = [t.preRun]); t.preRun.length; )
            Nn(t.preRun.shift());
        ja(pt);
      }
      function Br() {
        Qt = true, ja(ft);
      }
      function Zn() {
        ja(Bt);
      }
      function ur() {
        if (t.postRun)
          for (typeof t.postRun == "function" && (t.postRun = [t.postRun]); t.postRun.length; )
            Hr(t.postRun.shift());
        ja(In);
      }
      function Nn(Z) {
        pt.unshift(Z);
      }
      function Hr(Z) {
        In.unshift(Z);
      }
      var wr = 0, mn = null, zn = null;
      function Ol(Z) {
        wr++, t.monitorRunDependencies && t.monitorRunDependencies(wr);
      }
      function Wa(Z) {
        if (wr--, t.monitorRunDependencies && t.monitorRunDependencies(wr), wr == 0 && (mn !== null && (clearInterval(mn), mn = null), zn)) {
          var oe = zn;
          zn = null, oe();
        }
      }
      t.preloadedImages = {}, t.preloadedAudios = {};
      function Ms(Z) {
        t.onAbort && t.onAbort(Z), Z += "", $(Z), V = true, W = 1, Z = "abort(" + Z + "). Build with -s ASSERTIONS=1 for more info.";
        var oe = new WebAssembly.RuntimeError(Z);
        throw o(oe), oe;
      }
      function _i(Z, oe) {
        return String.prototype.startsWith ? Z.startsWith(oe) : Z.indexOf(oe) === 0;
      }
      var gm = "data:application/octet-stream;base64,";
      function Pl(Z) {
        return _i(Z, gm);
      }
      var zy = "file://";
      function Ih(Z) {
        return _i(Z, zy);
      }
      var fn = "tfjs-backend-wasm.wasm";
      Pl(fn) || (fn = h(fn));
      function Nh(Z) {
        try {
          if (Z == fn && R)
            return new Uint8Array(R);
          if (w)
            return w(Z);
          throw "both async and sync fetching of the wasm failed";
        } catch (oe) {
          Ms(oe);
        }
      }
      function By() {
        if (!R && (c || p)) {
          if (typeof fetch == "function" && !Ih(fn))
            return fetch(fn, { credentials: "same-origin" }).then(function(Z) {
              if (!Z.ok)
                throw "failed to load wasm binary file at '" + fn + "'";
              return Z.arrayBuffer();
            }).catch(function() {
              return Nh(fn);
            });
          if (y)
            return new Promise(function(Z, oe) {
              y(fn, function(ve) {
                Z(new Uint8Array(ve));
              }, oe);
            });
        }
        return Promise.resolve().then(function() {
          return Nh(fn);
        });
      }
      function vi() {
        var Z = { a: Uy };
        function oe(et, rt) {
          var Er = et.exports;
          t.asm = Er, M = t.asm.i, It(M.buffer), Ue = t.asm.o, Wa("wasm-instantiate");
        }
        Ol("wasm-instantiate");
        function ve(et) {
          oe(et.instance);
        }
        function ut(et) {
          return By().then(function(rt) {
            return WebAssembly.instantiate(rt, Z);
          }).then(et, function(rt) {
            $("failed to asynchronously prepare wasm: " + rt), Ms(rt);
          });
        }
        function er() {
          return !R && typeof WebAssembly.instantiateStreaming == "function" && !Pl(fn) && !Ih(fn) && typeof fetch == "function" ? fetch(fn, { credentials: "same-origin" }).then(function(et) {
            var rt = WebAssembly.instantiateStreaming(et, Z);
            return rt.then(ve, function(Er) {
              return $("wasm streaming compile failed: " + Er), $("falling back to ArrayBuffer instantiation"), ut(ve);
            });
          }) : ut(ve);
        }
        if (t.instantiateWasm)
          try {
            var Gt = t.instantiateWasm(Z, oe);
            return Gt;
          } catch (et) {
            return $("Module.instantiateWasm callback failed with error: " + et), false;
          }
        return er().catch(o), {};
      }
      function ja(Z) {
        for (; Z.length > 0; ) {
          var oe = Z.shift();
          if (typeof oe == "function") {
            oe(t);
            continue;
          }
          var ve = oe.func;
          typeof ve == "number" ? oe.arg === void 0 ? Ue.get(ve)() : Ue.get(ve)(oe.arg) : ve(oe.arg === void 0 ? null : oe.arg);
        }
      }
      function Ml() {
        Ms();
      }
      function Vy(Z, oe, ve) {
        ge.copyWithin(Z, oe, oe + ve);
      }
      function Wy() {
        return ge.length;
      }
      function Ci(Z) {
        try {
          return M.grow(Z - fe.byteLength + 65535 >>> 16), It(M.buffer), 1;
        } catch (oe) {
        }
      }
      function Th(Z) {
        var oe = Wy(), ve = 2147483648;
        if (Z > ve)
          return false;
        for (var ut = 1; ut <= 4; ut *= 2) {
          var er = oe * (1 + 0.2 / ut);
          er = Math.min(er, Z + 100663296);
          var Gt = Math.min(ve, ie(Math.max(Z, er), 65536)), et = Ci(Gt);
          if (et)
            return true;
        }
        return false;
      }
      var tc = { mappings: {}, buffers: [null, [], []], printChar: function(Z, oe) {
        var ve = tc.buffers[Z];
        oe === 0 || oe === 10 ? ((Z === 1 ? A : $)(X(ve, 0)), ve.length = 0) : ve.push(oe);
      }, varargs: void 0, get: function() {
        tc.varargs += 4;
        var Z = Ce[tc.varargs - 4 >> 2];
        return Z;
      }, getStr: function(Z) {
        var oe = ne(Z);
        return oe;
      }, get64: function(Z, oe) {
        return Z;
      } };
      function Eh(Z) {
        return 0;
      }
      function jy(Z, oe, ve, ut, er) {
      }
      function Ah(Z, oe, ve, ut) {
        for (var er = 0, Gt = 0; Gt < ve; Gt++) {
          for (var et = Ce[oe + Gt * 8 >> 2], rt = Ce[oe + (Gt * 8 + 4) >> 2], Er = 0; Er < rt; Er++)
            tc.printChar(Z, ge[et + Er]);
          er += rt;
        }
        return Ce[ut >> 2] = er, 0;
      }
      function dn() {
        return 6;
      }
      function $h(Z) {
        return Ce[Vh() >> 2] = Z, Z;
      }
      function Gy(Z) {
        switch (Z) {
          case 30:
            return 16384;
          case 85:
            var oe = 2147483648;
            return oe / 16384;
          case 132:
          case 133:
          case 12:
          case 137:
          case 138:
          case 15:
          case 235:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 149:
          case 13:
          case 10:
          case 236:
          case 153:
          case 9:
          case 21:
          case 22:
          case 159:
          case 154:
          case 14:
          case 77:
          case 78:
          case 139:
          case 82:
          case 68:
          case 67:
          case 164:
          case 11:
          case 29:
          case 47:
          case 48:
          case 95:
          case 52:
          case 51:
          case 46:
            return 200809;
          case 27:
          case 246:
          case 127:
          case 128:
          case 23:
          case 24:
          case 160:
          case 161:
          case 181:
          case 182:
          case 242:
          case 183:
          case 184:
          case 243:
          case 244:
          case 245:
          case 165:
          case 178:
          case 179:
          case 49:
          case 50:
          case 168:
          case 169:
          case 175:
          case 170:
          case 171:
          case 172:
          case 97:
          case 76:
          case 32:
          case 173:
          case 35:
          case 80:
          case 81:
          case 79:
            return -1;
          case 176:
          case 177:
          case 7:
          case 155:
          case 8:
          case 157:
          case 125:
          case 126:
          case 92:
          case 93:
          case 129:
          case 130:
          case 131:
          case 94:
          case 91:
            return 1;
          case 74:
          case 60:
          case 69:
          case 70:
          case 4:
            return 1024;
          case 31:
          case 42:
          case 72:
            return 32;
          case 87:
          case 26:
          case 33:
            return 2147483647;
          case 34:
          case 1:
            return 47839;
          case 38:
          case 36:
            return 99;
          case 43:
          case 37:
            return 2048;
          case 0:
            return 2097152;
          case 3:
            return 65536;
          case 28:
            return 32768;
          case 44:
            return 32767;
          case 75:
            return 16384;
          case 39:
            return 1e3;
          case 89:
            return 700;
          case 71:
            return 256;
          case 40:
            return 255;
          case 2:
            return 100;
          case 180:
            return 64;
          case 25:
            return 20;
          case 5:
            return 16;
          case 6:
            return 6;
          case 73:
            return 4;
          case 84:
            return typeof navigator == "object" && navigator.hardwareConcurrency || 1;
        }
        return $h(28), -1;
      }
      var Uy = { a: Ml, d: Vy, e: Th, f: Eh, c: jy, b: Ah, g: dn, h: Gy }, Hy = vi(), Dh = t.___wasm_call_ctors = function() {
        return (Dh = t.___wasm_call_ctors = t.asm.j).apply(null, arguments);
      }, rc = t._init = function() {
        return (rc = t._init = t.asm.k).apply(null, arguments);
      }, xm = t._register_tensor = function() {
        return (xm = t._register_tensor = t.asm.l).apply(null, arguments);
      }, qy = t._dispose_data = function() {
        return (qy = t._dispose_data = t.asm.m).apply(null, arguments);
      }, Ky = t._dispose = function() {
        return (Ky = t._dispose = t.asm.n).apply(null, arguments);
      }, Xy = t._Abs = function() {
        return (Xy = t._Abs = t.asm.p).apply(null, arguments);
      }, Ee = t._Add = function() {
        return (Ee = t._Add = t.asm.q).apply(null, arguments);
      }, Yy = t._AddN = function() {
        return (Yy = t._AddN = t.asm.r).apply(null, arguments);
      }, Zy = t._All = function() {
        return (Zy = t._All = t.asm.s).apply(null, arguments);
      }, Jy = t._Any = function() {
        return (Jy = t._Any = t.asm.t).apply(null, arguments);
      }, Qy = t._ArgMax = function() {
        return (Qy = t._ArgMax = t.asm.u).apply(null, arguments);
      }, eb = t._AvgPool = function() {
        return (eb = t._AvgPool = t.asm.v).apply(null, arguments);
      }, Ll = t._BatchMatMul = function() {
        return (Ll = t._BatchMatMul = t.asm.w).apply(null, arguments);
      }, tb = t._Ceil = function() {
        return (tb = t._Ceil = t.asm.x).apply(null, arguments);
      }, rb = t._ClipByValue = function() {
        return (rb = t._ClipByValue = t.asm.y).apply(null, arguments);
      }, nb = t._Conv2D = function() {
        return (nb = t._Conv2D = t.asm.z).apply(null, arguments);
      }, ob = t._Conv2DBackpropInput = function() {
        return (ob = t._Conv2DBackpropInput = t.asm.A).apply(null, arguments);
      }, sb = t._Cos = function() {
        return (sb = t._Cos = t.asm.B).apply(null, arguments);
      }, ib = t._Cosh = function() {
        return (ib = t._Cosh = t.asm.C).apply(null, arguments);
      }, ab = t._CropAndResize = function() {
        return (ab = t._CropAndResize = t.asm.D).apply(null, arguments);
      }, lb = t._Cumsum = function() {
        return (lb = t._Cumsum = t.asm.E).apply(null, arguments);
      }, ub = t._DepthToSpace = function() {
        return (ub = t._DepthToSpace = t.asm.F).apply(null, arguments);
      }, Ga = t._DepthwiseConv2dNative = function() {
        return (Ga = t._DepthwiseConv2dNative = t.asm.G).apply(null, arguments);
      }, ym = t._Elu = function() {
        return (ym = t._Elu = t.asm.H).apply(null, arguments);
      }, bm = t._Equal = function() {
        return (bm = t._Equal = t.asm.I).apply(null, arguments);
      }, cb = t._Exp = function() {
        return (cb = t._Exp = t.asm.J).apply(null, arguments);
      }, pb = t._FlipLeftRight = function() {
        return (pb = t._FlipLeftRight = t.asm.K).apply(null, arguments);
      }, mb = t._Floor = function() {
        return (mb = t._Floor = t.asm.L).apply(null, arguments);
      }, fb = t._FloorDiv = function() {
        return (fb = t._FloorDiv = t.asm.M).apply(null, arguments);
      }, db = t._FusedBatchNorm = function() {
        return (db = t._FusedBatchNorm = t.asm.N).apply(null, arguments);
      }, Je = t._FusedConv2D = function() {
        return (Je = t._FusedConv2D = t.asm.O).apply(null, arguments);
      }, hb = t._FusedDepthwiseConv2D = function() {
        return (hb = t._FusedDepthwiseConv2D = t.asm.P).apply(null, arguments);
      }, gb = t._Gather = function() {
        return (gb = t._Gather = t.asm.Q).apply(null, arguments);
      }, xb = t._GatherNd = function() {
        return (xb = t._GatherNd = t.asm.R).apply(null, arguments);
      }, yb = t._Greater = function() {
        return (yb = t._Greater = t.asm.S).apply(null, arguments);
      }, bb = t._GreaterEqual = function() {
        return (bb = t._GreaterEqual = t.asm.T).apply(null, arguments);
      }, wb = t._LeakyRelu = function() {
        return (wb = t._LeakyRelu = t.asm.U).apply(null, arguments);
      }, wm = t._Less = function() {
        return (wm = t._Less = t.asm.V).apply(null, arguments);
      }, Rh = t._LessEqual = function() {
        return (Rh = t._LessEqual = t.asm.W).apply(null, arguments);
      }, Fh = t._Log = function() {
        return (Fh = t._Log = t.asm.X).apply(null, arguments);
      }, kb = t._LogicalAnd = function() {
        return (kb = t._LogicalAnd = t.asm.Y).apply(null, arguments);
      }, _b = t._Max = function() {
        return (_b = t._Max = t.asm.Z).apply(null, arguments);
      }, vb = t._MaxPool = function() {
        return (vb = t._MaxPool = t.asm._).apply(null, arguments);
      }, Cb = t._Maximum = function() {
        return (Cb = t._Maximum = t.asm.$).apply(null, arguments);
      }, Sb = t._Mean = function() {
        return (Sb = t._Mean = t.asm.aa).apply(null, arguments);
      }, Ib = t._Min = function() {
        return (Ib = t._Min = t.asm.ba).apply(null, arguments);
      }, Nb = t._Minimum = function() {
        return (Nb = t._Minimum = t.asm.ca).apply(null, arguments);
      }, dt = t._MirrorPad = function() {
        return (dt = t._MirrorPad = t.asm.da).apply(null, arguments);
      }, Tb = t._Multiply = function() {
        return (Tb = t._Multiply = t.asm.ea).apply(null, arguments);
      }, Eb = t._Neg = function() {
        return (Eb = t._Neg = t.asm.fa).apply(null, arguments);
      }, Ab = t._NonMaxSuppressionV3 = function() {
        return (Ab = t._NonMaxSuppressionV3 = t.asm.ga).apply(null, arguments);
      }, nc = t._NonMaxSuppressionV4 = function() {
        return (nc = t._NonMaxSuppressionV4 = t.asm.ha).apply(null, arguments);
      }, Oh = t._NonMaxSuppressionV5 = function() {
        return (Oh = t._NonMaxSuppressionV5 = t.asm.ia).apply(null, arguments);
      }, Ph = t._NotEqual = function() {
        return (Ph = t._NotEqual = t.asm.ja).apply(null, arguments);
      }, Mh = t._OneHot = function() {
        return (Mh = t._OneHot = t.asm.ka).apply(null, arguments);
      }, $b = t._PadV2 = function() {
        return ($b = t._PadV2 = t.asm.la).apply(null, arguments);
      }, Db = t._Pow = function() {
        return (Db = t._Pow = t.asm.ma).apply(null, arguments);
      }, Lh = t._Prelu = function() {
        return (Lh = t._Prelu = t.asm.na).apply(null, arguments);
      }, Rb = t._Prod = function() {
        return (Rb = t._Prod = t.asm.oa).apply(null, arguments);
      }, zh = t._RealDiv = function() {
        return (zh = t._RealDiv = t.asm.pa).apply(null, arguments);
      }, Ua = t._Relu = function() {
        return (Ua = t._Relu = t.asm.qa).apply(null, arguments);
      }, Fb = t._Relu6 = function() {
        return (Fb = t._Relu6 = t.asm.ra).apply(null, arguments);
      }, Ob = t._ResizeBilinear = function() {
        return (Ob = t._ResizeBilinear = t.asm.sa).apply(null, arguments);
      }, _I = t._Reverse = function() {
        return (_I = t._Reverse = t.asm.ta).apply(null, arguments);
      }, Bh = t._RotateWithOffset = function() {
        return (Bh = t._RotateWithOffset = t.asm.ua).apply(null, arguments);
      }, Pb = t._Round = function() {
        return (Pb = t._Round = t.asm.va).apply(null, arguments);
      }, Mb = t._Rsqrt = function() {
        return (Mb = t._Rsqrt = t.asm.wa).apply(null, arguments);
      }, Lb = t._ScatterNd = function() {
        return (Lb = t._ScatterNd = t.asm.xa).apply(null, arguments);
      }, zb = t._SelectV2 = function() {
        return (zb = t._SelectV2 = t.asm.ya).apply(null, arguments);
      }, Bb = t._Sigmoid = function() {
        return (Bb = t._Sigmoid = t.asm.za).apply(null, arguments);
      }, Vb = t._Sin = function() {
        return (Vb = t._Sin = t.asm.Aa).apply(null, arguments);
      }, Wb = t._Softmax = function() {
        return (Wb = t._Softmax = t.asm.Ba).apply(null, arguments);
      }, jb = t._Sqrt = function() {
        return (jb = t._Sqrt = t.asm.Ca).apply(null, arguments);
      }, Gb = t._Square = function() {
        return (Gb = t._Square = t.asm.Da).apply(null, arguments);
      }, Ub = t._SquaredDifference = function() {
        return (Ub = t._SquaredDifference = t.asm.Ea).apply(null, arguments);
      }, Hb = t._Step = function() {
        return (Hb = t._Step = t.asm.Fa).apply(null, arguments);
      }, qb = t._StridedSlice = function() {
        return (qb = t._StridedSlice = t.asm.Ga).apply(null, arguments);
      }, Kb = t._Sub = function() {
        return (Kb = t._Sub = t.asm.Ha).apply(null, arguments);
      }, Xb = t._Sum = function() {
        return (Xb = t._Sum = t.asm.Ia).apply(null, arguments);
      }, Yb = t._Tan = function() {
        return (Yb = t._Tan = t.asm.Ja).apply(null, arguments);
      }, Zb = t._Tanh = function() {
        return (Zb = t._Tanh = t.asm.Ka).apply(null, arguments);
      }, Jb = t._Tile = function() {
        return (Jb = t._Tile = t.asm.La).apply(null, arguments);
      }, Qb = t._TopK = function() {
        return (Qb = t._TopK = t.asm.Ma).apply(null, arguments);
      }, ew = t._Transform = function() {
        return (ew = t._Transform = t.asm.Na).apply(null, arguments);
      }, tw = t._Transpose = function() {
        return (tw = t._Transpose = t.asm.Oa).apply(null, arguments);
      }, rw = t.__FusedMatMul = function() {
        return (rw = t.__FusedMatMul = t.asm.Pa).apply(null, arguments);
      }, nw = t._malloc = function() {
        return (nw = t._malloc = t.asm.Qa).apply(null, arguments);
      }, ow = t._free = function() {
        return (ow = t._free = t.asm.Ra).apply(null, arguments);
      }, Vh = t.___errno_location = function() {
        return (Vh = t.___errno_location = t.asm.Sa).apply(null, arguments);
      }, Wh = t.stackSave = function() {
        return (Wh = t.stackSave = t.asm.Ta).apply(null, arguments);
      }, jh = t.stackRestore = function() {
        return (jh = t.stackRestore = t.asm.Ua).apply(null, arguments);
      }, km = t.stackAlloc = function() {
        return (km = t.stackAlloc = t.asm.Va).apply(null, arguments);
      };
      t.cwrap = K;
      var oc;
      function sw(Z) {
        this.name = "ExitStatus", this.message = "Program terminated with exit(" + Z + ")", this.status = Z;
      }
      zn = function Z() {
        oc || _m(), oc || (zn = Z);
      };
      function _m(Z) {
        if (Z = Z || i, wr > 0 || (pn(), wr > 0))
          return;
        function oe() {
          oc || (oc = true, t.calledRun = true, !V && (Br(), Zn(), n(t), t.onRuntimeInitialized && t.onRuntimeInitialized(), ur()));
        }
        t.setStatus ? (t.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            t.setStatus("");
          }, 1), oe();
        }, 1)) : oe();
      }
      if (t.run = _m, t.preInit)
        for (typeof t.preInit == "function" && (t.preInit = [t.preInit]); t.preInit.length > 0; )
          t.preInit.pop()();
      return _m(), e.ready;
    };
  }();
  typeof Py == "object" && typeof bI == "object" ? bI.exports = yI : typeof define == "function" && define.amd ? define([], function() {
    return yI;
  }) : typeof Py == "object" && (Py.WasmBackendModule = yI);
});
var OI = "3.9.0";
var PI = "3.9.0";
var MI = "3.9.0";
var LI = "3.9.0";
var zI = "3.9.0";
var BI = "3.9.0";
var VI = "3.9.0";
var WI = "3.9.0";
var nj = 1e-7;
var oj = 1e-4;
var Ka = class {
  constructor(e, t) {
    this.backend = e, this.dataMover = t, this.data = new WeakMap(), this.dataIdsCount = 0;
  }
  get(e) {
    return this.data.has(e) || this.dataMover.moveData(this.backend, e), this.data.get(e);
  }
  set(e, t) {
    this.dataIdsCount++, this.data.set(e, t);
  }
  has(e) {
    return this.data.has(e);
  }
  delete(e) {
    return this.dataIdsCount--, this.data.delete(e);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
};
var Ls = class {
  refCount(e) {
    return Jn("refCount");
  }
  incRef(e) {
    return Jn("incRef");
  }
  timerAvailable() {
    return true;
  }
  time(e) {
    return Jn("time");
  }
  read(e) {
    return Jn("read");
  }
  readSync(e) {
    return Jn("readSync");
  }
  numDataIds() {
    return Jn("numDataIds");
  }
  disposeData(e, t) {
    return Jn("disposeData");
  }
  write(e, t, n) {
    return Jn("write");
  }
  move(e, t, n, o, s) {
    return Jn("move");
  }
  memory() {
    return Jn("memory");
  }
  floatPrecision() {
    return Jn("floatPrecision");
  }
  epsilon() {
    return this.floatPrecision() === 32 ? nj : oj;
  }
  dispose() {
    return Jn("dispose");
  }
};
function Jn(r) {
  throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
function jI(r) {
  let e = r.length, t = 0;
  for (; e > 0; )
    t = Math.random() * e | 0, e--, Kh(r, e, t);
}
function sj(r, e) {
  if (r.length !== e.length)
    throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${e.length}`);
  let t = r.length, n = 0;
  for (; t > 0; )
    n = Math.random() * t | 0, t--, Kh(r, t, n), Kh(e, t, n);
}
function mc(r, e, t) {
  return Math.max(r, Math.min(e, t));
}
function ij(r) {
  return r % 2 == 0 ? r : r + 1;
}
function Kh(r, e, t) {
  let n = r[e];
  r[e] = r[t], r[t] = n;
}
function aj(r) {
  let e = 0;
  for (let t = 0; t < r.length; t++)
    e += r[t];
  return e;
}
function lj(r, e) {
  let t = Math.random();
  return e * t + (1 - t) * r;
}
function uj(r, e) {
  let t = 0;
  for (let n = 0; n < r.length; n++) {
    let o = Number(r[n]) - Number(e[n]);
    t += o * o;
  }
  return t;
}
function E(r, e) {
  if (!r)
    throw new Error(typeof e == "string" ? e : e());
}
function $t(r, e, t = "") {
  E(Kr(r, e), () => t + ` Shapes ${r} and ${e} must match`);
}
function Bn(r) {
  E(r != null, () => "The input to the tensor constructor must be a non-null value.");
}
function vo(r, e = [], t = false) {
  if (e == null && (e = []), Array.isArray(r) || cr(r) && !t)
    for (let n = 0; n < r.length; ++n)
      vo(r[n], e, t);
  else
    e.push(r);
  return e;
}
function nt(r) {
  if (r.length === 0)
    return 1;
  let e = r[0];
  for (let t = 1; t < r.length; t++)
    e *= r[t];
  return e;
}
function cj(r) {
  return r.length === 0;
}
function Kr(r, e) {
  if (r === e)
    return true;
  if (r == null || e == null || r.length !== e.length)
    return false;
  for (let t = 0; t < r.length; t++)
    if (r[t] !== e[t])
      return false;
  return true;
}
function ot(r) {
  return r % 1 == 0;
}
function pj(r) {
  if (Math.tanh != null)
    return Math.tanh(r);
  if (r === 1 / 0)
    return 1;
  if (r === -1 / 0)
    return -1;
  {
    let e = Math.exp(2 * r);
    return (e - 1) / (e + 1);
  }
}
function mj(r) {
  let e = Math.ceil(Math.sqrt(r));
  return [e, Math.ceil(r / e)];
}
function fj(r) {
  let e = new Uint32Array(r);
  for (let t = 0; t < r; ++t)
    e[t] = t;
  return jI(e), e;
}
function Vl(r, e) {
  return e <= r.length ? r : r + " ".repeat(e - r.length);
}
function dj(r, e = (n) => 0, t) {
  return new Promise((n, o) => {
    let s = 0, a = () => {
      if (r()) {
        n();
        return;
      }
      s++;
      let i = e(s);
      if (t != null && s >= t) {
        o();
        return;
      }
      setTimeout(a, i);
    };
    a();
  });
}
function hj(r, e) {
  let t = 1, n = -1;
  for (let s = 0; s < r.length; ++s)
    if (r[s] >= 0)
      t *= r[s];
    else if (r[s] === -1) {
      if (n !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${n} and dim ${s}`);
      n = s;
    } else if (r[s] < 0)
      throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);
  if (n === -1) {
    if (e > 0 && e !== t)
      throw Error(`Size(${e}) must match the product of shape ${r}`);
    return r;
  }
  if (t === 0)
    throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);
  if (e % t != 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t}`);
  let o = r.slice();
  return o[n] = e / t, o;
}
function ir(r, e) {
  let t = e.length;
  return r = r == null ? e.map((n, o) => o) : [].concat(r), E(r.every((n) => n >= -t && n < t), () => `All values in axis param must be in range [-${t}, ${t}) but got axis ${r}`), E(r.every((n) => ot(n)), () => `All values in axis param must be integers but got axis ${r}`), r.map((n) => n < 0 ? t + n : n);
}
function cw(r, e) {
  let t = [], n = [], o = e != null && Array.isArray(e) && e.length === 0, s = e == null || o ? null : ir(e, r).sort(), a = 0;
  for (let i = 0; i < r.length; ++i) {
    if (s != null) {
      if (s[a] === i && r[i] !== 1)
        throw new Error(`Can't squeeze axis ${i} since its dim '${r[i]}' is not 1`);
      (s[a] == null || s[a] > i) && r[i] === 1 && (t.push(r[i]), n.push(i)), s[a] <= i && a++;
    }
    r[i] !== 1 && (t.push(r[i]), n.push(i));
  }
  return { newShape: t, keptDims: n };
}
function pw(r, e) {
  let t = null;
  if (r == null || r === "float32")
    t = new Float32Array(e);
  else if (r === "int32")
    t = new Int32Array(e);
  else if (r === "bool")
    t = new Uint8Array(e);
  else
    throw new Error(`Unknown data type ${r}`);
  return t;
}
function mw(r, e) {
  let t = null;
  if (r == null || r === "float32")
    t = new Float32Array(e);
  else if (r === "int32")
    t = new Int32Array(e);
  else if (r === "bool")
    t = new Uint8Array(e);
  else if (r === "string")
    t = new Array(e);
  else
    throw new Error(`Unknown data type ${r}`);
  return t;
}
function fw(r, e) {
  for (let t = 0; t < r.length; t++) {
    let n = r[t];
    if (isNaN(n) || !isFinite(n))
      throw Error(`A tensor of type ${e} being uploaded contains ${n}.`);
  }
}
function dw(r) {
  return r === "bool" || r === "complex64" || r === "float32" || r === "int32" || r === "string";
}
function gj(r, e) {
  return !(e === "complex64" || e === "float32" && r !== "complex64" || e === "int32" && r !== "float32" && r !== "complex64" || e === "bool" && r === "bool");
}
function cr(r) {
  return r instanceof Float32Array || r instanceof Int32Array || r instanceof Uint8Array;
}
function Xh(r) {
  if (r === "float32" || r === "int32")
    return 4;
  if (r === "complex64")
    return 8;
  if (r === "bool")
    return 1;
  throw new Error(`Unknown dtype ${r}`);
}
function hw(r) {
  if (r == null)
    return 0;
  let e = 0;
  return r.forEach((t) => e += t.length), e;
}
function Co(r) {
  return typeof r == "string" || r instanceof String;
}
function GI(r) {
  return typeof r == "boolean";
}
function UI(r) {
  return typeof r == "number";
}
function fc(r) {
  return Array.isArray(r) ? fc(r[0]) : r instanceof Float32Array ? "float32" : r instanceof Int32Array || r instanceof Uint8Array ? "int32" : UI(r) ? "float32" : Co(r) ? "string" : GI(r) ? "bool" : "float32";
}
function zs(r) {
  return !!(r && r.constructor && r.call && r.apply);
}
function dc(r, e) {
  for (let t = e; t < r; ++t)
    if (r % t == 0)
      return t;
  return r;
}
function Bs(r) {
  let e = r.length;
  if (e < 2)
    return [];
  let t = new Array(e - 1);
  t[e - 2] = r[e - 1];
  for (let n = e - 3; n >= 0; --n)
    t[n] = t[n + 1] * r[n + 1];
  return t;
}
function HI(r, e, t, n = false) {
  let o = new Array();
  if (e.length === 1) {
    let s = e[0] * (n ? 2 : 1);
    for (let a = 0; a < s; a++)
      o[a] = t[r + a];
  } else {
    let s = e[0], a = e.slice(1), i = a.reduce((l, u) => l * u) * (n ? 2 : 1);
    for (let l = 0; l < s; l++)
      o[l] = HI(r + l * i, a, t, n);
  }
  return o;
}
function Wl(r, e, t = false) {
  if (r.length === 0)
    return e[0];
  let n = r.reduce((o, s) => o * s) * (t ? 2 : 1);
  if (n === 0)
    return [];
  if (n !== e.length)
    throw new Error(`[${r}] does not match the input size ${e.length}${t ? " for a complex tensor" : ""}.`);
  return HI(0, r, e, t);
}
function Nm(r, e) {
  let t = hc(r, e);
  for (let n = 0; n < t.length; n++)
    t[n] = 1;
  return t;
}
function hc(r, e) {
  if (e == null || e === "float32" || e === "complex64")
    return new Float32Array(r);
  if (e === "int32")
    return new Int32Array(r);
  if (e === "bool")
    return new Uint8Array(r);
  throw new Error(`Unknown data type ${e}`);
}
function xj(r, e) {
  let t = r.reduce((n, o) => n * o, 1);
  if (e == null || e === "float32")
    return Wl(r, new Float32Array(t));
  if (e === "int32")
    return Wl(r, new Int32Array(t));
  if (e === "bool")
    return Wl(r, new Uint8Array(t));
  throw new Error(`Unknown data type ${e}`);
}
function Tm(r) {
  r.forEach((e) => {
    E(Number.isInteger(e) && e >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${r}].`);
  });
}
function yj(r, e, t) {
  if (e === 0)
    return 0;
  if (e === 1)
    return r[0];
  let n = r[r.length - 1];
  for (let o = 0; o < r.length - 1; ++o)
    n += t[o] * r[o];
  return n;
}
function bj(r, e, t) {
  if (e === 0)
    return [];
  if (e === 1)
    return [r];
  let n = new Array(e);
  for (let o = 0; o < n.length - 1; ++o)
    n[o] = Math.floor(r / t[o]), r -= n[o] * t[o];
  return n[n.length - 1] = r, n;
}
function Em(r) {
  return r && r.then && typeof r.then == "function";
}
function Vn(...r) {
  j().getBool("IS_TEST") || j().getBool("PROD") || console.warn(...r);
}
function wj(...r) {
  j().getBool("IS_TEST") || j().getBool("PROD") || console.log(...r);
}
var qI = "tfjsflags";
var Yh = class {
  constructor(e) {
    this.global = e, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = kj, this.populateURLFlags();
  }
  setPlatform(e, t) {
    this.platform != null && Vn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`), this.platformName = e, this.platform = t;
  }
  registerFlag(e, t, n) {
    if (this.flagRegistry[e] = { evaluationFn: t, setHook: n }, this.urlFlags[e] != null) {
      let o = this.urlFlags[e];
      Vn(`Setting feature override from URL ${e}: ${o}.`), this.set(e, o);
    }
  }
  async getAsync(e) {
    return e in this.flags ? this.flags[e] : (this.flags[e] = await this.evaluateFlag(e), this.flags[e]);
  }
  get(e) {
    if (e in this.flags)
      return this.flags[e];
    let t = this.evaluateFlag(e);
    if (Em(t))
      throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[e] = t, this.flags[e];
  }
  getNumber(e) {
    return this.get(e);
  }
  getBool(e) {
    return this.get(e);
  }
  getFlags() {
    return this.flags;
  }
  get features() {
    return this.flags;
  }
  set(e, t) {
    if (this.flagRegistry[e] == null)
      throw new Error(`Cannot set flag ${e} as it has not been registered.`);
    this.flags[e] = t, this.flagRegistry[e].setHook != null && this.flagRegistry[e].setHook(t);
  }
  evaluateFlag(e) {
    if (this.flagRegistry[e] == null)
      throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);
    return this.flagRegistry[e].evaluationFn();
  }
  setFlags(e) {
    this.flags = Object.assign({}, e);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global == "undefined" || typeof this.global.location == "undefined" || typeof this.global.location.search == "undefined")
      return;
    let e = this.getQueryParams(this.global.location.search);
    qI in e && e[qI].split(",").forEach((n) => {
      let [o, s] = n.split(":");
      this.urlFlags[o] = vj(o, s);
    });
  }
};
function kj(r) {
  let e = {};
  return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (t, ...n) => (_j(e, n[0], n[1]), n.join("="))), e;
}
function _j(r, e, t) {
  r[decodeURIComponent(e)] = decodeURIComponent(t || "");
}
function vj(r, e) {
  if (e = e.toLowerCase(), e === "true" || e === "false")
    return e === "true";
  if (`${+e}` === e)
    return +e;
  throw new Error(`Could not parse value flag value ${e} for flag ${r}.`);
}
function j() {
  return gw;
}
var gw = null;
function KI(r) {
  gw = r;
}
var xw;
function yw() {
  if (xw == null) {
    let r;
    if (typeof window != "undefined")
      r = window;
    else if (typeof global != "undefined")
      r = global;
    else if (typeof process != "undefined")
      r = process;
    else if (typeof self != "undefined")
      r = self;
    else
      throw new Error("Could not find a global object");
    xw = r;
  }
  return xw;
}
function Cj() {
  let r = yw();
  return r._tfGlobals == null && (r._tfGlobals = new Map()), r._tfGlobals;
}
function Am(r, e) {
  let t = Cj();
  if (t.has(r))
    return t.get(r);
  {
    let n = e();
    return t.set(r, n), t.get(r);
  }
}
var Vs = "Abs";
var Ni = "Acos";
var Ti = "Acosh";
var Wn = "Add";
var So = "AddN";
var Ei = "All";
var Ai = "Any";
var Io = "ArgMax";
var Xa = "ArgMin";
var $i = "Asin";
var Di = "Asinh";
var Ri = "Atan";
var Fi = "Atanh";
var Oi = "Atan2";
var No = "AvgPool";
var gc = "AvgPoolGrad";
var Ya = "AvgPool3D";
var xc = "AvgPool3DGrad";
var To = "BatchMatMul";
var Ws = "BatchToSpaceND";
var yc = "Bincount";
var XI = "BroadcastTo";
var Zh = "BroadcastArgs";
var Qn = "Cast";
var Eo = "Ceil";
var eo = "ClipByValue";
var bc = "Complex";
var Za = "ComplexAbs";
var js = "Concat";
var Ao = "Conv2D";
var wc = "Conv2DBackpropFilter";
var $o = "Conv2DBackpropInput";
var Ja = "Conv3D";
var kc = "Conv3DBackpropFilterV2";
var _c = "Conv3DBackpropInputV2";
var Do = "Cos";
var Ro = "Cosh";
var Fo = "Cumsum";
var Pi = "CropAndResize";
var vc = "DenseBincount";
var Mi = "DepthToSpace";
var Oo = "DepthwiseConv2dNative";
var Cc = "DepthwiseConv2dNativeBackpropFilter";
var Sc = "DepthwiseConv2dNativeBackpropInput";
var Ic = "Diag";
var Qa = "Dilation2D";
var $m = "Dilation2DBackpropInput";
var Dm = "Dilation2DBackpropFilter";
var Po = "RealDiv";
var Nc = "Einsum";
var Mo = "Elu";
var Tc = "EluGrad";
var Li = "Erf";
var zi = "Equal";
var Lo = "Exp";
var Gs = "ExpandDims";
var Bi = "Expm1";
var Ec = "FFT";
var el = "Fill";
var Vi = "FlipLeftRight";
var zo = "Floor";
var Bo = "FloorDiv";
var Vo = "FusedBatchNorm";
var Us = "GatherV2";
var Wi = "GatherNd";
var ji = "Greater";
var Wo = "GreaterEqual";
var to = "Identity";
var Ac = "IFFT";
var $c = "Imag";
var Gi = "IsFinite";
var Ui = "IsInf";
var Hi = "IsNan";
var jo = "LeakyRelu";
var qi = "Less";
var Ki = "LessEqual";
var Dc = "LinSpace";
var Go = "Log";
var Xi = "Log1p";
var Yi = "LogicalAnd";
var jl = "LogicalNot";
var Gl = "LogicalOr";
var YI = "LogSoftmax";
var tl = "LRN";
var Rc = "LRNGrad";
var Uo = "Max";
var Ho = "Maximum";
var qo = "MaxPool";
var Fc = "MaxPoolGrad";
var rl = "MaxPool3D";
var Oc = "MaxPool3DGrad";
var Pc = "MaxPoolWithArgmax";
var Ko = "Mean";
var Xo = "Min";
var Yo = "Minimum";
var Zo = "MirrorPad";
var Zi = "Mod";
var Mc = "Multinomial";
var Jo = "Multiply";
var Hs = "Neg";
var Ji = "NotEqual";
var Qi = "NonMaxSuppressionV3";
var ea = "NonMaxSuppressionV4";
var ta = "NonMaxSuppressionV5";
var qs = "OnesLike";
var Qo = "OneHot";
var Ks = "Pack";
var es = "PadV2";
var fse = "Pool";
var ts = "Pow";
var rs = "Prelu";
var ra = "Prod";
var nl = "Range";
var Lc = "Real";
var na = "Reciprocal";
var ns = "Relu";
var Xs = "Reshape";
var ol = "ResizeNearestNeighbor";
var zc = "ResizeNearestNeighborGrad";
var os = "ResizeBilinear";
var Bc = "ResizeBilinearGrad";
var ss = "Relu6";
var is = "Reverse";
var as = "Round";
var ls = "Rsqrt";
var oa = "ScatterNd";
var Ys = "Select";
var sa = "Selu";
var Zs = "Slice";
var us = "Sin";
var ia = "Sinh";
var aa = "Sign";
var cs = "Sigmoid";
var la = "Softplus";
var ps = "Sqrt";
var ms = "Sum";
var Js = "SpaceToBatchND";
var Qs = "SplitV";
var fs = "Softmax";
var Vc = "SparseFillEmptyRows";
var Wc = "SparseReshape";
var jc = "SparseSegmentMean";
var Gc = "SparseSegmentSum";
var Uc = "SparseToDense";
var ds = "SquaredDifference";
var sl = "Square";
var ua = "StridedSlice";
var Hc = "StringNGrams";
var qc = "StringSplit";
var Kc = "StringToHashBucketFast";
var hs = "Sub";
var gs = "Tan";
var xs = "Tanh";
var jn = "Tile";
var ca = "TopK";
var pa = "Transform";
var ys = "Transpose";
var Xc = "Unique";
var ei = "Unpack";
var il = "UnsortedSegmentSum";
var ti = "ZerosLike";
var ro = "Step";
var Rm = "FromPixels";
var ma = "RotateWithOffset";
var ri = "_FusedMatMul";
var ni = "FusedConv2D";
var oi = "FusedDepthwiseConv2D";
var Yc = Am("kernelRegistry", () => new Map());
var Fm = Am("gradRegistry", () => new Map());
function Om(r, e) {
  let t = ww(r, e);
  return Yc.get(t);
}
function bw(r) {
  return Fm.get(r);
}
function Jh(r) {
  let e = Yc.entries(), t = [];
  for (; ; ) {
    let { done: n, value: o } = e.next();
    if (n)
      break;
    let [s, a] = o, [i] = s.split("_");
    i === r && t.push(a);
  }
  return t;
}
function Ul(r) {
  let { kernelName: e, backendName: t } = r, n = ww(e, t);
  Yc.has(n) && Vn(`The kernel '${e}' for backend '${t}' is already registered`), Yc.set(n, r);
}
function ZI(r) {
  let { kernelName: e } = r;
  Fm.has(e) && j().getBool("DEBUG") && Vn(`Overriding the gradient for '${e}'`), Fm.set(e, r);
}
function yse(r, e) {
  let t = ww(r, e);
  if (!Yc.has(t))
    throw new Error(`The kernel '${r}' for backend '${e}' is not registered`);
  Yc.delete(t);
}
function bse(r) {
  if (!Fm.has(r))
    throw new Error(`The gradient '${r}' for backend is not registered`);
  Fm.delete(r);
}
function wse(r, e) {
  Jh(r).forEach((n) => {
    let o = Object.assign({}, n, { backendName: e });
    Ul(o);
  });
}
function ww(r, e) {
  return `${e}_${r}`;
}
var b = {};
He(b, { arraysEqual: () => Kr, assert: () => E, assertNonNegativeIntegerDimensions: () => Tm, assertNonNull: () => Bn, assertShapesMatch: () => $t, bytesFromStringArray: () => hw, bytesPerElement: () => Xh, checkConversionForErrors: () => fw, clamp: () => mc, computeStrides: () => Bs, createScalarValue: () => $j, createShuffledIndices: () => fj, decodeString: () => ep, distSquared: () => uj, encodeString: () => ll, fetch: () => Rj, fingerPrint64: () => Aj, flatten: () => vo, getArrayFromDType: () => mw, getTypedArrayFromDType: () => pw, hasEncodingLoss: () => gj, hexToLong: () => Pm, indexToLoc: () => bj, inferDtype: () => fc, inferFromImplicitShape: () => hj, isBoolean: () => GI, isFunction: () => zs, isInt: () => ot, isNumber: () => UI, isPromise: () => Em, isScalarShape: () => cj, isString: () => Co, isTypedArray: () => cr, isValidDtype: () => dw, locToIndex: () => yj, makeOnesTypedArray: () => Nm, makeZerosNestedTypedArray: () => xj, makeZerosTypedArray: () => hc, nearestDivisor: () => dc, nearestLargerEven: () => ij, now: () => Yl, parseAxisParam: () => ir, randUniform: () => lj, repeatedTry: () => dj, rightPad: () => Vl, shuffle: () => jI, shuffleCombo: () => sj, sizeFromShape: () => nt, sizeToSquarishShape: () => mj, squeezeShape: () => cw, sum: () => aj, swap: () => Kh, tanh: () => pj, toNestedArray: () => Wl, toTypedArray: () => Qc });
var u1 = Bl(l1());
var Kl = u1.default || u1;
function Pm(r) {
  return Kl.fromString(r, true, 16);
}
var c1 = Pm("c3a5c85c97cb3127");
var Xl = Pm("b492b66fbe98f273");
var Xr = Pm("9ae16a3b2f90404f");
function vw(r) {
  return r.xor(r.shru(47));
}
function p1(r, e, t) {
  let n = r.slice(e, e + t);
  return Kl.fromBytes(Array.from(n), true, true);
}
function Pt(r, e) {
  return p1(r, e, 8);
}
function m1(r, e) {
  return p1(r, e, 4);
}
function _r(r, e) {
  return e === 0 ? r : r.shru(e).or(r.shl(64 - e));
}
function al(r, e, t = Pm("9ddfea08eb382d69")) {
  let n = r.xor(e).mul(t);
  n = n.xor(n.shru(47));
  let o = e.xor(n).mul(t);
  return o = o.xor(o.shru(47)), o = o.mul(t), o;
}
function Ij(r, e, t, n, o, s) {
  o = o.add(r), s = _r(s.add(o).add(n), 21);
  let a = o;
  return o = o.add(e), o = o.add(t), s = s.add(_r(o, 44)), [o.add(n), s.add(a)];
}
function eg(r, e, t, n) {
  return Ij(Pt(r, e), Pt(r, e + 8), Pt(r, e + 16), Pt(r, e + 24), t, n);
}
function Nj(r, e = r.length) {
  if (e >= 8) {
    let t = Xr.add(e * 2), n = Pt(r, 0).add(Xr), o = Pt(r, e - 8), s = _r(o, 37).mul(t).add(n), a = _r(n, 25).add(o).mul(t);
    return al(s, a, t);
  }
  if (e >= 4) {
    let t = Xr.add(e * 2), n = m1(r, 0);
    return al(n.shl(3).add(e), m1(r, e - 4), t);
  }
  if (e > 0) {
    let t = r[0], n = r[e >> 1], o = r[e - 1], s = t + (n << 8), a = e + (o << 2);
    return vw(Xr.mul(s).xor(c1.mul(a))).mul(Xr);
  }
  return Xr;
}
function Tj(r, e = r.length) {
  let t = Xr.add(e * 2), n = Pt(r, 0).mul(Xl), o = Pt(r, 8), s = Pt(r, e - 8).mul(t), a = Pt(r, e - 16).mul(Xr);
  return al(_r(n.add(o), 43).add(_r(s, 30)).add(a), n.add(_r(o.add(Xr), 18)).add(s), t);
}
function Ej(r, e = r.length) {
  let t = Xr.add(e * 2), n = Pt(r, 0).mul(Xr), o = Pt(r, 8), s = Pt(r, e - 8).mul(t), a = Pt(r, e - 16).mul(Xr), i = _r(n.add(o), 43).add(_r(s, 30)).add(a), l = al(i, n.add(_r(o.add(Xr), 18)).add(s), t), u = Pt(r, 16).mul(t), c = Pt(r, 24), p = i.add(Pt(r, e - 32)).mul(t), m = l.add(Pt(r, e - 24)).mul(t);
  return al(_r(u.add(c), 43).add(_r(p, 30)).add(m), u.add(_r(c.add(n), 18)).add(p), t);
}
function Aj(r, e = r.length) {
  let t = Kl.fromNumber(81, true);
  if (e <= 32)
    return e <= 16 ? Nj(r, e) : Tj(r, e);
  if (e <= 64)
    return Ej(r, e);
  let n = t, o = t.mul(Xl).add(113), s = vw(o.mul(Xr).add(113)).mul(Xr), a = [Kl.UZERO, Kl.UZERO], i = [Kl.UZERO, Kl.UZERO];
  n = n.mul(Xr).add(Pt(r, 0));
  let l = 0, u = (e - 1 >> 6) * 64, c = u + (e - 1 & 63) - 63;
  do
    n = _r(n.add(o).add(a[0]).add(Pt(r, l + 8)), 37).mul(Xl), o = _r(o.add(a[1]).add(Pt(r, l + 48)), 42).mul(Xl), n = n.xor(i[1]), o = o.add(a[0]).add(Pt(r, l + 40)), s = _r(s.add(i[0]), 33).mul(Xl), a = eg(r, l, a[1].mul(Xl), n.add(i[0])), i = eg(r, l + 32, s.add(i[1]), o.add(Pt(r, l + 16))), [s, n] = [n, s], l += 64;
  while (l !== u);
  let p = Xl.add(s.and(255).shl(1));
  return l = c, i[0] = i[0].add(e - 1 & 63), a[0] = a[0].add(i[0]), i[0] = i[0].add(a[0]), n = _r(n.add(o).add(a[0]).add(Pt(r, l + 8)), 37).mul(p), o = _r(o.add(a[1]).add(Pt(r, l + 48)), 42).mul(p), n = n.xor(i[1].mul(9)), o = o.add(a[0].mul(9).add(Pt(r, l + 40))), s = _r(s.add(i[0]), 33).mul(p), a = eg(r, l, a[1].mul(p), n.add(i[0])), i = eg(r, l + 32, s.add(i[1]), o.add(Pt(r, l + 16))), [s, n] = [n, s], al(al(a[0], i[0], p).add(vw(o).mul(c1)).add(s), al(a[1], i[1], p).add(n), p);
}
function $j(r, e) {
  return e === "string" ? ll(r) : Qc([r], e);
}
function Dj(r, e) {
  return r instanceof Float32Array && e === "float32" || r instanceof Int32Array && e === "int32" || r instanceof Uint8Array && e === "bool";
}
function Qc(r, e) {
  if (e === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(r) && (r = vo(r)), j().getBool("DEBUG") && fw(r, e), Dj(r, e))
    return r;
  if (e == null || e === "float32" || e === "complex64")
    return new Float32Array(r);
  if (e === "int32")
    return new Int32Array(r);
  if (e === "bool") {
    let t = new Uint8Array(r.length);
    for (let n = 0; n < t.length; ++n)
      Math.round(r[n]) !== 0 && (t[n] = 1);
    return t;
  } else
    throw new Error(`Unknown data type ${e}`);
}
function Yl() {
  return j().platform.now();
}
function Rj(r, e) {
  return j().platform.fetch(r, e);
}
function ll(r, e = "utf-8") {
  return e = e || "utf-8", j().platform.encode(r, e);
}
function ep(r, e = "utf-8") {
  return e = e || "utf-8", j().platform.decode(r, e);
}
var Cw = class {
  constructor(e, t) {
    this.backendTimer = e, this.logger = t, t == null && (this.logger = new f1());
  }
  profileKernel(e, t, n) {
    let o, s = () => {
      o = n();
    }, a, i = Yl();
    if (this.backendTimer.timerAvailable())
      a = this.backendTimer.time(s);
    else {
      s();
      for (let u of o)
        u.dataSync();
      a = Promise.resolve({ kernelMs: Yl() - i });
    }
    if (j().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let u = 0; u < o.length; u++) {
        let c = o[u];
        c.data().then((p) => {
          Fj(p, c.dtype, e);
        });
      }
    return { kernelName: e, outputs: o, inputs: t, timeMs: a.then((u) => u.kernelMs), extraInfo: a.then((u) => u.getExtraProfileInfo != null ? u.getExtraProfileInfo() : "") };
  }
  logKernelProfile(e) {
    let { kernelName: t, outputs: n, timeMs: o, inputs: s, extraInfo: a } = e;
    n.forEach((i) => {
      Promise.all([i.data(), o, a]).then((l) => {
        this.logger.logKernelProfile(t, i, l[0], l[1], s, l[2]);
      });
    });
  }
};
function Fj(r, e, t) {
  if (e !== "float32")
    return false;
  for (let n = 0; n < r.length; n++) {
    let o = r[n];
    if (isNaN(o) || !isFinite(o))
      return console.warn(`Found ${o} in the result of '${t}'`), true;
  }
  return false;
}
var f1 = class {
  logKernelProfile(e, t, n, o, s, a) {
    let i = typeof o == "number" ? Vl(`${o}ms`, 9) : o.error, l = Vl(e, 25), u = t.rank, c = t.size, p = Vl(t.shape.toString(), 14), m = "";
    for (let f in s) {
      let d = s[f];
      if (d != null) {
        let h = d.shape || t.shape, g = h.length;
        m += `${f}: ${g}D ${g > 0 ? h : ""} `;
      }
    }
    console.log(`%c${l}	%c${i}	%c${u}D ${p}	%c${c}	%c${m}	%c${a}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
};
function d1(r, e, t) {
  let n = {}, o = {};
  for (let l = 0; l < e.length; l++)
    n[e[l].id] = true;
  for (let l = 0; l < r.length; l++) {
    let u = r[l], c = u.inputs;
    for (let p in c) {
      let m = c[p], f = false;
      for (let d = 0; d < e.length; d++)
        if (n[m.id]) {
          u.outputs.forEach((h) => n[h.id] = true), f = true, o[u.id] = true;
          break;
        }
      if (f)
        break;
    }
  }
  let s = {};
  s[t.id] = true;
  let a = {};
  for (let l = r.length - 1; l >= 0; l--) {
    let u = r[l], c = u.inputs;
    for (let p = 0; p < u.outputs.length; p++)
      if (s[u.outputs[p].id]) {
        for (let m in c)
          s[c[m].id] = true, a[u.id] = true;
        break;
      }
  }
  let i = [];
  for (let l = 0; l < r.length; l++) {
    let u = r[l];
    if (o[u.id] && a[u.id]) {
      let c = {};
      for (let m in u.inputs) {
        let f = u.inputs[m];
        n[f.id] && (c[m] = f);
      }
      let p = Object.assign({}, u);
      p.inputs = c, p.outputs = u.outputs, i.push(p);
    }
  }
  return i;
}
function h1(r, e, t, n) {
  for (let o = e.length - 1; o >= 0; o--) {
    let s = e[o], a = [];
    if (s.outputs.forEach((l) => {
      let u = r[l.id];
      u != null ? a.push(u) : a.push(null);
    }), s.gradient == null)
      throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);
    let i = s.gradient(a);
    for (let l in s.inputs) {
      if (!(l in i))
        throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(i)}.`);
      let u = t(() => i[l]());
      if (u.dtype !== "float32")
        throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);
      let c = s.inputs[l];
      if (!Kr(u.shape, c.shape))
        throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);
      if (r[c.id] == null)
        r[c.id] = u;
      else {
        let p = r[c.id];
        r[c.id] = n(p, u), p.dispose();
      }
    }
  }
}
var g1 = 20;
var Mm = 3;
var Sw = 7;
function x1(r, e, t, n) {
  let o = Bs(e), s = Oj(r, e, t, o), a = e.length, i = tg(r, e, t, o, s), l = ["Tensor"];
  return n && (l.push(`  dtype: ${t}`), l.push(`  rank: ${a}`), l.push(`  shape: [${e}]`), l.push("  values:")), l.push(i.map((u) => "    " + u).join(`
`)), l.join(`
`);
}
function Oj(r, e, t, n) {
  let o = nt(e), s = n[n.length - 1], a = new Array(s).fill(0), i = e.length, l = t === "complex64" ? zm(r) : r;
  if (i > 1)
    for (let u = 0; u < o / s; u++) {
      let c = u * s;
      for (let p = 0; p < s; p++)
        a[p] = Math.max(a[p], Lm(l[c + p], 0, t).length);
    }
  return a;
}
function Lm(r, e, t) {
  let n;
  return Array.isArray(r) ? n = `${parseFloat(r[0].toFixed(Sw))} + ${parseFloat(r[1].toFixed(Sw))}j` : Co(r) ? n = `'${r}'` : t === "bool" ? n = y1(r) : n = parseFloat(r.toFixed(Sw)).toString(), Vl(n, e);
}
function y1(r) {
  return r === 0 ? "false" : "true";
}
function tg(r, e, t, n, o, s = true) {
  let a = t === "complex64" ? 2 : 1, i = e[0], l = e.length;
  if (l === 0) {
    if (t === "complex64") {
      let h = zm(r);
      return [Lm(h[0], 0, t)];
    }
    return t === "bool" ? [y1(r[0])] : [r[0].toString()];
  }
  if (l === 1) {
    if (i > g1) {
      let g = Mm * a, y = Array.from(r.slice(0, g)), w = Array.from(r.slice((i - Mm) * a, i * a));
      return t === "complex64" && (y = zm(y), w = zm(w)), ["[" + y.map((x, k) => Lm(x, o[k], t)).join(", ") + ", ..., " + w.map((x, k) => Lm(x, o[i - Mm + k], t)).join(", ") + "]"];
    }
    let h = t === "complex64" ? zm(r) : Array.from(r);
    return ["[" + h.map((g, y) => Lm(g, o[y], t)).join(", ") + "]"];
  }
  let u = e.slice(1), c = n.slice(1), p = n[0] * a, m = [];
  if (i > g1) {
    for (let h = 0; h < Mm; h++) {
      let g = h * p, y = g + p;
      m.push(...tg(r.slice(g, y), u, t, c, o, false));
    }
    m.push("...");
    for (let h = i - Mm; h < i; h++) {
      let g = h * p, y = g + p;
      m.push(...tg(r.slice(g, y), u, t, c, o, h === i - 1));
    }
  } else
    for (let h = 0; h < i; h++) {
      let g = h * p, y = g + p;
      m.push(...tg(r.slice(g, y), u, t, c, o, h === i - 1));
    }
  let f = l === 2 ? "," : "";
  m[0] = "[" + m[0] + f;
  for (let h = 1; h < m.length - 1; h++)
    m[h] = " " + m[h] + f;
  let d = `,
`;
  for (let h = 2; h < l; h++)
    d += `
`;
  return m[m.length - 1] = " " + m[m.length - 1] + "]" + (s ? "" : d), m;
}
function zm(r) {
  let e = [];
  for (let t = 0; t < r.length; t += 2)
    e.push([r[t], r[t + 1]]);
  return e;
}
var ct = class {
  constructor(e, t, n) {
    if (this.dtype = t, this.shape = e.slice(), this.size = nt(e), n != null) {
      let o = n.length;
      E(o === this.size, () => `Length of values '${o}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (t === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = n || mw(t, this.size), this.strides = Bs(e);
  }
  set(e, ...t) {
    t.length === 0 && (t = [0]), E(t.length === this.rank, () => `The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);
    let n = this.locToIndex(t);
    this.values[n] = e;
  }
  get(...e) {
    e.length === 0 && (e = [0]);
    let t = 0;
    for (let o of e) {
      if (o < 0 || o >= this.shape[t]) {
        let s = `Requested out of range element at ${e}.   Buffer shape=${this.shape}`;
        throw new Error(s);
      }
      t++;
    }
    let n = e[e.length - 1];
    for (let o = 0; o < e.length - 1; ++o)
      n += this.strides[o] * e[o];
    return this.values[n];
  }
  locToIndex(e) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return e[0];
    let t = e[e.length - 1];
    for (let n = 0; n < e.length - 1; ++n)
      t += this.strides[n] * e[n];
    return t;
  }
  indexToLoc(e) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [e];
    let t = new Array(this.shape.length);
    for (let n = 0; n < t.length - 1; ++n)
      t[n] = Math.floor(e / this.strides[n]), e -= t[n] * this.strides[n];
    return t[t.length - 1] = e, t;
  }
  get rank() {
    return this.shape.length;
  }
  toTensor() {
    return si().makeTensor(this.values, this.shape, this.dtype);
  }
};
var si = null;
var tp = null;
var Pj = null;
function b1(r) {
  si = r;
}
function w1(r) {
  tp = r;
}
function k1(r) {
  Pj = r;
}
var je = class {
  constructor(e, t, n, o) {
    this.kept = false, this.isDisposedInternal = false, this.shape = e.slice(), this.dtype = t || "float32", this.size = nt(e), this.strides = Bs(e), this.dataId = n, this.id = o, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  async buffer() {
    let e = await this.data();
    return tp.buffer(this.shape, this.dtype, e);
  }
  bufferSync() {
    return tp.buffer(this.shape, this.dtype, this.dataSync());
  }
  async array() {
    let e = await this.data();
    return Wl(this.shape, e, this.dtype === "complex64");
  }
  arraySync() {
    return Wl(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  async data() {
    this.throwIfDisposed();
    let e = si().read(this.dataId);
    if (this.dtype === "string") {
      let t = await e;
      try {
        return t.map((n) => ep(n));
      } catch (n) {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return e;
  }
  dataSync() {
    this.throwIfDisposed();
    let e = si().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return e.map((t) => ep(t));
      } catch (t) {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return e;
  }
  async bytes() {
    this.throwIfDisposed();
    let e = await si().read(this.dataId);
    return this.dtype === "string" ? e : new Uint8Array(e.buffer);
  }
  dispose() {
    this.isDisposed || (si().disposeTensor(this), this.isDisposedInternal = true);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  print(e = false) {
    return tp.print(this, e);
  }
  clone() {
    return this.throwIfDisposed(), tp.clone(this);
  }
  toString(e = false) {
    let t = this.dataSync();
    return x1(t, this.shape, this.dtype, e);
  }
  cast(e) {
    return this.throwIfDisposed(), tp.cast(this, e);
  }
  variable(e = true, t, n) {
    return this.throwIfDisposed(), si().makeVariable(this, e, t, n);
  }
};
Object.defineProperty(je, Symbol.hasInstance, { value: (r) => !!r && r.data != null && r.dataSync != null && r.throwIfDisposed != null });
function Mj() {
  return Am("Tensor", () => je);
}
Mj();
var ul = class extends je {
  constructor(e, t, n, o) {
    super(e.shape, e.dtype, e.dataId, o);
    this.trainable = t, this.name = n;
  }
  assign(e) {
    if (e.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);
    if (!Kr(e.shape, this.shape))
      throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);
    si().disposeTensor(this), this.dataId = e.dataId, si().incRef(this, null);
  }
  dispose() {
    si().disposeVariable(this), this.isDisposedInternal = true;
  }
};
Object.defineProperty(ul, Symbol.hasInstance, { value: (r) => r instanceof je && r.assign != null && r.assign instanceof Function });
var io = {};
He(io, { assertTypesMatch: () => $w, getTensorsInContainer: () => Bm, isTensorInList: () => zj, makeTypesMatch: () => Ge });
var Iw;
(function(r) {
  r.R0 = "R0", r.R1 = "R1", r.R2 = "R2", r.R3 = "R3", r.R4 = "R4", r.R5 = "R5", r.R6 = "R6";
})(Iw || (Iw = {}));
var Nw;
(function(r) {
  r.float32 = "float32", r.int32 = "int32", r.bool = "int32", r.complex64 = "complex64";
})(Nw || (Nw = {}));
var Tw;
(function(r) {
  r.float32 = "float32", r.int32 = "int32", r.bool = "bool", r.complex64 = "complex64";
})(Tw || (Tw = {}));
var Ew;
(function(r) {
  r.float32 = "float32", r.int32 = "float32", r.bool = "float32", r.complex64 = "complex64";
})(Ew || (Ew = {}));
var Aw;
(function(r) {
  r.float32 = "complex64", r.int32 = "complex64", r.bool = "complex64", r.complex64 = "complex64";
})(Aw || (Aw = {}));
var Lj = { float32: Ew, int32: Nw, bool: Tw, complex64: Aw };
function pr(r, e) {
  if (r === "string" || e === "string") {
    if (r === "string" && e === "string")
      return "string";
    throw new Error(`Can not upcast ${r} with ${e}`);
  }
  return Lj[r][e];
}
function Zl(r) {
  return pr(r, "int32");
}
function Ge(r, e) {
  if (r.dtype === e.dtype)
    return [r, e];
  let t = pr(r.dtype, e.dtype);
  return [r.cast(t), e.cast(t)];
}
function $w(r, e) {
  E(r.dtype === e.dtype, () => `The dtypes of the first(${r.dtype}) and second(${e.dtype}) input must match`);
}
function zj(r, e) {
  return e.some((t) => t.id === r.id);
}
function Bm(r) {
  let e = [], t = new Set();
  return _1(r, e, t), e;
}
function _1(r, e, t) {
  if (r == null)
    return;
  if (r instanceof je) {
    e.push(r);
    return;
  }
  if (!Bj(r))
    return;
  let n = r;
  for (let o in n) {
    let s = n[o];
    t.has(s) || (t.add(s), _1(s, e, t));
  }
}
function Bj(r) {
  return Array.isArray(r) || typeof r == "object";
}
function Dw(r) {
  return r.kernelName != null;
}
var Rw = class {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = new WeakMap(), this.profiling = false, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null, get kernelNames() {
      return Array.from(new Set(this.kernels.map((e) => e.name)));
    } };
  }
  dispose() {
    for (let e in this.registeredVariables)
      this.registeredVariables[e].dispose();
  }
};
var Jl = class {
  constructor(e) {
    this.ENV = e, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Rw();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    let e = this.getSortedBackends();
    for (let t = 0; t < e.length; t++) {
      let n = e[t];
      if (await this.initializeBackend(n).success) {
        await this.setBackend(n);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      let { name: e, asyncInit: t } = this.initializeBackendsAndReturnBest();
      if (t)
        throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(e);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(e) {
    if (!(e in this.registry))
      if (e in this.registryFactory) {
        let { asyncInit: t } = this.initializeBackend(e);
        if (t)
          return null;
      } else
        return null;
    return this.registry[e];
  }
  findBackendFactory(e) {
    return e in this.registryFactory ? this.registryFactory[e].factory : null;
  }
  registerBackend(e, t, n = 1) {
    return e in this.registryFactory ? (Vn(`${e} backend was already registered. Reusing existing backend factory.`), false) : (this.registryFactory[e] = { factory: t, priority: n }, true);
  }
  async setBackend(e) {
    if (this.registryFactory[e] == null)
      throw new Error(`Backend name '${e}' not found in registry`);
    if (this.backendName = e, this.registry[e] == null) {
      this.backendInstance = null;
      let { success: t, asyncInit: n } = this.initializeBackend(e);
      if (!(n ? await t : t))
        return false;
    }
    return this.backendInstance = this.registry[e], this.setupRegisteredKernels(), this.profiler = new Cw(this.backendInstance), true;
  }
  setupRegisteredKernels() {
    Jh(this.backendName).forEach((t) => {
      t.setupFunc != null && t.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(e) {
    Jh(e).forEach((n) => {
      n.disposeFunc != null && n.disposeFunc(this.registry[e]);
    });
  }
  initializeBackend(e) {
    let t = this.registryFactory[e];
    if (t == null)
      throw new Error(`Cannot initialize backend ${e}, no registration found.`);
    try {
      let n = t.factory();
      if (n && !(n instanceof Ls) && typeof n.then == "function") {
        let o = ++this.pendingBackendInitId, s = n.then((a) => o < this.pendingBackendInitId ? false : (this.registry[e] = a, this.pendingBackendInit = null, true)).catch((a) => (o < this.pendingBackendInitId || (this.pendingBackendInit = null, Vn(`Initialization of backend ${e} failed`), Vn(a.stack || a.message)), false));
        return this.pendingBackendInit = s, { success: s, asyncInit: true };
      } else
        return this.registry[e] = n, { success: true, asyncInit: false };
    } catch (n) {
      return Vn(`Initialization of backend ${e} failed`), Vn(n.stack || n.message), { success: false, asyncInit: false };
    }
  }
  removeBackend(e) {
    if (!(e in this.registryFactory))
      throw new Error(`${e} backend not found in registry`);
    this.backendName === e && this.pendingBackendInit != null && this.pendingBackendInitId++, e in this.registry && (this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e]), delete this.registryFactory[e], this.backendName === e && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((e, t) => this.registryFactory[t].priority - this.registryFactory[e].priority);
  }
  initializeBackendsAndReturnBest() {
    let e = this.getSortedBackends();
    for (let t = 0; t < e.length; t++) {
      let n = e[t], { success: o, asyncInit: s } = this.initializeBackend(n);
      if (s || o)
        return { name: n, asyncInit: s };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(e, t) {
    let n = this.state.tensorInfo.get(t), o = n.backend, s = this.readSync(t), a = o.refCount(t);
    o.disposeData(t, true), n.backend = e, e.move(t, s, n.shape, n.dtype, a), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(e, t) {
    let n = null;
    if (t == null) {
      if (typeof e != "function")
        throw new Error("Please provide a function to tidy()");
      t = e;
    } else {
      if (typeof e != "string" && !(e instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof t != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      n = e;
    }
    let o;
    return this.scopedRun(() => this.startScope(n), () => this.endScope(o), () => (o = t(), o instanceof Promise && console.error("Cannot return a Promise inside of tidy."), o));
  }
  scopedRun(e, t, n) {
    e();
    try {
      let o = n();
      return t(), o;
    } catch (o) {
      throw t(), o;
    }
  }
  nextTensorId() {
    return Jl.nextTensorId++;
  }
  nextVariableId() {
    return Jl.nextVariableId++;
  }
  clone(e) {
    let t = T.runKernel(to, { x: e }), n = { x: e }, o = (a) => ({ x: () => {
      let i = "float32", l = { x: a }, u = { dtype: i };
      return T.runKernel(Qn, l, u);
    } }), s = [];
    return this.addTapeNode(this.state.activeScope.name, n, [t], o, s, {}), t;
  }
  runKernel(e, t, n) {
    if (this.backendName == null && this.backend, !(Om(e, this.backendName) != null))
      throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: e, inputs: t, attrs: n });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(e, t, n) {
    let o = this.backend.numDataIds(), s = 0;
    n.forEach((l) => {
      s += l.dtype === "complex64" ? 3 : 1;
    });
    let a = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i = o - t - s - a;
    if (i > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`);
  }
  runKernelFunc(e) {
    let t, n = [], o = this.isTapeOn(), s = this.state.numBytes, a = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let i;
    this.backendName == null && this.backend;
    let l, u = Dw(e) ? e.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (Dw(e)) {
      let { kernelName: d, inputs: h, attrs: g } = e;
      this.backendName == null && this.backend;
      let y = Om(d, this.backendName);
      E(y != null, () => `Cannot find registered kernel '${d}' for backend '${this.backendName}'`), i = () => {
        let w = this.backend.numDataIds();
        l = y.kernelFunc({ inputs: h, attrs: g, backend: this.backend });
        let x = Array.isArray(l) ? l : [l];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(d, w, x);
        let k = x.map((C) => {
          if (C.rank != null)
            return C;
          let { dataId: A, shape: $, dtype: R } = C;
          return this.makeTensorFromDataId(A, $, R);
        });
        if (o) {
          let C = this.getTensorsForGradient(d, h, k);
          n = this.saveTensorsForBackwardMode(C);
        }
        return k;
      };
    } else {
      let { forwardFunc: d } = e, h = (g) => {
        !o || (n = g.map((y) => this.keep(this.clone(y))));
      };
      i = () => {
        let g = this.backend.numDataIds();
        l = this.tidy(() => d(this.backend, h));
        let y = Array.isArray(l) ? l : [l];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(u, g, y), y;
      };
    }
    let { inputs: c, attrs: p } = e, m = Dw(e) ? null : e.backwardsFunc, f;
    return this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
      !this.ENV.getBool("DEBUG") && !this.state.profiling ? t = i() : (f = this.profiler.profileKernel(u, c, () => i()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(f), t = f.outputs);
    }), o && this.addTapeNode(u, c, t, m, n, p), this.state.profiling && this.state.activeProfile.kernels.push({ name: u, bytesAdded: this.state.numBytes - s, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - a, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(c).map((d) => c[d] != null ? c[d].shape : null), outputShapes: t.map((d) => d.shape), kernelTimeMs: f.timeMs, extraInfo: f.extraInfo }), Array.isArray(l) ? t : t[0];
  }
  saveTensorsForBackwardMode(e) {
    return e.map((n) => this.keep(this.clone(n)));
  }
  getTensorsForGradient(e, t, n) {
    let o = bw(e);
    if (o != null) {
      let s = o.inputsToSave || [], a = o.outputsToSave || [], i;
      o.saveAllInputs ? (E(Array.isArray(t), () => "saveAllInputs is true, expected inputs to be an array."), i = Object.keys(t).map((u) => t[u])) : i = s.map((u) => t[u]);
      let l = n.filter((u, c) => a[c]);
      return i.concat(l);
    }
    return [];
  }
  makeTensor(e, t, n, o) {
    if (e == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    n = n || "float32", o = o || this.backend;
    let s = e;
    n === "string" && Co(e[0]) && (s = e.map((l) => ll(l)));
    let a = o.write(s, t, n), i = new je(t, n, a, this.nextTensorId());
    if (this.trackTensor(i, o), n === "string") {
      let l = this.state.tensorInfo.get(a), u = hw(s);
      this.state.numBytes += u - l.bytes, l.bytes = u;
    }
    return i;
  }
  makeTensorFromDataId(e, t, n, o) {
    n = n || "float32";
    let s = new je(t, n, e, this.nextTensorId());
    return this.trackTensor(s, o), s;
  }
  makeVariable(e, t = true, n, o) {
    n = n || this.nextVariableId().toString(), o != null && o !== e.dtype && (e = e.cast(o));
    let s = new ul(e, t, n, this.nextTensorId());
    if (this.state.registeredVariables[s.name] != null)
      throw new Error(`Variable with name ${s.name} was already registered`);
    return this.state.registeredVariables[s.name] = s, this.incRef(s, this.backend), s;
  }
  trackTensor(e, t) {
    this.state.numTensors++, e.dtype === "string" && this.state.numStringTensors++;
    let n = 0;
    e.dtype !== "complex64" && e.dtype !== "string" && (n = e.size * Xh(e.dtype)), this.state.numBytes += n, this.state.tensorInfo.has(e.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(e.dataId, { backend: t || this.backend, dtype: e.dtype, shape: e.shape, bytes: n })), e instanceof ul || this.track(e);
  }
  incRef(e, t) {
    this.trackTensor(e, t), this.backend.incRef(e.dataId);
  }
  removeDataId(e, t) {
    this.state.tensorInfo.has(e) && this.state.tensorInfo.get(e).backend === t && (this.state.tensorInfo.delete(e), this.state.numDataBuffers--);
  }
  disposeTensor(e) {
    if (!this.state.tensorInfo.has(e.dataId))
      return;
    let t = this.state.tensorInfo.get(e.dataId);
    if (this.state.numTensors--, e.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= t.bytes), e.dtype !== "complex64" && e.dtype !== "string") {
      let n = e.size * Xh(e.dtype);
      this.state.numBytes -= n;
    }
    t.backend.disposeData(e.dataId) && this.removeDataId(e.dataId, t.backend);
  }
  disposeVariables() {
    for (let e in this.state.registeredVariables) {
      let t = this.state.registeredVariables[e];
      this.disposeVariable(t);
    }
  }
  disposeVariable(e) {
    this.disposeTensor(e), this.state.registeredVariables[e.name] != null && delete this.state.registeredVariables[e.name];
  }
  memory() {
    let e = this.backend.memory();
    return e.numTensors = this.state.numTensors, e.numDataBuffers = this.state.numDataBuffers, e.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (e.unreliable = true, e.reasons == null && (e.reasons = []), e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), e;
  }
  async profile(e) {
    this.state.profiling = true;
    let t = this.state.numBytes, n = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await e(), this.state.profiling = false, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((o) => o.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - t, this.state.activeProfile.newTensors = this.state.numTensors - n;
    for (let o of this.state.activeProfile.kernels)
      o.kernelTimeMs = await o.kernelTimeMs, o.extraInfo = await o.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(e, t, n, o, s, a) {
    let i = { id: this.state.nextTapeNodeId++, kernelName: e, inputs: t, outputs: n, saved: s }, l = bw(e);
    l != null && (o = l.gradFunc), o != null && (i.gradient = (u) => (u = u.map((c, p) => {
      if (c == null) {
        let m = n[p], f = hc(m.size, m.dtype);
        return this.makeTensor(f, m.shape, m.dtype);
      }
      return c;
    }), o(u.length > 1 ? u : u[0], s, a))), this.state.activeTape.push(i);
  }
  keep(e) {
    return e.kept = true, e;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  startScope(e) {
    let t = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
    e && (t.name = e), this.state.scopeStack.push(t), this.state.activeScope = t;
  }
  endScope(e) {
    let t = Bm(e), n = new Set(t.map((s) => s.id));
    for (let s = 0; s < this.state.activeScope.track.length; s++) {
      let a = this.state.activeScope.track[s];
      !a.kept && !n.has(a.id) && a.dispose();
    }
    let o = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], t.forEach((s) => {
      !s.kept && s.scopeId === o.id && this.track(s);
    });
  }
  gradients(e, t, n, o = false) {
    if (E(t.length > 0, () => "gradients() received an empty list of xs."), n != null && n.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);
    let s = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", e));
    E(s instanceof je, () => "The result y returned by f() must be a tensor.");
    let a = d1(this.state.activeTape, t, s);
    if (!o && a.length === 0 && t.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      let i = {};
      i[s.id] = n == null ? Vj(s.shape) : n, h1(i, a, (u) => this.tidy(u), Wj);
      let l = t.map((u) => i[u.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((u) => {
        for (let c of u.saved)
          c.dispose();
      }), this.state.activeTape = null), { value: s, grads: l };
    });
  }
  customGrad(e) {
    return E(zs(e), () => "The f passed in customGrad(f) must be a function."), (...t) => {
      E(t.every((i) => i instanceof je), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let n, o = {};
      t.forEach((i, l) => {
        o[l] = i;
      });
      let s = (i, l) => (n = e(...t, l), E(n.value instanceof je, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), E(zs(n.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), n.value), a = (i, l) => {
        let u = n.gradFunc(i, l), c = Array.isArray(u) ? u : [u];
        E(c.length === t.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), E(c.every((m) => m instanceof je), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        let p = {};
        return c.forEach((m, f) => {
          p[f] = () => m;
        }), p;
      };
      return this.runKernelFunc({ forwardFunc: s, backwardsFunc: a, inputs: o });
    };
  }
  readSync(e) {
    return this.state.tensorInfo.get(e).backend.readSync(e);
  }
  read(e) {
    return this.state.tensorInfo.get(e).backend.read(e);
  }
  async time(e) {
    let t = Yl(), n = await this.backend.time(e);
    return n.wallMs = Yl() - t, n;
  }
  track(e) {
    return this.state.activeScope != null && (e.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(e)), e;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Rw();
    for (let e in this.registry)
      this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
};
Jl.nextTensorId = 0;
Jl.nextVariableId = 0;
function Vj(r) {
  let e = Nm(nt(r), "float32");
  return T.makeTensor(e, r, "float32");
}
function Fw() {
  let r = yw();
  if (r._tfengine == null) {
    let e = new Yh(r);
    r._tfengine = new Jl(e);
  }
  return KI(r._tfengine.ENV), b1(() => r._tfengine), r._tfengine;
}
var T = Fw();
function Wj(r, e) {
  let t = { a: r, b: e };
  return T.runKernel(Wn, t);
}
var Ql = {};
He(Ql, { isBrowser: () => Ow, isMobile: () => Gj });
function jj() {
  return typeof navigator != "undefined" && navigator != null;
}
function Gj(r) {
  if (r || jj()) {
    if (r || (r = navigator), r.product === "ReactNative")
      return true;
    let e = r.userAgent || r.vendor || (typeof window != "undefined" ? window.opera : "");
    if (!e) {
      let t = r;
      return t.userAgentData && t.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4));
  }
  return false;
}
function Ow() {
  return typeof window != "undefined" && window.document != null || typeof WorkerGlobalScope != "undefined";
}
var ws = j();
ws.registerFlag("DEBUG", () => false, (r) => {
  r && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
ws.registerFlag("IS_BROWSER", () => Ow());
ws.registerFlag("IS_NODE", () => typeof process != "undefined" && typeof process.versions != "undefined" && typeof process.versions.node != "undefined");
ws.registerFlag("IS_CHROME", () => typeof navigator != "undefined" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
ws.registerFlag("PROD", () => false);
ws.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => ws.getBool("DEBUG"));
ws.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => true);
ws.registerFlag("IS_TEST", () => false);
ws.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => true);
ws.registerFlag("WRAP_TO_IMAGEBITMAP", () => false);
function Ar(r, e) {
  let t = r;
  if (cr(r))
    return e === "string" ? [] : [r.length];
  if (!Array.isArray(r))
    return [];
  let n = [];
  for (; Array.isArray(t) || cr(t) && e !== "string"; )
    n.push(t.length), t = t[0];
  return Array.isArray(r) && j().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && v1(r, n, []), n;
}
function v1(r, e, t) {
  if (t = t || [], !Array.isArray(r) && !cr(r)) {
    E(e.length === 0, () => `Element arr[${t.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);
    return;
  }
  E(e.length > 0, () => `Element arr[${t.join("][")}] should be a primitive, but is an array of ${r.length} elements`), E(r.length === e[0], () => `Element arr[${t.join("][")}] should have ${e[0]} elements, but has ${r.length} elements`);
  let n = e.slice(1);
  for (let o = 0; o < r.length; ++o)
    v1(r[o], n, t.concat(o));
}
function C1(r, e, t, n) {
  if (r !== "string_or_numeric") {
    if (r == null)
      throw new Error("Expected dtype cannot be null.");
    if (r !== "numeric" && r !== e || r === "numeric" && e === "string")
      throw new Error(`Argument '${t}' passed to '${n}' must be ${r} tensor, but got ${e} tensor`);
  }
}
function _(r, e, t, n = "numeric") {
  if (r instanceof je)
    return C1(n, r.dtype, e, t), r;
  let o = fc(r);
  if (o !== "string" && ["bool", "int32", "float32"].indexOf(n) >= 0 && (o = n), C1(n, o, e, t), r == null || !cr(r) && !Array.isArray(r) && typeof r != "number" && typeof r != "boolean" && typeof r != "string") {
    let l = r == null ? "null" : r.constructor.name;
    throw new Error(`Argument '${e}' passed to '${t}' must be a Tensor or TensorLike, but got '${l}'`);
  }
  let s = Ar(r, o);
  !cr(r) && !Array.isArray(r) && (r = [r]);
  let i = o !== "string" ? Qc(r, o) : vo(r, [], true);
  return T.makeTensor(i, s, o);
}
function fa(r, e, t, n = "numeric") {
  if (!Array.isArray(r))
    throw new Error(`Argument ${e} passed to ${t} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return r.map((s, a) => _(s, `${e}[${a}]`, t, n));
}
var S1 = "__op";
function I(r) {
  let e = Object.keys(r);
  if (e.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);
  let t = e[0], n = r[t];
  t.endsWith("_") && (t = t.substring(0, t.length - 1)), t = t + S1;
  let o = (...s) => {
    T.startScope(t);
    try {
      let a = n(...s);
      return Em(a) && console.error("Cannot return a Promise inside of tidy."), T.endScope(a), a;
    } catch (a) {
      throw T.endScope(null), a;
    }
  };
  return Object.defineProperty(o, "name", { value: t, configurable: true }), o;
}
function Uj(r, e) {
  let t = _(r, "real", "complex"), n = _(e, "imag", "complex");
  $t(t.shape, n.shape, `real and imag shapes, ${t.shape} and ${n.shape}, must match in call to tf.complex().`);
  let o = { real: t, imag: n };
  return T.runKernel(bc, o);
}
var $n = I({ complex_: Uj });
function Yr(r, e, t, n) {
  if (n == null && (n = fc(r)), n === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (!cr(r) && !Array.isArray(r) && typeof r != "number" && typeof r != "boolean" && typeof r != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (e != null) {
    Tm(e);
    let o = nt(e), s = nt(t);
    E(o === s, () => `Based on the provided shape, [${e}], the tensor should have ${o} values but has ${s}`);
    for (let a = 0; a < t.length; ++a) {
      let i = t[a], l = a === t.length - 1 ? i !== nt(e.slice(a)) : true;
      E(t[a] === e[a] || !l, () => `Error creating a new Tensor. Inferred shape (${t}) does not match the provided shape (${e}). `);
    }
  }
  return !cr(r) && !Array.isArray(r) && (r = [r]), e = e || t, r = n !== "string" ? Qc(r, n) : vo(r, [], true), T.makeTensor(r, e, n);
}
function vr(r, e, t) {
  let n = Ar(r, t);
  return Yr(r, e, n, t);
}
var Vm = { float32: 4, float16: 2, int32: 4, uint16: 2, uint8: 1, bool: 1, complex64: 8 };
var rg = 4;
async function I1(r, e) {
  let t = [], n = [], o = Array.isArray(r) ? r.map((a) => a.name) : Object.keys(r);
  for (let a = 0; a < o.length; ++a) {
    let i = o[a], l = Array.isArray(r) ? r[a].tensor : r[i];
    if (l.dtype !== "float32" && l.dtype !== "int32" && l.dtype !== "bool" && l.dtype !== "string" && l.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${i}': ${l.dtype}`);
    let u = { name: i, shape: l.shape, dtype: l.dtype };
    if (l.dtype === "string") {
      let c = new Promise(async (p) => {
        let m = await l.bytes(), f = m.reduce((g, y) => g + y.length, 0) + rg * m.length, d = new Uint8Array(f), h = 0;
        for (let g = 0; g < m.length; g++) {
          let y = m[g], w = new Uint8Array(new Uint32Array([y.length]).buffer);
          d.set(w, h), h += rg, d.set(y, h), h += y.length;
        }
        p(d);
      });
      n.push(c);
    } else
      n.push(l.data());
    e != null && (u.group = e), t.push(u);
  }
  let s = await Promise.all(n);
  return { data: Hj(s), specs: t };
}
function ng(r, e) {
  let t = {}, n, o = 0;
  for (let s of e) {
    let a = s.name, i = s.dtype, l = s.shape, u = nt(l), c;
    if ("quantization" in s) {
      let p = s.quantization;
      if (p.dtype === "uint8" || p.dtype === "uint16") {
        if (!("min" in p && "scale" in p))
          throw new Error(`Weight ${s.name} with quantization ${p.dtype} doesn't have corresponding metadata min and scale.`);
      } else if (p.dtype === "float16") {
        if (i !== "float32")
          throw new Error(`Weight ${s.name} is quantized with ${p.dtype} which only supports weights of type float32 not ${i}.`);
      } else
        throw new Error(`Weight ${s.name} has unknown quantization dtype ${p.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
      let m = Vm[p.dtype], f = r.slice(o, o + u * m), d = p.dtype === "uint8" ? new Uint8Array(f) : new Uint16Array(f);
      if (i === "float32")
        if (p.dtype === "uint8" || p.dtype === "uint16") {
          c = new Float32Array(d.length);
          for (let h = 0; h < d.length; h++) {
            let g = d[h];
            c[h] = g * p.scale + p.min;
          }
        } else if (p.dtype === "float16")
          n === void 0 && (n = Yj()), c = n(d);
        else
          throw new Error(`Unsupported quantization type ${p.dtype} for weight type float32.`);
      else if (i === "int32") {
        if (p.dtype !== "uint8" && p.dtype !== "uint16")
          throw new Error(`Unsupported quantization type ${p.dtype} for weight type int32.`);
        c = new Int32Array(d.length);
        for (let h = 0; h < d.length; h++) {
          let g = d[h];
          c[h] = Math.round(g * p.scale + p.min);
        }
      } else
        throw new Error(`Unsupported dtype in weight '${a}': ${i}`);
      o += u * m;
    } else if (i === "string") {
      let p = nt(s.shape);
      c = [];
      for (let m = 0; m < p; m++) {
        let f = new Uint32Array(r.slice(o, o + rg))[0];
        o += rg;
        let d = new Uint8Array(r.slice(o, o + f));
        c.push(d), o += f;
      }
    } else {
      let p = Vm[i], m = r.slice(o, o + u * p);
      if (i === "float32")
        c = new Float32Array(m);
      else if (i === "int32")
        c = new Int32Array(m);
      else if (i === "bool")
        c = new Uint8Array(m);
      else if (i === "complex64") {
        c = new Float32Array(m);
        let f = new Float32Array(c.length / 2), d = new Float32Array(c.length / 2);
        for (let y = 0; y < f.length; y++)
          f[y] = c[y * 2], d[y] = c[y * 2 + 1];
        let h = vr(f, l, "float32"), g = vr(d, l, "float32");
        t[a] = $n(h, g), h.dispose(), g.dispose();
      } else
        throw new Error(`Unsupported dtype in weight '${a}': ${i}`);
      o += u * p;
    }
    i !== "complex64" && (t[a] = vr(c, l, i));
  }
  return t;
}
function Hj(r) {
  if (r === null)
    throw new Error(`Invalid input value: ${JSON.stringify(r)}`);
  let e = 0, t = [];
  r.forEach((s) => {
    if (e += s.byteLength, t.push(s.byteLength === s.buffer.byteLength ? s : new s.constructor(s)), !(s instanceof Float32Array || s instanceof Int32Array || s instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`);
  });
  let n = new Uint8Array(e), o = 0;
  return t.forEach((s) => {
    n.set(new Uint8Array(s.buffer), o), o += s.byteLength;
  }), n.buffer;
}
var Pw = typeof Buffer != "undefined" && (typeof Blob == "undefined" || typeof atob == "undefined" || typeof btoa == "undefined");
function N1(r) {
  return Pw ? Buffer.byteLength(r) : new Blob([r]).size;
}
function T1(r) {
  if (Pw)
    return Buffer.from(r).toString("base64");
  let e = new Uint8Array(r), t = "";
  for (let n = 0, o = e.length; n < o; n++)
    t += String.fromCharCode(e[n]);
  return btoa(t);
}
function E1(r) {
  if (Pw) {
    let n = Buffer.from(r, "base64");
    return n.buffer.slice(n.byteOffset, n.byteOffset + n.byteLength);
  }
  let e = atob(r), t = new Uint8Array(e.length);
  for (let n = 0; n < e.length; ++n)
    t.set([e.charCodeAt(n)], n);
  return t.buffer;
}
function rp(r) {
  if (r.length === 1)
    return r[0];
  let e = 0;
  r.forEach((o) => {
    e += o.byteLength;
  });
  let t = new Uint8Array(e), n = 0;
  return r.forEach((o) => {
    t.set(new Uint8Array(o), n), n += o.byteLength;
  }), t.buffer;
}
function Mw(r) {
  let e = "/";
  for (r = r.trim(); r.endsWith(e); )
    r = r.slice(0, r.length - 1);
  let t = r.split(e);
  return t[t.length - 1];
}
function og(r, e) {
  let t = { modelTopology: r.modelTopology, format: r.format, generatedBy: r.generatedBy, convertedBy: r.convertedBy, weightsManifest: e };
  return r.signature != null && (t.signature = r.signature), r.userDefinedMetadata != null && (t.userDefinedMetadata = r.userDefinedMetadata), r.modelInitializer != null && (t.modelInitializer = r.modelInitializer), r.trainingConfig != null && (t.trainingConfig = r.trainingConfig), t;
}
async function np(r, e) {
  let t = { modelTopology: r.modelTopology, format: r.format, generatedBy: r.generatedBy, convertedBy: r.convertedBy };
  if (r.trainingConfig != null && (t.trainingConfig = r.trainingConfig), r.weightsManifest != null) {
    let [n, o] = await e(r.weightsManifest);
    t.weightSpecs = n, t.weightData = o;
  }
  return r.signature != null && (t.signature = r.signature), r.userDefinedMetadata != null && (t.userDefinedMetadata = r.userDefinedMetadata), r.modelInitializer != null && (t.modelInitializer = r.modelInitializer), t;
}
function ii(r) {
  if (r.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return { dateSaved: new Date(), modelTopologyType: "JSON", modelTopologyBytes: r.modelTopology == null ? 0 : N1(JSON.stringify(r.modelTopology)), weightSpecsBytes: r.weightSpecs == null ? 0 : N1(JSON.stringify(r.weightSpecs)), weightDataBytes: r.weightData == null ? 0 : r.weightData.byteLength };
}
function qj() {
  let r = (t) => {
    let n = t << 13, o = 0;
    for (; (n & 8388608) == 0; )
      o -= 8388608, n <<= 1;
    return n &= ~8388608, o += 947912704, n | o;
  }, e = new Uint32Array(2048);
  e[0] = 0;
  for (let t = 1; t < 1024; t++)
    e[t] = r(t);
  for (let t = 1024; t < 2048; t++)
    e[t] = 939524096 + (t - 1024 << 13);
  return e;
}
function Kj() {
  let r = new Uint32Array(64);
  r[0] = 0, r[31] = 1199570944, r[32] = 2147483648, r[63] = 3347054592;
  for (let e = 1; e < 31; e++)
    r[e] = e << 23;
  for (let e = 33; e < 63; e++)
    r[e] = 2147483648 + (e - 32 << 23);
  return r;
}
function Xj() {
  let r = new Uint32Array(64);
  for (let e = 0; e < 64; e++)
    r[e] = 1024;
  return r[0] = r[32] = 0, r;
}
function Yj() {
  let r = qj(), e = Kj(), t = Xj();
  return (n) => {
    let o = new ArrayBuffer(4 * n.length), s = new Uint32Array(o);
    for (let a = 0; a < n.length; a++) {
      let i = n[a], l = r[t[i >> 10] + (i & 1023)] + e[i >> 10];
      s[a] = l;
    }
    return new Float32Array(o);
  };
}
var vt = class {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return vt.instance == null && (vt.instance = new vt()), vt.instance;
  }
  static registerSaveRouter(e) {
    vt.getInstance().saveRouters.push(e);
  }
  static registerLoadRouter(e) {
    vt.getInstance().loadRouters.push(e);
  }
  static getSaveHandlers(e) {
    return vt.getHandlers(e, "save");
  }
  static getLoadHandlers(e, t) {
    return vt.getHandlers(e, "load", t);
  }
  static getHandlers(e, t, n) {
    let o = [];
    return (t === "load" ? vt.getInstance().loadRouters : vt.getInstance().saveRouters).forEach((a) => {
      let i = a(e, n);
      i !== null && o.push(i);
    }), o;
  }
};
var A1 = (r) => vt.registerSaveRouter(r);
var $1 = (r) => vt.registerLoadRouter(r);
var D1 = (r) => vt.getSaveHandlers(r);
var R1 = (r, e) => vt.getLoadHandlers(r, e);
var Lw = "tensorflowjs";
var zw = 1;
var eu = "models_store";
var cl = "model_info_store";
function F1() {
  if (!j().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  let r = typeof window == "undefined" ? self : window, e = r.indexedDB || r.mozIndexedDB || r.webkitIndexedDB || r.msIndexedDB || r.shimIndexedDB;
  if (e == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return e;
}
function Bw(r) {
  let e = r.result;
  e.createObjectStore(eu, { keyPath: "modelPath" }), e.createObjectStore(cl, { keyPath: "modelPath" });
}
var da = class {
  constructor(e) {
    if (this.indexedDB = F1(), e == null || !e)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = e;
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, e);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  databaseAction(e, t) {
    return new Promise((n, o) => {
      let s = this.indexedDB.open(Lw, zw);
      s.onupgradeneeded = () => Bw(s), s.onsuccess = () => {
        let a = s.result;
        if (t == null) {
          let i = a.transaction(eu, "readonly"), u = i.objectStore(eu).get(this.modelPath);
          u.onsuccess = () => {
            if (u.result == null)
              return a.close(), o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            n(u.result.modelArtifacts);
          }, u.onerror = (c) => (a.close(), o(u.error)), i.oncomplete = () => a.close();
        } else {
          let i = ii(t), l = a.transaction(cl, "readwrite"), u = l.objectStore(cl), c = u.put({ modelPath: this.modelPath, modelArtifactsInfo: i }), p;
          c.onsuccess = () => {
            p = a.transaction(eu, "readwrite");
            let f = p.objectStore(eu).put({ modelPath: this.modelPath, modelArtifacts: t, modelArtifactsInfo: i });
            f.onsuccess = () => n({ modelArtifactsInfo: i }), f.onerror = (d) => {
              u = l.objectStore(cl);
              let h = u.delete(this.modelPath);
              h.onsuccess = () => (a.close(), o(f.error)), h.onerror = (g) => (a.close(), o(f.error));
            };
          }, c.onerror = (m) => (a.close(), o(c.error)), l.oncomplete = () => {
            p == null ? a.close() : p.oncomplete = () => a.close();
          };
        }
      }, s.onerror = (a) => o(s.error);
    });
  }
};
da.URL_SCHEME = "indexeddb://";
var O1 = (r) => j().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(da.URL_SCHEME) ? Zj(r.slice(da.URL_SCHEME.length)) : null;
vt.registerSaveRouter(O1);
vt.registerLoadRouter(O1);
function Zj(r) {
  return new da(r);
}
function Jj(r) {
  return r.startsWith(da.URL_SCHEME) ? r.slice(da.URL_SCHEME.length) : r;
}
var Vw = class {
  constructor() {
    this.indexedDB = F1();
  }
  async listModels() {
    return new Promise((e, t) => {
      let n = this.indexedDB.open(Lw, zw);
      n.onupgradeneeded = () => Bw(n), n.onsuccess = () => {
        let o = n.result, s = o.transaction(cl, "readonly"), i = s.objectStore(cl).getAll();
        i.onsuccess = () => {
          let l = {};
          for (let u of i.result)
            l[u.modelPath] = u.modelArtifactsInfo;
          e(l);
        }, i.onerror = (l) => (o.close(), t(i.error)), s.oncomplete = () => o.close();
      }, n.onerror = (o) => t(n.error);
    });
  }
  async removeModel(e) {
    return e = Jj(e), new Promise((t, n) => {
      let o = this.indexedDB.open(Lw, zw);
      o.onupgradeneeded = () => Bw(o), o.onsuccess = () => {
        let s = o.result, a = s.transaction(cl, "readwrite"), i = a.objectStore(cl), l = i.get(e), u;
        l.onsuccess = () => {
          if (l.result == null)
            return s.close(), n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));
          {
            let c = i.delete(e), p = () => {
              u = s.transaction(eu, "readwrite");
              let f = u.objectStore(eu).delete(e);
              f.onsuccess = () => t(l.result.modelArtifactsInfo), f.onerror = (d) => n(l.error);
            };
            c.onsuccess = p, c.onerror = (m) => (p(), s.close(), n(l.error));
          }
        }, l.onerror = (c) => (s.close(), n(l.error)), a.oncomplete = () => {
          u == null ? s.close() : u.oncomplete = () => s.close();
        };
      }, o.onerror = (s) => n(o.error);
    });
  }
};
var ha = "/";
var op = "tensorflowjs_models";
var P1 = "info";
var Qj = "model_topology";
var eG = "weight_specs";
var tG = "weight_data";
var rG = "model_metadata";
function M1(r) {
  return { info: [op, r, P1].join(ha), topology: [op, r, Qj].join(ha), weightSpecs: [op, r, eG].join(ha), weightData: [op, r, tG].join(ha), modelMetadata: [op, r, rG].join(ha) };
}
function L1(r) {
  for (let e of Object.values(r))
    window.localStorage.removeItem(e);
}
function nG(r) {
  let e = r.split(ha);
  if (e.length < 3)
    throw new Error(`Invalid key format: ${r}`);
  return e.slice(1, e.length - 1).join(ha);
}
function oG(r) {
  return r.startsWith(ga.URL_SCHEME) ? r.slice(ga.URL_SCHEME.length) : r;
}
var ga = class {
  constructor(e) {
    if (!j().getBool("IS_BROWSER") || typeof window == "undefined" || typeof window.localStorage == "undefined")
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, e == null || !e)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = e, this.keys = M1(this.modelPath);
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      let t = JSON.stringify(e.modelTopology), n = JSON.stringify(e.weightSpecs), o = ii(e);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(o)), this.LS.setItem(this.keys.topology, t), this.LS.setItem(this.keys.weightSpecs, n), this.LS.setItem(this.keys.weightData, T1(e.weightData));
        let s = { format: e.format, generatedBy: e.generatedBy, convertedBy: e.convertedBy, signature: e.signature != null ? e.signature : void 0, userDefinedMetadata: e.userDefinedMetadata != null ? e.userDefinedMetadata : void 0, modelInitializer: e.modelInitializer != null ? e.modelInitializer : void 0, trainingConfig: e.trainingConfig != null ? e.trainingConfig : void 0 };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(s)), { modelArtifactsInfo: o };
      } catch (s) {
        throw L1(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${o.modelTopologyBytes}, weightSpecsBytes=${o.weightSpecsBytes}, weightDataBytes=${o.weightDataBytes}.`);
      }
    }
  }
  async load() {
    let e = JSON.parse(this.LS.getItem(this.keys.info));
    if (e == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (e.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    let t = {}, n = JSON.parse(this.LS.getItem(this.keys.topology));
    if (n == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    t.modelTopology = n;
    let o = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (o == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    t.weightSpecs = o;
    let s = this.LS.getItem(this.keys.modelMetadata);
    if (s != null) {
      let i = JSON.parse(s);
      t.format = i.format, t.generatedBy = i.generatedBy, t.convertedBy = i.convertedBy, i.signature != null && (t.signature = i.signature), i.userDefinedMetadata != null && (t.userDefinedMetadata = i.userDefinedMetadata), i.modelInitializer != null && (t.modelInitializer = i.modelInitializer), i.trainingConfig != null && (t.trainingConfig = i.trainingConfig);
    }
    let a = this.LS.getItem(this.keys.weightData);
    if (a == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return t.weightData = E1(a), t;
  }
};
ga.URL_SCHEME = "localstorage://";
var z1 = (r) => j().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(ga.URL_SCHEME) ? sG(r.slice(ga.URL_SCHEME.length)) : null;
vt.registerSaveRouter(z1);
vt.registerLoadRouter(z1);
function sG(r) {
  return new ga(r);
}
var Ww = class {
  constructor() {
    E(j().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), E(typeof window == "undefined" || typeof window.localStorage != "undefined", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    let e = {}, t = op + ha, n = ha + P1;
    for (let o = 0; o < this.LS.length; ++o) {
      let s = this.LS.key(o);
      if (s.startsWith(t) && s.endsWith(n)) {
        let a = nG(s);
        e[a] = JSON.parse(this.LS.getItem(s));
      }
    }
    return e;
  }
  async removeModel(e) {
    e = oG(e);
    let t = M1(e);
    if (this.LS.getItem(t.info) == null)
      throw new Error(`Cannot find model at path '${e}'`);
    let n = JSON.parse(this.LS.getItem(t.info));
    return L1(t), n;
  }
};
var sp = "://";
var Zr = class {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return Zr.instance == null && (Zr.instance = new Zr()), Zr.instance;
  }
  static registerManager(e, t) {
    E(e != null, () => "scheme must not be undefined or null."), e.endsWith(sp) && (e = e.slice(0, e.indexOf(sp))), E(e.length > 0, () => "scheme must not be an empty string.");
    let n = Zr.getInstance();
    E(n.managers[e] == null, () => `A model store manager is already registered for scheme '${e}'.`), n.managers[e] = t;
  }
  static getManager(e) {
    let t = this.getInstance().managers[e];
    if (t == null)
      throw new Error(`Cannot find model manager for scheme '${e}'`);
    return t;
  }
  static getSchemes() {
    return Object.keys(this.getInstance().managers);
  }
};
function sg(r) {
  if (r.indexOf(sp) === -1)
    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Zr.getSchemes().join(",")}`);
  return { scheme: r.split(sp)[0], path: r.split(sp)[1] };
}
async function B1(r, e, t = false) {
  E(r !== e, () => `Old path and new path are the same: '${r}'`);
  let n = vt.getLoadHandlers(r);
  E(n.length > 0, () => `Copying failed because no load handler is found for source URL ${r}.`), E(n.length < 2, () => `Copying failed because more than one (${n.length}) load handlers for source URL ${r}.`);
  let o = n[0], s = vt.getSaveHandlers(e);
  E(s.length > 0, () => `Copying failed because no save handler is found for destination URL ${e}.`), E(s.length < 2, () => `Copying failed because more than one (${n.length}) save handlers for destination URL ${e}.`);
  let a = s[0], i = sg(r).scheme, l = sg(r).path, u = i === sg(r).scheme, c = await o.load();
  t && u && await Zr.getManager(i).removeModel(l);
  let p = await a.save(c);
  return t && !u && await Zr.getManager(i).removeModel(l), p.modelArtifactsInfo;
}
async function V1() {
  let r = Zr.getSchemes(), e = {};
  for (let t of r) {
    let n = await Zr.getManager(t).listModels();
    for (let o in n) {
      let s = t + sp + o;
      e[s] = n[o];
    }
  }
  return e;
}
async function W1(r) {
  let e = sg(r);
  return Zr.getManager(e.scheme).removeModel(e.path);
}
async function j1(r, e) {
  return B1(r, e, false);
}
async function G1(r, e) {
  return B1(r, e, true);
}
var U1 = class {
  fetch(e, t) {
    return fetch(e, t);
  }
  now() {
    return performance.now();
  }
  encode(e, t) {
    if (t !== "utf-8" && t !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(e);
  }
  decode(e, t) {
    return new TextDecoder(t).decode(e);
  }
};
if (j().get("IS_BROWSER")) {
  j().setPlatform("browser", new U1());
  try {
    Zr.registerManager(ga.URL_SCHEME, new Ww());
  } catch (r) {
  }
  try {
    Zr.registerManager(da.URL_SCHEME, new Vw());
  } catch (r) {
  }
}
var iG = { importFetch: () => H1() };
var jw;
var q1 = class {
  constructor() {
    this.util = pc("util"), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(e, t) {
    return j().global.fetch != null ? j().global.fetch(e, t) : (jw == null && (jw = iG.importFetch()), jw(e, t));
  }
  now() {
    let e = process.hrtime();
    return e[0] * 1e3 + e[1] / 1e6;
  }
  encode(e, t) {
    if (t !== "utf-8" && t !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);
    return this.textEncoder.encode(e);
  }
  decode(e, t) {
    return e.length === 0 ? "" : new this.util.TextDecoder(t).decode(e);
  }
};
j().get("IS_NODE") && j().setPlatform("node", new q1());
function Se(r, e = "float32", t) {
  return e = e || "float32", Tm(r), new ct(r, e, t);
}
function aG(r, e) {
  let t = _(r, "x", "cast");
  if (!dw(e))
    throw new Error(`Failed to cast to unknown dtype ${e}`);
  if (e === "string" && t.dtype !== "string" || e !== "string" && t.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  let n = { x: t }, o = { dtype: e };
  return T.runKernel(Qn, n, o);
}
var J = I({ cast_: aG });
function lG(r) {
  let t = { x: _(r, "x", "clone", "string_or_numeric") };
  return T.runKernel(to, t);
}
var hn = I({ clone_: lG });
function Gw(r, e = false) {
  console.log(r.toString(e));
}
Fw();
var uG = { buffer: Se, cast: J, clone: hn, print: Gw };
w1(uG);
var $r = {};
He($r, { browserFiles: () => Y1, browserHTTPRequest: () => Q1, concatenateArrayBuffers: () => rp, copyModel: () => j1, decodeWeights: () => ng, encodeWeights: () => I1, fromMemory: () => tN, getLoadHandlers: () => R1, getModelArtifactsForJSON: () => np, getModelArtifactsInfoForJSON: () => ii, getSaveHandlers: () => D1, http: () => lg, isHTTPScheme: () => ag, listModels: () => V1, loadWeights: () => Z1, moveModel: () => G1, registerLoadRouter: () => $1, registerSaveRouter: () => A1, removeModel: () => W1, weightsLoaderFactory: () => qw, withSaveHandler: () => rN });
var cG = "model";
var pG = ".json";
var mG = ".weights.bin";
function K1(r) {
  return new Promise((e) => setTimeout(e)).then(r);
}
var pl = class {
  constructor(e) {
    if (!j().getBool("IS_BROWSER"))
      throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    e.startsWith(pl.URL_SCHEME) && (e = e.slice(pl.URL_SCHEME.length)), (e == null || e.length === 0) && (e = cG), this.modelJsonFileName = e + pG, this.weightDataFileName = e + mG;
  }
  async save(e) {
    if (typeof document == "undefined")
      throw new Error("Browser downloads are not supported in this environment since `document` is not present");
    let t = window.URL.createObjectURL(new Blob([e.weightData], { type: "application/octet-stream" }));
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
    {
      let n = [{ paths: ["./" + this.weightDataFileName], weights: e.weightSpecs }], o = og(e, n), s = window.URL.createObjectURL(new Blob([JSON.stringify(o)], { type: "application/json" })), a = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
      if (a.download = this.modelJsonFileName, a.href = s, await K1(() => a.dispatchEvent(new MouseEvent("click"))), e.weightData != null) {
        let i = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
        i.download = this.weightDataFileName, i.href = t, await K1(() => i.dispatchEvent(new MouseEvent("click")));
      }
      return { modelArtifactsInfo: ii(e) };
    }
  }
};
pl.URL_SCHEME = "downloads://";
var X1 = class {
  constructor(e) {
    if (e == null || e.length < 1)
      throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);
    this.jsonFile = e[0], this.weightsFiles = e.slice(1);
  }
  async load() {
    return new Promise((e, t) => {
      let n = new FileReader();
      n.onload = (o) => {
        let s = JSON.parse(o.target.result), a = s.modelTopology;
        if (a == null) {
          t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (s.weightsManifest == null) {
          t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (this.weightsFiles.length === 0) {
          e({ modelTopology: a });
          return;
        }
        let l = np(s, (u) => this.loadWeights(u));
        e(l);
      }, n.onerror = (o) => t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), n.readAsText(this.jsonFile);
    });
  }
  loadWeights(e) {
    let t = [], n = [];
    for (let a of e)
      t.push(...a.weights), n.push(...a.paths);
    let o = this.checkManifestAndWeightFiles(e), s = n.map((a) => this.loadWeightsFile(a, o[a]));
    return Promise.all(s).then((a) => [t, rp(a)]);
  }
  loadWeightsFile(e, t) {
    return new Promise((n, o) => {
      let s = new FileReader();
      s.onload = (a) => {
        let i = a.target.result;
        n(i);
      }, s.onerror = (a) => o(`Failed to weights data from file of path '${e}'.`), s.readAsArrayBuffer(t);
    });
  }
  checkManifestAndWeightFiles(e) {
    let t = [], n = this.weightsFiles.map((s) => Mw(s.name)), o = {};
    for (let s of e)
      s.paths.forEach((a) => {
        let i = Mw(a);
        if (t.indexOf(i) !== -1)
          throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);
        if (t.push(i), n.indexOf(i) === -1)
          throw new Error(`Weight file with basename '${i}' is not provided.`);
        o[a] = this.weightsFiles[n.indexOf(i)];
      });
    if (t.length !== this.weightsFiles.length)
      throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
    return o;
  }
};
var fG = (r) => j().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(pl.URL_SCHEME) ? dG(r.slice(pl.URL_SCHEME.length)) : null;
vt.registerSaveRouter(fG);
function dG(r = "model") {
  return new pl(r);
}
function Y1(r) {
  return new X1(r);
}
function Uw(r, e, t, n) {
  a(r), t = t == null ? 0 : t, n = n == null ? 1 : n, i(t, n);
  let o = 0, s = (l) => (l.then((u) => {
    let c = t + ++o / r.length * (n - t);
    return e(c), u;
  }), l);
  function a(l) {
    E(l != null && Array.isArray(l) && l.length > 0, () => "promises must be a none empty array");
  }
  function i(l, u) {
    E(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${l}`), E(u >= 0 && u <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${u}`), E(u >= l, () => `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`);
  }
  return Promise.all(r.map(s));
}
async function Hw(r, e) {
  e == null && (e = {});
  let t = e.fetchFunc == null ? j().platform.fetch : e.fetchFunc, n = r.map((p) => t(p, e.requestInit, { isBinary: true })), o = 0, s = 0.5, i = (e.onProgress == null ? await Promise.all(n) : await Uw(n, e.onProgress, o, s)).map((p) => p.arrayBuffer()), l = 0.5, u = 1;
  return e.onProgress == null ? await Promise.all(i) : await Uw(i, e.onProgress, l, u);
}
async function Z1(r, e = "", t, n) {
  return qw((a) => Hw(a, { requestInit: n }))(r, e, t);
}
function qw(r) {
  return async (e, t = "", n) => {
    let o = e.map(() => false), s = {}, a = n != null ? n.map(() => false) : [], i = [];
    if (e.forEach((f, d) => {
      let h = 0;
      f.weights.forEach((g) => {
        let y = "quantization" in g ? g.quantization.dtype : g.dtype, w = Vm[y] * nt(g.shape), x = () => {
          o[d] = true, s[d] == null && (s[d] = []), s[d].push({ manifestEntry: g, groupOffset: h, sizeBytes: w });
        };
        n != null ? n.forEach((k, C) => {
          k === g.name && (x(), a[C] = true);
        }) : x(), i.push(g.name), h += w;
      });
    }), !a.every((f) => f)) {
      let f = n.filter((d, h) => !a[h]);
      throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. 
Manifest JSON has weights with names: ${i.join(", ")}.`);
    }
    let l = o.reduce((f, d, h) => (d && f.push(h), f), []), u = [];
    l.forEach((f) => {
      e[f].paths.forEach((d) => {
        let h = t + (t.endsWith("/") ? "" : "/") + d;
        u.push(h);
      });
    });
    let c = await r(u), p = {}, m = 0;
    return l.forEach((f) => {
      let d = e[f].paths.length, h = 0;
      for (let k = 0; k < d; k++)
        h += c[m + k].byteLength;
      let g = new ArrayBuffer(h), y = new Uint8Array(g), w = 0;
      for (let k = 0; k < d; k++) {
        let C = new Uint8Array(c[m + k]);
        y.set(C, w), w += C.byteLength;
      }
      s[f].forEach((k) => {
        let C = g.slice(k.groupOffset, k.groupOffset + k.sizeBytes), A = ng(C, [k.manifestEntry]);
        for (let $ in A)
          p[$] = A[$];
      }), m += d;
    }), p;
  };
}
var hG = "application/octet-stream";
var gG = "application/json";
var ig = class {
  constructor(e, t) {
    if (this.DEFAULT_METHOD = "POST", t == null && (t = {}), this.weightPathPrefix = t.weightPathPrefix, this.onProgress = t.onProgress, this.weightUrlConverter = t.weightUrlConverter, t.fetchFunc != null ? (E(typeof t.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = t.fetchFunc) : this.fetch = j().platform.fetch, E(e != null && e.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(e) && E(e.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${e.length}).`), this.path = e, t.requestInit != null && t.requestInit.body != null)
      throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = t.requestInit || {};
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    let t = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    t.body = new FormData();
    let n = [{ paths: ["./model.weights.bin"], weights: e.weightSpecs }], o = og(e, n);
    t.body.append("model.json", new Blob([JSON.stringify(o)], { type: gG }), "model.json"), e.weightData != null && t.body.append("model.weights.bin", new Blob([e.weightData], { type: hG }), "model.weights.bin");
    let s = await this.fetch(this.path, t);
    if (s.ok)
      return { modelArtifactsInfo: ii(e), responses: [s] };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`);
  }
  async load() {
    let e = await this.fetch(this.path, this.requestInit);
    if (!e.ok)
      throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);
    let t;
    try {
      t = await e.json();
    } catch (s) {
      let a = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? a += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : a += " Please make sure the server is serving valid JSON for this request.", new Error(a);
    }
    let n = t.modelTopology, o = t.weightsManifest;
    if (n == null && o == null)
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return np(t, (s) => this.loadWeights(s));
  }
  async loadWeights(e) {
    let t = Array.isArray(this.path) ? this.path[1] : this.path, [n, o] = xG(t), s = this.weightPathPrefix || n, a = [];
    for (let c of e)
      a.push(...c.weights);
    let i = [], l = [];
    for (let c of e)
      for (let p of c.paths)
        this.weightUrlConverter != null ? l.push(this.weightUrlConverter(p)) : i.push(s + p + o);
    this.weightUrlConverter && i.push(...await Promise.all(l));
    let u = await Hw(i, { requestInit: this.requestInit, fetchFunc: this.fetch, onProgress: this.onProgress });
    return [a, rp(u)];
  }
};
ig.URL_SCHEME_REGEX = /^https?:\/\//;
function xG(r) {
  let e = r.lastIndexOf("/"), t = r.lastIndexOf("?"), n = r.substring(0, e), o = t > e ? r.substring(t) : "";
  return [n + "/", o];
}
function ag(r) {
  return r.match(ig.URL_SCHEME_REGEX) != null;
}
var J1 = (r, e) => {
  if (typeof fetch == "undefined" && (e == null || e.fetchFunc == null))
    return null;
  {
    let t = true;
    if (Array.isArray(r) ? t = r.every((n) => ag(n)) : t = ag(r), t)
      return lg(r, e);
  }
  return null;
};
vt.registerSaveRouter(J1);
vt.registerLoadRouter(J1);
function lg(r, e) {
  return new ig(r, e);
}
function Q1(r, e) {
  return lg(r, e);
}
var ug = class {
  constructor(e) {
    this.modelArtifacts = e;
  }
  async load() {
    return this.modelArtifacts;
  }
};
var eN = class {
  constructor(e) {
    this.saveHandler = e;
  }
  async save(e) {
    return this.saveHandler(e);
  }
};
function tN(r, e, t, n) {
  return arguments.length === 1 ? r.modelTopology != null || r.weightSpecs != null ? new ug(r) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new ug({ modelTopology: r })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new ug({ modelTopology: r, weightSpecs: e, weightData: t, trainingConfig: n }));
}
function rN(r) {
  return new eN(r);
}
var oN = {};
He(oN, { confusionMatrix: () => nN });
function yG(r, e, t = false, n = false) {
  let o = _(r, "a", "matMul"), s = _(e, "b", "matMul");
  [o, s] = Ge(o, s);
  let a = { a: o, b: s }, i = { transposeA: t, transposeB: n };
  return T.runKernel(To, a, i);
}
var Me = I({ matMul_: yG });
function bG(r, e, t = 1, n = 0) {
  if (e < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);
  let s = { indices: _(r, "indices", "oneHot", "int32") }, a = { depth: e, onValue: t, offValue: n };
  return T.runKernel(Qo, s, a);
}
var xa = I({ oneHot_: bG });
function wG(r, e) {
  let t = _(r, "x", "transpose");
  if (e == null && (e = t.shape.map((s, a) => a).reverse()), E(t.rank === e.length, () => `Error in transpose: rank of input ${t.rank} must match length of perm ${e}.`), e.forEach((s) => {
    E(s >= 0 && s < t.rank, () => `All entries in 'perm' must be between 0 and ${t.rank - 1} but got ${e}`);
  }), t.rank <= 1)
    return t.clone();
  let n = { x: t }, o = { perm: e };
  return T.runKernel(ys, n, o);
}
var Ve = I({ transpose_: wG });
function kG(r, e, t) {
  let n = _(r, "labels", "confusionMatrix"), o = _(e, "predictions", "confusionMatrix");
  E(t == null || t > 0 && Number.isInteger(t), () => `If provided, numClasses must be a positive integer, but got ${t}`), E(n.rank === 1, () => `Expected the rank of labels to be 1, but got ${n.rank}`), E(o.rank === 1, () => `Expected the rank of predictions to be 1, but got ${o.rank}`), E(n.shape[0] === o.shape[0], () => `Mismatch in the number of examples: ${n.shape[0]} vs. ${o.shape[0]}. Labels and predictions should have the same number of elements.`), E(t > 0 && Number.isInteger(t), () => `numClasses is required to be a positive integer, but got ${t}`);
  let s = xa(J(n, "int32"), t), a = xa(J(o, "int32"), t), i = Ve(s), l = Me(i, a);
  return J(l, "int32");
}
var nN = I({ confusionMatrix_: kG });
var cg = {};
He(cg, { fromPixels: () => TG, fromPixelsAsync: () => IG, toPixels: () => NG });
function Kw(r, e, t) {
  if (Bn(r), e != null && e.length !== 3)
    throw new Error("tensor3d() requires shape to have three numbers");
  let n = Ar(r, t);
  if (n.length !== 3 && n.length !== 1)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (n.length === 1 && e == null)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return Yr(r, e, n, t);
}
var ip;
function sN(r, e = 3) {
  if (e > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (r == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let t = false, n = false, o = false, s = false, a = false, i = false;
  if (r.data instanceof Uint8Array)
    t = true;
  else if (typeof ImageData != "undefined" && r instanceof ImageData)
    n = true;
  else if (typeof HTMLVideoElement != "undefined" && r instanceof HTMLVideoElement)
    o = true;
  else if (typeof HTMLImageElement != "undefined" && r instanceof HTMLImageElement)
    s = true;
  else if (r.getContext != null)
    a = true;
  else if (typeof ImageBitmap != "undefined" && r instanceof ImageBitmap)
    i = true;
  else
    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);
  if (o) {
    let d = 2;
    if (o && r.readyState < d)
      throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");
  }
  if (Om(Rm, T.backendName) != null) {
    let d = { pixels: r }, h = { numChannels: e };
    return T.runKernel(Rm, d, h);
  }
  let [u, c] = o ? [r.videoWidth, r.videoHeight] : [r.width, r.height], p;
  a ? p = r.getContext("2d").getImageData(0, 0, u, c).data : n || t ? p = r.data : (s || o || i) && (ip == null && (ip = document.createElement("canvas").getContext("2d")), ip.canvas.width = u, ip.canvas.height = c, ip.drawImage(r, 0, 0, u, c), p = ip.getImageData(0, 0, u, c).data);
  let m;
  if (e === 4)
    m = new Int32Array(p);
  else {
    let d = u * c;
    m = new Int32Array(d * e);
    for (let h = 0; h < d; h++)
      for (let g = 0; g < e; ++g)
        m[h * e + g] = p[h * 4 + g];
  }
  return Kw(m, [c, u, e], "int32");
}
function _G(r) {
  return r != null && r.data instanceof Uint8Array;
}
function vG() {
  return typeof window != "undefined" && typeof ImageBitmap != "undefined" && window.hasOwnProperty("createImageBitmap");
}
function CG(r) {
  return r != null && r.width !== 0 && r.height !== 0;
}
function SG(r) {
  return vG() && !(r instanceof ImageBitmap) && CG(r) && !_G(r);
}
async function IG(r, e = 3) {
  let t = null;
  if (j().getBool("WRAP_TO_IMAGEBITMAP") && SG(r)) {
    let n;
    try {
      n = await createImageBitmap(r, { premultiplyAlpha: "none" });
    } catch (o) {
      n = null;
    }
    n != null && n.width === r.width && n.height === r.height ? t = n : t = r;
  } else
    t = r;
  return sN(t, e);
}
async function NG(r, e) {
  let t = _(r, "img", "toPixels");
  if (!(r instanceof je)) {
    let u = t;
    t = J(u, "int32"), u.dispose();
  }
  if (t.rank !== 2 && t.rank !== 3)
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${t.rank}.`);
  let [n, o] = t.shape.slice(0, 2), s = t.rank === 2 ? 1 : t.shape[2];
  if (s > 4 || s === 2)
    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);
  if (t.dtype !== "float32" && t.dtype !== "int32")
    throw new Error(`Unsupported type for toPixels: ${t.dtype}. Please use float32 or int32 tensors.`);
  let a = await t.data(), i = t.dtype === "float32" ? 255 : 1, l = new Uint8ClampedArray(o * n * 4);
  for (let u = 0; u < n * o; ++u) {
    let c = [0, 0, 0, 255];
    for (let m = 0; m < s; m++) {
      let f = a[u * s + m];
      if (t.dtype === "float32") {
        if (f < 0 || f > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${f}.`);
      } else if (t.dtype === "int32" && (f < 0 || f > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${f}.`);
      s === 1 ? (c[0] = f * i, c[1] = f * i, c[2] = f * i) : c[m] = f * i;
    }
    let p = u * 4;
    l[p + 0] = Math.round(c[0]), l[p + 1] = Math.round(c[1]), l[p + 2] = Math.round(c[2]), l[p + 3] = Math.round(c[3]);
  }
  if (e != null) {
    e.width = o, e.height = n;
    let u = e.getContext("2d"), c = new ImageData(l, o, n);
    u.putImageData(c, 0, 0);
  }
  return t !== r && t.dispose(), l;
}
var TG = I({ fromPixels_: sN });
var pg = {};
He(pg, { prepareAndValidate: () => iN });
function iN(r, e) {
  let t = r.shape.length, n = e.shape.length;
  if (t < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t}.`);
  if (n < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${n}.`);
  if (e.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);
  if (e.shape[n - 1] > t)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[n - 1]} vs. ${t}`);
  if (nt(r.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);
  let o = e.shape, s = o[o.length - 1], a = 1;
  for (let p = 0; p < o.length - 1; ++p)
    a *= o[p];
  let i = r.shape, l = o.slice();
  l.pop();
  let u = 1;
  for (let p = s; p < t; ++p)
    u *= i[p], l.push(i[p]);
  let c = [...Bs(r.shape).map((p) => p / u), 1].slice(0, s);
  return [l, a, u, c];
}
var fg = {};
He(fg, { calculateShapes: () => aN, validateInput: () => mg, validateUpdateShape: () => Xw });
function Xw(r, e, t) {
  let n = e.rank > 1 ? e.shape[e.rank - 1] : 1, o = e.rank > 1 ? e.rank - 1 : 1, s = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${t.shape}, indices.shape: ${e.shape}, shape: ${r}, sliceDim: ${n}, and batchDim: ${o}.`;
  if (t.rank < o)
    throw new Error(s + ` update.rank < ${o}. `);
  if (r.length < n + (t.rank - o))
    throw new Error(s + ` Output shape length < ${n + (t.rank - o)}`);
  if (t.rank !== o + r.length - n)
    throw new Error(s + ` update.rank != ${o + r.length - n}`);
  for (let a = 0; a < o; ++a)
    if (t.shape[a] !== e.shape[a])
      throw new Error(s + ` updates.shape[${a}] (${t.shape[a]}) != indices.shape[${a}] (${e.shape[a]}).`);
  for (let a = 0; a < t.rank - o; ++a)
    if (t.shape[a + o] !== r[a + n])
      throw new Error(s + ` updates.shape[${a + o}] (${t.shape[a + o]}) != shape[${a + o}] (${r[a + o]})`);
}
function mg(r, e, t) {
  if (e.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);
  if (r.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);
  if (e.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);
  if (t.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${t}`);
  if (t.length === 0) {
    if (e.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);
    if (r.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`);
  }
  Xw(t, e, r);
}
function aN(r, e, t) {
  let n = e.shape.length, o = n > 1 ? e.shape[n - 1] : 1, s = t.length, a = 1;
  for (let p = o; p < s; ++p)
    a *= t[p];
  let i = o < 1 ? 1 : o, l = nt(e.shape) / i, u = [...Bs(t.slice(0, o)), 1], c = nt(t);
  return { sliceRank: o, numUpdates: l, sliceSize: a, strides: u, outputSize: c };
}
var ar = {};
He(ar, { assertParamsValid: () => EG, computeFlatOffset: () => $G, computeOutShape: () => lN, getNormalizedAxes: () => mN, isSliceContinous: () => AG, maskToAxes: () => dg, parseSliceParams: () => Yw, sliceInfo: () => DG, startForAxis: () => gN, startIndicesWithElidedDims: () => fN, stopForAxis: () => xN, stopIndicesWithElidedDims: () => dN, stridesForAxis: () => hN, stridesWithElidedDims: () => uN });
function EG(r, e, t) {
  let n = r.shape.length;
  E(n === e.length, () => `Error in slice${n}D: Length of begin ${e} must match the rank of the array (${n}).`), E(n === t.length, () => `Error in slice${n}D: Length of size ${t} must match the rank of the array (${n}).`);
  for (let o = 0; o < n; ++o)
    E(e[o] + t[o] <= r.shape[o], () => `Error in slice${n}D: begin[${o}] + size[${o}] (${e[o] + t[o]}) would overflow input.shape[${o}] (${r.shape[o]})`);
}
function dg(r) {
  let e = [], t = 0;
  for (; r > 0; )
    r & 1 && e.push(t), r /= 2, t++;
  return e;
}
function lN(r, e, t) {
  let n = [];
  for (let o = 0; o < r.length; o++)
    n[o] = Math.ceil((e[o] - r[o]) / t[o]);
  return n;
}
function uN(r, e, t, n) {
  let o = [...r];
  for (let s = o.length; s < n.length; s++)
    o.push(1);
  for (let s = 0; s < t; s++)
    s === 0 ? o[e] = 1 : (o.splice(e, 0, 1), o.pop());
  return o;
}
function cN(r, e, t) {
  return t <= r ? t : t - (e - 1);
}
function pN(r, e) {
  let t = [];
  for (let n = 0; n < r; n++)
    t.push(e + n);
  return t;
}
function mN(r, e, t, n, o, s, a, i, l) {
  let u = r.length, c = new Array(u), p = new Array(u), m = new Array(u);
  if (e.length && t > 0) {
    let f = e[0], d = t + 1;
    c = fN(a, f, d, n, r), p = dN(i, f, d, o, r), m = uN(s, f, d, r);
  } else
    for (let f = 0; f < u; f++)
      c[f] = gN(a, n, s, r, f, l), p[f] = xN(i, o, s, r, f, l), m[f] = hN(s, f, l);
  return { begin: c, end: p, strides: m };
}
function fN(r, e, t, n, o) {
  let s = [...o], a = pN(t, e);
  for (let i = 0; i < s.length; i++)
    if (a.indexOf(i) > -1)
      s[i] = 0;
    else {
      let l = cN(e, t, i), u = n[l];
      r & 1 << l && (u = 0), s[i] = u;
    }
  return s;
}
function dN(r, e, t, n, o) {
  let s = [...o], a = pN(t, e);
  for (let i = 0; i < s.length; i++)
    if (a.indexOf(i) > -1)
      s[i] = Number.MAX_SAFE_INTEGER;
    else {
      let l = cN(e, t, i), u = n[l];
      r & 1 << l && (u = Number.MAX_SAFE_INTEGER), s[i] = u;
    }
  for (let i = 0; i < s.length; i++) {
    let l = o[i];
    s[i] < 0 && (s[i] += l), s[i] = mc(0, s[i], o[i]);
  }
  return s;
}
function hN(r, e, t) {
  let n = r[e];
  return (t & 1 << e || n == null) && (n = 1), n;
}
function gN(r, e, t, n, o, s) {
  let a = e[o], i = t[o] || 1;
  (r & 1 << o || s & 1 << o || a == null) && (i > 0 ? a = Number.MIN_SAFE_INTEGER : a = Number.MAX_SAFE_INTEGER);
  let l = n[o];
  return a < 0 && (a += l), a = mc(0, a, l - 1), a;
}
function xN(r, e, t, n, o, s) {
  let a = e[o], i = t[o] || 1;
  (r & 1 << o || s & 1 << o || a == null) && (i > 0 ? a = Number.MAX_SAFE_INTEGER : a = Number.MIN_SAFE_INTEGER);
  let l = n[o];
  return a < 0 && (a += l), i > 0 ? a = mc(0, a, l) : a = mc(-1, a, l - 1), a;
}
function AG(r, e, t) {
  let n = t.length;
  for (let o = 0; o < t.length; o++)
    if (t[o] > 1) {
      n = o;
      break;
    }
  for (let o = n + 1; o < t.length; o++)
    if (e[o] > 0 || t[o] !== r[o])
      return false;
  return true;
}
function $G(r, e) {
  let t = r.length > 0 ? r[r.length - 1] : 1;
  for (let n = 0; n < r.length - 1; n++)
    t += r[n] * e[n];
  return t;
}
function Yw(r, e, t) {
  let n, o = r.shape.length;
  typeof e == "number" ? n = [e, ...new Array(o - 1).fill(0)] : e.length < o ? n = e.concat(new Array(o - e.length).fill(0)) : n = e.slice(), n.forEach((a) => {
    E(a !== -1, () => "slice() does not support negative begin indexing.");
  });
  let s;
  return t == null ? s = new Array(o).fill(-1) : typeof t == "number" ? s = [t, ...new Array(o - 1).fill(-1)] : t.length < o ? s = t.concat(new Array(o - t.length).fill(-1)) : s = t, s = s.map((a, i) => a >= 0 ? a : (E(a === -1, () => `Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`), r.shape[i] - n[i])), [n, s];
}
function DG(r, e, t, n, o, s, a, i, l) {
  let u = e.slice(), c = t.slice(), p = n;
  n == null && (p = new Array(u.length));
  let m = dg(a);
  if (m.length > 1)
    throw new Error("Multiple ellipses in slice is not allowed.");
  if (a !== 0 && i !== 0)
    throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");
  if (a !== 0 && l !== 0)
    throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");
  let f = r.length - u.length, d = dg(i), h = r.slice();
  d.forEach(($) => {
    u[$] = 0, c[$] = 1, h.splice($, 0, 1);
  });
  let { begin: g, end: y, strides: w } = mN(h, m, f, u, c, p, o, s, a);
  u = g, c = y, p = w;
  let x = dg(l);
  x.forEach(($) => {
    c[$] = u[$] + 1, p[$] = 1;
  });
  let k = lN(u, c, p), C = k.filter(($, R) => x.indexOf(R) === -1);
  return { nonStrided: p.every(($) => $ === 1), $begin: u, $end: c, $strides: p, size: k, newShape: h, outShape: C };
}
var ee = {};
He(ee, { Serializable: () => hg, SerializationMap: () => ya, registerClass: () => gn });
var hg = class {
  getClassName() {
    return this.constructor.className;
  }
  static fromConfig(e, t) {
    return new e(t);
  }
};
var ya = class {
  constructor() {
    this.classNameMap = {};
  }
  static getMap() {
    return ya.instance == null && (ya.instance = new ya()), ya.instance;
  }
  static register(e) {
    ya.getMap().classNameMap[e.className] = [e, e.fromConfig];
  }
};
function gn(r) {
  E(r.className != null, () => "Class being registered does not have the static className property defined."), E(typeof r.className == "string", () => "className is required to be a string, but got type " + typeof r.className), E(r.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), ya.register(r);
}
var wN = {};
He(wN, { TEST_EPSILON_FLOAT16: () => yN, encodeStrings: () => bN, expectArrayBuffersEqual: () => zG, expectArraysClose: () => FG, expectArraysEqual: () => PG, expectNumbersClose: () => MG, expectPromiseToFail: () => OG, expectValuesInRange: () => LG, testEpsilon: () => Zw });
var RG = 1e-3;
var yN = 0.1;
function FG(r, e, t) {
  return t == null && (t = Zw()), Jw(r, e, (n, o) => Qw(n, o, t));
}
function Zw() {
  return T.backend.floatPrecision() === 32 ? RG : yN;
}
function Jw(r, e, t) {
  let n = true;
  if ((cr(r) || cr(e)) && (n = false), cr(r) && cr(e) && (n = true), n) {
    let a = r.constructor.name, i = e.constructor.name;
    if (a !== i)
      throw new Error(`Arrays are of different type. Actual: ${a}. Expected: ${i}`);
  }
  if (Array.isArray(r) && Array.isArray(e)) {
    let a = Ar(r), i = Ar(e);
    if (!Kr(a, i))
      throw new Error(`Arrays have different shapes. Actual: [${a}]. Expected: [${i}]`);
  }
  let o = cr(r) ? r : vo(r), s = cr(e) ? e : vo(e);
  if (o.length !== s.length)
    throw new Error(`Arrays have different lengths actual: ${o.length} vs expected: ${s.length}.
Actual:   ${o}.
Expected: ${s}.`);
  for (let a = 0; a < s.length; ++a) {
    let i = o[a], l = s[a];
    if (!t(i, l))
      throw new Error(`Arrays differ: actual[${a}] = ${i}, expected[${a}] = ${l}.
Actual:   ${o}.
Expected: ${s}.`);
  }
}
function OG(r, e) {
  r().then(() => e.fail(), () => e());
}
function PG(r, e) {
  let t = typeof e == "string" || typeof e == "number" || typeof e == "boolean" ? [e] : e;
  return Co(r) || Co(r[0]) || Co(e) || Co(e[0]) ? Jw(r, t, (n, o) => n == o) : Jw(r, e, (n, o) => Qw(n, o, 0));
}
function MG(r, e, t) {
  if (t == null && (t = Zw()), !Qw(r, e, t))
    throw new Error(`Numbers differ: actual === ${r}, expected === ${e}`);
}
function Qw(r, e, t) {
  return !isFinite(r) && !isFinite(e) ? true : !(isNaN(r) || isNaN(e) || Math.abs(r - e) > t);
}
function LG(r, e, t) {
  for (let n = 0; n < r.length; n++)
    if (r[n] < e || r[n] > t)
      throw new Error(`Value out of range:${r[n]} low: ${e}, high: ${t}`);
}
function zG(r, e) {
  expect(new Float32Array(r)).toEqual(new Float32Array(e));
}
function bN(r) {
  for (let e = 0; e < r.length; e++) {
    let t = r[e];
    Array.isArray(t) ? bN(t) : r[e] = ll(t);
  }
  return r;
}
var BG = "3.9.0";
function tue() {
  j().set("PROD", true);
}
function rue() {
  j().set("DEBUG", true);
}
function nue() {
  j().set("DEPRECATION_WARNINGS_ENABLED", false), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function ek(r) {
  j().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(r + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
k1(ek);
function oue() {
  T.disposeVariables();
}
function ks() {
  return T;
}
function Wm() {
  return T.memory();
}
function sue(r) {
  return T.profile(r);
}
function z(r, e) {
  return T.tidy(r, e);
}
function Ae(r) {
  Bm(r).forEach((t) => t.dispose());
}
function Dt(r) {
  return T.keep(r);
}
function iue(r) {
  return T.time(r);
}
function VG(r) {
  return T.setBackend(r);
}
function aue() {
  return T.ready();
}
function lue() {
  return T.backendName;
}
function uue(r) {
  T.removeBackend(r);
}
function cue(r) {
  return T.findBackend(r);
}
function pue(r) {
  return T.findBackendFactory(r);
}
function ap(r, e, t = 1) {
  return T.registerBackend(r, e, t);
}
function kN() {
  return T.backend;
}
function mue(r, e) {
  j().setPlatform(r, e);
}
function WG(r, e) {
  let t = _(r, "a", "add"), n = _(e, "b", "add");
  [t, n] = Ge(t, n);
  let o = { a: t, b: n };
  return T.runKernel(Wn, o);
}
var Y = I({ add_: WG });
function jG(r, e) {
  let t = _(r, "a", "floorDiv"), n = _(e, "b", "floorDiv");
  [t, n] = Ge(t, n);
  let o = { a: t, b: n };
  return T.runKernel(Bo, o);
}
var jm = I({ floorDiv_: jG });
function GG(r, e) {
  let t = _(r, "a", "div"), n = _(e, "b", "div");
  if ([t, n] = Ge(t, n), t.dtype === "int32" && n.dtype === "int32")
    return jm(t, n);
  let o = { a: t, b: n }, s = {};
  return T.runKernel(Po, o, s);
}
var ue = I({ div_: GG });
function UG(r, e) {
  let t = _(r, "a", "mul"), n = _(e, "b", "mul");
  [t, n] = Ge(t, n);
  let o = { a: t, b: n };
  return T.runKernel(Jo, o);
}
var F = I({ mul_: UG });
function HG(r) {
  let e = _(r, "x", "abs");
  if (e.dtype === "complex64") {
    let t = { x: e };
    return T.runKernel(Za, t);
  } else {
    let t = { x: e };
    return T.runKernel(Vs, t);
  }
}
var Tt = I({ abs_: HG });
function qG(r) {
  let t = { x: _(r, "x", "acos") };
  return T.runKernel(Ni, t);
}
var tk = I({ acos_: qG });
function KG(r) {
  let t = { x: _(r, "x", "acosh") };
  return T.runKernel(Ti, t);
}
var rk = I({ acosh_: KG });
function XG(r) {
  E(Array.isArray(r), () => "The argument passed to tf.addN() must be a list of tensors"), E(r.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${r.length}`);
  let e = r.map((o, s) => _(o, `tensors${s}`, "addN")), t = e[0];
  e.forEach((o) => {
    if (o.dtype !== t.dtype)
      throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), e.forEach((o) => {
    if (!Kr(o.shape, t.shape))
      throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  let n = e;
  return T.runKernel(So, n);
}
var nk = I({ addN_: XG });
function YG(r, e = null, t = false) {
  let o = { x: _(r, "x", "all", "bool") }, s = { axis: e, keepDims: t };
  return T.runKernel(Ei, o, s);
}
var Gm = I({ all_: YG });
function ZG(r, e = null, t = false) {
  let o = { x: _(r, "x", "any", "bool") }, s = { axis: e, keepDims: t };
  return T.runKernel(Ai, o, s);
}
var lp = I({ any_: ZG });
function JG(r, e = 0) {
  let n = { x: _(r, "x", "argMax") }, o = { axis: e };
  return T.runKernel(Io, n, o);
}
var ba = I({ argMax_: JG });
function QG(r, e = 0) {
  let n = { x: _(r, "x", "argMin") }, o = { axis: e };
  return T.runKernel(Xa, n, o);
}
var ok = I({ argMin_: QG });
function e4(r) {
  let t = { x: _(r, "x", "asin") };
  return T.runKernel($i, t);
}
var sk = I({ asin_: e4 });
function t4(r) {
  let t = { x: _(r, "x", "asinh") };
  return T.runKernel(Di, t);
}
var ik = I({ asinh_: t4 });
function r4(r) {
  let t = { x: _(r, "x", "atan") };
  return T.runKernel(Ri, t);
}
var ak = I({ atan_: r4 });
function n4(r, e) {
  let t = _(r, "a", "atan2"), n = _(e, "b", "atan2");
  [t, n] = Ge(t, n);
  let o = { a: t, b: n };
  return T.runKernel(Oi, o);
}
var lk = I({ atan2_: n4 });
function o4(r) {
  let t = { x: _(r, "x", "atanh") };
  return T.runKernel(Fi, t);
}
var uk = I({ atanh_: o4 });
function s4(r, e, t, n, o = "NHWC", s) {
  let a = r[3], i = [...e, a], l = vN(o);
  return tu(r, i, t, s, n, null, null, l);
}
function ck(r, e, t, n, o, s, a = "channelsLast") {
  let [i, l] = gg(e), u;
  if (a === "channelsLast")
    u = [i, l, r[3], r[3]];
  else if (a === "channelsFirst")
    u = [i, l, r[1], r[1]];
  else
    throw new Error(`Unknown dataFormat ${a}`);
  return tu(r, u, t, n, o, s, false, a);
}
function i4(r, e, t, n, o, s, a = "NDHWC") {
  let [i, l, u] = mk(e), c, p;
  if (a === "NDHWC")
    p = "channelsLast", c = [i, l, u, r[4], r[4]];
  else if (a === "NCDHW")
    p = "channelsFirst", c = [i, l, u, r[1], r[1]];
  else
    throw new Error(`Unknown dataFormat ${a}`);
  return _N(r, c, t, n, o, false, p, s);
}
function tu(r, e, t, n, o, s, a = false, i = "channelsLast") {
  let [l, u, c, p] = [-1, -1, -1, -1];
  if (i === "channelsLast")
    [l, u, c, p] = r;
  else if (i === "channelsFirst")
    [l, p, u, c] = r;
  else
    throw new Error(`Unknown dataFormat ${i}`);
  let [m, f, , d] = e, [h, g] = gg(t), [y, w] = gg(n), x = up(m, y), k = up(f, w), { padInfo: C, outHeight: A, outWidth: $ } = u4(o, u, c, h, g, x, k, s, i), R = a ? d * p : d, P;
  return i === "channelsFirst" ? P = [l, R, A, $] : i === "channelsLast" && (P = [l, A, $, R]), { batchSize: l, dataFormat: i, inHeight: u, inWidth: c, inChannels: p, outHeight: A, outWidth: $, outChannels: R, padInfo: C, strideHeight: h, strideWidth: g, filterHeight: m, filterWidth: f, effectiveFilterHeight: x, effectiveFilterWidth: k, dilationHeight: y, dilationWidth: w, inShape: r, outShape: P, filterShape: e };
}
function _N(r, e, t, n, o, s = false, a = "channelsLast", i) {
  let [l, u, c, p, m] = [-1, -1, -1, -1, -1];
  if (a === "channelsLast")
    [l, u, c, p, m] = r;
  else if (a === "channelsFirst")
    [l, m, u, c, p] = r;
  else
    throw new Error(`Unknown dataFormat ${a}`);
  let [f, d, h, , g] = e, [y, w, x] = mk(t), [k, C, A] = mk(n), $ = up(f, k), R = up(d, C), P = up(h, A), { padInfo: M, outDepth: V, outHeight: W, outWidth: G } = c4(o, u, c, p, y, w, x, $, R, P, i), U = s ? g * m : g, H;
  return a === "channelsFirst" ? H = [l, U, V, W, G] : a === "channelsLast" && (H = [l, V, W, G, U]), { batchSize: l, dataFormat: a, inDepth: u, inHeight: c, inWidth: p, inChannels: m, outDepth: V, outHeight: W, outWidth: G, outChannels: U, padInfo: M, strideDepth: y, strideHeight: w, strideWidth: x, filterDepth: f, filterHeight: d, filterWidth: h, effectiveFilterDepth: $, effectiveFilterHeight: R, effectiveFilterWidth: P, dilationDepth: k, dilationHeight: C, dilationWidth: A, inShape: r, outShape: H, filterShape: e };
}
function a4(r, e, t, n, o) {
  n == null && (n = pk(r, e, t));
  let s = r[0], a = r[1], i = ru((s - e + 2 * n) / t + 1, o), l = ru((a - e + 2 * n) / t + 1, o);
  return [i, l];
}
function l4(r, e, t, n, o, s) {
  o == null && (o = pk(r, e, n));
  let a = r[0], i = r[1], l = r[2], u = ru((a - e + 2 * o) / n + 1, s), c = ru((i - e + 2 * o) / n + 1, s), p = ru((l - e + 2 * o) / n + 1, s);
  return [u, c, p, t];
}
function pk(r, e, t, n = 1) {
  let o = up(e, n);
  return Math.floor((r[0] * (t - 1) - t + o) / 2);
}
function gg(r) {
  return typeof r == "number" ? [r, r, r] : r.length === 2 ? [r[0], r[1], 1] : r;
}
function mk(r) {
  return typeof r == "number" ? [r, r, r] : r;
}
function up(r, e) {
  return e <= 1 ? r : r + (r - 1) * (e - 1);
}
function u4(r, e, t, n, o, s, a, i, l) {
  let u, c, p;
  if (typeof r == "number") {
    u = { top: r, bottom: r, left: r, right: r, type: r === 0 ? "VALID" : "NUMBER" };
    let f = a4([e, t], s, n, r, i);
    c = f[0], p = f[1];
  } else if (r === "same") {
    c = Math.ceil(e / n), p = Math.ceil(t / o);
    let m = Math.max(0, (c - 1) * n + s - e), f = Math.max(0, (p - 1) * o + a - t), d = Math.floor(m / 2), h = m - d, g = Math.floor(f / 2), y = f - g;
    u = { top: d, bottom: h, left: g, right: y, type: "SAME" };
  } else if (r === "valid")
    u = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, c = Math.ceil((e - s + 1) / n), p = Math.ceil((t - a + 1) / o);
  else if (typeof r == "object") {
    let m = l === "channelsLast" ? r[1][0] : r[2][0], f = l === "channelsLast" ? r[1][1] : r[2][1], d = l === "channelsLast" ? r[2][0] : r[3][0], h = l === "channelsLast" ? r[2][1] : r[3][1];
    u = { top: m, bottom: f, left: d, right: h, type: m === 0 && f === 0 && d === 0 && h === 0 ? "VALID" : "EXPLICIT" }, c = ru((e - s + m + f) / n + 1, i), p = ru((t - a + d + h) / o + 1, i);
  } else
    throw Error(`Unknown padding parameter: ${r}`);
  return { padInfo: u, outHeight: c, outWidth: p };
}
function c4(r, e, t, n, o, s, a, i, l, u, c) {
  let p, m, f, d;
  if (typeof r == "number") {
    p = { top: r, bottom: r, left: r, right: r, front: r, back: r, type: r === 0 ? "VALID" : "NUMBER" };
    let g = l4([e, t, n, 1], i, 1, o, r, c);
    m = g[0], f = g[1], d = g[2];
  } else if (r === "same") {
    m = Math.ceil(e / o), f = Math.ceil(t / s), d = Math.ceil(n / a);
    let h = (m - 1) * o + i - e, g = (f - 1) * s + l - t, y = (d - 1) * a + u - n, w = Math.floor(h / 2), x = h - w, k = Math.floor(g / 2), C = g - k, A = Math.floor(y / 2), $ = y - A;
    p = { top: k, bottom: C, left: A, right: $, front: w, back: x, type: "SAME" };
  } else if (r === "valid")
    p = { top: 0, bottom: 0, left: 0, right: 0, front: 0, back: 0, type: "VALID" }, m = Math.ceil((e - i + 1) / o), f = Math.ceil((t - l + 1) / s), d = Math.ceil((n - u + 1) / a);
  else
    throw Error(`Unknown padding parameter: ${r}`);
  return { padInfo: p, outDepth: m, outHeight: f, outWidth: d };
}
function ru(r, e) {
  if (!e)
    return Math.trunc(r);
  switch (e) {
    case "round":
      return Math.round(r);
    case "ceil":
      return Math.ceil(r);
    case "floor":
      return Math.floor(r);
    default:
      throw new Error(`Unknown roundingMode ${e}`);
  }
}
function Gn(r) {
  let [e, t, n] = gg(r);
  return e === 1 && t === 1 && n === 1;
}
function Cr(r, e) {
  return Gn(r) || Gn(e);
}
function vN(r) {
  if (r === "NHWC")
    return "channelsLast";
  if (r === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${r}`);
}
function p4(r, e) {
  let n = { x: _(r, "x", "reshape", "string_or_numeric") }, o = { shape: e };
  return T.runKernel(Xs, n, o);
}
var O = I({ reshape_: p4 });
function m4(r, e, t, n, o) {
  let s = _(r, "x", "avgPool", "float32"), a = 1;
  E(Cr(t, a), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`);
  let i = s, l = false;
  s.rank === 3 && (l = true, i = O(s, [1, s.shape[0], s.shape[1], s.shape[2]])), E(i.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${i.rank}.`), o != null && E(ot(n), () => `Error in avgPool: pad must be an integer when using, dimRoundingMode ${o} but got pad ${n}.`);
  let u = { x: i }, c = { filterSize: e, strides: t, pad: n, dimRoundingMode: o }, p = T.runKernel(No, u, c);
  return p = J(p, s.dtype), l ? O(p, [p.shape[1], p.shape[2], p.shape[3]]) : p;
}
var nu = I({ avgPool_: m4 });
function f4(r, e, t, n, o, s = "NDHWC") {
  let a = _(r, "x", "avgPool3d", "float32"), i = a, l = false;
  a.rank === 4 && (l = true, i = O(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), E(i.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`), E(s === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`), o != null && E(ot(n), () => `Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${n}.`);
  let u = { x: i }, c = { filterSize: e, strides: t, pad: n, dimRoundingMode: o, dataFormat: s }, p = T.runKernel(Ya, u, c);
  return p = J(p, i.dtype), l ? O(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
var Um = I({ avgPool3d_: f4 });
function d4(r, e = 0) {
  E(r.length >= 1, () => "Pass at least one tensor to concat");
  let t = fa(r, "tensors", "concat", "string_or_numeric");
  if (t[0].dtype === "complex64" && t.forEach((s) => {
    if (s.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `);
  }), t.length === 1)
    return hn(t[0]);
  let n = t, o = { axis: e };
  return T.runKernel(js, n, o);
}
var tt = I({ concat_: d4 });
function h4(r) {
  let t = { x: _(r, "x", "sigmoid") };
  return T.runKernel(cs, t);
}
var Jr = I({ sigmoid_: h4 });
function g4(r, e, t) {
  let n = _(r, "x", "slice", "string_or_numeric");
  if (n.rank === 0)
    throw new Error("Slicing scalar is not possible");
  let o = { x: n }, s = { begin: e, size: t };
  return T.runKernel(Zs, o, s);
}
var Oe = I({ slice_: g4 });
function x4(r) {
  let t = { x: _(r, "x", "tanh") };
  return T.runKernel(xs, t);
}
var wa = I({ tanh_: x4 });
function y4(r, e, t, n, o, s) {
  let a = _(r, "forgetBias", "basicLSTMCell"), i = _(e, "lstmKernel", "basicLSTMCell"), l = _(t, "lstmBias", "basicLSTMCell"), u = _(n, "data", "basicLSTMCell"), c = _(o, "c", "basicLSTMCell"), p = _(s, "h", "basicLSTMCell"), m = tt([u, p], 1), f = Me(m, i), d = Y(f, l), h = d.shape[0], g = d.shape[1] / 4, y = [h, g], w = Oe(d, [0, 0], y), x = Oe(d, [0, g], y), k = Oe(d, [0, g * 2], y), C = Oe(d, [0, g * 3], y), A = Y(F(Jr(w), wa(x)), F(c, Jr(Y(a, k)))), $ = F(wa(A), Jr(C));
  return [A, $];
}
var b4 = I({ basicLSTMCell_: y4 });
function w4(r, e, t) {
  let n = _(r, "x", "batchToSpaceND"), o = e.reduce((i, l) => i * l);
  E(n.rank >= 1 + e.length, () => `input rank is ${n.rank} but should be > than blockShape.length ${e.length}`), E(t.length === e.length, () => `crops.length is ${t.length} but should be equal to blockShape.length  ${e.length}`), E(n.shape[0] % o == 0, () => `input tensor batch is ${n.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${o}`);
  let s = { x: n }, a = { blockShape: e, crops: t };
  return T.runKernel(Ws, s, a);
}
var ou = I({ batchToSpaceND_: w4 });
function CN(r) {
  let e;
  return r.rank === 0 || r.rank === 1 ? e = O(r, [1, 1, 1, r.size]) : r.rank === 2 ? e = O(r, [1, 1, r.shape[0], r.shape[1]]) : r.rank === 3 ? e = O(r, [1, r.shape[0], r.shape[1], r.shape[2]]) : e = r, e;
}
function k4(r, e, t, n, o, s) {
  s == null && (s = 1e-3);
  let a = _(r, "x", "batchNorm"), i = _(e, "mean", "batchNorm"), l = _(t, "variance", "batchNorm"), u;
  o != null && (u = _(o, "scale", "batchNorm"));
  let c;
  n != null && (c = _(n, "offset", "batchNorm")), E(i.rank === l.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), E(c == null || i.rank === c.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), E(u == null || i.rank === u.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let m = { x: CN(a), scale: u, offset: c, mean: i, variance: l }, f = { varianceEpsilon: s }, d = T.runKernel(Vo, m, f);
  return O(d, a.shape);
}
var ai = I({ batchNorm_: k4 });
function _4(r, e, t, n, o, s) {
  let a = _(r, "x", "batchNorm"), i = _(e, "mean", "batchNorm"), l = _(t, "variance", "batchNorm"), u;
  o != null && (u = _(o, "scale", "batchNorm"));
  let c;
  return n != null && (c = _(n, "offset", "batchNorm")), E(a.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`), E(i.rank === 2 || i.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`), E(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`), u != null && E(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`), c != null && E(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`), ai(a, i, l, c, u, s);
}
var fk = I({ batchNorm2d_: _4 });
function v4(r, e, t, n, o, s) {
  let a = _(r, "x", "batchNorm"), i = _(e, "mean", "batchNorm"), l = _(t, "variance", "batchNorm"), u;
  o != null && (u = _(o, "scale", "batchNorm"));
  let c;
  return n != null && (c = _(n, "offset", "batchNorm")), E(a.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`), E(i.rank === 3 || i.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`), E(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`), u != null && E(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`), c != null && E(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`), ai(a, i, l, c, u, s);
}
var dk = I({ batchNorm3d_: v4 });
function C4(r, e, t, n, o, s) {
  let a = _(r, "x", "batchNorm"), i = _(e, "mean", "batchNorm"), l = _(t, "variance", "batchNorm"), u;
  o != null && (u = _(o, "scale", "batchNorm"));
  let c;
  return n != null && (c = _(n, "offset", "batchNorm")), E(a.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`), E(i.rank === 4 || i.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`), E(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`), u != null && E(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`), c != null && E(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`), ai(a, i, l, c, u, s);
}
var hk = I({ batchNorm4d_: C4 });
function S4(r, e, t) {
  let n = _(r, "x", "bincount"), o = _(e, "weights", "bincount");
  E(n.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${n.dtype}`), E(t >= 0, () => `size must be non-negative, but got ${t}.`), E(o.size === n.size || o.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${n.shape}, weights shape: ${o.shape}.`);
  let s = { x: n, weights: o }, a = { size: t };
  return T.runKernel(yc, s, a);
}
var Hm = I({ bincount_: S4 });
function I4(r, e) {
  let t = _(r, "s0", "broadcastArgs", "int32"), n = _(e, "s1", "broadcastArgs", "int32");
  if (t.rank !== 1)
    throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${t.rank}`);
  if (n.rank !== 1)
    throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${n.rank}`);
  let o = { s0: t, s1: n };
  return T.runKernel(Zh, o);
}
var gk = I({ broadcastArgs_: I4 });
function N4(r, e) {
  let t = _(r, "broadcastTo", "x"), n = t.shape;
  if (e.some((u) => !(u > 0) || u % 1 != 0))
    throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);
  if (e.length < t.rank)
    throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t.rank}.`);
  if (e.length > t.rank) {
    let u = t.shape.slice();
    for (; u.length < e.length; )
      u.unshift(1);
    t = O(t, u);
  }
  let o = t.shape, s = Array.from(e);
  for (let u = e.length - 1; u >= 0; u--)
    if (o[u] === e[u])
      s[u] = 1;
    else if (t.shape[u] !== 1)
      throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${e}].`);
  if (s.map((u, c) => u > 1 ? c : -1).filter((u) => u >= 0).length === 0)
    return hn(t);
  let i = { x: t }, l = { reps: s };
  return T.runKernel(jn, i, l);
}
var su = I({ broadcastTo_: N4 });
function T4(r) {
  let t = { x: _(r, "x", "ceil") };
  return T.runKernel(Eo, t);
}
var xk = I({ ceil_: T4 });
function E4(r, e, t) {
  let n = _(r, "x", "clipByValue");
  E(e <= t, () => `Error in clip: min (${e}) must be less than or equal to max (${t}).`);
  let o = { x: n }, s = { clipValueMin: e, clipValueMax: t };
  return T.runKernel(eo, o, s);
}
var Sr = I({ clipByValue_: E4 });
function A4(r) {
  return tt(r, 0);
}
var yk = I({ concat1d_: A4 });
function $4(r, e) {
  return tt(r, e);
}
var bk = I({ concat2d_: $4 });
function D4(r, e) {
  return tt(r, e);
}
var wk = I({ concat3d_: D4 });
function R4(r, e) {
  return tt(r, e);
}
var kk = I({ concat4d_: R4 });
function F4(r, e, t, n, o = "NHWC", s = [1, 1], a) {
  let i = _(r, "x", "conv2d"), l = _(e, "filter", "conv2d"), u = i, c = false;
  i.rank === 3 && (c = true, u = O(i, [1, i.shape[0], i.shape[1], i.shape[2]])), E(u.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${u.rank}.`), E(l.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`), a != null && E(ot(n), () => `Error in conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${n}.`);
  let p = o === "NHWC" ? u.shape[3] : u.shape[1];
  E(p === l.shape[2], () => `Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`), E(Cr(t, s), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`);
  let m = { x: u, filter: l }, f = { strides: t, pad: n, dataFormat: o, dilations: s, dimRoundingMode: a }, d = T.runKernel(Ao, m, f);
  return c ? O(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
var Dn = I({ conv2d_: F4 });
function O4(r, e, t, n, o = "NWC", s = 1, a) {
  let i = _(r, "x", "conv1d"), l = _(e, "filter", "conv1d"), u = i, c = false;
  i.rank === 2 && (c = true, u = O(i, [1, i.shape[0], i.shape[1]])), E(u.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${u.rank}.`), E(l.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`), a != null && E(ot(n), () => `Error in conv1d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${n}.`), E(u.shape[2] === l.shape[1], () => `Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`), E(Cr(t, s), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${s}'`), E(o === "NWC", () => `Error in conv1d: got dataFormat of ${o} but only NWC is currently supported.`);
  let p = O(l, [1, l.shape[0], l.shape[1], l.shape[2]]), m = O(u, [u.shape[0], 1, u.shape[1], u.shape[2]]), g = Dn(m, p, [1, t], n, "NHWC", [1, s], a);
  return c ? O(g, [g.shape[2], g.shape[3]]) : O(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
var qm = I({ conv1d_: O4 });
function P4(r, e, t, n, o, s = "NHWC", a) {
  E(r.length === e.rank, () => `Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);
  let i = r, l = e, u = false;
  e.rank === 3 && (u = true, l = O(e, [1, e.shape[0], e.shape[1], e.shape[2]]), i = [1, r[0], r[1], r[2]]), E(i.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`), E(l.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`), E(t.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${t.rank}`);
  let c = s === "NHWC" ? i[3] : i[1], p = s === "NHWC" ? l.shape[3] : l.shape[1];
  E(c === t.shape[2], () => `Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${t.shape[2]}.`), E(p === t.shape[3], () => `Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${t.shape[3]}.`), a != null && E(ot(o), () => `Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`);
  let m = { dy: l, filter: t }, f = { strides: n, pad: o, dataFormat: s, dimRoundingMode: a, inputShape: i }, d = T.runKernel($o, m, f);
  return u ? O(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
var cp = I({ conv2DBackpropInput_: P4 });
function M4(r, e, t, n, o, s) {
  let a = _(r, "x", "conv2dTranspose"), i = _(e, "filter", "conv2dTranspose");
  return cp(t, a, i, n, o, "NHWC", s);
}
var Km = I({ conv2dTranspose_: M4 });
function L4(r, e, t, n, o = "NDHWC", s = [1, 1, 1]) {
  let a = _(r, "x", "conv3d"), i = _(e, "filter", "conv3d"), l = a, u = false;
  a.rank === 4 && (u = true, l = O(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), E(l.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`), E(i.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`), E(l.shape[4] === i.shape[3], () => `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`), E(Cr(t, s), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`), E(o === "NDHWC", () => `Error in conv3d: got dataFormat of ${o} but only NDHWC is currently supported.`);
  let c = { x: l, filter: i }, p = { strides: t, pad: n, dataFormat: o, dilations: s }, m = T.runKernel(Ja, c, p);
  return u ? O(m, [m.shape[1], m.shape[2], m.shape[3], m.shape[4]]) : m;
}
var Xm = I({ conv3d_: L4 });
function z4(r, e, t, n, o) {
  E(r.length === e.rank, () => `Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);
  let s = r, a = e, i = false;
  e.rank === 4 && (i = true, a = O(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]]), s = [1, r[0], r[1], r[2], r[3]]);
  let l = s[4], u = a.shape[4];
  E(s.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`), E(a.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`), E(t.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${t.rank}`), E(l === t.shape[3], () => `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${t.shape[3]}.`), E(u === t.shape[4], () => `Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${t.shape[4]}.`);
  let c = { dy: a, filter: t }, p = { pad: o, strides: n, inputShape: s }, m = T.runKernel(_c, c, p);
  return i ? O(m, [m.shape[1], m.shape[2], m.shape[3], m.shape[4]]) : m;
}
var xg = I({ conv3DBackpropInput_: z4 });
function B4(r, e, t, n, o) {
  let s = _(r, "x", "conv3dTranspose"), a = _(e, "filter", "conv3dTranspose");
  return xg(t, s, a, n, o);
}
var _k = I({ conv3dTranspose_: B4 });
function V4(r) {
  let t = { x: _(r, "x", "cos") };
  return T.runKernel(Do, t);
}
var iu = I({ cos_: V4 });
function W4(r) {
  let t = { x: _(r, "x", "cosh") };
  return T.runKernel(Ro, t);
}
var Ym = I({ cosh_: W4 });
function j4(r, e = 0, t = false, n = false) {
  let s = { x: _(r, "x", "cumsum") }, a = { axis: e, exclusive: t, reverse: n };
  return T.runKernel(Fo, s, a);
}
var Zm = I({ cumsum_: j4 });
function G4(r, e, t, n = false) {
  let o = _(r, "x", "denseBincount"), s = _(e, "weights", "denseBincount");
  E(o.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${o.dtype}`), E(o.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${o.rank}.`), E(t >= 0, () => `size must be non-negative, but got ${t}.`), E(s.size === o.size || s.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${o.shape}, weights shape: ${s.shape}.`);
  let a = { x: o, weights: s }, i = { size: t, binaryOutput: n };
  return T.runKernel(vc, a, i);
}
var vk = I({ denseBincount_: G4 });
function U4(r, e, t = "NHWC") {
  let n = _(r, "x", "depthToSpace"), o = t === "NHWC" ? n.shape[1] : n.shape[2], s = t === "NHWC" ? n.shape[2] : n.shape[3], a = t === "NHWC" ? n.shape[3] : n.shape[1];
  E(o * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${o} and ${e}  for depthToSpace with input shape
    ${n.shape}`), E(s * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${s} and ${e} for depthToSpace with input shape
        ${n.shape}`), E(a % (e * e) == 0, () => `Dimension size must be evenly divisible by ${e * e} but is ${a} for depthToSpace with input shape ${n.shape}`);
  let i = { x: n }, l = { blockSize: e, dataFormat: t };
  return T.runKernel(Mi, i, l);
}
var Ck = I({ depthToSpace_: U4 });
function H4(r, e, t, n, o = "NHWC", s = [1, 1], a) {
  let i = _(r, "x", "depthwiseConv2d"), l = _(e, "filter", "depthwiseConv2d"), u = i, c = false;
  i.rank === 3 && (c = true, u = O(i, [1, i.shape[0], i.shape[1], i.shape[2]])), E(u.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`), E(l.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`), E(u.shape[3] === l.shape[2], () => `Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`), a != null && E(ot(n), () => `Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${n}.`);
  let p = { x: u, filter: l }, m = { strides: t, pad: n, dataFormat: o, dilations: s, dimRoundingMode: a }, f = T.runKernel(Oo, p, m);
  return c ? O(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var ka = I({ depthwiseConv2d_: H4 });
function q4(r) {
  let t = { x: _(r, "x", "diag") };
  return T.runKernel(Ic, t);
}
var K4 = I({ diag_: q4 });
function X4(r, e, t, n, o = [1, 1], s = "NHWC") {
  let a = _(r, "x", "dilation2d"), i = _(e, "filter", "dilation2d");
  E(a.rank === 3 || a.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`), E(i.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`), E(s === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);
  let l = a, u = false;
  a.rank === 3 && (l = O(a, [1, a.shape[0], a.shape[1], a.shape[2]]), u = true);
  let c = { x: l, filter: i }, p = { strides: t, pad: n, dilations: o }, m = T.runKernel(Qa, c, p);
  return u ? O(m, [m.shape[1], m.shape[2], m.shape[3]]) : m;
}
var Sk = I({ dilation2d_: X4 });
function Y4(r, e) {
  let t = r.length, n = [];
  for (let o = 0; o < t; o++) {
    let s = t - 1 - o, a = r[s] || 1;
    (e[e.length - 1 - o] || 1) > 1 && a === 1 && n.unshift(s);
  }
  return n;
}
function wt(r, e) {
  let t = [];
  for (let n = 0; n < e.length; n++) {
    let o = r[r.length - n - 1], s = e.length - n - 1, a = e[s];
    (o == null || o === 1 && a > 1) && t.unshift(s);
  }
  return t;
}
function Le(r, e) {
  let t = [], n = Math.max(r.length, e.length);
  for (let o = 0; o < n; o++) {
    let s = r[r.length - o - 1];
    s == null && (s = 1);
    let a = e[e.length - o - 1];
    if (a == null && (a = 1), s === 1)
      t.unshift(a);
    else if (a === 1)
      t.unshift(s);
    else if (s !== a) {
      let i = `Operands could not be broadcast together with shapes ${r} and ${e}.`;
      throw Error(i);
    } else
      t.unshift(s);
  }
  return t;
}
function Z4(r, e) {
  let t = _(r, "a", "equal", "string_or_numeric"), n = _(e, "b", "equal", "string_or_numeric");
  [t, n] = Ge(t, n), Le(t.shape, n.shape);
  let o = { a: t, b: n };
  return T.runKernel(zi, o);
}
var Dr = I({ equal_: Z4 });
function J4(r, e, t) {
  let n = _(e, "a", "where"), o = _(t, "b", "where"), s = _(r, "condition", "where", "bool"), a = Le(Le(s.shape, n.shape), o.shape), i = su(s, a), l = su(n, a), u = su(o, a), c = { condition: i, t: l, e: u };
  return T.runKernel(Ys, c);
}
var Et = I({ where_: J4 });
function Q4(r) {
  let t = { x: _(r, "x", "zerosLike") };
  return T.runKernel(ti, t);
}
var Ie = I({ zerosLike_: Q4 });
function eU(r, e) {
  let t = _(r, "a", "div"), n = _(e, "b", "div");
  [t, n] = Ge(t, n);
  let o = ue(t, n), s = Ie(o), a = Dr(n, s);
  return Et(a, s, o);
}
var Ik = I({ divNoNan_: eU });
function tU(r, e) {
  let t = _(r, "t1", "dot"), n = _(e, "t2", "dot");
  E((t.rank === 1 || t.rank === 2) && (n.rank === 1 || n.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${t.rank} and ${n.rank}.`);
  let o = t.rank === 1 ? t.size : t.shape[1], s = n.rank === 1 ? n.size : n.shape[0];
  if (E(o === s, () => `Error in dot: inner dimensions of inputs must match, but got ${o} and ${s}.`), t.rank === 1 && n.rank === 1) {
    let a = O(t, [1, -1]), i = O(n, [-1, 1]), l = Me(a, i);
    return O(l, []);
  } else if (t.rank === 1 && n.rank === 2) {
    let a = O(t, [1, -1]), i = O(n, [n.shape[0], n.shape[1]]), l = Me(a, i);
    return O(l, [l.size]);
  } else if (t.rank === 2 && n.rank === 1) {
    let a = O(n, [-1, 1]), i = Me(t, a);
    return O(i, [i.size]);
  } else {
    let a = O(n, [n.shape[0], n.shape[1]]);
    return Me(t, a);
  }
}
var rU = I({ dot_: tU });
function nU(r, ...e) {
  let t = e.map((o, s) => _(o, `tensors${s}`, "einsum")), n = { equation: r };
  return T.runKernel(Nc, t, n);
}
var Nk = I({ einsum_: nU });
function oU(r) {
  let t = { x: _(r, "x", "elu") };
  return T.runKernel(Mo, t);
}
var _a = I({ elu_: oU });
function sU(r) {
  let e = _(r, "x", "erf");
  E(e.dtype === "int32" || e.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), e.dtype === "int32" && (e = J(e, "float32"));
  let t = { x: e };
  return T.runKernel(Li, t);
}
var Tk = I({ erf_: sU });
function iU(r) {
  let t = { x: _(r, "x", "exp") };
  return T.runKernel(Lo, t);
}
var tr = I({ exp_: iU });
function aU(r, e = 0) {
  let t = _(r, "x", "expandDims", "string_or_numeric");
  E(e <= t.rank, () => "Axis must be <= rank of the tensor");
  let n = { input: t }, o = { dim: e };
  return T.runKernel(Gs, n, o);
}
var gr = I({ expandDims_: aU });
function lU(r) {
  let t = { x: _(r, "x", "expm1") };
  return T.runKernel(Bi, t);
}
var Ek = I({ expm1_: lU });
function uU(r, e) {
  let t = _(r, "x", "tile", "string_or_numeric");
  E(t.rank === e.length, () => `Error in transpose: rank of input ${t.rank} must match length of reps ${e}.`);
  let n = { x: t }, o = { reps: e };
  return T.runKernel(jn, n, o);
}
var Rr = I({ tile_: uU });
function cU(r, e, t, n = "float32") {
  e == null && (e = r);
  let o = Se([r, e], n), s = r <= e ? r : e;
  for (let i = 0; i < s; ++i)
    o.set(1, i, i);
  let a = O(o.toTensor(), [r, e]);
  if (t == null)
    return a;
  if (t.length === 1)
    return Rr(gr(a, 0), [t[0], 1, 1]);
  if (t.length === 2)
    return Rr(gr(gr(a, 0), 0), [t[0], t[1], 1, 1]);
  if (t.length === 3)
    return Rr(gr(gr(gr(a, 0), 0), 0), [t[0], t[1], t[2], 1, 1]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${t.length}D.`);
}
var pp = I({ eye_: cU });
function _s(r, e, t) {
  let n = { shape: r, value: e, dtype: t };
  return T.runKernel(el, {}, n);
}
function pU(r) {
  let t = { x: _(r, "x", "floor") };
  return T.runKernel(zo, t);
}
var va = I({ floor_: pU });
function mU(r, e, t = 0, n = 0) {
  let o = _(r, "x", "gather"), s = _(e, "indices", "gather", "int32"), a = { x: o, indices: s }, i = { axis: t, batchDims: n };
  return T.runKernel(Us, a, i);
}
var li = I({ gather_: mU });
function fU(r, e) {
  let t = _(r, "a", "greater", "string_or_numeric"), n = _(e, "b", "greater", "string_or_numeric");
  [t, n] = Ge(t, n), Le(t.shape, n.shape);
  let o = { a: t, b: n };
  return T.runKernel(ji, o);
}
var Ht = I({ greater_: fU });
function dU(r, e) {
  let t = _(r, "a", "greaterEqual", "string_or_numeric"), n = _(e, "b", "greaterEqual", "string_or_numeric");
  [t, n] = Ge(t, n), Le(t.shape, n.shape);
  let o = { a: t, b: n };
  return T.runKernel(Wo, o);
}
var Un = I({ greaterEqual_: dU });
function hU(r) {
  let t = { input: _(r, "input", "imag") };
  return T.runKernel($c, t);
}
var au = I({ imag_: hU });
function gU(r) {
  let t = { x: _(r, "x", "isFinite") };
  return T.runKernel(Gi, t);
}
var xU = I({ isFinite_: gU });
function yU(r) {
  let t = { x: _(r, "x", "isInf") };
  return T.runKernel(Ui, t);
}
var bU = I({ isInf_: yU });
function wU(r) {
  let t = { x: _(r, "x", "isNaN") };
  return T.runKernel(Hi, t);
}
var Ak = I({ isNaN_: wU });
function kU(r, e = 0.2) {
  let n = { x: _(r, "x", "leakyRelu") }, o = { alpha: e };
  return T.runKernel(jo, n, o);
}
var lu = I({ leakyRelu_: kU });
function _U(r, e) {
  let t = _(r, "a", "less", "string_or_numeric"), n = _(e, "b", "less", "string_or_numeric");
  [t, n] = Ge(t, n), Le(t.shape, n.shape);
  let o = { a: t, b: n };
  return T.runKernel(qi, o);
}
var Jm = I({ less_: _U });
function vU(r, e) {
  let t = _(r, "a", "lessEqual", "string_or_numeric"), n = _(e, "b", "lessEqual", "string_or_numeric");
  [t, n] = Ge(t, n), Le(t.shape, n.shape);
  let o = { a: t, b: n };
  return T.runKernel(Ki, o);
}
var Hn = I({ lessEqual_: vU });
function $k(r, e, t) {
  if (t <= 0)
    throw new Error("The number of values should be positive.");
  let n = { start: r, stop: e, num: t };
  return T.runKernel(Dc, {}, n);
}
function CU(r, e = 5, t = 1, n = 1, o = 0.5) {
  let s = _(r, "x", "localResponseNormalization");
  E(s.rank === 4 || s.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`), E(ot(e), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);
  let a = s, i = false;
  s.rank === 3 && (i = true, a = O(s, [1, s.shape[0], s.shape[1], s.shape[2]]));
  let l = { x: a }, u = { depthRadius: e, bias: t, alpha: n, beta: o }, c = T.runKernel(tl, l, u);
  return i ? O(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
var Dk = I({ localResponseNormalization_: CU });
function SU(r) {
  let t = { x: _(r, "x", "log") };
  return T.runKernel(Go, t);
}
var Ir = I({ log_: SU });
function IU(r) {
  let t = { x: _(r, "x", "log1p") };
  return T.runKernel(Xi, t);
}
var uu = I({ log1p_: IU });
function NU(r) {
  return E(zs(r), () => "The f passed in grad(f) must be a function"), (e, t) => {
    let n = _(e, "x", "tf.grad", "string_or_numeric"), o = t != null ? _(t, "dy", "tf.grad") : null;
    return T.tidy(() => {
      let { value: s, grads: a } = T.gradients(() => r(n), [n], o);
      return o != null && $t(s.shape, o.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), bg(a), a[0];
    });
  };
}
function TU(r) {
  return E(zs(r), () => "The f passed in grads(f) must be a function"), (e, t) => {
    E(Array.isArray(e), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    let n = fa(e, "args", "tf.grads", "string_or_numeric"), o = t != null ? _(t, "dy", "tf.grads") : null;
    return T.tidy(() => {
      let { value: s, grads: a } = T.gradients(() => r(...n), n, o);
      return o != null && $t(s.shape, o.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), bg(a), a;
    });
  };
}
function EU(r) {
  return E(zs(r), () => "The f passed in valueAndGrad(f) must be a function"), (e, t) => {
    E(e instanceof je, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), E(t == null || t instanceof je, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    let { grads: n, value: o } = T.gradients(() => r(e), [e], t);
    return bg(n), { grad: n[0], value: o };
  };
}
function AU(r) {
  return E(zs(r), () => "The f passed in valueAndGrads(f) must be a function"), (e, t) => {
    E(Array.isArray(e) && e.every((o) => o instanceof je), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), E(t == null || t instanceof je, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    let n = T.gradients(() => r(...e), e, t);
    return t != null && $t(n.value.shape, t.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), bg(n.grads), n;
  };
}
function yg(r, e) {
  E(zs(r), () => "The f passed in variableGrads(f) must be a function"), E(e == null || Array.isArray(e) && e.every((u) => u instanceof ul), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  let t = e != null;
  if (!t) {
    e = [];
    for (let u in T.registeredVariables)
      e.push(T.registeredVariables[u]);
  }
  let n = t ? e.filter((u) => !u.trainable) : null, o = e.length;
  e = e.filter((u) => u.trainable), E(e.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`);
  let s = true, { value: a, grads: i } = T.gradients(r, e, null, s);
  E(i.some((u) => u != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), E(a.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);
  let l = {};
  return e.forEach((u, c) => {
    i[c] != null && (l[u.name] = i[c]);
  }), n != null && n.forEach((u) => l[u.name] = null), { value: a, grads: l };
}
function Qr(r) {
  return T.customGrad(r);
}
function bg(r) {
  if (r.filter((t) => t == null).length > 0)
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
function $U(r) {
  let t = { x: _(r, "x", "neg") };
  return T.runKernel(Hs, t);
}
var Ke = I({ neg_: $U });
function DU(r) {
  let t = { x: _(r, "x", "softplus") };
  return T.runKernel(la, t);
}
var ui = I({ softplus_: DU });
function RU(r) {
  let e = _(r, "x", "logSigmoid");
  return Qr((n) => ({ value: Ke(ui(Ke(n))), gradFunc: (a) => F(a, Jr(Ke(n))) }))(e);
}
var FU = I({ logSigmoid_: RU });
function OU(r, e = null, t = false) {
  let o = { x: _(r, "x", "max") }, s = { reductionIndices: e, keepDims: t };
  return T.runKernel(Uo, o, s);
}
var Vr = I({ max_: OU });
function PU(r, e) {
  let t = _(r, "a", "sub"), n = _(e, "b", "sub");
  [t, n] = Ge(t, n);
  let o = { a: t, b: n };
  return T.runKernel(hs, o);
}
var le = I({ sub_: PU });
function MU(r, e = null, t = false) {
  let n = _(r, "x", "sum");
  n.dtype === "bool" && (n = J(n, "int32"));
  let o = { x: n }, s = { axis: e, keepDims: t };
  return T.runKernel(ms, o, s);
}
var me = I({ sum_: MU });
function LU(r, e = -1) {
  let t = _(r, "logits", "logSoftmax");
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and axis was ${e}`);
  return Qr((o, s) => {
    let a = true, i = Vr(o, e, true), l = le(o, i), u = le(J(l, "float32"), Ir(me(tr(l), e, a)));
    return s([u]), { value: u, gradFunc: (p, m) => {
      let [f] = m, d = true, h = tr(f);
      return le(p, F(me(p, e, d), h));
    } };
  })(t);
}
var Qm = I({ logSoftmax_: LU });
function Rk(r, e) {
  for (let t = 0; t < r.length; ++t)
    if (r[r.length - t - 1] !== e - 1 - t)
      return false;
  return true;
}
function SN(r, e, t) {
  let n = r.length + e.length, o = [], s = 0, a = 0;
  for (let i = 0; i < n; i++)
    t.indexOf(i) === -1 ? o.push(r[s++]) : o.push(e[a++]);
  return o;
}
function Fk(r, e) {
  let t = [], n = r.length;
  for (let s = 0; s < n; s++)
    e.indexOf(s) === -1 && t.push(r[s]);
  let o = e.map((s) => r[s]);
  return [t, o];
}
function ao(r, e) {
  let t = e.map((n) => 1);
  return SN(r, t, e);
}
function zU(r, e, t) {
  E(Rk(e, t), () => `${r} supports only inner-most axes for now. Got axes ${e} and rank-${t} input.`);
}
function Ok(r, e) {
  if (Rk(r, e))
    return null;
  let t = [];
  for (let n = 0; n < e; ++n)
    r.indexOf(n) === -1 && t.push(n);
  return r.forEach((n) => t.push(n)), t;
}
function ef(r) {
  return r.map((e, t) => [t, e]).sort((e, t) => e[1] - t[1]).map((e) => e[0]);
}
function BU(r, e) {
  let t = [];
  for (let n = e - r; n < e; ++n)
    t.push(n);
  return t;
}
function VU(r, e = null, t = false) {
  let n = _(r, "x", "logSumExp"), o = ir(e, n.shape), s = Vr(n, o, true), a = le(n, s), i = tr(a), l = me(i, o), u = Ir(l), c = Y(O(s, u.shape), u);
  if (t) {
    let p = ao(c.shape, o);
    return O(c, p);
  }
  return c;
}
var Pk = I({ logSumExp_: VU });
function WU(r, e) {
  let t = _(r, "a", "logicalAnd", "bool"), n = _(e, "b", "logicalAnd", "bool");
  Le(t.shape, n.shape);
  let o = { a: t, b: n };
  return T.runKernel(Yi, o);
}
var Fr = I({ logicalAnd_: WU });
function jU(r) {
  let t = { x: _(r, "x", "logicalNot", "bool") };
  return T.runKernel(jl, t);
}
var cu = I({ logicalNot_: jU });
function GU(r, e) {
  let t = _(r, "a", "logicalOr", "bool"), n = _(e, "b", "logicalOr", "bool");
  Le(t.shape, n.shape);
  let o = { a: t, b: n };
  return T.runKernel(Gl, o);
}
var tf = I({ logicalOr_: GU });
function UU(r, e) {
  let t = _(r, "a", "logicalXor", "bool"), n = _(e, "b", "logicalXor", "bool");
  return Le(t.shape, n.shape), Fr(tf(r, e), cu(Fr(r, e)));
}
var HU = I({ logicalXor_: UU });
function qU(r, e, t, n, o) {
  let s = _(r, "x", "maxPool"), a = 1, i = s, l = false;
  s.rank === 3 && (l = true, i = O(s, [1, s.shape[0], s.shape[1], s.shape[2]])), E(i.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${i.rank}.`), E(Cr(t, a), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`), o != null && E(ot(n), () => `Error in maxPool: pad must be an integer when using, dimRoundingMode ${o} but got pad ${n}.`);
  let u = { x: i }, c = { filterSize: e, strides: t, pad: n, dimRoundingMode: o }, p = T.runKernel(qo, u, c);
  return l ? O(p, [p.shape[1], p.shape[2], p.shape[3]]) : p;
}
var pu = I({ maxPool_: qU });
function KU(r, e = [1, 1, 1], t, n, o, s = "NDHWC") {
  let a = _(r, "x", "maxPool3d"), i = a, l = false;
  a.rank === 4 && (l = true, i = O(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), E(i.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`), E(s === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`), o != null && E(ot(n), () => `Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${n}.`);
  let u = { x: i }, c = { filterSize: e, strides: t, pad: n, dimRoundingMode: o, dataFormat: s }, p = T.runKernel(rl, u, c);
  return l ? O(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
var rf = I({ maxPool3d_: KU });
function XU(r, e, t, n, o = false) {
  let a = { x: _(r, "x", "maxPoolWithArgmax") }, i = { filterSize: e, strides: t, pad: n, includeBatchInIndex: o }, l = T.runKernel(Pc, a, i);
  return { result: l[0], indexes: l[1] };
}
var Mk = I({ maxPoolWithArgmax_: XU });
function YU(r, e) {
  let t = _(r, "a", "maximum"), n = _(e, "b", "maximum");
  [t, n] = Ge(t, n), t.dtype === "bool" && (t = J(t, "int32"), n = J(n, "int32")), Le(t.shape, n.shape);
  let o = { a: t, b: n };
  return T.runKernel(Ho, o);
}
var Rn = I({ maximum_: YU });
function ZU(r, e = null, t = false) {
  let o = { x: _(r, "x", "mean") }, s = { axis: e, keepDims: t };
  return T.runKernel(Ko, o, s);
}
var Ct = I({ mean_: ZU });
function ht(r, e = "float32") {
  if (e === "complex64") {
    let n = ht(r, "float32"), o = ht(r, "float32");
    return $n(n, o);
  }
  let t = hc(nt(r), e);
  return T.makeTensor(t, r, e);
}
function rr(r, e = "float32") {
  if (e === "complex64") {
    let n = rr(r, "float32"), o = ht(r, "float32");
    return $n(n, o);
  }
  let t = Nm(nt(r), e);
  return T.makeTensor(t, r, e);
}
function JU(r, e, { indexing: t = "xy" } = {}) {
  if (t !== "xy" && t !== "ij")
    throw new TypeError(`${t} is not a valid third argument to meshgrid`);
  if (r === void 0)
    return [];
  let n = _(r, "x", "meshgrid", r instanceof je ? r.dtype : "float32");
  if (e === void 0)
    return [n];
  let o = _(e, "y", "meshgrid", e instanceof je ? e.dtype : "float32"), s = nt(n.shape), a = nt(o.shape);
  return t === "xy" ? (n = O(n, [1, -1]), o = O(o, [-1, 1]), [Me(rr([a, 1], n.dtype), n), Me(o, rr([1, s], o.dtype))]) : (n = O(n, [-1, 1]), o = O(o, [1, -1]), [Me(n, rr([1, a], n.dtype)), Me(rr([s, 1], o.dtype), o)]);
}
function QU(r, e = null, t = false) {
  let o = { x: _(r, "x", "min") }, s = { axis: e, keepDims: t };
  return T.runKernel(Xo, o, s);
}
var mp = I({ min_: QU });
function eH(r, e) {
  let t = _(r, "a", "minimum"), n = _(e, "b", "minimum");
  [t, n] = Ge(t, n), t.dtype === "bool" && (t = J(t, "int32"), n = J(n, "int32")), Le(t.shape, n.shape);
  let o = { a: t, b: n };
  return T.runKernel(Yo, o);
}
var Ca = I({ minimum_: eH });
function tH(r, e, t) {
  E(t === "reflect" || t === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${t}.`);
  let n = _(r, "x", "mirrorPad");
  if (n.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  E(e.length === n.rank, () => `Padding doesn't match input. Must be ${n.rank}. Got ${e.length}.`);
  let o = t === "reflect" ? 1 : 0;
  for (let i = 0; i < n.rank; i++)
    E(e[i].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), E(e[i][0] >= 0 && e[i][0] <= n.shape[i] - o && e[i][1] >= 0 && e[i][1] <= n.shape[i] - o, () => `Padding in dimension ${i} cannot be greater than or equal to ${n.shape[i] - o} or less than 0 for input of shape ${n.shape}`);
  let s = { paddings: e, mode: t }, a = { x: n };
  return T.runKernel(Zo, a, s);
}
var Lk = I({ mirrorPad_: tH });
function rH(r, e) {
  let t = _(r, "a", "mod"), n = _(e, "b", "mod");
  [t, n] = Ge(t, n);
  let o = { a: t, b: n };
  return T.runKernel(Zi, o);
}
var zk = I({ mod_: rH });
function nH(r) {
  let e = _(r, "x", "square"), t = {};
  return T.runKernel("Square", { x: e }, t);
}
var We = I({ square_: nH });
function oH(r, e = null, t = false) {
  r = _(r, "x", "moments");
  let n = ir(e, r.shape), o = Ct(r, n, t), s = o.shape;
  t || (s = ao(o.shape, n));
  let a = We(le(J(r, "float32"), O(o, s))), i = Ct(a, n, t);
  return { mean: o, variance: i };
}
var fp = I({ moments_: oH });
function sH(r, e, t, n) {
  let o = _(e, "data", "multiRNNCell"), s = fa(t, "c", "multiRNNCell"), a = fa(n, "h", "multiRNNCell"), i = o, l = [];
  for (let p = 0; p < r.length; p++) {
    let m = r[p](i, s[p], a[p]);
    l.push(m[0]), l.push(m[1]), i = m[1];
  }
  let u = [], c = [];
  for (let p = 0; p < l.length; p += 2)
    u.push(l[p]), c.push(l[p + 1]);
  return [u, c];
}
var iH = I({ multiRNNCell_: sH });
function aH(r, e, t, n = false) {
  let o = _(r, "logits", "multinomial"), s = o.size, a = o.rank;
  if (s < 2)
    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);
  if (a > 2)
    throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);
  t = t || Math.random();
  let l = { logits: a === 1 ? O(o, [1, -1]) : o }, u = { numSamples: e, seed: t, normalized: n }, c = T.runKernel(Mc, l, u);
  return a === 1 ? O(c, [c.size]) : c;
}
var Bk = I({ multinomial_: aH });
function lH(r, e) {
  let t = _(r, "a", "notEqual", "string_or_numeric"), n = _(e, "b", "notEqual", "string_or_numeric");
  [t, n] = Ge(t, n), Le(t.shape, n.shape);
  let o = { a: t, b: n };
  return T.runKernel(Ji, o);
}
var ci = I({ notEqual_: lH });
function uH(r) {
  let t = { x: _(r, "x", "onesLike") };
  return T.runKernel(qs, t);
}
var xr = I({ onesLike_: uH });
function cH(r, e) {
  let t = _(r, "v1", "outerProduct"), n = _(e, "v2", "outerProduct");
  E(t.rank === 1 && n.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${t.rank} and ${n.rank}.`);
  let o = O(t, [-1, 1]), s = O(n, [1, -1]);
  return Me(o, s);
}
var pH = I({ outerProduct_: cH });
function mH(r, e, t = 0) {
  let n = _(r, "x", "pad");
  if (n.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  let o = { paddings: e, constantValue: t }, s = { x: n };
  return T.runKernel(es, s, o);
}
var xn = I({ pad_: mH });
function fH(r, e, t = 0) {
  return E(e.length === 2, () => "Invalid number of paddings. Must be length of 2."), xn(r, [e], t);
}
var dH = I({ pad1d_: fH });
function hH(r, e, t = 0) {
  return E(e.length === 2 && e[0].length === 2 && e[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), xn(r, e, t);
}
var gH = I({ pad2d_: hH });
function xH(r, e, t = 0) {
  return E(e.length === 3 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), xn(r, e, t);
}
var yH = I({ pad3d_: xH });
function bH(r, e, t = 0) {
  return E(e.length === 4 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2 && e[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), xn(r, e, t);
}
var wH = I({ pad4d_: bH });
function kH(r, e, t) {
  let n = _(r, "x", "spaceToBatchND");
  E(n.rank >= 1 + e.length, () => `input rank ${n.rank} should be > than [blockShape] ${e.length}`), E(t.length === e.length, () => `paddings.shape[0] ${t.length} must be equal to [blockShape] ${e.length}`), E(n.shape.reduce((a, i, l) => l > 0 && l <= e.length ? a && (i + t[l - 1][0] + t[l - 1][1]) % e[l - 1] == 0 : a, true), () => `input spatial dimensions ${n.shape.slice(1)} with paddings ${t.toString()} must be divisible by blockShapes ${e.toString()}`);
  let o = { x: n }, s = { blockShape: e, paddings: t };
  return T.runKernel(Js, o, s);
}
var mu = I({ spaceToBatchND_: kH });
function _H(r, e, t, n, o, s) {
  o == null && (o = [1, 1]), s == null && (s = 1), n === 0 && (n = "valid");
  let a = _(r, "x", "maxPool"), i = a, l = false;
  a.rank === 3 && (l = true, i = O(a, [1, a.shape[0], a.shape[1], a.shape[2]])), E(Cr(s, o), () => `Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${o}'`);
  let u = ck(i.shape, e, s, o, n), c = [u.dilationHeight, u.dilationWidth], p;
  n === "same" ? p = CH([u.filterHeight, u.filterWidth], c) : p = [[0, 0], [0, 0]];
  let m = c[0] === 1 && c[1] === 1, [f, d] = vH([u.inHeight, u.inWidth], c, p), h = m ? n : "valid", g = m ? i : mu(i, c, f), w = (t === "avg" ? () => nu(g, e, s, h) : () => pu(g, e, s, h))(), x = m ? w : ou(w, c, d);
  return l ? O(x, [x.shape[1], x.shape[2], x.shape[3]]) : x;
}
function vH(r, e, t) {
  let n = t.map((c) => c[0]), o = t.map((c) => c[1]), s = r.concat(n, o), a = e.map((c, p) => (c - s[p] % c) % c), i = o.map((c, p) => c + a[p]), l = e.map((c, p) => [n[p], i[p]]), u = e.map((c, p) => [0, a[p]]);
  return [l, u];
}
function CH(r, e) {
  let n = r.map((a, i) => a + (a - 1) * (e[i] - 1)).map((a) => a - 1), o = n.map((a) => Math.floor(a / 2)), s = n.map((a, i) => a - o[i]);
  return n.map((a, i) => [o[i], s[i]]);
}
var SH = I({ pool_: _H });
function IH(r, e) {
  let t = _(r, "base", "pow"), n = _(e, "exp", "pow");
  [t, n] = Ge(t, n);
  let o = { a: t, b: n };
  return T.runKernel(ts, o);
}
var yn = I({ pow_: IH });
function NH(r, e) {
  let t = _(r, "x", "prelu"), n = _(e, "alpha", "prelu"), o = { x: t, alpha: n };
  return T.runKernel(rs, o);
}
var fu = I({ prelu_: NH });
function TH(r, e = null, t = false) {
  let n = _(r, "x", "prod");
  n.dtype === "bool" && (n = J(n, "int32"));
  let o = { x: n }, s = { axis: e, keepDims: t };
  return T.runKernel(ra, o, s);
}
var nf = I({ prod_: TH });
function EH(r, e, t) {
  let n = nt(r), o = null;
  if (t == null || t === "float32")
    o = new Float32Array(n);
  else if (t === "int32")
    o = new Int32Array(n);
  else if (t === "bool")
    o = new Uint8Array(n);
  else
    throw new Error(`Unknown data type ${t}`);
  for (let s = 0; s < n; s++)
    o[s] = e();
  return T.makeTensor(o, r, t);
}
var AH = I({ rand_: EH });
var kg = Bl(Kk());
var dp = class {
  constructor(e, t, n, o, s) {
    this.mean = e, this.stdDev = t, this.dtype = n, this.nextVal = NaN, this.truncated = o, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    let a = s || Math.random();
    this.random = kg.alea(a.toString());
  }
  nextValue() {
    if (!isNaN(this.nextVal)) {
      let o = this.nextVal;
      return this.nextVal = NaN, o;
    }
    let e, t, n = false;
    for (; !n; ) {
      let o, s, a;
      do
        o = 2 * this.random() - 1, s = 2 * this.random() - 1, a = o * o + s * s;
      while (a >= 1 || a === 0);
      let i = Math.sqrt(-2 * Math.log(a) / a);
      e = this.mean + this.stdDev * o * i, t = this.mean + this.stdDev * s * i, (!this.truncated || this.isValidTruncated(e)) && (n = true);
    }
    return (!this.truncated || this.isValidTruncated(t)) && (this.nextVal = this.convertValue(t)), this.convertValue(e);
  }
  convertValue(e) {
    return this.dtype == null || this.dtype === "float32" ? e : Math.round(e);
  }
  isValidTruncated(e) {
    return e <= this.upper && e >= this.lower;
  }
};
var Xk = class {
  constructor(e, t, n, o) {
    this.alpha = e, this.beta = 1 / t, this.dtype = n;
    let s = o || Math.random();
    this.randu = kg.alea(s.toString()), this.randn = new dp(0, 1, n, false, this.randu()), e < 1 ? this.d = e + 2 / 3 : this.d = e - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  nextValue() {
    let e, t, n, o, s, a;
    for (; ; ) {
      do
        o = this.randn.nextValue(), a = 1 + this.c * o;
      while (a <= 0);
      if (a *= a * a, e = o * o, t = 1 - 0.331 * e * e, n = 0.5 * e + this.d * (1 - a + Math.log(a)), s = this.randu(), s < t || Math.log(s) < n)
        break;
    }
    return a = 1 / this.beta * this.d * a, this.alpha < 1 && (a *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a);
  }
  convertValue(e) {
    return this.dtype === "float32" ? e : Math.round(e);
  }
};
var Yk = class {
  constructor(e = 0, t = 1, n, o) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = e, this.range = t - e, this.dtype = n, o == null && (o = Math.random()), typeof o == "number" && (o = o.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);
    this.random = kg.alea(o);
  }
  convertValue(e) {
    return this.canReturnFloat() ? e : Math.round(e);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
};
function MH(r, e, t = 1, n = "float32", o) {
  if (t == null && (t = 1), n == null && (n = "float32"), n !== "float32" && n !== "int32")
    throw new Error(`Unsupported data type ${n}`);
  let s = new Xk(e, t, n, o), a = Se(r, n);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = s.nextValue();
  return a.toTensor();
}
var LH = I({ randomGamma_: MH });
function zH(r, e = 0, t = 1, n, o) {
  if (n != null && n === "bool")
    throw new Error(`Unsupported data type ${n}`);
  let s = new dp(e, t, n, false, o), a = Se(r, n);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = s.nextValue();
  return a.toTensor();
}
var _g = I({ randomNormal_: zH });
function BH(r, e = 0, t = 1, n = "float32", o) {
  let s = Se(r, n), a = new Yk(e, t, null, o);
  for (let i = 0; i < s.values.length; i++)
    s.values[i] = a.nextValue();
  return s.toTensor();
}
var vs = I({ randomUniform_: BH });
function Sa(r, e, t = 1, n = "float32") {
  if (t === 0)
    throw new Error("Cannot have a step of zero");
  let o = { start: r, stop: e, step: t, dtype: n };
  return T.runKernel(nl, {}, o);
}
function VH(r) {
  let t = { input: _(r, "input", "real") };
  return T.runKernel(Lc, t);
}
var ml = I({ real_: VH });
function WH(r) {
  let t = { x: _(r, "x", "reciprocal") };
  return T.runKernel(na, t);
}
var Zk = I({ reciprocal_: WH });
function jH(r) {
  let t = { x: _(r, "x", "relu") };
  return T.runKernel(ns, t);
}
var Or = I({ relu_: jH });
function GH(r) {
  let t = { x: _(r, "x", "relu6") };
  return T.runKernel(ss, t);
}
var of = I({ relu6_: GH });
function UH(r, e) {
  let n = { x: _(r, "x", "reverse") }, o = { dims: e };
  return T.runKernel(is, n, o);
}
var lr = I({ reverse_: UH });
function HH(r) {
  let e = _(r, "x", "reverse");
  return E(e.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`), lr(e, 0);
}
var qH = I({ reverse1d_: HH });
function KH(r, e) {
  let t = _(r, "x", "reverse");
  return E(t.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${t.rank}.`), lr(t, e);
}
var XH = I({ reverse2d_: KH });
function YH(r, e) {
  let t = _(r, "x", "reverse");
  return E(t.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${t.rank}.`), lr(t, e);
}
var ZH = I({ reverse3d_: YH });
function JH(r, e) {
  let t = _(r, "x", "reverse");
  return E(t.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${t.rank}.`), lr(t, e);
}
var QH = I({ reverse4d_: JH });
function eq(r) {
  let t = { x: _(r, "x", "round") };
  return T.runKernel(as, t);
}
var sf = I({ round_: eq });
function tq(r) {
  let t = { x: _(r, "x", "rsqrt") };
  return T.runKernel(ls, t);
}
var af = I({ rsqrt_: tq });
function ce(r, e) {
  if ((cr(r) && e !== "string" || Array.isArray(r)) && e !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (e === "string" && cr(r) && !(r instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return Yr(r, [], [], e);
}
function rq(r) {
  let t = { x: _(r, "x", "selu") };
  return T.runKernel(sa, t);
}
var lf = I({ selu_: rq });
function nq(r, e, t, n, o, s = [1, 1], a = "NHWC") {
  let i = _(r, "x", "separableConv2d"), l = _(e, "depthwiseFilter", "separableConv2d"), u = _(t, "pointwiseFilter", "separableConv2d"), c = i, p = false;
  if (i.rank === 3 && (p = true, c = O(i, [1, i.shape[0], i.shape[1], i.shape[2]])), a === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  E(c.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`), E(l.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`), E(u.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`), E(u.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`), E(u.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);
  let m = l.shape[2], f = l.shape[3];
  E(u.shape[2] === m * f, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${m * f}, but got ${u.shape[2]}.`);
  let d = ka(c, l, n, o, a, s), g = Dn(d, u, 1, "valid", a);
  return p ? O(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
var Jk = I({ separableConv2d_: nq });
async function oq(r, e) {
  let t = _(r, "x", "setdiff1d"), n = _(e, "y", "setdiff1d");
  E(t.dtype === n.dtype, () => `x and y should have the same dtype, but got x (${t.dtype}) and y (${n.dtype}).`), E(t.rank === 1, () => `x should be 1D tensor, but got x (${t.shape}).`), E(n.rank === 1, () => `y should be 1D tensor, but got y (${n.shape}).`);
  let o = await t.data(), s = await n.data(), a = new Set(s), i = 0;
  for (let c = 0; c < o.length; c++)
    a.has(o[c]) || i++;
  let l = new ct([i], t.dtype), u = new ct([i], "int32");
  for (let c = 0, p = 0; c < o.length; c++)
    a.has(o[c]) || (l.values[p] = o[c], u.values[p] = c, p++);
  return [l.toTensor(), u.toTensor()];
}
var Qk = oq;
function sq(r) {
  let t = { x: _(r, "x", "sign") };
  return T.runKernel(aa, t);
}
var e_ = I({ sign_: sq });
function iq(r) {
  let t = { x: _(r, "x", "sin") };
  return T.runKernel(us, t);
}
var uf = I({ sin_: iq });
function aq(r) {
  let t = { x: _(r, "x", "sinh") };
  return T.runKernel(ia, t);
}
var cf = I({ sinh_: aq });
function lq(r, e, t) {
  let n = _(r, "x", "slice1d");
  return E(n.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${n.rank} tensor`), Oe(n, [e], [t]);
}
var pf = I({ slice1d_: lq });
function uq(r, e, t) {
  let n = _(r, "x", "slice2d");
  return E(n.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${n.rank} tensor`), Oe(n, e, t);
}
var vg = I({ slice2d_: uq });
function cq(r, e, t) {
  let n = _(r, "x", "slice3d");
  return E(n.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${n.rank} tensor`), Oe(n, e, t);
}
var mf = I({ slice3d_: cq });
function pq(r, e, t) {
  let n = _(r, "x", "slice4d");
  return E(n.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${n.rank} tensor`), Oe(n, e, t);
}
var hp = I({ slice4d_: pq });
function mq(r, e = -1) {
  let t = _(r, "logits", "softmax", "float32");
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and dim was ${e}`);
  let n = { logits: t }, o = { dim: e };
  return T.runKernel(fs, n, o);
}
var hu = I({ softmax_: mq });
function fq(r) {
  E(r.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);
  let e = { input: r };
  return T.runKernel(Ec, e);
}
var gu = I({ fft_: fq });
function dq(r) {
  E(r.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);
  let e = { input: r };
  return T.runKernel(Ac, e);
}
var fl = I({ ifft_: dq });
function hq(r) {
  let e = r.shape[r.shape.length - 1], t = r.size / e, n;
  if (e <= 2) {
    let o = O(r, [t, e]);
    n = fl(o);
  } else {
    let o = [t, 2 * (e - 1)], s = O(ml(r), [t, e]), a = O(au(r), [t, e]), i = lr(Oe(s, [0, 1], [t, e - 2]), 1), l = F(lr(Oe(a, [0, 1], [t, e - 2]), 1), ce(-1)), u = tt([s, i], 1), c = tt([a, l], 1), p = O($n(u, c), [o[0], o[1]]);
    n = fl(p);
  }
  if (n = ml(n), r.rank === 3 && r.shape[0] !== 0) {
    let o = n, s = r.shape[0];
    n = O(n, [s, n.shape[0] / s, n.shape[1]]), o.dispose();
  }
  return n;
}
var ff = I({ irfft_: hq });
function gq(r, e, t = 0) {
  let o = { x: _(r, "x", "split") }, s = { numOrSizeSplits: e, axis: t };
  return T.runKernel(Qs, o, s);
}
var mr = I({ split_: gq });
function xq(r, e) {
  E(r.dtype === "float32", () => `The dtype for rfft() must be real value but got ${r.dtype}`);
  let t = r.shape[r.shape.length - 1], n = r.size / t, o;
  if (e != null && e < t) {
    let d = r.shape.map((g) => 0), h = r.shape.map((g) => g);
    h[r.shape.length - 1] = e, o = Oe(r, d, h), t = e;
  } else if (e != null && e > t) {
    let d = r.shape.map((h) => h);
    d[r.shape.length - 1] = e - t, o = tt([r, ht(d)], r.shape.length - 1), t = e;
  } else
    o = r;
  let s = Ie(o), a = O($n(o, s), [n, t]), i = gu(a), l = Math.floor(t / 2) + 1, u = ml(i), c = au(i), p = mr(u, [l, t - l], u.shape.length - 1), m = mr(c, [l, t - l], c.shape.length - 1), f = o.shape.slice();
  return f[o.shape.length - 1] = l, O($n(p[0], m[0]), f);
}
var xu = I({ rfft_: xq });
function yq(r) {
  let t = { x: _(r, "x", "sqrt") };
  return T.runKernel(ps, t);
}
var St = I({ sqrt_: yq });
function bq(r, e) {
  let t = _(r, "a", "squaredDifference"), n = _(e, "b", "squaredDifference");
  [t, n] = Ge(t, n), Le(t.shape, n.shape);
  let o = { a: t, b: n }, s = {};
  return T.runKernel(ds, o, s);
}
var df = I({ squaredDifference_: bq });
function wq(r, e) {
  let t = _(r, "x", "squeeze");
  return O(t, cw(t.shape, e).newShape);
}
var en = I({ squeeze_: wq });
function kq(r, e = 0) {
  let t = fa(r, "tensors", "stack", "string_or_numeric");
  E(t.length >= 1, () => "Pass at least one tensor to tf.stack"), t.length > 0 && E(e <= t[0].rank, () => "Axis must be <= rank of the tensor");
  let n = t, o = { axis: e };
  return T.runKernel(Ks, n, o);
}
var nr = I({ stack_: kq });
function _q(r, e = 0) {
  let n = { x: _(r, "x", "step") }, o = { alpha: e };
  return T.runKernel(ro, n, o);
}
var Ia = I({ step_: _q });
function vq(r, e, t, n, o = 0, s = 0, a = 0, i = 0, l = 0) {
  let c = { x: _(r, "x", "stridedSlice", "string_or_numeric") }, p = { begin: e, end: t, strides: n, beginMask: o, endMask: s, ellipsisMask: a, newAxisMask: i, shrinkAxisMask: l };
  return T.runKernel(ua, c, p);
}
var t_ = I({ stridedSlice_: vq });
function Cq(r) {
  let t = { x: _(r, "x", "tan") };
  return T.runKernel(gs, t);
}
var r_ = I({ tan_: Cq });
function At(r, e) {
  Bn(r);
  let t = Ar(r, e);
  if (t.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return Yr(r, null, t, e);
}
function pi(r, e, t) {
  if (Bn(r), e != null && e.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  let n = Ar(r, t);
  if (n.length !== 2 && n.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (n.length === 1 && e == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return Yr(r, e, n, t);
}
function Sq(r, e, t) {
  if (Bn(r), e != null && e.length !== 4)
    throw new Error("tensor4d() requires shape to have four numbers");
  let n = Ar(r, t);
  if (n.length !== 4 && n.length !== 1)
    throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (n.length === 1 && e == null)
    throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return Yr(r, e, n, t);
}
function Iq(r, e, t) {
  if (Bn(r), e != null && e.length !== 5)
    throw new Error("tensor5d() requires shape to have five numbers");
  let n = Ar(r, t);
  if (n.length !== 5 && n.length !== 1)
    throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (n.length === 1 && e == null)
    throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return Yr(r, e, n, t);
}
function Nq(r, e, t) {
  if (Bn(r), e != null && e.length !== 6)
    throw new Error("tensor6d() requires shape to have six numbers");
  let n = Ar(r, t);
  if (n.length !== 6 && n.length !== 1)
    throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (n.length === 1 && e == null)
    throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return e = e || n, Yr(r, e, n, t);
}
function Tq(r, e = 1, t = true) {
  let n = _(r, "x", "topk");
  if (n.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  let o = n.shape[n.shape.length - 1];
  if (e < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);
  if (e > o)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${o}) but got ${e}`);
  let s = { x: n }, a = { k: e, sorted: t }, [i, l] = T.runKernel(ca, s, a);
  return { values: i, indices: l };
}
var n_ = I({ topk_: Tq });
function Eq(r, e = 0, t = 1, n, o) {
  if (n != null && n === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  let s = new dp(e, t, n, true, o), a = Se(r, n);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = s.nextValue();
  return a.toTensor();
}
var yu = I({ truncatedNormal_: Eq });
function Aq(r, e = 0) {
  let t = _(r, "x", "unique", "string_or_numeric");
  E(t.rank > 0, () => "The input tensor must be at least 1D");
  let n = { x: t }, o = { axis: e }, [s, a] = T.runKernel(Xc, n, o);
  return { values: s, indices: a };
}
var Cg = I({ unique_: Aq });
function $q(r, e, t) {
  let n = _(r, "x", "unsortedSegmentSum"), o = _(e, "segmentIds", "unsortedSegmentSum", "int32");
  E(ot(t), () => "numSegments must be of dtype int");
  let s = { x: n, segmentIds: o }, a = { numSegments: t };
  return T.runKernel(il, s, a);
}
var o_ = I({ unsortedSegmentSum_: $q });
function Dq(r, e = 0) {
  let t = _(r, "x", "unstack", "string_or_numeric");
  E(e >= -t.shape.length && e < t.shape.length, () => `Axis = ${e} is not in [-${t.shape.length}, ${t.shape.length})`);
  let n = { value: t }, o = { axis: e };
  return T.runKernel(ei, n, o);
}
var Nr = I({ unstack_: Dq });
function s_(r, e = true, t, n) {
  return T.makeVariable(r, e, t, n);
}
function Sg(r, e) {
  let t = [];
  for (let s = 0; s < e.length; s++)
    e[s] && t.push(s);
  let n = Se(r, "int32"), o = Se([t.length, r.length], "int32");
  for (let s = 0; s < t.length; s++) {
    let a = n.indexToLoc(t[s]), i = s * r.length;
    o.values.set(a, i);
  }
  return o.toTensor();
}
async function Rq(r) {
  let e = _(r, "condition", "whereAsync", "bool"), t = await e.data(), n = Sg(e.shape, t);
  return r !== e && e.dispose(), n;
}
var hf = Rq;
async function Fq(r, e, t) {
  let n = _(r, "tensor", "boolMask"), o = _(e, "mask", "boolMask", "bool"), s = t == null ? 0 : t, a = o.rank, i = n.shape;
  E(a > 0, () => "mask cannot be scalar"), $t(i.slice(s, s + a), o.shape, "mask's shape must match the first K dimensions of tensor's shape,");
  let l = 1;
  for (let h = s; h < s + a; h++)
    l *= i[h];
  let u = i.slice(0, s).concat([l], i.slice(s + a)), c = O(n, u), p = O(o, [-1]), m = await hf(p), f = en(m, [1]), d = li(c, f, s);
  return r !== n && n.dispose(), e !== o && o.dispose(), f.dispose(), c.dispose(), p.dispose(), m.dispose(), d;
}
var XIe = Fq;
function Oq(r, e = "euclidean", t = null, n = false) {
  r = _(r, "x", "norm");
  let o = BN(r, e, t), s = o.shape;
  if (n) {
    let a = ir(t, r.shape);
    s = ao(o.shape, a);
  }
  return O(o, s);
}
function BN(r, e, t = null) {
  if (r.rank === 0)
    return Tt(r);
  if (r.rank !== 1 && t === null)
    return BN(O(r, [-1]), e, t);
  if (r.rank === 1 || typeof t == "number" || Array.isArray(t) && t.length === 1) {
    if (e === 1)
      return me(Tt(r), t);
    if (e === 1 / 0)
      return Vr(Tt(r), t);
    if (e === -1 / 0)
      return mp(Tt(r), t);
    if (e === "euclidean" || e === 2)
      return St(me(yn(Tt(r), ce(2, "int32")), t));
    throw new Error(`Error in norm: invalid ord value: ${e}`);
  }
  if (Array.isArray(t) && t.length === 2) {
    if (e === 1)
      return Vr(me(Tt(r), t[0]), t[1] - 1);
    if (e === 1 / 0)
      return Vr(me(Tt(r), t[1]), t[0]);
    if (e === -1 / 0)
      return mp(me(Tt(r), t[1]), t[0]);
    if (e === "fro" || e === "euclidean")
      return St(me(We(r), t));
    throw new Error(`Error in norm: invalid ord value: ${e}`);
  }
  throw new Error(`Error in norm: invalid axis: ${t}`);
}
var Ig = I({ norm_: Oq });
function Pq(r, e, t, n, o = true) {
  let s = _(r, "v", "movingAverage"), a = _(e, "x", "movingAverage"), i = _(t, "decay", "movingAverage");
  $w(s, a), E(Kr(s.shape, a.shape), () => "Shape mismatch in v and x");
  let l = ce(1), u = le(l, i), c = F(le(a, s), u);
  if (o) {
    E(n != null, () => "When using zeroDebias: true, step is required.");
    let p = _(n, "step", "movingAverage");
    c = ue(c, le(l, yn(i, p)));
  }
  return Y(s, c);
}
var k1e = I({ movingAverage_: Pq });
function Mq(r, e, t) {
  let n = _(r, "indices", "scatterND", "int32"), o = _(e, "updates", "scatterND");
  mg(o, n, t);
  let s = { indices: n, updates: o }, a = { shape: t };
  return T.runKernel(oa, s, a);
}
var VN = I({ scatterND_: Mq });
function WN(r, e, t, n) {
  if (r.dtype !== "int32")
    throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);
  if (r.rank > 2)
    throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);
  let o = r.rank > 0 ? r.shape[0] : 1, s = r.rank > 1 ? r.shape[1] : 1;
  if (t.length !== s)
    throw new Error(`outputShape has incorrect number of elements:, ${t.length}, should be: ${s}.`);
  let a = e.size;
  if (!(e.rank === 0 || e.rank === 1 && a === o))
    throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${o}]`);
  if (e.dtype !== n.dtype)
    throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
function Lq(r, e, t, n = 0) {
  let o = _(r, "sparseIndices", "sparseToDense", "int32"), s = _(e, "sparseValues", "sparseToDense"), a = _(n, "defaultValue", "sparseToDense", s.dtype);
  WN(o, s, t, a);
  let i = { sparseIndices: o, sparseValues: s, defaultValue: a }, l = { outputShape: t };
  return T.runKernel(Uc, i, l);
}
var Ng = I({ sparseToDense_: Lq });
function zq(r, e) {
  let t = _(e, "indices", "gatherND", "int32"), o = { params: _(r, "x", "gatherND", "string_or_numeric"), indices: t };
  return T.runKernel(Wi, o);
}
var jN = I({ gatherND_: zq });
function GN(r, e) {
  if (e == null)
    return r.shape.slice();
  if (Kr(r.shape, e))
    return e;
  if (r.shape.length === e.length) {
    let t = [];
    for (let n = 0; n < r.shape.length; n++)
      e[n] == null && r.shape[n] != null ? t.push(r.shape[n]) : t.push(e[n]);
    return t;
  }
  return e;
}
function Bq(r, e, t, n) {
  let o = _(r, "x", "dropout");
  if (E(o.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${o.dtype} tensor instead.`), E(e >= 0 && e < 1, () => `rate must be a float in the range [0, 1), but got ${e}.`), e === 0)
    return r instanceof je ? o.clone() : o;
  let s = GN(o, t), a = 1 - e, i = ue(va(Y(vs(s, 0, 1, "float32", n), a)), a);
  return F(o, i);
}
var UN = I({ dropout_: Bq });
function HN(r) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(r) / Math.log(2))));
}
function Tg(r, e, t) {
  let n = 1 - r % 2, o = new Float32Array(r);
  for (let s = 0; s < r; ++s) {
    let a = 2 * Math.PI * s / (r + n - 1);
    o[s] = e - t * Math.cos(a);
  }
  return At(o, "float32");
}
async function Vq(r, e, t = 1) {
  let n = _(r, "predictions", "inTopK"), o = _(e, "targets", "inTopK");
  E(n.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${n.rank}`), E(n.rank - 1 === o.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${n.rank} and targets rank ${o.rank}`), $t(n.shape.slice(0, n.shape.length - 1), o.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
  let s = n.shape[n.shape.length - 1];
  E(t > 0 && t <= s, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${t}`);
  let a = await n.data(), i = await o.data(), [l, u] = [a.length / s, s], c = pw("bool", l);
  for (let p = 0; p < l; p++) {
    let m = p * u, f = a.subarray(m, m + u), d = [];
    for (let h = 0; h < f.length; h++)
      d.push({ value: f[h], index: h });
    d.sort((h, g) => g.value - h.value), c[p] = 0;
    for (let h = 0; h < t; h++)
      if (d[h].index === i[p]) {
        c[p] = 1;
        break;
      }
  }
  return r !== n && n.dispose(), e !== o && o.dispose(), vr(c, o.shape, "bool");
}
var sNe = Vq;
var lo = {};
He(lo, { conv2d: () => qN, depthwiseConv2d: () => KN, matMul: () => XN });
function Wq(r, e, t, n, o, s = "NHWC", a) {
  let i = r;
  r.rank === 3 && (i = O(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let l = e;
  l.rank === 3 && (l = O(e, [1, e.shape[0], e.shape[1], e.shape[2]])), E(i.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`), E(l.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`), E(t.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${t}.`);
  let u = s === "NHWC" ? i.shape[3] : i.shape[1], c = s === "NHWC" ? l.shape[3] : l.shape[1];
  E(u === t[2], () => `Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${t[2]}.`), E(c === t[3], () => `Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${t[3]}).`), a != null && E(ot(o), () => `Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`);
  let p = { x: i, dy: l }, m = { strides: n, pad: o, dataFormat: s, dimRoundingMode: a, filterShape: t };
  return T.runKernel(wc, p, m);
}
var gp = I({ conv2DBackpropFilter_: Wq });
function bu(r, e, t) {
  if (t == null || t === "linear")
    return r;
  if (t === "relu")
    return F(r, Ia(e));
  throw new Error(`Cannot compute gradient for fused activation ${t}.`);
}
function wu(r, e) {
  let t = e, n = wt(r.shape, e.shape);
  return n.length > 0 && (t = me(t, n)), O(t, r.shape);
}
function ku(r, e, t, n) {
  if (e === "linear")
    return r;
  if (e === "relu")
    return Or(r);
  if (e === "elu")
    return _a(r);
  if (e === "relu6")
    return of(r);
  if (e === "prelu")
    return fu(r, t);
  if (e === "leakyrelu")
    return lu(r, n);
  if (e === "sigmoid")
    return Jr(r);
  throw new Error(`Unknown fused activation ${e}.`);
}
var _u = (r, e) => !(r > 0) || e === "linear";
function jq({ x: r, filter: e, strides: t, pad: n, dataFormat: o = "NHWC", dilations: s = [1, 1], dimRoundingMode: a, bias: i, activation: l = "linear", preluActivationWeights: u, leakyreluAlpha: c }) {
  if (l = l || "linear", _u(T.state.gradientDepth, l) === false) {
    let C = Dn(r, e, t, n, o, s, a);
    return i != null && (C = Y(C, i)), ku(C, l, u, c);
  }
  let p = _(r, "x", "conv2d"), m = _(e, "filter", "conv2d"), f = p, d = false;
  p.rank === 3 && (d = true, f = O(p, [1, p.shape[0], p.shape[1], p.shape[2]])), E(f.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`), E(m.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`), a != null && E(ot(n), () => `Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${n}.`), E(f.shape[3] === m.shape[2], () => `Error in conv2d: depth of input (${f.shape[3]}) must match input depth for filter ${m.shape[2]}.`), E(Cr(t, s), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`), E(o === "NHWC", () => `Error in conv2d: got dataFormat of ${o} but only NHWC is currently supported.`);
  let h = tu(f.shape, m.shape, t, s, n, a), g;
  i != null && (g = _(i, "bias", "fused conv2d"), [g] = Ge(g, p), Le(h.outShape, g.shape));
  let y;
  u != null && (y = _(u, "prelu weights", "fused conv2d"));
  let w = (C, A) => {
    let [$, R, P, M] = A, V = bu(C, P, l);
    E(Gn(s), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
    let W = cp(R.shape, V, $, t, n), G = gp(R, V, $.shape, t, n), U = [W, G];
    if (M != null) {
      let H = wu(M, V);
      U.push(H);
    }
    return U;
  }, x = { x: f, filter: m, bias: g, preluActivationWeights: y }, k = { strides: t, pad: n, dataFormat: o, dilations: s, dimRoundingMode: a, activation: l, leakyreluAlpha: c };
  return i == null ? Qr((A, $, R) => {
    let P = T.runKernel(ni, x, k);
    return R([$, A, P]), d && (P = O(P, [P.shape[1], P.shape[2], P.shape[3]])), { value: P, gradFunc: w };
  })(f, m) : Qr((A, $, R, P) => {
    let M = T.runKernel(ni, x, k);
    return P([$, A, M, R]), d && (M = O(M, [M.shape[1], M.shape[2], M.shape[3]])), { value: M, gradFunc: w };
  })(f, m, g);
}
var qN = I({ fusedConv2d_: jq });
function Gq(r, e, t, n, o, s = [1, 1], a) {
  let i = r;
  r.rank === 3 && (i = O(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let l = e;
  l.rank === 3 && (l = O(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  let u = { x: i, dy: l }, c = { strides: n, pad: o, dimRoundingMode: a, dilations: s, filterShape: t };
  return T.runKernel(Cc, u, c);
}
var Eg = I({ depthwiseConv2dNativeBackpropFilter_: Gq });
function Uq(r, e, t, n, o, s = [1, 1], a) {
  let i = e, l = false;
  e.rank === 3 && (l = true, i = O(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  let u = { dy: i, filter: t }, c = { strides: n, pad: o, dimRoundingMode: a, dilations: s, inputShape: r }, p = T.runKernel(Sc, u, c);
  return l ? O(p, [p.shape[1], p.shape[2], p.shape[3]]) : p;
}
var Ag = I({ depthwiseConv2dNativeBackpropInput_: Uq });
function Hq({ x: r, filter: e, strides: t, pad: n, dataFormat: o = "NHWC", dilations: s = [1, 1], dimRoundingMode: a, bias: i, activation: l = "linear", preluActivationWeights: u, leakyreluAlpha: c }) {
  if (_u(T.state.gradientDepth, l) === false) {
    let C = ka(r, e, t, n, o, s, a);
    return i != null && (C = Y(C, i)), ku(C, l, u, c);
  }
  let p = _(r, "x", "depthwiseConv2d"), m = _(e, "filter", "depthwiseConv2d"), f = p, d = false;
  p.rank === 3 && (d = true, f = O(p, [1, p.shape[0], p.shape[1], p.shape[2]])), E(f.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`), E(m.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`), E(f.shape[3] === m.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`), s == null && (s = [1, 1]), E(Cr(t, s), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`), a != null && E(ot(n), () => `Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${a} but got pad ${n}.`);
  let h = tu(f.shape, m.shape, t, s, n, a, true), g;
  i != null && (g = _(i, "bias", "fused conv2d"), [g] = Ge(g, p), Le(h.outShape, g.shape));
  let y;
  u != null && (y = _(u, "prelu weights", "fused depthwiseConv2d"));
  let w = (C, A) => {
    E(Gn(s), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);
    let [$, R, P, M] = A, V = bu(C, P, l), W = Ag(R.shape, V, $, t, n, s, a), G = Eg(R, V, $.shape, t, n, s, a);
    if (M != null) {
      let U = wu(g, V);
      return [W, G, U];
    }
    return [W, G];
  }, x = { x: f, filter: m, bias: g, preluActivationWeights: y }, k = { strides: t, pad: n, dataFormat: o, dilations: s, dimRoundingMode: a, activation: l, leakyreluAlpha: c };
  return i == null ? Qr((A, $, R) => {
    let P = T.runKernel(oi, x, k);
    return R([$, A, P]), d && (P = O(P, [P.shape[1], P.shape[2], P.shape[3]])), { value: P, gradFunc: w };
  })(f, m) : Qr((A, $, R, P) => {
    let M = T.runKernel(oi, x, k);
    return P([$, A, M, R]), d && (M = O(M, [M.shape[1], M.shape[2], M.shape[3]])), { value: M, gradFunc: w };
  })(f, m, g);
}
var KN = I({ fusedDepthwiseConv2d_: Hq });
function qq({ a: r, b: e, transposeA: t = false, transposeB: n = false, bias: o, activation: s = "linear", preluActivationWeights: a, leakyreluAlpha: i }) {
  if (_u(T.state.gradientDepth, s) === false) {
    let M = Me(r, e, t, n);
    return o != null && (M = Y(M, o)), ku(M, s, a, i);
  }
  let l = _(r, "a", "fused matMul"), u = _(e, "b", "fused matMul");
  [l, u] = Ge(l, u);
  let c = t ? l.shape[l.rank - 2] : l.shape[l.rank - 1], p = n ? u.shape[u.rank - 1] : u.shape[u.rank - 2], m = t ? l.shape[l.rank - 1] : l.shape[l.rank - 2], f = n ? u.shape[u.rank - 2] : u.shape[u.rank - 1], d = l.shape.slice(0, -2), h = u.shape.slice(0, -2), g = nt(d), y = nt(h);
  E(l.rank >= 2 && u.rank >= 2 && l.rank === u.rank, () => `Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`), E(Kr(d, h), () => `Error in fused matMul: outer dimensions (${d}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} must match.`), E(c === p, () => `Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${t} and transposeB=${n} must match.`);
  let w = l.shape.slice(0, -2).concat([m, f]), x = t ? O(l, [g, c, m]) : O(l, [g, m, c]), k = n ? O(u, [y, f, p]) : O(u, [y, p, f]), C;
  o != null && (C = _(o, "bias", "fused matMul"), [C] = Ge(C, l), Le(w, C.shape));
  let A;
  a != null && (A = _(a, "prelu weights", "fused matMul"));
  let $ = (M, V) => {
    let [W, G, U, H] = V, K = bu(O(M, U.shape), U, s), re, X;
    if (!t && !n ? (re = Me(K, G, false, true), X = Me(W, K, true, false)) : !t && n ? (re = Me(K, G, false, false), X = Me(K, W, true, false)) : t && !n ? (re = Me(G, K, false, true), X = Me(W, K, false, false)) : (re = Me(G, K, true, true), X = Me(K, W, true, true)), o != null) {
      let ne = wu(H, K);
      return [re, X, ne];
    } else
      return [re, X];
  }, R = { a: x, b: k, bias: C, preluActivationWeights: A }, P = { transposeA: t, transposeB: n, activation: s, leakyreluAlpha: i };
  return o == null ? Qr((V, W, G) => {
    let U = T.runKernel(ri, R, P);
    return G([V, W, U]), { value: O(U, w), gradFunc: $ };
  })(x, k) : Qr((V, W, G, U) => {
    let H = T.runKernel(ri, R, P);
    return U([V, W, H, G]), { value: O(H, w), gradFunc: $ };
  })(x, k, C);
}
var XN = I({ fusedMatMul_: qq });
function Kq(r) {
  return Tg(r, 0.54, 0.46);
}
var YN = I({ hammingWindow_: Kq });
function Xq(r) {
  return Tg(r, 0.5, 0.5);
}
var $g = I({ hannWindow_: Xq });
function Yq(r, e, t, n = false, o = 0) {
  let s = 0, a = [];
  for (; s + e <= r.size; )
    a.push(Oe(r, s, e)), s += t;
  if (n)
    for (; s < r.size; ) {
      let i = s + e - r.size, l = tt([Oe(r, s, e - i), _s([i], o)]);
      a.push(l), s += t;
    }
  return a.length === 0 ? pi([], [0, e]) : O(tt(a), [a.length, e]);
}
var Dg = I({ frame_: Yq });
function Zq(r, e, t, n, o = $g) {
  n == null && (n = HN(e));
  let s = Dg(r, e, t), a = F(s, o(e));
  return xu(a, n);
}
var ZN = I({ stft_: Zq });
function Jq(r, e, t, n, o = "bilinear", s = 0) {
  let a = _(r, "image", "cropAndResize"), i = _(e, "boxes", "cropAndResize", "float32"), l = _(t, "boxInd", "cropAndResize", "int32"), u = i.shape[0];
  E(a.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`), E(i.rank === 2 && i.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`), E(l.rank === 1 && l.shape[0] === u, () => `Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`), E(n.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${n.length}.`), E(n[0] >= 1 && n[1] >= 1, () => `cropSize must be atleast [1,1], but was ${n}`), E(o === "bilinear" || o === "nearest", () => `method must be bilinear or nearest, but was ${o}`);
  let c = { image: a, boxes: i, boxInd: l }, p = { method: o, extrapolationValue: s, cropSize: n };
  return T.runKernel(Pi, c, p);
}
var JN = I({ cropAndResize_: Jq });
function Qq(r) {
  let e = _(r, "image", "flipLeftRight", "float32");
  E(e.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);
  let t = { image: e };
  return T.runKernel(Vi, t, {});
}
var QN = I({ flipLeftRight_: Qq });
function eK(r) {
  let e = _(r, "image", "grayscaleToRGB"), t = e.rank - 1, n = e.shape[t];
  E(e.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`), E(n === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${n}.`);
  let o = new Array(e.rank);
  return o.fill(1, 0, t), o[t] = 3, Rr(e, o);
}
var eT = I({ grayscaleToRGB_: eK });
function tK(r, e, t = 0, n = 0.5) {
  let o = _(r, "image", "rotateWithOffset", "float32");
  E(o.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${o.rank}.`);
  let s = { image: o }, a = { radians: e, fillValue: t, center: n };
  return T.runKernel(ma, s, a);
}
var tT = I({ rotateWithOffset_: tK });
function uo(r, e, t, n, o, s) {
  n == null && (n = 0.5), o == null && (o = Number.NEGATIVE_INFINITY), s == null && (s = 0);
  let a = r.shape[0];
  return t = Math.min(t, a), E(0 <= n && n <= 1, () => `iouThreshold must be in [0, 1], but was '${n}'`), E(r.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${r.rank}'`), E(r.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`), E(e.rank === 1, () => "scores must be a 1D tensor"), E(e.shape[0] === a, () => `scores has incompatible shape with boxes. Expected ${a}, but was ${e.shape[0]}`), E(0 <= s && s <= 1, () => `softNmsSigma must be in [0, 1], but was '${s}'`), { maxOutputSize: t, iouThreshold: n, scoreThreshold: o, softNmsSigma: s };
}
function rK(r, e, t, n = 0.5, o = Number.NEGATIVE_INFINITY) {
  let s = _(r, "boxes", "nonMaxSuppression"), a = _(e, "scores", "nonMaxSuppression"), i = uo(s, a, t, n, o);
  t = i.maxOutputSize, n = i.iouThreshold, o = i.scoreThreshold;
  let l = { maxOutputSize: t, iouThreshold: n, scoreThreshold: o };
  return T.runKernel(Qi, { boxes: s, scores: a }, l);
}
var rT = I({ nonMaxSuppression_: rK });
function nT(r, e, t) {
  let n = nK(r, e, t), o = n < 0 ? -(n + 1) : n;
  r.splice(o, 0, e);
}
function nK(r, e, t) {
  return sK(r, e, t || oK);
}
function oK(r, e) {
  return r > e ? 1 : r < e ? -1 : 0;
}
function sK(r, e, t) {
  let n = 0, o = r.length, s = 0, a = false;
  for (; n < o; ) {
    s = n + (o - n >>> 1);
    let i = t(e, r[s]);
    i > 0 ? n = s + 1 : (o = s, a = !i);
  }
  return a ? n : -n - 1;
}
function Rg(r, e, t, n, o) {
  return i_(r, e, t, n, o, 0);
}
function Fg(r, e, t, n, o, s) {
  return i_(r, e, t, n, o, 0, false, s, true);
}
function Og(r, e, t, n, o, s) {
  return i_(r, e, t, n, o, s, true);
}
function i_(r, e, t, n, o, s, a = false, i = false, l = false) {
  let u = [];
  for (let g = 0; g < e.length; g++)
    e[g] > o && u.push({ score: e[g], boxIndex: g, suppressBeginIndex: 0 });
  u.sort(oT);
  let c = s > 0 ? -0.5 / s : 0, p = [], m = [];
  for (; p.length < t && u.length > 0; ) {
    let g = u.pop(), { score: y, boxIndex: w, suppressBeginIndex: x } = g;
    if (y < o)
      break;
    let k = false;
    for (let C = p.length - 1; C >= x; --C) {
      let A = iK(r, w, p[C]);
      if (A >= n) {
        k = true;
        break;
      }
      if (g.score = g.score * aK(n, c, A), g.score <= o)
        break;
    }
    g.suppressBeginIndex = p.length, k || (g.score === y ? (p.push(w), m.push(g.score)) : g.score > o && nT(u, g, oT));
  }
  let f = p.length, d = t - f;
  i && d > 0 && (p.push(...new Array(d).fill(0)), m.push(...new Array(d).fill(0)));
  let h = { selectedIndices: p };
  return a && (h.selectedScores = m), l && (h.validOutputs = f), h;
}
function iK(r, e, t) {
  let n = r.subarray(e * 4, e * 4 + 4), o = r.subarray(t * 4, t * 4 + 4), s = Math.min(n[0], n[2]), a = Math.min(n[1], n[3]), i = Math.max(n[0], n[2]), l = Math.max(n[1], n[3]), u = Math.min(o[0], o[2]), c = Math.min(o[1], o[3]), p = Math.max(o[0], o[2]), m = Math.max(o[1], o[3]), f = (i - s) * (l - a), d = (p - u) * (m - c);
  if (f <= 0 || d <= 0)
    return 0;
  let h = Math.max(s, u), g = Math.max(a, c), y = Math.min(i, p), w = Math.min(l, m), x = Math.max(y - h, 0) * Math.max(w - g, 0);
  return x / (f + d - x);
}
function aK(r, e, t) {
  let n = Math.exp(e * t * t);
  return t <= r ? n : 0;
}
function oT(r, e) {
  return r.score - e.score || r.score === e.score && e.boxIndex - r.boxIndex;
}
async function lK(r, e, t, n = 0.5, o = Number.NEGATIVE_INFINITY) {
  let s = _(r, "boxes", "nonMaxSuppressionAsync"), a = _(e, "scores", "nonMaxSuppressionAsync"), i = uo(s, a, t, n, o);
  t = i.maxOutputSize, n = i.iouThreshold, o = i.scoreThreshold;
  let l = await Promise.all([s.data(), a.data()]), u = l[0], c = l[1], { selectedIndices: p } = Rg(u, c, t, n, o);
  return s !== r && s.dispose(), a !== e && a.dispose(), At(p, "int32");
}
var sT = lK;
function uK(r, e, t, n = 0.5, o = Number.NEGATIVE_INFINITY, s = 0) {
  let a = _(r, "boxes", "nonMaxSuppression"), i = _(e, "scores", "nonMaxSuppression"), l = uo(a, i, t, n, o, s);
  t = l.maxOutputSize, n = l.iouThreshold, o = l.scoreThreshold, s = l.softNmsSigma;
  let u = { boxes: a, scores: i }, c = { maxOutputSize: t, iouThreshold: n, scoreThreshold: o, softNmsSigma: s }, p = T.runKernel(ta, u, c);
  return { selectedIndices: p[0], selectedScores: p[1] };
}
var iT = I({ nonMaxSuppressionWithScore_: uK });
async function cK(r, e, t, n = 0.5, o = Number.NEGATIVE_INFINITY, s = 0) {
  let a = _(r, "boxes", "nonMaxSuppressionAsync"), i = _(e, "scores", "nonMaxSuppressionAsync"), l = uo(a, i, t, n, o, s);
  t = l.maxOutputSize, n = l.iouThreshold, o = l.scoreThreshold, s = l.softNmsSigma;
  let u = await Promise.all([a.data(), i.data()]), c = u[0], p = u[1], { selectedIndices: m, selectedScores: f } = Og(c, p, t, n, o, s);
  return a !== r && a.dispose(), i !== e && i.dispose(), { selectedIndices: At(m, "int32"), selectedScores: At(f) };
}
var aT = cK;
function pK(r, e, t, n = 0.5, o = Number.NEGATIVE_INFINITY, s = false) {
  let a = _(r, "boxes", "nonMaxSuppression"), i = _(e, "scores", "nonMaxSuppression"), l = uo(a, i, t, n, o, null), u = l.maxOutputSize, c = l.iouThreshold, p = l.scoreThreshold, m = { boxes: a, scores: i }, f = { maxOutputSize: u, iouThreshold: c, scoreThreshold: p, padToMaxOutputSize: s }, d = T.runKernel(ea, m, f);
  return { selectedIndices: d[0], validOutputs: d[1] };
}
var lT = I({ nonMaxSuppressionPadded_: pK });
async function mK(r, e, t, n = 0.5, o = Number.NEGATIVE_INFINITY, s = false) {
  let a = _(r, "boxes", "nonMaxSuppressionAsync"), i = _(e, "scores", "nonMaxSuppressionAsync"), l = uo(a, i, t, n, o, null), u = l.maxOutputSize, c = l.iouThreshold, p = l.scoreThreshold, [m, f] = await Promise.all([a.data(), i.data()]), { selectedIndices: d, validOutputs: h } = Fg(m, f, u, c, p, s);
  return a !== r && a.dispose(), i !== e && i.dispose(), { selectedIndices: At(d, "int32"), validOutputs: ce(h, "int32") };
}
var uT = mK;
function fK(r, e, t = false, n = false) {
  let o = _(r, "images", "resizeBilinear");
  E(o.rank === 3 || o.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${o.rank}.`), E(e.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${e}.`), E(n === false || t === false, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let s = o, a = false;
  o.rank === 3 && (a = true, s = O(o, [1, o.shape[0], o.shape[1], o.shape[2]]));
  let [] = e, i = { images: s }, l = { alignCorners: t, halfPixelCenters: n, size: e }, u = T.runKernel(os, i, l);
  return a ? O(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var cT = I({ resizeBilinear_: fK });
function dK(r, e, t = false, n = false) {
  let o = _(r, "images", "resizeNearestNeighbor");
  E(o.rank === 3 || o.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${o.rank}.`), E(e.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`), E(o.dtype === "float32" || o.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), E(n === false || t === false, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let s = o, a = false;
  o.rank === 3 && (a = true, s = O(o, [1, o.shape[0], o.shape[1], o.shape[2]]));
  let [] = e, i = { images: s }, l = { alignCorners: t, halfPixelCenters: n, size: e }, u = T.runKernel(ol, i, l);
  return a ? O(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var pT = I({ resizeNearestNeighbor_: dK });
function hK(r, e = "binary", t = false, n = 0.5) {
  let o = _(r, "image", "threshold"), s = 0.2989, a = 0.587, i = 0.114, l = o.shape[0] * o.shape[1], u = F(At([n]), 255), c, p, m, f;
  if (E(o.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${o.rank}.`), E(o.shape[2] === 3 || o.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${o.shape[2]}.`), E(o.dtype === "int32" || o.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${o.dtype}.`), E(e === "otsu" || e === "binary", () => `Method must be binary or otsu, but was ${e}`), o.shape[2] === 3) {
    [c, p, m] = mr(o, [1, 1, 1], -1);
    let g = F(c, s), y = F(p, a), w = F(m, i);
    f = Y(Y(g, y), w);
  } else
    f = r;
  if (e === "otsu") {
    let g = Hm(J(sf(f), "int32"), vr([]), 256);
    u = gK(g, l);
  }
  let d = t ? Hn(f, u) : Ht(f, u);
  return J(F(d, 255), "int32");
}
function gK(r, e) {
  let t = At([-1]), n = At([0]), o = At([0]), s, a, i, l, u, c;
  for (let p = 0; p < r.size - 1; p++) {
    s = Oe(r, 0, p + 1), a = Oe(r, p + 1), u = ue(me(s), e), c = ue(me(a), e);
    let m = me(F(s, Sa(0, s.size)));
    i = ue(m, me(s));
    let f = _s(a.shape, s.size), d = Y(Sa(0, a.size), f), h = F(a, d);
    l = ue(me(h), me(a));
    let g = le(i, l), y = le(i, l), w = F(u, c);
    o = F(F(w, g), y);
    let x = Ht(o, n);
    n = Et(x, o, n), t = Et(x, At([p]), t);
  }
  return t;
}
var mT = I({ threshold_: hK });
function xK(r, e, t = "nearest", n = "constant", o = 0, s) {
  let a = _(r, "image", "transform", "float32"), i = _(e, "transforms", "transform", "float32");
  E(a.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${a.rank}.`), E(i.rank === 2 && (i.shape[0] === a.shape[0] || i.shape[0] === 1) && i.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), E(s == null || s.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${s}.`);
  let l = { image: a, transforms: i }, u = { interpolation: t, fillMode: n, fillValue: o, outputShape: s };
  return T.runKernel(pa, l, u);
}
var fT = I({ transform_: xK });
function yK(r, e, t) {
  E(e % 1 == 0, () => `bandPart(): numLower must be an integer, got ${e}.`), E(t % 1 == 0, () => `bandPart(): numUpper must be an integer, got ${t}.`);
  let n = _(r, "a", "bandPart");
  E(n.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${n.rank}.`);
  let o = n.shape, [s, a] = n.shape.slice(-2);
  if (!(e <= s))
    throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${s}).`);
  if (!(t <= a))
    throw new Error(`bandPart(): numUpper (${t}) must not be greater than the number of columns (${a}).`);
  e < 0 && (e = s), t < 0 && (t = a);
  let i = O(Sa(0, s, 1, "int32"), [-1, 1]), l = Sa(0, a, 1, "int32"), u = le(i, l), c = Fr(Hn(u, ce(+e, "int32")), Un(u, ce(-t, "int32"))), p = ht([s, a], n.dtype);
  return O(nr(Nr(O(n, [-1, s, a])).map((m) => Et(c, m, p))), o);
}
var dT = I({ bandPart_: yK });
function bK(r) {
  let e;
  if (Array.isArray(r)) {
    e = false, E(r != null && r.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    let o = r[0].shape[0];
    for (let s = 1; s < r.length; ++s)
      E(r[s].shape[0] === o, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${o})`);
  } else
    e = true, r = mr(r, r.shape[0], 0).map((o) => en(o, [0]));
  E(r.length <= r[0].shape[0], () => `Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);
  let t = [], n = r;
  for (let o = 0; o < r.length; ++o)
    t.push(T.tidy(() => {
      let s = n[o];
      if (o > 0)
        for (let a = 0; a < o; ++a) {
          let i = F(me(F(t[a], s)), t[a]);
          s = le(s, i);
        }
      return ue(s, Ig(s, "euclidean"));
    }));
  return e ? nr(t, 0) : t;
}
var hT = I({ gramSchmidt_: bK });
function wK(r, e = false) {
  if (E(r.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`), r.rank === 2)
    return gT(r, e);
  {
    let t = r.shape.slice(0, r.shape.length - 2).reduce((l, u) => l * u), n = Nr(O(r, [t, r.shape[r.shape.length - 2], r.shape[r.shape.length - 1]]), 0), o = [], s = [];
    n.forEach((l) => {
      let [u, c] = gT(l, e);
      o.push(u), s.push(c);
    });
    let a = O(nr(o, 0), r.shape), i = O(nr(s, 0), r.shape);
    return [a, i];
  }
}
function gT(r, e = false) {
  return T.tidy(() => {
    E(r.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);
    let t = r.shape[0], n = r.shape[1], o = pp(t), s = hn(r), a = pi([[1]], [1, 1]), i = hn(a), l = t >= n ? n : t;
    for (let u = 0; u < l; ++u) {
      let c = s, p = i, m = o;
      [i, s, o] = T.tidy(() => {
        let f = Oe(s, [u, u], [t - u, 1]), d = Ig(f), h = Oe(s, [u, u], [1, 1]), g = Et(Ht(h, 0), pi([[-1]]), pi([[1]])), y = le(h, F(g, d)), w = ue(f, y);
        w.shape[0] === 1 ? i = hn(a) : i = tt([a, Oe(w, [1, 0], [w.shape[0] - 1, w.shape[1]])], 0);
        let x = Ke(ue(Me(g, y), d)), k = Oe(s, [u, 0], [t - u, n]), C = F(x, i), A = Ve(i);
        if (u === 0)
          s = le(k, Me(C, Me(A, k)));
        else {
          let P = le(k, Me(C, Me(A, k)));
          s = tt([Oe(s, [0, 0], [u, n]), P], 0);
        }
        let $ = Ve(C), R = Oe(o, [0, u], [t, o.shape[1] - u]);
        if (u === 0)
          o = le(R, Me(Me(R, i), $));
        else {
          let P = le(R, Me(Me(R, i), $));
          o = tt([Oe(o, [0, 0], [t, u]), P], 1);
        }
        return [i, s, o];
      }), Ae([c, p, m]);
    }
    return !e && t > n && (o = Oe(o, [0, 0], [t, n]), s = Oe(s, [0, 0], [n, n])), [o, s];
  });
}
var xT = I({ qr_: wK });
var qt;
(function(r) {
  r[r.NONE = 0] = "NONE", r[r.MEAN = 1] = "MEAN", r[r.SUM = 2] = "SUM", r[r.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(qt || (qt = {}));
function kK(r, e, t = qt.SUM_BY_NONZERO_WEIGHTS) {
  let n = _(r, "losses", "computeWeightedLoss"), o = null;
  e != null && (o = _(e, "weights", "computeWeightedLoss"));
  let s = o == null ? n : F(n, o);
  if (t === qt.NONE)
    return s;
  if (t === qt.SUM)
    return me(s);
  if (t === qt.MEAN) {
    if (o == null)
      return Ct(s);
    {
      let a = n.size / o.size, i = ue(me(s), me(o));
      return a > 1 ? ue(i, ce(a)) : i;
    }
  }
  if (t === qt.SUM_BY_NONZERO_WEIGHTS) {
    if (o == null)
      return ue(me(s), ce(n.size));
    {
      let a = F(o, rr(n.shape)), i = J(me(ci(a, ce(0))), "float32");
      return ue(me(s), i);
    }
  }
  throw Error(`Unknown reduction: ${t}`);
}
var Pr = I({ computeWeightedLoss_: kK });
function _K(r, e, t, n = qt.SUM_BY_NONZERO_WEIGHTS) {
  let o = _(r, "labels", "absoluteDifference"), s = _(e, "predictions", "absoluteDifference"), a = null;
  t != null && (a = _(t, "weights", "absoluteDifference")), $t(o.shape, s.shape, "Error in absoluteDifference: ");
  let i = Tt(le(o, s));
  return Pr(i, a, n);
}
var yT = I({ absoluteDifference_: _K });
function vK(r, e, t, n, o = qt.SUM_BY_NONZERO_WEIGHTS) {
  let s = _(r, "labels", "cosineDistance"), a = _(e, "predictions", "cosineDistance"), i = null;
  n != null && (i = _(n, "weights", "cosineDistance")), $t(s.shape, a.shape, "Error in cosineDistance: ");
  let l = ce(1), u = le(l, me(F(s, a), t, true));
  return Pr(u, i, o);
}
var bT = I({ cosineDistance_: vK });
function CK(r, e, t, n = qt.SUM_BY_NONZERO_WEIGHTS) {
  let o = _(r, "labels", "hingeLoss"), s = _(e, "predictions", "hingeLoss"), a = null;
  t != null && (a = _(t, "weights", "hingeLoss")), $t(o.shape, s.shape, "Error in hingeLoss: ");
  let i = ce(1);
  o = le(F(ce(2), o), i);
  let l = Or(le(i, F(o, s)));
  return Pr(l, a, n);
}
var wT = I({ hingeLoss_: CK });
function SK(r, e, t, n = 1, o = qt.SUM_BY_NONZERO_WEIGHTS) {
  let s = _(r, "labels", "huberLoss"), a = _(e, "predictions", "huberLoss"), i = null;
  t != null && (i = _(t, "weights", "huberLoss")), $t(s.shape, a.shape, "Error in huberLoss: ");
  let l = ce(n), u = Tt(le(a, s)), c = Ca(u, l), p = le(u, c), m = Y(F(ce(0.5), We(c)), F(l, p));
  return Pr(m, i, o);
}
var kT = I({ huberLoss_: SK });
function IK(r, e, t, n = 1e-7, o = qt.SUM_BY_NONZERO_WEIGHTS) {
  let s = _(r, "labels", "logLoss"), a = _(e, "predictions", "logLoss"), i = null;
  t != null && (i = _(t, "weights", "logLoss")), $t(s.shape, a.shape, "Error in logLoss: ");
  let l = ce(1), u = ce(n), c = Ke(F(s, Ir(Y(a, u)))), p = F(le(l, s), Ir(Y(le(l, a), u))), m = le(c, p);
  return Pr(m, i, o);
}
var _T = I({ logLoss_: IK });
function NK(r, e, t, n = qt.SUM_BY_NONZERO_WEIGHTS) {
  let o = _(r, "labels", "meanSquaredError"), s = _(e, "predictions", "meanSquaredError"), a = null;
  t != null && (a = _(t, "weights", "meanSquaredError")), $t(o.shape, s.shape, "Error in meanSquaredError: ");
  let i = df(o, s);
  return Pr(i, a, n);
}
var vT = I({ meanSquaredError_: NK });
function TK(r, e) {
  let t = _(r, "labels", "sigmoidCrossEntropyWithLogits"), n = _(e, "logits", "sigmoidCrossEntropyWithLogits");
  $t(t.shape, n.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  let o = Or(n), s = F(n, t), a = uu(tr(Ke(Tt(n))));
  return Y(le(o, s), a);
}
function EK(r, e, t, n = 0, o = qt.SUM_BY_NONZERO_WEIGHTS) {
  let s = _(r, "multiClassLabels", "sigmoidCrossEntropy"), a = _(e, "logits", "sigmoidCrossEntropy"), i = null;
  if (t != null && (i = _(t, "weights", "sigmoidCrossEntropy")), $t(s.shape, a.shape, "Error in sigmoidCrossEntropy: "), n > 0) {
    let u = ce(n), c = ce(1), p = ce(0.5);
    s = Y(F(s, le(c, u)), F(p, u));
  }
  let l = TK(s, a);
  return Pr(l, i, o);
}
var CT = I({ sigmoidCrossEntropy_: EK });
function AK(r, e, t = -1) {
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${t}`);
  return Qr((o, s, a) => {
    let l = Pk(s, [t], true), u = le(J(s, "float32"), l);
    a([o, u]);
    let c = Ke(F(u, o));
    return { value: me(c, [t]), gradFunc: (f, d) => {
      let [h, g] = d, y = ao(f.shape, [t]);
      return [F(O(f, y), le(J(h, "float32"), tr(g))), F(O(f, y), le(tr(g), J(h, "float32")))];
    } };
  })(r, e);
}
function $K(r, e, t, n = 0, o = qt.SUM_BY_NONZERO_WEIGHTS) {
  let s = _(r, "onehotLabels", "softmaxCrossEntropy"), a = _(e, "logits", "softmaxCrossEntropy"), i = null;
  if (t != null && (i = _(t, "weights", "softmaxCrossEntropy")), $t(s.shape, a.shape, "Error in softmaxCrossEntropy: "), n > 0) {
    let u = ce(n), c = ce(1), p = ce(s.shape[1]);
    s = Y(F(s, le(c, u)), ue(u, p));
  }
  let l = AK(s, a);
  return Pr(l, i, o);
}
var ST = I({ softmaxCrossEntropy_: $K });
function DK(r, e, t, n) {
  let o = _(r, "indices", "sparseFillEmptyRows"), s = _(e, "values", "sparseFillEmptyRows"), a = _(t, "denseShape", "sparseFillEmptyRows"), i = _(n, "defaultValue", "sparseFillEmptyRows", s.dtype);
  if (o.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${o.shape}`);
  if (s.rank !== 1)
    throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);
  if (a.rank !== 1)
    throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);
  if (i.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${i.shape}`);
  let l = { indices: o, values: s, denseShape: a, defaultValue: i }, u = T.runKernel(Vc, l);
  return { outputIndices: u[0], outputValues: u[1], emptyRowIndicator: u[2], reverseIndexMap: u[3] };
}
var IT = I({ sparseFillEmptyRows_: DK });
function RK(r, e, t) {
  let n = _(r, "inputIndices", "sparseReshape"), o = _(e, "inputShape", "sparseReshape"), s = _(t, "newShape", "sparseReshape");
  if (n.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${n.shape}`);
  if (o.rank !== 1)
    throw new Error(`Input shape should be Tensor1D but received shape ${o.shape}`);
  if (s.rank !== 1)
    throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);
  let a = { inputIndices: n, inputShape: o, newShape: s }, i = T.runKernel(Wc, a);
  return { outputIndices: i[0], outputShape: i[1] };
}
var NT = I({ sparseReshape_: RK });
function FK(r, e, t) {
  let n = _(r, "data", "sparseSegmentMean"), o = _(e, "indices", "sparseSegmentMean"), s = _(t, "segmentIds", "sparseSegmentMean");
  if (n.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${o.shape}`);
  if (s.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);
  let a = { data: n, indices: o, segmentIds: s };
  return T.runKernel(jc, a);
}
var TT = I({ sparseSegmentMean_: FK });
function OK(r, e, t) {
  let n = _(r, "data", "sparseSegmentSum"), o = _(e, "indices", "sparseSegmentSum"), s = _(t, "segmentIds", "sparseSegmentSum");
  if (n.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${o.shape}`);
  if (s.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);
  let a = { data: n, indices: o, segmentIds: s };
  return T.runKernel(Gc, a);
}
var ET = I({ sparseSegmentSum_: OK });
function PK(r, e, t, n, o, s, a, i) {
  let l = _(r, "data", "stringNGrams", "string");
  if (l.dtype !== "string")
    throw new Error("Data must be of datatype string");
  if (l.shape.length !== 1)
    throw new Error(`Data must be a vector, saw: ${l.shape}`);
  let u = _(e, "dataSplits", "stringNGrams");
  if (u.dtype !== "int32")
    throw new Error("Data splits must be of datatype int32");
  let c = { separator: t, nGramWidths: n, leftPad: o, rightPad: s, padWidth: a, preserveShortSequences: i }, p = { data: l, dataSplits: u }, m = T.runKernel(Hc, p, c);
  return { nGrams: m[0], nGramsSplits: m[1] };
}
var AT = I({ stringNGrams_: PK });
function MK(r, e, t = true) {
  let n = _(r, "input", "stringSplit", "string"), o = _(e, "delimiter", "stringSplit", "string");
  if (n.rank !== 1)
    throw new Error(`Input should be Tensor1D but received shape ${n.shape}`);
  if (o.rank !== 0)
    throw new Error(`Delimiter should be a scalar but received shape ${o.shape}`);
  let s = { skipEmpty: t }, a = { input: n, delimiter: o }, i = T.runKernel(qc, a, s);
  return { indices: i[0], values: i[1], shape: i[2] };
}
var $T = I({ stringSplit_: MK });
function LK(r, e) {
  let t = _(r, "input", "stringToHashBucketFast", "string"), n = { numBuckets: e };
  if (e <= 0)
    throw new Error("Number of buckets must be at least 1");
  let o = { input: t };
  return T.runKernel(Kc, o, n);
}
var DT = I({ stringToHashBucketFast_: LK });
var vRe = { fft: gu, ifft: fl, rfft: xu, irfft: ff };
var TRe = { hammingWindow: YN, hannWindow: $g, frame: Dg, stft: ZN };
var bn = { flipLeftRight: QN, grayscaleToRGB: eT, resizeNearestNeighbor: pT, resizeBilinear: cT, rotateWithOffset: tT, cropAndResize: JN, nonMaxSuppression: rT, nonMaxSuppressionAsync: sT, nonMaxSuppressionWithScore: iT, nonMaxSuppressionWithScoreAsync: aT, nonMaxSuppressionPadded: lT, nonMaxSuppressionPaddedAsync: uT, threshold: mT, transform: fT };
var RT = { bandPart: dT, gramSchmidt: hT, qr: xT };
var tFe = { absoluteDifference: yT, computeWeightedLoss: Pr, cosineDistance: bT, hingeLoss: wT, huberLoss: kT, logLoss: _T, meanSquaredError: vT, sigmoidCrossEntropy: CT, softmaxCrossEntropy: ST };
var gf = { sparseFillEmptyRows: IT, sparseReshape: NT, sparseSegmentMean: TT, sparseSegmentSum: ET };
var Pg = { stringNGrams: AT, stringSplit: $T, stringToHashBucketFast: DT };
var Wr = class extends hg {
  minimize(e, t = false, n) {
    let { value: o, grads: s } = this.computeGradients(e, n);
    if (n != null) {
      let a = n.map((i) => ({ name: i.name, tensor: s[i.name] }));
      this.applyGradients(a);
    } else
      this.applyGradients(s);
    return Ae(s), t ? o : (o.dispose(), null);
  }
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  computeGradients(e, t) {
    return yg(e, t);
  }
  dispose() {
    this.iterations_ != null && Ae(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), { name: "iter", tensor: ce(this.iterations_, "int32") };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(e) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  async extractIterations(e) {
    return this.iterations_ = (await e[0].tensor.data())[0], e.slice(1);
  }
};
Object.defineProperty(Wr, Symbol.hasInstance, { value: (r) => r.minimize != null && r.computeGradients != null && r.applyGradients != null });
var xp = class extends Wr {
  constructor(e, t, n = null) {
    super();
    this.learningRate = e, this.rho = t, this.epsilon = n, this.accumulatedGrads = [], this.accumulatedUpdates = [], n == null && (this.epsilon = T.backend.epsilon());
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, o) => {
      let s = T.registeredVariables[n], a = false;
      this.accumulatedGrads[o] == null && (this.accumulatedGrads[o] = { originalName: `${n}/accum_grad`, variable: z(() => Ie(s).variable(a)) }), this.accumulatedUpdates[o] == null && (this.accumulatedUpdates[o] = { originalName: `${n}/accum_var`, variable: z(() => Ie(s).variable(a)) });
      let i = Array.isArray(e) ? e[o].tensor : e[n];
      if (i == null)
        return;
      let l = this.accumulatedGrads[o].variable, u = this.accumulatedUpdates[o].variable;
      z(() => {
        let c = Y(F(l, this.rho), F(We(i), 1 - this.rho)), p = F(ue(St(Y(u, this.epsilon)), St(Y(l, this.epsilon))), i), m = Y(F(u, this.rho), F(We(p), 1 - this.rho));
        l.assign(c), u.assign(m);
        let f = Y(F(p, -this.learningRate), s);
        s.assign(f);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (Ae(this.accumulatedGrads.map((e) => e.variable)), Ae(this.accumulatedUpdates.map((e) => e.variable)));
  }
  async getWeights() {
    let e = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = e.length / 2, n = false;
    this.accumulatedGrads = e.slice(0, t).map((o) => ({ originalName: o.name, variable: o.tensor.variable(n) })), this.accumulatedUpdates = e.slice(t, t * 2).map((o) => ({ originalName: o.name, variable: o.tensor.variable(n) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.rho, t.epsilon);
  }
};
xp.className = "Adadelta";
gn(xp);
var yp = class extends Wr {
  constructor(e, t = 0.1) {
    super();
    this.learningRate = e, this.initialAccumulatorValue = t, this.accumulatedGrads = [];
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, o) => {
      let s = T.registeredVariables[n];
      if (this.accumulatedGrads[o] == null) {
        let l = false;
        this.accumulatedGrads[o] = { originalName: `${n}/accumulator`, variable: z(() => _s(s.shape, this.initialAccumulatorValue).variable(l)) };
      }
      let a = Array.isArray(e) ? e[o].tensor : e[n];
      if (a == null)
        return;
      let i = this.accumulatedGrads[o].variable;
      z(() => {
        let l = Y(i, We(a));
        i.assign(l);
        let u = Y(F(ue(a, St(Y(l, T.backend.epsilon()))), -this.learningRate), s);
        s.assign(u);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Ae(this.accumulatedGrads.map((e) => e.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = false;
    this.accumulatedGrads = e.map((n) => ({ originalName: n.name, variable: n.tensor.variable(t) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.initialAccumulatorValue);
  }
};
yp.className = "Adagrad";
gn(yp);
var bp = class extends Wr {
  constructor(e, t, n, o = null) {
    super();
    this.learningRate = e, this.beta1 = t, this.beta2 = n, this.epsilon = o, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], z(() => {
      this.accBeta1 = ce(t).variable(), this.accBeta2 = ce(n).variable();
    }), o == null && (this.epsilon = T.backend.epsilon());
  }
  applyGradients(e) {
    let t = Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e);
    z(() => {
      let n = le(1, this.accBeta1), o = le(1, this.accBeta2);
      t.forEach((s, a) => {
        let i = T.registeredVariables[s], l = false;
        this.accumulatedFirstMoment[a] == null && (this.accumulatedFirstMoment[a] = { originalName: `${s}/m`, variable: z(() => Ie(i).variable(l)) }), this.accumulatedSecondMoment[a] == null && (this.accumulatedSecondMoment[a] = { originalName: `${s}/v`, variable: z(() => Ie(i).variable(l)) });
        let u = Array.isArray(e) ? e[a].tensor : e[s];
        if (u == null)
          return;
        let c = this.accumulatedFirstMoment[a].variable, p = this.accumulatedSecondMoment[a].variable, m = Y(F(c, this.beta1), F(u, 1 - this.beta1)), f = Y(F(p, this.beta2), F(We(u), 1 - this.beta2)), d = ue(m, n), h = ue(f, o);
        c.assign(m), p.assign(f);
        let g = Y(F(ue(d, Y(St(h), this.epsilon)), -this.learningRate), i);
        i.assign(g);
      }), this.accBeta1.assign(F(this.accBeta1, this.beta1)), this.accBeta2.assign(F(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Ae(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedSecondMoment != null && Ae(this.accumulatedSecondMoment.map((e) => e.variable));
  }
  async getWeights() {
    let e = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e), z(() => {
      this.accBeta1.assign(yn(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(yn(this.beta2, this.iterations_ + 1));
    });
    let t = e.length / 2, n = false;
    this.accumulatedFirstMoment = e.slice(0, t).map((o) => ({ originalName: o.name, variable: o.tensor.variable(n) })), this.accumulatedSecondMoment = e.slice(t, t * 2).map((o) => ({ originalName: o.name, variable: o.tensor.variable(n) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon);
  }
};
bp.className = "Adam";
gn(bp);
var wp = class extends Wr {
  constructor(e, t, n, o = null, s = 0) {
    super();
    this.learningRate = e, this.beta1 = t, this.beta2 = n, this.epsilon = o, this.decay = s, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], z(() => {
      this.iteration = ce(0).variable(), this.accBeta1 = ce(t).variable();
    }), o == null && (this.epsilon = T.backend.epsilon());
  }
  applyGradients(e) {
    let t = Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e);
    z(() => {
      let n = le(1, this.accBeta1), o = ue(-this.learningRate, Y(F(this.iteration, this.decay), 1));
      t.forEach((s, a) => {
        let i = T.registeredVariables[s], l = false;
        this.accumulatedFirstMoment[a] == null && (this.accumulatedFirstMoment[a] = { originalName: `${s}/m`, variable: Ie(i).variable(l) }), this.accumulatedWeightedInfNorm[a] == null && (this.accumulatedWeightedInfNorm[a] = { originalName: `${s}/v`, variable: Ie(i).variable(l) });
        let u = Array.isArray(e) ? e[a].tensor : e[s];
        if (u == null)
          return;
        let c = this.accumulatedFirstMoment[a].variable, p = this.accumulatedWeightedInfNorm[a].variable, m = Y(F(c, this.beta1), F(u, 1 - this.beta1)), f = F(p, this.beta2), d = Tt(u), h = Rn(f, d);
        c.assign(m), p.assign(h);
        let g = Y(F(ue(o, n), ue(m, Y(h, this.epsilon))), i);
        i.assign(g);
      }), this.iteration.assign(Y(this.iteration, 1)), this.accBeta1.assign(F(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Ae(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedWeightedInfNorm != null && Ae(this.accumulatedWeightedInfNorm.map((e) => e.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(e) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay);
  }
};
wp.className = "Adamax";
gn(wp);
var dl = class extends Wr {
  constructor(e) {
    super();
    this.learningRate = e, this.setLearningRate(e);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, o) => {
      let s = Array.isArray(e) ? e[o].tensor : e[n];
      if (s == null)
        return;
      let a = T.registeredVariables[n];
      z(() => {
        let i = Y(F(this.c, s), a);
        a.assign(i);
      });
    }), this.incrementIterations();
  }
  setLearningRate(e) {
    this.learningRate = e, this.c != null && this.c.dispose(), this.c = Dt(ce(-e));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(e) {
    if (e = await this.extractIterations(e), e.length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate);
  }
};
dl.className = "SGD";
gn(dl);
var kp = class extends dl {
  constructor(e, t, n = false) {
    super(e);
    this.learningRate = e, this.momentum = t, this.useNesterov = n, this.accumulations = [], this.m = ce(this.momentum);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, o) => {
      let s = T.registeredVariables[n];
      if (this.accumulations[o] == null) {
        let l = false;
        this.accumulations[o] = { originalName: `${n}/momentum`, variable: z(() => Ie(s).variable(l)) };
      }
      let a = this.accumulations[o].variable, i = Array.isArray(e) ? e[o].tensor : e[n];
      i != null && z(() => {
        let l, u = Y(F(this.m, a), i);
        this.useNesterov ? l = Y(F(this.c, Y(i, F(u, this.m))), s) : l = Y(F(this.c, u), s), a.assign(u), s.assign(l);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Ae(this.accumulations.map((e) => e.variable));
  }
  setMomentum(e) {
    this.momentum = e;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = false;
    this.accumulations = e.map((n) => ({ originalName: n.name, variable: n.tensor.variable(t) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.momentum, t.useNesterov);
  }
};
kp.className = "Momentum";
gn(kp);
var _p = class extends Wr {
  constructor(e, t = 0.9, n = 0, o = null, s = false) {
    super();
    if (this.learningRate = e, this.decay = t, this.momentum = n, this.epsilon = o, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = s, o == null && (this.epsilon = T.backend.epsilon()), e == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((n) => n.name) : Object.keys(e)).forEach((n, o) => {
      let s = T.registeredVariables[n], a = false;
      this.accumulatedMeanSquares[o] == null && (this.accumulatedMeanSquares[o] = { originalName: `${n}/rms`, variable: z(() => Ie(s).variable(a)) }), this.accumulatedMoments[o] == null && (this.accumulatedMoments[o] = { originalName: `${n}/momentum`, variable: z(() => Ie(s).variable(a)) }), this.accumulatedMeanGrads[o] == null && this.centered && (this.accumulatedMeanGrads[o] = { originalName: `${n}/mg`, variable: z(() => Ie(s).variable(a)) });
      let i = Array.isArray(e) ? e[o].tensor : e[n];
      if (i == null)
        return;
      let l = this.accumulatedMeanSquares[o].variable, u = this.accumulatedMoments[o].variable;
      z(() => {
        let c = Y(F(l, this.decay), F(We(i), 1 - this.decay));
        if (this.centered) {
          let p = this.accumulatedMeanGrads[o].variable, m = Y(F(p, this.decay), F(i, 1 - this.decay)), f = ue(F(i, this.learningRate), St(le(c, Y(We(m), this.epsilon)))), d = Y(F(u, this.momentum), f);
          l.assign(c), p.assign(m), u.assign(d);
          let h = le(s, d);
          s.assign(h);
        } else {
          let p = Y(F(l, this.decay), F(We(i), 1 - this.decay)), m = Y(F(u, this.momentum), ue(F(i, this.learningRate), St(Y(p, this.epsilon))));
          l.assign(p), u.assign(m);
          let f = le(s, m);
          s.assign(f);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Ae(this.accumulatedMeanSquares.map((e) => e.variable)), this.accumulatedMeanGrads != null && this.centered && Ae(this.accumulatedMeanGrads.map((e) => e.variable)), this.accumulatedMoments != null && Ae(this.accumulatedMoments.map((e) => e.variable));
  }
  async getWeights() {
    let e = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && e.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = this.centered ? e.length / 3 : e.length / 2, n = false;
    this.accumulatedMeanSquares = e.slice(0, t).map((o) => ({ originalName: o.name, variable: o.tensor.variable(n) })), this.accumulatedMoments = e.slice(t, t * 2).map((o) => ({ originalName: o.name, variable: o.tensor.variable(n) })), this.centered && (this.accumulatedMeanGrads = e.slice(t * 2, t * 3).map((o) => ({ originalName: o.name, variable: o.tensor.variable(n) })));
  }
  getConfig() {
    return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered);
  }
};
_p.className = "RMSProp";
gn(_p);
var Na = class {
  static sgd(e) {
    return new dl(e);
  }
  static momentum(e, t, n = false) {
    return new kp(e, t, n);
  }
  static rmsprop(e, t = 0.9, n = 0, o = null, s = false) {
    return new _p(e, t, n, o, s);
  }
  static adam(e = 1e-3, t = 0.9, n = 0.999, o = null) {
    return new bp(e, t, n, o);
  }
  static adadelta(e = 1e-3, t = 0.95, n = null) {
    return new xp(e, t, n);
  }
  static adamax(e = 2e-3, t = 0.9, n = 0.999, o = null, s = 0) {
    return new wp(e, t, n, o, s);
  }
  static adagrad(e, t = 0.1) {
    return new yp(e, t);
  }
};
var vu = { sgd: Na.sgd, momentum: Na.momentum, adadelta: Na.adadelta, adagrad: Na.adagrad, rmsprop: Na.rmsprop, adamax: Na.adamax, adam: Na.adam };
var zK = (() => typeof requestAnimationFrame != "undefined" ? requestAnimationFrame : typeof setImmediate != "undefined" ? setImmediate : (r) => r())();
function xf() {
  return new Promise((r) => zK(() => r()));
}
var S = {};
He(S, { ERF_A1: () => YK, ERF_A2: () => ZK, ERF_A3: () => JK, ERF_A4: () => QK, ERF_A5: () => e6, ERF_P: () => XK, PARALLELIZE_THRESHOLD: () => Mg, SELU_SCALE: () => l_, SELU_SCALEALPHA: () => a_, applyActivation: () => ku, assertAndGetBroadcastShape: () => Le, assertAxesAreInnerMostDims: () => zU, assertParamsConsistent: () => BK, assignToTypedArray: () => i6, axesAreInnerMostDims: () => Rk, calculateShapes: () => aN, checkEinsumDimSizes: () => m6, combineLocations: () => SN, complexWithEvenIndex: () => n6, complexWithOddIndex: () => o6, computeConv2DInfo: () => tu, computeConv3DInfo: () => _N, computeDefaultPad: () => pk, computeDilation2DInfo: () => s4, computeOptimalWindowSize: () => WK, computeOutAndReduceShapes: () => Fk, computeOutShape: () => VK, computePool2DInfo: () => ck, computePool3DInfo: () => i4, convertConv2DDataFormat: () => vN, decodeEinsumEquation: () => c6, eitherStridesOrDilationsAreOne: () => Cr, expandShapeToKeepDim: () => ao, exponent: () => l6, exponents: () => a6, fromStringArrayToUint8: () => k6, fromUint8ToStringArray: () => w6, getAxesPermutation: () => Ok, getBroadcastDims: () => Y4, getComplexWithIndex: () => s6, getEinsumComputePath: () => f6, getEinsumPermutation: () => p6, getFusedBiasGradient: () => wu, getFusedDyActivation: () => bu, getImageCenter: () => jK, getInnerMostAxes: () => BU, getPermuted: () => UK, getReductionAxes: () => wt, getReshaped: () => GK, getReshapedPermuted: () => HK, getSliceBeginCoords: () => qK, getSliceSize: () => KK, getUndoAxesPermutation: () => ef, isIdentityPermutation: () => d6, log: () => wj, mergeRealAndImagArrays: () => t6, prepareAndValidate: () => iN, prepareSplitSize: () => g6, segment_util: () => c_, shouldFuse: () => _u, slice_util: () => ar, splitRealAndImagArrays: () => r6, tupleValuesAreOne: () => Gn, upcastType: () => pr, validateInput: () => mg, validateUpdateShape: () => Xw, warn: () => Vn });
function BK(r, e) {
  let t = r[0].length;
  r.forEach((o, s) => {
    E(o.length === t, () => `Error in concat${t}D: rank of tensors[${s}] must be the same as the rank of the rest (${t})`);
  }), E(e >= 0 && e < t, () => `Error in concat${t}D: axis must be between 0 and ${t - 1}.`);
  let n = r[0];
  r.forEach((o, s) => {
    for (let a = 0; a < t; a++)
      E(a === e || o[a] === n[a], () => `Error in concat${t}D: Shape of tensors[${s}] (${o}) does not match the shape of the rest (${n}) along the non-concatenated axis ${s}.`);
  });
}
function VK(r, e) {
  let t = r[0].slice();
  for (let n = 1; n < r.length; n++)
    t[e] += r[n][e];
  return t;
}
var Mg = 30;
function WK(r) {
  return r <= Mg ? r : dc(r, Math.floor(Math.sqrt(r)));
}
function jK(r, e, t) {
  let n = t * (typeof r == "number" ? r : r[0]), o = e * (typeof r == "number" ? r : r[1]);
  return [n, o];
}
function GK(r, e, t, n = true) {
  let o = [];
  if (n)
    o = o.concat(e.slice(0)), o.push(r[0] / t), o = o.concat(r.slice(1));
  else {
    o = o.concat(r[0]);
    let s = e.length;
    for (let a = 0; a < s; ++a)
      o = o.concat([r[a + 1] / e[a], e[a]]);
    o = o.concat(r.slice(s + 1));
  }
  return o;
}
function UK(r, e, t = true) {
  let n = [];
  if (t) {
    n.push(e);
    for (let o = e + 1; o < r; ++o)
      o <= 2 * e ? (n.push(o), n.push(o - (e + 1))) : n.push(o);
  } else {
    let o = [], s = [];
    for (let a = 1; a < r; ++a)
      a >= e * 2 + 1 || a % 2 == 1 ? s.push(a) : o.push(a);
    n.push(...o), n.push(0), n.push(...s);
  }
  return n;
}
function HK(r, e, t, n = true) {
  let o = [];
  n ? o.push(r[0] / t) : o.push(r[0] * t);
  for (let s = 1; s < r.length; ++s)
    s <= e.length ? n ? o.push(e[s - 1] * r[s]) : o.push(r[s] / e[s - 1]) : o.push(r[s]);
  return o;
}
function qK(r, e) {
  let t = [0];
  for (let n = 0; n < e; ++n)
    t.push(r[n][0]);
  return t;
}
function KK(r, e, t) {
  let n = r.slice(0, 1);
  for (let o = 0; o < t; ++o)
    n.push(r[o + 1] - e[o][0] - e[o][1]);
  return n;
}
var a_ = 1.7580993408473768;
var l_ = 1.0507009873554805;
var XK = 0.3275911;
var YK = 0.254829592;
var ZK = -0.284496736;
var JK = 1.421413741;
var QK = -1.453152027;
var e6 = 1.061405429;
function t6(r, e) {
  if (r.length !== e.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${e.length}.`);
  let t = new Float32Array(r.length * 2);
  for (let n = 0; n < t.length; n += 2)
    t[n] = r[n / 2], t[n + 1] = e[n / 2];
  return t;
}
function r6(r) {
  let e = new Float32Array(r.length / 2), t = new Float32Array(r.length / 2);
  for (let n = 0; n < r.length; n += 2)
    e[n / 2] = r[n], t[n / 2] = r[n + 1];
  return { real: e, imag: t };
}
function n6(r) {
  let e = Math.ceil(r.length / 4), t = new Float32Array(e), n = new Float32Array(e);
  for (let o = 0; o < r.length; o += 4)
    t[Math.floor(o / 4)] = r[o], n[Math.floor(o / 4)] = r[o + 1];
  return { real: t, imag: n };
}
function o6(r) {
  let e = Math.floor(r.length / 4), t = new Float32Array(e), n = new Float32Array(e);
  for (let o = 2; o < r.length; o += 4)
    t[Math.floor(o / 4)] = r[o], n[Math.floor(o / 4)] = r[o + 1];
  return { real: t, imag: n };
}
function s6(r, e) {
  let t = r[e * 2], n = r[e * 2 + 1];
  return { real: t, imag: n };
}
function i6(r, e, t, n) {
  r[n * 2] = e, r[n * 2 + 1] = t;
}
function a6(r, e) {
  let t = new Float32Array(r / 2), n = new Float32Array(r / 2);
  for (let o = 0; o < Math.ceil(r / 2); o++) {
    let s = (e ? 2 : -2) * Math.PI * (o / r);
    t[o] = Math.cos(s), n[o] = Math.sin(s);
  }
  return { real: t, imag: n };
}
function l6(r, e, t) {
  let n = (t ? 2 : -2) * Math.PI * (r / e), o = Math.cos(n), s = Math.sin(n);
  return { real: o, imag: s };
}
var u_ = "->";
var u6 = /->/g;
var FT = ",";
var OT = "...";
function c6(r, e) {
  r = r.replace(/\s/g, "");
  let t = (r.length - r.replace(u6, "").length) / u_.length;
  if (t < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (t > 1)
    throw new Error(`Equation must contain exactly one arrow ("${u_}").`);
  let [n, o] = r.split(u_);
  E(n.indexOf(OT) === -1, () => `The ellipsis notation ("${OT}") is not supported yet.`);
  let s = n.split(FT), a = s.length;
  if (e !== a)
    throw new Error(`Expected ${a} input tensors, received ${e}`);
  if (a > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  let i = [];
  for (let m = 0; m < o.length; ++m) {
    let f = o[m];
    if (!s.some((d) => d.indexOf(f) !== -1))
      throw new Error(`Output subscripts contain the label ${f} not present in the input subscripts.`);
    i.indexOf(f) === -1 && i.push(f);
  }
  for (let m = 0; m < n.length; ++m) {
    let f = n[m];
    i.indexOf(f) === -1 && f !== FT && i.push(f);
  }
  let l = new Array(s.length);
  for (let m = 0; m < a; ++m) {
    if (new Set(s[m].split("")).size !== s[m].length)
      throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);
    l[m] = [];
    for (let f = 0; f < s[m].length; ++f)
      l[m].push(i.indexOf(s[m][f]));
  }
  let u = i.length, c = o.length, p = [];
  for (let m = c; m < u; ++m)
    p.push(m);
  return { allDims: i, summedDims: p, idDims: l };
}
function p6(r, e) {
  let t = new Array(r);
  t.fill(-1);
  for (let o = 0; o < e.length; ++o)
    t[e[o]] = o;
  let n = [];
  for (let o = 0; o < r; ++o)
    t[o] === -1 && n.push(o);
  return t = t.filter((o) => o !== -1), { permutationIndices: t, expandDims: n };
}
function m6(r, e, t) {
  let n = new Array(r);
  for (let o = 0; o < t.length; ++o) {
    let s = t[o].shape;
    for (let a = 0; a < e[o].length; ++a)
      n[e[o][a]] === void 0 ? n[e[o][a]] = s[a] : E(n[e[o][a]] === s[a], () => `Expected dimension ${n[e[o][a]]} at axis ${a} of input shaped ${JSON.stringify(s)}, but got dimension ${s[a]}`);
  }
}
function f6(r, e) {
  let t = r, n = [], o = 0;
  r.length === 0 && t.push(-1), o = r.length + 1;
  for (let a = 0; a < o; ++a)
    n.push([]);
  let s = [];
  for (let a = 0; a < t.length; ++a) {
    let i = t[a], l = h6(e, i);
    for (let u of l)
      s.indexOf(u) === -1 && (n[a].push(u), s.push(u));
  }
  return { path: t, steps: n };
}
function d6(r) {
  return r.every((e, t) => e === t);
}
function h6(r, e) {
  let t = [];
  for (let n = 0; n < r.length; ++n)
    (r[n].length === 0 || r[n].indexOf(e) !== -1 || e === -1) && t.push(n);
  return t;
}
function g6(r, e, t = 0) {
  let n = [];
  if (typeof e == "number")
    E(r.shape[t] % e == 0, () => "Number of splits must evenly divide the axis."), n = new Array(e).fill(r.shape[t] / e);
  else {
    let o = e.reduce((a, i) => (i === -1 && (a += 1), a), 0);
    E(o <= 1, () => "There should be only one negative value in split array.");
    let s = e.indexOf(-1);
    if (s !== -1) {
      let a = e.reduce((i, l) => l > 0 ? i + l : i);
      e[s] = r.shape[t] - a;
    }
    E(r.shape[t] === e.reduce((a, i) => a + i), () => "The sum of sizes must match the size of the axis dimension."), n = e;
  }
  return n;
}
var c_ = {};
He(c_, { collectGatherOpShapeInfo: () => b6, computeOutShape: () => y6, segOpComputeOptimalWindowSize: () => x6 });
function x6(r, e) {
  let t = false, n;
  for (r <= Mg ? (n = r, t = true) : n = dc(r, Math.floor(Math.sqrt(r))); !t; )
    n > e || n === r ? t = true : n = dc(r, n + 1);
  return n;
}
function y6(r, e, t) {
  let n = [], o = r.length;
  for (let s = 0; s < o; s++)
    s !== e ? n.push(r[s]) : n.push(t);
  return n;
}
function b6(r, e, t, n) {
  let o = e.shape.length, s = r.shape.length;
  if (n !== 0 && (n < -o || n > o))
    throw new Error(`Expect batchDims in the range of [-${o}, ${o}], but got ${n}`);
  if (n < 0 && (n += o), n > s)
    throw new Error(`batchDims (${n}) must be less than rank(x) (
    ${s}).`);
  if (t < n)
    throw new Error(`batchDims (${n}) must be less than or equal to axis (${t}).`);
  for (let p = 0; p < n; ++p)
    if (r.shape[p] !== e.shape[p])
      throw new Error(`x.shape[${p}]: ${r.shape[p]} should be equal to indices.shape[${p}]: ${e.shape[p]}.`);
  let a = r.shape[t], i = [], l = 1, u = 1, c = 1;
  for (let p = 0; p < n; ++p)
    i.push(r.shape[p]), l *= r.shape[p];
  for (let p = n; p < t; p++)
    i.push(r.shape[p]), u *= r.shape[p];
  for (let p = n; p < o; p++)
    i.push(e.shape[p]);
  for (let p = t + 1; p < s; p++)
    i.push(r.shape[p]), c *= r.shape[p];
  return { batchSize: l, sliceSize: c, outerSize: u, dimSize: a, outputShape: i };
}
function w6(r) {
  try {
    return r.map((e) => ep(e));
  } catch (e) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`);
  }
}
function k6(r) {
  return r.map((e) => ll(e));
}
var Mr = {};
He(Mr, { nonMaxSuppressionV3Impl: () => Rg, nonMaxSuppressionV4Impl: () => Fg, nonMaxSuppressionV5Impl: () => Og, whereImpl: () => Sg });
var Lg = { kernelName: Vs, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(r, Ia(J(t, "float32"), -1)) };
} };
var PT = { kernelName: Ni, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => {
    let n = We(J(t, "float32")), o = St(le(ce(1), n));
    return Ke(ue(r, o));
  } };
} };
var MT = { kernelName: Ti, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => {
    let n = St(le(We(J(t, "float32")), 1));
    return ue(r, n);
  } };
} };
var LT = { kernelName: Wn, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e, o = Le(t.shape, n.shape);
  return { a: () => {
    let i = r, l = wt(t.shape, o);
    return l.length > 0 && (i = me(i, l)), O(i, t.shape);
  }, b: () => {
    let i = r, l = wt(n.shape, o);
    return l.length > 0 && (i = me(i, l)), O(i, n.shape);
  } };
} };
var zT = { kernelName: So, saveAllInputs: true, gradFunc: (r, e) => {
  let t = {};
  return e.forEach((n, o) => {
    t[o] = () => r.clone();
  }), t;
} };
var BT = { kernelName: Io, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => Ie(t) };
} };
var VT = { kernelName: Xa, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => Ie(t) };
} };
var WT = { kernelName: $i, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => ue(r, St(le(ce(1), We(J(t, "float32"))))) };
} };
var jT = { kernelName: Di, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => {
    let n = St(Y(ce(1), We(J(t, "float32"))));
    return ue(r, n);
  } };
} };
var GT = { kernelName: Oi, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e, o = Le(t.shape, n.shape);
  return { a: () => {
    let i = Y(We(t), We(n)), l = F(r, ue(n, i)), u = wt(t.shape, o);
    return u.length > 0 && (l = me(l, u)), O(l, t.shape);
  }, b: () => {
    let i = Y(We(t), We(n)), l = Ke(F(r, ue(t, i))), u = wt(n.shape, o);
    return u.length > 0 && (l = me(l, u)), O(l, n.shape);
  } };
} };
var UT = { kernelName: Ri, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => ue(r, Y(We(J(t, "float32")), 1)) };
} };
var HT = { kernelName: Fi, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => ue(r, le(ce(1), We(J(t, "float32")))) };
} };
function _6(r, e, t, n, o, s) {
  let a = _(r, "dy", "avgPool3dGrad"), i = _(e, "input", "avgPool3dGrad"), l = a, u = i, c = false;
  i.rank === 4 && (c = true, l = O(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]]), u = O(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), E(l.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), E(u.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`), s != null && E(ot(o), () => `Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${s} but got pad ${o}.`);
  let p = { dy: l, input: u }, m = { filterSize: t, strides: n, pad: o, dimRoundingMode: s }, f = T.runKernel(xc, p, m);
  return c ? O(f, [f.shape[1], f.shape[2], f.shape[3], f.shape[4]]) : f;
}
var qT = I({ avgPool3dGrad_: _6 });
var KT = { kernelName: Ya, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let [n] = e, { filterSize: o, strides: s, pad: a, dimRoundingMode: i } = t;
  return { x: () => qT(r, n, o, s, a, i) };
} };
function v6(r, e, t, n, o) {
  let s = _(r, "dy", "avgPoolGrad"), a = _(e, "input", "avgPoolGrad");
  E(a.rank === s.rank, () => `Rank of input (${a.rank}) does not match rank of dy (${s.rank})`);
  let i = a, l = s, u = false;
  a.rank === 3 && (u = true, i = O(a, [1, a.shape[0], a.shape[1], a.shape[2]]), l = O(s, [1, s.shape[0], s.shape[1], s.shape[2]])), E(l.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`), E(i.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);
  let c = { dy: l, input: i }, p = { filterSize: t, strides: n, pad: o }, m = T.runKernel(gc, c, p);
  return u ? O(m, [m.shape[1], m.shape[2], m.shape[3]]) : m;
}
var XT = I({ avgPoolGrad_: v6 });
var YT = { kernelName: No, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let [n] = e, { filterSize: o, strides: s, pad: a } = t;
  return { x: () => XT(r, n, o, s, a) };
} };
var ZT = { kernelName: To, inputsToSave: ["a", "b"], gradFunc: (r, e, t) => {
  let [n, o] = e, { transposeA: s, transposeB: a } = t;
  return !s && !a ? { a: () => Me(r, o, false, true), b: () => Me(n, r, true, false) } : !s && a ? { a: () => Me(r, o, false, false), b: () => Me(r, n, true, false) } : s && !a ? { a: () => Me(o, r, false, true), b: () => Me(n, r, false, false) } : { a: () => Me(o, r, true, true), b: () => Me(r, n, true, true) };
} };
var JT = { kernelName: Ws, gradFunc: (r, e, t) => {
  let { blockShape: n, crops: o } = t;
  return { x: () => mu(r, n, o) };
} };
var QT = { kernelName: XI, gradFunc: (r, e, t) => {
  let n = t, o = n.inputShape, s = n.shape, a = Array.from(s);
  for (let l = o.length - 1; l >= 0; l--)
    if (o[l] === s[l])
      a[l] = 1;
    else if (o[l] !== 1)
      throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${s}].`);
  let i = [];
  for (let l = 0; l < a.length; l++)
    a[l] > 1 && i.push(l);
  return { x: () => me(r, i, true) };
} };
var e2 = { kernelName: Qn, gradFunc: (r) => ({ x: () => r.clone() }) };
var t2 = { kernelName: Eo, gradFunc: (r) => ({ x: () => Ie(r) }) };
var r2 = { kernelName: eo, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let [n] = e, { clipValueMin: o, clipValueMax: s } = t;
  return { x: () => Et(Fr(Un(n, o), Hn(n, s)), r, Ie(r)) };
} };
var n2 = { kernelName: Za, inputsToSave: ["x"], gradFunc: Lg.gradFunc };
var o2 = { kernelName: js, saveAllInputs: true, gradFunc: (r, e, t) => {
  let n = e.map((l) => l.shape), { axis: o } = t, s = ir(o, e[0].shape)[0], a = n.map((l) => l[s]);
  return mr(r, a, s).map((l) => () => l);
} };
var s2 = { kernelName: Ao, inputsToSave: ["x", "filter"], gradFunc: (r, e, t) => {
  let [n, o] = e, { dilations: s, strides: a, pad: i, dataFormat: l } = t;
  return E(Gn(s), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`), { x: () => cp(n.shape, r, o, a, i, l), filter: () => gp(n, r, o.shape, a, i, l) };
} };
var i2 = { kernelName: $o, inputsToSave: ["dy", "filter"], gradFunc: (r, e, t) => {
  let [n, o] = e, { strides: s, pad: a, dataFormat: i, dimRoundingMode: l } = t;
  return { dy: () => Dn(r, o, s, a, i, 1, l), filter: () => gp(r, n, o.shape, s, a, i, l) };
} };
function C6(r, e, t, n, o) {
  let s = r;
  r.rank === 4 && (s = O(r, [1, r.shape[0], r.shape[1], r.shape[2], r.shape[3]]));
  let a = e;
  a.rank === 4 && (a = O(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]])), E(s.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`), E(a.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${a.shape}.`), E(t.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${t}.`), E(s.shape[4] === t[3], () => `Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${t[3]}.`), E(a.shape[4] === t[4], () => `Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${t[4]}).`);
  let i = { x: s, dy: a }, l = { strides: n, pad: o, filterShape: t };
  return T.runKernel(kc, i, l);
}
var a2 = I({ conv3DBackpropFilter_: C6 });
var l2 = { kernelName: Ja, inputsToSave: ["x", "filter"], gradFunc: (r, e, t) => {
  let { dilations: n, strides: o, pad: s } = t;
  E(Gn(n), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${n}'`);
  let [a, i] = e;
  return { x: () => xg(a.shape, r, i, o, s), filter: () => a2(a, r, i.shape, o, s) };
} };
var u2 = { kernelName: Do, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(Ke(uf(J(t, "float32"))), r) };
} };
var c2 = { kernelName: Ro, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(cf(J(t, "float32")), r) };
} };
var p2 = { kernelName: Fo, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let [n] = e, { axis: o, exclusive: s, reverse: a } = t;
  return { x: () => {
    let i = Ok([o], n.rank), l = Zm(r, o, s, !a);
    return i != null && (l = Ve(l, i)), l;
  } };
} };
var m2 = { kernelName: Oo, inputsToSave: ["x", "filter"], gradFunc: (r, e, t) => {
  let { dilations: n, strides: o, pad: s, dimRoundingMode: a } = t, i = n == null ? [1, 1] : n;
  E(Gn(i), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);
  let [l, u] = e;
  return E(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`), E(u.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`), E(l.shape[3] === u.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`), E(Cr(o, i), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${o} and dilations '${i}'.`), a != null && E(ot(s), () => `Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`), { x: () => Ag(l.shape, r, u, o, s, i, a), filter: () => Eg(l, r, u.shape, o, s, i, a) };
} };
var f2 = { kernelName: Qa, inputsToSave: ["x", "filter"], gradFunc: (r, e, t) => {
  let [n, o] = e, s = { x: n, filter: o, dy: r }, a = { x: n, filter: o, dy: r };
  return { x: () => T.runKernel($m, s, t), filter: () => T.runKernel(Dm, a, t) };
} };
var d2 = { kernelName: Mo, outputsToSave: [true], gradFunc: (r, e) => {
  let [t] = e, n = { dy: r, y: t };
  return { x: () => T.runKernel(Tc, n) };
} };
var h2 = { kernelName: Li, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e, n = F(tr(Ke(We(t))), 2 / Math.sqrt(Math.PI));
  return { x: () => F(r, n) };
} };
var g2 = { kernelName: Lo, outputsToSave: [true], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(r, t) };
} };
var x2 = { kernelName: Gs, inputsToSave: ["input"], gradFunc: (r, e) => {
  let [t] = e;
  return { input: () => O(r, t.shape) };
} };
var y2 = { kernelName: Bi, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(r, tr(t)) };
} };
var b2 = { kernelName: zo, gradFunc: (r) => ({ x: () => Ie(r) }) };
var w2 = { kernelName: Bo, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e, o = Le(t.shape, n.shape);
  return { a: () => {
    let i = ue(r, J(n, "float32")), l = wt(t.shape, o);
    return l.length > 0 ? O(me(i, l), t.shape) : i;
  }, b: () => {
    let i = F(r, J(t, "float32")), l = wt(n.shape, o);
    l.length > 0 && (i = O(me(i, l), n.shape));
    let u = We(n);
    return Ke(ue(i, J(u, "float32")));
  } };
} };
var k2 = { kernelName: Vo, inputsToSave: ["x", "mean", "variance", "scale"], gradFunc: (r, e, t) => {
  let { varianceEpsilon: n } = t, [o, s, a, i] = e, l = i == null ? ce(1) : i, u = wt(s.shape, o.shape), c = [];
  if (s.rank === 1) {
    for (let k = 0; k < o.shape.length - 1; ++k)
      c.push(o.shape[k]);
    c.push(1);
  }
  let p = le(o, s), m = F(r, l), f = af(Y(a, ce(n))), d = F(F(F(f, f), f), ce(-0.5));
  return { x: () => s.rank === 1 ? O(F(F(r, Rr(O(f, [1, 1, 1, s.shape[0]]), c)), l), o.shape) : O(F(F(r, f), l), o.shape), mean: () => {
    let k = F(F(f, ce(-1)), m);
    return s.rank === 1 && (k = me(k, u)), O(k, s.shape);
  }, variance: () => {
    let k = F(F(d, p), m);
    return s.rank === 1 && (k = me(k, u)), O(k, s.shape);
  }, scale: () => {
    let k = F(p, f), C = F(r, k);
    return s.rank === 1 && (C = me(C, u)), O(C, s.shape);
  }, offset: () => {
    let k = r;
    return s.rank === 1 && (k = me(k, u)), O(k, s.shape);
  } };
} };
var _2 = { kernelName: Us, inputsToSave: ["x", "indices"], gradFunc: (r, e, t) => {
  let [n, o] = e, { axis: s } = t, a = ir(s, n.shape)[0];
  return { x: () => {
    let l = n.shape, u = o.size, c = l.slice(0, a), p = c.length, m = l.slice(s, l.length).slice(1), f = m.length, d = v2(0, p), h = v2(p + 1, p + 1 + f), g = C2([c, [u], m]), y = O(r, g), w = O(o, [u]), x = C2([[p], d, h]), k = Ve(y, x), C = o_(k, w, n.shape[a]), A = ef(x);
    return C = Ve(C, A), C;
  }, indices: () => o };
} };
function v2(r, e) {
  let t = [];
  for (let n = r; n < e; ++n)
    t.push(n);
  return t;
}
function C2(r) {
  let e = [];
  for (let t = 0; t < r.length; ++t)
    for (let n = 0; n < r[t].length; ++n)
      e.push(r[t][n]);
  return e;
}
var S2 = { kernelName: Wo, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e;
  return { a: () => Ie(t), b: () => Ie(n) };
} };
var I2 = { kernelName: to, gradFunc: (r) => ({ x: () => J(r, "float32") }) };
var N2 = { kernelName: Gi, gradFunc: (r) => ({ x: () => Ie(r) }) };
var T2 = { kernelName: Ui, gradFunc: (r) => ({ x: () => Ie(r) }) };
var E2 = { kernelName: Hi, gradFunc: (r) => ({ x: () => Ie(r) }) };
var A2 = { kernelName: jo, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let [n] = e, { alpha: o } = t, s = Ht(n, 0);
  return { x: () => Et(s, r, F(r, o)) };
} };
var $2 = { kernelName: Xi, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => ue(r, Y(t, 1)) };
} };
var D2 = { kernelName: Go, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => ue(r, J(t, "float32")) };
} };
var R2 = { kernelName: YI, inputsToSave: [], outputsToSave: [true], gradFunc: (r, e, t) => {
  let [n] = e, { axis: o } = t;
  return { logits: () => {
    let s = true, a = tr(n);
    return le(r, F(me(r, o, s), a));
  } };
} };
function S6(r, e, t, n = 5, o = 1, s = 1, a = 0.5) {
  let i = { x: r, y: e, dy: t }, l = { depthRadius: n, bias: o, alpha: s, beta: a };
  return T.runKernel(Rc, i, l);
}
var F2 = I({ localResponseNormalizationBackprop_: S6 });
var O2 = { kernelName: tl, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (r, e, t) => {
  let [n, o] = e, { depthRadius: s, bias: a, alpha: i, beta: l } = t;
  return { x: () => F2(n, o, r, s, a, i, l) };
} };
function zg(r, e, t, n) {
  return e.rank < t.rank && (e = O(e, ao(e.shape, n))), r.rank < t.rank && (r = O(r, ao(r.shape, n))), { x: () => F(r, J(Dr(t, e), r.dtype)) };
}
var p_ = { kernelName: Uo, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (r, e, t) => {
  let n = t, { reductionIndices: o } = n, s = e[0], a = e[1], i = ir(o, s.shape), l = zg(r, a, s, i);
  return { x: () => l.x() };
} };
var P2 = { kernelName: Ho, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e;
  return { a: () => F(r, J(Un(t, n), "float32")), b: () => F(r, J(Jm(t, n), "float32")) };
} };
function I6(r, e, t, n, o, s, a) {
  let i = _(r, "dy", "maxPool3dGrad"), l = _(e, "input", "maxPool3dGrad"), u = _(t, "output", "maxPool3dGrad"), c = i, p = l, m = u, f = false;
  l.rank === 4 && (f = true, c = O(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), p = O(l, [1, l.shape[0], l.shape[1], l.shape[2], l.shape[3]]), m = O(u, [1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]])), E(c.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`), E(p.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`), E(m.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${m.rank}.`), a != null && E(ot(s), () => `Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);
  let d = { dy: c, input: p, output: m }, h = { filterSize: n, strides: o, pad: s, dimRoundingMode: a }, g = T.runKernel(Oc, d, h);
  return f ? O(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g;
}
var M2 = I({ maxPool3dGrad_: I6 });
var L2 = { kernelName: rl, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (r, e, t) => {
  let [n, o] = e, { filterSize: s, strides: a, pad: i, dimRoundingMode: l } = t;
  return { x: () => M2(r, n, o, s, a, i, l) };
} };
function N6(r, e, t, n, o, s, a) {
  let i = _(r, "dy", "maxPoolGrad"), l = _(e, "input", "maxPoolGrad"), u = _(t, "output", "maxPoolGrad");
  E(l.rank === i.rank, () => `Rank of input (${l.rank}) does not match rank of dy (${i.rank})`), E(i.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`), E(l.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`), a != null && E(ot(s), () => `Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);
  let c = { dy: i, input: l, output: u }, p = { filterSize: n, strides: o, pad: s, dimRoundingMode: a };
  return T.runKernel(Fc, c, p);
}
var z2 = I({ maxPoolGrad_: N6 });
var B2 = { kernelName: qo, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (r, e, t) => {
  let [n, o] = e, { filterSize: s, strides: a, pad: i } = t;
  return { x: () => z2(r, n, o, s, a, i) };
} };
var V2 = { kernelName: Ko, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let [n] = e, { axis: o } = t, s = ir(o, n.shape), i = Fk(n.shape, s)[1], l = nt(i);
  return { x: () => {
    let c = n.shape.slice();
    s.forEach((f) => {
      c[f] = 1;
    });
    let p = O(r, c);
    return ue(F(p, rr(n.shape, "float32")), l);
  } };
} };
var W2 = { kernelName: Xo, inputsToSave: ["x"], outputsToSave: [true], gradFunc: (r, e, t) => {
  let n = t, { axis: o } = n, [s, a] = e, i = ir(o, s.shape), l = zg(r, a, s, i);
  return { x: () => l.x() };
} };
var j2 = { kernelName: Yo, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e;
  return { a: () => F(r, J(Hn(t, n), "float32")), b: () => F(r, J(Ht(t, n), "float32")) };
} };
var G2 = { kernelName: Zo, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let n = e[0], { paddings: o } = t, s = o.map((a) => a[0]);
  return { x: () => Oe(r, s, n.shape) };
} };
var U2 = { kernelName: Zi, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e, o = Le(t.shape, n.shape);
  return { a: () => {
    let i = wt(t.shape, o);
    return i.length > 0 ? O(me(r, i), t.shape) : r;
  }, b: () => {
    let i = F(r, Ke(va(ue(t, n)))), l = wt(n.shape, o);
    return l.length > 0 ? O(me(i, l), n.shape) : i;
  } };
} };
var H2 = { kernelName: Jo, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e, o = Le(t.shape, n.shape);
  return { a: () => {
    let i = F(r, J(n, "float32")), l = wt(t.shape, o);
    return l.length > 0 ? O(me(i, l), t.shape) : i;
  }, b: () => {
    let i = F(r, J(t, "float32")), l = wt(n.shape, o);
    return l.length > 0 ? O(me(i, l), n.shape) : i;
  } };
} };
var q2 = { kernelName: Hs, gradFunc: (r) => ({ x: () => Ke(r) }) };
var K2 = { kernelName: Qo, inputsToSave: ["indices"], gradFunc: (r, e) => {
  let t = e[0];
  return { indices: () => ht(t.shape, "float32") };
} };
var X2 = { kernelName: qs, gradFunc: (r) => ({ x: () => Ie(r) }) };
var Y2 = { kernelName: Ks, saveAllInputs: true, gradFunc: (r, e, t) => {
  let { axis: n } = t;
  return Nr(r, n).map((s) => () => s);
} };
var m_ = { kernelName: es, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let n = e[0], { paddings: o } = t, s = o.map((a) => a[0]);
  return { x: () => Oe(r, s, n.shape) };
} };
var Z2 = { kernelName: ts, inputsToSave: ["a", "b"], outputsToSave: [true], gradFunc: (r, e) => {
  let [t, n, o] = e, s = t, a = n, i = Le(s.shape, a.shape);
  return { a: () => {
    let c = J(a, "float32"), p = F(r, F(c, yn(s, le(c, ce(1))))), m = wt(s.shape, i);
    return m.length > 0 && (p = me(p, m)), O(p, s.shape);
  }, b: () => {
    let c = Ht(s, 0), p = Et(c, Ir(s), Ie(s)), m = F(r, F(o, p)), f = wt(a.shape, i);
    return f.length > 0 && (m = me(m, f)), O(m, a.shape);
  } };
} };
var J2 = { kernelName: rs, inputsToSave: ["x", "alpha"], gradFunc: (r, e) => {
  let [t, n] = e, o = Ht(t, 0);
  return { x: () => Et(o, r, F(r, n)), alpha: () => {
    let s = Et(o, Ie(r), F(r, t)), a = wt(n.shape, r.shape);
    return a.length > 0 && (s = me(s, a)), O(s, n.shape);
  } };
} };
var Q2 = { kernelName: Po, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e, o = Le(t.shape, n.shape);
  return { a: () => {
    let i = ue(r, J(n, "float32")), l = wt(t.shape, o);
    return l.length > 0 ? O(me(i, l), t.shape) : i;
  }, b: () => {
    let i = F(r, J(t, "float32")), l = wt(n.shape, o);
    l.length > 0 && (i = O(me(i, l), n.shape));
    let u = We(n);
    return Ke(ue(i, J(u, "float32")));
  } };
} };
var eE = { kernelName: na, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => ue(r, Ke(We(t))) };
} };
var tE = { kernelName: ss, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e, n = F(Hn(t, 6), Ia(t));
  return { x: () => F(r, J(n, "float32")) };
} };
var rE = { kernelName: ns, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(r, J(Ia(t), "float32")) };
} };
var nE = { kernelName: Xs, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => O(r, t.shape) };
} };
var oE = { kernelName: os, inputsToSave: ["images"], gradFunc: (r, e, t) => {
  let [n] = e, o = { dy: r, images: n };
  return { images: () => T.runKernel(Bc, o, t) };
} };
var sE = { kernelName: ol, inputsToSave: ["images"], gradFunc: (r, e, t) => {
  let [n] = e, o = { dy: r, images: n };
  return { images: () => T.runKernel(zc, o, t) };
} };
var iE = { kernelName: is, gradFunc: (r, e, t) => {
  let { dims: n } = t, o = ir(n, r.shape);
  return { x: () => lr(r, o) };
} };
var aE = { kernelName: as, gradFunc: (r) => ({ x: () => Ie(r) }) };
var lE = { kernelName: ls, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => Ke(ue(r, F(yn(t, 1.5), 2))) };
} };
var uE = { kernelName: Ys, inputsToSave: ["condition"], gradFunc: (r, e) => {
  let [t] = e;
  return { condition: () => J(Ie(t), "float32"), t: () => F(r, J(t, r.dtype)), e: () => F(r, J(cu(t), r.dtype)) };
} };
var cE = { kernelName: sa, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => {
    let n = Ht(t, ce(0)), o = ce(a_), s = ce(l_), a = F(r, s), i = F(F(r, o), tr(J(t, "float32")));
    return Et(n, a, i);
  } };
} };
var pE = { kernelName: cs, outputsToSave: [true], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(r, F(t, le(ce(1), t))) };
} };
var mE = { kernelName: aa, gradFunc: (r) => ({ x: () => Ie(r) }) };
var fE = { kernelName: us, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(iu(J(t, "float32")), r) };
} };
var dE = { kernelName: ia, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(Ym(J(t, "float32")), r) };
} };
var hE = { kernelName: Zs, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let [n] = e, { begin: o, size: s } = t, a = n.shape, [i, l] = Yw(n, o, s), u = [];
  for (let c = 0; c < r.rank; c++)
    u.push([i[c], a[c] - i[c] - l[c]]);
  return { x: () => xn(r, u) };
} };
var gE = { kernelName: fs, outputsToSave: [true], gradFunc: (r, e, t) => {
  let [n] = e, { dim: o } = t, s = true, a = F(r, n);
  return { logits: () => le(a, F(me(a, [o], s), n)) };
} };
var xE = { kernelName: la, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(r, Jr(t)) };
} };
var f_ = { kernelName: Js, gradFunc: (r, e, t) => {
  let { blockShape: n, paddings: o } = t;
  return { x: () => ou(r, n, o) };
} };
var d_ = { kernelName: Qs, gradFunc: (r, e, t) => {
  let { axis: n } = t;
  return { x: () => tt(r, n) };
} };
var yE = { kernelName: ps, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => ue(r, F(St(J(t, "float32")), 2)) };
} };
var bE = { kernelName: sl, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(r, F(J(t, "float32"), 2)) };
} };
var wE = { kernelName: ds, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e, o = ce(2);
  return { a: () => F(r, F(o, le(t, n))), b: () => F(r, F(o, le(n, t))) };
} };
var kE = { kernelName: ro, gradFunc: (r) => ({ x: () => Ie(r) }) };
var _E = { kernelName: hs, inputsToSave: ["a", "b"], gradFunc: (r, e) => {
  let [t, n] = e, o = Le(t.shape, n.shape);
  return { a: () => {
    let i = r, l = wt(t.shape, o);
    return l.length > 0 && (i = me(i, l)), O(i, t.shape);
  }, b: () => {
    let i = r, l = wt(n.shape, o);
    return l.length > 0 && (i = me(i, l)), O(Ke(i), n.shape);
  } };
} };
var vE = { kernelName: ms, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let [n] = e, o = n.shape.slice(), { axis: s } = t;
  ir(s, n.shape).forEach((u) => {
    o[u] = 1;
  });
  let i = O(r, o), l = F(i, rr(n.shape, "float32"));
  return { x: () => l };
} };
var CE = { kernelName: gs, inputsToSave: ["x"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => ue(r, We(iu(t))) };
} };
var SE = { kernelName: xs, outputsToSave: [true], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => F(le(ce(1), We(t)), r) };
} };
var IE = { kernelName: jn, inputsToSave: ["x"], gradFunc: (r, e, t) => {
  let [n] = e, { reps: o } = t;
  return { x: () => {
    let a = Ie(n);
    if (n.rank === 1)
      for (let i = 0; i < o[0]; ++i)
        a = Y(a, Oe(r, [i * n.shape[0]], [n.shape[0]]));
    else if (n.rank === 2)
      for (let i = 0; i < o[0]; ++i)
        for (let l = 0; l < o[1]; ++l)
          a = Y(a, Oe(r, [i * n.shape[0], l * n.shape[1]], [n.shape[0], n.shape[1]]));
    else if (n.rank === 3)
      for (let i = 0; i < o[0]; ++i)
        for (let l = 0; l < o[1]; ++l)
          for (let u = 0; u < o[2]; ++u)
            a = Y(a, Oe(r, [i * n.shape[0], l * n.shape[1], u * n.shape[2]], [n.shape[0], n.shape[1], n.shape[2]]));
    else if (n.rank === 4)
      for (let i = 0; i < o[0]; ++i)
        for (let l = 0; l < o[1]; ++l)
          for (let u = 0; u < o[2]; ++u)
            for (let c = 0; c < o[3]; ++c)
              a = Y(a, Oe(r, [i * n.shape[0], l * n.shape[1], u * n.shape[2], c * n.shape[3]], [n.shape[0], n.shape[1], n.shape[2], n.shape[3]]));
    else
      throw new Error(`Gradient for tile operation is not implemented for rank-${n.rank} tensors yet.`);
    return a;
  } };
} };
var NE = { kernelName: ys, gradFunc: (r, e, t) => {
  let n = t, { perm: o } = n, s = ef(o);
  return { x: () => Ve(r, s) };
} };
var TE = { kernelName: ei, gradFunc: (r, e, t) => {
  let n = t, { axis: o } = n;
  return { value: () => nr(r, o) };
} };
var EE = { kernelName: il, inputsToSave: ["segmentIds"], gradFunc: (r, e) => {
  let [t] = e;
  return { x: () => T6(r, t) };
} };
function T6(r, e) {
  let t = Rn(e, Ie(e)), n = li(r, t), o = Un(e, ce(0, "int32")), s = n.rank - o.rank;
  for (let i = 0; i < s; ++i)
    o = gr(o, i + 1);
  o = Fr(o, rr(n.shape, "bool"));
  let a = Ie(n);
  return Et(o, n, a);
}
var AE = { kernelName: ti, gradFunc: (r) => ({ x: () => Ie(r) }) };
var E6 = [Lg, PT, MT, LT, zT, BT, VT, WT, jT, GT, UT, HT, KT, YT, ZT, JT, QT, e2, t2, r2, n2, o2, i2, s2, l2, u2, c2, p2, m2, f2, Q2, d2, h2, g2, x2, y2, w2, b2, k2, _2, S2, I2, N2, T2, E2, A2, $2, D2, R2, O2, p_, p_, P2, L2, B2, V2, W2, j2, G2, U2, H2, q2, K2, X2, Y2, m_, m_, Z2, J2, eE, tE, rE, nE, oE, sE, iE, aE, lE, uE, cE, pE, mE, fE, dE, hE, gE, xE, f_, f_, d_, d_, yE, wE, bE, kE, _E, vE, CE, SE, IE, NE, TE, EE, AE];
for (let r of E6)
  ZI(r);
var PE = {};
He(PE, { maxNorm: () => $6, minMaxNorm: () => F6, nonNeg: () => R6, unitNorm: () => D6 });
var h_;
function or() {
  return h_ == null && (h_ = kN().epsilon()), h_;
}
function tn() {
  return "channelsLast";
}
var Fn = class extends Error {
  constructor(e) {
    super(e);
    Object.setPrototypeOf(this, Fn.prototype);
  }
};
var jr = class extends Error {
  constructor(e) {
    super(e);
    Object.setPrototypeOf(this, jr.prototype);
  }
};
var L = class extends Error {
  constructor(e) {
    super(e);
    Object.setPrototypeOf(this, L.prototype);
  }
};
var Ne = class extends Error {
  constructor(e) {
    super(e);
    Object.setPrototypeOf(this, Ne.prototype);
  }
};
var yf = class extends Error {
  constructor(e) {
    super(e);
    Object.setPrototypeOf(this, yf.prototype);
  }
};
function co(r, e) {
  if (Array.isArray(r)) {
    let t = [];
    for (let n = 0; n < e; n++)
      t = t.concat(r);
    return t;
  } else {
    let t = new Array(e);
    return t.fill(r), t;
  }
}
function qn(r, e) {
  if (!r)
    throw new yf(e);
}
function g_(r, e) {
  let t = 0;
  for (let n of r)
    n === e && t++;
  return t;
}
function yr(r) {
  return r.length === 1 ? r[0] : r;
}
function gt(r) {
  return Array.isArray(r) ? r : [r];
}
function po(r) {
  let t = r.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return t[0] !== "_" ? t : "private" + t;
}
function Ta(r) {
  return r.length <= 1 || r.indexOf("_") === -1 ? r : r.replace(/[_]+(\w|$)/g, (e, t) => t.toUpperCase());
}
var mo = {};
function vp(r) {
  if (r == null)
    return null;
  let e = {};
  return e.className = r.getClassName(), e.config = r.getConfig(), e;
}
function x_(r) {
  if (!(r == null || typeof r != "object"))
    if (Array.isArray(r))
      r.forEach((e) => x_(e));
    else {
      let e = Object.keys(r);
      for (let t of e) {
        let n = r[t];
        n != null && typeof n == "object" && (!Array.isArray(n) && n.type === "ndarray" && typeof n.value == "number" ? r[t] = n.value : x_(n));
      }
    }
}
function mi(r, e = {}, t = {}, n = "object", o = false) {
  if (typeof r == "string") {
    let s = r, a;
    if (s in t)
      a = t[s];
    else if (s in mo)
      a = mo[s];
    else if (a = e[s], a == null)
      throw new L(`Unknown ${n}: ${r}. This may be due to one of the following reasons:
1. The ${n} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${n} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return a;
  } else {
    let s = r;
    if (s.className == null || s.config == null)
      throw new L(`${n}: Improper config format: ${JSON.stringify(s)}.
'className' and 'config' must set.`);
    let a = s.className, i, l;
    if (a in t ? [i, l] = t[a] : a in mo ? [i, l] = mo.className : a in e && ([i, l] = e[a]), i == null)
      throw new L(`Unknown ${n}: ${a}. This may be due to one of the following reasons:
1. The ${n} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${n} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (l != null) {
      let u = {};
      for (let f of Object.keys(mo))
        u[f] = mo[f];
      for (let f of Object.keys(t))
        u[f] = t[f];
      let c = s.config;
      c.customObjects = u;
      let p = Object.assign({}, mo);
      for (let f of Object.keys(t))
        mo[f] = t[f];
      x_(s.config);
      let m = l(i, s.config, t, o);
      return mo = Object.assign({}, p), m;
    } else {
      let u = Object.assign({}, mo);
      for (let p of Object.keys(t))
        mo[p] = t[p];
      let c = new i(s.config);
      return mo = Object.assign({}, u), c;
    }
  }
}
function A6(r, e) {
  return r < e ? -1 : r > e ? 1 : 0;
}
function bf(r, e) {
  return -1 * A6(r, e);
}
function fo(r) {
  if (r == null)
    return r;
  let e = [];
  for (let t of r)
    e.indexOf(t) === -1 && e.push(t);
  return e;
}
function $E(r) {
  if (r == null)
    throw new L(`Invalid value in obj: ${JSON.stringify(r)}`);
  for (let e in r)
    if (r.hasOwnProperty(e))
      return false;
  return true;
}
function fi(r, e, t) {
  if (t != null && r.indexOf(t) < 0)
    throw new L(`${t} is not a valid ${e}.  Valid values are ${r} or null/undefined.`);
}
function Bg(r, e, t = 0, n = 1 / 0) {
  return qn(t >= 0), qn(n >= t), Array.isArray(r) && r.length >= t && r.length <= n && r.every((o) => typeof o === e);
}
function Kt(r, e) {
  Array.isArray(r) ? (b.assert(r.length > 0, () => `${e} is unexpectedly an empty array.`), r.forEach((t, n) => Kt(t, `element ${n + 1} of ${e}`))) : b.assert(Number.isInteger(r) && r > 0, () => `Expected ${e} to be a positive integer, but got ${DE(r)}.`);
}
function DE(r) {
  return r === null ? "null" : Array.isArray(r) ? "[" + r.map((e) => DE(e)).join(",") + "]" : typeof r == "string" ? `"${r}"` : `${r}`;
}
function RE(r, e) {
  let t = b.now(), n;
  return (...s) => {
    let a = b.now();
    return a - t < e || (t = a, n = r(...s)), n;
  };
}
function Vg(r) {
  return r === "relu" ? "relu" : r === "linear" ? "linear" : r === "elu" ? "elu" : null;
}
function y_(r, e) {
  return z(() => St(me(F(r, r), e, true)));
}
var Cp = class extends ee.Serializable {
  getConfig() {
    return {};
  }
};
var wf = class extends Cp {
  constructor(e) {
    super();
    this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return z(() => {
      let t = y_(e, this.axis), n = Sr(t, 0, this.maxValue);
      return F(e, ue(n, Y(or(), t)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
};
wf.className = "MaxNorm";
ee.registerClass(wf);
var kf = class extends Cp {
  constructor(e) {
    super();
    this.defaultAxis = 0, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return z(() => ue(e, Y(or(), y_(e, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
};
kf.className = "UnitNorm";
ee.registerClass(kf);
var _f = class extends Cp {
  apply(e) {
    return Or(e);
  }
};
_f.className = "NonNeg";
ee.registerClass(_f);
var vf = class extends Cp {
  constructor(e) {
    super();
    this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = e.minValue != null ? e.minValue : this.defaultMinValue, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.rate = e.rate != null ? e.rate : this.defaultRate, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return z(() => {
      let t = y_(e, this.axis), n = Y(F(this.rate, Sr(t, this.minValue, this.maxValue)), F(1 - this.rate, t));
      return F(e, ue(n, Y(or(), t)));
    });
  }
  getConfig() {
    return { minValue: this.minValue, maxValue: this.maxValue, rate: this.rate, axis: this.axis };
  }
};
vf.className = "MinMaxNorm";
ee.registerClass(vf);
var FE = { maxNorm: "MaxNorm", minMaxNorm: "MinMaxNorm", nonNeg: "NonNeg", unitNorm: "UnitNorm" };
function Mt(r) {
  return vp(r);
}
function OE(r, e = {}) {
  return mi(r, ee.SerializationMap.getMap().classNameMap, e, "constraint");
}
function Lt(r) {
  if (r == null)
    return null;
  if (typeof r == "string") {
    let t = { className: r in FE ? FE[r] : r, config: {} };
    return OE(t);
  } else
    return r instanceof Cp ? r : OE(r);
}
function $6(r) {
  return new wf(r);
}
function D6(r) {
  return new kf(r);
}
function R6() {
  return new _f();
}
function F6(r) {
  return new vf(r);
}
var rA = {};
He(rA, { constant: () => W6, glorotNormal: () => X6, glorotUniform: () => K6, heNormal: () => Y6, heUniform: () => Z6, identity: () => H6, leCunNormal: () => J6, leCunUniform: () => Q6, ones: () => V6, orthogonal: () => e5, randomNormal: () => G6, randomUniform: () => j6, truncatedNormal: () => U6, varianceScaling: () => q6, zeros: () => B6 });
var ME = ["channelsFirst", "channelsLast"];
var LE = ["nearest", "bilinear"];
var zE = ["valid", "same", "causal"];
var BE = ["max", "avg"];
var VE = ["sum", "mul", "concat", "ave"];
var Sp = new Map();
function Rt(r) {
  fi(ME, "DataFormat", r);
}
function WE(r) {
  fi(LE, "InterpolationFormat", r);
}
function rn(r) {
  fi(zE, "PaddingMode", r);
}
function b_(r) {
  fi(BE, "PoolMode", r);
}
var Cf = [];
var jE = "/";
function Cs(r, e) {
  Cf.push(r);
  try {
    let t = e();
    return Cf.pop(), t;
  } catch (t) {
    throw Cf.pop(), t;
  }
}
function O6() {
  return Cf.length === 0 ? "" : Cf.join(jE) + jE;
}
function Wg(r) {
  if (!GE(r))
    throw new Error("Not a valid tensor name: '" + r + "'");
  return O6() + r;
}
function jg(r) {
  if (!GE(r))
    throw new Error("Not a valid tensor name: '" + r + "'");
  Sp.has(r) || Sp.set(r, 0);
  let e = Sp.get(r);
  if (Sp.set(r, Sp.get(r) + 1), e > 0) {
    let t = `${r}_${e}`;
    return Sp.set(t, 1), t;
  } else
    return r;
}
var P6 = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function GE(r) {
  return !!r.match(P6);
}
function UE(r) {
  return r === parseInt(r.toString(), 10);
}
function ho(r, e, t) {
  e == null && (e = 0), t == null && (t = r.length);
  let n = 1;
  for (let o = e; o < t; ++o)
    n *= r[o];
  return n;
}
function Cu(r) {
  if (r.length === 0)
    return Number.NaN;
  let e = Number.POSITIVE_INFINITY;
  for (let t = 0; t < r.length; t++) {
    let n = r[t];
    n < e && (e = n);
  }
  return e;
}
function Ss(r) {
  if (r.length === 0)
    return Number.NaN;
  let e = Number.NEGATIVE_INFINITY;
  for (let t = 0; t < r.length; t++) {
    let n = r[t];
    n > e && (e = n);
  }
  return e;
}
function Gr(r, e) {
  if (e < r)
    throw new L(`end (${e}) < begin (${r}) is forbidden.`);
  let t = [];
  for (let n = r; n < e; ++n)
    t.push(n);
  return t;
}
function Su(r, e) {
  return J(r, e);
}
function Ea(r, e = -1) {
  let t = r.shape.slice();
  return e < 0 && (e = t.length + e + 1), t.splice(e, 0, 1), O(r, t);
}
function HE(r, e) {
  return z(() => {
    if (r.shape.length !== 2)
      throw new L(`repeat() expects a rank-2 tensor, but received a rank-${r.shape.length} tensor.`);
    let t = Ea(r, 1);
    return Gg(t, [1, e, 1]);
  });
}
function qE(r) {
  let e = [ho(r.shape)];
  return O(r, e);
}
function KE(r) {
  if (r.rank <= 1)
    throw new L(`batchFlatten requires a minimum rank of 2. Got rank: ${r.rank}.`);
  let e = [r.shape[0], ho(r.shape, 1)];
  return O(r, e);
}
function Aa(r, e, t) {
  return z(() => {
    switch (r.rank) {
      case 1:
        return pf(r, e, t);
      case 2:
        return vg(r, [e, 0], [t, r.shape[1]]);
      case 3:
        return mf(r, [e, 0, 0], [t, r.shape[1], r.shape[2]]);
      case 4:
        return hp(r, [e, 0, 0, 0], [t, r.shape[1], r.shape[2], r.shape[3]]);
      case 5:
        return Oe(r, [e, 0, 0, 0, 0], [t, r.shape[1], r.shape[2], r.shape[3], r.shape[4]]);
      case 6:
        return Oe(r, [e, 0, 0, 0, 0, 0], [t, r.shape[1], r.shape[2], r.shape[3], r.shape[4], r.shape[5]]);
      default:
        throw new L(`sliceAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`);
    }
  });
}
function w_(r, e, t) {
  return z(() => {
    switch (r.rank) {
      case 1:
        return pf(r, e, t);
      case 2:
        return vg(r, [0, e], [r.shape[0], t]);
      case 3:
        return mf(r, [0, 0, e], [r.shape[0], r.shape[1], t]);
      case 4:
        return hp(r, [0, 0, 0, e], [r.shape[0], r.shape[1], r.shape[2], t]);
      default:
        throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`);
    }
  });
}
function Sf(r, e, t, n) {
  return z(() => {
    switch (r.rank) {
      case 1:
        return pf(r, e, t);
      case 2:
        switch (n) {
          case 1:
            return Aa(r, e, t);
          case 2:
            return w_(r, e, t);
          default:
            throw new L(`The axis is not within the rank of the tensor ${n}`);
        }
      case 3:
        switch (n) {
          case 1:
            return Aa(r, e, t);
          case 2:
            return mf(r, [0, e, 0], [r.shape[0], t, r.shape[2]]);
          case 3:
            return w_(r, e, t);
          default:
            throw new L(`The axis is not within the rank of the tensor ${n}`);
        }
      case 4:
        switch (n) {
          case 1:
            return Aa(r, e, t);
          case 2:
            return hp(r, [0, e, 0, 0], [r.shape[0], t, r.shape[2], r.shape[3]]);
          case 3:
            return hp(r, [0, 0, e, 0], [r.shape[0], r.shape[1], t, r.shape[3]]);
          case 4:
            return w_(r, e, t);
          default:
            throw new L(`The axis is not within the rank of the tensor ${n}`);
        }
      default:
        throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`);
    }
  });
}
function Ip(r, e = -1) {
  let t;
  return e < 0 && (t = r[0].rank, t !== 0 ? e = t : e = 0), e === r[0].rank && (e = -1), tt(r, e);
}
function k_(r, e) {
  switch (r.rank) {
    case 1:
      return yk([r, e]);
    case 2:
      return bk([r, e], 0);
    case 3:
      return wk([r, e], 0);
    case 4:
      return kk([r, e], 0);
    default:
      throw new L(`concatAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`);
  }
}
function Gg(r, e) {
  if (Array.isArray(e) || (e = [e]), r.rank !== e.length)
    throw new L(`The length of input n (${e.length}) does not match the number of dimensions in input x (${r.rank})`);
  return Rr(r, e);
}
function Np(r, e = 0, t = 1, n, o) {
  return _g(r, e, t, n, o);
}
function go(r, e, t, n) {
  if (r.rank < 2 || e.rank < 2)
    throw new Ne(`dot requires both inputs to be rank >= 2 but got x shape = ${r.shape} and y shape = ${e.shape}`);
  if (e.rank >= 3) {
    let o = r.shape.slice(-1)[0], s = e.shape.slice(-2)[0];
    if (o !== s)
      throw new Ne(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${r.shape} and  y shape = ${e.shape}`);
  }
  if (r.rank === 2 && e.rank === 2) {
    let o = false, s = false;
    return lo.matMul({ a: r, b: e, transposeA: o, transposeB: s, bias: n ? __(r.rank, n, tn()) : null, activation: t });
  } else {
    let o = r.shape.slice(), s = o.pop();
    r = O(r, [-1, s]);
    let a = e.shape.slice(), i = a.pop(), l = a.pop(), u = [...a, i], c = Array.from({ length: e.rank }, (d, h) => h === 0 ? e.rank - 2 : h <= e.rank - 2 ? h - 1 : h);
    e = O(Ve(e, c), [l, -1]);
    let p = [...o, ...u], m = false, f = false;
    return O(lo.matMul({ a: r, b: e, transposeA: m, transposeB: f, bias: n ? __(r.rank, n, tn()) : null, activation: t }), p);
  }
}
function Ug(r, e, t) {
  return z(() => (Array.isArray(e) ? e = At(e, "int32") : e = J(e, "int32"), li(r, e, t)));
}
function Iu(r) {
  return F(r, r);
}
function __(r, e, t) {
  let n = e.shape;
  if (e.rank !== 1 && e.rank !== r)
    throw new L(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${r}`);
  if (r === 5) {
    if (t === "channelsFirst")
      return n.length === 1 ? O(e, [1, n[0], 1, 1, 1]) : O(e, [1, n[3], n[0], n[1], n[2]]);
    if (t === "channelsLast")
      return n.length === 1 ? O(e, [1, 1, 1, 1, n[0]]) : O(e, [1].concat(n));
  } else if (r === 4) {
    if (t === "channelsFirst")
      return n.length === 1 ? O(e, [1, n[0], 1, 1]) : O(e, [1, n[2], n[0], n[1]]);
    if (t === "channelsLast")
      return n.length === 1 ? O(e, [1, 1, 1, n[0]]) : O(e, [1].concat(n));
  } else if (r === 3) {
    if (t === "channelsFirst")
      return n.length === 1 ? O(e, [1, n[0], 1]) : O(e, [1, n[1], n[0]]);
    if (t === "channelsLast")
      return n.length === 1 ? O(e, [1, 1, n[0]]) : O(e, [1].concat(n));
  } else if (r < 3)
    return e;
  throw new L(`Unsupported input rank by biasAdd: ${e.rank}`);
}
function nn(r, e, t) {
  return z(() => (t == null && (t = tn()), Rt(t), Y(r, __(r.rank, e, t))));
}
function XE(r, e = 1) {
  if (e !== 1)
    throw new Ne(`Support for alpha values other than 1 (${e}) is not implemented yet.`);
  return _a(r);
}
function YE(r) {
  return z(() => ue(r, Y(Tt(r), 1)));
}
function Hg(r, e, t, n) {
  return z(() => UN(r, e, t, n));
}
function ZE(r) {
  return z(() => {
    let e = Y(0.5, F(0.2, r));
    return Sr(e, 0, 1);
  });
}
function hl(r, e, t = false) {
  return t ? r() : e();
}
var JE = ["fanIn", "fanOut", "fanAvg"];
var QE = ["normal", "uniform", "truncatedNormal"];
function M6(r) {
  fi(JE, "FanMode", r);
}
function L6(r) {
  fi(QE, "Distribution", r);
}
var wn = class extends ee.Serializable {
  fromConfigUsesCustomObjects() {
    return false;
  }
  getConfig() {
    return {};
  }
};
var If = class extends wn {
  apply(e, t) {
    return ht(e, t);
  }
};
If.className = "Zeros";
ee.registerClass(If);
var Nu = class extends wn {
  apply(e, t) {
    return rr(e, t);
  }
};
Nu.className = "Ones";
ee.registerClass(Nu);
var Nf = class extends wn {
  constructor(e) {
    super();
    if (typeof e != "object")
      throw new L(`Expected argument of type ConstantConfig but got ${e}`);
    if (e.value === void 0)
      throw new L(`config must have value set but got ${e}`);
    this.value = e.value;
  }
  apply(e, t) {
    return z(() => F(ce(this.value), rr(e, t)));
  }
  getConfig() {
    return { value: this.value };
  }
};
Nf.className = "Constant";
ee.registerClass(Nf);
var Tf = class extends wn {
  constructor(e) {
    super();
    this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = e.minval || this.DEFAULT_MINVAL, this.maxval = e.maxval || this.DEFAULT_MAXVAL, this.seed = e.seed;
  }
  apply(e, t) {
    return vs(e, this.minval, this.maxval, t);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
};
Tf.className = "RandomUniform";
ee.registerClass(Tf);
var Ef = class extends wn {
  constructor(e) {
    super();
    this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
  }
  apply(e, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32")
      throw new Ne(`randomNormal does not support dType ${t}.`);
    return Np(e, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
};
Ef.className = "RandomNormal";
ee.registerClass(Ef);
var Af = class extends wn {
  constructor(e) {
    super();
    this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
  }
  apply(e, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32")
      throw new Ne(`truncatedNormal does not support dType ${t}.`);
    return yu(e, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
};
Af.className = "TruncatedNormal";
ee.registerClass(Af);
var $f = class extends wn {
  constructor(e) {
    super();
    this.gain = e.gain != null ? e.gain : 1;
  }
  apply(e, t) {
    return z(() => {
      if (e.length !== 2 || e[0] !== e[1])
        throw new L("Identity matrix initializer can only be used for 2D square matrices.");
      return F(this.gain, pp(e[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
};
$f.className = "Identity";
ee.registerClass($f);
function z6(r, e = "channelsLast") {
  let t, n;
  if (Rt(e), r.length === 2)
    t = r[0], n = r[1];
  else if ([3, 4, 5].indexOf(r.length) !== -1) {
    if (e === "channelsFirst") {
      let o = ho(r, 2);
      t = r[1] * o, n = r[0] * o;
    } else if (e === "channelsLast") {
      let o = ho(r, 0, r.length - 2);
      t = r[r.length - 2] * o, n = r[r.length - 1] * o;
    }
  } else {
    let o = ho(r);
    t = Math.sqrt(o), n = Math.sqrt(o);
  }
  return [t, n];
}
var Ur = class extends wn {
  constructor(e) {
    super();
    if (e.scale < 0)
      throw new L(`scale must be a positive float. Got: ${e.scale}`);
    this.scale = e.scale == null ? 1 : e.scale, this.mode = e.mode == null ? "fanIn" : e.mode, M6(this.mode), this.distribution = e.distribution == null ? "normal" : e.distribution, L6(this.distribution), this.seed = e.seed;
  }
  apply(e, t) {
    let n = z6(e), o = n[0], s = n[1], a = this.scale;
    if (this.mode === "fanIn" ? a /= Math.max(1, o) : this.mode === "fanOut" ? a /= Math.max(1, s) : a /= Math.max(1, (o + s) / 2), this.distribution === "normal") {
      let i = Math.sqrt(a);
      if (t = t || "float32", t !== "float32" && t !== "int32")
        throw new Ne(`${this.getClassName()} does not support dType ${t}.`);
      return yu(e, 0, i, t, this.seed);
    } else {
      let i = Math.sqrt(3 * a);
      return vs(e, -i, i, t);
    }
  }
  getConfig() {
    return { scale: this.scale, mode: this.mode, distribution: this.distribution, seed: this.seed };
  }
};
Ur.className = "VarianceScaling";
ee.registerClass(Ur);
var Tp = class extends Ur {
  constructor(e) {
    super({ scale: 1, mode: "fanAvg", distribution: "uniform", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Ur.className;
  }
};
Tp.className = "GlorotUniform";
ee.registerClass(Tp);
var Ep = class extends Ur {
  constructor(e) {
    super({ scale: 1, mode: "fanAvg", distribution: "normal", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Ur.className;
  }
};
Ep.className = "GlorotNormal";
ee.registerClass(Ep);
var Ap = class extends Ur {
  constructor(e) {
    super({ scale: 2, mode: "fanIn", distribution: "normal", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Ur.className;
  }
};
Ap.className = "HeNormal";
ee.registerClass(Ap);
var $p = class extends Ur {
  constructor(e) {
    super({ scale: 2, mode: "fanIn", distribution: "uniform", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Ur.className;
  }
};
$p.className = "HeUniform";
ee.registerClass($p);
var Dp = class extends Ur {
  constructor(e) {
    super({ scale: 1, mode: "fanIn", distribution: "normal", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Ur.className;
  }
};
Dp.className = "LeCunNormal";
ee.registerClass(Dp);
var Rp = class extends Ur {
  constructor(e) {
    super({ scale: 1, mode: "fanIn", distribution: "uniform", seed: e == null ? null : e.seed });
  }
  getClassName() {
    return Ur.className;
  }
};
Rp.className = "LeCunNormal";
ee.registerClass(Rp);
var Df = class extends wn {
  constructor(e) {
    super();
    if (this.DEFAULT_GAIN = 1, this.gain = e.gain == null ? this.DEFAULT_GAIN : e.gain, this.seed = e.seed, this.seed != null)
      throw new Ne("Random seed is not implemented for Orthogonal Initializer yet.");
  }
  apply(e, t) {
    return z(() => {
      if (e.length < 2)
        throw new Ne("Shape must be at least 2D.");
      e[0] * e[1] > 2e3 && console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0] * e[1]}) elements: Slowness may result.`);
      let n = e[0] > e[1] ? [e[1], e[0]] : e, o = Np(n, 0, 1, "float32"), s = RT.gramSchmidt(o);
      return e[0] > e[1] && (s = Ve(s)), F(this.gain, s);
    });
  }
  getConfig() {
    return { gain: this.gain, seed: this.seed };
  }
};
Df.className = "Orthogonal";
ee.registerClass(Df);
var eA = { constant: "Constant", glorotNormal: "GlorotNormal", glorotUniform: "GlorotUniform", heNormal: "HeNormal", heUniform: "HeUniform", identity: "Identity", leCunNormal: "LeCunNormal", leCunUniform: "LeCunUniform", ones: "Ones", orthogonal: "Orthogonal", randomNormal: "RandomNormal", randomUniform: "RandomUniform", truncatedNormal: "TruncatedNormal", varianceScaling: "VarianceScaling", zeros: "Zeros" };
function tA(r, e = {}) {
  return mi(r, ee.SerializationMap.getMap().classNameMap, e, "initializer");
}
function kt(r) {
  return vp(r);
}
function mt(r) {
  if (typeof r == "string") {
    let e = r in eA ? eA[r] : r;
    if (e === "GlorotNormal")
      return new Ep();
    if (e === "GlorotUniform")
      return new Tp();
    if (e === "HeNormal")
      return new Ap();
    if (e === "HeUniform")
      return new $p();
    if (e === "LeCunNormal")
      return new Dp();
    if (e === "LeCunUniform")
      return new Rp();
    {
      let t = {};
      return t.className = e, t.config = {}, tA(t);
    }
  } else
    return r instanceof wn ? r : tA(r);
}
function B6() {
  return new If();
}
function V6() {
  return new Nu();
}
function W6(r) {
  return new Nf(r);
}
function j6(r) {
  return new Tf(r);
}
function G6(r) {
  return new Ef(r);
}
function U6(r) {
  return new Af(r);
}
function H6(r) {
  return new $f(r);
}
function q6(r) {
  return new Ur(r);
}
function K6(r) {
  return new Tp(r);
}
function X6(r) {
  return new Ep(r);
}
function Y6(r) {
  return new Ap(r);
}
function Z6(r) {
  return new $p(r);
}
function J6(r) {
  return new Dp(r);
}
function Q6(r) {
  return new Rp(r);
}
function e5(r) {
  return new Df(r);
}
var MA = {};
He(MA, { Layer: () => Pe, RNN: () => On, RNNCell: () => Cl, activation: () => v8, add: () => D8, alphaDropout: () => hX, average: () => R8, averagePooling1d: () => uv, averagePooling2d: () => cv, averagePooling3d: () => pv, avgPool1d: () => W8, avgPool2d: () => G8, avgPool3d: () => H8, avgPooling1d: () => j8, avgPooling2d: () => U8, avgPooling3d: () => q8, batchNormalization: () => z8, bidirectional: () => aX, concatenate: () => F8, conv1d: () => d8, conv2d: () => h8, conv2dTranspose: () => g8, conv3d: () => x8, conv3dTranspose: () => y8, convLstm2d: () => nX, convLstm2dCell: () => oX, cropping2D: () => w8, dense: () => C8, depthwiseConv2d: () => _8, dot: () => L8, dropout: () => S8, elu: () => l8, embedding: () => $8, flatten: () => N8, gaussianDropout: () => dX, gaussianNoise: () => fX, globalAveragePooling1d: () => K8, globalAveragePooling2d: () => X8, globalMaxPool1d: () => uX, globalMaxPool2d: () => cX, globalMaxPooling1d: () => RA, globalMaxPooling2d: () => FA, gru: () => Z8, gruCell: () => J8, input: () => O_, inputLayer: () => a8, layerNormalization: () => B8, leakyReLU: () => c8, lstm: () => Q8, lstmCell: () => eX, masking: () => gX, maxPool1d: () => pX, maxPool2d: () => mX, maxPooling1d: () => OA, maxPooling2d: () => PA, maxPooling3d: () => Y8, maximum: () => O8, minimum: () => P8, multiply: () => M8, permute: () => A8, prelu: () => p8, reLU: () => u8, repeatVector: () => T8, reshape: () => E8, rnn: () => sX, separableConv2d: () => b8, simpleRNN: () => tX, simpleRNNCell: () => rX, softmax: () => m8, spatialDropout1d: () => I8, stackedRNNCells: () => iX, thresholdedReLU: () => f8, timeDistributed: () => lX, upSampling2d: () => k8, zeroPadding2d: () => V8 });
var t5 = 0;
function qg() {
  return t5++;
}
var Kg = {};
function gl(r = "") {
  return r in Kg || (Kg[r] = 0), Kg[r] += 1, r + Kg[r].toString();
}
function Xg(r) {
  return Array.isArray(r) && Array.isArray(r[0]);
}
function Fp(r) {
  return r.length === 0 ? [] : Array.isArray(r[0]) ? r : [r];
}
function Fe(r) {
  let e;
  if (Array.isArray(r)) {
    if (r.length !== 1)
      throw new L(`Expected Tensor length to be 1; got ${r.length}`);
    e = r[0];
  } else
    e = r;
  return e;
}
function Xe(r) {
  if (Array.isArray(r) && Array.isArray(r[0])) {
    if (r.length === 1)
      return r = r, r[0];
    throw new L(`Expected exactly 1 Shape; got ${r.length}`);
  } else
    return r;
}
function Op(r) {
  let e = 0;
  for (let t of r)
    t.shape.length === 0 ? e += 1 : e += t.shape.reduce((n, o) => n * o);
  return e;
}
var nA = "Variable";
var Yg = class {
  constructor(e, t = "float32", n = nA, o = true, s = null) {
    this.dtype = t == null ? "float32" : t, this.shape = e.shape, this.id = qg(), n = n == null ? nA : n, this.originalName = Wg(n), this.name = jg(this.originalName), this.trainable_ = o, this.constraint = s, this.val = s_(e, this.trainable_, this.name, this.dtype);
  }
  read() {
    return this.assertNotDisposed(), this.val;
  }
  write(e) {
    return this.assertNotDisposed(), r5(this.val, e), this.val.id !== e.id && (this.val.assign(e), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed)
      throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this.trainable_ = e, this.val.trainable = e;
  }
};
function r5(r, e) {
  if (r.shape.toString() !== e.shape.toString())
    throw new Error("Shape mismatch: " + JSON.stringify(r.shape) + " vs. " + JSON.stringify(e.shape));
}
function Rf(r) {
  return r.map((e) => e.read());
}
function Pp(r) {
  r.forEach((e) => {
    e[0].write(e[1]);
  });
}
var _t = class {
  constructor(e) {
    this.dtype = e.dtype, this.shape = e.shape, e.shape != null ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {};
  }
};
var on = class {
  constructor(e, t, n, o, s, a, i) {
    this.dtype = e, this.shape = t, this.sourceLayer = n, this.inputs = o, this.callArgs = s, this.outputTensorIndex = i, this.id = qg(), a != null && (this.originalName = Wg(a), this.name = jg(this.originalName)), this.rank = t.length;
  }
};
var n5 = 0;
var xl = class {
  constructor(e, t) {
    this.callArgs = t, this.id = n5++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes;
    for (let n of e.inboundLayers)
      n != null && n.outboundNodes.push(this);
    e.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    let e = [];
    for (let t of this.inboundLayers)
      t != null ? e.push(t.name) : e.push(null);
    return { outboundLayer: this.outboundLayer ? this.outboundLayer.name : null, inboundLayers: e, nodeIndices: this.nodeIndices, tensorIndices: this.tensorIndices };
  }
};
var o5 = 0;
var Pe = class extends ee.Serializable {
  constructor(e = {}) {
    super();
    this._callHook = null, this._addedWeightNames = [], this._stateful = false, this.id = o5++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = false, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = false, this.inboundNodes = [], this.outboundNodes = [];
    let t = e.name;
    if (!t) {
      let n = this.getClassName();
      t = po(n) + "_" + gl(n);
    }
    if (this.name = t, this.trainable_ = e.trainable == null ? true : e.trainable, e.inputShape != null || e.batchInputShape != null) {
      let n;
      if (e.batchInputShape != null)
        n = e.batchInputShape;
      else if (e.inputShape != null) {
        let s = null;
        e.batchSize != null && (s = e.batchSize), n = [s].concat(e.inputShape);
      }
      this.batchInputShape = n;
      let o = e.dtype;
      o == null && (o = e.inputDType), o == null && (o = "float32"), this.dtype = o;
    }
    e.weights != null ? this.initialWeights = e.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = false;
  }
  static nodeKey(e, t) {
    return e.name + "_ib-" + t.toString();
  }
  getNodeAtIndex(e, t) {
    if (this.inboundNodes.length === 0)
      throw new jr(`The layer has never been called and thus has no defined ${t}.`);
    if (this.inboundNodes.length <= e)
      throw new L(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[e];
  }
  getInputAt(e) {
    return yr(this.getNodeAtIndex(e, "input").inputTensors);
  }
  getOutputAt(e) {
    return yr(this.getNodeAtIndex(e, "output").outputTensors);
  }
  get input() {
    if (this.inboundNodes.length > 1)
      throw new Fn(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0)
      throw new Fn(`Layer ${this.name} is not connected, no input to return.`);
    return yr(this.getNodeAtIndex(0, "input").inputTensors);
  }
  get output() {
    if (this.inboundNodes.length === 0)
      throw new Fn(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1)
      throw new Fn(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return yr(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  calculateLosses() {
    return this.losses.map((e) => e());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(e) {
    this._built = e;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this._trainableWeights.forEach((t) => t.trainable = e), this.trainable_ = e;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((e) => e.trainable) : [];
  }
  set trainableWeights(e) {
    this._trainableWeights = e;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((e) => !e.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(e) {
    this._nonTrainableWeights = e;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  resetStates() {
    if (!this.stateful)
      throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  assertInputCompatibility(e) {
    if (e = gt(e), this.inputSpec == null || this.inputSpec.length === 0)
      return;
    let t = gt(this.inputSpec);
    if (e.length !== t.length)
      throw new L(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);
    for (let n = 0; n < e.length; n++) {
      let o = e[n], s = t[n];
      if (s == null)
        continue;
      let a = o.rank;
      if (s.ndim != null && a !== s.ndim)
        throw new L(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);
      if (s.maxNDim != null && a > s.maxNDim)
        throw new L(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);
      if (s.minNDim != null && a < s.minNDim)
        throw new L(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);
      if (s.dtype != null && o.dtype !== s.dtype)
        throw new L(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${o.dtype}.`);
      if (s.axes) {
        let i = o.shape;
        for (let l in s.axes) {
          let u = Number(l), c = s.axes[l], p = u >= 0 ? i[u] : i[i.length + u];
          if (c != null && [c, null].indexOf(p) === -1)
            throw new L(`Input ${n} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${i}.`);
        }
      }
      if (s.shape != null)
        for (let i = 0; i < s.shape.length; ++i) {
          let l = s.shape[i], u = o.shape[i];
          if (l != null && u != null && l !== u)
            throw new L(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${o.shape}.`);
        }
    }
  }
  call(e, t) {
    return e;
  }
  invokeCallHook(e, t) {
    this._callHook != null && this._callHook(e, t);
  }
  setCallHook(e) {
    this._callHook = e;
  }
  clearCallHook() {
    this._callHook = null;
  }
  apply(e, t) {
    t = t || {}, this.assertNotDisposed();
    let n = gt(e), o = true;
    for (let a of n)
      if (!(a instanceof on)) {
        o = false;
        break;
      }
    let s = true;
    for (let a of n)
      if (a instanceof on) {
        s = false;
        break;
      }
    if (o === s)
      throw new L("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return Cs(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(e);
        let a = [];
        for (let i of gt(e))
          a.push(i.shape);
        this.build(yr(a)), this.built = true, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && s && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(e), s) {
        let a = this.call(e, t), i = gt(a), l = [];
        for (let u of i)
          n.indexOf(u) !== -1 && (u = u.clone()), l.push(u);
        if (a = yr(l), this.activityRegularizer != null)
          throw new Ne("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return a;
      } else {
        let a = s5(e), i = this.computeOutputShape(a), l, u = i5(e);
        if (this.warnOnIncompatibleInputShape(Array.isArray(e) ? a[0] : a), i != null && i.length > 0 && Array.isArray(i[0]) ? l = i.map((c, p) => new on(u, c, this, gt(e), t, this.name, p)) : l = new on(u, i, this, gt(e), t, this.name), this.addInboundNode(e, l, null, null, a, i, t), this._refCount++, this.activityRegularizer != null)
          throw new Ne("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return l;
      }
    });
  }
  warnOnIncompatibleInputShape(e) {
    if (this.batchInputShape != null)
      if (e.length !== this.batchInputShape.length)
        console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
      else {
        let t = false;
        this.batchInputShape.forEach((n, o) => {
          n != null && e[o] != null && e[o] !== n && (t = true);
        }), t && console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
      }
  }
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0)
      throw new Fn(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    let e = [];
    for (let t of this.inboundNodes) {
      let n = JSON.stringify(t.outputShapes);
      e.indexOf(n) === -1 && e.push(n);
    }
    if (e.length === 1) {
      let t = this.inboundNodes[0].outputShapes;
      return Array.isArray(t) && Array.isArray(t[0]) && t.length === 1 ? t[0] : t;
    } else
      throw new Fn(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  countParams() {
    if (!this.built)
      throw new jr(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return Op(this.weights);
  }
  build(e) {
    this.built = true;
  }
  getWeights(e = false) {
    return Rf(e ? this.trainableWeights : this.weights);
  }
  setWeights(e) {
    z(() => {
      let t = this.weights;
      if (t.length !== e.length)
        throw new L(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);
      if (t.length === 0)
        return;
      let n = [], o = Rf(t);
      for (let s = 0; s < o.length; ++s) {
        let a = o[s], i = t[s], l = e[s];
        if (!b.arraysEqual(a.shape, l.shape))
          throw new L(`Layer weight shape ${a.shape} not compatible with provided weight shape ${l.shape}`);
        n.push([i, l]);
      }
      Pp(n);
    });
  }
  addWeight(e, t, n, o, s, a, i) {
    if (this._addedWeightNames.indexOf(e) !== -1)
      throw new L(`Duplicate weight name ${e} for layer ${this.name}`);
    this._addedWeightNames.push(e), n == null && (n = "float32"), this.fastWeightInitDuringBuild && (o = mt("zeros"));
    let l = o.apply(t, n), u = new Yg(l, n, e, a, i);
    return l.dispose(), s != null && this.addLoss(() => s.apply(u.read())), a == null && (a = true), a ? this._trainableWeights.push(u) : this._nonTrainableWeights.push(u), u;
  }
  setFastWeightInitDuringBuild(e) {
    this.fastWeightInitDuringBuild = e;
  }
  addLoss(e) {
    e == null || Array.isArray(e) && e.length === 0 || (e = gt(e), this._losses !== void 0 && this._losses !== null && this.losses.push(...e));
  }
  computeOutputShape(e) {
    return e;
  }
  computeMask(e, t) {
    if (!this.supportsMasking) {
      if (t != null)
        if (Array.isArray(t))
          t.forEach((n) => {
            if (n != null)
              throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
          });
        else
          throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      return null;
    }
    return t;
  }
  addInboundNode(e, t, n, o, s, a, i = null) {
    let l = gt(e);
    t = gt(t), n = gt(n), o = gt(o), s = Fp(s), a = Fp(a);
    let u = [], c = [], p = [];
    for (let m of l)
      u.push(m.sourceLayer), c.push(m.nodeIndex), p.push(m.tensorIndex);
    new xl({ outboundLayer: this, inboundLayers: u, nodeIndices: c, tensorIndices: p, inputTensors: l, outputTensors: t, inputMasks: n, outputMasks: o, inputShapes: s, outputShapes: a }, i);
    for (let m = 0; m < t.length; m++)
      t[m].sourceLayer = this, t[m].nodeIndex = this.inboundNodes.length - 1, t[m].tensorIndex = m;
  }
  getConfig() {
    let e = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (e.batchInputShape = this.batchInputShape), this.dtype != null && (e.dtype = this.dtype), e;
  }
  disposeWeights() {
    return this.weights.forEach((e) => e.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  dispose() {
    if (!this.built)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let e = 0;
    return --this._refCount == 0 && (e = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: e };
  }
};
function s5(r) {
  r = gt(r);
  let e = [];
  for (let t of r)
    e.push(t.shape);
  return yr(e);
}
function i5(r) {
  return "float32";
}
function v_(r, e, t) {
  if ((e == null || t != null && t > 0) && (e = r.sourceLayer, t = r.nodeIndex), e.inboundNodes.length === 0)
    return [r];
  {
    let n = e.inboundNodes[t];
    if (n.inboundLayers.length === 0)
      return n.inputTensors;
    {
      let o = [];
      for (let s = 0; s < n.inboundLayers.length; s++) {
        let a = n.inputTensors[s], i = n.inboundLayers[s], l = n.nodeIndices[s], u = v_(a, i, l);
        for (let c of u)
          o.indexOf(c) === -1 && o.push(c);
      }
      return o;
    }
  }
}
var di = class extends Pe {
  constructor(e) {
    super({ dtype: e.dtype, name: e.name != null ? e.name : gl("input").toString() });
    if (e.batchSize == null && (e.batchSize = null), e.sparse == null && (e.sparse = false), this.trainable = false, this.built = true, this.sparse = e.sparse, e.inputShape != null && e.batchInputShape != null)
      throw new L("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let t = e.batchInputShape;
    if (t == null) {
      if (e.inputShape == null)
        throw new L("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      t = [e.batchSize].concat(e.inputShape);
    } else if (e.batchSize != null)
      throw new L("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    let n = e.dtype || "float32";
    this.batchInputShape = t, this.dtype = n, this.inputSpec = [{ shape: t }];
    let o = new on(this.dtype, this.batchInputShape, this, [], {}, this.name);
    o.nodeIndex = 0, o.tensorIndex = 0, new xl({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: [o], outputTensors: [o], inputMasks: [null], outputMasks: [null], inputShapes: [t], outputShapes: [t] });
  }
  apply(e, t) {
    throw new L(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return { batchInputShape: this.batchInputShape, dtype: this.dtype, sparse: this.sparse, name: this.name };
  }
};
di.className = "InputLayer";
ee.registerClass(di);
function Zg(r) {
  if (r.batchShape == null && r.shape == null)
    throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (r.batchShape != null && r.shape != null)
    throw new L("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  let e = r.batchShape;
  r.shape != null && e == null && (e = [null].concat(r.shape));
  let t = r.dtype;
  return t == null && (t = "float32"), new di({ batchInputShape: e, name: r.name, dtype: t, sparse: r.sparse }).inboundNodes[0].outputTensors[0];
}
async function hi(r) {
  if (r == null)
    return;
  let e = [], t = [], n = [];
  for (let o in r) {
    let s = r[o];
    if (typeof s != "number") {
      let a = s;
      e.push(a.data()), t.push(o), n.push(a);
    }
  }
  if (e.length > 0) {
    let o = await Promise.all(e);
    for (let s = 0; s < o.length; ++s)
      r[t[s]] = o[s][0];
    Ae(n);
  }
}
function Jg(r) {
  if (r != null)
    for (let e in r) {
      let t = r[e];
      typeof t != "number" && t.dispose();
    }
}
var oA;
(function(r) {
  r[r.SILENT = 0] = "SILENT", r[r.VERBOSE = 1] = "VERBOSE";
})(oA || (oA = {}));
var a5 = 125;
var yl = class {
  constructor() {
    this.validationData = null;
  }
  setParams(e) {
    this.params = e;
  }
  async onEpochBegin(e, t) {
  }
  async onEpochEnd(e, t) {
  }
  async onBatchBegin(e, t) {
  }
  async onBatchEnd(e, t) {
  }
  async onTrainBegin(e) {
  }
  async onTrainEnd(e) {
  }
  setModel(e) {
  }
};
var C_ = class {
  constructor(e, t = 10) {
    e == null && (e = []), this.callbacks = e, this.queueLength = t;
  }
  append(e) {
    this.callbacks.push(e);
  }
  setParams(e) {
    for (let t of this.callbacks)
      t.setParams(e);
  }
  setModel(e) {
    for (let t of this.callbacks)
      t.setModel(e);
  }
  async onEpochBegin(e, t) {
    t == null && (t = {});
    for (let n of this.callbacks)
      await n.onEpochBegin(e, t);
  }
  async onEpochEnd(e, t) {
    t == null && (t = {});
    for (let n of this.callbacks)
      await n.onEpochEnd(e, t);
  }
  async onBatchBegin(e, t) {
    t == null && (t = {});
    for (let n of this.callbacks)
      await n.onBatchBegin(e, t);
  }
  async onBatchEnd(e, t) {
    t == null && (t = {});
    for (let n of this.callbacks)
      await n.onBatchEnd(e, t);
  }
  async onTrainBegin(e) {
    e == null && (e = {});
    for (let t of this.callbacks)
      await t.onTrainBegin(e);
  }
  async onTrainEnd(e) {
    e == null && (e = {});
    for (let t of this.callbacks)
      await t.onTrainEnd(e);
  }
};
var sA = class extends yl {
  constructor() {
    super();
  }
  async onEpochBegin(e) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(e, t) {
    t == null && (t = {});
    let n = t.size == null ? 0 : t.size;
    this.seen += n;
    for (let o in t) {
      let s = t[o];
      if (typeof s == "number")
        this.totals.hasOwnProperty(o) || (this.totals[o] = 0), this.totals[o] = this.totals[o] + s * n;
      else {
        let a;
        o in this.totals ? a = this.totals[o] : this.totals[o] = 0;
        let i = z(() => Y(this.totals[o], F(s, n)));
        this.totals[o] = i, a != null && a.dispose();
      }
    }
  }
  async onEpochEnd(e, t) {
    if (t != null)
      for (let n of this.params.metrics)
        this.totals[n] != null && (typeof this.totals[n] == "number" ? t[n] = this.totals[n] / this.seen : z(() => {
          let o = F(ue(1, this.seen), this.totals[n]);
          t[n] = o, this.totals[n].dispose(), Dt(t[n]);
        }));
  }
};
var S_ = class extends yl {
  async onTrainBegin(e) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(e, t) {
    t == null && (t = {}), this.epoch.push(e);
    for (let n in t)
      this.history[n] == null && (this.history[n] = []), this.history[n].push(t[n]);
  }
  async syncData() {
    let e = [], t = [], n = [];
    for (let s in this.history) {
      let a = this.history[s];
      for (let i = 0; i < a.length; ++i)
        if (typeof a[i] != "number") {
          let l = a[i];
          e.push(l.data()), t.push(s), n.push(i);
        }
    }
    let o = await Promise.all(e);
    for (let s = 0; s < o.length; ++s)
      this.history[t[s]][n[s]].dispose(), this.history[t[s]][n[s]] = o[s][0];
  }
};
var I_ = class extends yl {
  constructor(e, t) {
    super();
    if (this.currentEpoch = 0, this.yieldEvery = t || "auto", this.yieldEvery === "auto" && (this.yieldEvery = a5), this.yieldEvery === "never" && e.onYield != null)
      throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    b.isNumber(this.yieldEvery) && (this.maybeWait = RE(this.maybeWait.bind(this), this.yieldEvery)), this.trainBegin = e.onTrainBegin, this.trainEnd = e.onTrainEnd, this.epochBegin = e.onEpochBegin, this.epochEnd = e.onEpochEnd, this.batchBegin = e.onBatchBegin, this.batchEnd = e.onBatchEnd, this.yield = e.onYield;
  }
  async maybeWait(e, t, n) {
    let o = [];
    this.yield != null && (await hi(n), o.push(this.yield(e, t, n))), o.push(xf()), await Promise.all(o);
  }
  async onEpochBegin(e, t) {
    this.currentEpoch = e, this.epochBegin != null && (await hi(t), await this.epochBegin(e, t));
  }
  async onEpochEnd(e, t) {
    let n = [];
    this.epochEnd != null && (await hi(t), n.push(this.epochEnd(e, t))), this.yieldEvery === "epoch" && n.push(xf()), await Promise.all(n);
  }
  async onBatchBegin(e, t) {
    this.batchBegin != null && (await hi(t), await this.batchBegin(e, t));
  }
  async onBatchEnd(e, t) {
    let n = [];
    this.batchEnd != null && (await hi(t), n.push(this.batchEnd(e, t))), this.yieldEvery === "batch" ? n.push(xf()) : b.isNumber(this.yieldEvery) && n.push(this.maybeWait(this.currentEpoch, e, t)), await Promise.all(n);
  }
  async onTrainBegin(e) {
    this.trainBegin != null && (await hi(e), await this.trainBegin(e));
  }
  async onTrainEnd(e) {
    this.trainEnd != null && (await hi(e), await this.trainEnd(e));
  }
};
function Qg(r, e) {
  return r == null && (r = {}), r instanceof yl ? [r] : Array.isArray(r) && r[0] instanceof yl ? r : gt(r).map((n) => new I_(n, e));
}
var kn = class {
  constructor() {
  }
  static registerCallbackConstructor(e, t) {
    b.assert(e >= 0 && Number.isInteger(e), () => `Verbosity level is expected to be an integer >= 0, but got ${e}`), kn.checkForDuplicate(t), kn.constructors[e] == null && (kn.constructors[e] = []), kn.constructors[e].push(t);
  }
  static checkForDuplicate(e) {
    for (let t in kn.constructors)
      kn.constructors[+t].forEach((o) => {
        if (o === e)
          throw new L("Duplicate callback constructor.");
      });
  }
  static clear() {
    kn.constructors = {};
  }
  static createCallbacks(e) {
    let t = [];
    for (let n in kn.constructors) {
      let o = +n;
      e >= o && t.push(...kn.constructors[o]);
    }
    return t.map((n) => new n());
  }
};
kn.constructors = {};
function ex(r, e, t, n, o, s, a, i, l) {
  let u = new S_(), c = [new sA(), ...kn.createCallbacks(e)];
  r != null && c.push(...r), c.push(u);
  let p = new C_(c);
  return p.setParams({ epochs: t, initialEpoch: n, samples: o, steps: s, batchSize: a, verbose: e, doValidation: i, metrics: l }), { callbackList: p, history: u };
}
function sn(r, e = {}, t = false) {
  return mi(r, ee.SerializationMap.getMap().classNameMap, e, "layer", t);
}
function Ff(r, e) {
  return z(() => {
    r.dtype !== "float32" && (r = J(r, "float32"));
    let t = me(Iu(r), e, true), n = _s(t.shape, or()), o = St(Rn(t, n));
    return ue(r, o);
  });
}
function gi(r, e) {
  return z(() => Ct(Iu(le(e, r)), -1));
}
function Mp(r, e) {
  return z(() => Ct(Tt(le(e, r)), -1));
}
function bl(r, e) {
  return z(() => {
    let t = le(r, e), n = Sr(Tt(r), or(), Number.MAX_VALUE), o = Tt(ue(t, n));
    return F(100, Ct(o, -1));
  });
}
function l5(r, e) {
  return z(() => {
    let t = Sr(e, or(), Number.MAX_VALUE), n = Ir(Y(1, t)), o = Sr(r, or(), Number.MAX_VALUE), s = Ir(Y(1, o));
    return Ct(Iu(le(n, s)), -1);
  });
}
function u5(r, e) {
  return z(() => {
    let t = Rn(0, le(1, F(r, e)));
    return Ct(Iu(t), -1);
  });
}
function c5(r, e) {
  return z(() => {
    let t = Rn(0, le(1, F(r, e)));
    return Ct(t, -1);
  });
}
function p5(r, e) {
  return z(() => {
    let t = me(F(r, e), -1), n = Vr(F(le(1, r), e), -1);
    return Rn(0, Y(1, le(n, t)));
  });
}
function m5(r, e) {
  return z(() => {
    let t = Math.log(2), n = le(e, r), o = le(Y(n, ui(F(-2, n))), t);
    return Ct(o, -1);
  });
}
function Tu(r, e, t = false) {
  return z(() => {
    if (t)
      e = hu(e);
    else {
      let n = me(e, e.shape.length - 1, true);
      e = ue(e, n);
    }
    return e = Sr(e, or(), 1 - or()), Ke(me(F(J(r, "float32"), Ir(e)), e.shape.length - 1));
  });
}
function Lp(r, e, t = false) {
  return z(() => {
    let n = J(va(qE(r)), "int32");
    e = Sr(e, or(), 1 - or());
    let o = e.shape, s = O(xa(n, o[o.length - 1]), o);
    return Tu(s, e, t);
  });
}
function f5(r, e) {
  if (!b.arraysEqual(r.shape, e.shape))
    throw new L(`logits and labels must have the same shape, but got shapes ${JSON.stringify(r.shape)} and ${JSON.stringify(e.shape)}`);
  return z(() => {
    let t = Or(e), n = Ke(Tt(e));
    return Y(le(t, F(e, r)), uu(tr(n)));
  });
}
function zp(r, e) {
  return z(() => {
    let t;
    return t = Sr(e, or(), 1 - or()), t = Ir(ue(t, le(1, t))), Ct(f5(r, t), -1);
  });
}
function d5(r, e) {
  return z(() => {
    let t = Sr(r, or(), 1), n = Sr(e, or(), 1);
    return me(F(r, Ir(ue(t, n))), -1);
  });
}
function h5(r, e) {
  return z(() => {
    let t = Ir(Y(or(), e));
    return Ct(le(e, F(r, t)), -1);
  });
}
function Of(r, e) {
  return z(() => {
    let t = Ff(r, -1), n = Ff(e, -1), o = F(t, n);
    return Ke(me(o, -1));
  });
}
var Pf = { meanSquaredError: gi, meanAbsoluteError: Mp, meanAbsolutePercentageError: bl, meanSquaredLogarithmicError: l5, squaredHinge: u5, hinge: c5, categoricalHinge: p5, logcosh: m5, categoricalCrossentropy: Tu, sparseCategoricalCrossentropy: Lp, binaryCrossentropy: zp, kullbackLeiblerDivergence: d5, poisson: h5, cosineProximity: Of };
function tx(r) {
  if (typeof r == "string") {
    if (r in Pf)
      return Pf[r];
    let e = `Unknown loss ${r}`;
    throw r.toLowerCase().includes("softmaxcrossentropy") && (e = `Unknown loss ${r}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new L(e);
  } else
    return r;
}
function Mf(r, e) {
  return z(() => {
    let t = F(0.5, xr(e)), n = Su(Ht(e, t), r.dtype);
    return Ct(Dr(r, n), -1);
  });
}
function Lf(r, e) {
  return z(() => Su(Dr(ba(r, -1), ba(e, -1)), "float32"));
}
function iA(r, e) {
  return z(() => J(me(Fr(Dr(r, 1), Dr(e, 1))), "float32"));
}
function g5(r, e) {
  return z(() => J(me(Fr(Dr(r, 1), Dr(e, 0))), "float32"));
}
function x5(r, e) {
  return z(() => J(me(Fr(Dr(r, 0), Dr(e, 1))), "float32"));
}
function N_(r, e) {
  return z(() => {
    let t = iA(r, e), n = x5(r, e), o = Y(t, n);
    return J(Et(Ht(o, 0), ue(t, o), 0), "float32");
  });
}
function aA(r, e) {
  return z(() => {
    let t = iA(r, e), n = g5(r, e), o = Y(t, n);
    return J(Et(Ht(o, 0), ue(t, o), 0), "float32");
  });
}
function rx(r, e) {
  return zp(r, e);
}
function nx(r, e) {
  return r.rank === e.rank && (r = en(r, [r.rank - 1])), e = ba(e, -1), e.dtype !== r.dtype && (e = J(e, r.dtype)), J(Dr(r, e), "float32");
}
var y5 = gi;
var b5 = gi;
var w5 = Mp;
var k5 = Mp;
var _5 = bl;
var v5 = bl;
var zf = Tu;
var C5 = Of;
var T_ = Lp;
var ox = { binaryAccuracy: Mf, categoricalAccuracy: Lf, precision: N_, categoricalCrossentropy: zf, sparseCategoricalCrossentropy: T_, mse: y5, MSE: b5, mae: w5, MAE: k5, mape: _5, MAPE: v5, cosine: C5 };
function lA(r) {
  if (typeof r == "string" && r in ox)
    return ox[r];
  if (typeof r != "string" && r != null)
    return r;
  throw new L(`Unknown metric ${r}`);
}
function Bf(r) {
  if (qn(r !== null, `Unknown LossOrMetricFn ${r}`), typeof r == "string")
    return r;
  {
    let e;
    for (let t of Object.keys(Pf))
      if (Pf[t] === r) {
        e = t;
        break;
      }
    if (e !== void 0)
      return e;
    for (let t of Object.keys(ox))
      if (ox[t] === r) {
        e = t;
        break;
      }
    return e !== void 0 ? e : r.name;
  }
}
function uA(r) {
  let e = { Adagrad: () => vu.adagrad(0.01), Adadelta: () => vu.adadelta(1, 0.95, or()), Adam: () => vu.adam(1e-3, 0.9, 0.999, or()), Adamax: () => vu.adamax(2e-3, 0.9, 0.999, or(), 0), RMSProp: () => vu.rmsprop(1e-3, 0.9, 0, or()), SGD: () => vu.sgd(0.01) };
  if (e.adagrad = e.Adagrad, e.adadelta = e.Adadelta, e.adam = e.Adam, e.adamax = e.Adamax, e.rmsprop = e.RMSProp, e.sgd = e.SGD, r in e)
    return e[r]();
  throw new L(`Unknown Optimizer ${r}`);
}
var cA = 1 * 1024 * 1024;
function E_(r, e, t = false) {
  if (r == null || typeof r != "object" || Object.getPrototypeOf(r) !== Object.prototype || !A_(r))
    throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (t) {
    let n = JSON.stringify(r);
    n.length > cA && console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${cA}.`);
  }
}
function A_(r) {
  if (r === null)
    return true;
  if (typeof r == "object")
    if (Object.getPrototypeOf(r) === Object.prototype) {
      let e = Object.keys(r);
      for (let t of e)
        if (typeof t != "string" || !A_(r[t]))
          return false;
      return true;
    } else if (Array.isArray(r)) {
      for (let e of r)
        if (!A_(e))
          return false;
      return true;
    } else
      return false;
  else {
    let e = typeof r;
    return e === "string" || e === "number" || e === "boolean";
  }
}
function pA(r, e, t, n = console.log) {
  let o = I5(r), s = ["Layer (type)", "Output shape", "Param #"];
  o ? (e = e || 65, t = t || [0.45, 0.85, 1]) : (e = e || 98, t = t || [0.33, 0.55, 0.67, 1]), t[t.length - 1] <= 1 && (t = t.map((c) => Math.floor(e * c)));
  let a;
  if (!o) {
    s.push("Receives inputs"), a = [];
    for (let c in r.nodesByDepth)
      a.push(...r.nodesByDepth[c]);
  }
  n("_".repeat(e)), sx(s, t, n), n("=".repeat(e));
  let i = r.layers;
  for (let c = 0; c < i.length; ++c)
    o ? N5(i[c], t, n) : T5(i[c], t, a, n), n((c === i.length - 1 ? "=" : "_").repeat(e));
  r.checkTrainableWeightsConsistency();
  let l = S5(r), u = Op(r.nonTrainableWeights);
  n(`Total params: ${l + u}`), n(`Trainable params: ${l}`), n(`Non-trainable params: ${u}`), n("_".repeat(e));
}
function S5(r) {
  let e;
  return r.collectedTrainableWeights != null ? e = Op(r.collectedTrainableWeights) : e = Op(r.trainableWeights), e;
}
function I5(r) {
  let e = true, t = [], n = [];
  for (let o in r.nodesByDepth)
    t.push(r.nodesByDepth[o]);
  for (let o of t) {
    if (o.length > 1 || o.length === 1 && o[0].inboundLayers.length > 1) {
      e = false;
      break;
    }
    n.push(...o);
  }
  if (e)
    for (let o of r.layers) {
      let s = false;
      for (let a of o.inboundNodes)
        if (n.indexOf(a) !== -1)
          if (s) {
            e = false;
            break;
          } else
            s = true;
      if (!e)
        break;
    }
  return e;
}
function sx(r, e, t = console.log) {
  let n = "";
  for (let o = 0; o < r.length; ++o)
    o > 0 && (n = n.slice(0, n.length - 1) + " "), n += r[o], n = n.slice(0, e[o]), n += " ".repeat(e[o] - n.length);
  t(n);
}
function N5(r, e, t) {
  let n;
  try {
    n = JSON.stringify(r.outputShape);
  } catch (i) {
    n = "multiple";
  }
  let o = r.name, s = r.getClassName(), a = [`${o} (${s})`, n, r.countParams().toString()];
  sx(a, e, t);
}
function T5(r, e, t, n) {
  let o;
  try {
    o = JSON.stringify(r.outputShape);
  } catch (c) {
    o = "multiple";
  }
  let s = [];
  for (let c of r.inboundNodes)
    if (!(t != null && t.length > 0 && t.indexOf(c) === -1))
      for (let p = 0; p < c.inboundLayers.length; ++p) {
        let m = c.inboundLayers[p].name, f = c.nodeIndices[p], d = c.tensorIndices[p];
        s.push(`${m}[${f}][${d}]`);
      }
  let a = r.name, i = r.getClassName(), l = s.length === 0 ? "" : s[0], u = [`${a} (${i})`, o, r.countParams().toString(), l];
  sx(u, e, n);
  for (let c = 1; c < s.length; ++c)
    sx(["", "", "", s[c]], e, n);
}
function mA(r, e, t) {
  return (r === "inboundNodes" || r === "outputLayers" || r === "inputLayers") && e === 0 && typeof t == "string";
}
function Eu(r, e) {
  if (r === null)
    return null;
  if (typeof r == "string")
    return Ta(r);
  if (typeof r == "number" || typeof r == "boolean")
    return r;
  if (r instanceof Array) {
    let t = [], n = r.length;
    for (let o = 0; o < n; ++o) {
      let s = r[o];
      mA(e, o, s) ? t.push(s) : t.push(Eu(s, e));
    }
    return t;
  } else {
    let t = {};
    for (let n of Object.keys(r)) {
      let o = r[n];
      if (n === "name" && typeof o == "string")
        t[n] = o;
      else {
        let s = Ta(n);
        t[s] = Eu(o, s);
      }
    }
    return t;
  }
}
function ix(r, e) {
  if (r == null)
    return null;
  if (typeof r == "string")
    return po(r);
  if (typeof r == "number" || typeof r == "boolean")
    return r;
  if (r instanceof Array) {
    let t = [], n = r.length;
    for (let o = 0; o < n; ++o) {
      let s = r[o];
      mA(e, o, s) ? t.push(s) : t.push(ix(s, e));
    }
    return t;
  } else {
    let t = {};
    for (let n of Object.keys(r)) {
      let o = r[n], s = po(n);
      (n === "name" || n === "className") && typeof o == "string" ? t[s] = o : t[s] = ix(o, n);
    }
    return t;
  }
}
var Vf = "3.9.0";
function E5(r, e) {
  if (r.dtype == null || r.dtype === e.dtype)
    return e;
  try {
    return J(e, r.dtype);
  } catch (t) {
    throw new L(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${r.name}' (${r.dtype}).`);
  }
}
var Is = class {
  constructor(e) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, e instanceof Is)
      for (let t in e.id2Value)
        this.id2Value[t] = e.id2Value[t], t in e.id2Mask && (this.id2Mask[t] = e.id2Mask[t]);
    else {
      if (e == null)
        return;
      for (let t of e)
        this.add(t.key, t.value);
    }
  }
  add(e, t, n) {
    if (this.id2Value[e.id] == null)
      this.id2Value[e.id] = E5(e, t), this.name2Id[e.name] = e.id, n != null && (this.id2Mask[e.id] = n);
    else
      throw new L(`Duplicate key: name=${e.name}, id=${e.id}`);
    return this;
  }
  addFeed(e) {
    this.add(e.key, e.value);
  }
  hasKey(e) {
    return this.id2Value[e.id] != null;
  }
  names() {
    return Object.keys(this.name2Id);
  }
  getValue(e) {
    if (e instanceof on) {
      if (this.id2Value[e.id] == null)
        throw new L(`Nonexistent key: ${e.name}`);
      return this.id2Value[e.id];
    } else {
      let t = this.name2Id[e];
      if (t == null)
        throw new L(`Feed dict has no SymbolicTensor name: ${e}`);
      return this.id2Value[t];
    }
  }
  getMask(e) {
    if (e instanceof on) {
      if (this.id2Value[e.id] == null)
        throw new L(`Nonexistent key: ${e.name}`);
      return this.id2Mask[e.id];
    } else {
      let t = this.name2Id[e];
      if (t == null)
        throw new L(`Feed dict has no SymbolicTensor name: ${e}`);
      return this.id2Mask[t];
    }
  }
  disposeMasks() {
    this.id2Mask != null && Ae(this.id2Mask);
  }
};
var $_ = {};
var fA = {};
function Au(r, e, t, n) {
  let o = t == null ? false : t.training, s = Array.isArray(r), a = s ? r : [r], i = a.map((d) => d.name), l = [], u = e.names();
  for (let d of i)
    u.indexOf(d) !== -1 ? l.push(e.getValue(d)) : l.push(null);
  n != null && (n.maxNumTensors = -1 / 0, n.minNumTensors = 1 / 0);
  let c = i.join(",") + "|" + e.names().join(","), p, m;
  if ($_[c] == null) {
    let d = A5(a, e);
    p = d.sorted, m = d.recipientCounts, $_[c] = p, fA[c] = m;
  }
  p = $_[c], m = {}, o || Object.assign(m, fA[c]);
  let f = new Is(e);
  for (let d = 0; d < p.length; ++d) {
    if (n != null) {
      let P = Wm().numTensors;
      P > n.maxNumTensors && (n.maxNumTensors = P), P < n.minNumTensors && (n.minNumTensors = P);
    }
    let h = p[d], g = h.sourceLayer;
    if (g instanceof di)
      continue;
    let y = [], w = [], x = [], k = false;
    for (let P of h.inputs) {
      let M = f.getValue(P), V = f.getMask(P);
      y.push(M), w.push(V), V != null && (k = true), o || (m[P.name]--, m[P.name] === 0 && !e.hasKey(P) && i.indexOf(P.name) === -1 && !M.isDisposed && P.sourceLayer.stateful !== true && x.push(M));
    }
    k && (t = t || {}, t.mask = w[0]);
    let C = gt(g.apply(y, t)), A = null;
    g.supportsMasking && (A = g.computeMask(y, w));
    let $ = D5(h), R = Array.isArray($) ? $ : [$];
    for (let P = 0; P < R.length; ++P) {
      f.hasKey(R[P]) || f.add(R[P], C[P], Array.isArray(A) ? A[0] : A);
      let M = i.indexOf(R[P].name);
      M !== -1 && (l[M] = C[P]);
    }
    o || Ae(x);
  }
  return f.disposeMasks(), s ? l : l[0];
}
function A5(r, e) {
  b.assert(r != null && r.length > 0, () => "Expected at least one fetch, got none");
  let t = [], n = {};
  if (r.length === 1) {
    let o = dA(r[0], e);
    t = o.sorted, n = o.recipientMap;
  } else {
    let o = new Set();
    for (let s of r) {
      let { sorted: a, recipientMap: i } = dA(s, e);
      for (let l of a)
        o.has(l.name) || (t.push(l), o.add(l.name));
      for (let l in i)
        n[l] == null && (n[l] = new Set()), i[l].forEach((u) => n[l].add(u));
    }
  }
  return { sorted: t, recipientCounts: $5(n) };
}
function $5(r) {
  let e = {};
  for (let t in r)
    e[t] = r[t].size;
  return e;
}
function dA(r, e) {
  let t = new Set(), n = [], o = {};
  for (let i of e.names())
    t.add(i);
  let s = [], a = [];
  for (s.push(r); s.length > 0; ) {
    let i = s[s.length - 1];
    if (t.has(i.name)) {
      s.pop();
      continue;
    }
    let l = a[a.length - 1] === s.length - 1;
    if (i.inputs.length === 0 || l)
      s.pop(), n.push(i), t.add(i.name), l && a.pop();
    else {
      a.push(s.length - 1);
      for (let u of i.inputs)
        o[u.name] == null && (o[u.name] = new Set()), o[u.name].add(i.name), !t.has(u.name) && s.push(u);
    }
  }
  return { sorted: n, recipientMap: o };
}
function D5(r) {
  let e;
  if (r.sourceLayer.inboundNodes.length === 1)
    e = r.sourceLayer.output;
  else {
    let t = null;
    for (let n = 0; n < r.sourceLayer.inboundNodes.length; ++n)
      for (let o of r.sourceLayer.inboundNodes[n].outputTensors)
        if (o.id === r.id) {
          t = n;
          break;
        }
    e = r.sourceLayer.getOutputAt(t);
  }
  return e;
}
var Kn = class extends Pe {
  constructor(e) {
    super({});
    if (this.containerNodes = new Set(), this.name = e.name, this.name == null) {
      let w = this.getClassName().toLowerCase();
      this.name = gl(w);
    }
    if (this.supportsMasking = false, this.trainable_ = true, Array.isArray(e.inputs) ? this.inputs = e.inputs.slice() : this.inputs = [e.inputs], Array.isArray(e.outputs) ? this.outputs = e.outputs.slice() : this.outputs = [e.outputs], fo(this.inputs).length !== this.inputs.length)
      throw new L(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((w) => w.name)}`);
    fo(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((w) => w.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (let w of this.outputs) {
      let x = w.sourceLayer, k = w.nodeIndex, C = w.tensorIndex;
      this.outputLayers.push(x), this.outputLayersNodeIndices.push(k), this.outputLayersTensorIndices.push(C);
    }
    for (let w of this.inputs) {
      let x = w.sourceLayer, k = w.nodeIndex, C = w.tensorIndex;
      qn(k === 0, "input layer has >1 nodes"), qn(C === 0, "input layer has >1 tensors"), this.inputLayers.push(x), this.inputLayersNodeIndices.push(k), this.inputLayersTensorIndices.push(C);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let w = 0; w < this.inputLayers.length; w++) {
      let x = this.inputLayers[w];
      if (!(x instanceof di))
        throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${w} (0-based) originates from layer type ${x.getClassName()}.`);
      this.inputNames.push(x.name), this.feedInputShapes.push(x.batchInputShape), this.feedInputNames.push(x.name);
    }
    for (let w of this.outputLayers)
      this.outputNames.push(w.name);
    this.internalInputShapes = this.inputs.map((w) => w.shape), this.internalOutputShapes = this.outputs.map((w) => w.shape);
    let t = {}, n = {}, o = {}, s = {}, a = {}, i = [], l = (w, x, k, C, A, $) => {
      (C == null || A == null || $ == null) && (C = w.sourceLayer, A = w.nodeIndex, $ = w.tensorIndex);
      let R = C.inboundNodes[A];
      if (k.indexOf(R) !== -1)
        throw new jr(`The tensor ${w.name} at layer "${C.name}" is part of a cycle.`);
      if (x.indexOf(R) !== -1)
        return;
      this.containerNodes.add(Kn.nodeKey(C, A)), C.id in a || (a[C.id] = Object.keys(a).length), k.indexOf(R) === -1 && k.push(R);
      let P = R.inboundLayers.length;
      for (let M = 0; M < P; M++) {
        let V = R.inputTensors[M], W = R.inboundLayers[M], G = R.nodeIndices[M], U = R.tensorIndices[M];
        l(V, x, k, W, G, U);
      }
      for (x.push(R); k.indexOf(R) >= 0; )
        k.splice(k.indexOf(R), 1);
      i.push(R);
    }, u = [], c = [];
    for (let w of this.outputs)
      l(w, u, c);
    let p = i.slice().reverse();
    for (let w of p) {
      n[w.id] = w, w.id in t || (t[w.id] = 0);
      let x = t[w.id], k = o[w.outboundLayer.id] == null ? 0 : o[w.outboundLayer.id];
      x = Math.max(x, k), o[w.outboundLayer.id] = x, s[w.outboundLayer.id] = w.outboundLayer, t[w.id] = x;
      for (let C = 0; C < w.inboundLayers.length; C++) {
        let A = w.inboundLayers[C], $ = w.nodeIndices[C], R = A.inboundNodes[$], P = t[R.id] == null ? 0 : t[R.id];
        t[R.id] = Math.max(x + 1, P), n[R.id] = R;
      }
    }
    let m = {};
    for (let w in t) {
      let x = t[w];
      x in m || (m[x] = []), m[x].push(n[w]);
    }
    let f = {};
    for (let w in o) {
      let x = o[w];
      x in f || (f[x] = []), f[x].push(s[w]);
    }
    let d = Object.keys(f).map((w) => parseInt(w, 10)).sort(bf);
    this.layers = [];
    for (let w of d) {
      let x = f[w];
      x.sort((k, C) => {
        let A = a[k.id], $ = a[C.id];
        return A < $ ? -1 : A > $ ? 1 : 0;
      });
      for (let k of x)
        k instanceof Kn && this.internalContainerRefs.push(k), this.layers.push(k);
    }
    this.layersByDepth = f, d = Object.keys(m).map((w) => parseInt(w, 10)).sort(bf);
    let h = this.inputs.slice(), g = [];
    for (let w of d)
      for (let x of m[w]) {
        let k = x.outboundLayer;
        if (k != null) {
          for (let C of x.inputTensors)
            if (h.indexOf(C) === -1)
              throw new jr(`Graph disconnected: cannot obtain value for tensor ${C} at layer "${k.name}". The following previous layers were accessed without issue: ${g}`);
          for (let C of x.outputTensors)
            h.push(C);
          g.push(k.name);
        }
      }
    this.nodesByDepth = m;
    let y = this.layers.map((w) => w.name);
    for (let w of y) {
      let x = y.filter((k) => k === w).length;
      if (x !== 1)
        throw new jr(`The name "${w}" is used ${x} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(y));
    }
    this.outboundNodes = [], this.inboundNodes = [], new xl({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: this.inputs.map((w) => null), outputMasks: this.outputs.map((w) => null), inputShapes: this.inputs.map((w) => w.shape), outputShapes: this.outputs.map((w) => w.shape) }), this.built = true, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Container '${this.name}' is already disposed.`);
  }
  dispose() {
    this.assertNotDisposed();
    let e = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount == 0) {
      for (let t of this.layers)
        e.numDisposedVariables += t.dispose().numDisposedVariables;
      for (let t of this.internalContainerRefs)
        e.numDisposedVariables += t.dispose().numDisposedVariables;
    }
    return e.refCountAfterDispose = this._refCount, e;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this.layers.forEach((t) => {
      t._trainableWeights.forEach((n) => n.trainable = e);
    }), this.trainable_ = e;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0)
      throw new L("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable)
      return [];
    let e = [];
    for (let t of this.layers)
      e = e.concat(t.trainableWeights);
    return e;
  }
  get nonTrainableWeights() {
    let e = [];
    for (let t of this.layers)
      e.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      let t = [];
      for (let n of this.layers)
        t.push(...n.trainableWeights);
      return t.concat(e);
    }
    return e;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  loadWeights(e, t = true) {
    let n = {}, o = 0;
    for (let a of this.layers)
      for (let i of a.weights) {
        if (n[i.originalName] != null)
          throw new L(`Duplicate weight name: ${i.originalName}`);
        n[i.originalName] = i, o++;
      }
    let s = [];
    for (let a in e) {
      let i = a;
      if (n[a] == null) {
        let l = a.split("/");
        i = l.slice(0, -2).concat([l[l.length - 1]]).join("/");
      }
      if (n[i] != null)
        s.push([n[i], e[a]]);
      else if (t)
        throw new L(`Provided weight data has no target variable: ${a}`);
      delete n[i];
    }
    if (t) {
      let a = [];
      for (let i in n)
        a.push(i);
      if (a.length > 0)
        throw new L(`${a.length} of ${o} weights are not set: ${a}`);
    }
    Pp(s);
  }
  updatedConfig() {
    let e = this.getConfig(), t = {};
    return t.className = this.getClassName(), t.config = e, t.kerasVersion = `tfjs-layers ${Vf}`, t.backend = "TensorFlow.js", t;
  }
  toJSON(e, t = true) {
    let n = ix(this.updatedConfig());
    return t ? JSON.stringify(n) : n;
  }
  call(e, t) {
    return z(() => {
      e = gt(e);
      let n = new Is();
      for (let o = 0; o < this.inputs.length; ++o)
        n.add(this.inputs[o], e[o]);
      return Au(this.outputs, n, t);
    });
  }
  computeMask(e, t) {
    return z(() => {
      e = gt(e);
      let n;
      return t == null ? n = co(null, e.length) : n = gt(t), this.runInternalGraph(e, n)[1];
    });
  }
  computeOutputShape(e) {
    let t = Fp(e);
    if (t.length !== this.inputLayers.length)
      throw new L(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);
    let n = {};
    for (let i = 0; i < t.length; i++) {
      let l = this.inputLayers[i], u = t[i], c = l.name + "_0_0";
      n[c] = u;
    }
    let o = Object.keys(this.nodesByDepth).map((i) => parseInt(i, 10)).sort(bf);
    if (o.length > 1)
      for (let i of o) {
        let l = this.nodesByDepth[i];
        for (let u of l) {
          let c = u.outboundLayer;
          if (this.inputLayers.map((h) => h.id).indexOf(c.id) !== -1)
            continue;
          let p = [];
          for (let h = 0; h < u.inboundLayers.length; h++) {
            let g = u.inboundLayers[h], y = u.nodeIndices[h], w = u.tensorIndices[h], x = `${g.name}_${y}_${w}`, k = n[x];
            p.push(k);
          }
          let m = c.computeOutputShape(yr(p)), f = Fp(m), d = c.inboundNodes.indexOf(u);
          for (let h = 0; h < f.length; h++) {
            let g = `${c.name}_${d}_${h}`;
            n[g] = f[h];
          }
        }
      }
    let s = [], a = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      let l = this.outputLayers[i], u = this.outputLayersNodeIndices[i], c = this.outputLayersTensorIndices[i], p = `${l.name}_${u}_${c}`;
      a.push(p);
    }
    for (let i = 0; i < a.length; i++) {
      let l = a[i];
      qn(l in n), s.push(n[l]);
    }
    return yr(s);
  }
  runInternalGraph(e, t) {
    t == null && (t = co(null, e.length));
    let n = {};
    for (let l = 0; l < this.inputs.length; ++l) {
      let u = this.inputs[l], c = e[l], p = t[l];
      n[u.id] = [c, p];
    }
    let o = Object.keys(this.nodesByDepth).map((l) => parseInt(l, 10)).sort(bf);
    for (let l of o) {
      let u = this.nodesByDepth[l];
      for (let c of u) {
        let p = c.outboundLayer, m = c.inputTensors, f = c.outputTensors, d = new Array();
        for (let h of m)
          h.id in n && d.push(n[h.id]);
        if (d.length === m.length) {
          let h = {}, g, y, w, x;
          if (c.callArgs != null && (h = c.callArgs), d.length === 1) {
            let [k, C] = d[0];
            h.mask == null && (h.mask = C), w = gt(p.call(k, h)), x = gt(p.computeMask(k, C)), g = [k], y = [C];
          } else
            g = d.map((k) => k[0]), y = d.map((k) => k[1]), h.mask == null && (h.mask = y), w = gt(p.call(g, h)), x = gt(p.computeMask(g, y));
          if (p.activityRegularizer)
            throw new Ne("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let k = 0; k < f.length; ++k) {
            let C = f[k], A = w[k], $ = x[k];
            n[C.id] = [A, $];
          }
        }
      }
    }
    let s = [], a = [], i = [];
    for (let l of this.outputs) {
      qn(l.id in n, `Could not compute output ${l.name} : ${l.id}`);
      let [u, c] = n[l.id];
      i.push(u.shape), s.push(u), a.push(c);
    }
    return [s, a, i];
  }
  buildNodeConversionMap(e) {
    let t = {}, n;
    for (let o of this.layers) {
      n = o instanceof Kn ? 1 : 0;
      for (let s = 0; s < o.inboundNodes.length; s++) {
        let a = Kn.nodeKey(o, s);
        this.containerNodes.has(a) && (t[a] = n, n += 1);
      }
    }
    return t;
  }
  getLayer(e, t) {
    if (t != null) {
      if (this.layers.length <= t)
        throw new L(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);
      return this.layers[t];
    } else if (e == null)
      throw new L("Provide either a layer name or layer index");
    for (let n of this.layers)
      if (n.name === e)
        return n;
    throw new L(`No such layer: ${e}`);
  }
  calculateLosses() {
    return z(() => {
      let e = [];
      for (let t of this.layers)
        for (let n = 0; n < t.inboundNodes.length; ++n) {
          let o = Kn.nodeKey(t, n);
          this.containerNodes.has(o) && e.push(...t.calculateLosses());
        }
      return e;
    });
  }
  getConfig() {
    let e = { name: this.name }, t = this.buildNodeConversionMap(this.layers), n = [];
    for (let a of this.layers) {
      let i = a.getClassName(), l = a.getConfig(), u = [];
      for (let p = 0; p < a.inboundNodes.length; p++) {
        let m = a.inboundNodes[p], f = Kn.nodeKey(a, p), d = {};
        if (this.containerNodes.has(f)) {
          if (m.callArgs)
            try {
              JSON.stringify(m.callArgs), d = m.callArgs;
            } catch (h) {
              console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${m.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), d = {};
            }
          if (m.inboundLayers.length > 0) {
            let h = [];
            for (let g = 0; g < m.inboundLayers.length; g++) {
              let y = m.inboundLayers[g], w = m.nodeIndices[g], x = m.tensorIndices[g], k = Kn.nodeKey(y, w), C = t[k];
              C == null && (C = 0), h.push([y.name, C, x, d]);
            }
            u.push(h);
          }
        }
      }
      let c = {};
      c.name = a.name, c.className = i, c.config = l, c.inboundNodes = u, n.push(c);
    }
    e.layers = n;
    let o = [];
    for (let a = 0; a < this.inputLayers.length; a++) {
      let i = this.inputLayers[a], l = this.inputLayersNodeIndices[a], u = Kn.nodeKey(i, l);
      if (!this.containerNodes.has(u))
        continue;
      let c = t[u];
      c == null && (c = 0);
      let p = this.inputLayersTensorIndices[a];
      o.push([i.name, c, p]);
    }
    e.inputLayers = o;
    let s = [];
    for (let a = 0; a < this.outputLayers.length; a++) {
      let i = this.outputLayers[a], l = this.outputLayersNodeIndices[a], u = Kn.nodeKey(i, l);
      if (!this.containerNodes.has(u))
        continue;
      let c = t[u];
      c == null && (c = 0);
      let p = this.outputLayersTensorIndices[a];
      s.push([i.name, c, p]);
    }
    return e.outputLayers = s, e;
  }
  static fromConfig(e, t, n = {}, o = false) {
    let s = {}, a = {};
    function i(g, y) {
      g.name in a ? a[g.name].push(y) : a[g.name] = [y];
    }
    function l(g, y) {
      let w = [], x;
      for (let k of y) {
        let C = k[0], A = k[1], $ = k[2];
        if (x = k[3] == null ? {} : k[3], !(C in s)) {
          i(g, y);
          return;
        }
        let R = s[C];
        if (R.inboundNodes.length <= A) {
          i(g, y);
          return;
        }
        let P = R.inboundNodes[A];
        w.push(P.outputTensors[$]);
      }
      w.length > 0 && g.apply(yr(w), x);
    }
    function u(g) {
      let y = g.name, w = sn(g, t.customObjects != null ? t.customObjects : {});
      w.setFastWeightInitDuringBuild(o), s[y] = w, g.inboundNodes.forEach((k) => {
        if (!(k instanceof Array))
          throw new L(`Corrupted configuration, expected array for nodeData: ${k}`);
        i(w, k);
      });
    }
    let c = t.name, p = t.layers;
    for (let g of p)
      u(g);
    for (; !$E(a); )
      for (let g of p) {
        let y = s[g.name];
        if (y.name in a) {
          let w = a[y.name];
          delete a[y.name];
          for (let x of w)
            l(y, x);
        }
      }
    let m = [], f = [], d = t.inputLayers;
    for (let g of d) {
      let y = g[0], w = g[1], x = g[2];
      qn(y in s);
      let C = s[y].inboundNodes[w].outputTensors;
      m.push(C[x]);
    }
    let h = t.outputLayers;
    for (let g of h) {
      let y = g[0], w = g[1], x = g[2];
      qn(y in s);
      let C = s[y].inboundNodes[w].outputTensors;
      f.push(C[x]);
    }
    return new e({ inputs: m, outputs: f, name: c });
  }
  get stateful() {
    if (this._stateful)
      throw new L("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (let e of this.layers)
      if (e.stateful)
        return true;
    return false;
  }
  resetStates() {
    z(() => {
      this.layers.forEach((e) => {
        e.stateful && e.resetStates();
      });
    });
  }
};
function R5(r, e, t) {
  let n = e.length;
  if (r == null || Array.isArray(r) && r.length === 0)
    return e.map((o) => null);
  if (n === 1)
    return Array.isArray(r) && r.length === 1 ? r : typeof r == "object" && e[0] in r ? [r[e[0]]] : [r];
  if (Array.isArray(r)) {
    if (r.length !== n)
      throw new Error(`Provided ${t} is an array of ${r.length} element(s), but the model has ${n} outputs. Make sure a set of weights is provided for each model output.`);
    return r;
  } else if (typeof r == "object" && Object.keys(r).length > 0 && typeof r[Object.keys(r)[0]] == "object") {
    let o = [];
    return e.forEach((s) => {
      s in r ? o.push(r[s]) : o.push(null);
    }), o;
  } else
    throw new Error(`The model has multiple (${n}) outputs, so ${t} must be either an array with ${n} elements or an object with ${e} keys. Provided ${t} not understood: ${JSON.stringify(r)}`);
}
function ax(r, e) {
  return R5(r, e, "classWeight");
}
async function lx(r, e, t, n) {
  if (e != null || n != null)
    throw new Error("Support sampleWeight is not implemented yet");
  if (t != null) {
    let o = z(() => {
      if (r.shape.length === 1)
        return hn(r);
      if (r.shape.length === 2) {
        if (r.shape[1] > 1)
          return ba(r, 1);
        if (r.shape[1] === 1)
          return O(r, [r.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${r.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      } else
        throw new Error(`Unexpected rank of target (y) tensor (${r.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), s = Array.from(await o.data());
    Ae(o);
    let a = [];
    return s.forEach((i) => {
      if (t[i] == null)
        throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);
      a.push(t[i]);
    }), At(a, "float32");
  } else
    return null;
}
function hA(r, e) {
  return F(r, e);
}
var F5 = 32;
function gA(r, e) {
  let t, n, o = e;
  t = o.xs, n = o.ys, b.assert(t != null && n != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`);
  let s = xA("input", r.inputNames, t), a = xA("output", r.outputNames, n), i = s[0].shape[0];
  b.assert(s.length === r.inputs.length, () => `LayersModel has ${r.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(r.inputNames)})`), b.assert(a.length === r.outputs.length, () => `LayersModel has ${r.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: ${JSON.stringify(r.outputNames)})`);
  for (let l = 0; l < s.length; l++)
    b.assert(s[l].shape[0] === i, () => `Batch size mismatch: input ${r.inputNames[l]} has ${s[l].shape[0]}; expected  ${i} based on input ${r.inputNames[0]}.`);
  for (let l = 0; l < a.length; l++)
    b.assert(a[l].shape[0] === i, () => `Batch size mismatch: output ${r.outputNames[l]} has ${a[l].shape[0]}; expected  ${i} based on input ${r.inputNames[0]}.`);
  return { xs: s, ys: a };
}
function xA(r, e, t) {
  if (t instanceof je)
    return [t];
  if (Array.isArray(t))
    return b.assert(t.length === e.length, () => `Received an array of ${t.length} Tensors, but expected ${e.length} to match the ${r} keys ${e}.`), t;
  {
    let n = [];
    for (let o of e) {
      if (t[o] == null)
        throw new L(`The feature data generated by the dataset lacks the required ${r} key '${o}'.`);
      n.push(t[o]);
    }
    return n;
  }
}
function O5(r) {
  if (r.length === 3)
    throw new Ne("Validation with sample weights is not implemented yet.");
  return { xs: r[0], ys: r[1] };
}
async function yA(r, e, t) {
  let n = t.batchesPerEpoch != null;
  if (b.assert(r.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), b.assert(t != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), b.assert(t.epochs != null && t.epochs > 0 && Number.isInteger(t.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${t.epochs}`), b.assert(!n || t.batchesPerEpoch > 0 && Number.isInteger(t.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${t.batchesPerEpoch}`), b.assert(t.validationSplit == null, () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."), r.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  r.isTraining = true;
  try {
    let o = t.validationData != null, s, a;
    if (o)
      if (bA(t.validationData))
        b.assert(t.validationBatches == null || t.validationBatches > 0 && Number.isInteger(t.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${t.validationBatches}`);
      else {
        let g = O5(t.validationData);
        s = g.xs, a = g.ys;
      }
    let i = r.makeTrainFunction(), l = r.getDedupedMetricsNames(), u;
    o ? u = l.slice().concat(l.map((g) => "val_" + g)) : u = l.slice();
    let c = Qg(t.callbacks, t.yieldEvery), p = t.verbose == null ? 1 : t.verbose, { callbackList: m, history: f } = ex(c, p, t.epochs, null, null, P5(e, t), null, o, u);
    m.setModel(r), r.history = f, await m.onTrainBegin(), r.stopTraining_ = false;
    let d = t.initialEpoch == null ? 0 : t.initialEpoch, h = await e.iterator();
    for (; d < t.epochs; ) {
      let g = {};
      await m.onEpochBegin(d);
      let y = 0, w = 0;
      for (n || (h = await e.iterator()); n ? y < t.batchesPerEpoch : true; ) {
        let x = await h.next();
        if (n && x.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${t.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${t.batchesPerEpoch * t.epochs} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
        if (x.value != null) {
          let { xs: k, ys: C } = gA(r, x.value), A = {};
          A.batch = w, A.size = k[0].shape[0], await m.onBatchBegin(w, A);
          let $ = [];
          if (t.classWeight != null) {
            let M = ax(t.classWeight, r.outputNames);
            for (let V = 0; V < M.length; ++V)
              $.push(await lx(C[V], null, M[V]));
          }
          let R = k.concat(C).concat($), P = i(R);
          Ae(R);
          for (let M = 0; M < l.length; ++M) {
            let V = l[M], W = P[M];
            A[V] = W, Dt(W);
          }
          await m.onBatchEnd(w, A), Jg(A), w++, y++;
        }
        if (n ? y >= t.batchesPerEpoch : x.done) {
          if (o) {
            let k;
            bA(t.validationData) ? k = gt(await r.evaluateDataset(t.validationData, { batches: t.validationBatches })) : k = gt(r.evaluate(s, a, { batchSize: t.validationBatchSize == null ? F5 : t.validationBatchSize, verbose: 0 }));
            for (let C = 0; C < r.metricsNames.length; ++C)
              g[`val_${r.metricsNames[C]}`] = k[C];
          }
          break;
        }
        if (r.stopTraining_)
          break;
      }
      if (await m.onEpochEnd(d, g), d++, r.stopTraining_)
        break;
    }
    return await m.onTrainEnd(), await r.history.syncData(), r.history;
  } finally {
    r.isTraining = false;
  }
}
function P5(r, e) {
  let t = null;
  return e.batchesPerEpoch != null ? t = e.batchesPerEpoch : Number.isFinite(r.size) && (t = r.size), t;
}
function bA(r) {
  return typeof r.iterator == "function";
}
function M5(r) {
  return typeof r.next == "function";
}
async function wA(r, e, t) {
  t = t || {};
  let n = t.batches != null, o = r.testFunction, s = [];
  if (t.verbose > 0)
    throw new Ne("Verbose mode is not implemented yet.");
  b.assert(!n || t.batches > 0 && Number.isInteger(t.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(t.batches)}`);
  let a = M5(e) ? e : await e.iterator(), i = 0, l = 0;
  for (; n ? l < t.batches : true; ) {
    let u = await a.next();
    if (s = z(() => {
      if (u.value) {
        let { xs: c, ys: p } = gA(r, u.value), m = c.concat(p), f = z(() => o(m));
        if (Ae(m), l === 0)
          for (let h = 0; h < f.length; ++h)
            s.push(ce(0));
        let d = m[0].shape[0];
        for (let h = 0; h < f.length; ++h) {
          let g = f[h], y = s[h];
          s[h] = z(() => Y(s[h], F(d, g))), l > 0 && Ae(y);
        }
        Ae(f), i += d, ++l;
      }
      return s;
    }), u.done) {
      n && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${t.batches} batches). You may need to use the repeat() function when building your dataset.`);
      break;
    }
  }
  for (let u = 0; u < s.length; ++u) {
    let c = s[u];
    s[u] = ue(s[u], i), Ae(c);
  }
  return yr(s);
}
function ux(r) {
  b.assert(r > 0 && Number.isInteger(r), () => `batchSize is required to be a positive integer, but got ${r}`);
}
function Bp(r, e, t) {
  return r == null ? [null] : Array.isArray(r) ? r.map((n) => Aa(n, e, t - e)) : Aa(r, e, t - e);
}
function cx(r, e) {
  return z(() => r == null ? null : Array.isArray(r) ? r.map((t) => cx(t, e)) : Ug(r, e.dtype === "int32" ? e : J(e, "int32")));
}
function px(r, e) {
  let t = [], n = 0, o = null;
  for (; n < r; )
    o = n + e, o >= r && (o = r), t.push([n, o]), n = o;
  return t;
}
async function L5(r, e, t, n, o, s, a, i, l, u, c, p, m, f, d) {
  o == null && (o = 32), s == null && (s = 1), c == null && (c = true), m == null && (m = 0);
  let h = false;
  if (l != null && u != null && (h = true), d != null && (h = true, f == null))
    throw new L("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
  let g = r.checkNumSamples(t, o, f, "steps_per_epoch"), y;
  g != null && (y = Gr(0, g)), a == null && (a = 1);
  let { callbackList: w, history: x } = ex(i, a, s, m, g, f, o, h, p);
  w.setModel(r), r.history = x, await w.onTrainBegin(), r.stopTraining_ = false;
  for (let k = m; k < s; ++k) {
    await w.onEpochBegin(k);
    let C = {};
    if (f != null)
      throw new Ne("stepsPerEpoch mode is not implemented yet.");
    {
      if (c === "batch")
        throw new Ne("batch shuffling is not implemneted yet");
      c && b.shuffle(y);
      let A = At(y), $ = px(g, o);
      for (let R = 0; R < $.length; ++R) {
        let P = {};
        if (await w.onBatchBegin(R, P), z(() => {
          let M = $[R][0], V = $[R][1], W = Aa(A, M, V - M);
          P.batch = R, P.size = V - M;
          let G = cx(t, W), U = e(G);
          for (let H = 0; H < n.length; ++H) {
            let K = n[H], re = U[H];
            P[K] = re, Dt(re);
          }
          if (R === $.length - 1 && h) {
            let H = r.testLoop(l, u, o);
            for (let K = 0; K < n.length; ++K) {
              let re = n[K], X = H[K];
              Dt(X), C["val_" + re] = X;
            }
          }
        }), await w.onBatchEnd(R, P), Jg(P), r.stopTraining_)
          break;
      }
      A.dispose();
    }
    if (await w.onEpochEnd(k, C), r.stopTraining_)
      break;
  }
  return await w.onTrainEnd(), await r.history.syncData(), r.history;
}
async function kA(r, e, t, n = {}) {
  if (r.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  r.isTraining = true;
  let o, s, a, i, l, u, c;
  try {
    let p = n.batchSize == null ? 32 : n.batchSize;
    ux(p);
    let m = false, f = await r.standardizeUserData(e, t, n.sampleWeight, n.classWeight, m, p);
    o = f[0], s = f[1], c = f[2];
    let d = false, h;
    if (n.validationData != null && n.validationData.length > 0) {
      if (d = true, n.validationData.length === 2)
        a = n.validationData[0], i = n.validationData[1];
      else
        throw n.validationData.length === 3 ? new Ne("validationData including sample weights is not supported yet.") : new L(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);
      let $ = true, R = await r.standardizeUserData(a, i, null, null, $, p);
      l = R[0], u = R[1], h = l.concat(u);
    } else if (n.validationSplit != null && n.validationSplit > 0 && n.validationSplit < 1) {
      d = true;
      let $ = Math.floor(o[0].shape[0] * (1 - n.validationSplit)), R = o[0].shape[0];
      l = Bp(o, $, R), o = Bp(o, 0, $), u = Bp(s, $, R), s = Bp(s, 0, $), h = l.concat(u);
    } else
      n.validationSteps != null && (d = true);
    let g = o.concat(s).concat(c);
    r.checkTrainableWeightsConsistency();
    let y = r.makeTrainFunction(), w = r.getDedupedMetricsNames(), x, k;
    d ? (r.makeTestFunction(), x = r.testFunction, k = w.slice().concat(w.map(($) => "val_" + $))) : (x = null, h = [], k = w.slice());
    let C = Qg(n.callbacks, n.yieldEvery);
    return await L5(r, y, g, w, p, n.epochs, n.verbose, C, x, h, n.shuffle, k, n.initialEpoch, null, null);
  } finally {
    r.isTraining = false, wl(o, e), wl(s, t), wl(l, a), wl(u, i), c != null && Ae(c);
  }
}
function D_(r) {
  let e = [];
  r instanceof je && (r = [r]);
  for (let t = 0; t < r.length; ++t) {
    let n = r[t];
    if (n.rank === 1)
      e.push(Ea(n, 1));
    else {
      if (n.rank === 0)
        throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      e.push(n);
    }
  }
  return e;
}
function wl(r, e) {
  if (r == null)
    return;
  let t = [];
  if (e instanceof je)
    t.push(e.id);
  else if (Array.isArray(e))
    e.forEach((o) => t.push(o.id));
  else if (e != null)
    for (let o in e) {
      let s = e[o];
      t.push(s.id);
    }
  let n = [];
  if (r instanceof je)
    t.indexOf(r.id) === -1 && n.push(r);
  else if (Array.isArray(r))
    r.forEach((o) => {
      t.indexOf(o.id) === -1 && n.push(o);
    });
  else if (r != null)
    for (let o in r) {
      let s = r[o];
      t.indexOf(s.id) === -1 && n.push(s);
    }
  n.forEach((o) => {
    o.isDisposed || o.dispose();
  });
}
function z5(r) {
  return r instanceof je;
}
function R_(r) {
  return Array.isArray(r);
}
function _A(r) {
  return !z5(r) && !R_(r);
}
function vA(r, e, t, n = true, o = "") {
  if (e == null || e.length === 0) {
    if (r != null) {
      let a = false;
      if (R_(r) && r.length > 0)
        a = true;
      else if (_A(r)) {
        for (let i in r)
          if (r.hasOwnProperty(i)) {
            a = true;
            break;
          }
      } else
        a = true;
      if (a)
        throw new L(`Error when checking model ${o} expected no data, but got ${r}`);
    }
    return [];
  }
  if (r == null)
    return e.map((a) => null);
  let s;
  if (_A(r)) {
    r = r, s = [];
    for (let a of e) {
      if (r[a] == null)
        throw new L(`No data provided for "${a}". Need data for each key in: ${e}`);
      s.push(r[a]);
    }
  } else if (R_(r)) {
    if (r = r, r.length !== e.length)
      throw new L(`Error when checking model ${o}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${r}`);
    s = r;
  } else {
    if (r = r, e.length > 1)
      throw new L(`The model ${o} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${r.shape}`);
    s = [r];
  }
  if (s = D_(s), t != null)
    for (let a = 0; a < e.length; ++a) {
      if (t[a] == null)
        continue;
      let i = s[a];
      if (i.shape.length !== t[a].length)
        throw new L(`Error when checking ${o}: expected ${e[a]} to have ${t[a].length} dimension(s). but got array with shape ${i.shape}`);
      for (let l = 0; l < t[a].length; ++l) {
        if (l === 0 && !n)
          continue;
        let u = i.shape[l], c = t[a][l];
        if (c != null && c >= 0 && u !== c)
          throw new L(`${o} expected a batch of elements where each example has shape [${t[a].slice(1, t[a].length)}] (i.e.,tensor shape [*,${t[a].slice(1, t[a].length)}]) but the ${o} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1, i.shape.length)}] (tensor shape [${i.shape}])`);
      }
    }
  return s;
}
function B5(r, e, t) {
  let n = fo(r.map((s) => s.shape[0]));
  n.sort();
  let o = fo(e.map((s) => s.shape[0]));
  if (o.sort(), n.length > 1)
    throw new L(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(r.map((s) => s.shape))}`);
  if (o.length > 1)
    throw new L(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((s) => s.shape))}`);
  if (n.length > 0 && o.length > 0 && !b.arraysEqual(n, o))
    throw new L(`Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${o[0]} target sample(s).`);
}
function V5(r, e, t) {
  let n = [gi, zp, Tu];
  for (let o = 0; o < r.length; ++o) {
    let s = r[o], a = e[o], i = t[o];
    if (a != null) {
      if (a === Tu && s.shape[s.shape.length - 1] === 1)
        throw new L(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
      if (n.indexOf(a) !== -1) {
        let l = s.shape.slice(1), u = i.slice(1);
        for (let c = 0; c < l.length; ++c) {
          let p = l[c], m = u[c];
          if (m != null && p !== m)
            throw new L(`A target Tensor with shape ${s.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
function CA(r, e, t, n = true, o = "") {
  let s;
  if (Array.isArray(r)) {
    if (r.length !== e.length)
      throw new L(`Error when checking model ${o}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${r.length} Tensors(s).`);
    s = r;
  } else {
    if (e.length > 1)
      throw new L(`The model expects ${e.length} ${o} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(r.shape)}.`);
    s = [r];
  }
  if (t != null)
    for (let a = 0; a < e.length; ++a) {
      if (t[a] == null)
        continue;
      let i = s[a];
      if (i.shape.length !== t[a].length)
        throw new L(`Error when checking ${o}: expected ${e[a]} to have ${t[a].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);
      for (let l = 0; l < t[a].length; ++l) {
        if (l === 0 && !n)
          continue;
        let u = i.shape[l], c = t[a][l];
        if (c != null && c !== u)
          throw new L(`Error when checking ${o}: expected ${e[a]} to have shape ${JSON.stringify(t[a])} but got array with shape ${JSON.stringify(i.shape)}.`);
      }
    }
}
function W5(r, e) {
  if (r == null || Array.isArray(r) && r.length === 0)
    return e.map((n) => []);
  let t;
  if (typeof r == "string" || typeof r == "function")
    t = [r];
  else if (Array.isArray(r) || typeof r == "object")
    t = r;
  else
    throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${r}`);
  if (Array.isArray(t))
    return e.map((n) => t);
  {
    let n = [];
    for (let o of e) {
      let s = t.hasOwnProperty(o) ? t[o] : [];
      Array.isArray(s) || (s = [s]), n.push(s);
    }
    return n;
  }
}
var j5 = "layers-model";
var Xn = class extends Kn {
  constructor(e) {
    super(e);
    this.isTraining = false;
  }
  summary(e, t, n = console.log) {
    if (!this.built)
      throw new L("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    pA(this, e, t, n);
  }
  compile(e) {
    if (e.loss == null && (e.loss = []), this.loss = e.loss, typeof e.optimizer == "string")
      this.optimizer_ = uA(e.optimizer), this.isOptimizerOwned = true;
    else {
      if (!(e.optimizer instanceof Wr))
        throw new L("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = e.optimizer, this.isOptimizerOwned = false;
    }
    let t = [];
    if (!Array.isArray(e.loss) && typeof e.loss != "string" && typeof e.loss != "function") {
      e.loss = e.loss;
      for (let a in e.loss)
        if (this.outputNames.indexOf(a) === -1)
          throw new L(`Unknown entry in loss dictionary: "${a}". Only expected the following keys: ${this.outputNames}`);
      for (let a of this.outputNames)
        e.loss[a] == null && console.warn(`Output "${a}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${a} during training`), t.push(tx(e.loss[a]));
    } else if (Array.isArray(e.loss)) {
      if (e.loss.length !== this.outputs.length)
        throw new L(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);
      t = e.loss.map((i) => tx(i));
    } else {
      let a = tx(e.loss);
      this.outputs.forEach((i) => {
        t.push(a);
      });
    }
    this.lossFunctions = t, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let a = 0; a < this.outputs.length; ++a) {
      let i = this.internalOutputShapes[a], l = this.outputNames[a];
      this.feedOutputNames.push(l), this.feedOutputShapes.push(i), this.feedLossFns.push(this.lossFunctions[a]);
    }
    let n = [];
    this.metrics = e.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], Cs("loss", () => {
      for (let a = 0; a < this.outputs.length; ++a) {
        if (n.indexOf(a) !== -1)
          continue;
        let i = this.lossFunctions[a];
        this.outputs.length > 1 && (this.metricsTensors.push([i, a]), this.metricsNames.push(this.outputNames[a] + "_loss"));
      }
    });
    let o = W5(e.metrics, this.outputNames), s = (a, i, l) => {
      this.outputNames.length > 1 && (i = this.outputNames[a] + "_" + i), this.metricsNames.push(i), this.metricsTensors.push([l, a]);
    };
    Cs("metric", () => {
      for (let a = 0; a < this.outputs.length; ++a) {
        if (n.indexOf(a) !== -1)
          continue;
        let i = o[a];
        ((u) => {
          let c = "", p, m, f;
          for (let d of u) {
            if (typeof d == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(d) !== -1) {
              let g = this.internalOutputShapes[a];
              g[g.length - 1] === 1 || this.lossFunctions[a] === zp ? ["accuracy", "acc"].indexOf(d) !== -1 ? m = Mf : ["crossentropy", "ce"].indexOf(d) !== -1 && (m = rx) : this.lossFunctions[a] === Lp ? ["accuracy", "acc"].indexOf(d) !== -1 ? m = nx : ["crossentropy", "ce"].indexOf(d) !== -1 && (m = T_) : ["accuracy", "acc"].indexOf(d) !== -1 ? m = Lf : ["crossentropy", "ce"].indexOf(d) !== -1 && (m = zf);
              let y;
              ["accuracy", "acc"].indexOf(d) !== -1 ? y = "acc" : ["crossentropy", "ce"].indexOf(d) !== -1 && (y = "ce"), f = m, p = c + y;
            } else
              f = lA(d), p = c + Bf(d);
            let h;
            Cs(p, () => {
              h = f;
            }), s(a, p, h);
          }
        })(i);
      }
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  evaluate(e, t, n = {}) {
    let o = n.batchSize == null ? 32 : n.batchSize;
    ux(o);
    let s = true, a = this.standardizeUserDataXY(e, t, s, o);
    try {
      let i = a[0].concat(a[1]);
      this.makeTestFunction();
      let l = this.testFunction, u = this.testLoop(l, i, o, n.verbose, n.steps);
      return yr(u);
    } finally {
      wl(a[0], e), wl(a[1], t);
    }
  }
  async evaluateDataset(e, t) {
    return this.makeTestFunction(), wA(this, e, t);
  }
  checkNumSamples(e, t, n, o = "steps") {
    let s;
    if (n != null) {
      if (s = null, t != null)
        throw new L(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${t}`);
    } else if (e != null)
      Array.isArray(e) ? s = e[0].shape[0] : s = e.shape[0];
    else
      throw new L(`Either the input data should have a defined shape, or ${o} shoud be specified.`);
    return s;
  }
  execute(e, t) {
    if (Array.isArray(t) && t.length === 0)
      throw new L("`outputs` is an empty Array, which is not allowed.");
    let n = Array.isArray(t), o = n ? t : [t], s = this.retrieveSymbolicTensors(o), a = new Is();
    if (e instanceof je && (e = [e]), Array.isArray(e)) {
      if (e.length !== this.inputs.length)
        throw new L(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let l = 0; l < this.inputs.length; ++l)
        a.add(this.inputs[l], e[l]);
    } else
      for (let l of this.inputs) {
        let u = e[l.name];
        if (u == null)
          throw new L(`No value is provided for the model's input ${l.name}`);
        a.add(l, u);
      }
    let i = Au(s, a);
    return n ? i : i[0];
  }
  retrieveSymbolicTensors(e) {
    let t = co(null, e.length), n = e.length;
    for (let o of this.layers) {
      let s = Array.isArray(o.output) ? o.output : [o.output], a = s.map((i) => i.name);
      for (let i = 0; i < e.length; ++i) {
        let l = a.indexOf(e[i]);
        if (l !== -1 && (t[i] = s[l], n--), n === 0)
          break;
      }
      if (n === 0)
        break;
    }
    if (n > 0) {
      let o = [];
      throw t.forEach((s, a) => {
        s == null && o.push(e[a]);
      }), new L(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`);
    }
    return t;
  }
  predictLoop(e, t = 32, n = false) {
    return z(() => {
      let o = this.checkNumSamples(e);
      if (n)
        throw new Ne("Verbose predictLoop() is not implemented yet.");
      let s = px(o, t), a = this.outputs.map((i) => []);
      for (let i = 0; i < s.length; ++i)
        z(() => {
          let u = s[i][0], c = s[i][1], p = Bp(e, u, c), m = [];
          if (Array.isArray(p))
            for (let d = 0; d < p.length; ++d)
              m.push({ key: this.inputs[d], value: p[d] });
          else
            m.push({ key: this.inputs[0], value: p });
          let f = new Is(m);
          return Au(this.outputs, f);
        }).forEach((u, c) => a[c].push(u));
      return yr(a.map((i) => tt(i, 0)));
    });
  }
  predict(e, t = {}) {
    let n = D_(e);
    CA(n, this.inputNames, this.feedInputShapes, false);
    try {
      let o = t.batchSize == null ? 32 : t.batchSize;
      return ux(o), this.predictLoop(n, o);
    } finally {
      wl(n, e);
    }
  }
  predictOnBatch(e) {
    CA(e, this.inputNames, this.feedInputShapes, true);
    let t = (Array.isArray(e) ? e[0] : e).shape[0];
    return this.predictLoop(e, t);
  }
  standardizeUserDataXY(e, t, n = true, o) {
    if (this.optimizer_ == null)
      throw new jr("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    let s = [];
    for (let a = 0; a < this.feedOutputShapes.length; ++a) {
      let i = this.feedOutputShapes[a];
      this.feedLossFns[a] === Lp ? s.push(i.slice(0, i.length - 1).concat([1])) : s.push(i);
    }
    if (e = vA(e, this.feedInputNames, this.feedInputShapes, false, "input"), t = vA(t, this.feedOutputNames, s, false, "target"), B5(e, t, null), V5(t, this.feedLossFns, this.feedOutputShapes), this.stateful && o != null && o > 0 && e[0].shape[0] % o != 0)
      throw new L(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${e[0].shape[0]} sample(s).`);
    return [e, t];
  }
  async standardizeUserData(e, t, n, o, s = true, a) {
    let [i, l] = this.standardizeUserDataXY(e, t, s, a);
    if (n != null)
      throw new Error("sample weight is not supported yet.");
    let u = null;
    if (o != null) {
      let c = ax(o, this.outputNames);
      u = [];
      for (let p = 0; p < c.length; ++p)
        u.push(await lx(l[p], null, c[p]));
    }
    return [i, l, u];
  }
  testLoop(e, t, n, o = 0, s) {
    return z(() => {
      let a = this.checkNumSamples(t, n, s, "steps"), i = [];
      if (o > 0)
        throw new Ne("Verbose mode is not implemented yet.");
      if (s != null)
        throw new Ne("steps mode in testLoop() is not implemented yet");
      {
        let l = px(a, n), u = At(Gr(0, a));
        for (let c = 0; c < l.length; ++c) {
          let p = l[c][0], m = l[c][1], f = Aa(u, p, m - p), d = cx(t, f), h = e(d);
          if (c === 0)
            for (let g = 0; g < h.length; ++g)
              i.push(ce(0));
          for (let g = 0; g < h.length; ++g) {
            let y = h[g];
            i[g] = Y(i[g], F(m - p, y));
          }
        }
        for (let c = 0; c < i.length; ++c)
          i[c] = ue(i[c], a);
      }
      return i;
    });
  }
  getDedupedMetricsNames() {
    let e = this.metricsNames, t = [];
    for (let n = 0; n < e.length; ++n) {
      let o = e[n], s = o;
      g_(e, o) > 1 && (s += `_${g_(e.slice(0, n), o)}`), t.push(s);
    }
    return t;
  }
  makeTrainFunction() {
    return (e) => {
      let t = [], n = e.slice(0, this.inputs.length), o = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), s = e.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), a = [], i = () => {
        let p = [];
        for (let h = 0; h < this.inputs.length; ++h)
          p.push({ key: this.inputs[h], value: n[h] });
        let m = new Is(p), f = Au(this.outputs, m, { training: true }), d;
        for (let h = 0; h < this.lossFunctions.length; ++h) {
          let y = this.lossFunctions[h](o[h], f[h]);
          s[h] != null && (y = hA(y, s[h]));
          let w = Ct(y);
          t.push(w), h === 0 ? d = y : d = Y(d, y);
        }
        for (let h = 0; h < this.metricsTensors.length; ++h) {
          let g;
          if (this.outputs.length > 1 && h < this.outputs.length)
            g = t[h];
          else {
            let y = this.metricsTensors[h][0], w = this.metricsTensors[h][1];
            g = Ct(y(o[w], f[w]));
          }
          Dt(g), a.push(g);
        }
        return d = Ct(d), this.calculateLosses().forEach((h) => {
          d = Y(d, h);
        }), d;
      }, l = this.collectedTrainableWeights.map((p) => p.read()), u = true;
      return [this.optimizer_.minimize(i, u, l)].concat(a);
    };
  }
  makeTestFunction() {
    this.testFunction = (e) => z(() => {
      let t = [], n, o = e.slice(0, this.inputs.length), s = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), a = [];
      for (let u = 0; u < this.inputs.length; ++u)
        a.push({ key: this.inputs[u], value: o[u] });
      let i = new Is(a), l = Au(this.outputs, i);
      for (let u = 0; u < this.lossFunctions.length; ++u) {
        let c = this.lossFunctions[u], p = Ct(c(s[u], l[u]));
        u === 0 ? n = p : n = Y(n, p), t.push(n);
      }
      for (let u = 0; u < this.metricsTensors.length; ++u) {
        let c = this.metricsTensors[u][0], p = this.metricsTensors[u][1], m = Ct(c(s[p], l[p]));
        t.push(m);
      }
      return t;
    });
  }
  async fit(e, t, n = {}) {
    return kA(this, e, t, n);
  }
  async fitDataset(e, t) {
    return yA(this, e, t);
  }
  async trainOnBatch(e, t) {
    let n = await this.standardizeUserData(e, t), o = n[0], s = n[1], i = this.makeTrainFunction()(o.concat(s)), l = [];
    for (let u of i) {
      let c = await u.data();
      l.push(c[0]);
    }
    return Ae(i), yr(l);
  }
  getNamedWeights(e) {
    let t = [], n = e != null && e.trainableOnly, o = n ? this.trainableWeights : this.weights, s = this.getWeights(n);
    for (let a = 0; a < o.length; ++a)
      n && !o[a].trainable || t.push({ name: o[a].originalName, tensor: s[a] });
    return t;
  }
  set stopTraining(e) {
    this.stopTraining_ = e;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(e) {
    this.optimizer_ !== e && (this.optimizer_ = e, this.isOptimizerOwned = false);
  }
  dispose() {
    let e = super.dispose();
    if (e.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      let t = Wm().numTensors;
      this.optimizer_.dispose(), e.numDisposedVariables += t - Wm().numTensors;
    }
    return e;
  }
  getLossIdentifiers() {
    let e;
    if (typeof this.loss == "string")
      e = po(this.loss);
    else if (Array.isArray(this.loss)) {
      for (let t of this.loss)
        if (typeof t != "string")
          throw new Error("Serialization of non-string loss is not supported.");
      e = this.loss.map((t) => po(t));
    } else {
      let t = Object.keys(this.loss);
      e = {};
      let n = this.loss;
      for (let o of t)
        if (typeof n[o] == "string")
          e[o] = po(n[o]);
        else
          throw new Error("Serialization of non-string loss is not supported.");
    }
    return e;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function")
      return [po(Bf(this.metrics))];
    if (Array.isArray(this.metrics))
      return this.metrics.map((e) => po(Bf(e)));
    {
      let e = {};
      for (let t in this.metrics)
        e[t] = po(Bf(this.metrics[t]));
      return e;
    }
  }
  getTrainingConfig() {
    return { loss: this.getLossIdentifiers(), metrics: this.getMetricIdentifiers(), optimizer_config: { class_name: this.optimizer.getClassName(), config: this.optimizer.getConfig() } };
  }
  loadTrainingConfig(e) {
    if (e.weighted_metrics != null)
      throw new Error("Loading weight_metrics is not supported yet.");
    if (e.loss_weights != null)
      throw new Error("Loading loss_weights is not supported yet.");
    if (e.sample_weight_mode != null)
      throw new Error("Loading sample_weight_mode is not supported yet.");
    let t = Eu(e.optimizer_config), n = sn(t), o;
    if (typeof e.loss == "string")
      o = Ta(e.loss);
    else if (Array.isArray(e.loss))
      o = e.loss.map((a) => Ta(a));
    else if (e.loss != null) {
      o = {};
      for (let a in e.loss)
        o[a] = Ta(e.loss[a]);
    }
    let s;
    if (Array.isArray(e.metrics))
      s = e.metrics.map((a) => Ta(a));
    else if (e.metrics != null) {
      s = {};
      for (let a in e.metrics)
        s[a] = Ta(e.metrics[a]);
    }
    this.compile({ loss: o, metrics: s, optimizer: n });
  }
  async save(e, t) {
    if (typeof e == "string") {
      let u = $r.getSaveHandlers(e);
      if (u.length === 0)
        throw new L(`Cannot find any save handlers for URL '${e}'`);
      if (u.length > 1)
        throw new L(`Found more than one (${u.length}) save handlers for URL '${e}'`);
      e = u[0];
    }
    if (e.save == null)
      throw new L("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    let n = await $r.encodeWeights(this.getNamedWeights(t)), o = false, s = null, i = { modelTopology: this.toJSON(s, o), format: j5, generatedBy: `TensorFlow.js tfjs-layers v${Vf}`, convertedBy: null };
    if ((t == null ? false : t.includeOptimizer) && this.optimizer != null) {
      i.trainingConfig = this.getTrainingConfig();
      let u = "optimizer", { data: c, specs: p } = await $r.encodeWeights(await this.optimizer.getWeights(), u);
      n.specs.push(...p), n.data = $r.concatenateArrayBuffers([n.data, c]);
    }
    if (this.userDefinedMetadata != null) {
      let u = true;
      E_(this.userDefinedMetadata, this.name, u), i.userDefinedMetadata = this.userDefinedMetadata;
    }
    return i.weightData = n.data, i.weightSpecs = n.specs, e.save(i);
  }
  setUserDefinedMetadata(e) {
    E_(e, this.name), this.userDefinedMetadata = e;
  }
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
};
Xn.className = "Model";
ee.registerClass(Xn);
var F_ = class extends Xn {
};
F_.className = "Functional";
ee.registerClass(F_);
async function SA(r, e) {
  "modelTopology" in r || (r = { modelTopology: r }), r = r;
  let t = r.modelTopology;
  t.model_config != null && (t = t.model_config);
  let n = Eu(t), o = sn(n, e);
  if (r.weightsManifest != null) {
    let s = await $r.loadWeights(r.weightsManifest, r.pathPrefix, o.weights.map((i) => i.originalName)), a = {};
    for (let i of o.weights)
      a[i.originalName] = s[i.originalName];
    o.loadWeights(a), Ae(s);
  }
  return o;
}
async function IA(r, e) {
  if (e == null && (e = {}), typeof r == "string") {
    let t = $r.getLoadHandlers(r, e);
    if (t.length === 0)
      t.push($r.browserHTTPRequest(r, e));
    else if (t.length > 1)
      throw new L(`Found more than one (${t.length}) load handlers for URL '${r}'`);
    r = t[0];
  }
  return G5(r, void 0, e);
}
async function G5(r, e, t) {
  if (t == null && (t = {}), r.load == null)
    throw new L("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
  let n = await r.load(), o = n.modelTopology;
  o.model_config != null && (o = o.model_config);
  let s = t.strict == null ? true : t.strict, a = n.weightData != null && n.weightSpecs != null && s, i = sn(Eu(o), e, a), l = n.trainingConfig;
  if (l != null && i.loadTrainingConfig(l), n.userDefinedMetadata != null && i.setUserDefinedMetadata(n.userDefinedMetadata), n.weightData != null) {
    if (n.weightSpecs == null)
      throw new L("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
    let { modelWeights: u, optimizerWeights: c } = U5(n.weightData, n.weightSpecs);
    i.loadWeights(u, s), i.optimizer != null && c.length > 0 && await i.optimizer.setWeights(c), Ae(u), Ae(c.map((p) => p.tensor));
  }
  return i;
}
function U5(r, e) {
  let t = $r.decodeWeights(r, e), n = {}, o = [];
  return e.forEach((s) => {
    s.group === "optimizer" ? o.push({ name: s.name, tensor: t[s.name] }) : n[s.name] = t[s.name];
  }), { modelWeights: n, optimizerWeights: o };
}
var $a = class extends Xn {
  constructor(e) {
    super({ inputs: [], outputs: [] });
    if (e = e || {}, this.trainable = true, this.built = false, this.name = e.name != null ? e.name : gl("sequential_"), e.layers != null)
      for (let t of e.layers)
        this.add(t);
  }
  checkShape(e) {
    if (e.inboundNodes[0].outputTensors[0].shape.some((n) => n < 0))
      throw new L(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`);
  }
  add(e) {
    let t = e instanceof $a || e instanceof Xn, n;
    if (t) {
      if (n = e, n.outputs.length !== 1)
        throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (n.inputs.length !== 1)
        throw new L("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (e.inboundNodes.length === 0) {
        if (e.batchInputShape == null)
          throw new L("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        let o = Zg({ batchShape: e.batchInputShape, dtype: e.dtype, name: e.name + "_input" });
        e.apply(o);
      }
      if (t)
        this.outputs = n.outputs, this.inputs = n.inputs;
      else {
        if (e.inboundNodes.length !== 1)
          throw new L(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);
        if (e.inboundNodes[0].outputTensors.length !== 1)
          throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(e), this.outputs = [e.inboundNodes[0].outputTensors[0]], this.inputs = v_(this.outputs[0]);
      }
      this.inboundNodes = [], new xl({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: co(null, this.inputs.length), outputMasks: [null], inputShapes: this.inputs.map((o) => o.shape), outputShapes: this.outputs[0].shape });
    } else {
      let o = e.apply(this.outputs[0]);
      if (Array.isArray(o))
        throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(e), this.outputs = [o], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(e), this.built = false;
  }
  pop() {
    if (this.layers.length === 0)
      throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0)
      this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      let e = this.layers.length - 1;
      this.layers[e].outboundNodes = [], this.outputs = [this.layers[e].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(e, t) {
    return this.model == null && this.build(), this.model.call(e, t);
  }
  build(e) {
    if (Xe(e), this.inputs.length === 0 || this.outputs.length === 0)
      throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new Xn({ inputs: this.inputs, outputs: this.outputs[0], name: this.name + "_model" }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = true;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  summary(e, t, n = console.log) {
    this.built || this.build(), super.summary(e, t, n);
  }
  setWeights(e) {
    this.model == null && this.build(), this.model.setWeights(e);
  }
  evaluate(e, t, n = {}) {
    if (!this.built)
      throw new jr("The model needs to be compiled before being used.");
    return this.model.evaluate(e, t, n);
  }
  async evaluateDataset(e, t) {
    if (!this.built)
      throw new jr("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(e, t);
  }
  predict(e, t = {}) {
    return this.model == null && this.build(), this.model.predict(e, t);
  }
  predictOnBatch(e) {
    return this.model == null && this.build(), this.model.predictOnBatch(e);
  }
  compile(e) {
    this.build(), this.model.compile(e), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(e) {
    this.model.optimizer = e;
  }
  async fit(e, t, n = {}) {
    if (!this.built)
      throw new jr("The model needs to be compiled before being used.");
    return this.model.fit(e, t, n);
  }
  async fitDataset(e, t) {
    if (!this.built)
      throw new jr("The model needs to be compiled before being used.");
    return this.model.fitDataset(e, t);
  }
  async trainOnBatch(e, t) {
    return this.model.trainOnBatch(e, t);
  }
  static fromConfig(e, t, n = {}, o = false) {
    let s, a = {};
    if (t instanceof Array) {
      if (t[0].className == null || t[0].className === "Merge")
        throw new L("Legacy serialization format not supported yet.");
      s = t;
    } else
      b.assert(t.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), s = t.layers, delete t.layers, a = t;
    let i = new e(a);
    if (!(i instanceof $a))
      throw new Ne(`Sequential.fromConfig called on non-Sequential input: ${i}`);
    for (let l of s) {
      let c = sn(l, void 0, o);
      o && c.setFastWeightInitDuringBuild(true), i.add(c);
    }
    return i;
  }
  set stopTraining(e) {
    if (this.model == null)
      throw new L("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = e;
  }
  get stopTraining() {
    if (this.model == null)
      throw new L("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  getConfig() {
    let e = [];
    for (let t of this.layers) {
      let n = {};
      n.className = t.getClassName(), n.config = t.getConfig(), e.push(n);
    }
    return { name: this.name, layers: e };
  }
};
$a.className = "Sequential";
ee.registerClass($a);
function H5(r) {
  return new Xn(r);
}
function q5(r) {
  return new $a(r);
}
function K5(r, e) {
  return e == null && (e = {}), IA(r, e);
}
function O_(r) {
  return Zg(r);
}
function X5(r, e) {
  kn.registerCallbackConstructor(r, e);
}
var an = class extends ee.Serializable {
  getConfig() {
    return {};
  }
};
var P_ = class extends an {
  apply(e, t = 1) {
    return XE(e, t);
  }
};
P_.className = "elu";
ee.registerClass(P_);
var M_ = class extends an {
  apply(e) {
    return lf(e);
  }
};
M_.className = "selu";
ee.registerClass(M_);
var L_ = class extends an {
  apply(e) {
    return Or(e);
  }
};
L_.className = "relu";
ee.registerClass(L_);
var z_ = class extends an {
  apply(e) {
    return z(() => Ca(6, Or(e)));
  }
};
z_.className = "relu6";
ee.registerClass(z_);
var B_ = class extends an {
  apply(e) {
    return e;
  }
};
B_.className = "linear";
ee.registerClass(B_);
var V_ = class extends an {
  apply(e) {
    return Jr(e);
  }
};
V_.className = "sigmoid";
ee.registerClass(V_);
var W_ = class extends an {
  apply(e) {
    return ZE(e);
  }
};
W_.className = "hardSigmoid";
ee.registerClass(W_);
var j_ = class extends an {
  apply(e) {
    return ui(e);
  }
};
j_.className = "softplus";
ee.registerClass(j_);
var G_ = class extends an {
  apply(e) {
    return YE(e);
  }
};
G_.className = "softsign";
ee.registerClass(G_);
var U_ = class extends an {
  apply(e) {
    return wa(e);
  }
};
U_.className = "tanh";
ee.registerClass(U_);
var Wf = class extends an {
  apply(e, t = -1) {
    return hu(e, t);
  }
};
Wf.className = "softmax";
ee.registerClass(Wf);
var H_ = class extends an {
  apply(e, t = -1) {
    return Qm(e, t);
  }
};
H_.className = "logSoftmax";
ee.registerClass(H_);
var q_ = class extends an {
  apply(e, t = 1) {
    return z(() => F(Jr(F(e, t)), e));
  }
};
q_.className = "swish";
ee.registerClass(q_);
var K_ = class extends an {
  apply(e) {
    return z(() => F(e, wa(ui(e))));
  }
};
K_.className = "mish";
ee.registerClass(K_);
function Ns(r) {
  return r.getClassName();
}
function X_(r, e = {}) {
  return mi(r, ee.SerializationMap.getMap().classNameMap, e, "activation");
}
function Ts(r) {
  if (r == null) {
    let e = {};
    return e.className = "linear", e.config = {}, X_(e);
  }
  if (typeof r == "string") {
    let e = {};
    return e.className = r, e.config = {}, X_(e);
  } else
    return r instanceof an ? r : X_(r);
}
function Y_(r) {
  if (r != null && typeof r != "object")
    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${r}`);
}
var Z_ = class extends ee.Serializable {
};
var $u = class extends Z_ {
  constructor(e) {
    super();
    Y_(e), this.l1 = e == null || e.l1 == null ? 0.01 : e.l1, this.l2 = e == null || e.l2 == null ? 0.01 : e.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  apply(e) {
    return z(() => {
      let t = ht([1]);
      return this.hasL1 && (t = Y(t, me(F(this.l1, Tt(e))))), this.hasL2 && (t = Y(t, me(F(this.l2, Iu(e))))), O(t, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  static fromConfig(e, t) {
    return new e({ l1: t.l1, l2: t.l2 });
  }
};
$u.className = "L1L2";
ee.registerClass($u);
function NA(r) {
  return Y_(r), new $u({ l1: r != null ? r.l1 : null, l2: 0 });
}
function TA(r) {
  return Y_(r), new $u({ l2: r != null ? r.l2 : null, l1: 0 });
}
var EA = { l1l2: "L1L2" };
function at(r) {
  return vp(r);
}
function AA(r, e = {}) {
  return mi(r, ee.SerializationMap.getMap().classNameMap, e, "regularizer");
}
function xt(r) {
  if (r == null)
    return null;
  if (typeof r == "string") {
    let t = { className: r in EA ? EA[r] : r, config: {} };
    return AA(t);
  } else
    return r instanceof Z_ ? r : AA(r);
}
var jf = class extends Pe {
  constructor(e) {
    super(e == null ? {} : e);
    this.supportsMasking = true, e != null && (this.maxValue = e.maxValue);
  }
  call(e, t) {
    e = Fe(e);
    let n = Or(e);
    return this.maxValue != null && (n = Sr(n, 0, this.maxValue)), n;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = { maxValue: this.maxValue }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
jf.className = "ReLU";
ee.registerClass(jf);
var Gf = class extends Pe {
  constructor(e) {
    super(e == null ? {} : e);
    this.DEFAULT_ALPHA = 0.3, e == null && (e = {}), this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
  }
  call(e, t) {
    let n = Fe(e);
    return lu(n, this.alpha);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Gf.className = "LeakyReLU";
ee.registerClass(Gf);
var Uf = class extends Pe {
  constructor(e) {
    super(e == null ? {} : e);
    if (this.DEFAULT_ALPHA_INITIALIZER = "zeros", e == null && (e = {}), this.supportsMasking = true, this.alphaInitializer = mt(e.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = xt(e.alphaRegularizer), this.alphaConstraint = Lt(e.alphaConstraint), e.sharedAxes == null)
      this.sharedAxes = null;
    else if (Array.isArray(e.sharedAxes))
      this.sharedAxes = e.sharedAxes;
    else if (typeof e.sharedAxes == "number")
      this.sharedAxes = [e.sharedAxes];
    else
      throw new L(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);
  }
  build(e) {
    e = Xe(e);
    let t = e.slice(1);
    if (this.sharedAxes != null)
      for (let o of this.sharedAxes)
        t[o - 1] = 1;
    this.alpha = this.addWeight("alpha", t, "float32", this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);
    let n = {};
    if (this.sharedAxes != null)
      for (let o = 1; o < e.length; ++o)
        n[o] = e[o];
    this.inputSpec = [new _t({ ndim: e.length, axes: n })], this.built = true;
  }
  call(e, t) {
    return e = Fe(e), fu(e, this.alpha.read());
  }
  getConfig() {
    let e = { alphaInitializer: kt(this.alphaInitializer), alphaRegularizer: at(this.alphaRegularizer), alphaConstraint: Mt(this.alphaConstraint), sharedAxes: this.sharedAxes }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Uf.className = "PReLU";
ee.registerClass(Uf);
var Hf = class extends Pe {
  constructor(e) {
    super(e == null ? {} : e);
    if (this.DEFAULT_ALPHA = 1, e == null && (e = {}), e.alpha != null && e.alpha !== this.DEFAULT_ALPHA)
      throw new Ne(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
  }
  call(e, t) {
    let n = Fe(e);
    return _a(n);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Hf.className = "ELU";
ee.registerClass(Hf);
var qf = class extends Pe {
  constructor(e) {
    super(e == null ? {} : e);
    this.DEFAULT_THETA = 1, e == null && (e = {}), this.theta = e.theta == null ? this.DEFAULT_THETA : e.theta;
  }
  call(e, t) {
    let n = Fe(e);
    return F(n, J(Ht(n, this.theta), "float32"));
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = { theta: this.theta }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
qf.className = "ThresholdedReLU";
ee.registerClass(qf);
var Kf = class extends Pe {
  constructor(e) {
    super(e == null ? {} : e);
    this.DEFAULT_AXIS = 1, e == null && (e = {}), this.softmax = new Wf().apply, this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis;
  }
  call(e, t) {
    let n = Fe(e);
    return this.softmax(n, this.axis);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = { axis: this.axis }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Kf.className = "Softmax";
ee.registerClass(Kf);
function kl(r, e, t) {
  if (typeof r == "number")
    return co(r, e);
  if (r.length !== e)
    throw new L(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${r.length} elements.`);
  for (let n = 0; n < e; ++n) {
    let o = r[n];
    if (!UE(o))
      throw new L(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(r)} including a non-integer number ${o}`);
  }
  return r;
}
function _n(r, e, t, n, o = 1) {
  if (r == null)
    return r;
  let s = e + (e - 1) * (o - 1), a;
  return t === "same" ? a = r : a = r - s + 1, Math.floor((a + n - 1) / n);
}
function Es(r, e, t, n) {
  if (r == null)
    return null;
  if (n === "valid")
    r = r * e + Ss([t - e, 0]);
  else if (n === "same")
    r = r * e;
  else
    throw new L(`Unsupport padding mode: ${n}.`);
  return r;
}
function Xf(r, e) {
  return z(() => (Rt(e), e === "channelsFirst" ? Ve(r, [0, 2, 3, 1]) : r));
}
function J_(r, e) {
  return z(() => (Rt(e), e === "channelsFirst" ? Ve(r, [0, 2, 3, 4, 1]) : r));
}
function Y5(r, e, t, n = 1, o = "valid", s, a = 1) {
  return z(() => {
    if (s == null && (s = tn()), Rt(s), r.shape.length !== 3)
      throw new L(`The input of a conv1dWithBias operation should be 3, but is ${r.shape.length} instead.`);
    if (e.shape.length !== 3)
      throw new L(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);
    if (t != null && t.shape.length !== 1)
      throw new L(`The bias for a conv1dWithBias operation should be 1, but is ${e.shape.length} instead`);
    if (s === "channelsFirst" && (r = Ve(r, [0, 2, 1])), o === "causal")
      throw new Ne("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    let i = qm(r, e, n, o === "same" ? "same" : "valid", "NWC", a);
    return t != null && (i = nn(i, t)), i;
  });
}
function $A(r, e, t, n = [1, 1], o = "valid", s, a, i = null) {
  return z(() => {
    if (s == null && (s = tn()), Rt(s), r.rank !== 3 && r.rank !== 4)
      throw new L(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${r.rank}.`);
    if (e.rank !== 3 && e.rank !== 4)
      throw new L(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${r.rank}.`);
    let l = Xf(r, s);
    if (o === "causal")
      throw new Ne("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return l = lo.conv2d({ x: l, filter: e, strides: n, pad: o === "same" ? "same" : "valid", dilations: a, dataFormat: "NHWC", bias: t, activation: i }), s === "channelsFirst" && (l = Ve(l, [0, 3, 1, 2])), l;
  });
}
function Z5(r, e, t, n = [1, 1, 1], o = "valid", s, a) {
  return z(() => {
    if (s == null && (s = tn()), Rt(s), r.rank !== 4 && r.rank !== 5)
      throw new L(`conv3dWithBias expects input to be of rank 4 or 5, but received ${r.rank}.`);
    if (e.rank !== 4 && e.rank !== 5)
      throw new L(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${r.rank}.`);
    let i = J_(r, s);
    if (o === "causal")
      throw new Ne("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return i = Xm(i, e, n, o === "same" ? "same" : "valid", "NDHWC", a), t != null && (i = nn(i, t)), s === "channelsFirst" && (i = Ve(i, [0, 4, 1, 2, 3])), i;
  });
}
var Vp = class extends Pe {
  constructor(e, t) {
    super(t);
    if (this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", Vp.verifyArgs(t), this.rank = e, Kt(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
      throw new Ne(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = kl(t.kernelSize, e, "kernelSize"), this.strides = kl(t.strides == null ? 1 : t.strides, e, "strides"), this.padding = t.padding == null ? "valid" : t.padding, rn(this.padding), this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Rt(this.dataFormat), this.activation = Ts(t.activation), this.useBias = t.useBias == null ? true : t.useBias, this.biasInitializer = mt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = Lt(t.biasConstraint), this.biasRegularizer = xt(t.biasRegularizer), this.activityRegularizer = xt(t.activityRegularizer), this.dilationRate = kl(t.dilationRate == null ? 1 : t.dilationRate, e, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)
      throw new L(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2)
        throw new L(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3)
        throw new L(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(e) {
    if (qn("kernelSize" in e, "required key 'kernelSize' not in config"), typeof e.kernelSize != "number" && !Bg(e.kernelSize, "number", 1, 3))
      throw new L(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`);
  }
  getConfig() {
    let e = { kernelSize: this.kernelSize, strides: this.strides, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, activation: Ns(this.activation), useBias: this.useBias, biasInitializer: kt(this.biasInitializer), biasRegularizer: at(this.biasRegularizer), activityRegularizer: at(this.activityRegularizer), biasConstraint: Mt(this.biasConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
var Du = class extends Vp {
  constructor(e, t) {
    super(e, t);
    this.kernel = null, Du.verifyArgs(t), this.filters = t.filters, Kt(this.filters, "filters"), this.kernelInitializer = mt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = Lt(t.kernelConstraint), this.kernelRegularizer = xt(t.kernelRegularizer);
  }
  build(e) {
    e = Xe(e);
    let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new L(`The channel dimension of the input should be defined. Found ${e[t]}`);
    let n = e[t], o = this.kernelSize.concat([n, this.filters]);
    this.kernel = this.addWeight("kernel", o, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [t]: n } }], this.built = true;
  }
  call(e, t) {
    return z(() => {
      e = Fe(e);
      let n, o = this.bias == null ? null : this.bias.read(), s = Vg(this.activation.getClassName());
      if (s != null && this.rank === 2)
        n = $A(e, this.kernel.read(), o, this.strides, this.padding, this.dataFormat, this.dilationRate, s);
      else {
        if (this.rank === 1)
          n = Y5(e, this.kernel.read(), o, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2)
          n = $A(e, this.kernel.read(), o, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else if (this.rank === 3)
          n = Z5(e, this.kernel.read(), o, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else
          throw new Ne("convolutions greater than 3D are not implemented yet.");
        this.activation != null && (n = this.activation.apply(n));
      }
      return n;
    });
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t = [], n = this.dataFormat === "channelsLast" ? e.slice(1, e.length - 1) : e.slice(2);
    for (let s = 0; s < n.length; ++s) {
      let a = _n(n[s], this.kernelSize[s], this.padding, this.strides[s], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[s]);
      t.push(a);
    }
    let o = [e[0]];
    return this.dataFormat === "channelsLast" ? (o = o.concat(t), o.push(this.filters)) : (o.push(this.filters), o = o.concat(t)), o;
  }
  getConfig() {
    let e = { filters: this.filters, kernelInitializer: kt(this.kernelInitializer), kernelRegularizer: at(this.kernelRegularizer), kernelConstraint: Mt(this.kernelConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  static verifyArgs(e) {
    if (!("filters" in e) || typeof e.filters != "number" || e.filters < 1)
      throw new L(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`);
  }
};
var _l = class extends Du {
  constructor(e) {
    super(2, e);
    _l.verifyArgs(e);
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.rank, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !Bg(e.kernelSize, "number", 1, 2))
      throw new L(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`);
  }
};
_l.className = "Conv2D";
ee.registerClass(_l);
var vl = class extends Du {
  constructor(e) {
    super(3, e);
    vl.verifyArgs(e);
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.rank, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !(Array.isArray(e.kernelSize) && (e.kernelSize.length === 1 || e.kernelSize.length === 3)))
      throw new L(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`);
  }
};
vl.className = "Conv3D";
ee.registerClass(vl);
var Yf = class extends _l {
  constructor(e) {
    super(e);
    if (this.inputSpec = [new _t({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid")
      throw new L(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e) {
    if (e = Xe(e), e.length !== 4)
      throw new L("Input should have rank 4; Received input shape: " + JSON.stringify(e));
    let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new L("The channel dimension of the inputs should be defined. Found `None`.");
    let n = e[t], o = this.kernelSize.concat([this.filters, n]);
    this.kernel = this.addWeight("kernel", o, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [new _t({ ndim: 4, axes: { [t]: n } })], this.built = true;
  }
  call(e, t) {
    return z(() => {
      let n = Fe(e);
      if (n.shape.length !== 4)
        throw new L(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);
      let o = n.shape, s = o[0], a, i;
      this.dataFormat === "channelsFirst" ? (a = 2, i = 3) : (a = 1, i = 2);
      let l = o[a], u = o[i], c = this.kernelSize[0], p = this.kernelSize[1], m = this.strides[0], f = this.strides[1], d = Es(l, m, c, this.padding), h = Es(u, f, p, this.padding), g = [s, d, h, this.filters];
      this.dataFormat !== "channelsLast" && (n = Ve(n, [0, 2, 3, 1]));
      let y = Km(n, this.kernel.read(), g, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (y = Ve(y, [0, 3, 1, 2])), this.bias != null && (y = nn(y, this.bias.read(), this.dataFormat)), this.activation != null && (y = this.activation.apply(y)), y;
    });
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t = e.slice(), n, o, s;
    this.dataFormat === "channelsFirst" ? (n = 1, o = 2, s = 3) : (n = 3, o = 1, s = 2);
    let a = this.kernelSize[0], i = this.kernelSize[1], l = this.strides[0], u = this.strides[1];
    return t[n] = this.filters, t[o] = Es(t[o], l, a, this.padding), t[s] = Es(t[s], u, i, this.padding), t;
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.dilationRate, e;
  }
};
Yf.className = "Conv2DTranspose";
ee.registerClass(Yf);
var Zf = class extends vl {
  constructor(e) {
    super(e);
    if (this.inputSpec = [new _t({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid")
      throw new L(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e) {
    if (e = Xe(e), e.length !== 5)
      throw new L("Input should have rank 5; Received input shape: " + JSON.stringify(e));
    let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new L("The channel dimension of the inputs should be defined. Found `None`.");
    let n = e[t], o = this.kernelSize.concat([this.filters, n]);
    this.kernel = this.addWeight("kernel", o, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint)), this.inputSpec = [new _t({ ndim: 5, axes: { [t]: n } })], this.built = true;
  }
  call(e, t) {
    return z(() => {
      let n = Fe(e);
      if (n.shape.length !== 5)
        throw new L(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);
      let o = n.shape, s = o[0], a, i, l;
      this.dataFormat === "channelsFirst" ? (l = 2, a = 3, i = 4) : (l = 1, a = 2, i = 3);
      let u = o[l], c = o[a], p = o[i], m = this.kernelSize[0], f = this.kernelSize[1], d = this.kernelSize[2], h = this.strides[0], g = this.strides[1], y = this.strides[2], w = Es(u, h, m, this.padding), x = Es(c, g, f, this.padding), k = Es(p, y, d, this.padding), C = [s, w, x, k, this.filters];
      this.dataFormat !== "channelsLast" && (n = Ve(n, [0, 2, 3, 4, 1]));
      let A = _k(n, this.kernel.read(), C, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (A = Ve(A, [0, 4, 1, 2, 3])), this.bias !== null && (A = nn(A, this.bias.read(), this.dataFormat)), this.activation !== null && (A = this.activation.apply(A)), A;
    });
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t = e.slice(), n, o, s, a;
    this.dataFormat === "channelsFirst" ? (n = 1, o = 2, s = 3, a = 4) : (n = 4, o = 1, s = 2, a = 3);
    let i = this.kernelSize[0], l = this.kernelSize[1], u = this.kernelSize[2], c = this.strides[0], p = this.strides[1], m = this.strides[2];
    return t[n] = this.filters, t[o] = Es(t[o], c, i, this.padding), t[s] = Es(t[s], p, l, this.padding), t[a] = Es(t[a], m, u, this.padding), t;
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.dilationRate, e;
  }
};
Zf.className = "Conv3DTranspose";
ee.registerClass(Zf);
var Q_ = class extends Du {
  constructor(e, t) {
    super(e, t);
    if (this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, t.filters == null)
      throw new L("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (t.kernelInitializer != null || t.kernelRegularizer != null || t.kernelConstraint != null)
      throw new L("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (t.padding != null && t.padding !== "same" && t.padding !== "valid")
      throw new L(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);
    this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = mt(t.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = xt(t.depthwiseRegularizer), this.depthwiseConstraint = Lt(t.depthwiseConstraint), this.pointwiseInitializer = mt(t.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = xt(t.pointwiseRegularizer), this.pointwiseConstraint = Lt(t.pointwiseConstraint);
  }
  build(e) {
    if (e = Xe(e), e.length < this.rank + 2)
      throw new L(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(e)}`);
    let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null || e[t] < 0)
      throw new L(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);
    let n = e[t], o = this.kernelSize.concat([n, this.depthMultiplier]), s = [];
    for (let i = 0; i < this.rank; ++i)
      s.push(1);
    s.push(n * this.depthMultiplier, this.filters);
    let a = true;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", o, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, a, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", s, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, a, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, a, this.biasConstraint) : this.bias = null, this.inputSpec = [new _t({ ndim: this.rank + 2, axes: { [t]: n } })], this.built = true;
  }
  call(e, t) {
    return z(() => {
      e = Fe(e);
      let n;
      if (this.rank === 1)
        throw new Ne("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (e = Ve(e, [0, 2, 3, 1])), n = Jk(e, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (n = nn(n, this.bias.read(), this.dataFormat)), this.activation != null && (n = this.activation.apply(n)), this.dataFormat === "channelsFirst" && (n = Ve(n, [0, 3, 1, 2])), n;
    });
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.rank, delete e.kernelInitializer, delete e.kernelRegularizer, delete e.kernelConstraint, e.depthwiseInitializer = kt(this.depthwiseInitializer), e.pointwiseInitializer = kt(this.pointwiseInitializer), e.depthwiseRegularizer = at(this.depthwiseRegularizer), e.pointwiseRegularizer = at(this.pointwiseRegularizer), e.depthwiseConstraint = Mt(this.depthwiseConstraint), e.pointwiseConstraint = Mt(this.pointwiseConstraint), e;
  }
};
Q_.className = "SeparableConv";
var Jf = class extends Q_ {
  constructor(e) {
    super(2, e);
  }
};
Jf.className = "SeparableConv2D";
ee.registerClass(Jf);
var Ru = class extends Du {
  constructor(e) {
    super(1, e);
    Ru.verifyArgs(e), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    let e = super.getConfig();
    return delete e.rank, delete e.dataFormat, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !Bg(e.kernelSize, "number", 1, 1))
      throw new L(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`);
  }
};
Ru.className = "Conv1D";
ee.registerClass(Ru);
var Qf = class extends Pe {
  constructor(e) {
    super(e);
    typeof e.cropping == "number" ? this.cropping = [[e.cropping, e.cropping], [e.cropping, e.cropping]] : typeof e.cropping[0] == "number" ? this.cropping = [[e.cropping[0], e.cropping[0]], [e.cropping[1], e.cropping[1]]] : this.cropping = e.cropping, this.dataFormat = e.dataFormat === void 0 ? "channelsLast" : e.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(e) {
    return this.dataFormat === "channelsFirst" ? [e[0], e[1], e[2] - this.cropping[0][0] - this.cropping[0][1], e[3] - this.cropping[1][0] - this.cropping[1][1]] : [e[0], e[1] - this.cropping[0][0] - this.cropping[0][1], e[2] - this.cropping[1][0] - this.cropping[1][1], e[3]];
  }
  call(e, t) {
    return z(() => {
      if (e = Fe(e), this.dataFormat === "channelsLast") {
        let n = Sf(e, this.cropping[0][0], e.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return Sf(n, this.cropping[1][0], e.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        let n = Sf(e, this.cropping[0][0], e.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return Sf(n, this.cropping[1][0], e.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    let e = { cropping: this.cropping, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Qf.className = "Cropping2D";
ee.registerClass(Qf);
var ed = class extends Pe {
  constructor(e) {
    super(e);
    this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = e.size == null ? this.DEFAULT_SIZE : e.size, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Rt(this.dataFormat), this.interpolation = e.interpolation == null ? "nearest" : e.interpolation, WE(this.interpolation);
  }
  computeOutputShape(e) {
    if (this.dataFormat === "channelsFirst") {
      let t = e[2] == null ? null : this.size[0] * e[2], n = e[3] == null ? null : this.size[1] * e[3];
      return [e[0], e[1], t, n];
    } else {
      let t = e[1] == null ? null : this.size[0] * e[1], n = e[2] == null ? null : this.size[1] * e[2];
      return [e[0], t, n, e[3]];
    }
  }
  call(e, t) {
    return z(() => {
      let n = Fe(e), o = n.shape;
      if (this.dataFormat === "channelsFirst") {
        n = Ve(n, [0, 2, 3, 1]);
        let s = this.size[0] * o[2], a = this.size[1] * o[3], i = this.interpolation === "nearest" ? bn.resizeNearestNeighbor(n, [s, a]) : bn.resizeBilinear(n, [s, a]);
        return Ve(i, [0, 3, 1, 2]);
      } else {
        let s = this.size[0] * o[1], a = this.size[1] * o[2];
        return this.interpolation === "nearest" ? bn.resizeNearestNeighbor(n, [s, a]) : bn.resizeBilinear(n, [s, a]);
      }
    });
  }
  getConfig() {
    let e = { size: this.size, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
ed.className = "UpSampling2D";
ee.registerClass(ed);
function J5(r, e, t = [1, 1], n = "valid", o, s) {
  return z(() => {
    o == null && (o = tn()), Rt(o);
    let a = Xf(r, o);
    if (r.rank !== 4)
      throw new L(`Input for depthwiseConv2d is required to be 4-D, but is instead ${r.rank}-D`);
    if (e.rank !== 4)
      throw new L(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);
    return a = ka(a, e, t, n === "same" ? "same" : "valid", "NHWC", s), o === "channelsFirst" && (a = Ve(a, [0, 3, 1, 2])), a;
  });
}
var td = class extends Vp {
  constructor(e) {
    super(2, e);
    this.depthwiseKernel = null, this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = mt(e.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = Lt(e.depthwiseConstraint), this.depthwiseRegularizer = xt(e.depthwiseRegularizer);
  }
  build(e) {
    if (e = Xe(e), e.length < 4)
      throw new L(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);
    let t = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (e[t] == null || e[t] < 0)
      throw new L(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);
    let n = e[t], o = [this.kernelSize[0], this.kernelSize[1], n, this.depthMultiplier];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", o, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [n * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e, t) {
    return z(() => {
      e = Fe(e);
      let n = J5(e, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (n = nn(n, this.bias.read(), this.dataFormat)), this.activation != null && (n = this.activation.apply(n)), n;
    });
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2], o = this.dataFormat === "channelsFirst" ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier, s = _n(t, this.kernelSize[0], this.padding, this.strides[0]), a = _n(n, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [e[0], o, s, a] : [e[0], s, a, o];
  }
  getConfig() {
    let e = super.getConfig();
    return e.depthMultiplier = this.depthMultiplier, e.depthwiseInitializer = kt(this.depthwiseInitializer), e.depthwiseRegularizer = at(this.depthwiseRegularizer), e.depthwiseConstraint = Mt(this.depthwiseRegularizer), e;
  }
};
td.className = "DepthwiseConv2D";
ee.registerClass(td);
function ev(r, e, t, n) {
  if (Array.isArray(r)) {
    if (e != null || t != null)
      throw new L("When inputs is an array, neither initialState or constants should be provided");
    n != null && (t = r.slice(r.length - n, r.length), r = r.slice(0, r.length - n)), r.length > 1 && (e = r.slice(1, r.length)), r = r[0];
  }
  function o(s) {
    return s == null || Array.isArray(s) ? s : [s];
  }
  return e = o(e), t = o(t), { inputs: r, initialState: e, constants: t };
}
function tv(r, e, t, n = false, o, s, a = false, i = false) {
  return z(() => {
    let l = e.shape.length;
    if (l < 3)
      throw new L(`Input should be at least 3D, but is ${l}D.`);
    let u = [1, 0].concat(Gr(2, l));
    if (e = Ve(e, u), s != null)
      throw new Ne("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
    a && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), o != null && (o = J(J(o, "bool"), "float32"), o.rank === l - 1 && (o = gr(o, -1)), o = Ve(o, u)), n && (e = lr(e, 0), o != null && (o = lr(o, 0)));
    let c = [], p, m = t, f = e.shape[0], d = Nr(e), h;
    o != null && (h = Nr(o));
    for (let y = 0; y < f; ++y) {
      let w = d[y], x = z(() => r(w, m));
      if (o == null)
        p = x[0], m = x[1];
      else {
        let k = z(() => {
          let C = h[y], A = le(xr(C), C), $ = Y(F(x[0], C), F(m[0], A)), R = m.map((P, M) => Y(F(x[1][M], C), F(P, A)));
          return { output: $, newStates: R };
        });
        p = k.output, m = k.newStates;
      }
      i && c.push(p);
    }
    let g;
    return i && (g = nr(c, 1)), [p, g, m];
  });
}
var On = class extends Pe {
  constructor(e) {
    super(e);
    let t;
    if (e.cell == null)
      throw new L("cell property is missing for the constructor of RNN.");
    if (Array.isArray(e.cell) ? t = new Gp({ cells: e.cell }) : t = e.cell, t.stateSize == null)
      throw new L("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = t, this.returnSequences = e.returnSequences == null ? false : e.returnSequences, this.returnState = e.returnState == null ? false : e.returnState, this.goBackwards = e.goBackwards == null ? false : e.goBackwards, this._stateful = e.stateful == null ? false : e.stateful, this.unroll = e.unroll == null ? false : e.unroll, this.supportsMasking = true, this.inputSpec = [new _t({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  getStates() {
    if (this.states_ == null) {
      let e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return Gr(0, e).map((t) => null);
    } else
      return this.states_;
  }
  setStates(e) {
    this.states_ = e;
  }
  computeOutputShape(e) {
    Xg(e) && (e = e[0]), e = e;
    let t = this.cell.stateSize;
    Array.isArray(t) || (t = [t]);
    let n = t[0], o;
    if (this.returnSequences ? o = [e[0], e[1], n] : o = [e[0], n], this.returnState) {
      let s = [];
      for (let a of t)
        s.push([e[0], a]);
      return [o].concat(s);
    } else
      return o;
  }
  computeMask(e, t) {
    return z(() => {
      Array.isArray(t) && (t = t[0]);
      let n = this.returnSequences ? t : null;
      if (this.returnState) {
        let o = this.states.map((s) => null);
        return [n].concat(o);
      } else
        return n;
    });
  }
  get states() {
    if (this.states_ == null) {
      let e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, t = [];
      for (let n = 0; n < e; ++n)
        t.push(null);
      return t;
    } else
      return this.states_;
  }
  set states(e) {
    this.states_ = e;
  }
  build(e) {
    let t = null;
    if (this.numConstants != null)
      throw new Ne("Constants support is not implemented in RNN yet.");
    Xg(e) && (e = e[0]), e = e;
    let n = this.stateful ? e[0] : null, o = e.slice(2);
    this.inputSpec[0] = new _t({ shape: [n, null, ...o] });
    let s = [e[0]].concat(e.slice(2));
    if (t != null)
      throw new Ne("Constants support is not implemented in RNN yet.");
    this.cell.build(s);
    let a;
    if (Array.isArray(this.cell.stateSize) ? a = this.cell.stateSize : a = [this.cell.stateSize], this.stateSpec != null) {
      if (!b.arraysEqual(this.stateSpec.map((i) => i.shape[i.shape.length - 1]), a))
        throw new L(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else
      this.stateSpec = a.map((i) => new _t({ shape: [null, i] }));
    this.stateful && this.resetStates();
  }
  resetStates(e, t = false) {
    z(() => {
      if (!this.stateful)
        throw new Fn("Cannot call resetStates() on an RNN Layer that is not stateful.");
      let n = this.inputSpec[0].shape[0];
      if (n == null)
        throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((o) => ht([n, o])) : this.states_ = [ht([n, this.cell.stateSize])];
      else if (e == null)
        Ae(this.states_), this.keptStates != null && (Ae(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((o) => ht([n, o])) : this.states_[0] = ht([n, this.cell.stateSize]);
      else {
        if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length)
          throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
        t === true ? this.keptStates.push(this.states_.slice()) : Ae(this.states_);
        for (let o = 0; o < this.states_.length; ++o) {
          let s = e[o], a = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[o] : this.cell.stateSize, i = [n, a];
          if (!b.arraysEqual(s.shape, i))
            throw new L(`State ${o} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${s.shape}`);
          this.states_[o] = s;
        }
      }
      this.states_ = this.states_.map((o) => Dt(o.clone()));
    });
  }
  apply(e, t) {
    let n = t == null ? null : t.initialState, o = t == null ? null : t.constants;
    t == null && (t = {});
    let s = ev(e, n, o, this.numConstants);
    e = s.inputs, n = s.initialState, o = s.constants;
    let a = [], i = [];
    if (n != null) {
      t.initialState = n, a = a.concat(n), this.stateSpec = [];
      for (let u of n)
        this.stateSpec.push(new _t({ shape: u.shape }));
      i = i.concat(this.stateSpec);
    }
    if (o != null && (t.constants = o, a = a.concat(o), this.numConstants = o.length), a[0] instanceof on) {
      let u = [e].concat(a), c = this.inputSpec.concat(i), p = this.inputSpec;
      this.inputSpec = c;
      let m = super.apply(u, t);
      return this.inputSpec = p, m;
    } else
      return super.apply(e, t);
  }
  call(e, t) {
    return z(() => {
      let n = t == null ? null : t.mask, o = t == null ? null : t.training, s = t == null ? null : t.initialState;
      e = Fe(e), s == null && (this.stateful ? s = this.states_ : s = this.getInitialState(e));
      let a = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (s.length !== a)
        throw new L(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      let i = { training: o }, u = tv((d, h) => {
        let g = this.cell.call([d].concat(h), i);
        return [g[0], g.slice(1)];
      }, e, s, this.goBackwards, n, null, this.unroll, this.returnSequences), c = u[0], p = u[1], m = u[2];
      this.stateful && this.resetStates(m, o);
      let f = this.returnSequences ? p : c;
      return this.returnState ? [f].concat(m) : f;
    });
  }
  getInitialState(e) {
    return z(() => {
      let t = ht(e.shape);
      return t = me(t, [1, 2]), t = Ea(t), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((n) => n > 1 ? Gg(t, [1, n]) : t) : this.cell.stateSize > 1 ? [Gg(t, [1, this.cell.stateSize])] : [t];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.cell != null && this.cell.setFastWeightInitDuringBuild(e);
  }
  getConfig() {
    let e = super.getConfig(), t = { returnSequences: this.returnSequences, returnState: this.returnState, goBackwards: this.goBackwards, stateful: this.stateful, unroll: this.unroll };
    this.numConstants != null && (t.numConstants = this.numConstants);
    let n = this.cell.getConfig();
    return this.getClassName() === On.className && (t.cell = { className: this.cell.getClassName(), config: n }), Object.assign({}, n, e, t);
  }
  static fromConfig(e, t, n = {}) {
    let o = t.cell, s = sn(o, n);
    return new e(Object.assign(t, { cell: s }));
  }
};
On.className = "RNN";
ee.registerClass(On);
var Cl = class extends Pe {
};
var Wp = class extends Cl {
  constructor(e) {
    super(e);
    this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, Kt(this.units, "units"), this.activation = Ts(e.activation == null ? this.DEFAULT_ACTIVATION : e.activation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = mt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = mt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = mt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = xt(e.kernelRegularizer), this.recurrentRegularizer = xt(e.recurrentRegularizer), this.biasRegularizer = xt(e.biasRegularizer), this.kernelConstraint = Lt(e.kernelConstraint), this.recurrentConstraint = Lt(e.recurrentConstraint), this.biasConstraint = Lt(e.biasConstraint), this.dropout = Cu([1, Ss([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = Cu([1, Ss([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    e = Xe(e), this.kernel = this.addWeight("kernel", [e[e.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e, t) {
    return z(() => {
      if (e = e, e.length !== 2)
        throw new L(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);
      let n = e[1];
      e = e[0];
      let o = t.training == null ? false : t.training;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Da({ ones: () => xr(e), rate: this.dropout, training: o })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Da({ ones: () => xr(n), rate: this.recurrentDropout, training: o }));
      let s, a = this.dropoutMask, i = this.recurrentDropoutMask;
      a != null ? s = go(F(e, a), this.kernel.read()) : s = go(e, this.kernel.read()), this.bias != null && (s = nn(s, this.bias.read())), i != null && (n = F(n, i));
      let l = Y(s, go(n, this.recurrentKernel.read()));
      return this.activation != null && (l = this.activation.apply(l)), [l, l];
    });
  }
  getConfig() {
    let e = super.getConfig(), t = { units: this.units, activation: Ns(this.activation), useBias: this.useBias, kernelInitializer: kt(this.kernelInitializer), recurrentInitializer: kt(this.recurrentInitializer), biasInitializer: kt(this.biasInitializer), kernelRegularizer: at(this.kernelRegularizer), recurrentRegularizer: at(this.recurrentRegularizer), biasRegularizer: at(this.biasRegularizer), activityRegularizer: at(this.activityRegularizer), kernelConstraint: Mt(this.kernelConstraint), recurrentConstraint: Mt(this.recurrentConstraint), biasConstraint: Mt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout };
    return Object.assign({}, e, t);
  }
};
Wp.className = "SimpleRNNCell";
ee.registerClass(Wp);
var rd = class extends On {
  constructor(e) {
    e.cell = new Wp(e);
    super(e);
  }
  call(e, t) {
    return z(() => {
      this.cell.dropoutMask != null && (Ae(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ae(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      let n = t == null ? null : t.mask, o = t == null ? null : t.training, s = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: o, initialState: s });
    });
  }
  static fromConfig(e, t) {
    return new e(t);
  }
};
rd.className = "SimpleRNN";
ee.registerClass(rd);
var jp = class extends Cl {
  constructor(e) {
    super(e);
    if (this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.resetAfter)
      throw new L("GRUCell does not support reset_after parameter set to true.");
    this.units = e.units, Kt(this.units, "units"), this.activation = Ts(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = Ts(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = mt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = mt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = mt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = xt(e.kernelRegularizer), this.recurrentRegularizer = xt(e.recurrentRegularizer), this.biasRegularizer = xt(e.biasRegularizer), this.kernelConstraint = Lt(e.kernelConstraint), this.recurrentConstraint = Lt(e.recurrentConstraint), this.biasConstraint = Lt(e.biasConstraint), this.dropout = Cu([1, Ss([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = Cu([1, Ss([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.implementation = e.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    e = Xe(e);
    let t = e[e.length - 1];
    this.kernel = this.addWeight("kernel", [t, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint) : this.bias = null, this.built = true;
  }
  call(e, t) {
    return z(() => {
      if (e = e, e.length !== 2)
        throw new L(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);
      let n = t.training == null ? false : t.training, o = e[1];
      e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Da({ ones: () => xr(e), rate: this.dropout, training: n, count: 3 })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Da({ ones: () => xr(o), rate: this.recurrentDropout, training: n, count: 3 }));
      let s = this.dropoutMask, a = this.recurrentDropoutMask, i, l, u;
      0 < this.dropout && this.dropout < 1 && (e = F(e, s[0]));
      let c = go(e, this.kernel.read());
      this.useBias && (c = nn(c, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (o = F(o, a[0]));
      let p = this.recurrentKernel.read(), [m, f] = mr(p, [2 * this.units, this.units], p.rank - 1), d = go(o, m), [h, g, y] = mr(c, 3, c.rank - 1), [w, x] = mr(d, 2, d.rank - 1);
      i = this.recurrentActivation.apply(Y(h, w)), l = this.recurrentActivation.apply(Y(g, x));
      let k = go(F(l, o), f);
      u = this.activation.apply(Y(y, k));
      let C = Y(F(i, o), F(Y(1, Ke(i)), u));
      return [C, C];
    });
  }
  getConfig() {
    let e = super.getConfig(), t = { units: this.units, activation: Ns(this.activation), recurrentActivation: Ns(this.recurrentActivation), useBias: this.useBias, kernelInitializer: kt(this.kernelInitializer), recurrentInitializer: kt(this.recurrentInitializer), biasInitializer: kt(this.biasInitializer), kernelRegularizer: at(this.kernelRegularizer), recurrentRegularizer: at(this.recurrentRegularizer), biasRegularizer: at(this.biasRegularizer), activityRegularizer: at(this.activityRegularizer), kernelConstraint: Mt(this.kernelConstraint), recurrentConstraint: Mt(this.recurrentConstraint), biasConstraint: Mt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation, resetAfter: false };
    return Object.assign({}, e, t);
  }
};
jp.className = "GRUCell";
ee.registerClass(jp);
var nd = class extends On {
  constructor(e) {
    e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new jp(e);
    super(e);
  }
  call(e, t) {
    return z(() => {
      this.cell.dropoutMask != null && (Ae(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ae(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      let n = t == null ? null : t.mask, o = t == null ? null : t.training, s = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: o, initialState: s });
    });
  }
  static fromConfig(e, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e(t);
  }
};
nd.className = "GRU";
ee.registerClass(nd);
var Sl = class extends Cl {
  constructor(e) {
    super(e);
    this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, Kt(this.units, "units"), this.activation = Ts(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = Ts(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? true : e.useBias, this.kernelInitializer = mt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = mt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = mt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = e.unitForgetBias, this.kernelRegularizer = xt(e.kernelRegularizer), this.recurrentRegularizer = xt(e.recurrentRegularizer), this.biasRegularizer = xt(e.biasRegularizer), this.kernelConstraint = Lt(e.kernelConstraint), this.recurrentConstraint = Lt(e.recurrentConstraint), this.biasConstraint = Lt(e.biasConstraint), this.dropout = Cu([1, Ss([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = Cu([1, Ss([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.implementation = e.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    var t;
    e = Xe(e);
    let n = e[e.length - 1];
    this.kernel = this.addWeight("kernel", [n, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
    let o;
    if (this.useBias) {
      if (this.unitForgetBias) {
        let s = this.biasInitializer, a = this.units;
        o = new (t = class extends wn {
          apply(l, u) {
            let c = s.apply([a]), p = new Nu().apply([a]), m = s.apply([a * 2]);
            return k_(k_(c, p), m);
          }
        }, t.className = "CustomInit", t)();
      } else
        o = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.units * 4], null, o, this.biasRegularizer, true, this.biasConstraint);
    } else
      this.bias = null;
    this.built = true;
  }
  call(e, t) {
    return z(() => {
      let n = t.training == null ? false : t.training;
      if (e = e, e.length !== 3)
        throw new L(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
      let o = e[1], s = e[2];
      e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Da({ ones: () => xr(e), rate: this.dropout, training: n, count: 4 })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Da({ ones: () => xr(o), rate: this.recurrentDropout, training: n, count: 4 }));
      let a = this.dropoutMask, i = this.recurrentDropoutMask, l, u, c, p;
      0 < this.dropout && this.dropout < 1 && (e = F(e, a[0]));
      let m = go(e, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (o = F(o, i[0])), m = Y(m, go(o, this.recurrentKernel.read())), this.useBias && (m = nn(m, this.bias.read()));
      let [f, d, h, g] = mr(m, 4, m.rank - 1);
      l = this.recurrentActivation.apply(f), u = this.recurrentActivation.apply(d), c = Y(F(u, s), F(l, this.activation.apply(h))), p = this.recurrentActivation.apply(g);
      let y = F(p, this.activation.apply(c));
      return [y, y, c];
    });
  }
  getConfig() {
    let e = super.getConfig(), t = { units: this.units, activation: Ns(this.activation), recurrentActivation: Ns(this.recurrentActivation), useBias: this.useBias, kernelInitializer: kt(this.kernelInitializer), recurrentInitializer: kt(this.recurrentInitializer), biasInitializer: kt(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: at(this.kernelRegularizer), recurrentRegularizer: at(this.recurrentRegularizer), biasRegularizer: at(this.biasRegularizer), activityRegularizer: at(this.activityRegularizer), kernelConstraint: Mt(this.kernelConstraint), recurrentConstraint: Mt(this.recurrentConstraint), biasConstraint: Mt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation };
    return Object.assign({}, e, t);
  }
};
Sl.className = "LSTMCell";
ee.registerClass(Sl);
var od = class extends On {
  constructor(e) {
    e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new Sl(e);
    super(e);
  }
  call(e, t) {
    return z(() => {
      this.cell.dropoutMask != null && (Ae(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ae(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      let n = t == null ? null : t.mask, o = t == null ? null : t.training, s = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: o, initialState: s });
    });
  }
  static fromConfig(e, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e(t);
  }
};
od.className = "LSTM";
ee.registerClass(od);
var Gp = class extends Cl {
  constructor(e) {
    super(e);
    this.cells = e.cells;
  }
  get stateSize() {
    let e = [];
    for (let t of this.cells.slice().reverse())
      Array.isArray(t.stateSize) ? e.push(...t.stateSize) : e.push(t.stateSize);
    return e;
  }
  call(e, t) {
    return z(() => {
      e = e;
      let n = e.slice(1), o = [];
      for (let i of this.cells.slice().reverse())
        Array.isArray(i.stateSize) ? o.push(n.splice(0, i.stateSize.length)) : o.push(n.splice(0, 1));
      o.reverse();
      let s = [], a;
      for (let i = 0; i < this.cells.length; ++i) {
        let l = this.cells[i];
        n = o[i], i === 0 ? a = [e[0]].concat(n) : a = [a[0]].concat(n), a = l.call(a, t), s.push(a.slice(1));
      }
      n = [];
      for (let i of s.slice().reverse())
        n.push(...i);
      return [a[0]].concat(n);
    });
  }
  build(e) {
    Xg(e) && (e = e[0]), e = e;
    let t;
    this.cells.forEach((n, o) => {
      Cs(`RNNCell_${o}`, () => {
        n.build(e), Array.isArray(n.stateSize) ? t = n.stateSize[0] : t = n.stateSize, e = [e[0], t];
      });
    }), this.built = true;
  }
  getConfig() {
    let e = super.getConfig(), t = (s) => ({ className: s.getClassName(), config: s.getConfig() }), o = { cells: this.cells.map(t) };
    return Object.assign({}, e, o);
  }
  static fromConfig(e, t, n = {}) {
    let o = [];
    for (let s of t.cells)
      o.push(sn(s, n));
    return new e({ cells: o });
  }
  get trainableWeights() {
    if (!this.trainable)
      return [];
    let e = [];
    for (let t of this.cells)
      e.push(...t.trainableWeights);
    return e;
  }
  get nonTrainableWeights() {
    let e = [];
    for (let t of this.cells)
      e.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      let t = [];
      for (let n of this.cells)
        t.push(...n.trainableWeights);
      return t.concat(e);
    }
    return e;
  }
  getWeights() {
    let e = [];
    for (let t of this.cells)
      e.push(...t.weights);
    return Rf(e);
  }
  setWeights(e) {
    let t = [];
    for (let n of this.cells) {
      let o = n.weights.length, s = e.splice(o);
      for (let a = 0; a < n.weights.length; ++a)
        t.push([n.weights[a], s[a]]);
    }
    Pp(t);
  }
};
Gp.className = "StackedRNNCells";
ee.registerClass(Gp);
function Da(r) {
  let { ones: e, rate: t, training: n = false, count: o = 1 } = r, s = () => Hg(e(), t), a = () => hl(s, e, n);
  return !o || o <= 1 ? Dt(a().clone()) : Array(o).fill(void 0).map(a).map((l) => Dt(l.clone()));
}
var Q5 = function(r, e) {
  var t = {};
  for (var n in r)
    Object.prototype.hasOwnProperty.call(r, n) && e.indexOf(n) < 0 && (t[n] = r[n]);
  if (r != null && typeof Object.getOwnPropertySymbols == "function")
    for (var o = 0, n = Object.getOwnPropertySymbols(r); o < n.length; o++)
      e.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(r, n[o]) && (t[n[o]] = r[n[o]]);
  return t;
};
var rv = class extends On {
  constructor(e) {
    if (e.unroll)
      throw new Ne("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(e.cell))
      throw new Ne("It is not possible at the moment to stack convolutional cells.");
    super(e);
    this.inputSpec = [new _t({ ndim: 5 })];
  }
  call(e, t) {
    return z(() => {
      if (this.cell.dropoutMask != null && (Ae(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ae(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), t && t.constants)
        throw new L("ConvRNN2D cell does not support constants");
      let n = t == null ? null : t.mask, o = t == null ? null : t.training, s = t == null ? null : t.initialState;
      return super.call(e, { mask: n, training: o, initialState: s });
    });
  }
  computeOutputShape(e) {
    let t = this.computeSingleOutputShape(e);
    return this.returnSequences || (t = [t[0], ...t.slice(2)]), this.returnState && (t = [t, ...Array(2).fill([e[0], ...t.slice(-3)])]), t;
  }
  getInitialState(e) {
    return z(() => {
      let { stateSize: t } = this.cell, n = e.shape, o = this.computeSingleOutputShape(n), s = [o[0], ...o.slice(2)], a = ht(s);
      return Array.isArray(t) ? Array(t.length).fill(a) : [a];
    });
  }
  resetStates(e, t = false) {
    z(() => {
      if (!this.stateful)
        throw new Fn("Cannot call resetStates() on an RNN Layer that is not stateful.");
      let n = this.inputSpec[0].shape, o = this.computeSingleOutputShape(n), s = [o[0], ...o.slice(2)];
      if (n[0] == null)
        throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => ht(s)) : this.states_ = [ht(s)];
      else if (e == null)
        Ae(this.states_), this.keptStates != null && (Ae(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => ht(s)) : this.states_[0] = ht(s);
      else {
        if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length)
          throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
        t ? this.keptStates.push(this.states_.slice()) : Ae(this.states_);
        for (let i = 0; i < this.states_.length; ++i) {
          let l = e[i], u = s;
          if (!b.arraysEqual(l.shape, u))
            throw new L(`State ${i} is incompatible with layer ${this.name}: expected shape=${u}, received shape=${l.shape}`);
          this.states_[i] = l;
        }
      }
      this.states_ = this.states_.map((i) => Dt(i.clone()));
    });
  }
  computeSingleOutputShape(e) {
    let { dataFormat: t, filters: n, kernelSize: o, padding: s, strides: a, dilationRate: i } = this.cell, l = t === "channelsFirst", u = e[l ? 3 : 2], c = e[l ? 4 : 3], p = _n(u, o[0], s, a[0], i[0]), m = _n(c, o[1], s, a[1], i[1]);
    return [...e.slice(0, 2), ...l ? [n, p, m] : [p, m, n]];
  }
};
rv.className = "ConvRNN2D";
var Up = class extends Sl {
  constructor(e) {
    let { filters: t, kernelSize: n, strides: o, padding: s, dataFormat: a, dilationRate: i } = e;
    super(Object.assign({}, e, { units: t }));
    this.filters = t, Kt(this.filters, "filters"), this.kernelSize = kl(n, 2, "kernelSize"), this.kernelSize.forEach((l) => Kt(l, "kernelSize")), this.strides = kl(o || 1, 2, "strides"), this.strides.forEach((l) => Kt(l, "strides")), this.padding = s || "valid", rn(this.padding), this.dataFormat = a || "channelsLast", Rt(this.dataFormat), this.dilationRate = kl(i || 1, 2, "dilationRate"), this.dilationRate.forEach((l) => Kt(l, "dilationRate"));
  }
  build(e) {
    var t;
    e = Xe(e);
    let n = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[n] == null)
      throw new L(`The channel dimension of the input should be defined. Found ${e[n]}`);
    let o = e[n], s = 4, a = this.kernelSize.concat([o, this.filters * s]);
    this.kernel = this.addWeight("kernel", a, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    let i = this.kernelSize.concat([this.filters, this.filters * s]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", i, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint), this.useBias) {
      let l;
      if (this.unitForgetBias) {
        let u = this.biasInitializer, c = this.filters;
        l = new (t = class extends wn {
          apply(m, f) {
            let d = u.apply([c]), h = rr([c]), g = u.apply([c * 2]);
            return Ip([d, h, g]);
          }
        }, t.className = "CustomInit", t)();
      } else
        l = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.filters * s], null, l, this.biasRegularizer, true, this.biasConstraint);
    }
    this.built = true;
  }
  call(e, t) {
    return z(() => {
      if (e.length !== 3)
        throw new L(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
      let n = t.training || false, o = e[0], s = e[1], a = e[2], i = 4;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Da({ ones: () => xr(o), rate: this.dropout, training: n, count: i }));
      let l = this.dropoutMask, u = (Q, se, pe) => !se || !se[pe] ? Q : F(se[pe], Q), c = u(o, l, 0), p = u(o, l, 1), m = u(o, l, 2), f = u(o, l, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Da({ ones: () => xr(s), rate: this.recurrentDropout, training: n, count: i }));
      let d = this.recurrentDropoutMask, h = u(s, d, 0), g = u(s, d, 1), y = u(s, d, 2), w = u(s, d, 3), x = 3, [k, C, A, $] = mr(this.kernel.read(), i, x), [R, P, M, V] = this.useBias ? mr(this.bias.read(), i) : [null, null, null, null];
      c = this.inputConv(c, k, R, this.padding), p = this.inputConv(p, C, P, this.padding), m = this.inputConv(m, A, M, this.padding), f = this.inputConv(f, $, V, this.padding);
      let [W, G, U, H] = mr(this.recurrentKernel.read(), i, x);
      h = this.recurrentConv(h, W), g = this.recurrentConv(g, G), y = this.recurrentConv(y, U), w = this.recurrentConv(w, H);
      let K = this.recurrentActivation.apply(Y(c, h)), re = this.recurrentActivation.apply(Y(p, g)), X = Y(F(re, a), F(K, this.activation.apply(Y(m, y)))), ne = F(this.recurrentActivation.apply(Y(f, w)), this.activation.apply(X));
      return [ne, ne, X];
    });
  }
  getConfig() {
    let e = super.getConfig(), { units: t } = e, n = Q5(e, ["units"]), o = { filters: this.filters, kernelSize: this.kernelSize, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, strides: this.strides };
    return Object.assign({}, n, o);
  }
  inputConv(e, t, n, o) {
    let s = Dn(e, t, this.strides, o || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return n ? nn(s, n, this.dataFormat) : s;
  }
  recurrentConv(e, t) {
    return Dn(e, t, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
};
Up.className = "ConvLSTM2DCell";
ee.registerClass(Up);
var sd = class extends rv {
  constructor(e) {
    let t = new Up(e);
    super(Object.assign({}, e, { cell: t }));
  }
  static fromConfig(e, t) {
    return new e(t);
  }
};
sd.className = "ConvLSTM2D";
ee.registerClass(sd);
var Hp = class extends Pe {
  constructor(e) {
    super(e);
    this.rate = Math.max(Math.min(e.rate, 1), 0), this.noiseShape = e.noiseShape, this.seed = e.seed, this.supportsMasking = true;
  }
  getNoiseShape(e) {
    if (this.noiseShape == null)
      return this.noiseShape;
    let t = e.shape, n = [];
    for (let o = 0; o < this.noiseShape.length; ++o)
      n.push(this.noiseShape[o] == null ? t[o] : this.noiseShape[o]);
    return n;
  }
  call(e, t) {
    return z(() => {
      this.invokeCallHook(e, t);
      let n = Fe(e);
      if (0 < this.rate && this.rate < 1) {
        let o = t.training == null ? false : t.training, s = this.getNoiseShape(n);
        return hl(() => Hg(n, this.rate, s, this.seed), () => n, o);
      }
      return e;
    });
  }
  getConfig() {
    let e = { rate: this.rate, noiseShape: this.noiseShape, seed: this.seed }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  dispose() {
    return super.dispose();
  }
};
Hp.className = "Dropout";
ee.registerClass(Hp);
var id = class extends Hp {
  constructor(e) {
    super(e);
    this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(e) {
    let t = e.shape;
    return [t[0], 1, t[2]];
  }
};
id.className = "SpatialDropout1D";
ee.registerClass(id);
var ad = class extends Pe {
  constructor(e) {
    super(e);
    if (this.activation = null, this.useBias = true, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.batchInputShape == null && e.inputShape == null && e.inputDim != null) {
      let t = null;
      e.batchSize != null && (t = e.batchSize), this.batchInputShape = [t, e.inputDim];
    }
    this.units = e.units, Kt(this.units, "units"), this.activation = Ts(e.activation), e.useBias != null && (this.useBias = e.useBias), this.kernelInitializer = mt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = mt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = Lt(e.kernelConstraint), this.biasConstraint = Lt(e.biasConstraint), this.kernelRegularizer = xt(e.kernelRegularizer), this.biasRegularizer = xt(e.biasRegularizer), this.activityRegularizer = xt(e.activityRegularizer), this.supportsMasking = true, this.inputSpec = [{ minNDim: 2 }];
  }
  build(e) {
    e = Xe(e);
    let t = e[e.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [t, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: t } }], this.built = true;
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t = e.slice();
    return t[t.length - 1] = this.units, t;
  }
  call(e, t) {
    return z(() => {
      this.invokeCallHook(e, t);
      let n = Fe(e), o = Vg(this.activation.getClassName()), s;
      return o != null ? s = go(n, this.kernel.read(), o, this.bias ? this.bias.read() : null) : (s = go(n, this.kernel.read()), this.bias != null && (s = nn(s, this.bias.read())), this.activation != null && (s = this.activation.apply(s))), s;
    });
  }
  getConfig() {
    let e = { units: this.units, activation: Ns(this.activation), useBias: this.useBias, kernelInitializer: kt(this.kernelInitializer), biasInitializer: kt(this.biasInitializer), kernelRegularizer: at(this.kernelRegularizer), biasRegularizer: at(this.biasRegularizer), activityRegularizer: at(this.activityRegularizer), kernelConstraint: Mt(this.kernelConstraint), biasConstraint: Mt(this.biasConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
ad.className = "Dense";
ee.registerClass(ad);
var ld = class extends Pe {
  constructor(e) {
    e = e || {};
    super(e);
    this.inputSpec = [{ minNDim: 3 }], this.dataFormat = e.dataFormat;
  }
  computeOutputShape(e) {
    e = Xe(e);
    for (let t of e.slice(1))
      if (t == null)
        throw new L(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [e[0], ho(e, 1)];
  }
  call(e, t) {
    return z(() => {
      this.invokeCallHook(e, t);
      let n = Fe(e);
      if (this.dataFormat === "channelsFirst" && n.rank > 1) {
        let o = [0];
        for (let s = 2; s < n.rank; ++s)
          o.push(s);
        o.push(1), n = Ve(n, o);
      }
      return KE(n);
    });
  }
  getConfig() {
    let e = {};
    this.dataFormat != null && (e.dataFormat = this.dataFormat);
    let t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
ld.className = "Flatten";
ee.registerClass(ld);
var ud = class extends Pe {
  constructor(e) {
    super(e);
    this.supportsMasking = true, this.activation = Ts(e.activation);
  }
  call(e, t) {
    return z(() => {
      this.invokeCallHook(e, t);
      let n = Fe(e);
      return this.activation.apply(n);
    });
  }
  getConfig() {
    let e = { activation: Ns(this.activation) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
ud.className = "Activation";
ee.registerClass(ud);
var cd = class extends Pe {
  constructor(e) {
    super(e);
    this.n = e.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(e) {
    return [e[0], this.n, e[1]];
  }
  call(e, t) {
    return z(() => (e = Fe(e), HE(e, this.n)));
  }
  getConfig() {
    let e = { n: this.n }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
cd.className = "RepeatVector";
ee.registerClass(cd);
var pd = class extends Pe {
  constructor(e) {
    super(e);
    this.targetShape = e.targetShape;
    for (let t = 0; t < this.targetShape.length; ++t)
      this.isUnknown(this.targetShape[t]) && (this.targetShape[t] = null);
  }
  isUnknown(e) {
    return e < 0 || e == null;
  }
  fixUnknownDimension(e, t) {
    let n = "Total size of new array must be unchanged.", o = t.slice(), s = 1, a = null;
    for (let l = 0; l < o.length; ++l) {
      let u = o[l];
      if (this.isUnknown(u))
        if (a === null)
          a = l;
        else
          throw new L("Can only specifiy one unknown dimension.");
      else
        s *= u;
    }
    let i = ho(e);
    if (a !== null) {
      if (s === 0 || i % s != 0)
        throw new L(n);
      o[a] = i / s;
    } else if (i !== s)
      throw new L(n);
    return o;
  }
  computeOutputShape(e) {
    let t = false;
    for (let n = 0; n < e.length; ++n)
      if (this.isUnknown(e[n])) {
        t = true;
        break;
      }
    return t ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape));
  }
  call(e, t) {
    return z(() => {
      this.invokeCallHook(e, t);
      let n = Fe(e), o = n.shape, s = o.slice(0, 1).concat(this.fixUnknownDimension(o.slice(1), this.targetShape));
      return O(n, s);
    });
  }
  getConfig() {
    let e = { targetShape: this.targetShape }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
pd.className = "Reshape";
ee.registerClass(pd);
var md = class extends Pe {
  constructor(e) {
    super(e);
    if (e.dims == null)
      throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(e.dims))
      throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);
    let t = Gr(1, e.dims.length + 1);
    if (!b.arraysEqual(e.dims.slice().sort(), t))
      throw new Error("Invalid permutation `dims`: " + JSON.stringify(e.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = e.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new _t({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t = e.slice();
    return this.dims.forEach((n, o) => {
      t[o + 1] = e[n];
    }), t;
  }
  call(e, t) {
    return Ve(Fe(e), this.dimsIncludingBatch);
  }
  getConfig() {
    let e = { dims: this.dims }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
md.className = "Permute";
ee.registerClass(md);
var fd = class extends Pe {
  constructor(e) {
    super(e == null ? {} : e);
    this.supportsMasking = true, e != null ? this.maskValue = e.maskValue == null ? 0 : e.maskValue : this.maskValue = 0;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = super.getConfig(), t = { maskValue: this.maskValue };
    return Object.assign(t, e), t;
  }
  computeMask(e, t) {
    let n = Fe(e), o = -1;
    return lp(ci(n, this.maskValue), o);
  }
  call(e, t) {
    return z(() => {
      this.invokeCallHook(e, t);
      let n = Fe(e), o = -1, s = true, a = lp(ci(n, this.maskValue), o, s);
      return F(n, J(a, n.dtype));
    });
  }
};
fd.className = "Masking";
ee.registerClass(fd);
var dd = class extends Pe {
  constructor(e) {
    super(e);
    if (this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", e.batchInputShape == null && e.inputShape == null) {
      let t = null;
      e.batchSize != null && (t = e.batchSize), e.inputLength == null ? this.batchInputShape = [t, null] : this.batchInputShape = [t].concat(gt(e.inputLength));
    }
    this.inputDim = e.inputDim, Kt(this.inputDim, "inputDim"), this.outputDim = e.outputDim, Kt(this.outputDim, "outputDim"), this.embeddingsInitializer = mt(e.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = xt(e.embeddingsRegularizer), this.activityRegularizer = xt(e.activityRegularizer), this.embeddingsConstraint = Lt(e.embeddingsConstraint), this.maskZero = e.maskZero, this.supportsMasking = e.maskZero, this.inputLength = e.inputLength;
  }
  build(e) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint), this.built = true;
  }
  warnOnIncompatibleInputShape(e) {
  }
  computeMask(e, t) {
    return z(() => this.maskZero ? (e = Fe(e), ci(e, Ie(e))) : null);
  }
  computeOutputShape(e) {
    if (e = Xe(e), this.inputLength == null)
      return [...e, this.outputDim];
    let t = gt(this.inputLength);
    if (t.length !== e.length - 1)
      throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
    {
      let n = 0;
      for (let o = 0; o < t.length; ++o) {
        let s = t[o], a = e[o + 1];
        if (s != null && a != null && s !== a)
          throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
        s == null && (t[n] = a), n++;
      }
    }
    return [e[0], ...t, this.outputDim];
  }
  call(e, t) {
    return z(() => {
      this.invokeCallHook(e, t);
      let n = Fe(e);
      n.dtype !== "int32" && (n = Su(n, "int32"));
      let o = Ug(this.embeddings.read(), O(n, [n.size]));
      return O(o, Xe(this.computeOutputShape(n.shape)));
    });
  }
  getConfig() {
    let e = { inputDim: this.inputDim, outputDim: this.outputDim, embeddingsInitializer: kt(this.embeddingsInitializer), embeddingsRegularizer: at(this.embeddingsRegularizer), activityRegularizer: at(this.activityRegularizer), embeddingsConstraint: Mt(this.embeddingsConstraint), maskZero: this.maskZero, inputLength: this.inputLength }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
dd.className = "Embedding";
ee.registerClass(dd);
var Il = class extends Pe {
  constructor(e) {
    super(e || {});
    this.supportsMasking = true;
  }
  mergeFunction(e) {
    throw new Ne();
  }
  computeElementwiseOpOutputShape(e, t) {
    if (e == null || t == null)
      return null;
    if (e.length < t.length)
      return this.computeElementwiseOpOutputShape(t, e);
    if (t.length === 0)
      return e;
    let n = e.slice(0, e.length - t.length);
    for (let o = 0; o < t.length; ++o) {
      let s = e[e.length - t.length + o], a = t[o];
      if (s == null || a == null || s < 0 || a < 0)
        n.push(null);
      else if (s === 1)
        n.push(a);
      else if (a === 1)
        n.push(s);
      else {
        if (s !== a)
          throw new L("Operands could not be broadcast together with shapes " + JSON.stringify(e) + " " + JSON.stringify(t));
        n.push(s);
      }
    }
    return n;
  }
  build(e) {
    if (Array.isArray(e) && !Array.isArray(e[0]) && (e = [Xe(e)]), e = e, e.length < 2)
      throw new L(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);
    let t = [];
    for (let s of e)
      s != null && s[0] !== null && t.push(s[0]);
    if (t = fo(t), t.length > 1)
      throw new L(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);
    let n = e[0] == null ? null : e[0].slice(1);
    for (let s = 1; s < e.length; ++s) {
      let a = e[s] == null ? null : e[s].slice(1);
      n = this.computeElementwiseOpOutputShape(n, a);
    }
    let o = e.map((s) => s.length);
    e.indexOf(null) === -1 && fo(o).length === 1 ? this.reshapeRequired = false : this.reshapeRequired = true;
  }
  call(e, t) {
    return z(() => {
      if (e = e, this.reshapeRequired) {
        let n = [], o = e.map((s) => s.rank);
        if (o.indexOf(null) === -1) {
          let s = Ss(o);
          for (let a of e) {
            let i = a.rank;
            for (let l = 0; l < s - i; ++l)
              a = Ea(a, 1);
            n.push(a);
          }
          return this.mergeFunction(n);
        } else {
          let s = false;
          for (let l of e) {
            let u = l.rank;
            if (u == null) {
              let c = l.shape, p = c[0], m = c.slice(1).concat([p]), f = O(l, [p].concat(ho(c.slice(1))));
              f = Ve(f, [1, 0]), f = O(f, m), n.push(f), s = true;
            } else if (u > 1) {
              let c = Gr(1, u).concat([0]);
              n.push(Ve(l, c)), s = true;
            } else
              n.push(l);
          }
          let a = this.mergeFunction(n), i = a.rank;
          if (s) {
            if (i == null) {
              let l = a.shape, u = l.length, c = l[u - 1], p = [c].concat(l.slice(0, l.length - 1));
              a = O(Ve(O(a, [-1, c]), [1, 0]), p);
            } else if (i > 1) {
              let l = [i - 1].concat(Gr(0, i - 1));
              a = Ve(a, l);
            }
          }
          return a;
        }
      } else
        return this.mergeFunction(e);
    });
  }
  computeOutputShape(e) {
    e = e;
    let t;
    e[0] == null ? t = null : t = e[0].slice(1);
    for (let o = 1; o < e.length; ++o) {
      let s = e[o] == null ? null : e[o].slice(1);
      t = this.computeElementwiseOpOutputShape(t, s);
    }
    let n = [];
    for (let o of e)
      o != null && o[0] !== null && n.push(o[0]);
    return n = fo(n), n.length === 1 ? t = n.concat(t) : t = [null].concat(t), t;
  }
  computeMask(e, t) {
    return z(() => {
      if (t == null)
        return null;
      if (!Array.isArray(t))
        throw new L("`mask` should be an Array");
      if (!Array.isArray(e))
        throw new L("`inputs` should be an Array");
      if (t.length !== e.length)
        throw new L(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);
      if (t.every((o) => o == null))
        return null;
      t = t.map((o) => o == null ? o : gr(o, 0));
      let n = t[0];
      for (let o = 1; o < t.length - 1; ++o)
        n = Fr(n, t[o]);
      return n;
    });
  }
};
var hd = class extends Il {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return z(() => {
      let t = e[0].clone();
      for (let n = 1; n < e.length; ++n)
        t = Y(t, e[n]);
      return t;
    });
  }
};
hd.className = "Add";
ee.registerClass(hd);
var gd = class extends Il {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return z(() => {
      let t = e[0].clone();
      for (let n = 1; n < e.length; ++n)
        t = F(t, e[n]);
      return t;
    });
  }
};
gd.className = "Multiply";
ee.registerClass(gd);
var xd = class extends Il {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return z(() => {
      let t = e[0].clone();
      for (let n = 1; n < e.length; ++n)
        t = Y(t, e[n]);
      return F(1 / e.length, t);
    });
  }
};
xd.className = "Average";
ee.registerClass(xd);
var yd = class extends Il {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return z(() => {
      let t = e[0];
      for (let n = 1; n < e.length; ++n)
        t = Rn(t, e[n]);
      return t;
    });
  }
};
yd.className = "Maximum";
ee.registerClass(yd);
var bd = class extends Il {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return z(() => {
      let t = e[0];
      for (let n = 1; n < e.length; ++n)
        t = Ca(t, e[n]);
      return t;
    });
  }
};
bd.className = "Minimum";
ee.registerClass(bd);
var wd = class extends Il {
  constructor(e) {
    super(e);
    this.DEFAULT_AXIS = -1, e == null && (e = {}), this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis, this.supportsMasking = true, this.reshapeRequired = false;
  }
  build(e) {
    if (!(Array.isArray(e) && Array.isArray(e[0])) || e.length === 1)
      throw new L("A `Concatenate` layer should be called on a list of at least 2 inputs");
    e = e;
    let t = true;
    for (let o of e)
      if (o != null) {
        t = false;
        break;
      }
    if (t)
      return;
    let n = [];
    for (let o = 0; o < e.length; ++o) {
      let s = e[o].slice();
      s.splice(this.axis, 1);
      let a = false;
      for (let i of n)
        if (b.arraysEqual(i, s)) {
          a = true;
          break;
        }
      a || n.push(s);
    }
    if (n.length > 1)
      throw new L("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e));
  }
  mergeFunction(e) {
    return z(() => Ip(e, this.axis));
  }
  computeOutputShape(e) {
    if (!(Array.isArray(e) && Array.isArray(e[0])))
      throw new L("A `Concatenate` layer should be called on a list of inputs.");
    let t = e, n = t[0].slice(), o = this.axis < 0 ? n.length + this.axis : this.axis;
    for (let s of t.slice(1)) {
      if (n[o] == null || s[o] == null) {
        n[o] = null;
        break;
      }
      n[o] += s[o];
    }
    return n;
  }
  computeMask(e, t) {
    if (t == null)
      return null;
    if (!Array.isArray(t))
      throw new L("`mask` should be an array for Concatenate");
    if (!Array.isArray(e))
      throw new L("`inputs` should be an array for Concatenate");
    if (t.length !== e.length)
      throw new L(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);
    return z(() => {
      let n = true;
      if (t.forEach((a) => {
        if (a != null) {
          n = false;
          return;
        }
      }), n)
        return null;
      let o = [];
      for (let a = 0; a < e.length; ++a)
        t[a] == null ? o.push(J(xr(e[a]), "bool")) : t[a].rank < e[a].rank ? o.push(gr(t[a], -1)) : o.push(t[a]);
      let s = tt(o, this.axis);
      return Gm(s, -1, false);
    });
  }
  getConfig() {
    let e = { axis: this.axis }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
wd.className = "Concatenate";
ee.registerClass(wd);
function kd(r, e) {
  for (; r < 0; )
    r += e;
  return r;
}
function e8(r, e, t) {
  if (r.shape.length > 3 || e.shape.length > 3)
    throw new Ne("batchDot is not implemented for tensors of 4D or higher rank yet");
  if (b.assert(r.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${r.shape.length}`), b.assert(r.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`), typeof t == "number" && (t = [t, t]), r.dtype === "complex64" || e.dtype === "complex64")
    throw new Ne("batchDot is not implemented for complex64-type Tensors yet.");
  let n = r.shape.length, o = e.shape.length;
  t == null && (t = [n - 1, o - 2]);
  let s = t;
  return z(() => {
    let a;
    if (n > o) {
      a = n - o;
      let l = [];
      for (let u = 0; u < a; ++u)
        l.push(1);
      e = O(e, e.shape.concat(l));
    } else if (o > n) {
      a = o - n;
      let l = [];
      for (let u = 0; u < a; ++u)
        l.push(1);
      r = O(r, r.shape.concat(l));
    } else
      a = 0;
    let i;
    if (r.shape.length === 2 && e.shape.length === 2)
      s[0] === s[1] ? i = me(F(r, e), s[0]) : i = me(F(Ve(r, [1, 0]), e), s[1]);
    else {
      let l = s[0] !== r.shape.length - 1, u = s[1] === e.shape.length - 1;
      i = Me(r, e, l, u);
    }
    if (a > 0) {
      let l;
      n > o ? l = n + o - 3 : l = n - 1;
      let u = [];
      for (let c = l; c < l + a; ++c)
        u.push(c);
      i = en(i, u);
    }
    return i.shape.length === 1 && (i = gr(i, 1)), i;
  });
}
var _d = class extends Il {
  constructor(e) {
    super(e);
    this.axes = e.axes, this.normalize = e.normalize == null ? false : e.normalize, this.supportsMasking = true, this.reshapeRequired = false;
  }
  build(e) {
    b.assert(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    let t = e[0], n = e[1];
    if (t.length > 3 || n.length > 3)
      throw new Ne("Dot layer does not support tensors of 4D or higher rank yet.");
    let o = this.interpretAxes(t, n);
    if (t[o[0]] !== n[o[1]])
      throw new L(`Dimension incompatibility: ${t[o[0]]} !== ${n[o[1]]}`);
  }
  mergeFunction(e) {
    if (e.length !== 2)
      throw new L(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);
    let t = e[0], n = e[1], o;
    return Array.isArray(this.axes) ? o = this.axes.map((s, a) => kd(s, e[a].shape.length)) : o = [kd(this.axes, t.shape.length), kd(this.axes, n.shape.length)], this.normalize && (t = Ff(t, o[0]), n = Ff(n, o[1])), e8(t, n, o);
  }
  interpretAxes(e, t) {
    let n;
    return Array.isArray(this.axes) ? n = this.axes : n = [kd(this.axes, e.length), kd(this.axes, t.length)], n;
  }
  computeOutputShape(e) {
    b.assert(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    let t = e[0].slice(), n = e[1].slice();
    if (t.length > 3 || n.length > 3)
      throw new Ne("Dot layer does not support tensors of 4D or higher rank yet.");
    let o = this.interpretAxes(t, n);
    t.splice(o[0], 1), n.splice(o[1], 1), n.splice(0, 1);
    let s = t.concat(n);
    return s.length === 1 && s.push(1), s;
  }
  computeMask(e, t) {
    return null;
  }
  getConfig() {
    let e = { axes: this.axes, normalize: this.normalize }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
_d.className = "Dot";
ee.registerClass(_d);
var vd = class extends Pe {
  constructor(e) {
    super(e);
    this.supportsMasking = true, this.stddev = e.stddev;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = super.getConfig(), t = { stddev: this.stddev };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return z(() => {
      this.invokeCallHook(e, t);
      let n = Fe(e);
      return hl(() => Y(Np(n.shape, 0, this.stddev), n), () => n, t.training || false);
    });
  }
};
vd.className = "GaussianNoise";
ee.registerClass(vd);
var Cd = class extends Pe {
  constructor(e) {
    super(e);
    this.supportsMasking = true, this.rate = e.rate;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return z(() => {
      this.invokeCallHook(e, t);
      let n = Fe(e);
      return this.rate > 0 && this.rate < 1 ? hl(() => {
        let s = Math.sqrt(this.rate / (1 - this.rate));
        return F(n, Np(n.shape, 1, s));
      }, () => n, t.training || false) : n;
    });
  }
};
Cd.className = "GaussianDropout";
ee.registerClass(Cd);
var Sd = class extends Pe {
  constructor(e) {
    super(e);
    this.supportsMasking = true, this.rate = e.rate, this.noiseShape = e.noiseShape;
  }
  _getNoiseShape(e) {
    return this.noiseShape || Fe(e).shape;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    let e = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return z(() => {
      if (this.rate < 1 && this.rate > 0) {
        let n = this._getNoiseShape(e);
        return hl(() => {
          let s = Fe(e), a = 1.6732632423543772, i = 1.0507009873554805, l = -a * i, u = Un(vs(n), this.rate);
          u = Su(u, "float32");
          let c = ((1 - this.rate) * (1 + this.rate * l ** 2)) ** -0.5, p = -c * l * this.rate, m = Y(F(s, u), F(Y(u, -1), l));
          return Y(F(m, c), p);
        }, () => Fe(e), t.training || false);
      }
      return e;
    });
  }
};
Sd.className = "AlphaDropout";
ee.registerClass(Sd);
function Id(r, e, t, n, o, s = 1e-3) {
  let a;
  if (r.rank === 2)
    a = fk(r, e, t, n, o, s);
  else if (r.rank === 3)
    a = dk(r, e, t, n, o, s);
  else if (r.rank === 4)
    a = hk(r, e, t, n, o, s);
  else
    throw new Ne(`batchNormalization is not implemented for array of rank ${r.rank} yet`);
  return a;
}
function t8(r, e, t, n, o = 1e-3) {
  return z(() => {
    let s = fp(r, n), a = s.mean, i = s.variance;
    return [Id(r, a, i, t, e, o), a, i];
  });
}
function r8(r, e, t, n, o = 1e-3) {
  return z(() => {
    let s = fp(r, n), a = s.mean, i = s.variance, l = [];
    for (let d of Gr(0, r.rank))
      n.indexOf(d) !== -1 ? l.push(1) : l.push(r.shape[d]);
    let u = O(a, l), c = O(i, l), p = e == null ? null : O(e, l), m = t == null ? null : O(t, l);
    return [Id(r, u, c, m, p, o), a, i];
  });
}
function n8(r, e, t, n, o = 1e-3) {
  return b.arraysEqual(n.slice().sort(), Gr(0, r.rank - 1)) ? t8(r, e, t, n, o) : r8(r, e, t, n, o);
}
var Nd = class extends Pe {
  constructor(e) {
    e == null && (e = {});
    super(e);
    this.supportsMasking = true, this.axis = e.axis == null ? -1 : e.axis, this.momentum = e.momentum == null ? 0.99 : e.momentum, this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? true : e.center, this.scale = e.scale == null ? true : e.scale, this.betaInitializer = mt(e.betaInitializer || "zeros"), this.gammaInitializer = mt(e.gammaInitializer || "ones"), this.movingMeanInitializer = mt(e.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = mt(e.movingVarianceInitializer || "ones"), this.betaConstraint = Lt(e.betaConstraint), this.gammaConstraint = Lt(e.gammaConstraint), this.betaRegularizer = xt(e.betaRegularizer), this.gammaRegularizer = xt(e.gammaRegularizer);
  }
  build(e) {
    e = Xe(e);
    let t = this.axis >= 0 ? this.axis : this.axis + e.length, n = e[t];
    if (n == null)
      throw new L(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);
    this.inputSpec = [new _t({ ndim: e.length, axes: { [t]: n } })];
    let o = [n];
    this.scale && (this.gamma = this.addWeight("gamma", o, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", o, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", o, null, this.movingMeanInitializer, null, false), this.movingVariance = this.addWeight("moving_variance", o, null, this.movingVarianceInitializer, null, false), this.built = true;
  }
  call(e, t) {
    return z(() => {
      let n = t.training == null ? false : t.training, o = Fe(e), s = o.shape, a = s.length, i = Gr(0, a), l = this.axis >= 0 ? this.axis : this.axis + a;
      i.splice(l, 1);
      let u = co(1, a);
      u[l] = s[l];
      let c = i.slice();
      c.sort();
      let p = !b.arraysEqual(c, Gr(0, a).slice(0, a - 1)), m = () => {
        if (p) {
          let w = O(this.movingMean.read(), u), x = O(this.movingVariance.read(), u), k = this.center ? O(this.beta.read(), u) : null, C = this.scale ? O(this.gamma.read(), u) : null;
          return Id(o, w, x, k, C, this.epsilon);
        } else
          return Id(o, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
      };
      if (!n)
        return m();
      let [f, d, h] = n8(o, this.gamma.read(), this.beta.read(), i, this.epsilon), g = (w, x, k) => {
        z(() => {
          let C = 1 - k, A = w.read(), $ = F(le(A, x), C);
          w.write(le(A, $));
        });
      };
      return (() => {
        g(this.movingMean, d, this.momentum), g(this.movingVariance, h, this.momentum);
      })(), f;
    });
  }
  getConfig() {
    let e = { axis: this.axis, momentum: this.momentum, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: kt(this.betaInitializer), gammaInitializer: kt(this.gammaInitializer), movingMeanInitializer: kt(this.movingMeanInitializer), movingVarianceInitializer: kt(this.movingVarianceInitializer), betaRegularizer: at(this.betaRegularizer), gammaRegularizer: at(this.gammaRegularizer), betaConstraint: Mt(this.betaConstraint), gammaConstraint: Mt(this.gammaConstraint) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Nd.className = "BatchNormalization";
ee.registerClass(Nd);
var Td = class extends Pe {
  constructor(e) {
    e == null && (e = {});
    super(e);
    if (this.axis = e.axis == null ? -1 : e.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis))
        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else if (Array.isArray(this.axis)) {
      for (let t of this.axis)
        if (!Number.isInteger(t))
          throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    } else
      throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
    this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? true : e.center, this.scale = e.scale == null ? true : e.scale, this.betaInitializer = mt(e.betaInitializer || "zeros"), this.gammaInitializer = mt(e.gammaInitializer || "ones"), this.betaRegularizer = xt(e.betaRegularizer), this.gammaRegularizer = xt(e.gammaRegularizer), this.supportsMasking = true;
  }
  build(e) {
    e = Xe(e);
    let t = e.length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let s = 0; s < this.axis.length; ++s)
      this.axis[s] < 0 && (this.axis[s] += t);
    for (let s of this.axis)
      if (s < 0 || s >= t)
        throw new Error(`Invalid axis: ${s}`);
    if (this.axis.length !== fo(this.axis).length)
      throw new Error(`Found duplicate axes in: ${this.axis}`);
    let n = this.axis.map((s) => e[s]), o = true;
    this.scale ? this.gamma = this.addWeight("gamma", n, "float32", this.gammaInitializer, this.gammaRegularizer, o) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", n, "float32", this.betaInitializer, this.betaRegularizer, o) : this.beta = null, this.built = true;
  }
  call(e, t) {
    let n = Fe(e), o = n.shape, s = o.length;
    return z(() => {
      let a = true, { mean: i, variance: l } = fp(n, this.axis, a), u = co(1, s);
      for (let h of this.axis)
        u[h] = o[h];
      let c = (h) => h != null && h.shape.length !== s && this.axis !== [s - 1] ? O(h, u) : h, p = c(this.gamma.read()), m = c(this.beta.read()), f = [], d = [];
      for (let h = 0; h < s; ++h)
        this.axis.indexOf(h) !== -1 ? (f.push(o[h]), d.push(1)) : (f.push(1), d.push(o[h]));
      return i = Rr(i, f), l = Rr(l, f), p = Rr(p, d), m = Rr(m, d), Id(n, i, l, m, p, this.epsilon);
    });
  }
  getConfig() {
    let e = { axis: this.axis, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: kt(this.betaInitializer), gammaInitializer: kt(this.gammaInitializer), betaRegularizer: at(this.betaRegularizer), gammaRegularizer: at(this.gammaRegularizer) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Td.className = "LayerNormalization";
ee.registerClass(Td);
function o8(r, e, t) {
  return z(() => {
    if (r.rank !== 4)
      throw new L(`temporalPadding expects input tensor to be 4-D, but received a ${r.rank}-D tensor.`);
    if (e == null && (e = [[1, 1], [1, 1]]), e.length !== 2 || e[0].length !== 2 || e[1].length !== 2)
      throw new L("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (t == null && (t = tn()), t !== "channelsLast" && t !== "channelsFirst")
      throw new L(`Unknown data format: ${t}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
    let n;
    return t === "channelsFirst" ? n = [[0, 0], [0, 0], e[0], e[1]] : n = [[0, 0], e[0], e[1], [0, 0]], xn(r, n);
  });
}
var Ed = class extends Pe {
  constructor(e) {
    e == null && (e = {});
    super(e);
    if (this.dataFormat = e.dataFormat == null ? tn() : e.dataFormat, e.padding == null)
      this.padding = [[1, 1], [1, 1]];
    else if (typeof e.padding == "number")
      this.padding = [[e.padding, e.padding], [e.padding, e.padding]];
    else {
      if (e.padding = e.padding, e.padding.length !== 2)
        throw new L(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);
      let t, n;
      if (typeof e.padding[0] == "number")
        t = [e.padding[0], e.padding[0]], n = [e.padding[1], e.padding[1]];
      else {
        if (e.padding = e.padding, e.padding[0].length !== 2)
          throw new L(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);
        if (t = e.padding[0], e.padding[1].length !== 2)
          throw new L(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);
        n = e.padding[1];
      }
      this.padding = [t, n];
    }
    this.inputSpec = [new _t({ ndim: 4 })];
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t, n;
    return this.dataFormat === "channelsFirst" ? (e[2] != null && e[2] >= 0 ? t = e[2] + this.padding[0][0] + this.padding[0][1] : t = null, e[3] != null && e[3] >= 0 ? n = e[3] + this.padding[1][0] + this.padding[1][1] : n = null, [e[0], e[1], t, n]) : (e[1] != null && e[1] >= 0 ? t = e[1] + this.padding[0][0] + this.padding[0][1] : t = null, e[2] != null && e[2] >= 0 ? n = e[2] + this.padding[1][0] + this.padding[1][1] : n = null, [e[0], t, n, e[3]]);
  }
  call(e, t) {
    return z(() => o8(Fe(e), this.padding, this.dataFormat));
  }
  getConfig() {
    let e = { padding: this.padding, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Ed.className = "ZeroPadding2D";
ee.registerClass(Ed);
function mx(r, e, t, n, o, s) {
  return z(() => {
    Rt(o), b_(s), rn(n), t == null && (t = [1, 1]), n == null && (n = "valid"), o == null && (o = tn()), s == null && (s = "max"), r = Xf(r, o);
    let a, i = n === "same" ? "same" : "valid";
    return s === "max" ? a = pu(r, e, t, i) : a = nu(r, e, t, i), o === "channelsFirst" && (a = Ve(a, [0, 3, 1, 2])), a;
  });
}
function DA(r, e, t, n, o, s) {
  return z(() => {
    Rt(o), b_(s), rn(n), t == null && (t = [1, 1, 1]), n == null && (n = "valid"), o == null && (o = tn()), s == null && (s = "max"), r = J_(r, o);
    let a, i = n === "same" ? "same" : "valid";
    return s === "max" ? a = rf(r, e, t, i) : a = Um(r, e, t, i), o === "channelsFirst" && (a = Ve(a, [0, 4, 1, 2, 3])), a;
  });
}
var nv = class extends Pe {
  constructor(e) {
    e.poolSize == null && (e.poolSize = 2);
    super(e);
    if (typeof e.poolSize == "number")
      this.poolSize = [e.poolSize];
    else if (Array.isArray(e.poolSize) && e.poolSize.length === 1 && typeof e.poolSize[0] == "number")
      this.poolSize = e.poolSize;
    else
      throw new L(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);
    if (Kt(this.poolSize, "poolSize"), e.strides == null)
      this.strides = this.poolSize;
    else if (typeof e.strides == "number")
      this.strides = [e.strides];
    else if (Array.isArray(e.strides) && e.strides.length === 1 && typeof e.strides[0] == "number")
      this.strides = e.strides;
    else
      throw new L(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);
    Kt(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, rn(this.padding), this.inputSpec = [new _t({ ndim: 3 })];
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t = _n(e[1], this.poolSize[0], this.padding, this.strides[0]);
    return [e[0], t, e[2]];
  }
  call(e, t) {
    return z(() => {
      this.invokeCallHook(e, t), e = Ea(Fe(e), 2);
      let n = this.poolingFunction(Fe(e), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return en(n, [2]);
    });
  }
  getConfig() {
    let e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
var Ad = class extends nv {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, o, s) {
    return Rt(s), rn(o), mx(e, t, n, o, s, "max");
  }
};
Ad.className = "MaxPooling1D";
ee.registerClass(Ad);
var $d = class extends nv {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, o, s) {
    return Rt(s), rn(o), mx(e, t, n, o, s, "avg");
  }
};
$d.className = "AveragePooling1D";
ee.registerClass($d);
var ov = class extends Pe {
  constructor(e) {
    e.poolSize == null && (e.poolSize = [2, 2]);
    super(e);
    if (this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize], e.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(e.strides)) {
      if (e.strides.length !== 2)
        throw new L(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);
      this.strides = e.strides;
    } else
      this.strides = [e.strides, e.strides];
    Kt(this.poolSize, "poolSize"), Kt(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Rt(this.dataFormat), rn(this.padding), this.inputSpec = [new _t({ ndim: 4 })];
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2];
    return t = _n(t, this.poolSize[0], this.padding, this.strides[0]), n = _n(n, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, n] : [e[0], t, n, e[3]];
  }
  call(e, t) {
    return z(() => (this.invokeCallHook(e, t), this.poolingFunction(Fe(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    let e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
var Dd = class extends ov {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, o, s) {
    return Rt(s), rn(o), mx(e, t, n, o, s, "max");
  }
};
Dd.className = "MaxPooling2D";
ee.registerClass(Dd);
var Rd = class extends ov {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, o, s) {
    return Rt(s), rn(o), mx(e, t, n, o, s, "avg");
  }
};
Rd.className = "AveragePooling2D";
ee.registerClass(Rd);
var sv = class extends Pe {
  constructor(e) {
    e.poolSize == null && (e.poolSize = [2, 2, 2]);
    super(e);
    if (this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize, e.poolSize], e.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(e.strides)) {
      if (e.strides.length !== 3)
        throw new L(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);
      this.strides = e.strides;
    } else
      this.strides = [e.strides, e.strides, e.strides];
    Kt(this.poolSize, "poolSize"), Kt(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Rt(this.dataFormat), rn(this.padding), this.inputSpec = [new _t({ ndim: 5 })];
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2], o = this.dataFormat === "channelsFirst" ? e[4] : e[3];
    return t = _n(t, this.poolSize[0], this.padding, this.strides[0]), n = _n(n, this.poolSize[1], this.padding, this.strides[1]), o = _n(o, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, n, o] : [e[0], t, n, o, e[4]];
  }
  call(e, t) {
    return z(() => (this.invokeCallHook(e, t), this.poolingFunction(Fe(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    let e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
var Fd = class extends sv {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, o, s) {
    return Rt(s), rn(o), DA(e, t, n, o, s, "max");
  }
};
Fd.className = "MaxPooling3D";
ee.registerClass(Fd);
var Od = class extends sv {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, n, o, s) {
    return Rt(s), rn(o), DA(e, t, n, o, s, "avg");
  }
};
Od.className = "AveragePooling3D";
ee.registerClass(Od);
var iv = class extends Pe {
  constructor(e) {
    super(e);
    this.inputSpec = [new _t({ ndim: 3 })];
  }
  computeOutputShape(e) {
    return [e[0], e[2]];
  }
  call(e, t) {
    throw new Ne();
  }
};
var Pd = class extends iv {
  constructor(e) {
    super(e || {});
  }
  call(e, t) {
    return z(() => {
      let n = Fe(e);
      return Ct(n, 1);
    });
  }
};
Pd.className = "GlobalAveragePooling1D";
ee.registerClass(Pd);
var Md = class extends iv {
  constructor(e) {
    super(e || {});
  }
  call(e, t) {
    return z(() => {
      let n = Fe(e);
      return Vr(n, 1);
    });
  }
};
Md.className = "GlobalMaxPooling1D";
ee.registerClass(Md);
var av = class extends Pe {
  constructor(e) {
    super(e);
    this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Rt(this.dataFormat), this.inputSpec = [new _t({ ndim: 4 })];
  }
  computeOutputShape(e) {
    return e = e, this.dataFormat === "channelsLast" ? [e[0], e[3]] : [e[0], e[1]];
  }
  call(e, t) {
    throw new Ne();
  }
  getConfig() {
    let e = { dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
var Ld = class extends av {
  call(e, t) {
    return z(() => {
      let n = Fe(e);
      return this.dataFormat === "channelsLast" ? Ct(n, [1, 2]) : Ct(n, [2, 3]);
    });
  }
};
Ld.className = "GlobalAveragePooling2D";
ee.registerClass(Ld);
var zd = class extends av {
  call(e, t) {
    return z(() => {
      let n = Fe(e);
      return this.dataFormat === "channelsLast" ? Vr(n, [1, 2]) : Vr(n, [2, 3]);
    });
  }
};
zd.className = "GlobalMaxPooling2D";
ee.registerClass(zd);
var lv = class extends Pe {
  constructor(e) {
    super(e);
    this.layer = e.layer;
  }
  build(e) {
    this.built = true;
  }
  get trainable() {
    return this.layer != null ? this.layer.trainable : false;
  }
  set trainable(e) {
    this.layer != null && (this.layer.trainable = e);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  get updates() {
    return this.layer._updates;
  }
  get losses() {
    return this.layer.losses;
  }
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(e) {
    this.layer.setWeights(e);
  }
  getConfig() {
    let e = { layer: { className: this.layer.getClassName(), config: this.layer.getConfig() } }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.layer != null && this.layer.setFastWeightInitDuringBuild(e);
  }
  static fromConfig(e, t, n = {}) {
    let o = t.layer, s = sn(o, n);
    delete t.layer;
    let a = { layer: s };
    return Object.assign(a, t), new e(a);
  }
};
var Bd = class extends lv {
  constructor(e) {
    super(e);
    this.supportsMasking = true;
  }
  build(e) {
    if (e = Xe(e), e.length < 3)
      throw new L(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);
    this.inputSpec = [{ shape: e }];
    let t = [e[0]].concat(e.slice(2));
    this.layer.built || (this.layer.build(t), this.layer.built = true), super.build(e);
  }
  computeOutputShape(e) {
    e = Xe(e);
    let t = [e[0]].concat(e.slice(2)), n = this.layer.computeOutputShape(t), o = e[1];
    return [n[0], o].concat(n.slice(1));
  }
  call(e, t) {
    return z(() => (e = Fe(e), tv((a, i) => [Fe(this.layer.call(a, t)), []], e, [], false, null, null, false, true)[1]));
  }
};
Bd.className = "TimeDistributed";
ee.registerClass(Bd);
function s8(r) {
  fi(VE, "BidirectionalMergeMode", r);
}
var i8 = "concat";
var Vd = class extends lv {
  constructor(e) {
    super(e);
    let t = e.layer.getConfig(), n = {};
    n.className = e.layer.getClassName(), n.config = t, this.forwardLayer = sn(n), t.goBackwards = t.goBackwards !== true;
    let o = {};
    if (o.className = e.layer.getClassName(), o.config = t, this.backwardLayer = sn(o), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = e.mergeMode === void 0 ? i8 : e.mergeMode, s8(this.mergeMode), e.weights)
      throw new Ne("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = e.layer.stateful, this.returnSequences = e.layer.returnSequences, this.returnState = e.layer.returnState, this.supportsMasking = true, this._trainable = true, this.inputSpec = e.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(e) {
    this._trainable = e, this.forwardLayer != null && (this.forwardLayer.trainable = e), this.backwardLayer != null && (this.backwardLayer.trainable = e);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(e) {
    let t = e.length, n = Math.floor(t / 2);
    this.forwardLayer.setWeights(e.slice(0, n)), this.backwardLayer.setWeights(e.slice(n));
  }
  computeOutputShape(e) {
    let t = this.forwardLayer.computeOutputShape(e);
    Array.isArray(t) && Array.isArray(t[0]) || (t = [t]), t = t;
    let n, o, s;
    return this.returnState && (s = t.slice(1)), n = t[0], n = n, this.mergeMode === "concat" ? (n[n.length - 1] *= 2, o = [n]) : this.mergeMode == null ? o = [n, n.slice()] : o = [n], this.returnState ? this.mergeMode == null ? o.concat(s).concat(s.slice()) : [n].concat(s).concat(s.slice()) : yr(o);
  }
  apply(e, t) {
    let n = t == null ? null : t.initialState, o = t == null ? null : t.constants;
    t == null && (t = {});
    let s = ev(e, n, o, this.numConstants);
    if (e = s.inputs, n = s.initialState, o = s.constants, Array.isArray(e) && (n = e.slice(1), e = e[0]), (n == null || n.length === 0) && o == null)
      return super.apply(e, t);
    let a = [], i = [];
    if (n != null) {
      let u = n.length;
      if (u % 2 > 0)
        throw new L("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      t.initialState = n, a.push(...n);
      let c = n.map((p) => new _t({ shape: p.shape }));
      this.forwardLayer.stateSpec = c.slice(0, u / 2), this.backwardLayer.stateSpec = c.slice(u / 2), i.push(...c);
    }
    if (o != null)
      throw new Ne("Support for constants in Bidirectional layers is not implemented yet.");
    let l = a[0] instanceof on;
    for (let u of a)
      if (u instanceof on !== l)
        throw new L("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (l) {
      let u = [e].concat(a), c = this.inputSpec.concat(i), p = this.inputSpec;
      this.inputSpec = c;
      let m = super.apply(u, t);
      return this.inputSpec = p, m;
    } else
      return super.apply(e, t);
  }
  call(e, t) {
    return z(() => {
      let n = t.initialState, o, s;
      if (n == null)
        o = this.forwardLayer.call(e, t), s = this.backwardLayer.call(e, t);
      else {
        let l = n.slice(0, n.length / 2), u = n.slice(n.length / 2);
        o = this.forwardLayer.call(e, Object.assign(t, { initialState: l })), s = this.backwardLayer.call(e, Object.assign(t, { initialState: u }));
      }
      let a;
      this.returnState && (Array.isArray(o) && (a = o.slice(1).concat(s.slice(1))), o = o[0], s = s[0]), this.returnSequences && (s = lr(s, 1));
      let i;
      return this.mergeMode === "concat" ? i = Ip([o, s]) : this.mergeMode === "sum" ? i = Y(o, s) : this.mergeMode === "ave" ? i = F(0.5, Y(o, s)) : this.mergeMode === "mul" ? i = F(o, s) : this.mergeMode == null && (i = [o, s]), this.returnState ? this.mergeMode == null ? i.concat(a) : [i].concat(a) : i;
    });
  }
  resetStates(e) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(e) {
    Cs(this.forwardLayer.name, () => {
      this.forwardLayer.build(e);
    }), Cs(this.backwardLayer.name, () => {
      this.backwardLayer.build(e);
    }), this.built = true;
  }
  computeMask(e, t) {
    Array.isArray(t) && (t = t[0]);
    let n;
    if (this.returnSequences ? this.mergeMode == null ? n = [t, t] : n = t : this.mergeMode == null ? n = [null, null] : n = null, this.returnState) {
      let s = this.forwardLayer.states.map((a) => null);
      return Array.isArray(n) ? n.concat(s).concat(s) : [n].concat(s).concat(s);
    } else
      return n;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(e), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(e);
  }
  getConfig() {
    let e = { mergeMode: this.mergeMode }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  static fromConfig(e, t) {
    let n = sn(t.layer);
    if (delete t.layer, t.numConstants != null)
      throw new Ne("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    let o = t;
    return o.layer = n, new e(o);
  }
};
Vd.className = "Bidirectional";
ee.registerClass(Vd);
function a8(r) {
  return new di(r);
}
function l8(r) {
  return new Hf(r);
}
function u8(r) {
  return new jf(r);
}
function c8(r) {
  return new Gf(r);
}
function p8(r) {
  return new Uf(r);
}
function m8(r) {
  return new Kf(r);
}
function f8(r) {
  return new qf(r);
}
function d8(r) {
  return new Ru(r);
}
function h8(r) {
  return new _l(r);
}
function g8(r) {
  return new Yf(r);
}
function x8(r) {
  return new vl(r);
}
function y8(r) {
  return new Zf(r);
}
function b8(r) {
  return new Jf(r);
}
function w8(r) {
  return new Qf(r);
}
function k8(r) {
  return new ed(r);
}
function _8(r) {
  return new td(r);
}
function v8(r) {
  return new ud(r);
}
function C8(r) {
  return new ad(r);
}
function S8(r) {
  return new Hp(r);
}
function I8(r) {
  return new id(r);
}
function N8(r) {
  return new ld(r);
}
function T8(r) {
  return new cd(r);
}
function E8(r) {
  return new pd(r);
}
function A8(r) {
  return new md(r);
}
function $8(r) {
  return new dd(r);
}
function D8(r) {
  return new hd(r);
}
function R8(r) {
  return new xd(r);
}
function F8(r) {
  return new wd(r);
}
function O8(r) {
  return new yd(r);
}
function P8(r) {
  return new bd(r);
}
function M8(r) {
  return new gd(r);
}
function L8(r) {
  return new _d(r);
}
function z8(r) {
  return new Nd(r);
}
function B8(r) {
  return new Td(r);
}
function V8(r) {
  return new Ed(r);
}
function uv(r) {
  return new $d(r);
}
function W8(r) {
  return uv(r);
}
function j8(r) {
  return uv(r);
}
function cv(r) {
  return new Rd(r);
}
function G8(r) {
  return cv(r);
}
function U8(r) {
  return cv(r);
}
function pv(r) {
  return new Od(r);
}
function H8(r) {
  return pv(r);
}
function q8(r) {
  return pv(r);
}
function K8(r) {
  return new Pd(r);
}
function X8(r) {
  return new Ld(r);
}
function RA(r) {
  return new Md(r);
}
function FA(r) {
  return new zd(r);
}
function OA(r) {
  return new Ad(r);
}
function PA(r) {
  return new Dd(r);
}
function Y8(r) {
  return new Fd(r);
}
function Z8(r) {
  return new nd(r);
}
function J8(r) {
  return new jp(r);
}
function Q8(r) {
  return new od(r);
}
function eX(r) {
  return new Sl(r);
}
function tX(r) {
  return new rd(r);
}
function rX(r) {
  return new Wp(r);
}
function nX(r) {
  return new sd(r);
}
function oX(r) {
  return new Up(r);
}
function sX(r) {
  return new On(r);
}
function iX(r) {
  return new Gp(r);
}
function aX(r) {
  return new Vd(r);
}
function lX(r) {
  return new Bd(r);
}
var uX = RA;
var cX = FA;
var pX = OA;
var mX = PA;
function fX(r) {
  return new vd(r);
}
function dX(r) {
  return new Cd(r);
}
function hX(r) {
  return new Sd(r);
}
function gX(r) {
  return new fd(r);
}
var LA = {};
He(LA, { MAPE: () => NX, MSE: () => AX, binaryAccuracy: () => xX, binaryCrossentropy: () => yX, categoricalAccuracy: () => wX, categoricalCrossentropy: () => kX, cosineProximity: () => CX, mape: () => TX, meanAbsoluteError: () => SX, meanAbsolutePercentageError: () => IX, meanSquaredError: () => EX, mse: () => $X, precision: () => _X, recall: () => vX, sparseCategoricalAccuracy: () => bX });
function xX(r, e) {
  return Mf(r, e);
}
function yX(r, e) {
  return rx(r, e);
}
function bX(r, e) {
  return nx(r, e);
}
function wX(r, e) {
  return Lf(r, e);
}
function kX(r, e) {
  return zf(r, e);
}
function _X(r, e) {
  return N_(r, e);
}
function vX(r, e) {
  return aA(r, e);
}
function CX(r, e) {
  return Of(r, e);
}
function SX(r, e) {
  return Mp(r, e);
}
function IX(r, e) {
  return bl(r, e);
}
function NX(r, e) {
  return bl(r, e);
}
function TX(r, e) {
  return bl(r, e);
}
function EX(r, e) {
  return gi(r, e);
}
function AX(r, e) {
  return gi(r, e);
}
function $X(r, e) {
  return gi(r, e);
}
var zA = {};
He(zA, { modelFromJSON: () => SA });
var BA = {};
He(BA, { l1: () => RX, l1l2: () => DX, l2: () => FX });
function DX(r) {
  return new $u(r);
}
function RX(r) {
  return NA(r);
}
function FX(r) {
  return TA(r);
}
var mv = class extends yl {
  constructor() {
    super(...arguments);
    this.model = null;
  }
  setModel(e) {
    if (!(e instanceof Xn))
      throw new Error("model must be a LayersModel, not some other Container");
    this.model = e;
  }
};
function fx(r, e) {
  return r < e;
}
function VA(r, e) {
  return r > e;
}
var fv = class extends mv {
  constructor(e) {
    super();
    if (e == null && (e = {}), e.restoreBestWeights)
      throw new Ne("restoreBestWeights = True is not implemented in EarlyStopping yet.");
    this.monitor = e.monitor || "val_loss", this.minDelta = Math.abs(e.minDelta || 0), this.patience = e.patience || 0, this.verbose = e.verbose || 0, this.mode = e.mode || "auto", this.baseline = e.baseline, ["auto", "min", "max"].indexOf(this.mode) === -1 && (console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`), this.mode = "auto"), this.mode === "min" ? this.monitorFunc = fx : this.mode === "max" ? this.monitorFunc = VA : this.monitor.indexOf("acc") !== -1 ? this.monitorFunc = VA : this.monitorFunc = fx, this.monitorFunc === fx && (this.minDelta *= -1);
  }
  async onTrainBegin(e) {
    this.wait = 0, this.stoppedEpoch = 0, this.baseline != null ? this.best = this.baseline : this.best = this.monitorFunc === fx ? 1 / 0 : -1 / 0;
  }
  async onEpochEnd(e, t) {
    await hi(t);
    let n = this.getMonitorValue(t);
    n != null && (this.monitorFunc(n - this.minDelta, this.best) ? (this.best = n, this.wait = 0) : (this.wait++, this.wait >= this.patience && (this.stoppedEpoch = e, this.model.stopTraining = true)));
  }
  async onTrainEnd(e) {
    this.stoppedEpoch > 0 && this.verbose && console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);
  }
  getMonitorValue(e) {
    e == null && (e = {});
    let t = e[this.monitor];
    return t == null && console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`), t;
  }
};
function OX(r) {
  return new fv(r);
}
var PX = { earlyStopping: OX };
var xo;
(function(r) {
  r[r.DT_INVALID = 0] = "DT_INVALID", r[r.DT_FLOAT = 1] = "DT_FLOAT", r[r.DT_DOUBLE = 2] = "DT_DOUBLE", r[r.DT_INT32 = 3] = "DT_INT32", r[r.DT_UINT8 = 4] = "DT_UINT8", r[r.DT_INT16 = 5] = "DT_INT16", r[r.DT_INT8 = 6] = "DT_INT8", r[r.DT_STRING = 7] = "DT_STRING", r[r.DT_COMPLEX64 = 8] = "DT_COMPLEX64", r[r.DT_INT64 = 9] = "DT_INT64", r[r.DT_BOOL = 10] = "DT_BOOL", r[r.DT_QINT8 = 11] = "DT_QINT8", r[r.DT_QUINT8 = 12] = "DT_QUINT8", r[r.DT_QINT32 = 13] = "DT_QINT32", r[r.DT_BFLOAT16 = 14] = "DT_BFLOAT16", r[r.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", r[r.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", r[r.DT_INT32_REF = 103] = "DT_INT32_REF", r[r.DT_UINT8_REF = 104] = "DT_UINT8_REF", r[r.DT_INT16_REF = 105] = "DT_INT16_REF", r[r.DT_INT8_REF = 106] = "DT_INT8_REF", r[r.DT_STRING_REF = 107] = "DT_STRING_REF", r[r.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", r[r.DT_INT64_REF = 109] = "DT_INT64_REF", r[r.DT_BOOL_REF = 110] = "DT_BOOL_REF", r[r.DT_QINT8_REF = 111] = "DT_QINT8_REF", r[r.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", r[r.DT_QINT32_REF = 113] = "DT_QINT32_REF", r[r.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF";
})(xo || (xo = {}));
var WA;
(function(r) {
  let e;
  (function(t) {
    t[t.LEGACY = 0] = "LEGACY", t[t.V1 = 1] = "V1", t[t.V2 = 2] = "V2";
  })(e = r.CheckpointFormatVersion || (r.CheckpointFormatVersion = {}));
})(WA || (WA = {}));
var dv = {};
function MX(r, e) {
  let t = { tfOpName: r, category: "custom", inputs: [], attrs: [], customExecutor: e };
  dv[r] = t;
}
function dx(r) {
  return dv[r];
}
function LX(r) {
  delete dv[r];
}
function v(r, e, t, n, o) {
  let s = e.inputParams[r];
  if (s && s.inputIndexStart !== void 0) {
    let i = s.inputIndexStart, l = s.inputIndexEnd === 0 ? void 0 : s.inputIndexEnd === void 0 ? i + 1 : s.inputIndexEnd;
    if (s.type === "tensor")
      return fr(e.inputNames[s.inputIndexStart], t, n, o);
    if (s.type === "tensors")
      return e.inputNames.slice(i, l).map((m) => fr(m, t, n, o));
    let u = fr(e.inputNames.slice(i)[0], t, n, o), c = u.dataSync();
    return s.type === "number" ? c[0] : b.toNestedArray(u.shape, c);
  }
  let a = e.attrParams[r];
  return a && a.value;
}
function fr(r, e, t, n) {
  let [o, s] = ln(r);
  if (n != null) {
    let i = n.getHashTableHandleByName(o);
    if (i != null)
      return i;
  }
  let a = t.currentContextIds.find((i) => !!e[hx(o, i)]);
  return a !== void 0 ? e[hx(o, a)][s] : void 0;
}
function jA(r, e, t) {
  return e[hx(r, t.currentContextId)];
}
function As(r, e) {
  let [t, n, o] = ln(r);
  return [hx(t, e && e.currentContextId), n, o];
}
function hx(r, e) {
  return e ? `${r}-${e}` : r;
}
function ln(r) {
  let e = r.split(":");
  if (e.length === 1)
    return [r, 0, void 0];
  let t = e[0], n = e.length === 3 ? e[1] : void 0, o = Number(e[e.length - 1]);
  return [t, o, n];
}
function Wd(r, e, t) {
  let n = v("pad", r, e, t);
  if (n === "explicit") {
    n = v("explicitPaddings", r, e, t);
    let o = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let s = 0; s < 4; s++)
      o[s][0] = n[s * 2], o[s][1] = n[s * 2 + 1];
    return o;
  }
  return n;
}
function $s(r) {
  return r.kept ? r : hn(r);
}
var hv = {};
He(hv, { json: () => zX });
var zX = [{ tfOpName: "Add", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddV2", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddN", category: "arithmetic", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "BiasAdd", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "Sub", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "RealDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Div", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "DivNoNan", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mul", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Maximum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Minimum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Pow", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SquaredDifference", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorMod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var gv = {};
He(gv, { json: () => BX });
var BX = [{ tfOpName: "Abs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan2", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Ceil", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ClipByValue", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "clipValueMin", type: "number" }, { start: 2, name: "clipValueMax", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Complex", category: "basic_math", inputs: [{ start: 0, name: "real", type: "tensor" }, { start: 1, name: "imag", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ComplexAbs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Elu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Exp", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Floor", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Imag", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Neg", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Real", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Prelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "alpha", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu6", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Selu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sigmoid", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Rsqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Square", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sign", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Round", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Expm1", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log1p", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Reciprocal", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Softplus", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Erf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Prod", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axes", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LeakyRelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "alpha", name: "alpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsNan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var xv = {};
He(xv, { json: () => VX });
var VX = [{ tfOpName: "EmptyTensorList", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "maxNumElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "LoopCond", category: "control", inputs: [{ start: 0, name: "pred", type: "tensor" }] }, { tfOpName: "Switch", category: "control", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "pred", type: "tensor" }] }, { tfOpName: "Merge", category: "control", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "Enter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "frame_name", name: "frameName", type: "string" }, { tfName: "is_constant", name: "isConstant", type: "bool" }] }, { tfOpName: "Exit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NextIteration", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayV3", category: "control", inputs: [{ start: 0, name: "size", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "dynamic_size", name: "dynamicSize", type: "bool" }, { tfName: "clear_after_read", name: "clearAfterRead", type: "bool" }, { tfName: "identical_element_shapes", name: "identicalElementShapes", type: "bool" }, { tfName: "tensor_array_name", name: "name", type: "string" }] }, { tfOpName: "TensorArrayWriteV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayReadV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayGatherV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }] }, { tfOpName: "TensorArrayScatterV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArrayConcatV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape_except0", name: "elementShapeExcept0", type: "shape", notSupported: true }] }, { tfOpName: "TensorArraySplitV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }, { start: 2, name: "lengths", type: "number[]" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArraySizeV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }] }, { tfOpName: "TensorArrayCloseV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }] }, { tfOpName: "StatelessIf", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "If", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "StatelessWhile", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "While", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "TensorListScatter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListScatterV2", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }, { start: 3, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGather", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListSetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListReserve", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListFromTensor", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListStack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }, { tfName: "num_elements", name: "numElements", type: "dtype" }] }, { tfOpName: "TensorListSplit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }, { start: 2, name: "lengths", type: "number[]" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcat", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPopBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPushBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }];
var yv = {};
He(yv, { json: () => WX });
var WX = [{ tfOpName: "AvgPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [], notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPoolWithArgmax", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "include_batch_in_index", name: "includeBatchInIndex", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AvgPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Conv1D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "stride", name: "stride", type: "number" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NWC" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "dilation", name: "dilation", type: "number", defaultValue: 1 }] }, { tfOpName: "Conv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "useCudnnOnGpu", name: "useCudnnOnGpu", type: "bool" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "_FusedConv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "use_cudnn_on_gpu", name: "useCudnnOnGpu", type: "bool", defaultValue: true }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number" }] }, { tfOpName: "Conv2DBackpropInput", category: "convolution", inputs: [{ start: 2, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 0, name: "outputShape", type: "number[]" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]", notSupported: true }] }, { tfOpName: "DepthwiseConv2d", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "DepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "FusedDepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }] }, { tfOpName: "Conv3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "Dilation2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "rates", name: "dilations", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }] }];
var bv = {};
He(bv, { json: () => jX });
var jX = [{ tfOpName: "Fill", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }, { start: 1, name: "value", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "LinSpace", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "num", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "OneHot", category: "creation", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "depth", type: "number" }, { start: 2, name: "onValue", type: "number", defaultValue: 1 }, { start: 3, name: "offValue", type: "number", defaultValue: 0 }], attrs: [{ tfName: "axis", name: "axis", type: "number", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Ones", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "OnesLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "RandomUniform", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number", defaultValue: 0 }, { tfName: "maxval", name: "maxval", type: "number", defaultValue: 1 }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Range", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "step", type: "number", defaultValue: 0 }], attrs: [{ tfName: "Tidx", name: "dtype", type: "dtype" }] }, { tfOpName: "TruncatedNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "means", name: "mean", type: "number", defaultValue: 0 }, { tfName: "stddev", name: "stdDev", type: "number", defaultValue: 1 }, { tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Zeros", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "ZerosLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Multinomial", category: "creation", inputs: [{ start: 0, name: "logits", type: "tensor" }, { start: 1, name: "numSamples", type: "number" }], attrs: [{ tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number" }, { tfName: "T", name: "dtype", type: "dtype" }, { tfName: "output_dtype", name: "output_dtype", type: "dtype" }] }];
var wv = {};
He(wv, { json: () => GX });
var GX = [{ tfOpName: "NonMaxSuppressionV2", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV3", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV4", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "T_threshold", name: "threshold", type: "dtype", notSupported: true }, { tfName: "pad_to_max_output_size", name: "padToMaxOutputSize", type: "bool" }] }, { tfOpName: "NonMaxSuppressionV5", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }, { start: 5, name: "softNmsSigma", type: "number" }] }, { tfOpName: "Where", category: "dynamic", inputs: [{ start: 0, name: "condition", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ListDiff", category: "dynamic", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var kv = {};
He(kv, { json: () => UX });
var UX = [{ tfOpName: "TopKV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "k", type: "number" }], attrs: [{ tfName: "sorted", name: "sorted", type: "bool" }] }, { tfOpName: "Unique", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "UniqueV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }];
var _v = {};
He(_v, { json: () => HX });
var HX = [{ tfOpName: "PlaceholderWithDefault", category: "graph", inputs: [{ start: 0, name: "default", type: "tensor" }], attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Placeholder", category: "graph", attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Const", category: "graph" }, { tfOpName: "Identity", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IdentityN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Snapshot", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Rank", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Size", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Shape", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "ShapeN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Print", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "data", type: "tensors" }], attrs: [{ tfName: "message", name: "message", type: "string" }, { tfName: "first_n", name: "firstN", type: "number", notSupported: true }, { tfName: "summarize", name: "summarize", type: "number", defaultValue: 3 }] }, { tfOpName: "NoOp", category: "graph", inputs: [] }, { tfOpName: "StopGradient", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "FakeQuantWithMinMaxVars", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "min", name: "min", type: "number" }, { tfName: "max", name: "max", type: "number" }] }];
var vv = {};
He(vv, { json: () => qX });
var qX = [{ tfOpName: "HashTable", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "HashTableV2", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "LookupTableImport", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableImportV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFind", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFindV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableSize", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "LookupTableSizeV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }];
var Cv = {};
He(Cv, { json: () => KX });
var KX = [{ tfOpName: "ResizeBilinear", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ResizeNearestNeighbor", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "CropAndResize", category: "image", inputs: [{ start: 0, name: "image", type: "tensor" }, { start: 1, name: "boxes", type: "tensor" }, { start: 2, name: "boxInd", type: "tensor" }, { start: 3, name: "cropSize", type: "number[]" }], attrs: [{ tfName: "method", name: "method", type: "string" }, { tfName: "extrapolation_value", name: "extrapolationValue", type: "number" }] }];
var Sv = {};
He(Sv, { json: () => XX });
var XX = [{ tfOpName: "Equal", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NotEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Greater", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "GreaterEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Less", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LessEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalAnd", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalNot", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalOr", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Select", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SelectV2", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var Iv = {};
He(Iv, { json: () => YX });
var YX = [{ tfOpName: "_FusedMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMulV2", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Transpose", category: "matrices", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "perm", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Einsum", category: "matrices", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "equation", name: "equation", type: "string" }, { tfName: "N", name: "n", type: "number", defaultValue: 2 }, { tfName: "T", name: "dtype", type: "dtype" }] }];
var Nv = {};
He(Nv, { json: () => ZX });
var ZX = [{ tfOpName: "FusedBatchNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV2", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV3", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "LRN", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "depth_radius", name: "radius", type: "number", defaultValue: 5 }, { tfName: "bias", name: "bias", type: "number", defaultValue: 1 }, { tfName: "alpha", name: "alpha", type: "number", defaultValue: 1 }, { tfName: "beta", name: "beta", type: "number", defaultValue: 0.5 }] }, { tfOpName: "Softmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "LogSoftmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "normalization", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: true, notSupported: true }] }];
var Tv = {};
He(Tv, { json: () => JX });
var JX = [{ tfOpName: "Bincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }] }, { tfOpName: "DenseBincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }], attrs: [{ tfName: "binary_output", name: "binaryOutput", type: "bool" }] }, { tfOpName: "Max", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Mean", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Min", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Sum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "All", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Any", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "ArgMax", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "ArgMin", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "Prod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Cumsum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }];
var Ev = {};
He(Ev, { json: () => QX });
var QX = [{ tfOpName: "ConcatV2", category: "slice_join", inputs: [{ start: 0, end: -1, name: "tensors", type: "tensors" }, { start: -1, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "Concat", category: "slice_join", inputs: [{ start: 1, end: 0, name: "tensors", type: "tensors" }, { start: 0, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "GatherV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }], attrs: [{ tfName: "batch_dims", name: "batchDims", type: "number", defaultValue: 0 }] }, { tfOpName: "Gather", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", notSupported: true }] }, { tfOpName: "Reverse", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "dims", type: "bool[]" }] }, { tfOpName: "ReverseV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }] }, { tfOpName: "Slice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "size", type: "number[]" }] }, { tfOpName: "StridedSlice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "end", type: "number[]" }, { start: 3, name: "strides", type: "number[]" }], attrs: [{ tfName: "begin_mask", name: "beginMask", type: "number", defaultValue: 0 }, { tfName: "end_mask", name: "endMask", type: "number", defaultValue: 0 }, { tfName: "new_axis_mask", name: "newAxisMask", type: "number", defaultValue: 0 }, { tfName: "ellipsis_mask", name: "ellipsisMask", type: "number", defaultValue: 0 }, { tfName: "shrink_axis_mask", name: "shrinkAxisMask", type: "number", defaultValue: 0 }] }, { tfOpName: "Pack", category: "slice_join", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "Unpack", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }, { tfName: "num", name: "num", type: "number", defaultValue: 0, notSupported: true }] }, { tfOpName: "Tile", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "reps", type: "number[]" }] }, { tfOpName: "Split", category: "slice_join", inputs: [{ start: 0, name: "axis", type: "number", defaultValue: 0 }, { start: 1, name: "x", type: "tensor" }], attrs: [{ tfName: "num_split", name: "numOrSizeSplits", type: "number", defaultValue: 1 }] }, { tfOpName: "SplitV", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "numOrSizeSplits", type: "number[]" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "ScatterNd", category: "slice_join", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "shape", type: "number[]" }] }, { tfOpName: "GatherNd", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "slice_join", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: false, notSupported: true }] }];
var Av = {};
He(Av, { json: () => e7 });
var e7 = [{ tfOpName: "SparseFillEmptyRows", category: "sparse", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "denseShape", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }] }, { tfOpName: "SparseReshape", category: "sparse", inputs: [{ start: 0, name: "inputIndices", type: "tensor" }, { start: 1, name: "inputShape", type: "tensor" }, { start: 2, name: "newShape", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SparseSegmentMean", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }, { tfOpName: "SparseSegmentSum", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }];
var $v = {};
He($v, { json: () => t7 });
var t7 = [{ tfOpName: "FFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "RFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }, { tfOpName: "IRFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }];
var Dv = {};
He(Dv, { json: () => r7 });
var r7 = [{ tfOpName: "StringNGrams", category: "string", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "dataSplits", type: "tensor" }], attrs: [{ tfName: "separator", name: "separator", type: "string" }, { tfName: "ngram_widths", name: "nGramWidths", type: "number[]" }, { tfName: "left_pad", name: "leftPad", type: "string" }, { tfName: "right_pad", name: "rightPad", type: "string" }, { tfName: "pad_width", name: "padWidth", type: "number" }, { tfName: "preserve_short_sequences", name: "preserveShortSequences", type: "bool" }], outputs: ["ngrams", "ngrams_splits"] }, { tfOpName: "StringSplit", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "delimiter", type: "tensor" }], attrs: [{ tfName: "skip_empty", name: "skipEmpty", type: "bool" }], outputs: ["indices", "values", "shape"] }, { tfOpName: "StringToHashBucketFast", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "num_buckets", name: "numBuckets", type: "number" }] }];
var Rv = {};
He(Rv, { json: () => n7 });
var n7 = [{ tfOpName: "Cast", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "SrcT", name: "sdtype", type: "dtype", notSupported: true }, { tfName: "DstT", name: "dtype", type: "dtype" }] }, { tfOpName: "ExpandDims", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "MirrorPad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "mode", name: "mode", type: "string" }] }, { tfOpName: "Pad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "constant_value", name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "PadV2", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }, { start: 2, name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "Reshape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "Squeeze", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "axis", tfDeprecatedName: "squeeze_dims", name: "axis", type: "number[]" }] }, { tfOpName: "SpaceToBatchND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "paddings", type: "number[]" }] }, { tfOpName: "BatchToSpaceND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "crops", type: "number[]" }] }, { tfOpName: "DepthToSpace", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "block_size", name: "blockSize", type: "number" }, { tfName: "data_format", name: "dataFormat", type: "string" }] }, { tfOpName: "BroadcastTo", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }], attrs: [] }, { tfOpName: "BroadcastArgs", category: "transformation", inputs: [{ start: 0, name: "s0", type: "tensor" }, { start: 1, name: "s1", type: "tensor" }], attrs: [] }];
var gx = class {
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  constructor() {
    let e = [hv, gv, xv, yv, bv, wv, kv, _v, vv, Cv, Sv, Iv, Nv, Tv, Ev, Av, $v, Dv, Rv], t = [].concat(...e.map((n) => n.json));
    this.opMappers = t.reduce((n, o) => (n[o.tfOpName] = o, n), {});
  }
  transformGraph(e, t = {}) {
    let n = e.node, o = [], s = [], a = [], i = n.reduce((h, g) => (h[g.name] = this.mapNode(g), g.op.startsWith("Placeholder") ? o.push(h[g.name]) : g.op === "Const" ? s.push(h[g.name]) : (g.input == null || g.input.length === 0) && a.push(h[g.name]), h), {}), l = [], u = [], c = {}, p = {};
    t != null && (c = this.mapSignatureEntries(t.inputs), p = this.mapSignatureEntries(t.outputs));
    let m = Object.keys(i);
    m.forEach((h) => {
      let g = i[h];
      g.inputNames.forEach((y, w) => {
        let [x, , k] = As(y), C = i[x];
        if (C.outputs != null) {
          let A = C.outputs.indexOf(k);
          if (A !== -1) {
            let $ = `${x}:${A}`;
            g.inputNames[w] = $;
          }
        }
        g.inputs.push(C), C.children.push(g);
      });
    }), Object.keys(p).length === 0 ? m.forEach((h) => {
      let g = i[h];
      g.children.length === 0 && u.push(g);
    }) : Object.keys(p).forEach((h) => {
      let [g] = As(h), y = i[g];
      y != null && (y.signatureKey = p[h], u.push(y));
    }), Object.keys(c).length > 0 ? Object.keys(c).forEach((h) => {
      let [g] = As(h), y = i[g];
      y && (y.signatureKey = c[h], l.push(y));
    }) : l = o;
    let f = {};
    e.library != null && e.library.function != null && (f = e.library.function.reduce((h, g) => (h[g.signature.name] = this.mapFunction(g), h), {}));
    let d = { nodes: i, inputs: l, outputs: u, weights: s, placeholders: o, signature: t, functions: f };
    return a.length > 0 && (d.initNodes = a), d;
  }
  mapSignatureEntries(e) {
    return Object.keys(e || {}).reduce((t, n) => (t[e[n].name] = n, t), {});
  }
  mapNode(e) {
    let t = dx(e.op) || this.opMappers[e.op] || {};
    e.attr == null && (e.attr = {});
    let n = { name: e.name, op: e.op, category: t.category, inputNames: (e.input || []).map((o) => o.startsWith("^") ? o.substr(1) : o), inputs: [], children: [], inputParams: {}, attrParams: {}, rawAttrs: e.attr, outputs: t.outputs };
    return t.inputs != null && (n.inputParams = t.inputs.reduce((o, s) => (o[s.name] = { type: s.type, inputIndexStart: s.start, inputIndexEnd: s.end }, o), {})), t.attrs != null && (n.attrParams = t.attrs.reduce((o, s) => {
      let a = s.type, i;
      switch (s.type) {
        case "string":
          i = xx(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = xx(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "string[]":
          i = Cx(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = Cx(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "number":
          i = bx(e.attr, s.tfName, s.defaultValue || 0), i === void 0 && !!s.tfDeprecatedName && (i = bx(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "number[]":
          i = vx(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = vx(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "bool":
          i = yx(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = yx(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "bool[]":
          i = Ix(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = Ix(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "shape":
          i = _x(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = _x(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "shape[]":
          i = Sx(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = Sx(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "dtype":
          i = wx(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = wx(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "dtype[]":
          i = kx(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = kx(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "func":
          i = UA(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = UA(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "tensor":
        case "tensors":
          break;
        default:
          throw new Error(`Unsupported param type: ${s.type} for op: ${e.op}`);
      }
      return o[s.name] = { value: i, type: a }, o;
    }, {})), n;
  }
  mapFunction(e) {
    let t = e.nodeDef, n = [], o = [], s = {};
    t != null && (s = t.reduce((p, m) => (p[m.name] = this.mapNode(m), m.op === "Const" && o.push(p[m.name]), p), {}));
    let a = [], i = [];
    e.signature.inputArg.forEach((p) => {
      let [m] = As(p.name), f = { name: m, op: "Placeholder", inputs: [], inputNames: [], category: "graph", inputParams: {}, attrParams: { dtype: { value: Fv(p.type), type: "dtype" } }, children: [] };
      f.signatureKey = p.name, a.push(f), s[m] = f;
    }), Object.keys(s).forEach((p) => {
      let m = s[p];
      m.inputNames.forEach((f, d) => {
        let [h, , g] = As(f), y = s[h];
        if (y.outputs != null) {
          let w = y.outputs.indexOf(g);
          if (w !== -1) {
            let x = `${h}:${w}`;
            m.inputNames[d] = x;
          }
        }
        m.inputs.push(y), y.children.push(m);
      });
    });
    let u = e.ret;
    e.signature.outputArg.forEach((p) => {
      let [m, f] = As(u[p.name]), d = s[m];
      d != null && (d.defaultOutput = f, i.push(d));
    });
    let c = this.mapArgsToSignature(e);
    return { nodes: s, inputs: a, outputs: i, weights: o, placeholders: n, signature: c };
  }
  mapArgsToSignature(e) {
    return { methodName: e.signature.name, inputs: e.signature.inputArg.reduce((t, n) => (t[n.name] = this.mapArgToTensorInfo(n), t), {}), outputs: e.signature.outputArg.reduce((t, n) => (t[n.name] = this.mapArgToTensorInfo(n, e.ret), t), {}) };
  }
  mapArgToTensorInfo(e, t) {
    let n = e.name;
    return t != null && (n = t[n]), { name: n, dtype: e.type };
  }
};
function o7(r) {
  let e = j().global;
  if (typeof e.atob != "undefined")
    return e.atob(r);
  if (typeof Buffer != "undefined")
    return new Buffer(r, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function GA(r, e) {
  let t = Array.isArray(r) ? String.fromCharCode.apply(null, r) : o7(r);
  return e ? t : t.toLowerCase();
}
function xx(r, e, t, n = false) {
  let o = r[e];
  return o != null ? GA(o.s, n) : t;
}
function yx(r, e, t) {
  let n = r[e];
  return n ? n.b : t;
}
function bx(r, e, t) {
  let n = r[e] || {}, o = n.i != null ? n.i : n.f != null ? n.f : t;
  return typeof o == "number" ? o : parseInt(o, 10);
}
function Fv(r) {
  switch (typeof r == "string" && (r = xo[r]), r) {
    case xo.DT_FLOAT:
      return "float32";
    case xo.DT_INT32:
    case xo.DT_INT64:
    case xo.DT_INT8:
    case xo.DT_UINT8:
      return "int32";
    case xo.DT_BOOL:
      return "bool";
    case xo.DT_DOUBLE:
      return "float32";
    case xo.DT_STRING:
      return "string";
    default:
      return null;
  }
}
function UA(r, e, t) {
  let n = r[e];
  return n && n.func ? n.func.name : t;
}
function wx(r, e, t) {
  let n = r[e];
  return n && n.type ? Fv(n.type) : t;
}
function kx(r, e, t) {
  let n = r[e];
  return n && n.list && n.list.type ? n.list.type.map((o) => Fv(o)) : t;
}
function HA(r) {
  if (!r.unknownRank)
    return r.dim != null ? r.dim.map((e) => typeof e.size == "number" ? e.size : parseInt(e.size, 10)) : [];
}
function _x(r, e, t) {
  let n = r[e];
  return n && n.shape ? HA(n.shape) : t;
}
function vx(r, e, t) {
  let n = r[e];
  return n ? ((n.list.f && n.list.f.length ? n.list.f : n.list.i) || []).map((o) => typeof o == "number" ? o : parseInt(o, 10)) : t;
}
function Cx(r, e, t, n = false) {
  let o = r[e];
  return o && o.list && o.list.s ? o.list.s.map((s) => GA(s, n)) : t;
}
function Sx(r, e, t) {
  let n = r[e];
  return n && n.list && n.list.shape ? n.list.shape.map((o) => HA(o)) : t;
}
function Ix(r, e, t) {
  let n = r[e];
  return n && n.list && n.list.b ? n.list.b : t;
}
var Ov = class {
  constructor(e, t, n) {
    this.node = e, this.tensorMap = t, this.context = n, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map((o) => this.getInput(o)), e.rawAttrs != null && (this.attrs = Object.keys(e.rawAttrs).reduce((o, s) => (o[s] = this.getAttr(s), o), {}));
  }
  getInput(e) {
    return fr(e, this.tensorMap, this.context);
  }
  getAttr(e, t) {
    let n = this.node.rawAttrs[e];
    if (n.tensor != null)
      return fr(e, this.tensorMap, this.context);
    if (n.i != null || n.f != null)
      return bx(this.node.rawAttrs, e, t);
    if (n.s != null)
      return xx(this.node.rawAttrs, e, t);
    if (n.b != null)
      return yx(this.node.rawAttrs, e, t);
    if (n.shape != null)
      return _x(this.node.rawAttrs, e, t);
    if (n.type != null)
      return wx(this.node.rawAttrs, e, t);
    if (n.list != null) {
      if (n.list.i != null || n.list.f != null)
        return vx(this.node.rawAttrs, e, t);
      if (n.list.s != null)
        return Cx(this.node.rawAttrs, e, t);
      if (n.list.shape != null)
        return Sx(this.node.rawAttrs, e, t);
      if (n.list.b != null)
        return Ix(this.node.rawAttrs, e, t);
      if (n.list.type != null)
        return kx(this.node.rawAttrs, e, t);
    }
    return t;
  }
};
var qA = (r, e, t) => {
  switch (r.op) {
    case "BiasAdd":
    case "AddV2":
    case "Add":
      return [Y(v("a", r, e, t), v("b", r, e, t))];
    case "AddN":
      return [nk(v("tensors", r, e, t))];
    case "FloorMod":
    case "Mod":
      return [zk(v("a", r, e, t), v("b", r, e, t))];
    case "Mul":
      return [F(v("a", r, e, t), v("b", r, e, t))];
    case "RealDiv":
    case "Div":
      return [ue(v("a", r, e, t), v("b", r, e, t))];
    case "DivNoNan":
      return [Ik(v("a", r, e, t), v("b", r, e, t))];
    case "FloorDiv":
      return [jm(v("a", r, e, t), v("b", r, e, t))];
    case "Sub":
      return [le(v("a", r, e, t), v("b", r, e, t))];
    case "Minimum":
      return [Ca(v("a", r, e, t), v("b", r, e, t))];
    case "Maximum":
      return [Rn(v("a", r, e, t), v("b", r, e, t))];
    case "Pow":
      return [yn(v("a", r, e, t), v("b", r, e, t))];
    case "SquaredDifference":
      return [df(v("a", r, e, t), v("b", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var KA = (r, e, t) => {
  switch (r.op) {
    case "Abs":
    case "ComplexAbs":
      return [Tt(v("x", r, e, t))];
    case "Acos":
      return [tk(v("x", r, e, t))];
    case "Acosh":
      return [rk(v("x", r, e, t))];
    case "Asin":
      return [sk(v("x", r, e, t))];
    case "Asinh":
      return [ik(v("x", r, e, t))];
    case "Atan":
      return [ak(v("x", r, e, t))];
    case "Atan2":
      return [lk(v("x", r, e, t), v("y", r, e, t))];
    case "Atanh":
      return [uk(v("x", r, e, t))];
    case "Ceil":
      return [xk(v("x", r, e, t))];
    case "Complex":
      return [$n(v("real", r, e, t), v("imag", r, e, t))];
    case "Cos":
      return [iu(v("x", r, e, t))];
    case "Cosh":
      return [Ym(v("x", r, e, t))];
    case "Elu":
      return [_a(v("x", r, e, t))];
    case "Erf":
      return [Tk(v("x", r, e, t))];
    case "Exp":
      return [tr(v("x", r, e, t))];
    case "Expm1":
      return [Ek(v("x", r, e, t))];
    case "Floor":
      return [va(v("x", r, e, t))];
    case "Log":
      return [Ir(v("x", r, e, t))];
    case "Log1p":
      return [uu(v("x", r, e, t))];
    case "Imag":
      return [au(v("x", r, e, t))];
    case "Neg":
      return [Ke(v("x", r, e, t))];
    case "Reciprocal":
      return [Zk(v("x", r, e, t))];
    case "Real":
      return [ml(v("x", r, e, t))];
    case "Relu":
      return [Or(v("x", r, e, t))];
    case "Round":
      return [sf(v("x", r, e, t))];
    case "Selu":
      return [lf(v("x", r, e, t))];
    case "Sigmoid":
      return [Jr(v("x", r, e, t))];
    case "Sin":
      return [uf(v("x", r, e, t))];
    case "Sign":
      return [e_(v("x", r, e, t))];
    case "Sinh":
      return [cf(v("x", r, e, t))];
    case "Softplus":
      return [ui(v("x", r, e, t))];
    case "Sqrt":
      return [St(v("x", r, e, t))];
    case "Square":
      return [We(v("x", r, e, t))];
    case "Tanh":
      return [wa(v("x", r, e, t))];
    case "Tan":
      return [r_(v("x", r, e, t))];
    case "ClipByValue":
      return [Sr(v("x", r, e, t), v("clipValueMin", r, e, t), v("clipValueMax", r, e, t))];
    case "Relu6":
      return [of(v("x", r, e, t))];
    case "Rsqrt":
      return [af(fr(r.inputNames[0], e, t))];
    case "Prod":
      return [nf(v("x", r, e, t), v("axes", r, e, t))];
    case "LeakyRelu":
      return [lu(v("x", r, e, t), v("alpha", r, e, t))];
    case "Prelu":
      return [fu(v("x", r, e, t), v("alpha", r, e, t))];
    case "IsNan":
      return [Ak(fr(r.inputNames[0], e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function Pn(r, e, t = "") {
  if (!(typeof r == "number" || typeof e == "number")) {
    b.assert(r.length === e.length, () => t + ` Shapes ${r} and ${e} must match`);
    for (let n = 0; n < r.length; n++) {
      let o = r[n], s = e[n];
      b.assert(o < 0 || s < 0 || o === s, () => t + ` Shapes ${r} and ${e} must match`);
    }
  }
}
function XA(r) {
  return !(typeof r == "number" || r.some((e) => e < 0));
}
function qp(r, e, t) {
  let n = Nx(r, t), o = !XA(n);
  if (o && e.length === 0)
    throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${n}`);
  if (o && e.forEach((s) => {
    n = Nx(s.shape, n);
  }), !XA(n))
    throw new Error(`Non-fully-defined elementShape: ${n}`);
  return n;
}
function Nx(r, e) {
  if (typeof r == "number")
    return e;
  if (typeof e == "number")
    return r;
  if (r.length !== e.length)
    throw new Error(`Incompatible ranks during merge: ${r} vs. ${e}`);
  let t = [];
  for (let n = 0; n < r.length; ++n) {
    let o = r[n], s = e[n];
    if (o >= 0 && s >= 0 && o !== s)
      throw new Error(`Incompatible shape during merge: ${r} vs. ${e}`);
    t[n] = o >= 0 ? o : s;
  }
  return t;
}
var Pv = class {
  constructor(e, t, n, o, s, a, i) {
    this.name = e, this.dtype = t, this.maxSize = n, this.elementShape = o, this.identicalElementShapes = s, this.dynamicSize = a, this.clearAfterRead = i, this.tensors = [], this.closed_ = false, this.idTensor = ce(0), Dt(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  clearAndClose(e) {
    this.tensors.forEach((t) => {
      (e == null || !e.has(t.tensor.id)) && t.tensor.dispose();
    }), this.tensors = [], this.closed_ = true, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  read(e) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || e >= this.size())
      throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);
    let t = this.tensors[e];
    if (t.cleared)
      throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
    return this.clearAfterRead && (t.cleared = true), t.read = true, t.tensor;
  }
  readMany(e) {
    return e.map((t) => this.read(t));
  }
  write(e, t) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || !this.dynamicSize && e >= this.maxSize)
      throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);
    let n = this.tensors[e] || {};
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = t.shape), Pn(this.elementShape, t.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${e}.`), n.read)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);
    if (n.written)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);
    n.tensor = t, Dt(t), n.written = true, this.tensors[e] = n;
  }
  writeMany(e, t) {
    if (e.length !== t.length)
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);
    e.forEach((n, o) => this.write(n, t[o]));
  }
  gather(e, t) {
    if (!!t && t !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);
    if (e)
      e = e.slice(0, this.size());
    else {
      e = [];
      for (let o = 0; o < this.size(); o++)
        e.push(o);
    }
    if (e.length === 0)
      return vr([], [0].concat(this.elementShape));
    let n = this.readMany(e);
    return Pn(this.elementShape, n[0].shape, "TensorArray shape mismatch: "), nr(n, 0);
  }
  concat(e) {
    if (!!e && e !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);
    if (this.size() === 0)
      return vr([], [0].concat(this.elementShape));
    let t = [];
    for (let o = 0; o < this.size(); o++)
      t.push(o);
    let n = this.readMany(t);
    return Pn(this.elementShape, n[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`), tt(n, 0);
  }
  scatter(e, t) {
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    if (e.length !== t.shape[0])
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);
    let n = Math.max(...e);
    if (!this.dynamicSize && n >= this.maxSize)
      throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);
    this.writeMany(e, Nr(t, 0));
  }
  split(e, t) {
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    let n = 0, o = e.map((l) => (n += l, n));
    if (n !== t.shape[0])
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${t.shape}`);
    if (!this.dynamicSize && e.length !== this.maxSize)
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);
    let s = n === 0 ? 0 : t.size / n, a = [];
    z(() => {
      t = O(t, [1, n, s]);
      for (let l = 0; l < e.length; ++l) {
        let u = l === 0 ? 0 : o[l - 1], c = [0, u, 0], p = [1, e[l], s];
        a[l] = O(Oe(t, c, p), this.elementShape);
      }
      return a;
    });
    let i = [];
    for (let l = 0; l < e.length; l++)
      i[l] = l;
    this.writeMany(i, a);
  }
};
var Fu = class {
  constructor(e, t, n, o = -1) {
    this.tensors = e, this.elementShape = t, this.elementDtype = n, e != null && e.forEach((s) => {
      if (n !== s.dtype)
        throw new Error(`Invalid data types; op elements ${n}, but list elements ${s.dtype}`);
      Pn(t, s.shape, "TensorList shape mismatch: "), Dt(s);
    }), this.idTensor = ce(0), this.maxNumElements = o, Dt(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  copy() {
    return new Fu([...this.tensors], this.elementShape, this.elementDtype);
  }
  clearAndClose(e) {
    this.tensors.forEach((t) => {
      (e == null || !e.has(t.id)) && t.dispose();
    }), this.tensors.length = 0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  stack(e, t, n = -1) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    if (n !== -1 && this.tensors.length !== n)
      throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);
    Pn(e, this.elementShape, "TensorList shape mismatch: ");
    let o = qp(this.elementShape, this.tensors, e);
    return z(() => {
      let s = this.tensors.map((a) => O(a, o));
      return nr(s, 0);
    });
  }
  popBack(e, t) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    if (this.size() === 0)
      throw new Error("Trying to pop from an empty list.");
    let n = qp(this.elementShape, this.tensors, e), o = this.tensors.pop();
    return Pn(o.shape, e, "TensorList shape mismatch: "), O(o, n);
  }
  pushBack(e) {
    if (e.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);
    if (Pn(e.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size())
      throw new Error("Trying to push element into a full list.");
    Dt(e), this.tensors.push(e);
  }
  resize(e) {
    if (e < 0)
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);
    if (this.maxNumElements !== -1 && e > this.maxNumElements)
      throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);
    this.tensors.length = e;
  }
  getItem(e, t, n) {
    if (n !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);
    if (e < 0 || e > this.tensors.length)
      throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);
    if (this.tensors[e] == null)
      throw new Error(`element at index ${e} is null.`);
    Pn(this.tensors[e].shape, t, "TensorList shape mismatch: ");
    let o = qp(this.elementShape, this.tensors, t);
    return O(this.tensors[e], o);
  }
  setItem(e, t) {
    if (t.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);
    if (e < 0 || this.maxNumElements !== -1 && e >= this.maxNumElements)
      throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);
    Pn(this.elementShape, t.shape, "TensorList shape mismatch: "), Dt(t), this.tensors[e] = t;
  }
  gather(e, t, n) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    Pn(this.elementShape, n, "TensorList shape mismatch: "), e = e.slice(0, this.size());
    let o = qp(this.elementShape, this.tensors, n);
    return e.length === 0 ? vr([], [0].concat(o)) : z(() => {
      let s = e.map((a) => O(this.tensors[a], o));
      return nr(s, 0);
    });
  }
  concat(e, t) {
    if (!!e && e !== this.elementDtype)
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);
    Pn(this.elementShape, t, "TensorList shape mismatch: ");
    let n = qp(this.elementShape, this.tensors, t);
    return this.size() === 0 ? vr([], [0].concat(n)) : z(() => {
      let o = this.tensors.map((s) => O(s, n));
      return tt(o, 0);
    });
  }
};
function YA(r, e, t) {
  let n = r.dtype;
  if (r.shape.length < 1)
    throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);
  if (r.dtype !== t)
    throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${t}`);
  let o = r.shape.slice(1);
  Pn(o, e, "TensorList shape mismatch: ");
  let s = Nr(r);
  return new Fu(s, e, n);
}
function ZA(r, e, t) {
  return new Fu([], r, e, t);
}
function JA(r, e, t, n) {
  if (e.length !== r.shape[0])
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${r.shape[0]}`);
  let o = Math.max(...e);
  if (n != null && n !== -1 && o >= n)
    throw new Error(`Max index must be < array size (${o}  vs. ${n})`);
  let s = new Fu([], t, r.dtype, n), a = Nr(r, 0);
  return e.forEach((i, l) => {
    s.setItem(i, a[l]);
  }), s;
}
function QA(r, e, t) {
  let n = 0, o = e.map((c) => (n += c, n));
  if (n !== r.shape[0])
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${r.shape}`);
  let s = r.shape.slice(1), a = Nx(s, t), i = n === 0 ? 0 : r.size / n, l = z(() => {
    let c = [];
    r = O(r, [1, n, i]);
    for (let p = 0; p < e.length; ++p) {
      let m = p === 0 ? 0 : o[p - 1], f = [0, m, 0], d = [1, e[p], i];
      c[p] = O(Oe(r, f, d), a);
    }
    return r.dispose(), c;
  }), u = new Fu([], t, r.dtype, e.length);
  for (let c = 0; c < l.length; c++)
    u.setItem(c, l[c]);
  return u;
}
var e$ = async (r, e, t) => {
  switch (r.op) {
    case "If":
    case "StatelessIf": {
      let n = v("thenBranch", r, e, t), o = v("elseBranch", r, e, t), s = v("cond", r, e, t), a = v("args", r, e, t);
      return (await s.data())[0] ? t.functionMap[n].executeFunctionAsync(a, t.tensorArrayMap, t.tensorListMap) : t.functionMap[o].executeFunctionAsync(a, t.tensorArrayMap, t.tensorListMap);
    }
    case "While":
    case "StatelessWhile": {
      let n = v("body", r, e, t), o = v("cond", r, e, t), s = v("args", r, e, t), a = await t.functionMap[o].executeFunctionAsync(s, t.tensorArrayMap, t.tensorListMap), i = s.map((c) => c.id), l = await a[0].data();
      a.forEach((c) => {
        !c.kept && i.indexOf(c.id) === -1 && c.dispose();
      });
      let u = s;
      for (; l[0]; ) {
        let c = u;
        u = await t.functionMap[n].executeFunctionAsync(u, t.tensorArrayMap, t.tensorListMap);
        let p = u.map((f) => f.id);
        c.forEach((f) => {
          !f.kept && i.indexOf(f.id) === -1 && p.indexOf(f.id) === -1 && f.dispose();
        });
        let m = await t.functionMap[o].executeFunctionAsync(u, t.tensorArrayMap, t.tensorListMap);
        l = await m[0].data(), m.forEach((f) => {
          !f.kept && i.indexOf(f.id) === -1 && p.indexOf(f.id) === -1 && f.dispose();
        });
      }
      return u;
    }
    case "LoopCond": {
      let n = v("pred", r, e, t);
      return [$s(n)];
    }
    case "Switch": {
      let n = v("pred", r, e, t), o = v("data", r, e, t);
      return o.kept || (o = $s(o)), (await n.data())[0] ? [void 0, o] : [o, void 0];
    }
    case "Merge": {
      let n = r.inputNames.find((o) => fr(o, e, t) !== void 0);
      if (n) {
        let o = fr(n, e, t);
        return [$s(o)];
      }
      return;
    }
    case "Enter": {
      let n = v("frameName", r, e, t), o = v("tensor", r, e, t);
      return t.enterFrame(n), [$s(o)];
    }
    case "Exit": {
      let n = v("tensor", r, e, t);
      return t.exitFrame(), [$s(n)];
    }
    case "NextIteration": {
      let n = v("tensor", r, e, t);
      return t.nextIteration(), [$s(n)];
    }
    case "TensorArrayV3": {
      let n = v("size", r, e, t), o = v("dtype", r, e, t), s = v("elementShape", r, e, t), a = v("dynamicSize", r, e, t), i = v("clearAfterRead", r, e, t), l = v("identicalElementShapes", r, e, t), u = v("name", r, e, t), c = new Pv(u, o, n, s, l, a, i);
      return t.addTensorArray(c), [c.idTensor, ce(1)];
    }
    case "TensorArrayWriteV3": {
      let n = v("tensorArrayId", r, e, t), o = v("index", r, e, t), s = v("tensor", r, e, t), a = t.getTensorArray(n.id);
      return a.write(o, s), [a.idTensor];
    }
    case "TensorArrayReadV3": {
      let n = v("tensorArrayId", r, e, t), o = v("index", r, e, t);
      return [t.getTensorArray(n.id).read(o)];
    }
    case "TensorArrayGatherV3": {
      let n = v("tensorArrayId", r, e, t), o = v("indices", r, e, t), s = v("dtype", r, e, t);
      return [t.getTensorArray(n.id).gather(o, s)];
    }
    case "TensorArrayScatterV3": {
      let n = v("tensorArrayId", r, e, t), o = v("indices", r, e, t), s = v("tensor", r, e, t), a = t.getTensorArray(n.id);
      return a.scatter(o, s), [a.idTensor];
    }
    case "TensorArrayConcatV3": {
      let n = v("tensorArrayId", r, e, t), o = t.getTensorArray(n.id), s = v("dtype", r, e, t);
      return [o.concat(s)];
    }
    case "TensorArraySplitV3": {
      let n = v("tensorArrayId", r, e, t), o = v("tensor", r, e, t), s = v("lengths", r, e, t), a = t.getTensorArray(n.id);
      return a.split(s, o), [a.idTensor];
    }
    case "TensorArraySizeV3": {
      let n = v("tensorArrayId", r, e, t), o = t.getTensorArray(n.id);
      return [ce(o.size(), "int32")];
    }
    case "TensorArrayCloseV3": {
      let n = v("tensorArrayId", r, e, t), o = t.getTensorArray(n.id);
      return o.clearAndClose(), [o.idTensor];
    }
    case "TensorListSetItem": {
      let n = v("tensorListId", r, e, t), o = v("index", r, e, t), s = v("tensor", r, e, t), a = t.getTensorList(n.id);
      return a.setItem(o, s), [a.idTensor];
    }
    case "TensorListGetItem": {
      let n = v("tensorListId", r, e, t), o = v("index", r, e, t), s = v("elementShape", r, e, t), a = v("elementDType", r, e, t);
      return [t.getTensorList(n.id).getItem(o, s, a)];
    }
    case "TensorListScatterV2":
    case "TensorListScatter": {
      let n = v("indices", r, e, t), o = v("tensor", r, e, t), s = v("elementShape", r, e, t), a = v("numElements", r, e, t), i = JA(o, n, s, a);
      return t.addTensorList(i), [i.idTensor];
    }
    case "TensorListReserve":
    case "EmptyTensorList": {
      let n = v("elementShape", r, e, t), o = v("elementDType", r, e, t), s;
      r.op === "TensorListReserve" ? s = "numElements" : s = "maxNumElements";
      let a = v(s, r, e, t), i = ZA(n, o, a);
      return t.addTensorList(i), [i.idTensor];
    }
    case "TensorListGather": {
      let n = v("tensorListId", r, e, t), o = v("indices", r, e, t), s = v("elementShape", r, e, t), a = v("elementDType", r, e, t);
      return [t.getTensorList(n.id).gather(o, a, s)];
    }
    case "TensorListStack": {
      let n = v("tensorListId", r, e, t), o = v("elementShape", r, e, t), s = v("elementDType", r, e, t), a = v("numElements", r, e, t);
      return [t.getTensorList(n.id).stack(o, s, a)];
    }
    case "TensorListFromTensor": {
      let n = v("tensor", r, e, t), o = v("elementShape", r, e, t), s = v("elementDType", r, e, t), a = YA(n, o, s);
      return t.addTensorList(a), [a.idTensor];
    }
    case "TensorListConcat": {
      let n = v("tensorListId", r, e, t), o = t.getTensorList(n.id), s = v("dtype", r, e, t), a = v("elementShape", r, e, t);
      return [o.concat(s, a)];
    }
    case "TensorListPushBack": {
      let n = v("tensorListId", r, e, t), o = v("tensor", r, e, t), s = t.getTensorList(n.id);
      return s.pushBack(o), [s.idTensor];
    }
    case "TensorListPopBack": {
      let n = v("tensorListId", r, e, t), o = v("elementShape", r, e, t), s = v("elementDType", r, e, t);
      return [t.getTensorList(n.id).popBack(o, s)];
    }
    case "TensorListSplit": {
      let n = v("tensor", r, e, t), o = v("elementShape", r, e, t), s = v("lengths", r, e, t), a = QA(n, s, o);
      return t.addTensorList(a), [a.idTensor];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function t$(r, e, t) {
  let [n, o] = v("fusedOps", r, e, t), s = n === "biasadd", a = !s, i = o === "prelu", l = n === "fusedbatchnorm", u = v("numArgs", r, e, t);
  if (s) {
    if (i && u !== 2)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
    if (!i && s && u !== 1)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
  }
  if (l)
    throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
  let c = v("strides", r, e, t), p = Wd(r, e, t), m = v("dataFormat", r, e, t).toUpperCase(), f = v("dilations", r, e, t), [d, h] = v("args", r, e, t);
  a && (h = d, d = void 0);
  let g = v("leakyreluAlpha", r, e, t);
  return { stride: c, pad: p, dataFormat: m, dilations: f, biasArg: d, preluArg: h, activationFunc: o, leakyreluAlpha: g };
}
var r$ = (r, e, t) => {
  switch (r.op) {
    case "Conv1D": {
      let n = v("stride", r, e, t), o = v("pad", r, e, t), s = v("dataFormat", r, e, t).toUpperCase(), a = v("dilation", r, e, t);
      return [qm(v("x", r, e, t), v("filter", r, e, t), n, o, s, a)];
    }
    case "Conv2D": {
      let n = v("strides", r, e, t), o = Wd(r, e, t), s = v("dataFormat", r, e, t).toUpperCase(), a = v("dilations", r, e, t);
      return [Dn(v("x", r, e, t), v("filter", r, e, t), [n[1], n[2]], o, s, [a[1], a[2]])];
    }
    case "_FusedConv2D": {
      let { stride: n, pad: o, dataFormat: s, dilations: a, biasArg: i, preluArg: l, activationFunc: u, leakyreluAlpha: c } = t$(r, e, t);
      return [lo.conv2d({ x: v("x", r, e, t), filter: v("filter", r, e, t), strides: [n[1], n[2]], pad: o, dataFormat: s, dilations: [a[1], a[2]], bias: i, activation: u, preluActivationWeights: l, leakyreluAlpha: c })];
    }
    case "FusedDepthwiseConv2dNative": {
      let { stride: n, pad: o, dataFormat: s, dilations: a, biasArg: i, preluArg: l, activationFunc: u, leakyreluAlpha: c } = t$(r, e, t);
      return [lo.depthwiseConv2d({ x: v("x", r, e, t), filter: v("filter", r, e, t), strides: [n[1], n[2]], pad: o, dataFormat: s, dilations: [a[1], a[2]], bias: i, activation: u, preluActivationWeights: l, leakyreluAlpha: c })];
    }
    case "Conv2DBackpropInput":
    case "Conv2dTranspose": {
      let n = v("outputShape", r, e, t), o = v("strides", r, e, t), s = Wd(r, e, t);
      return [Km(v("x", r, e, t), v("filter", r, e, t), n, [o[1], o[2]], s)];
    }
    case "DepthwiseConv2dNative":
    case "DepthwiseConv2d": {
      let n = v("strides", r, e, t), o = Wd(r, e, t), s = v("dilations", r, e, t), a = v("dataFormat", r, e, t).toUpperCase();
      return [ka(v("input", r, e, t), v("filter", r, e, t), [n[1], n[2]], o, a, [s[1], s[2]])];
    }
    case "Conv3D": {
      let n = v("strides", r, e, t), o = v("pad", r, e, t), s = v("dataFormat", r, e, t).toUpperCase(), a = v("dilations", r, e, t);
      return [Xm(v("x", r, e, t), v("filter", r, e, t), [n[1], n[2], n[3]], o, s, [a[1], a[2], a[3]])];
    }
    case "AvgPool": {
      let n = v("strides", r, e, t), o = v("pad", r, e, t), s = v("kernelSize", r, e, t);
      return [nu(v("x", r, e, t), [s[1], s[2]], [n[1], n[2]], o)];
    }
    case "MaxPool": {
      let n = v("strides", r, e, t), o = v("pad", r, e, t), s = v("kernelSize", r, e, t);
      return [pu(v("x", r, e, t), [s[1], s[2]], [n[1], n[2]], o)];
    }
    case "MaxPoolWithArgmax": {
      let n = v("strides", r, e, t), o = v("pad", r, e, t), s = v("kernelSize", r, e, t), a = v("includeBatchInIndex", r, e, t), { result: i, indexes: l } = Mk(v("x", r, e, t), [s[1], s[2]], [n[1], n[2]], o, a);
      return [i, l];
    }
    case "AvgPool3D": {
      let n = v("strides", r, e, t), o = v("pad", r, e, t), s = v("kernelSize", r, e, t);
      return [Um(v("x", r, e, t), [s[1], s[2], s[3]], [n[1], n[2], n[3]], o)];
    }
    case "MaxPool3D": {
      let n = v("strides", r, e, t), o = v("pad", r, e, t), s = v("kernelSize", r, e, t);
      return [rf(v("x", r, e, t), [s[1], s[2], s[3]], [n[1], n[2], n[3]], o)];
    }
    case "Dilation2D": {
      let n = v("strides", r, e, t), o = v("pad", r, e, t), s = v("dilations", r, e, t), a = n[1], i = n[2], l = s[1], u = s[2];
      return [Sk(v("x", r, e, t), v("filter", r, e, t), [a, i], o, [l, u], "NHWC")];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var n$ = (r, e, t) => {
  switch (r.op) {
    case "Fill": {
      let n = v("shape", r, e, t), o = v("dtype", r, e, t), s = v("value", r, e, t);
      return [_s(n, s, o)];
    }
    case "LinSpace": {
      let n = v("start", r, e, t), o = v("stop", r, e, t), s = v("num", r, e, t);
      return [$k(n, o, s)];
    }
    case "Multinomial": {
      let n = v("logits", r, e, t), o = v("numSamples", r, e, t), s = v("seed", r, e, t);
      return [Bk(n, o, s)];
    }
    case "OneHot": {
      let n = v("indices", r, e, t), o = v("depth", r, e, t), s = v("onValue", r, e, t), a = v("offValue", r, e, t);
      return [xa(n, o, s, a)];
    }
    case "Ones":
      return [rr(v("shape", r, e, t), v("dtype", r, e, t))];
    case "OnesLike":
      return [xr(v("x", r, e, t))];
    case "RandomUniform":
      return [vs(v("shape", r, e, t), v("minval", r, e, t), v("maxval", r, e, t), v("dtype", r, e, t))];
    case "Range": {
      let n = v("start", r, e, t), o = v("stop", r, e, t), s = v("step", r, e, t);
      return [Sa(n, o, s, v("dtype", r, e, t))];
    }
    case "TruncatedNormal": {
      let n = v("shape", r, e, t), o = v("mean", r, e, t), s = v("stdDev", r, e, t), a = v("seed", r, e, t);
      return [yu(n, o, s, v("dtype", r, e, t), a)];
    }
    case "Zeros":
      return [ht(v("shape", r, e, t), v("dtype", r, e, t))];
    case "ZerosLike":
      return [Ie(v("x", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function Mv(r, e, t) {
  let n = v("boxes", r, e, t), o = v("scores", r, e, t), s = v("maxOutputSize", r, e, t), a = v("iouThreshold", r, e, t), i = v("scoreThreshold", r, e, t), l = v("softNmsSigma", r, e, t);
  return { boxes: n, scores: o, maxOutputSize: s, iouThreshold: a, scoreThreshold: i, softNmsSigma: l };
}
var o$ = async (r, e, t) => {
  switch (r.op) {
    case "NonMaxSuppressionV5": {
      let { boxes: n, scores: o, maxOutputSize: s, iouThreshold: a, scoreThreshold: i, softNmsSigma: l } = Mv(r, e, t), u = await bn.nonMaxSuppressionWithScoreAsync(n, o, s, a, i, l);
      return [u.selectedIndices, u.selectedScores];
    }
    case "NonMaxSuppressionV4": {
      let { boxes: n, scores: o, maxOutputSize: s, iouThreshold: a, scoreThreshold: i } = Mv(r, e, t), l = v("padToMaxOutputSize", r, e, t), u = await bn.nonMaxSuppressionPaddedAsync(n, o, s, a, i, l);
      return [u.selectedIndices, u.validOutputs];
    }
    case "NonMaxSuppressionV3":
    case "NonMaxSuppressionV2": {
      let { boxes: n, scores: o, maxOutputSize: s, iouThreshold: a, scoreThreshold: i } = Mv(r, e, t);
      return [await bn.nonMaxSuppressionAsync(n, o, s, a, i)];
    }
    case "Where": {
      let n = J(v("condition", r, e, t), "bool"), o = [await hf(n)];
      return n.dispose(), o;
    }
    case "ListDiff":
      return Qk(v("x", r, e, t), v("y", r, e, t));
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var s$ = (r, e, t) => {
  switch (r.op) {
    case "TopKV2": {
      let n = v("x", r, e, t), o = v("k", r, e, t), s = v("sorted", r, e, t), a = n_(n, o, s);
      return [a.values, a.indices];
    }
    case "Unique": {
      let n = v("x", r, e, t), o = Cg(n);
      return [o.values, o.indices];
    }
    case "UniqueV2": {
      let n = v("x", r, e, t), o = v("axis", r, e, t), s = Cg(n, o);
      return [s.values, s.indices];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var i$ = (r, e, t) => {
  switch (r.op) {
    case "Const":
      return e[r.name];
    case "PlaceholderWithDefault":
      let n = v("default", r, e, t);
      return [fr(r.name, e, t) || n];
    case "Placeholder":
      return [fr(r.name, e, t)];
    case "Identity":
    case "StopGradient":
    case "FakeQuantWithMinMaxVars": {
      let u = v("x", r, e, t);
      return [$s(u)];
    }
    case "IdentityN":
      return v("x", r, e, t).map((u) => $s(u));
    case "Snapshot":
      let o = v("x", r, e, t);
      return [$s(o)];
    case "Shape":
      return [At(v("x", r, e, t).shape, "int32")];
    case "ShapeN":
      return v("x", r, e, t).map((u) => At(u.shape));
    case "Size":
      return [ce(v("x", r, e, t).size, "int32")];
    case "Rank":
      return [ce(v("x", r, e, t).rank, "int32")];
    case "NoOp":
      return [ce(1)];
    case "Print":
      let s = v("x", r, e, t), a = v("data", r, e, t), i = v("message", r, e, t), l = v("summarize", r, e, t);
      console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(i);
      for (let u = 0; u < a.length; u++)
        console.log(Array.prototype.slice.call(a[u].dataSync()).slice(0, l));
      return [s];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var Lv = class {
  constructor(e, t) {
    this.keyDType = e, this.valueDType = t, this.handle = ce(0), this.tensorMap = new Map(), Dt(this.handle);
  }
  get id() {
    return this.handle.id;
  }
  clearAndClose() {
    this.tensorMap.forEach((e) => e.dispose()), this.tensorMap.clear(), this.handle.dispose();
  }
  size() {
    return this.tensorMap.size;
  }
  tensorSize() {
    return ce(this.size(), "int32");
  }
  async import(e, t) {
    this.checkKeyAndValueTensor(e, t);
    let n = await e.data();
    return this.tensorMap.forEach((o) => o.dispose()), this.tensorMap.clear(), z(() => {
      let o = Nr(t), s = n.length, a = o.length;
      b.assert(s === a, () => `The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`);
      for (let i = 0; i < s; i++) {
        let l = n[i], u = o[i];
        Dt(u), this.tensorMap.set(l, u);
      }
      return this.handle;
    });
  }
  async find(e, t) {
    this.checkKeyAndValueTensor(e, t);
    let n = await e.data();
    return z(() => {
      let o = [];
      for (let s = 0; s < n.length; s++) {
        let a = n[s], i = this.findWithDefault(a, t);
        o.push(i);
      }
      return nr(o);
    });
  }
  findWithDefault(e, t) {
    let n = this.tensorMap.get(e);
    return n != null ? n : t;
  }
  checkKeyAndValueTensor(e, t) {
    if (e.dtype !== this.keyDType)
      throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);
    if (t.dtype !== this.valueDType)
      throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`);
  }
};
var a$ = async (r, e, t, n) => {
  switch (r.op) {
    case "HashTable":
    case "HashTableV2": {
      let o = v("keyDType", r, e, t), s = v("valueDType", r, e, t), a = new Lv(o, s);
      return n.addHashTable(r.name, a), [a.handle];
    }
    case "LookupTableImport":
    case "LookupTableImportV2": {
      let o = v("tableHandle", r, e, t, n), s = v("keys", r, e, t), a = v("values", r, e, t);
      return [await n.getHashTableById(o.id).import(s, a)];
    }
    case "LookupTableFind":
    case "LookupTableFindV2": {
      let o = v("tableHandle", r, e, t, n), s = v("keys", r, e, t), a = v("defaultValue", r, e, t);
      return [await n.getHashTableById(o.id).find(s, a)];
    }
    case "LookupTableSize":
    case "LookupTableSizeV2": {
      let o = v("tableHandle", r, e, t, n);
      return [n.getHashTableById(o.id).tensorSize()];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var l$ = (r, e, t) => {
  switch (r.op) {
    case "ResizeBilinear": {
      let n = v("images", r, e, t), o = v("size", r, e, t), s = v("alignCorners", r, e, t), a = v("halfPixelCenters", r, e, t);
      return [bn.resizeBilinear(n, [o[0], o[1]], s, a)];
    }
    case "ResizeNearestNeighbor": {
      let n = v("images", r, e, t), o = v("size", r, e, t), s = v("alignCorners", r, e, t), a = v("halfPixelCenters", r, e, t);
      return [bn.resizeNearestNeighbor(n, [o[0], o[1]], s, a)];
    }
    case "CropAndResize": {
      let n = v("image", r, e, t), o = v("boxes", r, e, t), s = v("boxInd", r, e, t), a = v("cropSize", r, e, t), i = v("method", r, e, t), l = v("extrapolationValue", r, e, t);
      return [bn.cropAndResize(n, o, s, a, i, l)];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var u$ = (r, e, t) => {
  switch (r.op) {
    case "Equal":
      return [Dr(v("a", r, e, t), v("b", r, e, t))];
    case "NotEqual":
      return [ci(v("a", r, e, t), v("b", r, e, t))];
    case "Greater":
      return [Ht(v("a", r, e, t), v("b", r, e, t))];
    case "GreaterEqual":
      return [Un(v("a", r, e, t), v("b", r, e, t))];
    case "Less":
      return [Jm(v("a", r, e, t), v("b", r, e, t))];
    case "LessEqual":
      return [Hn(v("a", r, e, t), v("b", r, e, t))];
    case "LogicalAnd":
      return [Fr(v("a", r, e, t), v("b", r, e, t))];
    case "LogicalNot":
      return [cu(v("a", r, e, t))];
    case "LogicalOr":
      return [tf(v("a", r, e, t), v("b", r, e, t))];
    case "Select":
    case "SelectV2":
      return [Et(v("condition", r, e, t), v("a", r, e, t), v("b", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var c$ = (r, e, t) => {
  switch (r.op) {
    case "BatchMatMul":
    case "BatchMatMulV2":
    case "MatMul":
      return [Me(v("a", r, e, t), v("b", r, e, t), v("transposeA", r, e, t), v("transposeB", r, e, t))];
    case "Einsum":
      return [Nk(v("equation", r, e, t), ...v("tensors", r, e, t))];
    case "Transpose":
      return [Ve(v("x", r, e, t), v("perm", r, e, t))];
    case "_FusedMatMul":
      let [n, o] = v("fusedOps", r, e, t), s = n === "biasadd", a = o === "prelu", i = v("numArgs", r, e, t), l = v("leakyreluAlpha", r, e, t);
      if (s) {
        if (a && i !== 2)
          throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
        if (!a && i !== 1)
          throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
      }
      let [u, c] = v("args", r, e, t);
      return [lo.matMul({ a: v("a", r, e, t), b: v("b", r, e, t), transposeA: v("transposeA", r, e, t), transposeB: v("transposeB", r, e, t), bias: u, activation: o, preluActivationWeights: c, leakyreluAlpha: l })];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var p$ = (r, e, t) => {
  switch (r.op) {
    case "FusedBatchNorm":
    case "FusedBatchNormV2":
      return [ai(v("x", r, e, t), v("mean", r, e, t), v("variance", r, e, t), v("offset", r, e, t), v("scale", r, e, t), v("epsilon", r, e, t))];
    case "FusedBatchNormV3":
      return [ai(v("x", r, e, t), v("mean", r, e, t), v("variance", r, e, t), v("offset", r, e, t), v("scale", r, e, t), v("epsilon", r, e, t))];
    case "LRN":
      return [Dk(v("x", r, e, t), v("radius", r, e, t), v("bias", r, e, t), v("alpha", r, e, t), v("beta", r, e, t))];
    case "Softmax":
      return [hu(v("x", r, e, t))];
    case "LogSoftmax":
      return [Qm(v("x", r, e, t))];
    case "SparseToDense":
      return [Ng(v("sparseIndices", r, e, t), v("outputShape", r, e, t), v("sparseValues", r, e, t), v("defaultValue", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var m$ = (r, e, t) => {
  switch (r.op) {
    case "Max": {
      let a = v("axis", r, e, t), i = v("keepDims", r, e, t);
      return [Vr(v("x", r, e, t), a, i)];
    }
    case "Mean": {
      let a = v("axis", r, e, t), i = v("keepDims", r, e, t);
      return [Ct(v("x", r, e, t), a, i)];
    }
    case "Min": {
      let a = v("axis", r, e, t), i = v("keepDims", r, e, t);
      return [mp(v("x", r, e, t), a, i)];
    }
    case "Sum": {
      let a = v("axis", r, e, t), i = v("keepDims", r, e, t);
      return [me(v("x", r, e, t), a, i)];
    }
    case "All": {
      let a = v("axis", r, e, t), i = v("keepDims", r, e, t);
      return [Gm(v("x", r, e, t), a, i)];
    }
    case "Any": {
      let a = v("axis", r, e, t), i = v("keepDims", r, e, t);
      return [lp(v("x", r, e, t), a, i)];
    }
    case "ArgMax": {
      let a = v("axis", r, e, t);
      return [ba(v("x", r, e, t), a)];
    }
    case "ArgMin": {
      let a = v("axis", r, e, t);
      return [ok(v("x", r, e, t), a)];
    }
    case "Prod": {
      let a = v("axis", r, e, t), i = v("keepDims", r, e, t);
      return [nf(v("x", r, e, t), a, i)];
    }
    case "Cumsum": {
      let a = v("axis", r, e, t), i = v("exclusive", r, e, t), l = v("reverse", r, e, t);
      return [Zm(v("x", r, e, t), a, i, l)];
    }
    case "Bincount":
      let n = v("x", r, e, t), o = v("weights", r, e, t), s = v("size", r, e, t);
      return [Hm(n, o, s)];
    case "DenseBincount": {
      let a = v("x", r, e, t), i = v("weights", r, e, t), l = v("size", r, e, t), u = v("binaryOutput", r, e, t);
      return [vk(a, i, l, u)];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var f$ = (r, e, t) => {
  switch (r.op) {
    case "ConcatV2":
    case "Concat": {
      let n = v("n", r, e, t), o = v("axis", r, e, t), s = v("tensors", r, e, t);
      return s = s.slice(0, n), [tt(s, o)];
    }
    case "Gather": {
      let n = v("x", r, e, t), o = v("indices", r, e, t);
      return [li(n, J(o, "int32"), 0)];
    }
    case "GatherV2": {
      let n = v("axis", r, e, t), o = v("batchDims", r, e, t), s = v("x", r, e, t), a = v("indices", r, e, t);
      return [li(s, J(a, "int32"), n, o)];
    }
    case "Reverse": {
      let n = v("dims", r, e, t), o = [];
      for (let a = 0; a < n.length; a++)
        n[a] && o.push(a);
      let s = v("x", r, e, t);
      return [lr(s, o)];
    }
    case "ReverseV2": {
      let n = v("axis", r, e, t), o = v("x", r, e, t);
      return [lr(o, n)];
    }
    case "Slice": {
      let n = v("begin", r, e, t), o = v("size", r, e, t);
      return [Oe(v("x", r, e, t), n, o)];
    }
    case "StridedSlice": {
      let n = v("begin", r, e, t), o = v("end", r, e, t), s = v("strides", r, e, t), a = v("beginMask", r, e, t), i = v("endMask", r, e, t), l = v("ellipsisMask", r, e, t), u = v("newAxisMask", r, e, t), c = v("shrinkAxisMask", r, e, t), p = v("x", r, e, t);
      return [t_(p, n, o, s, a, i, l, u, c)];
    }
    case "Pack":
      return z(() => {
        let n = v("axis", r, e, t), o = v("tensors", r, e, t), s = o[0].shape, a = en(o[0]).shape, i = o.map((l) => {
          let u = b.arraysEqual(l.shape, s);
          if (!u && !b.arraysEqual(en(l).shape, a))
            throw new Error("the input tensors shape does not match");
          return u ? l : O(l, s);
        });
        return [nr(i, n)];
      });
    case "Unpack": {
      let n = v("axis", r, e, t), o = v("tensor", r, e, t);
      return Nr(o, n);
    }
    case "Tile": {
      let n = v("reps", r, e, t);
      return [Rr(v("x", r, e, t), n)];
    }
    case "Split":
    case "SplitV": {
      let n = v("axis", r, e, t), o = v("numOrSizeSplits", r, e, t), s = v("x", r, e, t);
      return mr(s, o, n);
    }
    case "ScatterNd": {
      let n = v("indices", r, e, t), o = v("values", r, e, t), s = v("shape", r, e, t);
      return [VN(n, o, s)];
    }
    case "GatherNd": {
      let n = v("x", r, e, t), o = v("indices", r, e, t);
      return [jN(n, o)];
    }
    case "SparseToDense": {
      let n = v("sparseIndices", r, e, t), o = v("outputShape", r, e, t), s = v("sparseValues", r, e, t), a = v("defaultValue", r, e, t);
      return [Ng(n, s, o, s.dtype === a.dtype ? a : J(a, s.dtype))];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var d$ = (r, e, t) => {
  switch (r.op) {
    case "SparseFillEmptyRows": {
      let { outputIndices: n, outputValues: o, emptyRowIndicator: s, reverseIndexMap: a } = gf.sparseFillEmptyRows(v("indices", r, e, t), v("values", r, e, t), v("denseShape", r, e, t), v("defaultValue", r, e, t));
      return [n, o, s, a];
    }
    case "SparseReshape": {
      let { outputIndices: n, outputShape: o } = gf.sparseReshape(v("inputIndices", r, e, t), v("inputShape", r, e, t), v("newShape", r, e, t));
      return [n, o];
    }
    case "SparseSegmentMean":
      return [gf.sparseSegmentMean(v("data", r, e, t), v("indices", r, e, t), v("segmentIds", r, e, t))];
    case "SparseSegmentSum":
      return [gf.sparseSegmentSum(v("data", r, e, t), v("indices", r, e, t), v("segmentIds", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var h$ = (r, e, t) => {
  switch (r.op) {
    case "FFT":
      return [gu(v("x", r, e, t))];
    case "IFFT":
      return [fl(v("x", r, e, t))];
    case "RFFT":
      return [xu(v("x", r, e, t))];
    case "IRFFT":
      return [ff(v("x", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var g$ = (r, e, t) => {
  switch (r.op) {
    case "StringNGrams": {
      let { nGrams: n, nGramsSplits: o } = Pg.stringNGrams(v("data", r, e, t), v("dataSplits", r, e, t), v("separator", r, e, t), v("nGramWidths", r, e, t), v("leftPad", r, e, t), v("rightPad", r, e, t), v("padWidth", r, e, t), v("preserveShortSequences", r, e, t));
      return [n, o];
    }
    case "StringSplit": {
      let { indices: n, values: o, shape: s } = Pg.stringSplit(v("input", r, e, t), v("delimiter", r, e, t), v("skipEmpty", r, e, t));
      return [n, o, s];
    }
    case "StringToHashBucketFast":
      return [Pg.stringToHashBucketFast(v("input", r, e, t), v("numBuckets", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var x$ = (r, e, t) => {
  switch (r.op) {
    case "Cast":
      return [J(v("x", r, e, t), v("dtype", r, e, t))];
    case "ExpandDims": {
      let n = v("axis", r, e, t);
      return [gr(v("x", r, e, t), n)];
    }
    case "Squeeze": {
      let n = v("axis", r, e, t);
      return [en(v("x", r, e, t), n)];
    }
    case "Reshape":
      return [O(v("x", r, e, t), v("shape", r, e, t))];
    case "MirrorPad":
      return [Lk(v("x", r, e, t), v("padding", r, e, t), v("mode", r, e, t))];
    case "PadV2":
    case "Pad":
      return [xn(v("x", r, e, t), v("padding", r, e, t), v("constantValue", r, e, t))];
    case "SpaceToBatchND": {
      let n = v("blockShape", r, e, t), o = v("paddings", r, e, t);
      return [mu(v("x", r, e, t), n, o)];
    }
    case "BatchToSpaceND": {
      let n = v("blockShape", r, e, t), o = v("crops", r, e, t);
      return [ou(v("x", r, e, t), n, o)];
    }
    case "DepthToSpace": {
      let n = v("blockSize", r, e, t), o = v("dataFormat", r, e, t).toUpperCase();
      return [Ck(v("x", r, e, t), n, o)];
    }
    case "BroadcastTo":
      return [su(v("x", r, e, t), v("shape", r, e, t))];
    case "BroadcastArgs":
      return [gk(v("s0", r, e, t), v("s1", r, e, t))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function zv(r, e, t, n) {
  let o = ((s, a, i) => {
    switch (s.category) {
      case "arithmetic":
        return z(() => qA(s, a, i));
      case "basic_math":
        return z(() => KA(s, a, i));
      case "control":
        return e$(s, a, i);
      case "convolution":
        return z(() => r$(s, a, i));
      case "creation":
        return z(() => n$(s, a, i));
      case "dynamic":
        return o$(s, a, i);
      case "evaluation":
        return z(() => s$(s, a, i));
      case "image":
        return z(() => l$(s, a, i));
      case "graph":
        return z(() => i$(s, a, i));
      case "logical":
        return z(() => u$(s, a, i));
      case "matrices":
        return z(() => c$(s, a, i));
      case "normalization":
        return z(() => p$(s, a, i));
      case "reduction":
        return z(() => m$(s, a, i));
      case "slice_join":
        return z(() => f$(s, a, i));
      case "sparse":
        return z(() => d$(s, a, i));
      case "spectral":
        return z(() => h$(s, a, i));
      case "string":
        return z(() => g$(s, a, i));
      case "transformation":
        return z(() => x$(s, a, i));
      case "hash_table":
        return a$(s, a, i, n);
      case "custom":
        let l = dx(s.op);
        if (l && l.customExecutor)
          return l.customExecutor(new Ov(s, a, i));
        throw TypeError(`Custom op ${s.op} is not registered.`);
      default:
        throw TypeError(`Unknown op '${s.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
    }
  })(r, e, t);
  return b.isPromise(o) ? o.then((s) => [].concat(s)) : [].concat(o);
}
var Tx = class {
  constructor(e = {}, t = {}, n = {}, o = {}) {
    this.weightMap = e, this.tensorArrayMap = t, this.tensorListMap = n, this.functionMap = o, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
  }
  newFrame(e, t) {
    return { id: e, frameName: t, iterationId: 0 };
  }
  set currentContext(e) {
    this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  get currentContextId() {
    return this._currentContextIds[0];
  }
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    let e = [];
    for (let t = 0; t < this.contexts.length - 1; t++) {
      let n = this.contexts.slice(0, this.contexts.length - t);
      e.push(this.contextIdforContexts(n));
    }
    e.push(""), this._currentContextIds = e;
  }
  contextIdforContexts(e) {
    return e ? e.map((t) => t.id === 0 && t.iterationId === 0 ? "" : `${t.frameName}-${t.iterationId}`).join("/") : "";
  }
  enterFrame(e) {
    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  exitFrame() {
    if (this.contexts && this.contexts.length > 1)
      this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    else
      throw new Error("Cannot exit frame, the context is empty");
  }
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice(), this.lastId++;
      let e = Object.assign({}, this.contexts[this.contexts.length - 1]);
      e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else
      throw new Error("Cannot increase frame iteration, the context is empty");
  }
  getWeight(e) {
    return this.weightMap[e];
  }
  addTensorArray(e) {
    this.tensorArrayMap[e.id] = e;
  }
  getTensorArray(e) {
    return this.tensorArrayMap[e];
  }
  addTensorList(e) {
    this.tensorListMap[e.id] = e;
  }
  getTensorList(e) {
    return this.tensorListMap[e];
  }
  dispose(e) {
    for (let t in this.tensorArrayMap)
      this.tensorArrayMap[t].clearAndClose(e);
    for (let t in this.tensorListMap)
      this.tensorListMap[t].clearAndClose(e);
  }
};
function Bv(r, e, t, n) {
  let o = new Set(), s = [], a = null, i = null, l = new Set(), u = Object.keys(r).map((m) => ln(m)[0]), c = [];
  n != null && (c = n.map((m) => ln(m.name)[0]));
  let p = [...e];
  for (; p.length > 0; ) {
    let m = p.pop();
    if ((Vv(m) || l7(m) || u7(m)) && a == null && (a = m, i = a.children.map((f) => f.name).filter((f) => o.has(f))), o.add(m.name), t[m.name] == null && u.indexOf(m.name) === -1 && c.indexOf(m.name) === -1) {
      if (m.inputs.length === 0) {
        s.push(m.name);
        continue;
      }
      m.inputs.forEach((f) => {
        l.has(f.name) || (l.add(f.name), p.push(f));
      });
    }
  }
  return { inputs: r, outputs: e, usedNodes: o, missingInputs: s, dynamicNode: a, syncInputs: i };
}
function y$(r, e, t) {
  let { usedNodes: n, inputs: o } = t, s = [], a = Object.keys(o).map((c) => ln(c)[0]).map((c) => r.nodes[c]), i = r.initNodes;
  a.forEach((c) => {
    n.has(c.name) && s.push(c);
  }), r.weights.forEach((c) => {
    n.has(c.name) && s.push(c);
  }), i != null && i.forEach((c) => {
    n.has(c.name) && s.push(c);
  });
  let l = new Set(), u = [];
  for (; s.length > 0; ) {
    let c = s.pop();
    l.add(c.name), e[c.name] || u.push(c), c.children.forEach((p) => {
      !l.has(p.name) && n.has(p.name) && p.inputs.every((m) => l.has(m.name)) && s.push(p);
    });
  }
  return u;
}
var s7 = ["Switch", "Merge", "Enter", "Exit", "NextIteration", "StatelessIf", "StatelessWhile", "if", "While"];
var i7 = ["NonMaxSuppressionV2", "NonMaxSuppressionV3", "NonMaxSuppressionV5", "Where"];
var a7 = ["HashTable", "HashTableV2", "LookupTableImport", "LookupTableImportV2", "LookupTableFind", "LookupTableFindV2", "LookupTableSize", "LookupTableSizeV2"];
function Vv(r) {
  return s7.indexOf(r.op) >= 0;
}
function l7(r) {
  return i7.indexOf(r.op) >= 0;
}
function u7(r) {
  return a7.indexOf(r.op) >= 0;
}
var Kp = class {
  constructor(e, t) {
    this.graph = e, this.parent = t, this.compiledMap = new Map(), this._weightMap = {}, this.SEPERATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this._outputs = e.outputs, this._inputs = e.inputs, this._initNodes = e.initNodes, this._signature = e.signature, this._functions = e.functions, e.functions != null && Object.keys(e.functions).forEach((n) => {
      this._functionExecutorMap[n] = new Kp(e.functions[n], this);
    });
  }
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(e) {
    let t = Object.keys(e).map((n) => e[n].map((o) => o.id));
    this._weightIds = [].concat(...t), this._weightMap = e;
  }
  set resourceManager(e) {
    this._resourceManager = e;
  }
  get inputs() {
    return this._inputs.map((e) => ({ name: e.name, shape: e.attrParams.shape ? e.attrParams.shape.value : void 0, dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0 }));
  }
  get outputs() {
    return this._outputs.map((e) => ({ name: e.name, shape: e.attrParams.shape ? e.attrParams.shape.value : void 0, dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0 }));
  }
  get inputNodes() {
    return this._inputs.map((e) => e.signatureKey || e.name);
  }
  get outputNodes() {
    return this._outputs.map((e) => {
      let t = e.signatureKey || e.name;
      return e.defaultOutput ? `${t}:${e.defaultOutput}` : t;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((e, t) => (e[t] = this._functions[t].signature, e), {});
  }
  getCompilationKey(e, t) {
    let n = e.map((s) => s.name).sort(), o = t.map((s) => s.name).sort();
    return n.join(this.SEPERATOR) + "--" + o.join(this.SEPERATOR);
  }
  compile(e, t) {
    let n = Bv(e, t, this.weightMap, this._initNodes), { missingInputs: o, dynamicNode: s, syncInputs: a } = n;
    if (s != null)
      throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);
    if (o.length > 0) {
      let i = t.map((u) => u.name), l = Object.keys(e);
      throw new Error(`Cannot compute the outputs [${i}] from the provided inputs [${l}]. Missing the following inputs: [${o}]`);
    }
    return y$(this.graph, this.weightMap, n);
  }
  execute(e, t) {
    e = this.mapInputs(e);
    let n = Object.keys(e).sort();
    this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t);
    let o = n.map((p) => this.graph.nodes[ln(p)[0]]), s = t.map((p) => ln(p)[0]), a = s.map((p) => this.graph.nodes[p]);
    a.length === 0 && (a = this._outputs);
    let i = this.getCompilationKey(o, a), l = this.compiledMap.get(i);
    l == null && (l = this.compile(e, a), this.compiledMap.set(i, l));
    let u = {}, c = {};
    return z(() => {
      let p = new Tx(this.weightMap, u, c, this.functionExecutorMap), m = Object.assign({}, this.weightMap);
      Object.keys(e).forEach((h) => {
        let [g, y] = ln(h), w = [];
        w[y] = e[h], m[g] = w;
      });
      let f = this.getFrozenTensorIds(m), d = {};
      for (let h = 0; h < l.length; h++) {
        let g = l[h];
        if (!m[g.name]) {
          let y = zv(g, m, p, this._resourceManager);
          if (b.isPromise(y))
            throw new Error(`The execution of the op '${g.op}' returned a promise. Please use model.executeAsync() instead.`);
          m[g.name] = y, this.checkTensorForDisposal(g.name, g, m, p, f, s, d);
        }
      }
      return this.parent == null && p.dispose(f), t.map((h) => fr(h, m, p));
    });
  }
  getFrozenTensorIds(e) {
    let t = [].concat.apply([], Object.keys(e).map((n) => e[n]).map((n) => n.map((o) => o.id)));
    return new Set(t);
  }
  checkTensorForDisposal(e, t, n, o, s, a, i) {
    t.category === "control" || a.indexOf(e) !== -1 || (n[e].forEach((l) => {
      l != null && (i[l.id] = (i[l.id] || 0) + t.children.length);
    }), t.inputs.forEach((l) => {
      if (l.category !== "control") {
        let u = jA(l.name, n, o);
        u != null && u.forEach((c) => {
          if (c && !c.kept && !s.has(c.id)) {
            let p = i[c.id];
            p === 1 ? (c.dispose(), delete i[c.id]) : p != null && i[c.id]--;
          }
        });
      }
    }));
  }
  async executeAsync(e, t) {
    return this._executeAsync(e, t);
  }
  async _executeAsync(e, t, n = false, o = {}, s = {}) {
    n || (e = this.mapInputs(e), this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t));
    let a = new Tx(this.weightMap, o, s, this.functionExecutorMap), i = await this.executeWithControlFlow(e, a, t, n), l = t.map((m) => fr(m, i, a)), u = l.map((m) => m.id), c = Object.keys(e).map((m) => e[m].id), p = new Set([...u, ...c, ...this.weightIds]);
    return Object.keys(i).forEach((m) => {
      i[m].forEach((d) => {
        d && !d.kept && !d.isDisposed && !p.has(d.id) && d.dispose();
      });
    }), this.parent == null && a.dispose(p), l;
  }
  async executeFunctionAsync(e, t, n) {
    let o = e.reduce((s, a, i) => (s[this.inputs[i].name] = a, s), {});
    return this._executeAsync(o, this.outputNodes, true, t, n);
  }
  async executeWithControlFlow(e, t, n, o) {
    let s = Object.keys(e), a = s.map((x) => this.graph.nodes[ln(x)[0]]), i = n.map((x) => ln(x)[0]), l = i.map((x) => this.graph.nodes[x]);
    l.length === 0 && (l = this._outputs);
    let { usedNodes: u, missingInputs: c, dynamicNode: p, syncInputs: m } = Bv(e, l, this.weightMap, this._initNodes), f = [...a, ...this.graph.weights, ...this._initNodes || []].map((x) => ({ node: x, contexts: t.currentContext })), d = Object.assign({}, this.weightMap);
    Object.keys(e).forEach((x) => {
      let [k, C] = ln(x), A = [];
      A[C] = e[x], d[k] = A;
    });
    let h = {}, g = this.getFrozenTensorIds(d), y = {};
    for (; f.length > 0; ) {
      let x = this.processStack(a, f, t, d, y, g, i, h, u);
      await Promise.all(x);
    }
    p == null && !o && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
    let w = l.filter((x) => !Vv(x) && !fr(x.name, d, t)).map((x) => x.name);
    if (w.length > 0) {
      let x = "";
      throw p != null && (x = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${m}]`), new Error(`Cannot compute the outputs [${w}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${x}`);
    }
    return d;
  }
  processStack(e, t, n, o, s, a, i, l, u) {
    let c = [];
    for (; t.length > 0; ) {
      let p = t.pop();
      n.currentContext = p.contexts;
      let m = "";
      if (p.node.op === "Enter" && v("isConstant", p.node, o, n) && ([m] = As(p.node.name, n)), o[p.node.name] == null) {
        let f = zv(p.node, o, n, this._resourceManager);
        m || ([m] = As(p.node.name, n));
        let d = n.currentContext;
        b.isPromise(f) ? c.push(f.then((h) => (o[m] = h, n.currentContext = d, this.checkTensorForDisposal(m, p.node, o, n, a, i, l), this.processChildNodes(p.node, t, n, o, s, u), h))) : (o[m] = f, this.checkTensorForDisposal(m, p.node, o, n, a, i, l), this.processChildNodes(p.node, t, n, o, s, u));
      } else
        this.processChildNodes(p.node, t, n, o, s, u);
    }
    return c;
  }
  processChildNodes(e, t, n, o, s, a) {
    e.children.forEach((i) => {
      let [l] = As(i.name, n);
      s[l] || !a.has(i.name) || (i.op === "Merge" ? i.inputNames.some((u) => !!fr(u, o, n)) && (s[l] = true, t.push({ contexts: n.currentContext, node: i })) : i.inputNames.every((u) => !!fr(u, o, n)) && (s[l] = true, t.push({ contexts: n.currentContext, node: i })));
    });
  }
  dispose() {
    Object.keys(this.weightMap).forEach((e) => this.weightMap[e].forEach((t) => t.dispose()));
  }
  checkInputShapeAndType(e) {
    Object.keys(e).forEach((t) => {
      let n = e[t], [o] = ln(t), s = this.graph.nodes[o];
      if (s.attrParams.shape && s.attrParams.shape.value) {
        let a = s.attrParams.shape.value, i = a.length === n.shape.length && n.shape.every((l, u) => a[u] === -1 || a[u] === l);
        b.assert(i, () => `The shape of dict['${s.name}'] provided in model.execute(dict) must be [${a}], but was [${n.shape}]`);
      }
      s.attrParams.dtype && s.attrParams.dtype.value && b.assert(n.dtype === s.attrParams.dtype.value, () => `The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`);
    });
  }
  mapInputs(e) {
    let t = {};
    for (let n in e)
      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[n] != null) {
        let o = this._signature.inputs[n];
        t[o.name] = e[n];
      } else
        t[n] = e[n];
    return t;
  }
  checkInputs(e) {
    let t = Object.keys(e).filter((n) => {
      let [o] = ln(n);
      return this.graph.nodes[o] == null;
    });
    if (t.length > 0)
      throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`);
  }
  mapOutputs(e) {
    return e.map((t) => this._signature != null && this._signature.outputs != null && this._signature.outputs[t] != null ? this._signature.outputs[t].name : t, {});
  }
  checkOutputs(e) {
    e.forEach((t) => {
      let [n] = ln(t);
      if (!this.graph.nodes[n])
        throw new Error(`The output '${t}' is not found in the graph`);
    });
  }
};
var Wv = class {
  constructor(e = {}, t = {}) {
    this.hashTableNameToHandle = e, this.hashTableMap = t;
  }
  addHashTable(e, t) {
    this.hashTableNameToHandle[e] = t.handle, this.hashTableMap[t.id] = t;
  }
  getHashTableHandleByName(e) {
    return this.hashTableNameToHandle[e];
  }
  getHashTableById(e) {
    return this.hashTableMap[e];
  }
  dispose() {
    for (let e in this.hashTableMap)
      this.hashTableMap[e].clearAndClose(), delete this.hashTableMap[e];
    for (let e in this.hashTableNameToHandle)
      this.hashTableNameToHandle[e].dispose(), delete this.hashTableNameToHandle[e];
  }
};
var c7 = "?tfjs-format=file";
var p7 = "model.json";
var jv = class {
  constructor(e, t = {}) {
    this.modelUrl = e, this.loadOptions = t, this.version = "n/a", t == null && (this.loadOptions = {}), this.resourceManager = new Wv();
  }
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  findIOHandler() {
    let e = this.modelUrl;
    if (e.load != null)
      this.handler = e;
    else if (this.loadOptions.requestInit != null)
      this.handler = $r.browserHTTPRequest(e, this.loadOptions);
    else {
      let t = $r.getLoadHandlers(e, this.loadOptions);
      if (t.length === 0)
        t.push($r.browserHTTPRequest(e, this.loadOptions));
      else if (t.length > 1)
        throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);
      this.handler = t[0];
    }
  }
  async load() {
    if (this.findIOHandler(), this.handler.load == null)
      throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    let e = await this.handler.load();
    return this.loadSync(e);
  }
  loadSync(e) {
    this.artifacts = e;
    let t = this.artifacts.modelTopology, n;
    this.artifacts.userDefinedMetadata != null && this.artifacts.userDefinedMetadata.signature != null ? n = this.artifacts.userDefinedMetadata.signature : n = this.artifacts.signature, this.signature = n, this.version = `${t.versions.producer}.${t.versions.minConsumer}`;
    let o = $r.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
    if (this.executor = new Kp(gx.Instance.transformGraph(t, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(o), this.executor.resourceManager = this.resourceManager, e.modelInitializer != null && e.modelInitializer.node != null) {
      let s = gx.Instance.transformGraph(e.modelInitializer);
      this.initializer = new Kp(s), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializer.executeAsync({}, []);
    }
    return true;
  }
  async save(e, t) {
    if (typeof e == "string") {
      let n = $r.getSaveHandlers(e);
      if (n.length === 0)
        throw new Error(`Cannot find any save handlers for URL '${e}'`);
      if (n.length > 1)
        throw new Error(`Found more than one (${n.length}) save handlers for URL '${e}'`);
      e = n[0];
    }
    if (e.save == null)
      throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    return e.save(this.artifacts);
  }
  predict(e, t) {
    return this.execute(e, this.outputNodes);
  }
  normalizeInputs(e) {
    if (!(e instanceof je) && !Array.isArray(e))
      return e;
    if (e = Array.isArray(e) ? e : [e], e.length !== this.inputNodes.length)
      throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);
    return this.inputNodes.reduce((t, n, o) => (t[n] = e[o], t), {});
  }
  normalizeOutputs(e) {
    return e = e || this.outputNodes, Array.isArray(e) ? e : [e];
  }
  execute(e, t) {
    e = this.normalizeInputs(e), t = this.normalizeOutputs(t);
    let n = this.executor.execute(e, t);
    return n.length > 1 ? n : n[0];
  }
  async executeAsync(e, t) {
    e = this.normalizeInputs(e), t = this.normalizeOutputs(t);
    let n = await this.executor.executeAsync(e, t);
    return n.length > 1 ? n : n[0];
  }
  convertTensorMapToTensorsMap(e) {
    return Object.keys(e).reduce((t, n) => (t[n] = [e[n]], t), {});
  }
  dispose() {
    this.executor.dispose(), this.initializer && this.initializer.dispose(), this.resourceManager.dispose();
  }
};
async function m7(r, e = {}) {
  if (r == null)
    throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
  e == null && (e = {}), e.fromTFHub && r.load == null && (r.endsWith("/") || (r = r + "/"), r = `${r}${p7}${c7}`);
  let t = new jv(r, e);
  return await t.load(), t;
}
var f7 = "3.9.0";
var s0 = {};
He(s0, { CSVDataset: () => qd, Dataset: () => xi, FileDataSource: () => Jd, TextLineDataset: () => Ud, URLDataSource: () => Qd, array: () => tD, csv: () => cD, func: () => pD, generator: () => mD, microphone: () => dD, version_data: () => hD, webcam: () => fD, zip: () => rD });
var eD = Bl(Yv());
var z$ = Bl(Yv());
function F$(r, e) {
  return Ax(r, e);
}
function Ax(r, e, t = new Map(), n = new Set()) {
  if (r == null)
    return null;
  if (n.has(r))
    throw new Error("Circular references are not supported.");
  if (t.has(r))
    return t.get(r);
  let o = e(r);
  if (o.recurse && o.value !== null)
    throw new Error("A deep map function may not return both a value and recurse=true.");
  if (o.recurse)
    if (Nl(r)) {
      let s = Array.isArray(r) ? [] : {};
      n.add(r);
      for (let a in r) {
        let i = r[a], l = Ax(i, e, t, n);
        s[a] = l;
      }
      return n.delete(r), s;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${r}`);
  else
    return t.set(r, o.value), o.value;
}
function O$(r, e = Jv) {
  return P$(r, e);
}
function P$(r, e, t = new Set()) {
  let n = r[0];
  if (t.has(n))
    throw new Error("Circular references are not supported.");
  let o = e(r);
  if (o.recurse && o.value !== null)
    throw new Error("A deep zip function may not return both a value and recurse=true.");
  if (o.recurse)
    if (Nl(n)) {
      let s = Array.isArray(n) ? [] : {};
      t.add(n);
      for (let a in n) {
        let i = r.map((u) => u[a]), l = P$(i, e, t);
        s[a] = l;
      }
      return t.delete(n), s;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${n}`);
  else
    return o.value;
}
function Jv(r) {
  return r === null ? null : Nl(r[0]) ? { value: null, recurse: true } : { value: r, recurse: false };
}
async function $x(r, e) {
  let t = new Map();
  Ax(r, e, t);
  for (let o of Array.from(t.keys())) {
    let s = t.get(o);
    if (b.isPromise(s)) {
      let a = await s;
      t.set(o, a);
    }
  }
  return Ax(r, e, t);
}
function Nl(r) {
  let e = false;
  if (j().get("IS_BROWSER"))
    e = r instanceof TextDecoder;
  else {
    let { StringDecoder: t } = Zv();
    e = r instanceof t;
  }
  return r != null && !ArrayBuffer.isView(r) && (Array.isArray(r) || typeof r == "object" && !(r instanceof je) && !(r instanceof Promise) && !e);
}
function M$(r) {
  return r == null || w7(r) || Array.isArray(r) || typeof r == "object" && r instanceof je || b.isTypedArray(r);
}
function w7(r) {
  return r === null || typeof r != "object" && typeof r != "function";
}
function L$(r) {
  return F$(r, k7);
}
function k7(r) {
  return r instanceof je ? { value: r.clone(), recurse: false } : Nl(r) ? { value: null, recurse: true } : { value: r, recurse: false };
}
var jd = class {
  constructor(e) {
    if (this.capacity = e, this.begin = 0, this.end = 0, e == null)
      throw new RangeError("Can't create a ring buffer of unknown capacity.");
    if (e < 1)
      throw new RangeError("Can't create ring buffer of capacity < 1.");
    this.data = new Array(e), this.doubledCapacity = 2 * e;
  }
  wrap(e) {
    for (; e < 0; )
      e += this.doubledCapacity;
    return e % this.doubledCapacity;
  }
  get(e) {
    if (e < 0)
      throw new RangeError("Can't get item at a negative index.");
    return this.data[e % this.capacity];
  }
  set(e, t) {
    if (e < 0)
      throw new RangeError("Can't set item at a negative index.");
    this.data[e % this.capacity] = t;
  }
  length() {
    let e = this.end - this.begin;
    return e < 0 && (e = this.doubledCapacity + e), e;
  }
  isFull() {
    return this.length() === this.capacity;
  }
  isEmpty() {
    return this.length() === 0;
  }
  push(e) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.set(this.end, e), this.end = this.wrap(this.end + 1);
  }
  pushAll(e) {
    for (let t of e)
      this.push(t);
  }
  pop() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    this.end = this.wrap(this.end - 1);
    let e = this.get(this.end);
    return this.set(this.end, void 0), e;
  }
  unshift(e) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.begin = this.wrap(this.begin - 1), this.set(this.begin, e);
  }
  shift() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    let e = this.get(this.begin);
    return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), e;
  }
  shuffleExcise(e) {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    let t = this.wrap(this.begin + e), n = this.get(t);
    return this.set(t, this.pop()), n;
  }
};
var Xp = class extends jd {
  constructor() {
    super(Xp.INITIAL_CAPACITY);
  }
  isFull() {
    return false;
  }
  push(e) {
    super.isFull() && this.expand(), super.push(e);
  }
  unshift(e) {
    super.isFull() && this.expand(), super.unshift(e);
  }
  expand() {
    let e = this.capacity * 2, t = new Array(e), n = this.length();
    for (let o = 0; o < n; o++)
      t[o] = this.get(this.wrap(this.begin + o));
    this.data = t, this.capacity = e, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = n;
  }
};
Xp.INITIAL_CAPACITY = 32;
function Qv(r) {
  return new W$(r);
}
function Gd(r) {
  return new j$(r);
}
function B$(r, e) {
  return new t0(r, e);
}
function V$(r, e = Ra.FAIL) {
  return new J$(r, e);
}
var Zt = class {
  async toArray() {
    let e = [], t = await this.next();
    for (; !t.done; )
      e.push(t.value), t = await this.next();
    return e;
  }
  async toArrayForTest() {
    let e = this.prefetch(100), t = [], n = await e.next();
    for (; !n.done; )
      t.push(n.value), n = await e.next();
    return t;
  }
  async resolveFully() {
    let e = await this.next();
    for (; !e.done; )
      e = await this.next();
  }
  async resolveWhile(e) {
    let t = await this.next(), n = e(t.value);
    for (; !t.done && n; )
      t = await this.next(), n = e(t.value);
  }
  handleErrors(e) {
    return new Y$(this, e);
  }
  filter(e) {
    return new K$(this, e);
  }
  map(e) {
    return new X$(this, e);
  }
  mapAsync(e) {
    return new e0(this, e);
  }
  serialMapAsync(e) {
    return new e0(this, e).serial();
  }
  flatmap(e) {
    return new Z$(this, e);
  }
  async forEachAsync(e) {
    return this.map(e).resolveFully();
  }
  async serialForEach(e) {
    return this.serialMapAsync(e).resolveWhile((t) => t === true);
  }
  rowMajorBatch(e, t = true) {
    return new q$(this, e, t);
  }
  columnMajorBatch(e, t = true, n = Jv) {
    return this.rowMajorBatch(e, t).map((s) => O$(s, n));
  }
  concatenate(e, t) {
    return new t0(Qv([this, e]), t);
  }
  take(e) {
    return e < 0 || e == null ? this : new H$(this, e);
  }
  skip(e) {
    return e < 0 || e == null ? this : new U$(this, e);
  }
  prefetch(e) {
    return new r0(this, e);
  }
  shuffle(e, t) {
    return new Q$(this, e, t);
  }
  serial() {
    return new G$(this);
  }
};
var W$ = class extends Zt {
  constructor(e) {
    super();
    this.items = e, this.trav = 0;
  }
  summary() {
    return `Array of ${this.items.length} items`;
  }
  async next() {
    if (this.trav >= this.items.length)
      return { value: null, done: true };
    let e = this.items[this.trav];
    return this.trav++, { value: L$(e), done: false };
  }
};
var j$ = class extends Zt {
  constructor(e) {
    super();
    this.nextFn = e;
  }
  summary() {
    return "Function call";
  }
  async next() {
    try {
      return this.nextFn();
    } catch (e) {
      throw e.message = `Error thrown while iterating through a dataset: ${e.message}`, e;
    }
  }
};
var G$ = class extends Zt {
  constructor(e) {
    super();
    this.upstream = e, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Serial`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    return this.upstream.next();
  }
};
var U$ = class extends Zt {
  constructor(e, t) {
    super();
    this.upstream = e, this.maxCount = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Skip`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.count++ < this.maxCount; ) {
      let e = await this.upstream.next();
      if (e.done)
        return e;
      Ae(e.value);
    }
    return this.upstream.next();
  }
};
var H$ = class extends Zt {
  constructor(e, t) {
    super();
    this.upstream = e, this.maxCount = t, this.count = 0;
  }
  summary() {
    return `${this.upstream.summary()} -> Take`;
  }
  async next() {
    return this.count++ >= this.maxCount ? { value: null, done: true } : this.upstream.next();
  }
};
var q$ = class extends Zt {
  constructor(e, t, n = true) {
    super();
    this.upstream = e, this.batchSize = t, this.enableSmallLastBatch = n, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> RowMajorBatch`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    let e = [];
    for (; e.length < this.batchSize; ) {
      let t = await this.upstream.next();
      if (t.done)
        return this.enableSmallLastBatch && e.length > 0 ? { value: e, done: false } : { value: null, done: true };
      e.push(t.value);
    }
    return { value: e, done: false };
  }
};
var K$ = class extends Zt {
  constructor(e, t) {
    super();
    this.upstream = e, this.predicate = t, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> Filter`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) {
      let e = await this.upstream.next();
      if (e.done || this.predicate(e.value))
        return e;
      Ae(e.value);
    }
  }
};
var X$ = class extends Zt {
  constructor(e, t) {
    super();
    this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> Map`;
  }
  async next() {
    let e = await this.upstream.next();
    if (e.done)
      return { value: null, done: true };
    let t = io.getTensorsInContainer(e.value), n = this.transform(e.value), o = io.getTensorsInContainer(n);
    for (let s of t)
      io.isTensorInList(s, o) || s.dispose();
    return { value: n, done: false };
  }
};
var Y$ = class extends Zt {
  constructor(e, t) {
    super();
    this.upstream = e, this.handler = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: false });
  }
  summary() {
    return `${this.upstream.summary()} -> handleErrors`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; )
      try {
        return await this.upstream.next();
      } catch (e) {
        if (!this.handler(e))
          return { value: null, done: true };
      }
  }
};
var e0 = class extends Zt {
  constructor(e, t) {
    super();
    this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> AsyncMap`;
  }
  async next() {
    let e = await this.upstream.next();
    if (e.done)
      return { value: null, done: true };
    let t = io.getTensorsInContainer(e.value), n = await this.transform(e.value), o = io.getTensorsInContainer(n);
    for (let s of t)
      io.isTensorInList(s, o) || s.dispose();
    return { value: n, done: false };
  }
};
var Yp = class extends Zt {
  constructor() {
    super();
    this.outputQueue = new Xp(), this.lastRead = Promise.resolve({ value: null, done: false });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.outputQueue.length() === 0; )
      if (!await this.pump())
        return { value: null, done: true };
    return { value: this.outputQueue.shift(), done: false };
  }
};
var Z$ = class extends Yp {
  constructor(e, t) {
    super();
    this.upstream = e, this.transform = t;
  }
  summary() {
    return `${this.upstream.summary()} -> Flatmap`;
  }
  async pump() {
    let e = await this.upstream.next();
    if (e.done)
      return false;
    let t = io.getTensorsInContainer(e.value), n = this.transform(e.value), o = io.getTensorsInContainer(n);
    this.outputQueue.pushAll(n);
    for (let s of t)
      io.isTensorInList(s, o) || s.dispose();
    return true;
  }
};
var t0 = class extends Zt {
  constructor(e, t) {
    super();
    this.baseErrorHandler = t, this.lastRead = null, this.iterator = null, this.moreIterators = e;
  }
  summary() {
    return "TODO: fill in upstream of chained summaries -> Chained";
  }
  async next() {
    return this.lastRead = this.readFromChain(this.lastRead), this.lastRead;
  }
  async readFromChain(e) {
    if (await e, this.iterator == null) {
      let n = await this.moreIterators.next();
      if (n.done)
        return { value: null, done: true };
      this.iterator = n.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler));
    }
    let t = await this.iterator.next();
    return t.done ? (this.iterator = null, this.readFromChain(e)) : t;
  }
};
var Ra;
(function(r) {
  r[r.FAIL = 0] = "FAIL", r[r.SHORTEST = 1] = "SHORTEST", r[r.LONGEST = 2] = "LONGEST";
})(Ra || (Ra = {}));
var J$ = class extends Zt {
  constructor(e, t = Ra.FAIL) {
    super();
    this.iterators = e, this.mismatchMode = t, this.count = 0, this.currentPromise = null;
  }
  summary() {
    return "{TODO: fill in upstream of zip summaries} -> Zip";
  }
  async nextState(e) {
    await e;
    let t = 0, n = 0;
    function o(a) {
      return a instanceof Zt ? { value: a.next().then((l) => (t++, l.done && n++, l.value)), recurse: false } : { value: null, recurse: true };
    }
    let s = await $x(this.iterators, o);
    if (t === n)
      return { value: null, done: true };
    if (n > 0)
      switch (this.mismatchMode) {
        case Ra.FAIL:
          throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);
        case Ra.SHORTEST:
          return { value: null, done: true };
        case Ra.LONGEST:
        default:
      }
    return this.count++, { value: s, done: false };
  }
  async next() {
    return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise;
  }
};
var r0 = class extends Zt {
  constructor(e, t) {
    super();
    this.upstream = e, this.bufferSize = t, this.buffer = new jd(t);
  }
  summary() {
    return `${this.upstream.summary()} -> Prefetch`;
  }
  refill() {
    for (; !this.buffer.isFull(); ) {
      let e = this.upstream.next();
      this.buffer.push(e);
    }
  }
  next() {
    return this.refill(), this.buffer.shift();
  }
};
var Q$ = class extends r0 {
  constructor(e, t, n) {
    super(e, t);
    this.upstream = e, this.windowSize = t, this.upstreamExhausted = false, this.random = z$.alea(n || b.now().toString()), this.lastRead = Promise.resolve({ value: null, done: false });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  randomInt(e) {
    return Math.floor(this.random() * e);
  }
  chooseIndex() {
    return this.randomInt(this.buffer.length());
  }
  async serialNext() {
    for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty(); ) {
      let e = this.chooseIndex(), t = await this.buffer.shuffleExcise(e);
      if (t.done)
        this.upstreamExhausted = true;
      else
        return this.refill(), t;
    }
    return { value: null, done: true };
  }
};
var xi = class {
  constructor() {
    this.size = null;
  }
  batch(e, t = true) {
    let n = this;
    b.assert(e > 0, () => `batchSize needs to be positive, but it is
      ${e}`);
    let o;
    return this.size === 1 / 0 || this.size == null ? o = this.size : t ? o = Math.ceil(this.size / e) : o = Math.floor(this.size / e), vn(async () => (await n.iterator()).columnMajorBatch(e, t, _7), o);
  }
  concatenate(e) {
    let t = this, n;
    return this.size === 1 / 0 || e.size === 1 / 0 ? n = 1 / 0 : this.size != null && e.size != null ? n = this.size + e.size : n = null, vn(async () => (await t.iterator()).concatenate(await e.iterator()), n);
  }
  filter(e) {
    let t = this, n;
    return this.size === 1 / 0 ? n = 1 / 0 : n = null, vn(async () => (await t.iterator()).filter((o) => z(() => e(o))), n);
  }
  async forEachAsync(e) {
    return (await this.iterator()).forEachAsync(e);
  }
  map(e) {
    let t = this;
    return vn(async () => (await t.iterator()).map((n) => z(() => e(n))), this.size);
  }
  mapAsync(e) {
    let t = this;
    return vn(async () => (await t.iterator()).mapAsync(e), this.size);
  }
  prefetch(e) {
    if (e == null)
      throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
    let t = this;
    return vn(async () => (await t.iterator()).prefetch(e), this.size);
  }
  repeat(e) {
    let t = this, n;
    return this.size != null && e > 0 ? n = this.size * e : e === 0 ? n = 0 : this.size != null && (e === void 0 || e < 0) ? n = 1 / 0 : n = null, vn(async () => {
      let o = Gd(async () => ({ value: await t.iterator(), done: false }));
      return B$(o.take(e));
    }, n);
  }
  skip(e) {
    let t = this, n;
    return this.size != null && e >= 0 && this.size >= e ? n = this.size - e : this.size != null && (this.size < e || e === void 0 || e < 0) ? n = 0 : n = null, vn(async () => (await t.iterator()).skip(e), n);
  }
  shuffle(e, t, n = true) {
    if (e == null || e < 0)
      throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);
    let o = this, s = eD.alea(t || b.now().toString());
    return vn(async () => {
      let a = s.int32();
      return n && (a += s.int32()), (await o.iterator()).shuffle(e, a.toString());
    }, this.size);
  }
  take(e) {
    let t = this, n;
    return this.size != null && this.size > e ? n = e : this.size != null && this.size <= e ? n = this.size : n = null, vn(async () => (await t.iterator()).take(e), n);
  }
  async toArray() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArray();
  }
  async toArrayForTest() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArrayForTest();
  }
};
xi.MAX_BUFFER_SIZE = 1e4;
function vn(r, e = null) {
  return new class extends xi {
    constructor() {
      super(...arguments);
      this.size = e;
    }
    async iterator() {
      return r();
    }
  }();
}
function tD(r) {
  return vn(async () => Qv(r), r.length);
}
function rD(r) {
  if (!Nl(r))
    throw new Error("The argument to zip() must be an object or array.");
  let e;
  if (Array.isArray(r))
    for (let t = 0; t < r.length; t++)
      e = e == null ? r[t].size : Math.min(e, r[t].size);
  else if (r instanceof Object)
    for (let t in r)
      e = e == null ? r[t].size : Math.min(e, r[t].size);
  return vn(async () => {
    let t = await $x(r, (n) => {
      if (n instanceof xi)
        return { value: n.iterator(), recurse: false };
      if (Nl(n))
        return { value: null, recurse: true };
      throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
    });
    return V$(t, Ra.SHORTEST);
  }, e);
}
function _7(r) {
  if (r === null)
    return null;
  let e = r[0];
  return M$(e) ? { value: v7(r), recurse: false } : { value: null, recurse: true };
}
function v7(r) {
  if (r.length === 0)
    throw new Error("Can't make a batch of zero elements.");
  return r[0] instanceof je ? nr(r) : vr(r);
}
var Ud = class extends xi {
  constructor(e) {
    super();
    this.input = e;
  }
  async iterator() {
    return (await this.input.iterator()).decodeUTF8().split(`
`).map((o) => (o.endsWith("\r") && (o = o.slice(0, -1)), o));
  }
};
var Dx = '"';
var Hd = Symbol("out");
var nD = Symbol("field");
var Rx = Symbol("quote");
var n0 = Symbol("quoteafterquote");
var oD = Symbol("quoteinquote");
var qd = class extends xi {
  constructor(e, t) {
    super();
    this.input = e, this.hasHeader = true, this.fullColumnNames = null, this.columnNamesValidated = false, this.columnConfigs = null, this.configuredColumnsOnly = false, this.delimiter = ",", this.delimWhitespace = false, this.base = new Ud(e), t || (t = {}), this.hasHeader = t.hasHeader !== false, this.fullColumnNames = t.columnNames, this.columnConfigs = t.columnConfigs, this.configuredColumnsOnly = t.configuredColumnsOnly, t.delimWhitespace ? (b.assert(t.delimiter == null, () => "Delimiter should not be provided when delimWhitespace is true."), this.delimWhitespace = true, this.delimiter = " ") : this.delimiter = t.delimiter ? t.delimiter : ",";
  }
  async columnNames() {
    return this.columnNamesValidated || await this.setColumnNames(), this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;
  }
  async setColumnNames() {
    let e = await this.maybeReadHeaderLine();
    if (!this.fullColumnNames && !e)
      throw new Error("Column names must be provided if there is no header line.");
    this.fullColumnNames && e && b.assert(e.length === this.fullColumnNames.length, () => "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + e.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = e);
    let t = this.fullColumnNames.reduce((o, s) => (o[s] = o[s] + 1 || 1, o), {}), n = Object.keys(t).filter((o) => t[o] > 1);
    if (b.assert(n.length === 0, () => "Duplicate column names found: " + n.toString()), this.columnConfigs) {
      for (let o of Object.keys(this.columnConfigs))
        if (this.fullColumnNames.indexOf(o) === -1)
          throw new Error('The key "' + o + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
    }
    this.columnNamesValidated = true;
  }
  async maybeReadHeaderLine() {
    if (this.hasHeader) {
      let t = await (await this.base.iterator()).next();
      if (t.done)
        throw new Error("No data was found for CSV parsing.");
      let n = t.value;
      return this.parseRow(n, false);
    } else
      return null;
  }
  async iterator() {
    this.columnNamesValidated || await this.setColumnNames();
    let e = await this.base.iterator();
    return this.hasHeader && (e = e.skip(1)), e.map((t) => this.makeDataElement(t));
  }
  makeDataElement(e) {
    let t = this.parseRow(e), n = {}, o = {};
    for (let s = 0; s < this.fullColumnNames.length; s++) {
      let a = this.fullColumnNames[s], i = this.columnConfigs ? this.columnConfigs[a] : null;
      if (!(this.configuredColumnsOnly && !i)) {
        let l = t[s], u = null;
        if (l === "")
          if (i && i.default !== void 0)
            u = i.default;
          else {
            if (i && (i.required || i.isLabel))
              throw new Error(`Required column ${a} is empty in this line: ${e}`);
            u = void 0;
          }
        else {
          let c = Number(l);
          if (isNaN(c))
            i && i.dtype === "bool" ? u = this.getBoolean(l) : u = l;
          else if (!i || !i.dtype)
            u = c;
          else
            switch (i.dtype) {
              case "float32":
                u = c;
                break;
              case "int32":
                u = Math.floor(c);
                break;
              case "bool":
                u = this.getBoolean(l);
                break;
              default:
                u = c;
            }
        }
        i && i.isLabel ? o[a] = u : n[a] = u;
      }
    }
    return Object.keys(o).length === 0 ? n : { xs: n, ys: o };
  }
  getBoolean(e) {
    return e === "1" || e.toLowerCase() === "true" ? 1 : 0;
  }
  parseRow(e, t = true) {
    let n = [], o = 0, s = e.length, a = Hd;
    for (let i = 0; i < s; i++)
      switch (a) {
        case Hd:
          switch (e.charAt(i)) {
            case Dx:
              o = i + 1, a = Rx;
              break;
            case this.delimiter:
              if (o = i + 1, this.delimiter === " " && this.delimWhitespace)
                break;
              n.push(""), a = Hd;
              break;
            default:
              a = nD, o = i;
              break;
          }
          break;
        case nD:
          switch (e.charAt(i)) {
            case this.delimiter:
              n.push(e.substring(o, i)), a = Hd, o = i + 1;
              break;
            default:
          }
          break;
        case Rx:
          switch (e.charAt(i)) {
            case Dx:
              a = n0;
              break;
            default:
          }
          break;
        case n0:
          switch (e.charAt(i)) {
            case this.delimiter:
              n.push(e.substring(o, i - 1)), a = Hd, o = i + 1;
              break;
            case Dx:
              a = Rx;
              break;
            default:
              a = oD;
              break;
          }
          break;
        case oD:
          switch (e.charAt(i)) {
            case Dx:
              a = Rx;
              break;
            default:
          }
          break;
        default:
      }
    if (a === n0 ? n.push(e.substring(o, s - 1)) : n.push(e.substring(o)), t && n.length !== this.fullColumnNames.length)
      throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);
    return n;
  }
};
var Kd = class extends Zt {
  constructor(e) {
    super();
    this.microphoneConfig = e, this.isClosed = false, this.fftSize = e.fftSize || 1024;
    let t = Math.log2(this.fftSize);
    if (this.fftSize < 0 || t < 4 || t > 14 || !Number.isInteger(t))
      throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);
    if (this.numFrames = e.numFramesPerSpectrogram || 43, this.sampleRateHz = e.sampleRateHz, this.columnTruncateLength = e.columnTruncateLength || this.fftSize, this.audioTrackConstraints = e.audioTrackConstraints, this.smoothingTimeConstant = e.smoothingTimeConstant || 0, this.includeSpectrogram = e.includeSpectrogram !== false, this.includeWaveform = e.includeWaveform === true, !this.includeSpectrogram && !this.includeWaveform)
      throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");
  }
  summary() {
    return "microphone";
  }
  static async create(e = {}) {
    if (j().get("IS_NODE"))
      throw new Error("microphone API is only supported in browser environment.");
    let t = new Kd(e);
    return await t.start(), t;
  }
  async start() {
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ audio: this.audioTrackConstraints == null ? true : this.audioTrackConstraints, video: false });
    } catch (n) {
      throw new Error(`Error thrown while initializing video stream: ${n.message}`);
    }
    if (!this.stream)
      throw new Error("Could not obtain audio from microphone.");
    let e = window.AudioContext || window.webkitAudioContext;
    if (this.audioContext = new e(), !this.sampleRateHz)
      this.sampleRateHz = this.audioContext.sampleRate;
    else if (this.audioContext.sampleRate !== this.sampleRateHz)
      throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`);
    let t = this.audioContext.createMediaStreamSource(this.stream);
    this.analyser = this.audioContext.createAnalyser(), this.analyser.fftSize = this.fftSize * 2, this.analyser.smoothingTimeConstant = this.smoothingTimeConstant, t.connect(this.analyser), this.freqData = new Float32Array(this.fftSize), this.timeData = new Float32Array(this.fftSize);
  }
  async next() {
    if (this.isClosed)
      return { value: null, done: true };
    let e, t, n = await this.getAudioData();
    if (this.includeSpectrogram) {
      let o = this.flattenQueue(n.freqDataQueue);
      e = this.getTensorFromAudioDataArray(o, [this.numFrames, this.columnTruncateLength, 1]);
    }
    if (this.includeWaveform) {
      let o = this.flattenQueue(n.timeDataQueue);
      t = this.getTensorFromAudioDataArray(o, [this.numFrames * this.fftSize, 1]);
    }
    return { value: { spectrogram: e, waveform: t }, done: false };
  }
  async capture() {
    return (await this.next()).value;
  }
  async getAudioData() {
    let e = [], t = [], n = 0;
    return new Promise((o) => {
      let s = setInterval(() => {
        this.includeSpectrogram && (this.analyser.getFloatFrequencyData(this.freqData), this.freqData[0] === -1 / 0 && o({ freqDataQueue: e, timeDataQueue: t }), e.push(this.freqData.slice(0, this.columnTruncateLength))), this.includeWaveform && (this.analyser.getFloatTimeDomainData(this.timeData), t.push(this.timeData.slice())), ++n === this.numFrames && (clearInterval(s), o({ freqDataQueue: e, timeDataQueue: t }));
      }, this.fftSize / this.sampleRateHz * 1e3);
    });
  }
  stop() {
    this.isClosed || (this.isClosed = true, this.analyser.disconnect(), this.audioContext.close(), this.stream != null && this.stream.getTracks().length > 0 && this.stream.getTracks()[0].stop());
  }
  toArray() {
    throw new Error("Can not convert infinite audio stream to array.");
  }
  getSampleRate() {
    return this.sampleRateHz;
  }
  flattenQueue(e) {
    let t = e[0].length, n = new Float32Array(e.length * t);
    return e.forEach((o, s) => n.set(o, s * t)), n;
  }
  getTensorFromAudioDataArray(e, t) {
    let n = new Float32Array(b.sizeFromShape(t));
    return n.set(e, n.length - e.length), vr(n, t);
  }
};
var Xd = class extends Zt {
  constructor(e, t) {
    super();
    if (this.webcamVideoElement = e, this.webcamConfig = t, this.isClosed = true, this.resize = false, this.needToResize())
      if (this.resize = true, this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth], this.cropBoxInd = At([0], "int32"), this.webcamConfig.centerCrop) {
        let n = this.webcamConfig.resizeWidth * 1 / this.webcamVideoElement.width, o = this.webcamConfig.resizeHeight * 1 / this.webcamVideoElement.height, s = (1 - n) / 2, a = (1 - o) / 2, i = s + n, l = o + a;
        this.cropBox = pi([a, s, l, i], [1, 4]);
      } else
        this.cropBox = pi([0, 0, 1, 1], [1, 4]);
  }
  summary() {
    return "webcam";
  }
  static async create(e, t = {}) {
    if (j().get("IS_NODE"))
      throw new Error("tf.data.webcam is only supported in browser environment.");
    if (!e) {
      if (e = document.createElement("video"), !t.resizeWidth || !t.resizeHeight)
        throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");
      e.width = t.resizeWidth, e.height = t.resizeHeight;
    }
    let n = new Xd(e, t);
    return await n.start(), n;
  }
  async start() {
    this.webcamConfig.facingMode && b.assert(this.webcamConfig.facingMode === "user" || this.webcamConfig.facingMode === "environment", () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ video: { deviceId: this.webcamConfig.deviceId, facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user", width: this.webcamVideoElement.width, height: this.webcamVideoElement.height } });
    } catch (e) {
      throw e.message = `Error thrown while initializing video stream: ${e.message}`, e;
    }
    if (!this.stream)
      throw new Error("Could not obtain video from webcam.");
    try {
      this.webcamVideoElement.srcObject = this.stream;
    } catch (e) {
      console.log(e), this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);
    }
    return this.webcamVideoElement.play(), this.isClosed = false, new Promise((e) => {
      this.webcamVideoElement.onloadedmetadata = () => {
        e();
      };
    });
  }
  async next() {
    if (this.isClosed)
      return { value: null, done: true };
    let e;
    try {
      e = cg.fromPixels(this.webcamVideoElement);
    } catch (t) {
      throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`);
    }
    if (this.resize)
      try {
        return { value: this.cropAndResizeFrame(e), done: false };
      } catch (t) {
        throw new Error(`Error thrown cropping the video: ${t.message}`);
      } finally {
        e.dispose();
      }
    else
      return { value: e, done: false };
  }
  needToResize() {
    return !!(this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight));
  }
  cropAndResizeFrame(e) {
    return z(() => {
      let t = gr(J(e, "float32"), 0), n;
      n = bn.cropAndResize(t, this.cropBox, this.cropBoxInd, this.cropSize, "bilinear");
      let o = n.shape;
      return O(n, o.slice(1));
    });
  }
  async capture() {
    return (await this.next()).value;
  }
  stop() {
    this.stream.getTracks().forEach((t) => t.stop());
    try {
      this.webcamVideoElement.srcObject = null;
    } catch (t) {
      console.log(t), this.webcamVideoElement.src = null;
    }
    this.isClosed = true;
  }
  toArray() {
    throw new Error("Can not convert infinite video stream to array.");
  }
};
var Yd = class {
};
var Fx = class extends Zt {
  split(e) {
    return new sD(this, e);
  }
};
var sD = class extends Fx {
  constructor(e, t) {
    super();
    this.upstream = e, this.impl = new iD(e, t);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
};
var iD = class extends Yp {
  constructor(e, t) {
    super();
    this.upstream = e, this.separator = t, this.carryover = "";
  }
  summary() {
    return `${this.upstream.summary()} -> Split('${this.separator}')`;
  }
  async pump() {
    let e = await this.upstream.next();
    if (e.done)
      return this.carryover === "" ? false : (this.outputQueue.push(this.carryover), this.carryover = "", true);
    let t = e.value.split(this.separator);
    t[0] = this.carryover + t[0];
    for (let n of t.slice(0, -1))
      this.outputQueue.push(n);
    return this.carryover = t[t.length - 1], true;
  }
};
var o0 = class extends Zt {
  decodeUTF8() {
    return new aD(this);
  }
};
var aD = class extends Fx {
  constructor(e) {
    super();
    this.upstream = e, this.impl = new lD(e);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
};
var lD = class extends Yp {
  constructor(e) {
    super();
    if (this.upstream = e, j().get("IS_BROWSER"))
      this.decoder = new TextDecoder("utf-8");
    else {
      let { StringDecoder: t } = Zv();
      this.decoder = new t("utf8");
    }
  }
  summary() {
    return `${this.upstream.summary()} -> Utf8`;
  }
  async pump() {
    let e = await this.upstream.next(), t;
    if (e.done)
      return false;
    t = e.value;
    let n;
    return j().get("IS_BROWSER") ? n = this.decoder.decode(t, { stream: true }) : n = this.decoder.write(Buffer.from(t.buffer)), this.outputQueue.push(n), true;
  }
};
var Zd = class extends o0 {
  constructor(e, t = {}) {
    super();
    this.file = e, this.options = t, b.assert(e instanceof Uint8Array || (j().get("IS_BROWSER") ? e instanceof File || e instanceof Blob : false), () => "FileChunkIterator only supports File, Blob and Uint8Array right now."), this.offset = t.offset || 0, this.chunkSize = t.chunkSize || 1024 * 1024;
  }
  summary() {
    return `FileChunks ${this.file}`;
  }
  async next() {
    return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? { value: null, done: true } : { value: await new Promise((t, n) => {
      let o = this.offset + this.chunkSize;
      if (this.file instanceof Uint8Array)
        t(new Uint8Array(this.file.slice(this.offset, o)));
      else {
        let s = new FileReader();
        s.onload = (i) => {
          let l = s.result;
          if (l instanceof ArrayBuffer && (l = new Uint8Array(l)), !(l instanceof Uint8Array))
            return n(new TypeError("FileReader returned unknown type."));
          t(l);
        }, s.onabort = (i) => n(new Error("Aborted")), s.onerror = (i) => n(new Error(i.type));
        let a = this.file.slice(this.offset, o);
        s.readAsArrayBuffer(a);
      }
      this.offset = o;
    }), done: false };
  }
};
async function uD(r, e = {}) {
  let t, n;
  typeof r == "string" ? t = r : (t = r.url, n = C7(r));
  let o = await b.fetch(t, n);
  if (o.ok) {
    let s = new Uint8Array(await o.arrayBuffer());
    return new Zd(s, e);
  } else
    throw new Error(o.statusText);
}
var C7 = (r) => ({ method: r.method, headers: r.headers, body: r.body, mode: r.mode, credentials: r.credentials, cache: r.cache, redirect: r.redirect, referrer: r.referrer, integrity: r.integrity });
function Ox(r) {
  return typeof r == "string" && r.substr(0, 7) === "file://";
}
var Jd = class extends Yd {
  constructor(e, t = {}) {
    super();
    this.input = e, this.options = t;
  }
  async iterator() {
    if (Ox(this.input) && j().get("IS_NODE")) {
      let e = pc("fs");
      this.input = e.readFileSync(this.input.substr(7));
    }
    return new Zd(this.input, this.options);
  }
};
var Qd = class extends Yd {
  constructor(e, t = {}) {
    super();
    this.url = e, this.fileOptions = t;
  }
  async iterator() {
    return Ox(this.url) ? new Jd(this.url, this.fileOptions).iterator() : uD(this.url, this.fileOptions);
  }
};
function cD(r, e = {}) {
  return new qd(new Qd(r), e);
}
function pD(r) {
  let e = Gd(r);
  return vn(async () => e);
}
function mD(r) {
  return vn(async () => {
    let e = await r();
    return Gd(() => e.next());
  });
}
async function fD(r, e) {
  return Xd.create(r, e);
}
async function dD(r) {
  return Kd.create(r);
}
var hD = "3.9.0";
function te(r, e) {
  Array.isArray(r) || (r = [r]), r.forEach((t) => {
    t != null && b.assert(t.dtype !== "complex64", () => `${e} does not support complex64 tensors in the CPU backend.`);
  });
}
var S7 = Mr.whereImpl;
var Pu = class extends Ls {
  constructor() {
    super();
    this.blockSize = 48, this.firstUse = true, this.data = new Ka(this, ks());
  }
  nextDataId() {
    return Pu.nextDataId++;
  }
  write(e, t, n) {
    this.firstUse && (this.firstUse = false, j().get("IS_NODE") && S.warn(`
============================
Hi there \u{1F44B}. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.
============================`));
    let o = { id: this.nextDataId() };
    return this.data.set(o, { values: e, dtype: n, refCount: 1 }), o;
  }
  makeTensorInfo(e, t, n) {
    let o;
    if (t === "string" && n != null && n.length > 0 && b.isString(n[0])) {
      let s = n.map((a) => b.encodeString(a));
      o = this.write(s, e, t);
    } else
      o = this.write(n, e, t);
    return { dataId: o, shape: e, dtype: t };
  }
  refCount(e) {
    return this.data.has(e) ? this.data.get(e).refCount : 0;
  }
  incRef(e) {
    let t = this.data.get(e);
    t.refCount++;
  }
  decRef(e) {
    if (this.data.has(e)) {
      let t = this.data.get(e);
      t.refCount--;
    }
  }
  move(e, t, n, o, s) {
    this.data.set(e, { values: t, dtype: o, refCount: s });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(e) {
    return this.readSync(e);
  }
  readSync(e) {
    let { dtype: t, complexTensorInfos: n } = this.data.get(e);
    if (t === "complex64") {
      let o = this.readSync(n.real.dataId), s = this.readSync(n.imag.dataId);
      return S.mergeRealAndImagArrays(o, s);
    }
    return this.data.get(e).values;
  }
  bufferSync(e) {
    let t = this.readSync(e.dataId), n = t;
    if (e.dtype === "string")
      try {
        n = t.map((o) => b.decodeString(o));
      } catch (o) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return Se(e.shape, e.dtype, n);
  }
  makeOutput(e, t, n) {
    let o = this.write(e, t, n);
    return ks().makeTensorFromDataId(o, t, n, this);
  }
  disposeData(e, t = false) {
    if (this.data.has(e)) {
      if (this.data.get(e).refCount--, !t && this.data.get(e).refCount > 0)
        return false;
      let { complexTensorInfos: n } = this.data.get(e);
      n != null && (this.disposeData(n.real.dataId, true), this.disposeData(n.imag.dataId, true)), this.data.delete(e);
    }
    return true;
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  async time(e) {
    let t = b.now();
    return e(), { kernelMs: b.now() - t };
  }
  memory() {
    return { unreliable: true, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
  }
  where(e) {
    te([e], "where");
    let t = this.readSync(e.dataId);
    return S7(e.shape, t);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  epsilon() {
    return super.epsilon();
  }
};
Pu.nextDataId = 0;
var Yx = {};
He(Yx, { addImpl: () => a0, bincountImpl: () => Qp, bincountReduceImpl: () => Px, ceilImpl: () => l0, concatImpl: () => Mu, equalImpl: () => u0, expImpl: () => p0, expm1Impl: () => f0, floorImpl: () => d0, gatherNdImpl: () => Mx, gatherV2Impl: () => Lx, greaterEqualImpl: () => g0, greaterImpl: () => h0, lessEqualImpl: () => y0, lessImpl: () => x0, linSpaceImpl: () => zx, logImpl: () => b0, maxImpl: () => Bx, maximumImpl: () => w0, minimumImpl: () => k0, multiplyImpl: () => eh, negImpl: () => _0, notEqualImpl: () => v0, prodImpl: () => C0, rangeImpl: () => zu, rsqrtImpl: () => S0, sigmoidImpl: () => BD, simpleAbsImpl: () => i0, sliceImpl: () => Bu, sparseFillEmptyRowsImpl: () => Vx, sparseReshapeImpl: () => Wx, sparseSegmentReductionImpl: () => tm, sqrtImpl: () => jD, squaredDifferenceImpl: () => N0, stridedSliceImpl: () => jx, stringNGramsImpl: () => Gx, stringSplitImpl: () => Ux, stringToHashBucketFastImpl: () => Hx, subImpl: () => T0, tileImpl: () => qx, topKImpl: () => Kx, transposeImpl: () => em, uniqueImpl: () => Xx });
function i0(r) {
  let e = new Float32Array(r.length);
  for (let t = 0; t < r.length; ++t)
    e[t] = Math.abs(r[t]);
  return e;
}
var I7 = (r) => {
  let { x: e } = r.inputs, t = r.backend;
  te(e, "abs");
  let n = new Float32Array(b.sizeFromShape(e.shape)), o = t.data.get(e.dataId).values;
  return n = i0(o), t.makeOutput(n, e.shape, "float32");
};
var gD = { kernelName: Vs, backendName: "cpu", kernelFunc: I7 };
function Ye(r) {
  return (e, t, n, o, s) => {
    let a = S.assertAndGetBroadcastShape(e, t), i = a.length, l = b.computeStrides(a), u = b.sizeFromShape(a), c = b.getTypedArrayFromDType(s, u), p = e.length, m = t.length, f = b.computeStrides(e), d = b.computeStrides(t), h = S.getBroadcastDims(e, a), g = S.getBroadcastDims(t, a);
    if (h.length + g.length === 0)
      for (let y = 0; y < c.length; ++y)
        c[y] = r(n[y % n.length], o[y % o.length]);
    else
      for (let y = 0; y < c.length; ++y) {
        let w = b.indexToLoc(y, i, l), x = w.slice(-p);
        h.forEach(($) => x[$] = 0);
        let k = b.locToIndex(x, p, f), C = w.slice(-m);
        g.forEach(($) => C[$] = 0);
        let A = b.locToIndex(C, m, d);
        c[y] = r(n[k], o[A]);
      }
    return [c, a];
  };
}
function dr(r) {
  let { inputs: e, backend: t } = r, { real: n, imag: o } = e, s = t.data.get(n.dataId).values, a = t.data.get(o.dataId).values, i = t.makeTensorInfo(n.shape, "complex64"), l = t.data.get(i.dataId);
  return l.complexTensorInfos = { real: t.makeTensorInfo(n.shape, "float32", s), imag: t.makeTensorInfo(o.shape, "float32", a) }, i;
}
var xD = { kernelName: bc, backendName: "cpu", kernelFunc: dr };
function Zp(r, e, t = "float32") {
  if (t === "complex64") {
    let o = Zp(r, e, "float32"), s = Zp(r, e, "float32");
    return dr({ inputs: { real: o, imag: s }, backend: r });
  }
  let n = b.makeZerosTypedArray(b.sizeFromShape(e), t);
  return r.makeTensorInfo(e, t, n);
}
function Lr(r) {
  let { inputs: e, backend: t } = r, { x: n } = e;
  return t.incRef(n.dataId), { dataId: n.dataId, shape: n.shape, dtype: n.dtype };
}
var yD = { kernelName: to, backendName: "cpu", kernelFunc: Lr };
function yo(r) {
  let { inputs: e, backend: t } = r, { input: n } = e, o = t.data.get(n.dataId).complexTensorInfos.real, s = t.data.get(o.dataId).values;
  return t.makeTensorInfo(o.shape, o.dtype, s);
}
var bD = { kernelName: Lc, backendName: "cpu", kernelFunc: yo };
function bo(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { dtype: s } = n;
  if (s === "complex64") {
    if (o.dtype === "complex64")
      return Lr({ inputs: { x: o }, backend: t });
    let a = Zp(t, o.shape, o.dtype), i = bo({ inputs: { x: o }, backend: t, attrs: { dtype: "float32" } }), l = dr({ inputs: { real: i, imag: a }, backend: t });
    return t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(i), l;
  }
  if (o.dtype === "complex64") {
    let a = yo({ inputs: { input: o }, backend: t }), i = bo({ inputs: { x: a }, backend: t, attrs: { dtype: s } });
    return t.disposeIntermediateTensorInfo(a), i;
  }
  if (!b.hasEncodingLoss(o.dtype, s)) {
    let a = Lr({ inputs: { x: o }, backend: t });
    return { dataId: a.dataId, shape: a.shape, dtype: s };
  }
  if (s === "int32") {
    let a = t.data.get(o.dataId).values, i = Int32Array.from(a);
    return t.makeTensorInfo(o.shape, "int32", i);
  }
  if (s === "bool") {
    let a = t.data.get(o.dataId).values, i = b.toTypedArray([0], o.dtype), [l, u] = Ye((c, p) => c !== p ? 1 : 0)(o.shape, [], a, i, "bool");
    return t.makeTensorInfo(u, "bool", l);
  }
  throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${s}`);
}
var wD = { kernelName: Qn, backendName: "cpu", kernelFunc: bo };
function Qe(r, e, t, n) {
  return t == null ? ({ inputs: o, backend: s }) => {
    let { a, b: i } = o, l = s;
    te([a, i], r);
    let u = l.data.get(a.dataId).values, c = l.data.get(i.dataId).values, p = a.dtype === "string" ? S.fromUint8ToStringArray(u) : u, m = a.dtype === "string" ? S.fromUint8ToStringArray(c) : c, f = n || a.dtype, [d, h] = e(a.shape, i.shape, p, m, f);
    return l.makeTensorInfo(h, f, d);
  } : ({ inputs: o, backend: s }) => {
    let { a, b: i } = o, l = s;
    if (a.dtype === "complex64" || i.dtype === "complex64") {
      let u = bo({ inputs: { x: a }, backend: l, attrs: { dtype: "complex64" } }), c = l.data.get(u.dataId), p = c.complexTensorInfos.real, m = c.complexTensorInfos.imag, f = l.data.get(p.dataId).values, d = l.data.get(m.dataId).values, h = bo({ inputs: { x: i }, backend: l, attrs: { dtype: "complex64" } }), g = l.data.get(h.dataId), y = g.complexTensorInfos.real, w = g.complexTensorInfos.imag, x = l.data.get(y.dataId).values, k = l.data.get(w.dataId).values, [C, A, $] = t(a.shape, i.shape, f, d, x, k), R = l.makeTensorInfo($, "float32", C), P = l.makeTensorInfo($, "float32", A), M = dr({ inputs: { real: R, imag: P }, backend: l });
      return l.disposeIntermediateTensorInfo(u), l.disposeIntermediateTensorInfo(h), l.disposeIntermediateTensorInfo(R), l.disposeIntermediateTensorInfo(P), M;
    } else {
      let u = l.data.get(a.dataId).values, c = l.data.get(i.dataId).values, p = n || a.dtype, [m, f] = e(a.shape, i.shape, u, c, p);
      return l.makeTensorInfo(f, p, m);
    }
  };
}
function Jp(r) {
  return (e, t, n, o, s, a) => {
    let i = S.assertAndGetBroadcastShape(e, t), l = b.sizeFromShape(i), u = i.length, c = b.computeStrides(i), p = b.getTypedArrayFromDType("float32", l), m = b.getTypedArrayFromDType("float32", l), f = S.getBroadcastDims(e, i), d = S.getBroadcastDims(t, i), h = S.mergeRealAndImagArrays(n, o), g = S.mergeRealAndImagArrays(s, a), y = e.length, w = b.computeStrides(e), x = t.length, k = b.computeStrides(t);
    if (f.length + d.length === 0)
      for (let C = 0; C < p.length; C++) {
        let A = C % h.length, $ = C % g.length, R = r(h[A * 2], h[A * 2 + 1], g[$ * 2], g[$ * 2 + 1]);
        p[C] = R.real, m[C] = R.imag;
      }
    else
      for (let C = 0; C < p.length; C++) {
        let A = b.indexToLoc(C, u, c), $ = A.slice(-y);
        f.forEach((W) => $[W] = 0);
        let R = b.locToIndex($, y, w), P = A.slice(-x);
        d.forEach((W) => P[W] = 0);
        let M = b.locToIndex(P, x, k), V = r(h[R * 2], h[R * 2 + 1], g[M * 2], g[M * 2 + 1]);
        p[C] = V.real, m[C] = V.imag;
      }
    return [p, m, i];
  };
}
var a0 = Ye((r, e) => r + e);
var N7 = Jp((r, e, t, n) => ({ real: r + t, imag: e + n }));
var Fa = Qe(Wn, a0, N7);
var kD = { kernelName: Wn, backendName: "cpu", kernelFunc: Fa };
function Qp(r, e, t, n, o) {
  let s = b.sizeFromShape(n), a = b.makeZerosTypedArray(o, t);
  for (let i = 0; i < r.length; i++) {
    let l = r[i];
    if (l < 0)
      throw new Error("Input x must be non-negative!");
    l >= o || (s > 0 ? a[l] += e[i] : a[l] += 1);
  }
  return a;
}
function Px(r, e, t, n = false) {
  let o = r.shape[0], s = r.shape[1], a = Se([o, t], e.dtype);
  for (let i = 0; i < o; i++)
    for (let l = 0; l < s; l++) {
      let u = r.get(i, l);
      if (u < 0)
        throw new Error("Input x must be non-negative!");
      u >= t || (n ? a.set(1, i, u) : e.size > 0 ? a.set(a.get(i, u) + e.get(i, l), i, u) : a.set(a.get(i, u) + 1, i, u));
    }
  return a;
}
function un(r) {
  return (e, t, n) => {
    let o = b.getTypedArrayFromDType(t, e.length);
    for (let s = 0; s < e.length; ++s)
      o[s] = r(e[s], n);
    return o;
  };
}
function De(r, e, t) {
  return ({ inputs: n, attrs: o, backend: s }) => {
    let { x: a } = n;
    if (te(a, r), a.dtype === "string" || t === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    let i = s, l = i.data.get(a.dataId).values, u = b.sizeFromShape(a.shape), c = t || a.dtype, p = b.getArrayFromDType(c, u);
    for (let m = 0; m < u; ++m)
      p[m] = e(l[m], o);
    return i.makeTensorInfo(a.shape, c, p);
  };
}
function wo(r, e, t) {
  return ({ inputs: n, attrs: o, backend: s }) => {
    let { x: a } = n;
    if (te(a, r), a.dtype === "string" || t === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    let i = s, l = i.data.get(a.dataId).values, u = t || a.dtype, c = e(l, u, o);
    return i.makeTensorInfo(a.shape, u, c);
  };
}
var l0 = un((r) => Math.ceil(r));
var T7 = wo(Eo, l0);
var _D = { kernelName: Eo, backendName: "cpu", kernelFunc: T7 };
function Mu(r, e, t, n) {
  let o = b.getArrayFromDType(t, b.sizeFromShape(e));
  if (n && t !== "string") {
    let s = 0;
    r.forEach((a) => {
      let i = b.sizeFromShape(a.shape);
      o.set(a.vals, s), s += i;
    });
  } else {
    let s = 0;
    r.forEach((a) => {
      let i = t === "string" ? S.fromUint8ToStringArray(a.vals) : a.vals, l = 0;
      for (let u = 0; u < a.shape[0]; ++u) {
        let c = u * e[1] + s;
        for (let p = 0; p < a.shape[1]; ++p)
          o[c + p] = i[l++];
      }
      s += a.shape[1];
    });
  }
  return o;
}
var u0 = Ye((r, e) => r === e ? 1 : 0);
var c0 = Qe(zi, u0, null, "bool");
var vD = { kernelName: zi, backendName: "cpu", kernelFunc: c0 };
var p0 = un((r) => Math.exp(r));
var m0 = wo(Lo, p0);
var CD = { kernelName: Lo, backendName: "cpu", kernelFunc: m0 };
var f0 = un((r) => Math.expm1(r));
var E7 = wo(Bi, f0);
var SD = { kernelName: Bi, backendName: "cpu", kernelFunc: E7 };
var d0 = un((r) => Math.floor(r));
var A7 = wo(zo, d0);
var ID = { kernelName: zo, backendName: "cpu", kernelFunc: A7 };
function Mx(r, e, t, n, o, s, a, i, l) {
  let u = Se([n, s], t);
  for (let c = 0; c < n; c++) {
    let p = [], m = 0;
    for (let f = 0; f < o; f++) {
      let d = r[c * o + f];
      m += d * a[f], p.push(d);
    }
    if (m < 0 || m >= l / s)
      throw new Error(`Invalid indices: ${p} does not index into ${i}`);
    for (let f = 0; f < s; f++)
      u.values[c * s + f] = e.get(...e.indexToLoc(m * s + f));
  }
  return u;
}
function Lx(r, e, t) {
  let n = Se(t, r.dtype);
  for (let o = 0; o < n.size; ++o) {
    let a = n.indexToLoc(o).slice(), i = a[0], l = a[2], u = e.locToIndex([i, l]);
    a[2] = e.values[u];
    let c = r.locToIndex(a);
    n.values[o] = r.values[c];
  }
  return n;
}
var h0 = Ye((r, e) => r > e ? 1 : 0);
var $7 = Qe(ji, h0, null, "bool");
var ND = { kernelName: ji, backendName: "cpu", kernelFunc: $7 };
var g0 = Ye((r, e) => r >= e ? 1 : 0);
var D7 = Qe(Wo, g0, null, "bool");
var TD = { kernelName: Wo, backendName: "cpu", kernelFunc: D7 };
var x0 = Ye((r, e) => r < e ? 1 : 0);
var R7 = Qe(qi, x0, null, "bool");
var ED = { kernelName: qi, backendName: "cpu", kernelFunc: R7 };
var y0 = Ye((r, e) => r <= e ? 1 : 0);
var F7 = Qe(Ki, y0, null, "bool");
var AD = { kernelName: Ki, backendName: "cpu", kernelFunc: F7 };
function zx(r, e, t) {
  let n = (e - r) / (t - 1), o = b.makeZerosTypedArray(t, "float32");
  o[0] = r;
  for (let s = 1; s < o.length; s++)
    o[s] = o[s - 1] + n;
  return o;
}
var b0 = un((r) => Math.log(r));
var O7 = wo(Go, b0);
var $D = { kernelName: Go, backendName: "cpu", kernelFunc: O7 };
function Bx(r, e, t, n) {
  let o = b.getTypedArrayFromDType(n, b.sizeFromShape(t));
  for (let s = 0; s < o.length; ++s) {
    let a = s * e, i = r[a];
    for (let l = 0; l < e; ++l) {
      let u = r[a + l];
      (Number.isNaN(u) || u > i) && (i = u);
    }
    o[s] = i;
  }
  return o;
}
var w0 = Ye((r, e) => Math.max(r, e));
var P7 = Qe(Ho, w0);
var DD = { kernelName: Ho, backendName: "cpu", kernelFunc: P7 };
var k0 = Ye((r, e) => Math.min(r, e));
var M7 = Qe(Yo, k0);
var RD = { kernelName: Yo, backendName: "cpu", kernelFunc: M7 };
var eh = Ye((r, e) => r * e);
var L7 = Jp((r, e, t, n) => ({ real: r * t - e * n, imag: r * n + e * t }));
var Lu = Qe(Jo, eh, L7);
var FD = { kernelName: Jo, backendName: "cpu", kernelFunc: Lu };
function _0(r, e, t) {
  let n = b.createScalarValue(-1, t);
  return eh([], e, n, r, t);
}
function z7(r) {
  let { inputs: e, backend: t } = r, { x: n } = e;
  te(n, "neg");
  let o = t.data.get(n.dataId).values, [s, a] = _0(o, n.shape, n.dtype);
  return t.makeTensorInfo(a, n.dtype, s);
}
var OD = { kernelName: Hs, backendName: "cpu", kernelFunc: z7 };
var v0 = Ye((r, e) => r !== e ? 1 : 0);
var B7 = Qe(Ji, v0, null, "bool");
var PD = { kernelName: Ji, backendName: "cpu", kernelFunc: B7 };
function em(r, e, t, n, o) {
  let s = e.length, a = b.sizeFromShape(e), i = b.computeStrides(e), l = b.computeStrides(o), u = b.getTypedArrayFromDType(t, b.sizeFromShape(o));
  for (let c = 0; c < a; ++c) {
    let p = b.indexToLoc(c, s, i), m = new Array(p.length);
    for (let d = 0; d < m.length; d++)
      m[d] = p[n[d]];
    let f = b.locToIndex(m, s, l);
    u[f] = r[c];
  }
  return u;
}
function Jt(r) {
  let { inputs: e, attrs: t, backend: n } = r, { x: o } = e, { perm: s } = t;
  te(o, "transpose");
  let a = o.shape.length, i = new Array(a);
  for (let p = 0; p < i.length; p++)
    i[p] = o.shape[s[p]];
  let l = n.data.get(o.dataId).values, u = em(l, o.shape, o.dtype, s, i);
  return { dataId: n.write(u, i, o.dtype), shape: i, dtype: o.dtype };
}
var MD = { kernelName: ys, backendName: "cpu", kernelFunc: Jt };
function C0(r, e, t, n) {
  let [o, s] = S.computeOutAndReduceShapes(r, n), a = pr(e, "int32"), i = b.makeZerosTypedArray(b.sizeFromShape(o), a), l = b.sizeFromShape(s);
  for (let u = 0; u < i.length; ++u) {
    let c = u * l, p = 1;
    for (let m = 0; m < l; ++m)
      p *= t[c + m];
    i[u] = p;
  }
  return { outVals: i, outShape: o, outDtype: a };
}
function V7(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n;
  te(o, "prod");
  let i = o.shape.length, l = b.parseAxisParam(s, o.shape), u = S.getAxesPermutation(l, i), c = l, p = o, m = [];
  u != null && (p = Jt({ inputs: { x: o }, backend: t, attrs: { perm: u } }), m.push(p), c = S.getInnerMostAxes(c.length, i));
  let f = t.data.get(p.dataId).values, { outVals: d, outShape: h, outDtype: g } = C0(p.shape, p.dtype, f, c), y = h;
  return a && (y = S.expandShapeToKeepDim(h, l)), m.forEach((w) => t.disposeIntermediateTensorInfo(w)), t.makeTensorInfo(y, g, d);
}
var LD = { kernelName: ra, backendName: "cpu", kernelFunc: V7 };
function zu(r, e, t, n) {
  let o = r === e, s = r < e && t < 0, a = e < r && t > 1;
  if (o || s || a)
    return b.makeZerosTypedArray(0, n);
  let i = Math.abs(Math.ceil((e - r) / t)), l = b.makeZerosTypedArray(i, n);
  e < r && t === 1 && (t = -1), l[0] = r;
  for (let u = 1; u < l.length; u++)
    l[u] = l[u - 1] + t;
  return l;
}
var S0 = un((r) => 1 / Math.sqrt(r));
var W7 = wo(ls, S0);
var zD = { kernelName: ls, backendName: "cpu", kernelFunc: W7 };
var BD = un((r) => 1 / (1 + Math.exp(-r)));
var I0 = De(cs, (r) => 1 / (1 + Math.exp(-r)));
var VD = { kernelName: cs, backendName: "cpu", kernelFunc: I0 };
function Bu(r, e, t, n, o) {
  let s = ar.isSliceContinous(n, e, t), a = b.sizeFromShape(t), i = b.computeStrides(n);
  if (s) {
    let p = ar.computeFlatOffset(e, i);
    return o === "string" ? r.slice(p, p + a) : r.subarray(p, p + a);
  }
  let l = o === "string" ? S.fromUint8ToStringArray(r) : r, u = Se(n, o, l), c = Se(t, o);
  for (let p = 0; p < c.size; ++p) {
    let m = c.indexToLoc(p), f = m.map((d, h) => d + e[h]);
    c.set(u.get(...f), ...m);
  }
  return o === "string" ? S.fromStringArrayToUint8(c.values) : c.values;
}
function ko(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { begin: s, size: a } = n;
  te(o, "slice");
  let [i, l] = ar.parseSliceParams(o, s, a);
  ar.assertParamsValid(o, i, l);
  let u = t.data.get(o.dataId).values, c = Bu(u, i, l, o.shape, o.dtype);
  return t.makeTensorInfo(l, o.dtype, c);
}
var WD = { kernelName: Zs, backendName: "cpu", kernelFunc: ko };
function Vx(r, e, t, n, o, s, a) {
  let i = e[0], l = s[0], u = new Array(l), c = new Array(i), p = e[1];
  if (l === 0) {
    if (i !== 0)
      throw new Error(`Received SparseTensor with denseShape[0] = 0 but
         indices.shape[0] = ${i}`);
    let g = b.getArrayFromDType(t, 0), y = b.getArrayFromDType(o, 0);
    return [g, [0, p], y, u, c];
  }
  let m = true, f = 0, d = new Array(l).fill(0);
  for (let g = 0; g < i; ++g) {
    let y = r[g * p];
    if (y < 0)
      throw new Error(`indices(${g}, 0) is invalid: ${y} < 0`);
    if (y >= l)
      throw new Error(`indices(${g}, 0) is invalid: ${y} >= ${l}`);
    ++d[y], m = m && y >= f, f = y;
  }
  let h = true;
  for (let g = 0; g < l; ++g) {
    let y = d[g] === 0;
    u[g] = y, h = h && !y, d[g] = Math.max(d[g], 1), g > 0 && (d[g] += d[g - 1]);
  }
  if (h && m) {
    let g = r, y = n;
    for (let w = 0; w < i; ++w)
      c[w] = w;
    return [g, [i, p], y, u, c];
  } else {
    let g = d[l - 1], y = b.getArrayFromDType(t, g * p), w = b.getArrayFromDType(o, g), x = new Array(l).fill(0);
    for (let k = 0; k < i; ++k) {
      let C = r[k * p], A = x[C], $ = (C === 0 ? 0 : d[C - 1]) + A;
      x[C]++;
      for (let R = 0; R < p; ++R)
        y[$ * p + R] = r[k * p + R];
      w[$] = n[k], c[k] = $;
    }
    for (let k = 0; k < l; ++k)
      if (x[k] === 0) {
        let A = k === 0 ? 0 : d[k - 1];
        y[A * p + 0] = k;
        for (let $ = 1; $ < p; ++$)
          y[A * p + $] = 0;
        w[A] = a;
      }
    return [y, [g, p], w, u, c];
  }
}
function Wx(r, e, t, n, o) {
  let s = b.sizeFromShape(n), a = e[0], i = o.length, l = [], u = 1, c = -1;
  for (let g = 0; g < i; ++g) {
    let y = o[g];
    if (y === -1) {
      if (c !== -1)
        throw new Error(`only one output dimension may be -1, not both ${c} and ${g}`);
      c = g, l.push(1);
    } else {
      if (y < 0)
        throw new Error(`size ${g} must be non-negative, not ${y}`);
      u *= y, l.push(y);
    }
  }
  if (c !== -1) {
    if (u <= 0)
      throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");
    let g = Math.trunc(s / u);
    if (u * g !== s)
      throw new Error(`Input to reshape is a SparseTensor with ${s}
          dense values, but the requested shape requires a multiple of ${u}. inputShape=${n} outputShape= ${l}`);
    l[c] = g;
  }
  let p = b.sizeFromShape(l);
  if (p !== s)
    throw new Error(`Input to reshape is a tensor with ${s} dense values, but the requested shape has ${p}. inputShape=${n} outputShape=${l}`);
  let m = n.length, f = [];
  if (m > 0) {
    f[m - 1] = 1;
    for (let g = m - 2; g >= 0; --g)
      f[g] = f[g + 1] * n[g + 1];
  }
  let d = [];
  if (i > 0) {
    d[i - 1] = 1;
    for (let g = i - 2; g >= 0; --g)
      d[g] = d[g + 1] * l[g + 1];
  }
  let h = b.getArrayFromDType(t, a * i);
  for (let g = 0; g < a; ++g) {
    let y = 0;
    for (let w = 0; w < m; ++w)
      y += r[g * m + w] * f[w];
    for (let w = 0; w < i; ++w)
      h[g * i + w] = Math.trunc(y / d[w]), y %= d[w];
  }
  return [h, [a, i], l];
}
function tm(r, e, t, n, o, s = false, a = 0) {
  let i = n.length;
  if (i !== o.length)
    throw new Error("segmentIds and indices should have same size.");
  let l = [e[0], r.length / e[0]], u = l[1], p = i > 0 ? o[i - 1] + 1 : 0;
  if (p < 0)
    throw new Error("segment ids must be >= 0");
  let m = e.slice();
  m[0] = p;
  let f = m.reduce((x, k) => x * k, 1), d = b.getArrayFromDType(t, f);
  if (i === 0)
    return p > 0 && d.fill(a), [d, m];
  if (p <= 0)
    throw new Error("segment ids must be >= 0");
  let h = 0, g = 1, y = 0, w = o[h];
  for (; ; ) {
    let x = 0;
    if (g < i) {
      if (x = o[g], w === x) {
        ++g;
        continue;
      }
      if (w >= x)
        throw new Error("segment ids are not increasing");
    }
    if (w < 0 || w >= p)
      throw new Error(`Segment id ${w} out of range [0, ${p}), possibly because segmentIds input is not sorted.`);
    w > y && d.fill(a, y * u, w * u);
    for (let k = h; k < g; ++k) {
      let C = n[k];
      if (C < 0 || C >= l[0])
        throw new Error(`Bad: indices[${k}] == ${n[k]} out of range [0, ${l[0]})`);
      for (let A = 0; A < u; A++)
        d[w * u + A] += r[C * u + A];
    }
    if (s)
      for (let k = 0; k < u; k++)
        d[w * u + k] /= g - h;
    if (h = g, ++g, y = w + 1, w = x, g > i)
      break;
  }
  return y < p && d.fill(a, y * u, p * u), [d, m];
}
var jD = un((r) => Math.sqrt(r));
var j7 = De(ps, (r) => Math.sqrt(r));
var GD = { kernelName: ps, backendName: "cpu", kernelFunc: j7 };
var N0 = Ye((r, e) => {
  let t = r - e;
  return t * t;
});
var G7 = Qe(ds, N0);
var UD = { kernelName: ds, backendName: "cpu", kernelFunc: G7 };
function jx(r, e, t, n) {
  let o = Se(r, e.dtype);
  for (let s = 0; s < o.size; s++) {
    let a = o.indexToLoc(s), i = new Array(a.length);
    for (let l = 0; l < i.length; l++)
      i[l] = a[l] * t[l] + n[l];
    o.set(e.get(...i), ...a);
  }
  return o;
}
var HD = class {
  constructor(e, t, n, o, s, a) {
    this.separator = b.encodeString(e), this.nGramWidths = t, this.leftPad = b.encodeString(n), this.rightPad = b.encodeString(o), this.padWidth = s, this.preserveShort = a;
  }
  getPadWidth(e) {
    return Math.min(this.padWidth < 0 ? e - 1 : this.padWidth, e - 1);
  }
  getNumNGrams(e, t) {
    let n = this.getPadWidth(t);
    return Math.max(0, e + 2 * n - t + 1);
  }
  createNGrams(e, t, n, o, s, a) {
    for (let i = 0; i < s; ++i) {
      let l = this.getPadWidth(a), u = Math.max(0, l - i), c = Math.max(0, l - (s - (i + 1))), p = a - (u + c), m = t + (u > 0 ? 0 : i - l), f = 0;
      f += u * this.leftPad.length;
      for (let w = 0; w < p; ++w)
        f += e[m + w].length;
      f += c * this.rightPad.length, f += (u + c + p - 1) * this.separator.length, n[o + i] = new Uint8Array(f);
      let h = n[o + i], g = 0, y = (w) => w.forEach((x) => h[g++] = x);
      for (let w = 0; w < u; ++w)
        y(this.leftPad), y(this.separator);
      for (let w = 0; w < p - 1; ++w)
        y(e[m + w]), y(this.separator);
      if (p > 0) {
        y(e[m + p - 1]);
        for (let w = 0; w < c; ++w)
          y(this.separator), y(this.rightPad);
      } else {
        for (let w = 0; w < c - 1; ++w)
          y(this.rightPad), y(this.separator);
        y(this.rightPad);
      }
    }
  }
  compute(e, t) {
    let n = e.length, o = t.length;
    if (o > 0) {
      let l = t[0];
      if (l !== 0)
        throw new Error(`First split value must be 0, got ${l}`);
      for (let u = 1; u < o; ++u) {
        let c = t[u] >= l;
        if (c = c && t[u] <= n, !c)
          throw new Error(`Invalid split value ${t[u]}, must be in [${l}, ${n}]`);
        l = t[u];
      }
      if (l !== n)
        throw new Error(`Last split value must be data size. Expected ${n}, got ${l}`);
    }
    let s = o - 1, a = b.getArrayFromDType("int32", o);
    if (n === 0 || o === 0) {
      let l = new Array(n);
      for (let u = 0; u <= s; ++u)
        a[u] = 0;
      return [l, a];
    }
    a[0] = 0;
    for (let l = 1; l <= s; ++l) {
      let u = t[l] - t[l - 1], c = 0;
      this.nGramWidths.forEach((p) => {
        c += this.getNumNGrams(u, p);
      }), this.preserveShort && u > 0 && c === 0 && (c = 1), a[l] = a[l - 1] + c;
    }
    let i = new Array(a[s]);
    for (let l = 0; l < s; ++l) {
      let u = t[l], c = a[l];
      if (this.nGramWidths.forEach((p) => {
        let m = t[l + 1] - t[l], f = this.getNumNGrams(m, p);
        this.createNGrams(e, u, i, c, f, p), c += f;
      }), this.preserveShort && c === a[l]) {
        let p = t[l + 1] - t[l];
        if (p === 0)
          continue;
        let m = p + 2 * this.padWidth, f = 1;
        this.createNGrams(e, u, i, c, f, m);
      }
    }
    return [i, a];
  }
};
function Gx(r, e, t, n, o, s, a, i) {
  return new HD(t, n, o, s, a, i).compute(r, e);
}
function U7(r, e, t, n) {
  if (!r.length)
    return;
  if (e.length === 0) {
    for (let s = 0; s < r.length; ++s)
      n.push(r.subarray(s, s + 1));
    return;
  }
  if (e.length === 1) {
    let s = e[0], a = r.indexOf(s);
    for (; a !== -1; ) {
      let i = r.subarray(0, a);
      (!t || i.length !== 0) && n.push(i), r = r.subarray(a + 1), a = r.indexOf(s);
    }
    (!t || r.length !== 0) && n.push(r);
    return;
  }
  let o = 0;
  for (let s = 0; s < r.length + 1; s++)
    if (s === r.length || e.indexOf(r[s]) !== -1) {
      let a = r.subarray(o, s);
      (!t || a.length !== 0) && n.push(a), o = s + 1;
    }
}
function Ux(r, e, t) {
  let n = r.length, o = [], s = 0, a = 0, i = new Array(n);
  for (let m = 0; m < n; ++m) {
    let f = o.length;
    U7(r[m], e, t, o);
    let d = o.length - f;
    i[m] = d, s += d, a = Math.max(a, d);
  }
  let l = b.getArrayFromDType("int32", s * 2), u = new Array(s), c = [n, a], p = 0;
  for (let m = 0; m < n; ++m)
    for (let f = 0; f < i[m]; ++f)
      l[p * 2] = m, l[p * 2 + 1] = f, u[p] = o[p], ++p;
  return [l, u, c];
}
function Hx(r, e) {
  let t = b.getArrayFromDType("int32", r.length);
  for (let n = 0; n < r.length; ++n)
    t[n] = b.fingerPrint64(r[n]).modulo(e).getLowBitsUnsigned();
  return t;
}
var T0 = Ye((r, e) => r - e);
var H7 = Jp((r, e, t, n) => ({ real: r - t, imag: e - n }));
var th = Qe(hs, T0, H7);
var qD = { kernelName: hs, backendName: "cpu", kernelFunc: th };
function qx(r, e) {
  let t = new Array(r.rank);
  for (let o = 0; o < t.length; o++)
    t[o] = r.shape[o] * e[o];
  let n = Se(t, r.dtype);
  for (let o = 0; o < n.values.length; ++o) {
    let s = n.indexToLoc(o), a = new Array(r.rank);
    for (let l = 0; l < a.length; l++)
      a[l] = s[l] % r.shape[l];
    let i = r.locToIndex(a);
    n.values[o] = r.values[i];
  }
  return n;
}
var rh = (r, e) => {
  let t = e.value - r.value;
  return t === 0 ? r.index - e.index : t;
};
function KD(r, e, t = 0, n = r.length - 1) {
  for (; n > t; ) {
    if (n - t > 600) {
      let i = n - t + 1, l = e - t + 1, u = Math.log(i), c = 0.5 * Math.exp(2 * u / 3), p = 0.5 * Math.sqrt(u * c * (i - c) / i) * Math.sign(l - i / 2), m = Math.max(t, Math.floor(e - l * c / i + p)), f = Math.min(n, Math.floor(e + (i - l) * c / i + p));
      KD(r, e, m, f);
    }
    let o = r[e], s = t, a = n;
    for (b.swap(r, t, e), rh(r[n], o) > 0 && b.swap(r, t, n); s < a; ) {
      for (b.swap(r, s, a), s++, a--; rh(r[s], o) < 0; )
        s = s + 1;
      for (; rh(r[a], o) > 0; )
        a = a - 1;
    }
    rh(r[t], o) === 0 ? b.swap(r, t, a) : (a = a + 1, b.swap(r, a, n)), a <= e && (t = a + 1), e <= a && (n = a - 1);
  }
}
function Kx(r, e, t, n, o) {
  let s = e[e.length - 1], [a, i] = [r.length / s, s], l = b.getTypedArrayFromDType(t, a * n), u = b.getTypedArrayFromDType("int32", a * n);
  for (let p = 0; p < a; p++) {
    let m = p * i, f = r.subarray(m, m + i), d = new Array(f.length);
    f.forEach((w, x) => d[x] = { value: w, index: x }), n < d.length && (KD(d, n), d = d.slice(0, n)), o && d.sort(rh);
    let h = p * n, g = l.subarray(h, h + n), y = u.subarray(h, h + n);
    for (let w = 0; w < n; w++)
      g[w] = d[w].value, y[w] = d[w].index;
  }
  let c = e.slice();
  return c[c.length - 1] = n, [Se(c, t, l), Se(c, "int32", u)];
}
function Xx(r, e, t, n) {
  let o = b.parseAxisParam(e, t)[0], s = [1, t[0], 1];
  for (let d = 0; d < o; d++)
    s[0] *= t[d];
  s[1] = t[o];
  for (let d = o + 1; d < t.length; d++)
    s[2] *= t[d];
  let a = {}, i = new Int32Array(t[o]), l = new ct(s, n, r), u = [], c = s[0] === 1 && s[2] === 1;
  for (let d = 0; d < t[o]; d++) {
    let h;
    if (c)
      h = r[d].toString();
    else {
      let g = [];
      for (let y = 0; y < s[0]; y++)
        for (let w = 0; w < s[2]; w++)
          g.push(l.get(y, d, w));
      h = g.join(",");
    }
    if (a[h] !== void 0)
      i[d] = a[h];
    else {
      let g = Object.keys(a).length;
      a[h] = g, i[d] = g, u.push(d);
    }
  }
  let p = s.slice();
  p[1] = Object.keys(a).length;
  let m = new ct(p, n);
  u.forEach((d, h) => {
    for (let g = 0; g < s[0]; g++)
      for (let y = 0; y < s[2]; y++)
        m.set(l.get(g, d, y), g, h, y);
  });
  let f = t.slice();
  return f[o] = p[1], { outputValues: m.values, outputShape: f, indices: i };
}
var q7 = "3.9.0";
ap("cpu", () => new Pu(), 1);
var E0 = De(Mo, (r) => r >= 0 ? r : Math.exp(r) - 1);
var XD = { kernelName: Mo, backendName: "cpu", kernelFunc: E0 };
function A0(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { alpha: s } = n;
  te([o], "leakyRelu");
  let a = b.sizeFromShape(o.shape), i = t.data.get(o.dataId).values, l = b.getTypedArrayFromDType("float32", a);
  for (let u = 0; u < i.length; u++)
    l[u] = i[u] < 0 ? s * i[u] : i[u];
  return t.makeTensorInfo(o.shape, "float32", l);
}
var YD = { kernelName: jo, backendName: "cpu", kernelFunc: A0 };
var K7 = Ye((r, e) => r < 0 ? e * r : r);
function $0(r) {
  let { inputs: e, backend: t } = r, { x: n, alpha: o } = e;
  te([n, o], "prelu");
  let s = t.data.get(n.dataId).values, a = t.data.get(o.dataId).values, [i, l] = K7(n.shape, o.shape, s, a, n.dtype);
  return t.makeTensorInfo(l, n.dtype, i);
}
var ZD = { kernelName: rs, backendName: "cpu", kernelFunc: $0 };
var D0 = De(ns, (r) => Math.max(0, r));
var JD = { kernelName: ns, backendName: "cpu", kernelFunc: D0 };
var R0 = De(ss, (r) => Math.min(Math.max(0, r), 6));
var QD = { kernelName: ss, backendName: "cpu", kernelFunc: R0 };
function rm(r, e, t, n, o) {
  if (t === "linear")
    return Lr({ inputs: { x: e }, backend: r });
  if (t === "relu")
    return D0({ inputs: { x: e }, backend: r });
  if (t === "elu")
    return E0({ inputs: { x: e }, backend: r });
  if (t === "relu6")
    return R0({ inputs: { x: e }, backend: r });
  if (t === "prelu")
    return $0({ inputs: { x: e, alpha: n }, backend: r });
  if (t === "leakyrelu")
    return A0({ inputs: { x: e }, backend: r, attrs: { alpha: o } });
  if (t === "sigmoid")
    return I0({ inputs: { x: e }, backend: r });
  throw new Error(`Activation ${t} has not been implemented for the CPU backend.`);
}
function Ze(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { shape: s } = n, a = b.sizeFromShape(o.shape), i = b.inferFromImplicitShape(s, a), l = b.sizeFromShape(i);
  b.assert(a === l, () => `The new shape (${i}) has ${l} elements and the old shape (${o.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`), t.incRef(o.dataId);
  let u = t.data.get(o.dataId);
  if (u.complexTensorInfos != null) {
    let c = u.complexTensorInfos.real, p = u.complexTensorInfos.imag;
    c.shape = i, p.shape = i;
  }
  return { dataId: o.dataId, shape: i, dtype: o.dtype };
}
var eR = { kernelName: Xs, backendName: "cpu", kernelFunc: Ze };
function F0(r) {
  let { inputs: e, backend: t, attrs: n } = r, { a: o, b: s } = e, { transposeA: a, transposeB: i } = n;
  te([o, s], "matMul");
  let l = o.shape.length, u = s.shape.length, c = a ? o.shape[l - 2] : o.shape[l - 1], p = i ? s.shape[u - 1] : s.shape[u - 2], m = a ? o.shape[l - 1] : o.shape[l - 2], f = i ? s.shape[u - 2] : s.shape[u - 1], d = o.shape.slice(0, -2), h = s.shape.slice(0, -2), g = b.sizeFromShape(d), y = b.sizeFromShape(h), w = g === y || g === 1 || y === 1;
  b.assert(l >= 2 && u >= 2 && w, () => `Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${d}) and (${h}).`);
  let k = (g > y ? o.shape.slice(0, -2) : s.shape.slice(0, -2)).concat([m, f]);
  b.assert(c === p, () => `Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${o.shape} and ${s.shape} and transposeA=${a} and transposeB=${i} must match.`);
  let C = a ? [g, c, m] : [g, m, c], A = i ? [y, f, p] : [y, p, f], $ = Ze({ inputs: { x: o }, backend: t, attrs: { shape: C } }), R = Ze({ inputs: { x: s }, backend: t, attrs: { shape: A } }), P = a ? $.shape[1] : $.shape[2], M = a ? $.shape[2] : $.shape[1], V = i ? R.shape[1] : R.shape[2], W = Math.max(g, y), G = t.data.get($.dataId).values, U = t.data.get(R.dataId).values, H = b.computeStrides($.shape), K = b.computeStrides(R.shape), [re, X, ne] = a ? [H[0], 1, H[1]] : [H[0], H[1], 1], [Q, se, pe] = i ? [1, K[1], K[0]] : [K[1], 1, K[0]], ie = M * V, fe = Se([W, M, V], $.dtype), de = fe.values, ge = t.blockSize;
  for (let we = 0; we < W; we++)
    for (let $e = 0; $e < M; $e += ge)
      for (let Ce = 0; Ce < V; Ce += ge)
        for (let Be = 0; Be < P; Be += ge) {
          let qe = Math.min($e + ge, M), lt = Math.min(Ce + ge, V), It = Math.min(Be + ge, P);
          for (let Nt = $e; Nt < qe; Nt++)
            for (let Ue = Ce; Ue < lt; Ue++) {
              let pt = 0;
              for (let ft = Be; ft < It; ft++) {
                let Bt = Math.min(we, g - 1) * re, In = Math.min(we, y - 1) * pe, Qt = G[Bt + Nt * X + ft * ne], pn = U[ft * Q + Ue * se + In];
                pt += Qt * pn;
              }
              de[we * ie + (Nt * V + Ue)] += pt;
            }
        }
  return t.disposeIntermediateTensorInfo($), t.disposeIntermediateTensorInfo(R), t.makeTensorInfo(k, fe.dtype, fe.values);
}
var tR = { kernelName: To, backendName: "cpu", kernelFunc: F0 };
function X7(r) {
  let { inputs: e, backend: t, attrs: n } = r, { a: o, b: s, bias: a, preluActivationWeights: i } = e, { transposeA: l, transposeB: u, activation: c, leakyreluAlpha: p } = n, m, f, d, h = [];
  m = F0({ inputs: { a: o, b: s }, attrs: { transposeA: l, transposeB: u }, backend: t }), a && (f = Fa({ inputs: { a: m, b: a }, backend: t }), h.push(m), m = f), c && (d = rm(t, m, c, i, p), h.push(m), m = d);
  for (let y of h)
    t.disposeIntermediateTensorInfo(y);
  return m;
}
var rR = { kernelName: ri, backendName: "cpu", kernelFunc: X7 };
var Y7 = De(Ni, (r) => Math.acos(r));
var nR = { kernelName: Ni, backendName: "cpu", kernelFunc: Y7 };
var Z7 = De(Ti, (r) => Math.acosh(r));
var oR = { kernelName: Ti, backendName: "cpu", kernelFunc: Z7 };
function J7(r) {
  let { inputs: e, backend: t } = r, n = e;
  te(e, "addN");
  let o = n.map((i) => t.data.get(i.dataId).values), s = Se(n[0].shape, n[0].dtype), a = s.values;
  for (let i = 0; i < n.length; i++) {
    let l = o[i];
    for (let u = 0; u < a.length; u++)
      a[u] += l[u];
  }
  return t.makeTensorInfo(s.shape, s.dtype, s.values);
}
var sR = { kernelName: So, backendName: "cpu", kernelFunc: J7 };
function Q7(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n;
  te(o, "all");
  let i = b.parseAxisParam(s, o.shape), l = i, u = S.getAxesPermutation(l, o.shape.length), c = o;
  u != null && (c = Jt({ inputs: { x: o }, backend: t, attrs: { perm: u } }), l = S.getInnerMostAxes(l.length, o.shape.length)), S.assertAxesAreInnerMostDims("all", l, c.shape.length);
  let [p, m] = S.computeOutAndReduceShapes(c.shape, l), f = b.sizeFromShape(m), d = b.makeZerosTypedArray(b.sizeFromShape(p), c.dtype), h = t.data.get(c.dataId).values;
  for (let y = 0; y < d.length; ++y) {
    let w = y * f, x = h[w];
    for (let k = 0; k < f; ++k) {
      let C = h[w + k];
      x = x && C;
    }
    d[y] = x;
  }
  u != null && t.disposeIntermediateTensorInfo(c);
  let g = t.makeTensorInfo(p, c.dtype, d);
  if (a) {
    let y = S.expandShapeToKeepDim(p, i), w = Ze({ inputs: { x: g }, backend: t, attrs: { shape: y } });
    return t.disposeIntermediateTensorInfo(g), w;
  }
  return g;
}
var iR = { kernelName: Ei, backendName: "cpu", kernelFunc: Q7 };
function e9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n;
  te(o, "any");
  let i = b.parseAxisParam(s, o.shape), l = i, u = S.getAxesPermutation(l, o.shape.length), c = o;
  u != null && (c = Jt({ inputs: { x: o }, backend: t, attrs: { perm: u } }), l = S.getInnerMostAxes(l.length, o.shape.length)), S.assertAxesAreInnerMostDims("any", l, c.shape.length);
  let [p, m] = S.computeOutAndReduceShapes(c.shape, l), f = b.sizeFromShape(m), d = b.makeZerosTypedArray(b.sizeFromShape(p), c.dtype), h = t.data.get(c.dataId).values;
  for (let y = 0; y < d.length; ++y) {
    let w = y * f, x = h[w];
    for (let k = 0; k < f; ++k) {
      let C = h[w + k];
      x = x || C;
    }
    d[y] = x;
  }
  u != null && t.disposeIntermediateTensorInfo(c);
  let g = t.makeTensorInfo(p, c.dtype, d);
  if (a) {
    let y = S.expandShapeToKeepDim(p, i), w = Ze({ inputs: { x: g }, backend: t, attrs: { shape: y } });
    return t.disposeIntermediateTensorInfo(g), w;
  }
  return g;
}
var aR = { kernelName: Ai, backendName: "cpu", kernelFunc: e9 };
function t9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s } = n;
  te(o, "argMax");
  let a = b.parseAxisParam(s, o.shape), i = S.getAxesPermutation(a, o.shape.length), l = o, u = [];
  i != null && (l = Jt({ inputs: { x: o }, backend: t, attrs: { perm: i } }), u.push(l), a = S.getInnerMostAxes(a.length, l.shape.length)), a = [a[0]], S.assertAxesAreInnerMostDims("argMax", a, l.shape.length);
  let [c, p] = S.computeOutAndReduceShapes(l.shape, a), m = b.sizeFromShape(c), f = b.makeZerosTypedArray(m, "int32"), d = b.sizeFromShape(p), h = t.data.get(l.dataId).values;
  for (let g = 0; g < f.length; ++g) {
    let y = g * d, w = h[y], x = 0;
    for (let k = 0; k < d; ++k) {
      let C = h[y + k];
      C > w && (w = C, x = k);
    }
    f[g] = x;
  }
  return u.forEach((g) => t.disposeIntermediateTensorInfo(g)), t.makeTensorInfo(c, "int32", f);
}
var lR = { kernelName: Io, backendName: "cpu", kernelFunc: t9 };
function r9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s } = n;
  te(o, "argMin");
  let a = b.parseAxisParam(s, o.shape), i = S.getAxesPermutation(a, o.shape.length), l = o, u = [];
  i != null && (l = Jt({ inputs: { x: o }, backend: t, attrs: { perm: i } }), u.push(l), a = S.getInnerMostAxes(a.length, l.shape.length)), a = [a[0]], S.assertAxesAreInnerMostDims("argMin", a, l.shape.length);
  let [c, p] = S.computeOutAndReduceShapes(l.shape, a), m = b.sizeFromShape(c), f = b.makeZerosTypedArray(m, "int32"), d = b.sizeFromShape(p), h = t.data.get(l.dataId).values;
  for (let g = 0; g < f.length; ++g) {
    let y = g * d, w = h[y], x = 0;
    for (let k = 0; k < d; ++k) {
      let C = h[y + k];
      C < w && (w = C, x = k);
    }
    f[g] = x;
  }
  return u.forEach((g) => t.disposeIntermediateTensorInfo(g)), t.makeTensorInfo(c, "int32", f);
}
var uR = { kernelName: Xa, backendName: "cpu", kernelFunc: r9 };
var n9 = De($i, (r) => Math.asin(r));
var cR = { kernelName: $i, backendName: "cpu", kernelFunc: n9 };
var o9 = De(Di, (r) => Math.asinh(r));
var pR = { kernelName: Di, backendName: "cpu", kernelFunc: o9 };
var s9 = De(Ri, (r) => Math.atan(r));
var mR = { kernelName: Ri, backendName: "cpu", kernelFunc: s9 };
var i9 = Ye((r, e) => Math.atan2(r, e));
var a9 = Qe(Oi, i9);
var fR = { kernelName: Oi, backendName: "cpu", kernelFunc: a9 };
var l9 = De(Fi, (r) => Math.atanh(r));
var dR = { kernelName: Fi, backendName: "cpu", kernelFunc: l9 };
function nm(r, e, t, n, o, s) {
  let a = o.strideHeight, i = o.strideWidth, l = o.dilationHeight, u = o.dilationWidth, c = o.effectiveFilterHeight, p = o.effectiveFilterWidth, m = o.padInfo.top, f = o.padInfo.left, d = s === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, h = Se(o.outShape, t), g = h.values, y = o.outShape[1] * o.outShape[2] * o.outShape[3], w = o.outShape[2] * o.outShape[3], x = o.outShape[3];
  for (let k = 0; k < o.batchSize; ++k) {
    let C = k * y, A = k * n[0];
    for (let $ = 0; $ < o.inChannels; ++$)
      for (let R = 0; R < o.outHeight; ++R) {
        let P = R * a - m, M = Math.max(0, P), V = Math.min(o.inHeight, c + P), W = C + R * w;
        for (let G = 0; G < o.outWidth; ++G) {
          let U = G * i - f, H = Math.max(0, U), K = Math.min(o.inWidth, p + U), re = d, X = 0, ne = 0;
          for (let se = M; se < V; se += l) {
            let pe = A + se * n[1];
            for (let ie = H; ie < K; ie += u) {
              let fe = pe + ie * n[2], de = r[fe + $];
              s === "max" && de > re ? re = de : s === "avg" && (X += de, ne++);
            }
            if (isNaN(re))
              break;
          }
          let Q = W + G * x + $;
          g[Q] = s === "avg" ? X / ne : re;
        }
      }
  }
  return h;
}
function Zx(r, e, t, n, o = false, s = false) {
  let a = Se(n.outShape, "int32"), i = n.strideHeight, l = n.strideWidth, u = n.dilationHeight, c = n.dilationWidth, p = n.effectiveFilterHeight, m = n.effectiveFilterWidth, f = n.padInfo.top, d = n.padInfo.left, h = Se(e, t, r);
  for (let g = 0; g < n.batchSize; ++g)
    for (let y = 0; y < n.inChannels; ++y)
      for (let w = 0; w < n.outHeight; ++w) {
        let x = w * i - f, k = x;
        for (; k < 0; )
          k += u;
        let C = Math.min(n.inHeight, p + x);
        for (let A = 0; A < n.outWidth; ++A) {
          let $ = A * l - d, R = $;
          for (; R < 0; )
            R += c;
          let P = Math.min(n.inWidth, m + $), M = Number.NEGATIVE_INFINITY, V = -1;
          for (let W = k; W < C; W += u) {
            let G = W - x;
            for (let U = R; U < P; U += c) {
              let H = U - $, K = h.get(g, W, U, y);
              K > M && (M = K, o ? V = s ? ((g * n.inHeight + W) * n.inWidth + U) * n.inChannels + y : (W * n.inWidth + U) * n.inChannels + y : V = G * m + H);
            }
          }
          a.set(V, g, w, A, y);
        }
      }
  return a;
}
function Jx(r, e, t, n, o, s) {
  let a = o.strideDepth, i = o.strideHeight, l = o.strideWidth, u = o.dilationDepth, c = o.dilationHeight, p = o.dilationWidth, m = o.effectiveFilterDepth, f = o.effectiveFilterHeight, d = o.effectiveFilterWidth, h = o.padInfo.front, g = o.padInfo.top, y = o.padInfo.left, w = s === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, x = Se(o.outShape, t), k = x.values, C = o.outShape[1] * o.outShape[2] * o.outShape[3] * o.outShape[4], A = o.outShape[2] * o.outShape[3] * o.outShape[4], $ = o.outShape[3] * o.outShape[4], R = o.outShape[4];
  for (let P = 0; P < o.batchSize; ++P) {
    let M = P * C, V = P * n[0];
    for (let W = 0; W < o.inChannels; ++W)
      for (let G = 0; G < o.outDepth; ++G) {
        let U = G * a - h, H = U;
        for (; H < 0; )
          H += u;
        let K = Math.min(o.inDepth, m + U), re = M + G * A;
        for (let X = 0; X < o.outHeight; ++X) {
          let ne = X * i - g, Q = ne;
          for (; Q < 0; )
            Q += c;
          let se = Math.min(o.inHeight, f + ne), pe = re + X * $;
          for (let ie = 0; ie < o.outWidth; ++ie) {
            let fe = ie * l - y, de = fe;
            for (; de < 0; )
              de += p;
            let ge = Math.min(o.inWidth, d + fe), we = pe + ie * R, $e = w, Ce = 0, Be = 0;
            for (let lt = H; lt < K; lt += u) {
              let It = V + lt * n[1];
              for (let Nt = Q; Nt < se; Nt += c) {
                let Ue = It + Nt * n[2];
                for (let pt = de; pt < ge; pt += p) {
                  let ft = Ue + pt * n[3], Bt = r[ft + W];
                  if (s === "max" && Bt > $e ? $e = Bt : s === "avg" && (Ce += Bt, Be++), isNaN($e))
                    break;
                }
                if (isNaN($e))
                  break;
              }
              if (isNaN($e))
                break;
            }
            let qe = we + W;
            k[qe] = s === "avg" ? Ce / Be : $e;
          }
        }
      }
  }
  return x;
}
function hR(r, e) {
  let t = Se(e.outShape, "int32"), n = e.strideDepth, o = e.strideHeight, s = e.strideWidth, a = e.dilationDepth, i = e.dilationHeight, l = e.dilationWidth, u = e.effectiveFilterDepth, c = e.effectiveFilterHeight, p = e.effectiveFilterWidth, m = e.padInfo.front, f = e.padInfo.top, d = e.padInfo.left;
  for (let h = 0; h < e.batchSize; ++h)
    for (let g = 0; g < e.inChannels; ++g)
      for (let y = 0; y < e.outDepth; ++y) {
        let w = y * n - m, x = w;
        for (; x < 0; )
          x += a;
        let k = Math.min(e.inDepth, u + w);
        for (let C = 0; C < e.outHeight; ++C) {
          let A = C * o - f, $ = A;
          for (; $ < 0; )
            $ += i;
          let R = Math.min(e.inHeight, c + A);
          for (let P = 0; P < e.outWidth; ++P) {
            let M = P * s - d, V = M;
            for (; V < 0; )
              V += l;
            let W = Math.min(e.inWidth, p + M), G = Number.NEGATIVE_INFINITY, U = -1;
            for (let H = x; H < k; H += a) {
              let K = H - w;
              for (let re = $; re < R; re += i) {
                let X = re - A;
                for (let ne = V; ne < W; ne += l) {
                  let Q = ne - M, se = r.get(h, H, re, ne, g);
                  se >= G && (G = se, U = K * c * p + X * c + Q);
                }
              }
            }
            t.set(U, h, y, C, P, g);
          }
        }
      }
  return t;
}
function u9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e;
  te(o, "avgPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: l } = n, u = 1;
  b.assert(S.eitherStridesOrDilationsAreOne(a, u), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = S.computePool2DInfo(o.shape, s, a, u, i, l), p;
  if (c.filterWidth === 1 && c.filterHeight === 1 && b.arraysEqual(c.inShape, c.outShape))
    p = Lr({ inputs: { x: o }, backend: t });
  else {
    let m = t.data.get(o.dataId).values, f = b.computeStrides(o.shape), d = nm(m, o.shape, o.dtype, f, c, "avg");
    p = t.makeTensorInfo(c.outShape, o.dtype, d.values);
  }
  return p;
}
var gR = { kernelName: No, backendName: "cpu", kernelFunc: u9 };
function c9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { filterSize: s, strides: a, pad: i, dimRoundingMode: l, dataFormat: u } = n;
  te(o, "avgPool3d");
  let c = S.computePool3DInfo(o.shape, s, a, 1, i, l, u), p = t.data.get(o.dataId).values, m = Jx(p, o.shape, o.dtype, b.computeStrides(o.shape), c, "avg");
  return t.makeTensorInfo(m.shape, "float32", m.values);
}
var xR = { kernelName: Ya, backendName: "cpu", kernelFunc: c9 };
function p9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, input: s } = e, { filterSize: a, strides: i, pad: l, dimRoundingMode: u } = n;
  te([o, s], "avgPool3DGrad");
  let c = S.computePool3DInfo(s.shape, a, i, 1, l, u), p = c.strideDepth, m = c.strideHeight, f = c.strideWidth, d = c.filterDepth, h = c.filterHeight, g = c.filterWidth, y = c.dilationDepth, w = c.dilationHeight, x = c.dilationWidth, k = c.effectiveFilterDepth, C = c.effectiveFilterHeight, A = c.effectiveFilterWidth, $ = k - 1 - c.padInfo.front, R = A - 1 - c.padInfo.left, P = C - 1 - c.padInfo.top, M = Se(s.shape, "float32"), V = 1 / (d * h * g), W = t.bufferSync(o);
  for (let G = 0; G < c.batchSize; ++G)
    for (let U = 0; U < c.inChannels; ++U)
      for (let H = 0; H < c.inDepth; ++H)
        for (let K = 0; K < c.inHeight; ++K)
          for (let re = 0; re < c.inWidth; ++re) {
            let X = H - $, ne = K - P, Q = re - R, se = 0;
            for (let pe = 0; pe < k; pe += y) {
              let ie = (X + pe) / p;
              if (!(ie < 0 || ie >= c.outDepth || Math.floor(ie) !== ie))
                for (let fe = 0; fe < C; fe += w) {
                  let de = (ne + fe) / m;
                  if (!(de < 0 || de >= c.outHeight || Math.floor(de) !== de))
                    for (let ge = 0; ge < A; ge += x) {
                      let we = (Q + ge) / f;
                      if (we < 0 || we >= c.outWidth || Math.floor(we) !== we)
                        continue;
                      se += W.get(G, ie, de, we, U);
                    }
                }
            }
            M.set(se * V, G, H, K, re, U);
          }
  return t.makeTensorInfo(M.shape, M.dtype, M.values);
}
var yR = { kernelName: xc, backendName: "cpu", kernelFunc: p9 };
function m9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, input: s } = e, a = s;
  te([o, s], "avgPoolGrad");
  let { filterSize: i, strides: l, pad: u } = n, c = S.computePool2DInfo(a.shape, i, l, 1, u), p = c.strideHeight, m = c.strideWidth, f = c.filterHeight, d = c.filterWidth, h = c.dilationHeight, g = c.dilationWidth, y = c.effectiveFilterHeight, w = c.effectiveFilterWidth, x = w - 1 - c.padInfo.left, k = y - 1 - c.padInfo.top, C = Se(a.shape, "float32"), A = 1 / (f * d), $ = t.data.get(o.dataId).values, R = Se(o.shape, "float32", $);
  for (let P = 0; P < c.batchSize; ++P)
    for (let M = 0; M < c.inChannels; ++M)
      for (let V = 0; V < c.inHeight; ++V)
        for (let W = 0; W < c.inWidth; ++W) {
          let G = V - k, U = W - x, H = 0;
          for (let K = 0; K < y; K += h) {
            let re = (G + K) / p;
            if (!(re < 0 || re >= c.outHeight || Math.floor(re) !== re))
              for (let X = 0; X < w; X += g) {
                let ne = (U + X) / m;
                if (ne < 0 || ne >= c.outWidth || Math.floor(ne) !== ne)
                  continue;
                H += R.get(P, re, ne, M);
              }
          }
          C.set(H * A, P, V, W, M);
        }
  return t.makeTensorInfo(C.shape, C.dtype, C.values);
}
var bR = { kernelName: gc, backendName: "cpu", kernelFunc: m9 };
function f9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, scale: s, offset: a, mean: i, variance: l } = e;
  b.assert(i.shape.length === l.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), b.assert(a == null || i.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), b.assert(s == null || i.shape.length === s.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), te([o, i, l, s, a], "batchNorm");
  let { varianceEpsilon: u } = n;
  u == null && (u = 1e-3);
  let c = t.data.get(o.dataId).values, p = t.data.get(i.dataId).values, m = t.data.get(l.dataId).values, f = s ? t.data.get(s.dataId).values : new Float32Array([1]), d = a ? t.data.get(a.dataId).values : new Float32Array([0]), h = new Float32Array(c.length), g = d.length, y = f.length, w = m.length, x = p.length, k = 0, C = 0, A = 0, $ = 0;
  for (let R = 0; R < c.length; ++R)
    h[R] = d[k++] + (c[R] - p[C++]) * f[A++] / Math.sqrt(m[$++] + u), k >= g && (k = 0), C >= x && (C = 0), A >= y && (A = 0), $ >= w && ($ = 0);
  return t.makeTensorInfo(o.shape, o.dtype, h);
}
var wR = { kernelName: Vo, backendName: "cpu", kernelFunc: f9 };
function d9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { blockShape: s, crops: a } = n;
  te([o], "batchToSpaceND");
  let i = s.reduce((y, w) => y * w), l = S.getReshaped(o.shape, s, i), u = S.getPermuted(l.length, s.length), c = S.getReshapedPermuted(o.shape, s, i), p = S.getSliceBeginCoords(a, s.length), m = S.getSliceSize(c, a, s.length), f = Ze({ inputs: { x: o }, backend: t, attrs: { shape: l } }), d = Jt({ inputs: { x: f }, backend: t, attrs: { perm: u } }), h = Ze({ inputs: { x: d }, backend: t, attrs: { shape: c } }), g = ko({ inputs: { x: h }, backend: t, attrs: { begin: p, size: m } });
  return t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(h), g;
}
var kR = { kernelName: Ws, backendName: "cpu", kernelFunc: d9 };
function h9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, weights: s } = e, { size: a } = n, i = t.data.get(o.dataId).values, l = t.data.get(s.dataId).values, u = Qp(i, l, s.dtype, s.shape, a);
  return t.makeTensorInfo([a], s.dtype, u);
}
var _R = { kernelName: yc, backendName: "cpu", kernelFunc: h9 };
function g9(r) {
  let { inputs: e, backend: t } = r, { s0: n, s1: o } = e, s = t.data.get(n.dataId).values, a = t.data.get(o.dataId).values, i = S.assertAndGetBroadcastShape(Array.from(s), Array.from(a));
  return t.makeTensorInfo([i.length], "int32", Int32Array.from(i));
}
var vR = { kernelName: Zh, backendName: "cpu", kernelFunc: g9 };
var x9 = De(eo, (r, e) => {
  let t = e;
  return r > t.clipValueMax ? t.clipValueMax : r < t.clipValueMin ? t.clipValueMin : r;
});
var CR = { kernelName: eo, backendName: "cpu", kernelFunc: x9 };
var y9 = (r) => {
  let { x: e } = r.inputs, t = r.backend, n = new Float32Array(b.sizeFromShape(e.shape)), o = t.data.get(e.dataId), s = o.complexTensorInfos.real, a = o.complexTensorInfos.imag, i = t.data.get(s.dataId).values, l = t.data.get(a.dataId).values;
  for (let u = 0; u < i.length; u++) {
    let c = i[u], p = l[u];
    n[u] = Math.hypot(c, p);
  }
  return t.makeOutput(n, e.shape, "float32");
};
var SR = { kernelName: Za, backendName: "cpu", kernelFunc: y9 };
function yi(r) {
  let { inputs: e, backend: t } = r, { input: n } = e, o = t.data.get(n.dataId).complexTensorInfos.imag, s = t.data.get(o.dataId).values;
  return t.makeTensorInfo(o.shape, o.dtype, s);
}
var IR = { kernelName: $c, backendName: "cpu", kernelFunc: yi };
function Tl(r) {
  let { inputs: e, backend: t, attrs: n } = r, { axis: o } = n, s = b.parseAxisParam(o, e[0].shape)[0], a = S.computeOutShape(e.map((h) => h.shape), s);
  if (b.sizeFromShape(a) === 0)
    return t.makeTensorInfo(a, e[0].dtype, []);
  let i = e.filter((h) => b.sizeFromShape(h.shape) > 0);
  if (i.length === 1)
    return Lr({ inputs: { x: i[0] }, backend: t });
  let l = i.map((h) => h.shape);
  if (S.assertParamsConsistent(l, s), i[0].dtype === "complex64") {
    let h = i.map((k) => yo({ inputs: { input: k }, backend: t })), g = i.map((k) => yi({ inputs: { input: k }, backend: t })), y = Tl({ inputs: h, backend: t, attrs: { axis: s } }), w = Tl({ inputs: g, backend: t, attrs: { axis: s } }), x = dr({ inputs: { real: y, imag: w }, backend: t });
    return h.forEach((k) => t.disposeIntermediateTensorInfo(k)), g.forEach((k) => t.disposeIntermediateTensorInfo(k)), t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(w), x;
  }
  let u = i.map((h) => {
    let g = b.sizeFromShape(h.shape.slice(s));
    return Ze({ inputs: { x: h }, backend: t, attrs: { shape: [-1, g] } });
  }), c = u.map((h) => ({ vals: t.data.get(h.dataId).values, shape: h.shape }));
  a = S.computeOutShape(u.map((h) => h.shape), 1);
  let p = u[0].shape[0] === 1, m = Mu(c, a, e[0].dtype, p), f = S.computeOutShape(i.map((h) => h.shape), s), d = t.makeTensorInfo(f, e[0].dtype, m);
  return u.forEach((h) => t.disposeIntermediateTensorInfo(h)), d;
}
var NR = { kernelName: js, backendName: "cpu", kernelFunc: Tl };
function O0(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s } = e, { strides: a, pad: i, dataFormat: l, dilations: u, dimRoundingMode: c } = n;
  te([o, s], "conv2d");
  let p = S.convertConv2DDataFormat(l), m = S.computeConv2DInfo(o.shape, s.shape, a, u, i, c, false, p), f = m.filterHeight, d = m.filterWidth, h = m.dilationHeight, g = m.dilationWidth, y = m.padInfo.left, w = m.padInfo.top, x = m.dataFormat === "channelsLast", k = new ct(m.outShape, o.dtype), C = b.computeStrides(o.shape), A = b.computeStrides(s.shape), $ = C[0], R = x ? C[1] : C[2], P = x ? C[2] : 1, M = x ? 1 : C[1], V = k.strides[0], W = x ? k.strides[1] : k.strides[2], G = x ? k.strides[2] : 1, U = x ? 1 : k.strides[1], H = t.data.get(o.dataId).values, K = t.data.get(s.dataId).values, re = k.values;
  for (let X = 0; X < m.batchSize; ++X) {
    let ne = X * $, Q = X * V;
    for (let se = 0; se < m.outHeight; ++se) {
      let pe = Q + se * W, ie = se * m.strideHeight - w;
      for (let fe = 0; fe < f; ++fe) {
        let de = ie + fe * h;
        if (de < 0 || de >= m.inHeight)
          continue;
        let ge = fe * A[0], we = ne + de * R;
        for (let $e = 0; $e < m.outWidth; ++$e) {
          let Ce = pe + $e * G, Be = $e * m.strideWidth - y;
          for (let qe = 0; qe < d; ++qe) {
            let lt = Be + qe * g;
            if (lt < 0 || lt >= m.inWidth)
              continue;
            let It = ge + qe * A[1], Nt = we + lt * P, Ue = It;
            for (let pt = 0; pt < m.inChannels; ++pt) {
              let ft = H[Nt + pt * M];
              for (let Bt = 0; Bt < m.outChannels; ++Bt)
                re[Ce + Bt * U] += ft * K[Ue + Bt];
              Ue += m.outChannels;
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(k.shape, k.dtype, re);
}
var TR = { kernelName: Ao, backendName: "cpu", kernelFunc: O0 };
function b9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, dy: s } = e, { strides: a, pad: i, dataFormat: l, dimRoundingMode: u, filterShape: c } = n;
  te([o, s], "conv2dBackpropFilter");
  let p = S.convertConv2DDataFormat(l), m = S.computeConv2DInfo(o.shape, c, a, 1, i, u, false, p), { strideHeight: f, strideWidth: d, filterHeight: h, filterWidth: g } = m, y = m.dataFormat === "channelsLast", w = new ct(m.filterShape, "float32"), x = m.padInfo.left, k = m.padInfo.top, C = t.data.get(o.dataId).values, A = t.data.get(s.dataId).values, $ = new ct(o.shape, o.dtype, C), R = new ct(s.shape, s.dtype, A);
  for (let P = 0; P < h; ++P) {
    let M = Math.max(0, Math.ceil((k - P) / f)), V = Math.min(m.outHeight, (m.inHeight + k - P) / f);
    for (let W = 0; W < g; ++W) {
      let G = Math.max(0, Math.ceil((x - W) / d)), U = Math.min(m.outWidth, (m.inWidth + x - W) / d);
      for (let H = 0; H < m.inChannels; ++H)
        for (let K = 0; K < m.outChannels; ++K) {
          let re = 0;
          for (let X = 0; X < m.batchSize; ++X)
            for (let ne = M; ne < V; ++ne) {
              let Q = P + ne * f - k;
              for (let se = G; se < U; ++se) {
                let pe = W + se * d - x;
                y ? re += $.get(X, Q, pe, H) * R.get(X, ne, se, K) : re += $.get(X, H, Q, pe) * R.get(X, K, ne, se);
              }
            }
          w.set(re, P, W, H, K);
        }
    }
  }
  return t.makeTensorInfo(w.shape, w.dtype, w.values);
}
var ER = { kernelName: wc, backendName: "cpu", kernelFunc: b9 };
function w9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, filter: s } = e, { inputShape: a, strides: i, pad: l, dataFormat: u, dimRoundingMode: c } = n;
  te([o, s], "conv2dBackpropInput");
  let p = b.computeStrides(s.shape), m = b.computeStrides(o.shape), f = S.convertConv2DDataFormat(u), d = S.computeConv2DInfo(a, s.shape, i, 1, l, c, false, f), h = new ct(d.inShape, "float32"), g = h.values, y = t.data.get(o.dataId).values, w = t.data.get(s.dataId).values, [x, k, C] = p, { batchSize: A, filterHeight: $, filterWidth: R, inChannels: P, inHeight: M, inWidth: V, outChannels: W, outHeight: G, outWidth: U, strideHeight: H, strideWidth: K } = d;
  f = d.dataFormat;
  let re = $ - 1 - d.padInfo.top, X = R - 1 - d.padInfo.left, ne = f === "channelsLast", Q = h.strides[0], se = ne ? h.strides[1] : h.strides[2], pe = ne ? h.strides[2] : 1, ie = ne ? 1 : h.strides[1], fe = m[0], de = ne ? m[1] : m[2], ge = ne ? m[2] : 1, we = ne ? 1 : m[1];
  for (let $e = 0; $e < A; ++$e)
    for (let Ce = 0; Ce < P; ++Ce)
      for (let Be = 0; Be < M; ++Be) {
        let qe = Be - re, lt = Math.max(0, Math.ceil(qe / H)), It = Math.min(G, ($ + qe) / H);
        for (let Nt = 0; Nt < V; ++Nt) {
          let Ue = Nt - X, pt = Math.max(0, Math.ceil(Ue / K)), ft = Math.min(U, (R + Ue) / K), Bt = 0;
          for (let Qt = lt; Qt < It; ++Qt) {
            let pn = Qt * H - qe;
            for (let Br = pt; Br < ft; ++Br) {
              let Zn = Br * K - Ue, ur = fe * $e + de * Qt + ge * Br, Nn = x * ($ - 1 - pn) + k * (R - 1 - Zn) + C * Ce;
              for (let Hr = 0; Hr < W; ++Hr) {
                let wr = y[ur + we * Hr], mn = w[Nn + Hr];
                Bt += wr * mn;
              }
            }
          }
          let In = Q * $e + se * Be + pe * Nt + ie * Ce;
          g[In] = Bt;
        }
      }
  return t.makeTensorInfo(h.shape, h.dtype, h.values);
}
var AR = { kernelName: $o, backendName: "cpu", kernelFunc: w9 };
function k9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s } = e, { strides: a, pad: i, dilations: l } = n;
  te([o, s], "conv3d");
  let u = S.computeConv3DInfo(o.shape, s.shape, a, l, i), { filterDepth: c, filterHeight: p, filterWidth: m, dilationDepth: f, dilationHeight: d, dilationWidth: h, padInfo: g } = u, y = g.front, w = g.left, x = g.top, k = new ct(u.outShape, o.dtype), C = t.data.get(o.dataId).values, A = t.data.get(s.dataId).values, $ = k.values, R = b.computeStrides(o.shape), P = b.computeStrides(s.shape);
  for (let M = 0; M < u.batchSize; ++M) {
    let V = M * R[0], W = M * k.strides[0];
    for (let G = 0; G < u.outDepth; ++G) {
      let U = W + G * k.strides[1], H = G * u.strideDepth - y;
      for (let K = 0; K < c; ++K) {
        let re = H + K * f;
        if (re < 0 || re >= u.inDepth)
          continue;
        let X = K * P[0], ne = V + re * R[1];
        for (let Q = 0; Q < u.outHeight; ++Q) {
          let se = U + Q * k.strides[2], pe = Q * u.strideHeight - x;
          for (let ie = 0; ie < p; ++ie) {
            let fe = pe + ie * d;
            if (fe < 0 || fe >= u.inHeight)
              continue;
            let de = X + ie * P[1], ge = ne + fe * R[2];
            for (let we = 0; we < u.outWidth; ++we) {
              let $e = se + we * u.outChannels, Ce = we * u.strideWidth - w;
              for (let Be = 0; Be < m; ++Be) {
                let qe = Ce + Be * h;
                if (qe < 0 || qe >= u.inWidth)
                  continue;
                let lt = de + Be * P[2], It = ge + qe * u.inChannels, Nt = lt;
                for (let Ue = 0; Ue < u.inChannels; ++Ue) {
                  let pt = C[It + Ue];
                  for (let ft = 0; ft < u.outChannels; ++ft)
                    $[$e + ft] += pt * A[Nt + ft];
                  Nt += u.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(k.shape, k.dtype, k.values);
}
var $R = { kernelName: Ja, backendName: "cpu", kernelFunc: k9 };
function _9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, dy: s } = e, { strides: a, pad: i, filterShape: l } = n;
  te([o, s], "conv3dBackpropFilterV2");
  let u = b.computeStrides(o.shape), c = b.computeStrides(s.shape), p = S.computeConv3DInfo(o.shape, l, a, 1, i), m = p.strideDepth, f = p.strideHeight, d = p.strideWidth, h = p.filterDepth, g = p.filterHeight, y = p.filterWidth, w = new ct(p.filterShape, "float32"), x = w.values, [k, C, A, $] = w.strides, R = t.data.get(s.dataId).values, [P, M, V, W] = c, G = t.data.get(o.dataId).values, [U, H, K, re] = u, X = p.padInfo.front, ne = p.padInfo.left, Q = p.padInfo.top;
  for (let se = 0; se < h; ++se) {
    let pe = Math.max(0, Math.ceil((X - se) / m)), ie = Math.min(p.outDepth, (p.inDepth + X - se) / m), fe = se * k;
    for (let de = 0; de < g; ++de) {
      let ge = Math.max(0, Math.ceil((Q - de) / f)), we = Math.min(p.outHeight, (p.inHeight + Q - de) / f), $e = de * C + fe;
      for (let Ce = 0; Ce < y; ++Ce) {
        let Be = Math.max(0, Math.ceil((ne - Ce) / d)), qe = Math.min(p.outWidth, (p.inWidth + ne - Ce) / d), lt = Ce * A + $e;
        for (let It = 0; It < p.inChannels; ++It) {
          let Nt = It * $ + lt;
          for (let Ue = 0; Ue < p.outChannels; ++Ue) {
            let pt = 0;
            for (let ft = 0; ft < p.batchSize; ++ft) {
              let Bt = ft * U, In = ft * P;
              for (let Qt = pe; Qt < ie; ++Qt) {
                let Br = (se + Qt * m - X) * H + Bt, Zn = Qt * M + In;
                for (let ur = ge; ur < we; ++ur) {
                  let Hr = (de + ur * f - Q) * K + Br, wr = ur * V + Zn;
                  for (let mn = Be; mn < qe; ++mn) {
                    let Ol = (Ce + mn * d - ne) * re + Hr, Wa = mn * W + wr;
                    pt += G[Ol + It] * R[Wa + Ue];
                  }
                }
              }
            }
            x[Nt + Ue] = pt;
          }
        }
      }
    }
  }
  return t.makeTensorInfo(w.shape, w.dtype, w.values);
}
var DR = { kernelName: kc, backendName: "cpu", kernelFunc: _9 };
function v9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, filter: s } = e, { pad: a, strides: i, inputShape: l } = n;
  te([o], "conv3dBackpropInputV2");
  let u = b.computeStrides(o.shape), c = b.computeStrides(s.shape), p = S.computeConv3DInfo(l, s.shape, i, 1, a), m = new ct(p.inShape, "float32"), f = m.values, [d, h, g, y] = m.strides, w = t.data.get(o.dataId).values, [x, k, C, A] = u, $ = t.data.get(s.dataId).values, [R, P, M, V] = c, { batchSize: W, filterDepth: G, filterHeight: U, filterWidth: H, inChannels: K, inDepth: re, inHeight: X, inWidth: ne, outChannels: Q, outDepth: se, outHeight: pe, outWidth: ie, strideDepth: fe, strideHeight: de, strideWidth: ge } = p, we = G - 1 - p.padInfo.front, $e = U - 1 - p.padInfo.top, Ce = H - 1 - p.padInfo.left;
  for (let Be = 0; Be < W; ++Be)
    for (let qe = 0; qe < K; ++qe)
      for (let lt = 0; lt < re; ++lt) {
        let It = lt - we, Nt = Math.max(0, Math.ceil(It / fe)), Ue = Math.min(se, (G + It) / fe);
        for (let pt = 0; pt < X; ++pt) {
          let ft = pt - $e, Bt = Math.max(0, Math.ceil(ft / de)), In = Math.min(pe, (U + ft) / de);
          for (let Qt = 0; Qt < ne; ++Qt) {
            let pn = Qt - Ce, Br = Math.max(0, Math.ceil(pn / ge)), Zn = Math.min(ie, (H + pn) / ge), ur = 0;
            for (let Nn = Nt; Nn < Ue; ++Nn) {
              let Hr = Nn * fe - It;
              for (let wr = Bt; wr < In; ++wr) {
                let mn = wr * de - ft;
                for (let zn = Br; zn < Zn; ++zn) {
                  let Ol = zn * ge - pn, Wa = x * Be + k * Nn + C * wr + A * zn, Ms = R * (G - 1 - Hr) + P * (U - 1 - mn) + M * (H - 1 - Ol) + V * qe;
                  for (let _i = 0; _i < Q; ++_i) {
                    let gm = w[Wa + _i], Pl = $[Ms + _i];
                    ur += gm * Pl;
                  }
                }
              }
            }
            f[d * Be + h * lt + g * pt + y * Qt + qe] = ur;
          }
        }
      }
  return t.makeTensorInfo(m.shape, m.dtype, m.values);
}
var RR = { kernelName: _c, backendName: "cpu", kernelFunc: v9 };
var C9 = De(Do, (r) => Math.cos(r));
var FR = { kernelName: Do, backendName: "cpu", kernelFunc: C9 };
var S9 = De(Ro, (r) => Math.cosh(r));
var OR = { kernelName: Ro, backendName: "cpu", kernelFunc: S9 };
function I9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { image: o, boxes: s, boxInd: a } = e, { cropSize: i, method: l, extrapolationValue: u } = n, [c, p, m, f] = o.shape, d = s.shape[0], [h, g] = i, y = Se([d, h, g, f], "float32"), w = t.data.get(s.dataId).values, x = t.data.get(a.dataId).values, k = t.data.get(o.dataId).values, C = b.computeStrides(o.shape), A = b.computeStrides(y.shape);
  for (let $ = 0; $ < d; $++) {
    let R = $ * 4, P = w[R], M = w[R + 1], V = w[R + 2], W = w[R + 3], G = x[$];
    if (G >= c)
      continue;
    let U = h > 1 ? (V - P) * (p - 1) / (h - 1) : 0, H = g > 1 ? (W - M) * (m - 1) / (g - 1) : 0;
    for (let K = 0; K < h; K++) {
      let re = h > 1 ? P * (p - 1) + K * U : 0.5 * (P + V) * (p - 1);
      if (re < 0 || re > p - 1) {
        for (let X = 0; X < g; X++)
          for (let ne = 0; ne < f; ne++) {
            let Q = ne + X * A[2] + K * A[1] + $ * A[0];
            y.values[Q] = u;
          }
        continue;
      }
      if (l === "bilinear") {
        let X = Math.floor(re), ne = Math.ceil(re), Q = re - X;
        for (let se = 0; se < g; se++) {
          let pe = g > 1 ? M * (m - 1) + se * H : 0.5 * (M + W) * (m - 1);
          if (pe < 0 || pe > m - 1) {
            for (let ge = 0; ge < f; ge++) {
              let we = ge + se * A[2] + K * A[1] + $ * A[0];
              y.values[we] = u;
            }
            continue;
          }
          let ie = Math.floor(pe), fe = Math.ceil(pe), de = pe - ie;
          for (let ge = 0; ge < f; ge++) {
            let we = ge + ie * C[2] + X * C[1] + G * C[0], $e = k[we];
            we = ge + fe * C[2] + X * C[1] + G * C[0];
            let Ce = k[we];
            we = ge + ie * C[2] + ne * C[1] + G * C[0];
            let Be = k[we];
            we = ge + fe * C[2] + ne * C[1] + G * C[0];
            let qe = k[we], lt = $e + (Ce - $e) * de, It = Be + (qe - Be) * de;
            we = ge + se * A[2] + K * A[1] + $ * A[0], y.values[we] = lt + (It - lt) * Q;
          }
        }
      } else
        for (let X = 0; X < g; ++X) {
          let ne = g > 1 ? M * (m - 1) + X * H : 0.5 * (M + W) * (m - 1);
          if (ne < 0 || ne > m - 1) {
            for (let pe = 0; pe < f; pe++) {
              let ie = pe + X * A[2] + K * A[1] + $ * A[0];
              y.values[ie] = u;
            }
            continue;
          }
          let Q = Math.round(ne), se = Math.round(re);
          for (let pe = 0; pe < f; pe++) {
            let ie = pe + Q * C[2] + se * C[1] + G * C[0], fe = pe + X * A[2] + K * A[1] + $ * A[0];
            y.values[fe] = k[ie];
          }
        }
    }
  }
  return t.makeTensorInfo(y.shape, y.dtype, y.values);
}
var PR = { kernelName: Pi, backendName: "cpu", kernelFunc: I9 };
function N9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, exclusive: a, reverse: i } = n;
  te(o, "cumsum");
  let l = S.getAxesPermutation([s], o.shape.length), u = o;
  l != null && (u = Jt({ inputs: { x: o }, backend: t, attrs: { perm: l } }));
  let c = S.getInnerMostAxes(1, o.shape.length)[0];
  if (c !== u.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${c}`);
  let p = pr(u.dtype, "int32"), m = b.makeZerosTypedArray(b.sizeFromShape(u.shape), p), f = t.data.get(u.dataId).values, d = u.shape[u.shape.length - 1], h = i ? (y, w) => y + d - w - 1 : (y, w) => y + w;
  for (let y = 0; y < f.length; y += d)
    for (let w = 0; w < d; w++) {
      let x = h(y, w);
      if (w === 0)
        m[x] = a ? 0 : f[x];
      else {
        let k = h(y, w - 1);
        m[x] = a ? f[k] + m[k] : f[x] + m[k];
      }
    }
  let g = t.makeTensorInfo(u.shape, p, m);
  if (l != null) {
    let y = S.getUndoAxesPermutation(l), w = Jt({ inputs: { x: g }, backend: t, attrs: { perm: y } });
    return t.disposeIntermediateTensorInfo(g), t.disposeIntermediateTensorInfo(u), w;
  }
  return g;
}
var MR = { kernelName: Fo, backendName: "cpu", kernelFunc: N9 };
function T9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, weights: s } = e, { size: a, binaryOutput: i } = n;
  if (o.shape.length === 1) {
    let l = t.data.get(o.dataId).values, u = t.data.get(s.dataId).values, c = Qp(l, u, s.dtype, s.shape, a);
    return t.makeTensorInfo([a], s.dtype, c);
  } else if (o.shape.length === 2) {
    let l = t.bufferSync(o), u = t.bufferSync(s), c = Px(l, u, a, i);
    return t.makeTensorInfo(c.shape, s.dtype, c.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`);
}
var LR = { kernelName: vc, backendName: "cpu", kernelFunc: T9 };
function E9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { blockSize: s, dataFormat: a } = n;
  b.assert(a === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`), b.assert(s > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${s}`);
  let i = o.shape[0], l = o.shape[1], u = o.shape[2], c = o.shape[3], p = l * s, m = u * s, f = c / (s * s), d = t.data.get(o.dataId).values, h = new Float32Array(i * p * m * f), g = 0;
  for (let y = 0; y < i; ++y)
    for (let w = 0; w < p; ++w) {
      let x = Math.floor(w / s), k = w % s;
      for (let C = 0; C < m; ++C) {
        let A = Math.floor(C / s), $ = C % s, R = (k * s + $) * f;
        for (let P = 0; P < f; ++P) {
          let V = P + R + c * (A + u * (x + l * y));
          h[g++] = d[V];
        }
      }
    }
  return t.makeTensorInfo([i, p, m, f], o.dtype, h);
}
var zR = { kernelName: Mi, backendName: "cpu", kernelFunc: E9 };
function P0(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s } = e, { strides: a, pad: i, dilations: l, dimRoundingMode: u } = n;
  te([o, s], "depthwiseConv2DNative");
  let c = b.computeStrides(o.shape), p = b.computeStrides(s.shape), m = l;
  m == null && (m = [1, 1]), b.assert(S.eitherStridesOrDilationsAreOne(a, m), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${m}'`);
  let f = S.computeConv2DInfo(o.shape, s.shape, a, m, i, u, true), { filterHeight: d, filterWidth: h, dilationHeight: g, dilationWidth: y, padInfo: w } = f, x = w.left, k = w.top, C = f.outChannels / f.inChannels, A = new ct(f.outShape, o.dtype), $ = t.data.get(o.dataId).values, R = t.data.get(s.dataId).values, P = A.values;
  for (let M = 0; M < f.batchSize; ++M) {
    let V = M * c[0], W = M * A.strides[0];
    for (let G = 0; G < f.outHeight; ++G) {
      let U = W + G * A.strides[1], H = G * f.strideHeight - k;
      for (let K = 0; K < d; ++K) {
        let re = H + K * g;
        if (re < 0 || re >= f.inHeight)
          continue;
        let X = K * p[0], ne = V + re * c[1];
        for (let Q = 0; Q < f.outWidth; ++Q) {
          let se = U + Q * A.strides[2], pe = Q * f.strideWidth - x;
          for (let ie = 0; ie < h; ++ie) {
            let fe = pe + ie * y;
            if (fe < 0 || fe >= f.inWidth)
              continue;
            let de = X + ie * p[1], ge = ne + fe * f.inChannels, we = se, $e = de;
            for (let Ce = 0; Ce < f.inChannels; ++Ce) {
              let Be = $[ge + Ce];
              for (let qe = 0; qe < C; ++qe)
                P[we + qe] += Be * R[$e + qe];
              we += C, $e += C;
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(A.shape, A.dtype, A.values);
}
var BR = { kernelName: Oo, backendName: "cpu", kernelFunc: P0 };
function A9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, dy: s } = e, { strides: a, dilations: i, pad: l, dimRoundingMode: u, filterShape: c } = n;
  te([o, s], "depthwiseConv2dNativeBackpropFilter");
  let p = S.computeConv2DInfo(o.shape, c, a, i, l, u, true), { strideHeight: m, strideWidth: f, filterHeight: d, filterWidth: h } = p, g = new ct(p.filterShape, "float32"), y = p.padInfo.left, w = p.padInfo.top, x = p.outChannels / p.inChannels, k = t.data.get(o.dataId).values, C = new ct(o.shape, o.dtype, k), A = t.data.get(s.dataId).values, $ = new ct(s.shape, s.dtype, A);
  for (let R = 0; R < d; ++R) {
    let P = Math.max(0, Math.ceil((w - R) / m)), M = Math.min(p.outHeight, (p.inHeight + w - R) / m);
    for (let V = 0; V < h; ++V) {
      let W = Math.max(0, Math.ceil((y - V) / f)), G = Math.min(p.outWidth, (p.inWidth + y - V) / f);
      for (let U = 0; U < p.outChannels; ++U) {
        let H = Math.trunc(U / x), K = U % x, re = 0;
        for (let X = 0; X < p.batchSize; ++X)
          for (let ne = P; ne < M; ++ne) {
            let Q = R + ne * m - w;
            for (let se = W; se < G; ++se) {
              let pe = V + se * f - y;
              re += C.get(X, Q, pe, H) * $.get(X, ne, se, U);
            }
          }
        g.set(re, R, V, H, K);
      }
    }
  }
  return t.makeTensorInfo(g.shape, g.dtype, g.values);
}
var VR = { kernelName: Cc, backendName: "cpu", kernelFunc: A9 };
function $9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, filter: s } = e, { strides: a, dilations: i, pad: l, dimRoundingMode: u, inputShape: c } = n;
  te([o, s], "depthwiseConv2DNativeBackpropInput");
  let p = b.computeStrides(o.shape), m = b.computeStrides(s.shape), f = S.computeConv2DInfo(c, s.shape, a, i, l, u, true), d = new ct(f.inShape, "float32"), h = d.values, [g, y, w] = d.strides, x = t.data.get(o.dataId).values, [k, C, A] = p, $ = t.data.get(s.dataId).values, [R, P, M] = m, { batchSize: V, filterHeight: W, filterWidth: G, inChannels: U, inHeight: H, inWidth: K, outChannels: re, outHeight: X, outWidth: ne, strideHeight: Q, strideWidth: se } = f, pe = W - 1 - f.padInfo.top, ie = G - 1 - f.padInfo.left, fe = re / U;
  for (let de = 0; de < V; ++de)
    for (let ge = 0; ge < U; ++ge)
      for (let we = 0; we < H; ++we) {
        let $e = we - pe, Ce = Math.max(0, Math.ceil($e / Q)), Be = Math.min(X, (W + $e) / Q);
        for (let qe = 0; qe < K; ++qe) {
          let lt = qe - ie, It = Math.max(0, Math.ceil(lt / se)), Nt = Math.min(ne, (G + lt) / se), Ue = 0;
          for (let pt = Ce; pt < Be; ++pt) {
            let ft = pt * Q - $e;
            for (let Bt = It; Bt < Nt; ++Bt) {
              let In = Bt * se - lt, Qt = k * de + C * pt + A * Bt, pn = R * (W - 1 - ft) + P * (G - 1 - In) + M * ge;
              for (let Br = 0; Br < fe; ++Br) {
                let Zn = ge * fe + Br, ur = x[Qt + Zn], Nn = $[pn + Br];
                Ue += ur * Nn;
              }
            }
          }
          h[g * de + y * we + w * qe + ge] = Ue;
        }
      }
  return t.makeTensorInfo(d.shape, d.dtype, d.values);
}
var WR = { kernelName: Sc, backendName: "cpu", kernelFunc: $9 };
function D9(r) {
  let { inputs: e, backend: t } = r, { x: n } = e, o = b.sizeFromShape(n.shape), s = t.data.get(n.dataId).values, a = Se([o, o], n.dtype), i = a.values;
  for (let u = 0; u < s.length; u++)
    i[u * o + u] = s[u];
  let l = [...n.shape, ...n.shape];
  return t.makeTensorInfo(l, a.dtype, a.values);
}
var jR = { kernelName: Ic, backendName: "cpu", kernelFunc: D9 };
var GR = { kernelName: Qa, backendName: "cpu", kernelFunc: ({ inputs: r, backend: e, attrs: t }) => {
  let { x: n, filter: o } = r, { strides: s, pad: a, dilations: i } = t, l = e, u = l.data.get(n.dataId).values, c = n.shape.length, p = l.data.get(o.dataId).values, m = o.shape.length, { batchSize: f, inHeight: d, inWidth: h, inChannels: g, outHeight: y, outWidth: w, padInfo: x, strideHeight: k, strideWidth: C, filterHeight: A, filterWidth: $, dilationHeight: R, dilationWidth: P, outShape: M } = S.computeDilation2DInfo(n.shape, o.shape, s, a, "NHWC", i), V = b.sizeFromShape(M), W = M.length, G = b.getArrayFromDType(n.dtype, V);
  for (let H = 0; H < f; ++H)
    for (let K = 0; K < y; ++K) {
      let re = K * k - x.top;
      for (let X = 0; X < w; ++X) {
        let ne = X * C - x.left;
        for (let Q = 0; Q < g; ++Q) {
          let se = Number.MIN_SAFE_INTEGER;
          for (let ie = 0; ie < A; ++ie) {
            let fe = re + ie * R;
            if (fe >= 0 && fe < d)
              for (let de = 0; de < $; ++de) {
                let ge = ne + de * P;
                if (ge >= 0 && ge < h) {
                  let we = b.locToIndex([H, fe, ge, Q], c, b.computeStrides(n.shape)), $e = b.locToIndex([ie, de, Q], m, b.computeStrides(o.shape)), Ce = u[we] + p[$e];
                  Ce > se && (se = Ce);
                }
              }
          }
          let pe = b.locToIndex([H, K, X, Q], W, b.computeStrides(M));
          G[pe] = se;
        }
      }
    }
  return { dataId: l.write(b.toTypedArray(G, n.dtype), M, n.dtype), shape: M, dtype: n.dtype };
} };
var UR = { kernelName: Dm, backendName: "cpu", kernelFunc: ({ inputs: r, backend: e, attrs: t }) => {
  let { x: n, filter: o, dy: s } = r, { strides: a, pad: i, dilations: l } = t, u = e, c = b.toNestedArray(n.shape, u.data.get(n.dataId).values), p = b.toNestedArray(o.shape, u.data.get(o.dataId).values), { batchSize: m, inHeight: f, inWidth: d, inChannels: h, outHeight: g, outWidth: y, padInfo: w, strideHeight: x, strideWidth: k, filterHeight: C, filterWidth: A, dilationHeight: $, dilationWidth: R, outShape: P } = S.computeDilation2DInfo(n.shape, o.shape, a, i, "NHWC", l);
  b.assert(s.rank === P.length, () => `Error in ${Dm}, dy must have the same rank as output ${P.length}, but got ${s.rank}`);
  let M = b.toNestedArray(P, u.data.get(s.dataId).values), V = b.makeZerosNestedTypedArray(o.shape, o.dtype);
  for (let G = 0; G < m; ++G)
    for (let U = 0; U < g; ++U) {
      let H = U * x - w.top;
      for (let K = 0; K < y; ++K) {
        let re = K * k - w.left;
        for (let X = 0; X < h; ++X) {
          let ne = Number.MIN_SAFE_INTEGER, Q = 0, se = 0;
          for (let pe = 0; pe < C; ++pe) {
            let ie = H + pe * $;
            if (ie >= 0 && ie < f)
              for (let fe = 0; fe < A; ++fe) {
                let de = re + fe * R;
                if (de >= 0 && de < d) {
                  let ge = c[G][ie][de][X] + p[pe][fe][X];
                  ge > ne && (ne = ge, Q = pe, se = fe);
                }
              }
          }
          V[Q][se][X] += M[G][U][K][X];
        }
      }
    }
  return { dataId: u.write(b.toTypedArray(V, n.dtype), o.shape, o.dtype), shape: o.shape, dtype: o.dtype };
} };
var HR = { kernelName: $m, backendName: "cpu", kernelFunc: ({ inputs: r, backend: e, attrs: t }) => {
  let { x: n, filter: o, dy: s } = r, { strides: a, pad: i, dilations: l } = t, u = e, c = b.toNestedArray(n.shape, u.data.get(n.dataId).values), p = b.toNestedArray(o.shape, u.data.get(o.dataId).values), { batchSize: m, inHeight: f, inWidth: d, inChannels: h, outHeight: g, outWidth: y, padInfo: w, strideHeight: x, strideWidth: k, filterHeight: C, filterWidth: A, dilationHeight: $, dilationWidth: R, outShape: P } = S.computeDilation2DInfo(n.shape, o.shape, a, i, "NHWC", l);
  b.assert(s.rank === P.length, () => `Error in ${$m}, dy must have the same rank as output ${P.length}, but got ${s.rank}`);
  let M = b.toNestedArray(P, u.data.get(s.dataId).values), V = b.makeZerosNestedTypedArray(n.shape, n.dtype);
  for (let G = 0; G < m; ++G)
    for (let U = 0; U < g; ++U) {
      let H = U * x - w.top;
      for (let K = 0; K < y; ++K) {
        let re = K * k - w.left;
        for (let X = 0; X < h; ++X) {
          let ne = Number.MIN_SAFE_INTEGER, Q = H < 0 ? 0 : H, se = re < 0 ? 0 : re;
          for (let pe = 0; pe < C; ++pe) {
            let ie = H + pe * $;
            if (ie >= 0 && ie < f)
              for (let fe = 0; fe < A; ++fe) {
                let de = re + fe * R;
                if (de >= 0 && de < d) {
                  let ge = c[G][ie][de][X] + p[pe][fe][X];
                  ge > ne && (ne = ge, Q = ie, se = de);
                }
              }
          }
          V[G][Q][se][X] += M[G][U][K][X];
        }
      }
    }
  return { dataId: u.write(b.toTypedArray(V, n.dtype), n.shape, n.dtype), shape: n.shape, dtype: n.dtype };
} };
function Oa(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n;
  te(o, "sum");
  let i;
  o.dtype === "bool" ? i = bo({ inputs: { x: o }, backend: t, attrs: { dtype: "int32" } }) : i = Lr({ inputs: { x: o }, backend: t });
  let l = i.shape.length, u = b.parseAxisParam(s, i.shape), c = S.getAxesPermutation(u, l), p = u, m = i;
  c != null && (m = Jt({ inputs: { x: i }, backend: t, attrs: { perm: c } }), p = S.getInnerMostAxes(p.length, l)), S.assertAxesAreInnerMostDims("sum", p, m.shape.length);
  let [f, d] = S.computeOutAndReduceShapes(m.shape, p), h = S.upcastType(m.dtype, "int32"), g = Zp(t, f, h), y = b.sizeFromShape(d), w = t.data.get(g.dataId).values, x = t.data.get(m.dataId).values;
  for (let k = 0; k < w.length; ++k) {
    let C = k * y, A = 0;
    for (let $ = 0; $ < y; ++$)
      A += x[C + $];
    w[k] = A;
  }
  if (a) {
    let k = S.expandShapeToKeepDim(g.shape, u), C = g;
    g = Ze({ inputs: { x: g }, backend: t, attrs: { shape: k } }), t.disposeIntermediateTensorInfo(C);
  }
  return t.disposeIntermediateTensorInfo(i), c != null && t.disposeIntermediateTensorInfo(m), g;
}
var qR = { kernelName: ms, backendName: "cpu", kernelFunc: Oa };
function R9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { equation: o } = n, s = e, { allDims: a, summedDims: i, idDims: l } = S.decodeEinsumEquation(o, s.length);
  S.checkEinsumDimSizes(a.length, l, s);
  let { path: u, steps: c } = S.getEinsumComputePath(i, l), p = c.length, m = null, f = a.length, d = [];
  for (let h = 0; h < p; ++h) {
    for (let g of c[h]) {
      let { permutationIndices: y, expandDims: w } = S.getEinsumPermutation(f, l[g]), x;
      S.isIdentityPermutation(y) ? x = s[g] : (x = Jt({ inputs: { x: s[g] }, backend: t, attrs: { perm: y } }), d.push(x));
      let k = x.shape.slice();
      for (let C = 0; C < w.length; ++C)
        k.splice(w[C], 0, 1);
      b.arraysEqual(x.shape, k) || (x = Ze({ inputs: { x }, backend: t, attrs: { shape: k } }), d.push(x)), m === null ? m = x : (m = Lu({ inputs: { a: x, b: m }, backend: t }), d.push(m));
    }
    h < p - 1 && (u[h] >= 0 && (m = Oa({ inputs: { x: m }, backend: t, attrs: { axis: u[h] - (a.length - f), keepDims: false } }), d.push(m)), f--);
  }
  for (let h of d)
    h !== m && t.disposeIntermediateTensorInfo(h);
  return m;
}
var KR = { kernelName: Nc, backendName: "cpu", kernelFunc: R9 };
function F9(r) {
  let { inputs: e, backend: t } = r, { dy: n, y: o } = e;
  te([n, o], "eluGrad");
  let s = new Float32Array(b.sizeFromShape(o.shape)), a = t.data.get(o.dataId).values, i = t.data.get(n.dataId).values;
  for (let l = 0; l < a.length; ++l) {
    let u = a[l];
    u >= 1 ? s[l] = i[l] : s[l] = i[l] * (u + 1);
  }
  return t.makeTensorInfo(o.shape, "float32", s);
}
var XR = { kernelName: Tc, backendName: "cpu", kernelFunc: F9 };
var O9 = S.ERF_P;
var P9 = S.ERF_A1;
var M9 = S.ERF_A2;
var L9 = S.ERF_A3;
var z9 = S.ERF_A4;
var B9 = S.ERF_A5;
var V9 = De(Li, (r) => {
  let e = Math.sign(r), t = Math.abs(r), n = 1 / (1 + O9 * t);
  return e * (1 - ((((B9 * n + z9) * n + L9) * n + M9) * n + P9) * n * Math.exp(-t * t));
});
var YR = { kernelName: Li, backendName: "cpu", kernelFunc: V9 };
function om(r) {
  let { inputs: e, backend: t, attrs: n } = r, { input: o } = e, { dim: s } = n, a = o.shape.length, i = o.shape.slice(), l = s;
  return s < 0 && (b.assert(-(a + 1) <= s, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), l = a + s + 1), i.splice(l, 0, 1), Ze({ inputs: { x: o }, backend: t, attrs: { shape: i } });
}
var ZR = { kernelName: Gs, backendName: "cpu", kernelFunc: om };
var W9 = Ye((r, e) => r / e);
var nh = Qe(Po, W9);
var oh = { kernelName: Po, backendName: "cpu", kernelFunc: nh };
function Qx(r, e, t) {
  let n = r.shape, o = n[0], s = n[1], a = t.data.get(r.dataId), i = a.complexTensorInfos.real, l = a.complexTensorInfos.imag, u = [o, s], c = b.sizeFromShape(u), p = b.getTypedArrayFromDType("float32", c), m = b.getTypedArrayFromDType("float32", c);
  for (let g = 0; g < o; g++) {
    let y = ko({ inputs: { x: i }, backend: t, attrs: { begin: [g, 0], size: [1, s] } }), w = ko({ inputs: { x: l }, backend: t, attrs: { begin: [g, 0], size: [1, s] } }), x = dr({ inputs: { real: y, imag: w }, backend: t }), { real: k, imag: C } = j9(x, e, t), A = S.mergeRealAndImagArrays(k, C);
    for (let $ = 0; $ < s; $++) {
      let R = S.getComplexWithIndex(A, $);
      p[g * s + $] = R.real, m[g * s + $] = R.imag;
    }
    t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(w), t.disposeIntermediateTensorInfo(x);
  }
  let f = t.makeTensorInfo(u, "float32", p), d = t.makeTensorInfo(u, "float32", m), h = dr({ inputs: { real: f, imag: d }, backend: t });
  return t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(d), h;
}
function j9(r, e, t) {
  let n = b.sizeFromShape(r.shape), o = t.data.get(r.dataId), s = t.data.get(o.complexTensorInfos.real.dataId).values, a = t.data.get(o.complexTensorInfos.imag.dataId).values;
  if (G9(n)) {
    let i = M0(s, a, n, e, t), l = [r.shape[0], r.shape[1]];
    if (e) {
      let u = t.makeTensorInfo(l, "float32", i.real), c = t.makeTensorInfo(l, "float32", i.imag), p = t.makeTensorInfo([], "float32", b.createScalarValue(n, "float32")), m = Lr({ inputs: { x: p }, backend: t }), f = oh.kernelFunc({ inputs: { a: u, b: p }, backend: t }), d = oh.kernelFunc({ inputs: { a: c, b: m }, backend: t }), h = t.data.get(f.dataId).values, g = t.data.get(d.dataId).values;
      return t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(d), { real: h, imag: g };
    }
    return i;
  } else {
    let i = S.mergeRealAndImagArrays(s, a), l = U9(i, n, e);
    return S.splitRealAndImagArrays(l);
  }
}
function G9(r) {
  return (r & r - 1) == 0;
}
function M0(r, e, t, n, o) {
  if (t === 1)
    return { real: r, imag: e };
  let s = S.mergeRealAndImagArrays(r, e), a = t / 2, i = S.complexWithEvenIndex(s), l = i.real, u = i.imag, c = [l.length], p = o.makeTensorInfo(c, "float32", l), m = o.makeTensorInfo(c, "float32", u), f = dr({ inputs: { real: p, imag: m }, backend: o }), d = S.complexWithOddIndex(s), h = d.real, g = d.imag, y = [h.length], w = o.makeTensorInfo(y, "float32", h), x = o.makeTensorInfo(y, "float32", g), k = dr({ inputs: { real: w, imag: x }, backend: o }), C = M0(l, u, a, n, o), A = C.real, $ = C.imag, R = [A.length], P = o.makeTensorInfo(R, "float32", A), M = o.makeTensorInfo(R, "float32", $), V = dr({ inputs: { real: P, imag: M }, backend: o }), W = M0(h, g, a, n, o), G = W.real, U = W.imag, H = [G.length], K = o.makeTensorInfo(H, "float32", G), re = o.makeTensorInfo(H, "float32", U), X = dr({ inputs: { real: K, imag: re }, backend: o }), ne = S.exponents(t, n), Q = [ne.real.length], se = o.makeTensorInfo(Q, "float32", ne.real), pe = o.makeTensorInfo(Q, "float32", ne.imag), ie = dr({ inputs: { real: se, imag: pe }, backend: o }), fe = Lu({ inputs: { a: ie, b: X }, backend: o }), de = Fa({ inputs: { a: V, b: fe }, backend: o }), ge = th({ inputs: { a: V, b: fe }, backend: o }), we = yo({ inputs: { input: de }, backend: o }), $e = yo({ inputs: { input: ge }, backend: o }), Ce = yi({ inputs: { input: de }, backend: o }), Be = yi({ inputs: { input: ge }, backend: o }), qe = Tl({ inputs: [we, $e], backend: o, attrs: { axis: 0 } }), lt = Tl({ inputs: [Ce, Be], backend: o, attrs: { axis: 0 } }), It = o.data.get(qe.dataId).values, Nt = o.data.get(lt.dataId).values;
  return o.disposeIntermediateTensorInfo(p), o.disposeIntermediateTensorInfo(m), o.disposeIntermediateTensorInfo(f), o.disposeIntermediateTensorInfo(w), o.disposeIntermediateTensorInfo(x), o.disposeIntermediateTensorInfo(k), o.disposeIntermediateTensorInfo(P), o.disposeIntermediateTensorInfo(M), o.disposeIntermediateTensorInfo(V), o.disposeIntermediateTensorInfo(K), o.disposeIntermediateTensorInfo(re), o.disposeIntermediateTensorInfo(X), o.disposeIntermediateTensorInfo(se), o.disposeIntermediateTensorInfo(pe), o.disposeIntermediateTensorInfo(ie), o.disposeIntermediateTensorInfo(fe), o.disposeIntermediateTensorInfo(de), o.disposeIntermediateTensorInfo(ge), o.disposeIntermediateTensorInfo(we), o.disposeIntermediateTensorInfo(Ce), o.disposeIntermediateTensorInfo($e), o.disposeIntermediateTensorInfo(Be), o.disposeIntermediateTensorInfo(qe), o.disposeIntermediateTensorInfo(lt), { real: It, imag: Nt };
}
function U9(r, e, t) {
  let n = new Float32Array(e * 2);
  for (let o = 0; o < e; o++) {
    let s = 0, a = 0;
    for (let i = 0; i < e; i++) {
      let l = S.exponent(o * i, e, t), u = S.getComplexWithIndex(r, i);
      s += u.real * l.real - u.imag * l.imag, a += u.real * l.imag + u.imag * l.real;
    }
    t && (s /= e, a /= e), S.assignToTypedArray(n, s, a, o);
  }
  return n;
}
function H9(r) {
  let { inputs: e, backend: t } = r, { input: n } = e, o = b.sizeFromShape(n.shape), s = n.shape[n.shape.length - 1], a = o / s, i = Ze({ inputs: { x: n }, backend: t, attrs: { shape: [a, s] } }), l = Qx(i, false, t), u = Ze({ inputs: { x: l }, backend: t, attrs: { shape: n.shape } });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(l), u;
}
var JR = { kernelName: Ec, backendName: "cpu", kernelFunc: H9 };
function sh(r) {
  let { backend: e, attrs: t } = r, { shape: n, value: o, dtype: s } = t, a = s || b.inferDtype(o), i = b.getArrayFromDType(a, b.sizeFromShape(n));
  return q9(i, o, a), e.makeTensorInfo(n, a, i);
}
var QR = { kernelName: el, backendName: "cpu", kernelFunc: sh };
function q9(r, e, t) {
  r.fill(e);
}
var eF = { kernelName: Vi, backendName: "cpu", kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
  let { image: n } = r, o = t, s = b.getTypedArrayFromDType(n.dtype, b.sizeFromShape(n.shape)), [a, i, l, u] = n.shape, c = o.data.get(n.dataId).values;
  for (let m = 0; m < a; m++) {
    let f = m * l * i * u;
    for (let d = 0; d < i; d++) {
      let h = d * (l * u);
      for (let g = 0; g < l; g++) {
        let y = g * u;
        for (let w = 0; w < u; w++) {
          let x = Math.round(l - g - 1), k = f + h + y + w, C = c[k];
          if (x >= 0 && x < l) {
            let A = x * u, $ = f + h + A + w;
            C = c[$];
          }
          s[k] = C;
        }
      }
    }
  }
  return { dataId: o.write(s, n.shape, n.dtype), shape: n.shape, dtype: n.dtype };
} };
var K9 = Ye((r, e) => Math.floor(r / e));
var X9 = Qe(Bo, K9, null, "int32");
var tF = { kernelName: Bo, backendName: "cpu", kernelFunc: X9 };
function Y9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s, bias: a, preluActivationWeights: i } = e, { strides: l, pad: u, dataFormat: c, dilations: p, dimRoundingMode: m, activation: f, leakyreluAlpha: d } = n, h = O0({ inputs: { x: o, filter: s }, backend: t, attrs: { strides: l, pad: u, dataFormat: c, dilations: p, dimRoundingMode: m } });
  if (a) {
    let g = h;
    h = Fa({ inputs: { a: h, b: a }, backend: t }), t.disposeIntermediateTensorInfo(g);
  }
  if (f) {
    let g = h;
    h = rm(t, h, f, i, d), t.disposeIntermediateTensorInfo(g);
  }
  return h;
}
var rF = { kernelName: ni, backendName: "cpu", kernelFunc: Y9 };
function Z9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s, bias: a, preluActivationWeights: i } = e, { strides: l, pad: u, dataFormat: c, dilations: p, dimRoundingMode: m, activation: f, leakyreluAlpha: d } = n, h = P0({ inputs: { x: o, filter: s }, backend: t, attrs: { strides: l, pad: u, dataFormat: c, dilations: p, dimRoundingMode: m } });
  if (a) {
    let g = h;
    h = Fa({ inputs: { a: h, b: a }, backend: t }), t.disposeIntermediateTensorInfo(g);
  }
  if (f) {
    let g = h;
    h = rm(t, h, f, i, d), t.disposeIntermediateTensorInfo(g);
  }
  return h;
}
var nF = { kernelName: oi, backendName: "cpu", kernelFunc: Z9 };
function J9(r) {
  let { inputs: e, backend: t } = r, { params: n, indices: o } = e, s = b.sizeFromShape(n.shape), a = o.shape, i = a[a.length - 1], [l, u, c, p] = S.prepareAndValidate(n, o);
  if (u === 0)
    return t.makeTensorInfo(l, n.dtype, []);
  let m = t.data.get(o.dataId).values, f = t.bufferSync(n), d = Mx(m, f, n.dtype, u, i, c, p, n.shape, s);
  return t.makeTensorInfo(l, n.dtype, d.values);
}
var oF = { kernelName: Wi, backendName: "cpu", kernelFunc: J9 };
function Q9(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, indices: s } = e, { axis: a, batchDims: i } = n;
  te([o, s], "gatherV2");
  let l = i;
  i == null && (l = 0);
  let u = b.sizeFromShape(s.shape), c = b.parseAxisParam(a, o.shape)[0], p = S.segment_util.collectGatherOpShapeInfo(o, s, c, l), m = Ze({ inputs: { x: o }, backend: t, attrs: { shape: [p.batchSize, p.outerSize, p.dimSize, p.sliceSize] } }), f = Ze({ inputs: { x: s }, backend: t, attrs: { shape: [p.batchSize, u / p.batchSize] } }), d = [p.batchSize, p.outerSize, u / p.batchSize, p.sliceSize], h = t.bufferSync(f), g = t.bufferSync(m), y = Lx(g, h, d);
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(f), t.makeTensorInfo(p.outputShape, y.dtype, y.values);
}
var sF = { kernelName: Us, backendName: "cpu", kernelFunc: Q9 };
function eY(r) {
  let { inputs: e, backend: t } = r, { input: n } = e, o = b.sizeFromShape(n.shape), s = n.shape[n.shape.length - 1], a = o / s, i = Ze({ inputs: { x: n }, backend: t, attrs: { shape: [a, s] } }), l = Qx(i, true, t), u = Ze({ inputs: { x: l }, backend: t, attrs: { shape: n.shape } });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(l), u;
}
var iF = { kernelName: Ac, backendName: "cpu", kernelFunc: eY };
var tY = De(Gi, (r) => Number.isFinite(r) ? 1 : 0, "bool");
var aF = { kernelName: Gi, backendName: "cpu", kernelFunc: tY };
var rY = De(Ui, (r) => Math.abs(r) === 1 / 0 ? 1 : 0, "bool");
var lF = { kernelName: Ui, backendName: "cpu", kernelFunc: rY };
var nY = De(Hi, (r) => Number.isNaN(r) ? 1 : 0, "bool");
var uF = { kernelName: Hi, backendName: "cpu", kernelFunc: nY };
function oY(r) {
  let { backend: e, attrs: t } = r, { start: n, stop: o, num: s } = t, a = zx(n, o, s);
  return e.makeTensorInfo([a.length], "float32", a);
}
var cF = { kernelName: Dc, backendName: "cpu", kernelFunc: oY };
var sY = De(Xi, (r) => Math.log1p(r));
var pF = { kernelName: Xi, backendName: "cpu", kernelFunc: sY };
var iY = Ye((r, e) => r && e);
var aY = Qe(Yi, iY, null, "bool");
var mF = { kernelName: Yi, backendName: "cpu", kernelFunc: aY };
var lY = De(jl, (r) => r ? 0 : 1, "bool");
var fF = { kernelName: jl, backendName: "cpu", kernelFunc: lY };
var uY = Ye((r, e) => r || e);
var cY = Qe(Gl, uY, null, "bool");
var dF = { kernelName: Gl, backendName: "cpu", kernelFunc: cY };
function pY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { depthRadius: s, bias: a, alpha: i, beta: l } = n;
  te(o, "LRN");
  let u = o.shape[3], c = u - 1, p = t.data.get(o.dataId).values, m = b.sizeFromShape(o.shape), f = new Float32Array(m);
  function d(h) {
    let g = h % u, y = h - g + Math.max(0, g - s), w = h - g + Math.min(g + s, c), x = 0;
    for (; y <= w; y++) {
      let k = p[y];
      x += k * k;
    }
    return x;
  }
  for (let h = 0; h < m; h++) {
    let g = d(h), y = p[h] * Math.pow(a + i * g, -l);
    f[h] = y;
  }
  return t.makeTensorInfo(o.shape, o.dtype, f);
}
var hF = { kernelName: tl, backendName: "cpu", kernelFunc: pY };
function mY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, y: s, dy: a } = e, { depthRadius: i, bias: l, alpha: u, beta: c } = n;
  te(a, "LRNGrad");
  let p = b.sizeFromShape(a.shape), m = a.shape[3], f = t.data.get(a.dataId).values, d = t.data.get(o.dataId).values, h = t.data.get(s.dataId).values, g = new Float32Array(p), y = p;
  for (let w = 0; w < y; w++) {
    let x = w % m, k = w - x + Math.max(0, x - i), C = w - x + Math.min(m, x + i + 1), A = 0;
    for (let $ = k; $ < C; $++)
      A += Math.pow(d[$], 2);
    A = u * A + l;
    for (let $ = k; $ < C; $++) {
      let R = -2 * u * c * d[$] * h[w] / A;
      w === $ && (R += Math.pow(A, -c)), R *= f[w], g[$] += R;
    }
  }
  return t.makeTensorInfo(a.shape, o.dtype, g);
}
var gF = { kernelName: Rc, backendName: "cpu", kernelFunc: mY };
function L0(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { reductionIndices: s, keepDims: a } = n, i = t, l = o.shape, u = l.length, c = b.parseAxisParam(s, l), p = c, m = S.getAxesPermutation(p, u), f = i.data.get(o.dataId).values;
  if (m != null) {
    let k = new Array(u);
    for (let C = 0; C < k.length; C++)
      k[C] = l[m[C]];
    f = em(f, l, o.dtype, m, k), p = S.getInnerMostAxes(p.length, u), l = k;
  }
  te(o, "max"), S.assertAxesAreInnerMostDims("max", p, u);
  let [d, h] = S.computeOutAndReduceShapes(l, p), g = b.sizeFromShape(h), y = Bx(f, g, d, o.dtype), w = i.write(y, d, o.dtype), x = d;
  return a && (x = S.expandShapeToKeepDim(d, c)), { dataId: w, shape: x, dtype: o.dtype };
}
var xF = { kernelName: Uo, backendName: "cpu", kernelFunc: L0 };
function fY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e;
  te(o, "maxPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: l } = n, u = 1;
  b.assert(S.eitherStridesOrDilationsAreOne(a, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = S.computePool2DInfo(o.shape, s, a, u, i, l), p;
  if (c.filterWidth === 1 && c.filterHeight === 1 && b.arraysEqual(c.inShape, c.outShape))
    p = Lr({ inputs: { x: o }, backend: t });
  else {
    let m = t.data.get(o.dataId).values, f = b.computeStrides(o.shape), d = nm(m, o.shape, o.dtype, f, c, "max");
    p = t.makeTensorInfo(c.outShape, o.dtype, d.values);
  }
  return p;
}
var yF = { kernelName: qo, backendName: "cpu", kernelFunc: fY };
function dY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { filterSize: s, strides: a, pad: i, dimRoundingMode: l, dataFormat: u } = n;
  te(o, "maxPool3d");
  let c = S.computePool3DInfo(o.shape, s, a, 1, i, l, u), p = t.data.get(o.dataId).values, m = Jx(p, o.shape, o.dtype, b.computeStrides(o.shape), c, "max");
  return t.makeTensorInfo(m.shape, "float32", m.values);
}
var bF = { kernelName: rl, backendName: "cpu", kernelFunc: dY };
function hY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, input: s } = e, { filterSize: a, strides: i, pad: l, dimRoundingMode: u } = n;
  te([o, s], "maxPool3DGrad");
  let c = S.computePool3DInfo(s.shape, a, i, 1, l, u), p = t.bufferSync(s), m = hR(p, c), f = c.strideDepth, d = c.strideHeight, h = c.strideWidth, g = c.dilationDepth, y = c.dilationHeight, w = c.dilationWidth, x = c.effectiveFilterDepth, k = c.effectiveFilterHeight, C = c.effectiveFilterWidth, A = x - 1 - c.padInfo.front, $ = C - 1 - c.padInfo.left, R = k - 1 - c.padInfo.top, P = Se(s.shape, "float32"), M = t.bufferSync(o);
  for (let V = 0; V < c.batchSize; ++V)
    for (let W = 0; W < c.inChannels; ++W)
      for (let G = 0; G < c.inDepth; ++G)
        for (let U = 0; U < c.inHeight; ++U)
          for (let H = 0; H < c.inWidth; ++H) {
            let K = G - A, re = U - R, X = H - $, ne = 0;
            for (let Q = 0; Q < x; Q += g) {
              let se = (K + Q) / f;
              if (!(se < 0 || se >= c.outDepth || Math.floor(se) !== se))
                for (let pe = 0; pe < k; pe += y) {
                  let ie = (re + pe) / d;
                  if (!(ie < 0 || ie >= c.outHeight || Math.floor(ie) !== ie))
                    for (let fe = 0; fe < C; fe += w) {
                      let de = (X + fe) / h;
                      if (de < 0 || de >= c.outWidth || Math.floor(de) !== de)
                        continue;
                      let ge = x * k * C - 1 - m.get(V, se, ie, de, W), we = Q * k * C + pe * C + fe, $e = ge === we ? 1 : 0;
                      if ($e === 0)
                        continue;
                      ne += M.get(V, se, ie, de, W) * $e;
                    }
                }
            }
            P.set(ne, V, G, U, H, W);
          }
  return t.makeTensorInfo(P.shape, P.dtype, P.values);
}
var wF = { kernelName: Oc, backendName: "cpu", kernelFunc: hY };
function gY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, input: s, output: a } = e, i = s;
  te([s, a], "maxPoolGrad");
  let { filterSize: l, strides: u, pad: c, dimRoundingMode: p } = n, m = S.computePool2DInfo(i.shape, l, u, 1, c, p), f = t.data.get(i.dataId).values, d = Se(m.outShape, i.dtype, Zx(f, i.shape, i.dtype, m).values), h = m.strideHeight, g = m.strideWidth, y = m.dilationHeight, w = m.dilationWidth, x = m.effectiveFilterHeight, k = m.effectiveFilterWidth, C = k - 1 - m.padInfo.left, A = x - 1 - m.padInfo.top, $ = Se(i.shape, "float32"), R = t.data.get(o.dataId).values, P = Se(o.shape, "float32", R);
  for (let M = 0; M < m.batchSize; ++M)
    for (let V = 0; V < m.inChannels; ++V)
      for (let W = 0; W < m.inHeight; ++W)
        for (let G = 0; G < m.inWidth; ++G) {
          let U = W - A, H = G - C, K = 0;
          for (let re = 0; re < x; re += y) {
            let X = (U + re) / h;
            if (!(X < 0 || X >= m.outHeight || Math.floor(X) !== X))
              for (let ne = 0; ne < k; ne += w) {
                let Q = (H + ne) / g;
                if (Q < 0 || Q >= m.outWidth || Math.floor(Q) !== Q)
                  continue;
                let se = x * k - 1 - d.get(M, X, Q, V), pe = re * k + ne, ie = se === pe ? 1 : 0;
                if (ie === 0)
                  continue;
                K += P.get(M, X, Q, V) * ie;
              }
          }
          $.set(K, M, W, G, V);
        }
  return t.makeTensorInfo($.shape, $.dtype, $.values);
}
var kF = { kernelName: Fc, backendName: "cpu", kernelFunc: gY };
function _F(r, e, t, n, o) {
  let s = b.computeStrides(e), a = nm(r, e, t, s, o, "max"), i = Zx(r, e, t, o, true, n);
  return [a.values, i.values];
}
var vF = { kernelName: Pc, backendName: "cpu", kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
  let { x: n } = r, { filterSize: o, strides: s, pad: a, includeBatchInIndex: i } = e, l = t;
  te(n, "MaxPoolWithArgmax");
  let u = l.data.get(n.dataId).values, c = S.computePool2DInfo(n.shape, o, s, [1, 1], a), [p, m] = _F(u, n.shape, n.dtype, i, c), f = l.write(p, c.outShape, n.dtype), d = l.write(m, c.outShape, n.dtype);
  return [{ dataId: f, shape: c.outShape, dtype: n.dtype }, { dataId: d, shape: c.outShape, dtype: "int32" }];
} };
function xY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n, i = b.parseAxisParam(s, o.shape), u = S.computeOutAndReduceShapes(o.shape, i)[1], c = b.sizeFromShape(u), p = [], m = t.makeTensorInfo([], "float32", new Float32Array([c]));
  p.push(m);
  let f = bo({ inputs: { x: o }, backend: t, attrs: { dtype: "float32" } });
  p.push(f);
  let d = nh({ inputs: { a: f, b: m }, backend: t });
  p.push(d);
  let h = Oa({ inputs: { x: d }, backend: t, attrs: { axis: s, keepDims: a } });
  return p.forEach((g) => t.disposeIntermediateTensorInfo(g)), h;
}
var CF = { kernelName: Ko, backendName: "cpu", kernelFunc: xY };
function yY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n;
  te(o, "min");
  let i = b.parseAxisParam(s, o.shape), l = i, u = S.getAxesPermutation(l, o.shape.length), c = o;
  u != null && (c = Jt({ inputs: { x: o }, backend: t, attrs: { perm: u } }), l = S.getInnerMostAxes(l.length, o.shape.length)), S.assertAxesAreInnerMostDims("min", l, c.shape.length);
  let [p, m] = S.computeOutAndReduceShapes(c.shape, l), f = b.sizeFromShape(m), d = b.makeZerosTypedArray(b.sizeFromShape(p), c.dtype), h = t.data.get(c.dataId).values;
  for (let y = 0; y < d.length; ++y) {
    let w = y * f, x = h[w];
    for (let k = 0; k < f; ++k) {
      let C = h[w + k];
      (Number.isNaN(C) || C < x) && (x = C);
    }
    d[y] = x;
  }
  u != null && t.disposeIntermediateTensorInfo(c);
  let g = t.makeTensorInfo(p, c.dtype, d);
  if (a) {
    let y = S.expandShapeToKeepDim(p, i), w = Ze({ inputs: { x: g }, backend: t, attrs: { shape: y } });
    return t.disposeIntermediateTensorInfo(g), w;
  }
  return g;
}
var SF = { kernelName: Xo, backendName: "cpu", kernelFunc: yY };
function bY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { paddings: s, mode: a } = n;
  te(o, "mirrorPad");
  let i = s.map((x, k) => x[0] + o.shape[k] + x[1]), l = s.map((x) => x[0]), u = s.map((x, k) => x[0] + o.shape[k]), c = a === "reflect" ? 0 : 1, p = t.data.get(o.dataId).values, m = o.shape.length, f = b.computeStrides(o.shape), d = b.sizeFromShape(i), h = i.length, g = b.computeStrides(i), y = b.getTypedArrayFromDType(o.dtype, d);
  for (let x = 0; x < d; x++) {
    let k = b.indexToLoc(x, h, g);
    for (let A = 0; A < h; A++)
      k[A] < l[A] ? k[A] = l[A] * 2 - k[A] - c : k[A] >= u[A] && (k[A] = (u[A] - 1) * 2 - k[A] + c);
    k = k.map((A, $) => A - l[$]);
    let C = b.locToIndex(k, m, f);
    y[x] = p[C];
  }
  return { dataId: t.write(y, i, o.dtype), shape: i, dtype: o.dtype };
}
var IF = { kernelName: Zo, backendName: "cpu", kernelFunc: bY };
var wY = Ye((r, e) => {
  let t = r % e;
  return r < 0 && e < 0 || r >= 0 && e >= 0 ? t : (t + e) % e;
});
var kY = Qe(Zi, wY);
var NF = { kernelName: Zi, backendName: "cpu", kernelFunc: kY };
var EF = Bl(Kk());
function z0(r) {
  let { inputs: e, backend: t, attrs: n } = r, { logits: o } = e, { dim: s } = n, a = o.shape.length, i = s;
  if (i === -1 && (i = a - 1), i !== a - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);
  let l = b.parseAxisParam([i], o.shape), u = L0({ inputs: { x: o }, backend: t, attrs: { reductionIndices: l, keepDims: false } }), c = S.expandShapeToKeepDim(u.shape, l), p = Ze({ inputs: { x: u }, backend: t, attrs: { shape: c } }), m = th({ inputs: { a: o, b: p }, backend: t }), f = m0({ inputs: { x: m }, backend: t }), d = Oa({ inputs: { x: f }, backend: t, attrs: { axis: l, keepDims: false } }), h = Ze({ inputs: { x: d }, backend: t, attrs: { shape: c } }), g = nh({ inputs: { a: f, b: h }, backend: t });
  return t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(h), g;
}
var TF = { kernelName: fs, backendName: "cpu", kernelFunc: z0 };
function _Y(r) {
  let { inputs: e, backend: t, attrs: n } = r, { logits: o } = e, { numSamples: s, seed: a, normalized: i } = n;
  te(o, "multinomial");
  let l = i ? o : z0({ inputs: { logits: o }, backend: t, attrs: { dim: -1 } }), u = l.shape[0], c = l.shape[1], p = t.data.get(l.dataId).values, m = [u, s], f = b.makeZerosTypedArray(b.sizeFromShape(m), "int32");
  for (let d = 0; d < u; ++d) {
    let h = d * c, g = new Float32Array(c - 1);
    g[0] = p[h];
    for (let x = 1; x < g.length; ++x)
      g[x] = g[x - 1] + p[h + x];
    let y = EF.alea(a.toString()), w = d * s;
    for (let x = 0; x < s; ++x) {
      let k = y();
      f[w + x] = g.length;
      for (let C = 0; C < g.length; C++)
        if (k < g[C]) {
          f[w + x] = C;
          break;
        }
    }
  }
  return i || t.disposeIntermediateTensorInfo(l), t.makeTensorInfo(m, "int32", f);
}
var AF = { kernelName: Mc, backendName: "cpu", kernelFunc: _Y };
var vY = Mr.nonMaxSuppressionV3Impl;
function CY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { boxes: o, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l } = n;
  te(o, "NonMaxSuppression");
  let u = t.data.get(o.dataId).values, c = t.data.get(s.dataId).values, { selectedIndices: p } = vY(u, c, a, i, l);
  return t.makeTensorInfo([p.length], "int32", new Int32Array(p));
}
var $F = { kernelName: Qi, backendName: "cpu", kernelFunc: CY };
var SY = Mr.nonMaxSuppressionV4Impl;
function IY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { boxes: o, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l, padToMaxOutputSize: u } = n;
  te(o, "NonMaxSuppressionPadded");
  let c = t.data.get(o.dataId).values, p = t.data.get(s.dataId).values, { selectedIndices: m, validOutputs: f } = SY(c, p, a, i, l, u);
  return [t.makeTensorInfo([m.length], "int32", new Int32Array(m)), t.makeTensorInfo([], "int32", new Int32Array([f]))];
}
var DF = { kernelName: ea, backendName: "cpu", kernelFunc: IY };
var NY = Mr.nonMaxSuppressionV5Impl;
function TY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { boxes: o, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l, softNmsSigma: u } = n;
  te(o, "NonMaxSuppressionWithScore");
  let c = t.data.get(o.dataId).values, p = t.data.get(s.dataId).values, m = a, f = i, d = l, h = u, { selectedIndices: g, selectedScores: y } = NY(c, p, m, f, d, h);
  return [t.makeTensorInfo([g.length], "int32", new Int32Array(g)), t.makeTensorInfo([y.length], "float32", new Float32Array(y))];
}
var RF = { kernelName: ta, backendName: "cpu", kernelFunc: TY };
function EY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { indices: o } = e, { depth: s, onValue: a, offValue: i } = n;
  te(o, "oneHot");
  let l = b.sizeFromShape(o.shape), u = new Float32Array(l * s);
  u.fill(i);
  let c = t.data.get(o.dataId).values;
  for (let p = 0; p < l; ++p)
    c[p] >= 0 && c[p] < s && (u[p * s + c[p]] = a);
  return t.makeTensorInfo([...o.shape, s], "int32", u);
}
var FF = { kernelName: Qo, backendName: "cpu", kernelFunc: EY };
function ih(r) {
  let { inputs: e, backend: t } = r, { x: n } = e;
  if (n.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (n.dtype === "complex64") {
    let o = yo({ inputs: { input: n }, backend: t }), s = ih({ inputs: { x: o }, backend: t }), a = yi({ inputs: { input: n }, backend: t }), i = ih({ inputs: { x: a }, backend: t }), l = dr({ inputs: { real: s, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(s), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(i), l;
  } else
    return sh({ backend: t, attrs: { shape: n.shape, value: 0, dtype: n.dtype } });
}
var OF = { kernelName: ti, backendName: "cpu", kernelFunc: ih };
function PF(r) {
  let { inputs: e, backend: t } = r, { x: n } = e;
  if (n.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (n.dtype === "complex64") {
    let o = yo({ inputs: { input: n }, backend: t }), s = PF({ inputs: { x: o }, backend: t }), a = yi({ inputs: { input: n }, backend: t }), i = ih({ inputs: { x: a }, backend: t }), l = dr({ inputs: { real: s, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(s), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(i), l;
  } else
    return sh({ backend: t, attrs: { shape: n.shape, value: 1, dtype: n.dtype } });
}
var MF = { kernelName: qs, backendName: "cpu", kernelFunc: PF };
function B0(r) {
  let { inputs: e, backend: t, attrs: n } = r, { axis: o } = n;
  if (e.length === 1)
    return om({ inputs: { input: e[0] }, backend: t, attrs: { dim: o } });
  let s = e[0].shape, a = e[0].dtype;
  e.forEach((c) => {
    b.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), b.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], l = e.map((c) => {
    let p = om({ inputs: { input: c }, backend: t, attrs: { dim: o } });
    return i.push(p), p;
  }), u = Tl({ inputs: l, backend: t, attrs: { axis: o } });
  return i.forEach((c) => t.disposeIntermediateTensorInfo(c)), u;
}
var LF = { kernelName: Ks, backendName: "cpu", kernelFunc: B0 };
function AY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { paddings: s, constantValue: a } = n;
  te(o, "pad");
  let i = s.map((w, x) => w[0] + o.shape[x] + w[1]), l = s.map((w) => w[0]), u = t.data.get(o.dataId).values, c = b.sizeFromShape(o.shape), p = o.shape.length, m = b.computeStrides(o.shape), f = b.sizeFromShape(i), d = i.length, h = b.computeStrides(i), g = b.getTypedArrayFromDType(o.dtype, f);
  a !== 0 && g.fill(a);
  for (let w = 0; w < c; w++) {
    let k = b.indexToLoc(w, p, m).map((A, $) => A + l[$]), C = b.locToIndex(k, d, h);
    g[C] = u[w];
  }
  return { dataId: t.write(g, i, o.dtype), shape: i, dtype: o.dtype };
}
var ey = { kernelName: es, backendName: "cpu", kernelFunc: AY };
var $Y = Ye((r, e) => Math.pow(r, e));
var DY = Qe(ts, $Y);
var zF = { kernelName: ts, backendName: "cpu", kernelFunc: DY };
function RY(r) {
  let { backend: e, attrs: t } = r, { start: n, stop: o, dtype: s, step: a } = t, i = zu(n, o, a, s);
  return e.makeTensorInfo([i.length], s, i);
}
var BF = { kernelName: nl, backendName: "cpu", kernelFunc: RY };
var FY = De(na, (r) => 1 / r);
var VF = { kernelName: na, backendName: "cpu", kernelFunc: FY };
function OY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { images: o } = e, { alignCorners: s, halfPixelCenters: a, size: i } = n;
  te(o, "resizeBilinear");
  let l = b.computeStrides(o.shape), [u, c] = i, [p, m, f, d] = o.shape, h = t.data.get(o.dataId).values, g = new Float32Array(b.sizeFromShape([p, u, c, d])), y = [s && u > 1 ? m - 1 : m, s && c > 1 ? f - 1 : f], w = [s && u > 1 ? u - 1 : u, s && c > 1 ? c - 1 : c], x = 0, k = y[0] / w[0], C = y[1] / w[1];
  for (let A = 0; A < p; A++)
    for (let $ = 0; $ < u; $++) {
      let R;
      a ? R = k * ($ + 0.5) - 0.5 : R = k * $;
      let P = Math.max(0, Math.floor(R)), M = R - P, V = Math.min(m - 1, Math.ceil(R)), W = A * l[0] + P * l[1], G = A * l[0] + V * l[1];
      for (let U = 0; U < c; U++) {
        let H;
        a ? H = C * (U + 0.5) - 0.5 : H = C * U;
        let K = Math.max(0, Math.floor(H)), re = H - K, X = Math.min(f - 1, Math.ceil(H)), ne = W + K * l[2], Q = G + K * l[2], se = W + X * l[2], pe = G + X * l[2];
        for (let ie = 0; ie < d; ie++) {
          let fe = h[ne + ie], de = h[Q + ie], ge = h[se + ie], we = h[pe + ie], $e = fe + (ge - fe) * re, Ce = de + (we - de) * re, Be = $e + (Ce - $e) * M;
          g[x++] = Be;
        }
      }
    }
  return t.makeTensorInfo([p, u, c, d], "float32", g);
}
var WF = { kernelName: os, backendName: "cpu", kernelFunc: OY };
function PY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { images: o, dy: s } = e, { alignCorners: a } = n;
  te([s, o], "resizeBilinearGrad");
  let i = b.computeStrides(o.shape), [l, u, c, p] = o.shape, [, m, f] = s.shape, d = new Float32Array(l * u * c * p), h = [a && m > 1 ? u - 1 : u, a && f > 1 ? c - 1 : c], g = [a && m > 1 ? m - 1 : m, a && f > 1 ? f - 1 : f], y = h[0] / g[0], w = h[1] / g[1], x = t.data.get(s.dataId).values, k = 0;
  for (let C = 0; C < l; C++) {
    let A = C * i[0];
    for (let $ = 0; $ < m; $++) {
      let R = $ * y, P = Math.floor(R), M = Math.min(Math.ceil(R), u - 1), V = A + P * i[1], W = A + M * i[1], G = R - P, U = 1 - G;
      for (let H = 0; H < f; H++) {
        let K = H * w, re = Math.floor(K), X = Math.min(Math.ceil(K), c - 1), ne = K - re, Q = 1 - ne, se = V + re * i[2], pe = V + X * i[2], ie = W + re * i[2], fe = W + X * i[2], de = U * Q, ge = U * ne, we = G * Q, $e = G * ne;
        for (let Ce = 0; Ce < p; Ce++) {
          let Be = x[k++];
          d[se + Ce] += Be * de, d[pe + Ce] += Be * ge, d[ie + Ce] += Be * we, d[fe + Ce] += Be * $e;
        }
      }
    }
  }
  return t.makeTensorInfo([l, c, u, p], "float32", d);
}
var jF = { kernelName: Bc, backendName: "cpu", kernelFunc: PY };
function MY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { images: o } = e, { alignCorners: s, halfPixelCenters: a, size: i } = n;
  te(o, "resizeNearestNeighbor");
  let l = b.computeStrides(o.shape), [u, c] = i, [p, m, f, d] = o.shape, h = t.data.get(o.dataId).values, g = new Float32Array(p * u * c * d), y = [s && u > 1 ? m - 1 : m, s && c > 1 ? f - 1 : f], w = [s && u > 1 ? u - 1 : u, s && c > 1 ? c - 1 : c], x = y[0] / w[0], k = y[1] / w[1], C = 0;
  for (let A = 0; A < p; A++) {
    let $ = A * l[0];
    for (let R = 0; R < u; R++) {
      let P = a ? x * (R + 0.5) : x * R, M = Math.min(m - 1, s ? Math.round(P) : Math.floor(P));
      a && (M = Math.max(0, M));
      let V = $ + M * l[1];
      for (let W = 0; W < c; W++) {
        let G = a ? k * (W + 0.5) : k * W, U = Math.min(f - 1, s ? Math.round(G) : Math.floor(G));
        a && (U = Math.max(0, U));
        let H = V + U * l[2];
        for (let K = 0; K < d; K++) {
          let re = h[H + K];
          g[C++] = re;
        }
      }
    }
  }
  return t.makeTensorInfo([p, u, c, d], o.dtype, g);
}
var GF = { kernelName: ol, backendName: "cpu", kernelFunc: MY };
function LY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { images: o, dy: s } = e, { alignCorners: a } = n;
  te([s, o], "resizeNearestNeighborGrad");
  let i = b.computeStrides(o.shape), l = b.computeStrides(s.shape), [u, c, p, m] = o.shape, [, f, d] = s.shape, h = new Float32Array(u * c * p * m), g = t.data.get(s.dataId).values, y = [a && f > 1 ? c - 1 : c, a && d > 1 ? p - 1 : p], w = [a && f > 1 ? f - 1 : f, a && d > 1 ? d - 1 : d], x = y[0] / w[0], k = y[1] / w[1], C = 1 / x, A = 1 / k, $ = Math.ceil(C) * 2 + 2, R = Math.ceil(A) * 2 + 2;
  for (let P = 0; P < u; P++) {
    let M = P * i[0];
    for (let V = 0; V < c; V++) {
      let W = M + V * i[1], G = Math.floor(V * C), U = Math.floor(G - $ / 2);
      for (let H = 0; H < p; H++) {
        let K = W + H * i[2], re = Math.floor(H * A), X = Math.floor(re - R / 2);
        for (let ne = 0; ne < m; ne++) {
          let Q = 0;
          for (let se = 0; se < $; se++) {
            let pe = se + U;
            if (pe < 0 || pe >= f)
              continue;
            let ie = M + pe * l[1], fe = pe * x, de = Math.min(c - 1, a ? Math.round(fe) : Math.floor(fe));
            if (V === de)
              for (let ge = 0; ge < R; ge++) {
                let we = ge + X;
                if (we < 0 || we >= d)
                  continue;
                let $e = ie + we * l[2], Ce = we * k, Be = Math.min(p - 1, a ? Math.round(Ce) : Math.floor(Ce));
                H === Be && (Q += g[$e + ne]);
              }
          }
          h[K + ne] = Q;
        }
      }
    }
  }
  return t.makeTensorInfo(o.shape, o.dtype, h);
}
var UF = { kernelName: zc, backendName: "cpu", kernelFunc: LY };
function zY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { dims: s } = n;
  te(o, "reverse");
  let a = o.shape.length, i = b.parseAxisParam(s, o.shape);
  if (a === 0)
    return Lr({ inputs: { x: o }, backend: t });
  let l = new ct(o.shape, o.dtype), u = t.bufferSync(o);
  for (let c = 0; c < l.size; c++) {
    let p = l.indexToLoc(c), m = p.slice();
    i.forEach((f) => m[f] = o.shape[f] - 1 - m[f]), l.set(u.get(...m), ...p);
  }
  return t.makeTensorInfo(l.shape, l.dtype, l.values);
}
var HF = { kernelName: is, backendName: "cpu", kernelFunc: zY };
var qF = { kernelName: ma, backendName: "cpu", kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
  let { image: n } = r, { radians: o, fillValue: s, center: a } = e, i = t, l = b.getTypedArrayFromDType(n.dtype, b.sizeFromShape(n.shape)), [u, c, p, m] = n.shape, [f, d] = S.getImageCenter(a, c, p), h = 255, g = Math.sin(o), y = Math.cos(o), w = i.data.get(n.dataId).values;
  for (let k = 0; k < u; k++) {
    let C = k * p * c * m;
    for (let A = 0; A < c; A++) {
      let $ = A * (p * m);
      for (let R = 0; R < p; R++) {
        let P = R * m;
        for (let M = 0; M < m; M++) {
          let V = [u, A, R, M], W = V[2], G = V[1], U = (W - f) * y - (G - d) * g, H = (W - f) * g + (G - d) * y;
          U = Math.round(U + f), H = Math.round(H + d);
          let K = s;
          if (typeof s != "number" && (M === 3 ? K = h : K = s[M]), U >= 0 && U < p && H >= 0 && H < c) {
            let X = H * (p * m), ne = U * m, Q = C + X + ne + M;
            K = w[Q];
          }
          let re = C + $ + P + M;
          l[re] = K;
        }
      }
    }
  }
  return { dataId: i.write(l, n.shape, n.dtype), shape: n.shape, dtype: n.dtype };
} };
var BY = De(as, (r) => {
  let e = Math.floor(r);
  return r - e < 0.5 ? Math.floor(r) : r - e > 0.5 ? Math.ceil(r) : e % 2 == 0 ? e : e + 1;
});
var KF = { kernelName: as, backendName: "cpu", kernelFunc: BY };
function ty(r, e, t, n, o, s, a, i, l, u) {
  let c = [n / o, o], p = r.values, m = e.values;
  if (n === 0)
    return Se(t, e.dtype);
  let f = Se(c, e.dtype);
  f.values.fill(l);
  for (let d = 0; d < s; d++) {
    let h = [], g = 0;
    for (let y = 0; y < a; y++) {
      let w = p[d * a + y];
      h.push(w), g += w * i[y];
    }
    if (g < 0 || g >= n / o)
      throw new Error(`Invalid indices: ${h} does not index into ${t}`);
    for (let y = 0; y < o; y++)
      u ? f.values[g * o + y] += m[d * o + y] : f.values[g * o + y] = e.rank === 0 ? m[0] : m[d * o + y];
  }
  return f;
}
function VY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { indices: o, updates: s } = e, { shape: a } = n, { sliceRank: i, numUpdates: l, sliceSize: u, strides: c, outputSize: p } = S.calculateShapes(s, o, a), m = true, f = t.bufferSync(o), d = t.bufferSync(s), h = ty(f, d, a, p, u, l, i, c, 0, m);
  return t.makeTensorInfo(a, h.dtype, h.values);
}
var XF = { kernelName: oa, backendName: "cpu", kernelFunc: VY };
function WY(r) {
  let { inputs: e, backend: t } = r, { condition: n, t: o, e: s } = e;
  te([n, o, s], "select");
  let a = n.shape.length, i = t.data.get(n.dataId).values, l = t.data.get(o.dataId).values, u = t.data.get(s.dataId).values, c = pr(o.dtype, s.dtype), p = b.makeZerosTypedArray(b.sizeFromShape(o.shape), c), m = 0, f = a === 0 || a > 1 || o.shape.length === 1 ? 1 : b.sizeFromShape(o.shape.slice(1));
  for (let d = 0; d < i.length; d++)
    for (let h = 0; h < f; h++)
      i[d] === 1 ? p[m++] = l[d] : p[m++] = u[d];
  return t.makeTensorInfo(o.shape, c, p);
}
var YF = { kernelName: Ys, backendName: "cpu", kernelFunc: WY };
var jY = S.SELU_SCALEALPHA;
var GY = S.SELU_SCALE;
var UY = De(sa, (r) => r >= 0 ? GY * r : jY * (Math.exp(r) - 1));
var ZF = { kernelName: sa, backendName: "cpu", kernelFunc: UY };
var HY = De(aa, (r) => r < 0 ? -1 : r > 0 ? 1 : 0);
var JF = { kernelName: aa, backendName: "cpu", kernelFunc: HY };
var qY = De(us, (r) => Math.sin(r));
var QF = { kernelName: us, backendName: "cpu", kernelFunc: qY };
var KY = De(ia, (r) => Math.sinh(r));
var eO = { kernelName: ia, backendName: "cpu", kernelFunc: KY };
var XY = 11920928955078125e-23;
var tO = Math.log(XY) + 2;
var YY = De(la, (r) => {
  let e = r > -tO, t = r < tO, n = Math.exp(r), o;
  return t ? o = n : e ? o = r : o = Math.log(1 + n), o;
});
var rO = { kernelName: la, backendName: "cpu", kernelFunc: YY };
function ZY(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { blockShape: s, paddings: a } = n;
  te([o], "spaceToBatchND");
  let i = b.sizeFromShape(s), l = [[0, 0]];
  l.push(...a);
  for (let A = 1 + s.length; A < o.shape.length; ++A)
    l.push([0, 0]);
  let u = ey.kernelFunc({ inputs: { x: o }, backend: t, attrs: { paddings: l, constantValue: 0 } }), c = S.getReshaped(u.shape, s, i, false), p = S.getPermuted(c.length, s.length, false), m = S.getReshapedPermuted(u.shape, s, i, false), h = Ze({ inputs: { x: u }, backend: t, attrs: { shape: c } }), w = Jt({ inputs: { x: h }, backend: t, attrs: { perm: p } }), C = Ze({ inputs: { x: w }, backend: t, attrs: { shape: m } });
  return t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(w), C;
}
var nO = { kernelName: Js, backendName: "cpu", kernelFunc: ZY };
function JY(r) {
  let { inputs: e, backend: t } = r, { indices: n, values: o, denseShape: s, defaultValue: a } = e;
  if (s.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);
  if (n.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${n.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${o.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);
  let i = t.data.get(n.dataId).values, l = t.data.get(o.dataId).values, u = t.data.get(s.dataId).values, c = t.data.get(a.dataId).values[0], [p, m, f, d, h] = Vx(i, n.shape, n.dtype, l, o.dtype, u, c);
  return [t.makeTensorInfo(m, n.dtype, p), t.makeTensorInfo([m[0]], o.dtype, f), t.makeTensorInfo([d.length], "bool", new Uint8Array(d.map((g) => Number(g)))), t.makeTensorInfo([h.length], n.dtype, new Int32Array(h))];
}
var oO = { kernelName: Vc, backendName: "cpu", kernelFunc: JY };
function QY(r) {
  let { inputs: e, backend: t } = r, { inputIndices: n, inputShape: o, newShape: s } = e;
  if (n.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${n.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${o.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let a = Array.from(t.data.get(o.dataId).values), i = t.data.get(n.dataId).values, l = Array.from(t.data.get(s.dataId).values), [u, c, p] = Wx(i, n.shape, n.dtype, a, l);
  return [t.makeTensorInfo(c, n.dtype, u), t.makeTensorInfo([p.length], s.dtype, new Int32Array(p))];
}
var sO = { kernelName: Wc, backendName: "cpu", kernelFunc: QY };
function eZ(r) {
  let { inputs: e, backend: t } = r, { data: n, indices: o, segmentIds: s } = e;
  if (n.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${o.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);
  let a = t.data.get(n.dataId).values, i = t.data.get(o.dataId).values, l = t.data.get(s.dataId).values, [u, c] = tm(a, n.shape, n.dtype, i, l, true);
  return t.makeTensorInfo(c, n.dtype, u);
}
var iO = { kernelName: jc, backendName: "cpu", kernelFunc: eZ };
function tZ(r) {
  let { inputs: e, backend: t } = r, { data: n, indices: o, segmentIds: s } = e;
  if (n.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${o.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);
  let a = t.data.get(n.dataId).values, i = t.data.get(o.dataId).values, l = t.data.get(s.dataId).values, [u, c] = tm(a, n.shape, n.dtype, i, l);
  return t.makeTensorInfo(c, n.dtype, u);
}
var aO = { kernelName: Gc, backendName: "cpu", kernelFunc: tZ };
function rZ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { sparseIndices: o, sparseValues: s, defaultValue: a } = e, { outputShape: i } = n, { sliceRank: l, numUpdates: u, sliceSize: c, strides: p, outputSize: m } = S.calculateShapes(s, o, i), f = false, d = t.bufferSync(o), h = t.bufferSync(s), g = t.data.get(a.dataId).values[0], y = ty(d, h, i, m, c, u, l, p, g, f);
  return t.makeTensorInfo(i, y.dtype, y.values);
}
var lO = { kernelName: Uc, backendName: "cpu", kernelFunc: rZ };
function nZ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { numOrSizeSplits: s, axis: a } = n, i = b.parseAxisParam(a, o.shape)[0], l = S.prepareSplitSize(o, s, i), u = new Array(o.shape.length).fill(0), c = o.shape.slice();
  return l.map((p) => {
    let m = [...c];
    m[i] = p;
    let f = ko({ inputs: { x: o }, backend: t, attrs: { begin: u, size: m } });
    return u[i] += p, f;
  });
}
var uO = { kernelName: Qs, backendName: "cpu", kernelFunc: nZ };
var cO = { kernelName: sl, backendName: "cpu", kernelFunc: ({ inputs: r, backend: e }) => {
  let { x: t } = r, n = e;
  te(t, "square");
  let o = n.data.get(t.dataId).values, s = new Float32Array(o.length);
  for (let i = 0; i < o.length; ++i) {
    let l = o[i];
    s[i] = l * l;
  }
  return { dataId: n.write(s, t.shape, t.dtype), shape: t.shape, dtype: t.dtype };
} };
var oZ = De(ro, (r, e) => {
  let t = e;
  return isNaN(r) ? NaN : r > 0 ? 1 : t.alpha;
});
var pO = { kernelName: ro, backendName: "cpu", kernelFunc: oZ };
function sZ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { begin: s, end: a, strides: i, beginMask: l, endMask: u, ellipsisMask: c, newAxisMask: p, shrinkAxisMask: m } = n;
  te(o, "stridedSlice");
  let { nonStrided: f, $begin: d, $strides: h, size: g, newShape: y, outShape: w } = ar.sliceInfo(o.shape, s, a, i, l, u, c, p, m), x = Ze({ inputs: { x: o }, backend: t, attrs: { shape: y } }), k;
  if (f) {
    let A = ko({ inputs: { x }, backend: t, attrs: { begin: d, size: g } });
    k = Ze({ inputs: { x: A }, backend: t, attrs: { shape: w } }), t.disposeIntermediateTensorInfo(A);
  } else if (w.some((A) => A === 0))
    k = t.makeTensorInfo(w, o.dtype, []);
  else {
    let A = t.bufferSync(x), $ = jx(w, A, h, d);
    k = t.makeTensorInfo($.shape, $.dtype, $.values);
  }
  let C = Ze({ inputs: { x: k }, backend: t, attrs: { shape: w } });
  return t.disposeIntermediateTensorInfo(x), t.disposeIntermediateTensorInfo(k), C;
}
var mO = { kernelName: ua, backendName: "cpu", kernelFunc: sZ };
function iZ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { separator: o, nGramWidths: s, leftPad: a, rightPad: i, padWidth: l, preserveShortSequences: u } = n, { data: c, dataSplits: p } = e, m = t.data.get(c.dataId).values, f = t.data.get(p.dataId).values, [d, h] = Gx(m, f, o, s, a, i, l, u);
  return [t.makeTensorInfo([d.length], "string", d), t.makeTensorInfo(p.shape, "int32", h)];
}
var fO = { kernelName: Hc, backendName: "cpu", kernelFunc: iZ };
function aZ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { skipEmpty: o } = n, { input: s, delimiter: a } = e;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (s.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${s.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);
  let i = t.data.get(s.dataId).values, l = t.data.get(a.dataId).values[0], [u, c, p] = Ux(i, l, o), m = c.length;
  return [t.makeTensorInfo([m, 2], "int32", u), t.makeTensorInfo([m], "string", c), t.makeTensorInfo([2], "int32", new Int32Array(p))];
}
var dO = { kernelName: qc, backendName: "cpu", kernelFunc: aZ };
function lZ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { numBuckets: o } = n, { input: s } = e;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o <= 0)
    throw new Error("Number of buckets must be at least 1");
  let a = t.data.get(s.dataId).values, i = Hx(a, o);
  return t.makeTensorInfo(s.shape, "int32", i);
}
var hO = { kernelName: Kc, backendName: "cpu", kernelFunc: lZ };
var uZ = De(gs, (r) => Math.tan(r));
var gO = { kernelName: gs, backendName: "cpu", kernelFunc: uZ };
var cZ = De(xs, (r) => Math.tanh(r));
var xO = { kernelName: xs, backendName: "cpu", kernelFunc: cZ };
function pZ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { reps: s } = n;
  te(o, "tile");
  let a = qx(t.bufferSync(o), s);
  return t.makeTensorInfo(a.shape, a.dtype, a.values);
}
var yO = { kernelName: jn, backendName: "cpu", kernelFunc: pZ };
function mZ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { k: s, sorted: a } = n;
  te(o, "topk");
  let i = t.data.get(o.dataId).values, [l, u] = Kx(i, o.shape, o.dtype, s, a);
  return [t.makeTensorInfo(l.shape, l.dtype, l.values), t.makeTensorInfo(u.shape, u.dtype, u.values)];
}
var bO = { kernelName: ca, backendName: "cpu", kernelFunc: mZ };
function fZ(r) {
  let { inputs: e, attrs: t, backend: n } = r, { image: o, transforms: s } = e, { interpolation: a, fillMode: i, fillValue: l, outputShape: u } = t, [c, p, m, f] = o.shape, [d, h] = u != null ? u : [p, m], g = [c, d, h, f], y = b.computeStrides(o.shape), w = y[0], x = y[1], k = y[2], C = b.getTypedArrayFromDType(o.dtype, b.sizeFromShape(g));
  C.fill(l);
  let A = n.data.get(o.dataId).values, $ = n.data.get(s.dataId).values;
  for (let P = 0; P < c; ++P) {
    let M = s.shape[0] === 1 ? $ : $.subarray(P * 8, P * 8 + 8);
    for (let V = 0; V < d; ++V)
      for (let W = 0; W < h; ++W)
        for (let G = 0; G < f; ++G) {
          let U, H = M[6] * W + M[7] * V + 1;
          if (H === 0)
            continue;
          let K = (M[0] * W + M[1] * V + M[2]) / H, re = (M[3] * W + M[4] * V + M[5]) / H, X = kO(K, m, i), ne = kO(re, p, i);
          switch (a) {
            case "nearest":
              U = yZ(A, p, m, w, x, k, P, ne, X, G, l);
              break;
            case "bilinear":
              U = bZ(A, p, m, w, x, k, P, ne, X, G, l);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`);
          }
          let Q = P * w + V * x + W * k + G;
          C[Q] = U;
        }
    return n.makeTensorInfo(g, o.dtype, C);
  }
  return { dataId: n.write(C, g, o.dtype), shape: o.shape, dtype: o.dtype };
}
var wO = { kernelName: pa, backendName: "cpu", kernelFunc: fZ };
function kO(r, e, t) {
  switch (t) {
    case "reflect":
      return dZ(r, e);
    case "wrap":
      return hZ(r, e);
    case "nearest":
      return xZ(r, e);
    case "constant":
    default:
      return gZ(r, e);
  }
}
function dZ(r, e) {
  let t = r;
  if (t < 0)
    if (e <= 1)
      t = 0;
    else {
      let n = 2 * e;
      t < n && (t = n * Math.trunc(-t / n) + t), t = t < -e ? t + n : -t - 1;
    }
  else if (t > e - 1)
    if (e <= 1)
      t = 0;
    else {
      let n = 2 * e;
      t -= n * Math.trunc(t / n), t >= e && (t = n - t - 1);
    }
  return b.clamp(0, t, e - 1);
}
function hZ(r, e) {
  let t = r;
  if (t < 0)
    if (e <= 1)
      t = 0;
    else {
      let n = e - 1;
      t += e * (Math.trunc(-t / n) + 1);
    }
  else if (t > e - 1)
    if (e <= 1)
      t = 0;
    else {
      let n = e - 1;
      t -= e * Math.trunc(t / n);
    }
  return b.clamp(0, t, e - 1);
}
function gZ(r, e) {
  return r;
}
function xZ(r, e) {
  return b.clamp(0, r, e - 1);
}
function ah(r, e, t, n, o, s, a, i, l, u, c) {
  let p = a * n + i * o + l * s + u;
  return 0 <= i && i < e && 0 <= l && l < t ? r[p] : c;
}
function yZ(r, e, t, n, o, s, a, i, l, u, c) {
  let p = Math.round(i), m = Math.round(l);
  return ah(r, e, t, n, o, s, a, p, m, u, c);
}
function bZ(r, e, t, n, o, s, a, i, l, u, c) {
  let p = Math.floor(i), m = Math.floor(l), f = p + 1, d = m + 1, h = (d - l) * ah(r, e, t, n, o, s, a, p, m, u, c) + (l - m) * ah(r, e, t, n, o, s, a, p, d, u, c), g = (d - l) * ah(r, e, t, n, o, s, a, f, m, u, c) + (l - m) * ah(r, e, t, n, o, s, a, f, d, u, c);
  return (f - i) * h + (i - p) * g;
}
function wZ(r) {
  let { inputs: e, attrs: t, backend: n } = r, { axis: o } = t, { x: s } = e;
  te(s, "unique");
  let a = n.data.get(s.dataId).values, { outputValues: i, outputShape: l, indices: u } = Xx(a, o, s.shape, s.dtype);
  return [n.makeTensorInfo(l, s.dtype, i), n.makeTensorInfo([u.length], "int32", u)];
}
var _O = { kernelName: Xc, backendName: "cpu", kernelFunc: wZ };
function kZ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { value: o } = e, { axis: s } = n;
  s < 0 && (s += o.shape.length);
  let a = o.shape.length, i = o.shape[s], l = new Array(a - 1), u = 0;
  for (let f = 0; f < a; f++)
    f !== s && (l[u++] = o.shape[f]);
  let c = new Array(a).fill(0), p = o.shape.slice();
  p[s] = 1;
  let m = new Array(i);
  for (let f = 0; f < m.length; f++) {
    c[s] = f;
    let d = ko({ inputs: { x: o }, backend: t, attrs: { begin: c, size: p } });
    m[f] = Ze({ inputs: { x: d }, backend: t, attrs: { shape: l } }), t.disposeIntermediateTensorInfo(d);
  }
  return m;
}
var vO = { kernelName: ei, backendName: "cpu", kernelFunc: kZ };
function _Z(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, segmentIds: s } = e, { numSegments: a } = n;
  te(o, "unsortedSegmentSum");
  let i = o.shape.length, l = s.shape.length, u = [], c = [], p = i - l, m = s;
  for (let d = 0; d < p; ++d) {
    let h = om({ inputs: { input: m }, backend: t, attrs: { dim: d + 1 } });
    m = h, c.push(h);
  }
  for (let d = 0; d < a; ++d) {
    let h = b.createScalarValue(d, "int32"), g = t.makeTensorInfo([], "int32", h), y = c0({ inputs: { a: g, b: m }, backend: t }), w = bo({ inputs: { x: y }, backend: t, attrs: { dtype: "float32" } }), x = Lu({ inputs: { a: w, b: o }, backend: t }), k = Oa({ inputs: { x }, backend: t, attrs: { axis: 0, keepDims: false } });
    u.push(k), c.push(g), c.push(y), c.push(w), c.push(x), c.push(k);
  }
  let f = B0({ inputs: u, backend: t, attrs: { axis: 0 } });
  return c.forEach((d) => t.disposeIntermediateTensorInfo(d)), f;
}
var CO = { kernelName: il, backendName: "cpu", kernelFunc: _Z };
var vZ = [rR, gD, nR, oR, kD, sR, iR, aR, lR, uR, cR, pR, mR, fR, dR, gR, xR, yR, bR, tR, wR, kR, _R, vR, wD, _D, CR, xD, SR, NR, ER, AR, TR, DR, RR, $R, FR, OR, PR, MR, LR, zR, BR, VR, WR, jR, GR, HR, UR, oh, KR, XD, XR, vD, YR, CD, ZR, SD, JR, QR, eF, ID, tF, rF, nF, oF, sF, ND, TD, yD, iF, IR, aF, lF, uF, YD, ED, AD, cF, $D, pF, mF, fF, dF, hF, gF, DD, yF, bF, wF, kF, vF, xF, CF, SF, RD, IF, NF, AF, FD, OD, $F, DF, RF, PD, FF, MF, LF, ey, zF, ZD, LD, BF, bD, VF, JD, QD, eR, WF, jF, GF, UF, HF, qF, KF, zD, XF, YF, ZF, VD, JF, QF, eO, WD, TF, rO, nO, oO, sO, iO, aO, lO, uO, GD, cO, UD, pO, mO, fO, dO, hO, qD, qR, gO, xO, yO, bO, MD, wO, _O, vO, CO, OF];
for (let r of vZ)
  Ul(r);
var $O = {};
He($O, { assertNotComplex: () => Ds, bindCanvasToFramebuffer: () => RZ, bindColorTextureToFramebuffer: () => ph, bindTextureToProgramUniformSampler: () => tC, bindTextureUnit: () => TO, bindVertexBufferToProgramAttribute: () => ry, callAndCheck: () => ke, canBeRepresented: () => j0, createFragmentShader: () => U0, createFramebuffer: () => J0, createProgram: () => H0, createStaticIndexBuffer: () => X0, createStaticVertexBuffer: () => K0, createTexture: () => Y0, createVertexShader: () => G0, getBatchDim: () => Ma, getExtensionOrThrow: () => sm, getFramebufferErrorMessage: () => EO, getMaxTexturesInShader: () => oC, getNumChannels: () => $Z, getProgramUniformLocation: () => eC, getProgramUniformLocationOrThrow: () => Q0, getRowsCols: () => La, getShapeAs3D: () => mh, getTextureShapeFromLogicalShape: () => rC, getWebGLDisjointQueryTimerVersion: () => sC, getWebGLErrorMessage: () => NO, getWebGLMaxTextureSize: () => nC, hasExtension: () => Mn, isCapableOfRenderingToFloatTexture: () => iC, isDownloadFloatTextureEnabled: () => aC, isReshapeFree: () => Al, isWebGLFenceEnabled: () => uC, isWebGLVersionEnabled: () => ay, linkProgram: () => q0, resetMaxTextureSize: () => FZ, resetMaxTexturesInShader: () => OZ, unbindColorTextureFromFramebuffer: () => ny, unbindTextureUnit: () => DZ, validateFramebuffer: () => im, validateProgram: () => ch, validateTextureSize: () => Z0 });
var Vu = {};
var V0 = { alpha: false, antialias: false, premultipliedAlpha: false, preserveDrawingBuffer: false, depth: false, stencil: false, failIfMajorPerformanceCaveat: true };
function W0(r, e) {
  Vu[r] = e;
}
function Yn(r) {
  if (!(r in Vu)) {
    let t = SZ(r);
    if (t !== null)
      Vu[r] = t;
    else
      return console.log("Could not get context for WebGL version", r), null;
  }
  let e = Vu[r];
  return e.isContextLost() ? (delete Vu[r], Yn(r)) : (e.disable(e.DEPTH_TEST), e.disable(e.STENCIL_TEST), e.disable(e.BLEND), e.disable(e.DITHER), e.disable(e.POLYGON_OFFSET_FILL), e.disable(e.SAMPLE_COVERAGE), e.enable(e.SCISSOR_TEST), e.enable(e.CULL_FACE), e.cullFace(e.BACK), Vu[r]);
}
function CZ(r) {
  if (typeof OffscreenCanvas != "undefined" && r === 2)
    return new OffscreenCanvas(300, 150);
  if (typeof document != "undefined")
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function SZ(r) {
  if (r !== 1 && r !== 2)
    throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  let e = CZ(r);
  return e.addEventListener("webglcontextlost", (t) => {
    t.preventDefault(), delete Vu[r];
  }, false), r === 1 ? e.getContext("webgl", V0) || e.getContext("experimental-webgl", V0) : e.getContext("webgl2", V0);
}
var El;
(function(r) {
  r[r.DENSE = 0] = "DENSE", r[r.SHARED_BATCH = 1] = "SHARED_BATCH";
})(El || (El = {}));
var zr;
(function(r) {
  r[r.RENDER = 0] = "RENDER", r[r.UPLOAD = 1] = "UPLOAD", r[r.PIXELS = 2] = "PIXELS", r[r.DOWNLOAD = 3] = "DOWNLOAD";
})(zr || (zr = {}));
var Tr;
(function(r) {
  r[r.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", r[r.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", r[r.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", r[r.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", r[r.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(Tr || (Tr = {}));
function Wu(r, e) {
  return [e, r];
}
function SO(r, e) {
  return r * e;
}
function lh(r) {
  let e = b.sizeFromShape(r), t = Math.ceil(e / 4);
  return b.sizeToSquarishShape(t);
}
function bi(r, e) {
  return [Math.max(1, Math.ceil(e / 2)), Math.max(1, Math.ceil(r / 2))];
}
function IO(r, e) {
  let [t, n] = bi(r, e);
  return t * n * 4;
}
function uh(r, e) {
  let t = r, n, o, s, a, i, l, u, c, p, m;
  return j().getNumber("WEBGL_VERSION") === 2 ? (n = t.R32F, o = t.R16F, s = t.RGBA16F, a = t.RGBA32F, i = t.RED, u = 4, c = 1, p = t.HALF_FLOAT, m = t.FLOAT) : (n = r.RGBA, o = r.RGBA, s = r.RGBA, a = t.RGBA, i = r.RGBA, u = 4, c = 4, p = e != null ? e.HALF_FLOAT_OES : null, m = r.FLOAT), l = r.RGBA, { internalFormatFloat: n, internalFormatHalfFloat: o, internalFormatPackedHalfFloat: s, internalFormatPackedFloat: a, textureFormatFloat: i, downloadTextureFormat: l, downloadUnpackNumChannels: u, defaultNumChannels: c, textureTypeHalfFloat: p, textureTypeFloat: m };
}
function ke(r, e) {
  let t = e();
  return j().getBool("DEBUG") && IZ(r), t;
}
function IZ(r) {
  let e = r.getError();
  if (e !== r.NO_ERROR)
    throw new Error("WebGL Error: " + NO(r, e));
}
var NZ = 596e-10;
var TZ = 65504;
function j0(r) {
  return !!(j().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || r === 0 || NZ < Math.abs(r) && Math.abs(r) < TZ);
}
function NO(r, e) {
  switch (e) {
    case r.NO_ERROR:
      return "NO_ERROR";
    case r.INVALID_ENUM:
      return "INVALID_ENUM";
    case r.INVALID_VALUE:
      return "INVALID_VALUE";
    case r.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case r.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case r.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case r.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${e}`;
  }
}
function sm(r, e) {
  return Pa(r, () => r.getExtension(e), 'Extension "' + e + '" not supported on this browser.');
}
function G0(r, e) {
  let t = Pa(r, () => r.createShader(r.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (ke(r, () => r.shaderSource(t, e)), ke(r, () => r.compileShader(t)), r.getShaderParameter(t, r.COMPILE_STATUS) === false)
    throw console.log(r.getShaderInfoLog(t)), new Error("Failed to compile vertex shader.");
  return t;
}
function U0(r, e) {
  let t = Pa(r, () => r.createShader(r.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (ke(r, () => r.shaderSource(t, e)), ke(r, () => r.compileShader(t)), r.getShaderParameter(t, r.COMPILE_STATUS) === false)
    throw AZ(e, r.getShaderInfoLog(t)), new Error("Failed to compile fragment shader.");
  return t;
}
var EZ = /ERROR: [0-9]+:([0-9]+):/g;
function AZ(r, e) {
  let t = EZ.exec(e);
  if (t == null) {
    console.log(`Couldn't parse line number in error: ${e}`), console.log(r);
    return;
  }
  let n = +t[1], o = r.split(`
`), s = o.length.toString().length + 2, a = o.map((p, m) => b.rightPad((m + 1).toString(), s) + p), i = 0;
  for (let p = 0; p < a.length; p++)
    i = Math.max(a[p].length, i);
  let l = a.slice(0, n - 1), u = a.slice(n - 1, n), c = a.slice(n);
  console.log(l.join(`
`)), console.log(e.split(`
`)[0]), console.log(`%c ${b.rightPad(u[0], i)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(c.join(`
`));
}
function H0(r) {
  return Pa(r, () => r.createProgram(), "Unable to create WebGLProgram.");
}
function q0(r, e) {
  if (ke(r, () => r.linkProgram(e)), r.getProgramParameter(e, r.LINK_STATUS) === false)
    throw console.log(r.getProgramInfoLog(e)), new Error("Failed to link vertex and fragment shaders.");
}
function ch(r, e) {
  if (ke(r, () => r.validateProgram(e)), r.getProgramParameter(e, r.VALIDATE_STATUS) === false)
    throw console.log(r.getProgramInfoLog(e)), new Error("Shader program validation failed.");
}
function K0(r, e) {
  let t = Pa(r, () => r.createBuffer(), "Unable to create WebGLBuffer");
  return ke(r, () => r.bindBuffer(r.ARRAY_BUFFER, t)), ke(r, () => r.bufferData(r.ARRAY_BUFFER, e, r.STATIC_DRAW)), t;
}
function X0(r, e) {
  let t = Pa(r, () => r.createBuffer(), "Unable to create WebGLBuffer");
  return ke(r, () => r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, t)), ke(r, () => r.bufferData(r.ELEMENT_ARRAY_BUFFER, e, r.STATIC_DRAW)), t;
}
function $Z() {
  return j().getNumber("WEBGL_VERSION") === 2 ? 1 : 4;
}
function Y0(r) {
  return Pa(r, () => r.createTexture(), "Unable to create WebGLTexture.");
}
function Z0(r, e) {
  let t = j().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (r <= 0 || e <= 0) {
    let n = `[${r}x${e}]`;
    throw new Error("Requested texture size " + n + " is invalid.");
  }
  if (r > t || e > t) {
    let n = `[${r}x${e}]`, o = `[${t}x${t}]`;
    throw new Error("Requested texture size " + n + " greater than WebGL maximum on this browser / GPU " + o + ".");
  }
}
function J0(r) {
  return Pa(r, () => r.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function ry(r, e, t, n, o, s, a) {
  let i = r.getAttribLocation(e, t);
  return i === -1 ? false : (ke(r, () => r.bindBuffer(r.ARRAY_BUFFER, n)), ke(r, () => r.vertexAttribPointer(i, o, r.FLOAT, false, s, a)), ke(r, () => r.enableVertexAttribArray(i)), true);
}
function TO(r, e, t) {
  AO(r, t), ke(r, () => r.activeTexture(r.TEXTURE0 + t)), ke(r, () => r.bindTexture(r.TEXTURE_2D, e));
}
function DZ(r, e) {
  AO(r, e), ke(r, () => r.activeTexture(r.TEXTURE0 + e)), ke(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function Q0(r, e, t) {
  return Pa(r, () => r.getUniformLocation(e, t), 'uniform "' + t + '" not present in program.');
}
function eC(r, e, t) {
  return r.getUniformLocation(e, t);
}
function tC(r, e, t, n) {
  ke(r, () => TO(r, e, n)), ke(r, () => r.uniform1i(t, n));
}
function RZ(r) {
  ke(r, () => r.bindFramebuffer(r.FRAMEBUFFER, null)), ke(r, () => r.viewport(0, 0, r.canvas.width, r.canvas.height)), ke(r, () => r.scissor(0, 0, r.canvas.width, r.canvas.height));
}
function ph(r, e, t) {
  ke(r, () => r.bindFramebuffer(r.FRAMEBUFFER, t)), ke(r, () => r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, e, 0));
}
function ny(r, e) {
  ke(r, () => r.bindFramebuffer(r.FRAMEBUFFER, e)), ke(r, () => r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, null, 0));
}
function im(r) {
  let e = r.checkFramebufferStatus(r.FRAMEBUFFER);
  if (e !== r.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + EO(r, e));
}
function EO(r, e) {
  switch (e) {
    case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case r.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${e}`;
  }
}
function Pa(r, e, t) {
  let n = ke(r, () => e());
  if (n == null)
    throw new Error(t);
  return n;
}
function AO(r, e) {
  let t = r.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, n = e + r.TEXTURE0;
  if (n < r.TEXTURE0 || n > t) {
    let o = `[gl.TEXTURE0, gl.TEXTURE${t}]`;
    throw new Error(`textureUnit must be in ${o}.`);
  }
}
function Ma(r, e = 2) {
  return b.sizeFromShape(r.slice(0, r.length - e));
}
function La(r) {
  if (r.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [r.length > 1 ? r[r.length - 2] : 1, r[r.length - 1]];
}
function mh(r) {
  let e = [1, 1, 1];
  return r.length === 0 || r.length === 1 && r[0] === 1 || (e = [Ma(r), ...La(r)]), e;
}
function rC(r, e = false) {
  let t = j().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  e && (t = t * 2, r = r.map((o, s) => s >= r.length - 2 ? b.nearestLargerEven(r[s]) : r[s]), r.length === 1 && (r = [2, r[0]])), r.length !== 2 && (r = b.squeezeShape(r).newShape);
  let n = b.sizeFromShape(r);
  if (r.length <= 1 && n <= t)
    return [1, n];
  if (r.length === 2 && r[0] <= t && r[1] <= t)
    return r;
  if (r.length === 3 && r[0] * r[1] <= t && r[2] <= t)
    return [r[0] * r[1], r[2]];
  if (r.length === 3 && r[0] <= t && r[1] * r[2] <= t)
    return [r[0], r[1] * r[2]];
  if (r.length === 4 && r[0] * r[1] * r[2] <= t && r[3] <= t)
    return [r[0] * r[1] * r[2], r[3]];
  if (r.length === 4 && r[0] <= t && r[1] * r[2] * r[3] <= t)
    return [r[0], r[1] * r[2] * r[3]];
  if (e) {
    let o = Ma(r), s = 2, a = 2;
    return r.length && ([s, a] = La(r)), n = o * (s / 2) * (a / 2), b.sizeToSquarishShape(n).map((i) => i * 2);
  }
  return b.sizeToSquarishShape(n);
}
function oy(r) {
  return r % 2 == 0;
}
function Al(r, e) {
  if (r = r.slice(-2), e = e.slice(-2), b.arraysEqual(r, e) || !r.length || !e.length || r[0] === 0 || r[1] === 0 || e[0] === 0 || e[1] === 0)
    return true;
  if (r.length !== e.length) {
    let t = r.slice(-1)[0], n = e.slice(-1)[0];
    if (t === n || oy(t) && oy(n) && (r[0] === 1 || e[0] === 1))
      return true;
  }
  return r[1] === e[1] && oy(r[0]) && oy(e[0]);
}
var sy;
var iy;
function nC(r) {
  if (sy == null) {
    let e = Yn(r);
    sy = e.getParameter(e.MAX_TEXTURE_SIZE);
  }
  return sy;
}
function FZ() {
  sy = null;
}
function OZ() {
  iy = null;
}
function oC(r) {
  if (iy == null) {
    let e = Yn(r);
    iy = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, iy);
}
function sC(r) {
  if (r === 0)
    return 0;
  let e, t = Yn(r);
  return Mn(t, "EXT_disjoint_timer_query_webgl2") && r === 2 ? e = 2 : Mn(t, "EXT_disjoint_timer_query") ? e = 1 : e = 0, e;
}
function Mn(r, e) {
  return r.getExtension(e) != null;
}
function ay(r) {
  try {
    if (Yn(r) != null)
      return true;
  } catch (e) {
    return console.log("Error when getting WebGL context: ", e), false;
  }
  return false;
}
function iC(r) {
  if (r === 0)
    return false;
  let e = Yn(r);
  if (r === 1) {
    if (!Mn(e, "OES_texture_float"))
      return false;
  } else if (!Mn(e, "EXT_color_buffer_float"))
    return false;
  return lC(e);
}
function aC(r) {
  if (r === 0)
    return false;
  let e = Yn(r);
  if (r === 1) {
    if (!Mn(e, "OES_texture_float") || !Mn(e, "WEBGL_color_buffer_float"))
      return false;
  } else {
    if (Mn(e, "EXT_color_buffer_float"))
      return lC(e);
    let n = "EXT_color_buffer_half_float";
    if (Mn(e, n)) {
      let o = e.getExtension(n);
      return PZ(e, o);
    }
    return false;
  }
  return lC(e);
}
function lC(r) {
  let e = uh(r), t = r.createTexture();
  r.bindTexture(r.TEXTURE_2D, t);
  let n = 1, o = 1;
  r.texImage2D(r.TEXTURE_2D, 0, e.internalFormatFloat, n, o, 0, e.textureFormatFloat, e.textureTypeFloat, null);
  let s = r.createFramebuffer();
  r.bindFramebuffer(r.FRAMEBUFFER, s), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, t, 0);
  let a = r.checkFramebufferStatus(r.FRAMEBUFFER) === r.FRAMEBUFFER_COMPLETE;
  return r.bindTexture(r.TEXTURE_2D, null), r.bindFramebuffer(r.FRAMEBUFFER, null), r.deleteTexture(t), r.deleteFramebuffer(s), a;
}
function PZ(r, e) {
  let t = uh(r, e), n = r.createTexture();
  r.bindTexture(r.TEXTURE_2D, n);
  let o = 1, s = 1;
  r.texImage2D(r.TEXTURE_2D, 0, t.internalFormatHalfFloat, o, s, 0, t.textureFormatFloat, t.textureTypeHalfFloat, null);
  let a = r.createFramebuffer();
  r.bindFramebuffer(r.FRAMEBUFFER, a), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, n, 0);
  let i = r.checkFramebufferStatus(r.FRAMEBUFFER) === r.FRAMEBUFFER_COMPLETE;
  return r.bindTexture(r.TEXTURE_2D, null), r.bindFramebuffer(r.FRAMEBUFFER, null), r.deleteTexture(n), r.deleteFramebuffer(a), i;
}
function uC(r) {
  return r !== 2 ? false : Yn(r).fenceSync != null;
}
function Ds(r, e) {
  Array.isArray(r) || (r = [r]), r.forEach((t) => {
    t != null && b.assert(t.dtype !== "complex64", () => `${e} does not support complex64 tensors in the WebGL backend.`);
  });
}
var Re = j();
Re.registerFlag("HAS_WEBGL", () => Re.getNumber("WEBGL_VERSION") > 0);
Re.registerFlag("WEBGL_VERSION", () => ay(2) ? 2 : ay(1) ? 1 : 0);
Re.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => false);
Re.registerFlag("WEBGL_BUFFER_SUPPORTED", () => Re.get("WEBGL_VERSION") === 2);
Re.registerFlag("WEBGL_CPU_FORWARD", () => true);
Re.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => false);
Re.registerFlag("WEBGL_PACK", () => Re.getBool("HAS_WEBGL"));
Re.registerFlag("WEBGL_PACK_NORMALIZATION", () => Re.getBool("WEBGL_PACK"));
Re.registerFlag("WEBGL_PACK_CLIP", () => Re.getBool("WEBGL_PACK"));
Re.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => Re.getBool("WEBGL_PACK"));
Re.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => Re.getBool("WEBGL_PACK"));
Re.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => Re.getBool("WEBGL_PACK"));
Re.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => Re.getBool("WEBGL_PACK"));
Re.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => Re.getBool("WEBGL_PACK"));
Re.registerFlag("WEBGL_PACK_REDUCE", () => Re.getBool("WEBGL_PACK"));
Re.registerFlag("WEBGL_LAZILY_UNPACK", () => Re.getBool("WEBGL_PACK"));
Re.registerFlag("WEBGL_CONV_IM2COL", () => Re.getBool("WEBGL_PACK"));
Re.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => nC(Re.getNumber("WEBGL_VERSION")));
Re.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => oC(Re.getNumber("WEBGL_VERSION")));
Re.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  let r = Re.getNumber("WEBGL_VERSION");
  return r === 0 ? 0 : sC(r);
});
Re.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => Re.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !Ql.isMobile());
Re.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => iC(Re.getNumber("WEBGL_VERSION")));
Re.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => Re.getBool("WEBGL_FORCE_F16_TEXTURES") ? false : Re.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
Re.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => aC(Re.getNumber("WEBGL_VERSION")));
Re.registerFlag("WEBGL_FENCE_API_ENABLED", () => uC(Re.getNumber("WEBGL_VERSION")));
Re.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => Re.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
Re.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (r) => {
  if (r < 0 && r !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`);
});
Re.registerFlag("WEBGL_FLUSH_THRESHOLD", () => Ql.isMobile() && Re.getBool("IS_CHROME") ? 1 : -1, (r) => {
  if (r < 0 && r !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`);
});
Re.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
Re.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => false);
Re.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
Re.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
function zt() {
  let r, e, t, n, o, s, a, i, l, u;
  return j().getNumber("WEBGL_VERSION") === 2 ? (r = "#version 300 es", e = "in", t = "out", n = "in", o = "texture", s = "outputColor", a = "out vec4 outputColor;", i = `
      bool isnan_custom(float val) {
        return (val > 0.0 || val < 0.0) ? false : val != 0.0;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `, l = "", u = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (r = "", e = "attribute", t = "varying", n = "varying", o = "texture2D", s = "gl_FragColor", a = "", i = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, u = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), { version: r, attribute: e, varyingVs: t, varyingFs: n, texture2D: o, output: s, defineOutput: a, defineSpecialNaN: i, defineSpecialInf: l, defineRound: u };
}
function Rs(r, e, t = "index") {
  let n = b.computeStrides(e);
  return n.map((o, s) => {
    let a = `int ${r[s]} = ${t} / ${o}`, i = s === n.length - 1 ? `int ${r[s + 1]} = ${t} - ${r[s]} * ${o}` : `index -= ${r[s]} * ${o}`;
    return `${a}; ${i};`;
  }).join("");
}
function ju(r, e, t = "index") {
  let n = b.computeStrides(e);
  return n.map((o, s) => {
    let a = `int ${r[s]} = ${t} / outShapeStrides[${s}]`, i = s === n.length - 1 ? `int ${r[s + 1]} = ${t} - ${r[s]} * outShapeStrides[${s}]` : `index -= ${r[s]} * outShapeStrides[${s}]`;
    return `${a}; ${i};`;
  }).join("");
}
function MZ(r, e) {
  let t = r.length, n = r.map((s) => `${e}[${s}]`), o = new Array(t - 1);
  o[t - 2] = n[t - 1];
  for (let s = t - 3; s >= 0; --s)
    o[s] = `(${o[s + 1]} * ${n[s + 1]})`;
  return o;
}
function DO(r, e, t = "index") {
  let n = r.map((s, a) => a), o = MZ(n, e);
  return o.map((s, a) => {
    let i = `int ${r[a]} = ${t} / ${o[a]}`, l = a === o.length - 1 ? `int ${r[a + 1]} = ${t} - ${r[a]} * ${o[a]}` : `index -= ${r[a]} * ${o[a]}`;
    return `${i}; ${l};`;
  }).join("");
}
function am(r) {
  let e = b.computeStrides(r).map((t) => t.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`;
}
function lm() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
var ly = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
var { getBroadcastDims: RO } = S;
function FO(r, e, t) {
  let n = [];
  if (r.forEach((f) => {
    let d = b.sizeFromShape(f.shapeInfo.logicalShape);
    if (f.shapeInfo.isUniform ? n.push(`uniform float ${f.name}${d > 1 ? `[${d}]` : ""};`) : (n.push(`uniform sampler2D ${f.name};`), n.push(`uniform int offset${f.name};`)), t.enableShapeUniforms) {
      let { uniformShape: h } = uy(t.packedInputs, f.shapeInfo.logicalShape, f.shapeInfo.texShape);
      switch (h.length) {
        case 1:
          n.push(`uniform int ${f.name}Shape;`);
          break;
        case 2:
          n.push(`uniform ivec2 ${f.name}Shape;`);
          break;
        case 3:
          n.push(`uniform ivec3 ${f.name}Shape;`);
          break;
        case 4:
          n.push(`uniform ivec4 ${f.name}Shape;`);
          break;
        default:
          break;
      }
      n.push(`uniform ivec2 ${f.name}TexShape;`);
    }
  }), t.enableShapeUniforms) {
    switch (e.logicalShape.length) {
      case 1:
        n.push("uniform int outShape;");
        break;
      case 2:
        n.push("uniform ivec2 outShape;"), n.push("uniform int outShapeStrides;");
        break;
      case 3:
        n.push("uniform ivec3 outShape;"), n.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        n.push("uniform ivec4 outShape;"), n.push("uniform ivec3 outShapeStrides;");
        break;
      default:
        break;
    }
    n.push("uniform ivec2 outTexShape;");
  }
  t.customUniforms && t.customUniforms.forEach((f) => {
    n.push(`uniform ${f.type} ${f.name}${f.arrayIndex ? `[${f.arrayIndex}]` : ""};`);
  });
  let o = n.join(`
`), s = r.map((f) => LZ(f, e, t.packedInputs, t.enableShapeUniforms)).join(`
`), a = e.texShape, i = zt(), l = VZ(i), u, c, p = GZ(i);
  return e.isPacked ? (u = zZ(e.logicalShape, a, t.enableShapeUniforms), c = jZ(i)) : (u = BZ(e.logicalShape, a, t.enableShapeUniforms), c = WZ(i)), t.packedInputs && (p += KZ), [p, l, c, o, u, s, t.userCode].join(`
`);
}
function um(r, e = false) {
  let t = r.shapeInfo.logicalShape;
  switch (t.length) {
    case 0:
      return iJ(r, e);
    case 1:
      return lJ(r, e);
    case 2:
      return cJ(r, e);
    case 3:
      return mJ(r, e);
    case 4:
      return dJ(r, e);
    case 5:
      return hJ(r);
    case 6:
      return gJ(r);
    default:
      throw new Error(`${t.length}-D input sampling is not yet supported`);
  }
}
function OO(r, e) {
  switch (r.shapeInfo.logicalShape.length) {
    case 0:
      return sJ(r);
    case 1:
      return aJ(r, e);
    case 2:
      return uJ(r, e);
    case 3:
      return pJ(r, e);
    default:
      return fJ(r, e);
  }
}
function LZ(r, e, t = false, n) {
  let o = "";
  t ? o += OO(r, n) : o += um(r, n);
  let s = r.shapeInfo.logicalShape, a = e.logicalShape;
  return s.length <= a.length && (t ? o += xJ(r, e) : o += yJ(r, e)), o;
}
function zZ(r, e, t) {
  switch (r.length) {
    case 0:
      return PO();
    case 1:
      return XZ(r, e, t);
    case 2:
      return nJ(r, e, t);
    case 3:
      return ZZ(r, e, t);
    default:
      return QZ(r, e, t);
  }
}
function BZ(r, e, t) {
  switch (r.length) {
    case 0:
      return PO();
    case 1:
      return YZ(r, e, t);
    case 2:
      return oJ(r, e, t);
    case 3:
      return JZ(r, e, t);
    case 4:
      return eJ(r, e, t);
    case 5:
      return tJ(r, e);
    case 6:
      return rJ(r, e);
    default:
      throw new Error(`${r.length}-D output sampling is not yet supported`);
  }
}
function VZ(r) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `;
}
function WZ(r) {
  return `
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function jZ(r) {
  return `
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `;
}
function GZ(r) {
  return `${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${UZ}
    ${HZ}
    ${qZ}
  `;
}
var UZ = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var HZ = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var qZ = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var KZ = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function PO() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function XZ(r, e, t) {
  let n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
  return n[0] === 1 ? t ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${n[1]}.0);
      }
    ` : n[1] === 1 ? t ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${n[0]}.0);
      }
    ` : t ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));
      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);
    }
  `;
}
function YZ(r, e, t) {
  return e[0] === 1 ? t ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    ` : e[1] === 1 ? t ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    ` : t ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `;
}
function ZZ(r, e, t) {
  if (t)
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  let n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], o = Math.ceil(r[2] / 2), s = o * Math.ceil(r[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));
      int index = resTexRC.x * ${n[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function JZ(r, e, t) {
  if (t)
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${ju(["r", "c", "d"], r)}
    return ivec3(r, c, d);
  }
`;
  let n = Rs(["r", "c", "d"], r);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${n}
      return ivec3(r, c, d);
    }
  `;
}
function QZ(r, e, t) {
  if (t)
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  let n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], o = Math.ceil(r[r.length - 1] / 2), s = o * Math.ceil(r[r.length - 2] / 2), a = s, i = "", l = "b, r, c";
  for (let u = 2; u < r.length - 1; u++)
    a *= r[r.length - u - 1], i = `
      int b${u} = index / ${a};
      index -= b${u} * ${a};
    ` + i, l = `b${u}, ` + l;
  return `
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));
      int index = resTexRC.x * ${n[1]} + resTexRC.y;

      ${i}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec${r.length}(${l});
    }
  `;
}
function eJ(r, e, t) {
  if (t)
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${ju(["r", "c", "d", "d2"], r)}
      return ivec4(r, c, d, d2);
    }
  `;
  let n = Rs(["r", "c", "d", "d2"], r);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${n}
      return ivec4(r, c, d, d2);
    }
  `;
}
function tJ(r, e) {
  let t = Rs(["r", "c", "d", "d2", "d3"], r);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function rJ(r, e) {
  let t = Rs(["r", "c", "d", "d2", "d3", "d4"], r);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function nJ(r, e, t) {
  let n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
  if (b.arraysEqual(r, e))
    return t ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));
      }
    `;
  let o = Math.ceil(r[1] / 2);
  return t ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));

      int index = resTexRC.x * ${n[1]} + resTexRC.y;
      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec2(r, c);
    }
  `;
}
function oJ(r, e, t) {
  return b.arraysEqual(r, e) ? t ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    ` : r[1] === 1 ? t ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : r[0] === 1 ? t ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : t ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `;
}
function Gu(r) {
  return `offset${r}`;
}
function sJ(r) {
  let e = r.name, t = "get" + e.charAt(0).toUpperCase() + e.slice(1), n = zt();
  return `
    vec4 ${t}() {
      return ${n.texture2D}(${e}, halfCR);
    }
  `;
}
function iJ(r, e) {
  let t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1);
  if (r.shapeInfo.isUniform)
    return `float ${n}() {return ${t};}`;
  let [o, s] = r.shapeInfo.texShape;
  if (o === 1 && s === 1)
    return `
      float ${n}() {
        return sampleTexture(${t}, halfCR);
      }
    `;
  let a = Gu(t);
  if (e)
    return `
    float ${n}() {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], ${a});
      return sampleTexture(${t}, uv);
    }
  `;
  let [i, l] = r.shapeInfo.texShape;
  return `
    float ${n}() {
      vec2 uv = uvFromFlat(${i}, ${l}, ${a});
      return sampleTexture(${t}, uv);
    }
  `;
}
function aJ(r, e) {
  let t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), o = r.shapeInfo.texShape, s = zt();
  if (e)
    return `
    vec4 ${n}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${t}, uv);
    }
  `;
  let a = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)];
  return `
    vec4 ${n}(int index) {
      vec2 uv = packedUVfrom1D(
        ${a[0]}, ${a[1]}, index);
      return ${s.texture2D}(${t}, uv);
    }
  `;
}
function lJ(r, e) {
  let t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1);
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int index) {
        ${cm(r)}
      }
    `;
  let o = r.shapeInfo.texShape, s = o[0], a = o[1];
  if (a === 1 && s === 1)
    return `
      float ${n}(int index) {
        return sampleTexture(${t}, halfCR);
      }
    `;
  let i = Gu(t);
  return a === 1 ? e ? `
      float ${n}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${t}TexShape[0]));
        return sampleTexture(${t}, uv);
      }
    ` : `
      float ${n}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);
        return sampleTexture(${t}, uv);
      }
    ` : s === 1 ? e ? `
      float ${n}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${t}TexShape[1]), 0.5);
        return sampleTexture(${t}, uv);
      }
    ` : `
      float ${n}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);
        return sampleTexture(${t}, uv);
      }
    ` : e ? `
    float ${n}(int index) {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], index + ${i});
      return sampleTexture(${t}, uv);
    }
  ` : `
    float ${n}(int index) {
      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});
      return sampleTexture(${t}, uv);
    }
  `;
}
function uJ(r, e) {
  let t = r.shapeInfo.logicalShape, n = r.name, o = "get" + n.charAt(0).toUpperCase() + n.slice(1), s = r.shapeInfo.texShape, a = s[0], i = s[1], l = zt();
  if (s != null && b.arraysEqual(t, s))
    return e ? `
      vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${n}TexShape[1], ${n}TexShape[0]);

        return ${l.texture2D}(${n}, uv);
      }
    ` : `
      vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);

        return ${l.texture2D}(${n}, uv);
      }
    `;
  if (e)
    return `
    vec4 ${o}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${n}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${n}, uv);
    }
  `;
  let u = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)], c = Math.ceil(t[1] / 2);
  return `
    vec4 ${o}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${n}, uv);
    }
  `;
}
function cJ(r, e) {
  let t = r.shapeInfo.logicalShape, n = r.name, o = "get" + n.charAt(0).toUpperCase() + n.slice(1), s = r.shapeInfo.texShape;
  if (s != null && b.arraysEqual(t, s)) {
    if (e)
      return `
      float ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${n}TexShape[1], ${n}TexShape[0]);
        return sampleTexture(${n}, uv);
      }
    `;
    let m = s[0], f = s[1];
    return `
    float ${o}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${f}.0, ${m}.0);
      return sampleTexture(${n}, uv);
    }
  `;
  }
  let { newShape: a, keptDims: i } = b.squeezeShape(t), l = a;
  if (l.length < t.length) {
    let m = pm(r, l), f = ["row", "col"];
    return `
      ${um(m, e)}
      float ${o}(int row, int col) {
        return ${o}(${mm(f, i)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));
        ${cm(r)}
      }
    `;
  let u = s[0], c = s[1], p = Gu(n);
  return c === 1 ? e ? `
      float ${o}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${n}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${n}TexShape[0]));
        return sampleTexture(${n}, uv);
      }
    ` : `
    float ${o}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${n}, uv);
    }
  ` : u === 1 ? e ? `
      float ${o}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${n}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${n}TexShape[1]), 0.5);
        return sampleTexture(${n}, uv);
      }
    ` : `
    float ${o}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${n}, uv);
    }
  ` : e ? `
      float ${o}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${n}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index);
        return sampleTexture(${n}, uv);
      }
    ` : `
  float ${o}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${t[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${n}, uv);
  }
`;
}
function pJ(r, e) {
  let t = r.shapeInfo.logicalShape, n = r.name, o = "get" + n.charAt(0).toUpperCase() + n.slice(1), s = r.shapeInfo.texShape, a = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)];
  if (t[0] === 1) {
    let m = t.slice(1), f = [1, 2], d = pm(r, m), h = ["b", "row", "col"];
    return `
        ${OO(d, e)}
        vec4 ${o}(int b, int row, int col) {
          return ${o}(${mm(h, f)});
        }
      `;
  }
  let i = zt();
  if (e)
    return `
    vec4 ${o}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${n}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${i.texture2D}(${n}, uv);
    }
  `;
  let l = a[0], u = a[1], c = Math.ceil(t[2] / 2), p = c * Math.ceil(t[1] / 2);
  return `
    vec4 ${o}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${u}, ${p}, ${c}, b, row, col);
      return ${i.texture2D}(${n}, uv);
    }
  `;
}
function mJ(r, e) {
  let t = r.shapeInfo.logicalShape, n = r.name, o = "get" + n.charAt(0).toUpperCase() + n.slice(1), s = t[1] * t[2], a = t[2], { newShape: i, keptDims: l } = b.squeezeShape(t), u = i;
  if (u.length < t.length) {
    let h = pm(r, u), g = ["row", "col", "depth"];
    return `
        ${um(h, e)}
        float ${o}(int row, int col, int depth) {
          return ${o}(${mm(g, l)});
        }
      `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${a}, 1)));
        ${cm(r)}
      }
    `;
  let c = r.shapeInfo.texShape, p = c[0], m = c[1], f = r.shapeInfo.flatOffset;
  if (m === s && f == null)
    return e ? `
      float ${o}(int row, int col, int depth) {
        int stride1 = ${n}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${n}TexShape[1], ${n}TexShape[0]);
        return sampleTexture(${n}, uv);
      }
    ` : `
        float ${o}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${a}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${p}.0);
          return sampleTexture(${n}, uv);
        }
      `;
  if (m === a && f == null)
    return e ? `
      float ${o}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${n}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}TexShape[1], ${n}TexShape[0]);
        return sampleTexture(${n}, uv);
      }
    ` : `
    float ${o}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${p}.0);
      return sampleTexture(${n}, uv);
    }
  `;
  let d = Gu(n);
  return e ? `
    float ${o}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${n}Shape[1] * ${n}Shape[2];
      int stride1 = ${n}Shape[2];
      int index = row * ${s} + col * ${a} + depth + ${d};
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index);
      return sampleTexture(${n}, uv);
    }
    ` : `
      float ${o}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${a} + depth + ${d};
        vec2 uv = uvFromFlat(${p}, ${m}, index);
        return sampleTexture(${n}, uv);
      }
  `;
}
function fJ(r, e) {
  let t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), o = zt();
  if (e)
    return `
    vec4 ${n}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${t}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${t}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${t}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${o.texture2D}(${t}, uv);
    }
  `;
  let s = r.shapeInfo.logicalShape, a = s.length, i = r.shapeInfo.texShape, l = [Math.ceil(i[0] / 2), Math.ceil(i[1] / 2)], u = l[0], c = l[1], p = Math.ceil(s[a - 1] / 2), m = p * Math.ceil(s[a - 2] / 2), f = "int b, int row, int col", d = `b * ${m} + (row / 2) * ${p} + (col / 2)`;
  for (let h = 2; h < a - 1; h++)
    f = `int b${h}, ` + f, m *= s[a - h - 1], d = `b${h} * ${m} + ` + d;
  return `
    vec4 ${n}(${f}) {
      int index = ${d};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${o.texture2D}(${t}, uv);
    }
  `;
}
function dJ(r, e) {
  let t = r.shapeInfo.logicalShape, n = r.name, o = "get" + n.charAt(0).toUpperCase() + n.slice(1), s = t[3], a = t[2] * s, i = t[1] * a, { newShape: l, keptDims: u } = b.squeezeShape(t);
  if (l.length < t.length) {
    let w = pm(r, l), x = ["row", "col", "depth", "depth2"];
    return `
      ${um(w, e)}
      float ${o}(int row, int col, int depth, int depth2) {
        return ${o}(${mm(x, u)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${i}, ${a}, ${s}, 1)));
        ${cm(r)}
      }
    `;
  let c = r.shapeInfo.flatOffset, p = r.shapeInfo.texShape, m = p[0], f = p[1], d = `int stride2 = ${n}Shape[3];`, h = `int stride1 = ${n}Shape[2] * stride2;`, g = `int stride0 = ${n}Shape[1] * stride1;`;
  if (f === i && c == null)
    return e ? `
      float ${o}(int row, int col, int depth, int depth2) {
        ${d}
        ${h}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${n}TexShape[1], ${n}TexShape[0]);
        return sampleTexture(${n}, uv);
      }
    ` : `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${a}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  if (f === s && c == null)
    return e ? `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${n}Shape[1] * ${n}Shape[2], ${n}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${n}TexShape[1], ${n}TexShape[0]);
        return sampleTexture(${n}, uv);
      }
    ` : `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${t[1] * t[2]}, ${t[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${n}, uv);
      }
    `;
  let y = Gu(n);
  return e ? `
    float ${o}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${d}
      ${h}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${y});
      return sampleTexture(${n}, uv);
    }
  ` : `
    float ${o}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${f}, index + ${y});
      return sampleTexture(${n}, uv);
    }
  `;
}
function hJ(r) {
  let e = r.shapeInfo.logicalShape, t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), o = e[4], s = e[3] * o, a = e[2] * s, i = e[1] * a, { newShape: l, keptDims: u } = b.squeezeShape(e);
  if (l.length < e.length) {
    let h = pm(r, l), g = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${um(h)}
      float ${n}(int row, int col, int depth, int depth2, int depth3) {
        return ${n}(${mm(g, u)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${i}, ${a}, ${s}, ${o})) +
          depth3;
        ${cm(r)}
      }
    `;
  let c = r.shapeInfo.flatOffset, p = r.shapeInfo.texShape, m = p[0], f = p[1];
  if (f === i && c == null)
    return `
      float ${n}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${a}, ${s}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  if (f === o && c == null)
    return `
      float ${n}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3]},
               ${e[2] * e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  let d = Gu(t);
  return `
    float ${n}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} + depth * ${s} +
          depth2 * ${o} + depth3 + ${d};
      vec2 uv = uvFromFlat(${m}, ${f}, index);
      return sampleTexture(${t}, uv);
    }
  `;
}
function gJ(r) {
  let e = r.shapeInfo.logicalShape, t = r.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), { newShape: o, keptDims: s } = b.squeezeShape(e);
  if (o.length < e.length) {
    let g = pm(r, o), y = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${um(g)}
      float ${n}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${n}(${mm(y, s)});
      }
    `;
  }
  let a = e[5], i = e[4] * a, l = e[3] * i, u = e[2] * l, c = e[1] * u;
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${l}, ${i})) +
          dot(
            vec2(depth3, depth4),
            vec2(${a}, 1)));
        ${cm(r)}
      }
    `;
  let p = r.shapeInfo.flatOffset, m = r.shapeInfo.texShape, f = m[0], d = m[1];
  if (d === c && p == null)
    return `
      float ${n}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${l}, ${i}, ${a})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${f}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  if (d === a && p == null)
    return `
      float ${n}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3] * e[4]},
               ${e[2] * e[3] * e[4]},
               ${e[3] * e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${f}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  let h = Gu(t);
  return `
    float ${n}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${l} +
          depth2 * ${i} + depth3 * ${a} + depth4 + ${h};
      vec2 uv = uvFromFlat(${f}, ${d}, index);
      return sampleTexture(${t}, uv);
    }
  `;
}
function cm(r) {
  let e = r.name, t = b.sizeFromShape(r.shapeInfo.logicalShape);
  return t < 2 ? `return ${e};` : `
    for (int i = 0; i < ${t}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `;
}
function xJ(r, e) {
  let t = r.name, n = t.charAt(0).toUpperCase() + t.slice(1), o = "get" + n + "AtOutCoords", s = r.shapeInfo.logicalShape.length, a = e.logicalShape.length, i = RO(r.shapeInfo.logicalShape, e.logicalShape), l = ze(a), u = a - s, c, p = ["x", "y", "z", "w", "u", "v"];
  s === 0 ? c = "" : a < 2 && i.length >= 1 ? c = "coords = 0;" : c = i.map((w) => `coords.${p[w + u]} = 0;`).join(`
`);
  let m = "";
  a < 2 && s > 0 ? m = "coords" : m = r.shapeInfo.logicalShape.map((w, x) => `coords.${p[x + u]}`).join(", ");
  let f = "return outputValue;", h = b.sizeFromShape(r.shapeInfo.logicalShape) === 1, y = b.sizeFromShape(e.logicalShape) === 1;
  if (s === 1 && !h && !y)
    f = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (h && !y)
    a === 1 ? f = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : f = `
        return vec4(outputValue.x);
      `;
  else if (i.length) {
    let w = s - 2, x = s - 1;
    i.indexOf(w) > -1 && i.indexOf(x) > -1 ? f = "return vec4(outputValue.x);" : i.indexOf(w) > -1 ? f = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : i.indexOf(x) > -1 && (f = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${o}() {
      ${l} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${n}(${m});
      ${f}
    }
  `;
}
function yJ(r, e) {
  let t = r.name, n = t.charAt(0).toUpperCase() + t.slice(1), o = "get" + n + "AtOutCoords", s = e.texShape, a = r.shapeInfo.texShape, i = r.shapeInfo.logicalShape.length, l = e.logicalShape.length;
  if (!r.shapeInfo.isUniform && i === l && r.shapeInfo.flatOffset == null && b.arraysEqual(a, s))
    return `
      float ${o}() {
        return sampleTexture(${t}, resultUV);
      }
    `;
  let u = ze(l), c = RO(r.shapeInfo.logicalShape, e.logicalShape), p = l - i, m, f = ["x", "y", "z", "w", "u", "v"];
  i === 0 ? m = "" : l < 2 && c.length >= 1 ? m = "coords = 0;" : m = c.map((h) => `coords.${f[h + p]} = 0;`).join(`
`);
  let d = "";
  return l < 2 && i > 0 ? d = "coords" : d = r.shapeInfo.logicalShape.map((h, g) => `coords.${f[g + p]}`).join(", "), `
    float ${o}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${n}(${d});
    }
  `;
}
function ze(r) {
  if (r <= 1)
    return "int";
  if (r === 2)
    return "ivec2";
  if (r === 3)
    return "ivec3";
  if (r === 4)
    return "ivec4";
  if (r === 5)
    return "ivec5";
  if (r === 6)
    return "ivec6";
  throw Error(`GPU for rank ${r} is not yet supported`);
}
function uy(r, e, t) {
  let { newShape: n, keptDims: o } = b.squeezeShape(e), s = e.length, a = r && s === 3 && e[0] === 1, i = a ? e.slice(1) : n, l = !r && s > 1 && !b.arraysEqual(e, t) && n.length < s || a;
  return { useSqueezeShape: l, uniformShape: l ? i : e, keptDims: o };
}
function pm(r, e) {
  let t = JSON.parse(JSON.stringify(r));
  return t.shapeInfo.logicalShape = e, t;
}
function mm(r, e) {
  return e.map((t) => r[t]).join(", ");
}
function MO(r, e, t, n) {
  let o = t.map((x, k) => {
    let C = { logicalShape: x.shape, texShape: x.isUniform ? null : x.texData.texShape, isUniform: x.isUniform, isPacked: x.isUniform ? false : x.texData.isPacked, flatOffset: null };
    return x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0 && (C.flatOffset = x.texData.slice.flatOffset), { name: e.variableNames[k], shapeInfo: C };
  }), s = o.map((x) => x.shapeInfo), a = { logicalShape: n.shape, texShape: n.texData.texShape, isUniform: false, isPacked: n.texData.isPacked, flatOffset: null }, i = FO(o, a, e), l = r.createProgram(i), u = null, c = r.getUniformLocation(l, "NAN", false);
  j().getNumber("WEBGL_VERSION") === 1 && (u = r.getUniformLocation(l, "INFINITY", false));
  let p = false, m = {}, f = {}, d = {};
  for (let x = 0; x < e.variableNames.length; x++) {
    let k = e.variableNames[x];
    m[k] = r.getUniformLocation(l, k, p), m[`offset${k}`] = r.getUniformLocation(l, `offset${k}`, p), e.enableShapeUniforms && (f[`${k}Shape`] = r.getUniformLocation(l, `${k}Shape`, p), d[`${k}TexShape`] = r.getUniformLocation(l, `${k}TexShape`, p));
  }
  let h, g, y;
  e.enableShapeUniforms && (h = r.getUniformLocation(l, "outShape", p), y = r.getUniformLocation(l, "outShapeStrides", p), g = r.getUniformLocation(l, "outTexShape", p));
  let w = [];
  return e.customUniforms && e.customUniforms.forEach((x, k) => {
    w[k] = r.getUniformLocation(l, x.name, p);
  }), { program: e, source: i, webGLProgram: l, uniformLocations: m, customUniformLocations: w, inShapeInfos: s, outShapeInfo: a, infLoc: u, nanLoc: c, inShapesLocations: f, inTexShapesLocations: d, outShapeLocation: h, outShapeStridesLocation: y, outTexShapeLocation: g };
}
function LO(r, e) {
  if (r.length !== e.length)
    throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${e.length} inputs`);
  r.forEach((t, n) => {
    let o = t.logicalShape, s = e[n], a = s.shape;
    if (!b.arraysEqual(o, a))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${o} and ${a} must match`);
    if (t.isUniform && s.isUniform)
      return;
    let i = t.texShape, l = s.isUniform ? null : s.texData.texShape;
    if (!b.arraysEqual(i, l))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`);
  });
}
function zO(r, e, t, n, o) {
  e.program.enableShapeUniforms || (LO(e.inShapeInfos, t), LO([e.outShapeInfo], [n]));
  let s = n.texData.texture, a = n.texData.texShape;
  n.texData.isPacked ? r.setOutputPackedMatrixTexture(s, a[0], a[1]) : r.setOutputMatrixTexture(s, a[0], a[1]), r.setProgram(e.webGLProgram), j().getNumber("WEBGL_VERSION") === 1 && e.infLoc !== null && r.gl.uniform1f(e.infLoc, 1 / 0), e.nanLoc !== null && r.gl.uniform1f(e.nanLoc, NaN), t.forEach((l, u) => {
    let c = e.program.variableNames[u], p = e.uniformLocations[c], m = e.uniformLocations[`offset${c}`], f = e.inShapesLocations[`${c}Shape`], d = e.inTexShapesLocations[`${c}TexShape`];
    if (f) {
      let { uniformShape: h } = uy(e.program.packedInputs, l.shape, l.texData.texShape);
      switch (h.length) {
        case 1:
          r.gl.uniform1iv(f, new Int32Array(h));
          break;
        case 2:
          r.gl.uniform2iv(f, new Int32Array(h));
          break;
        case 3:
          r.gl.uniform3iv(f, new Int32Array(h));
          break;
        case 4:
          r.gl.uniform4iv(f, new Int32Array(h));
          break;
        default:
          break;
      }
    }
    if (d && r.gl.uniform2i(d, l.texData.texShape[0], l.texData.texShape[1]), p != null) {
      if (l.isUniform) {
        if (b.sizeFromShape(l.shape) < 2)
          r.gl.uniform1f(p, l.uniformValues[0]);
        else {
          let h = l.uniformValues;
          h instanceof Float32Array || (h = new Float32Array(h)), r.gl.uniform1fv(p, h);
        }
        return;
      }
      l.texData.slice != null && m != null && r.gl.uniform1i(m, l.texData.slice.flatOffset), r.setInputMatrixTexture(l.texData.texture, p, u);
    }
  });
  let i = e.outShapeLocation;
  if (i)
    switch (n.shape.length) {
      case 1:
        r.gl.uniform1iv(i, new Int32Array(n.shape));
        break;
      case 2:
        r.gl.uniform2iv(i, new Int32Array(n.shape));
        break;
      case 3:
        r.gl.uniform3iv(i, new Int32Array(n.shape));
        break;
      case 4:
        r.gl.uniform4iv(i, new Int32Array(n.shape));
        break;
      default:
        break;
    }
  if (e.outShapeStridesLocation) {
    let l = b.computeStrides(n.shape);
    switch (n.shape.length) {
      case 2:
        r.gl.uniform1iv(e.outShapeStridesLocation, new Int32Array(l));
        break;
      case 3:
        r.gl.uniform2iv(e.outShapeStridesLocation, new Int32Array(l));
        break;
      case 4:
        r.gl.uniform3iv(e.outShapeStridesLocation, new Int32Array(l));
        break;
      default:
        break;
    }
  }
  e.outTexShapeLocation && r.gl.uniform2i(e.outTexShapeLocation, n.texData.texShape[0], n.texData.texShape[1]), e.program.customUniforms && o && e.program.customUniforms.forEach((l, u) => {
    let c = e.customUniformLocations[u], p = o[u];
    if (l.type === "float")
      r.gl.uniform1fv(c, p);
    else if (l.type === "vec2")
      r.gl.uniform2fv(c, p);
    else if (l.type === "vec3")
      r.gl.uniform3fv(c, p);
    else if (l.type === "vec4")
      r.gl.uniform4fv(c, p);
    else if (l.type === "int")
      r.gl.uniform1iv(c, p);
    else if (l.type === "ivec2")
      r.gl.uniform2iv(c, p);
    else if (l.type === "ivec3")
      r.gl.uniform3iv(c, p);
    else if (l.type === "ivec4")
      r.gl.uniform4iv(c, p);
    else
      throw Error(`uniform type ${l.type} is not supported yet.`);
  }), r.executeProgram();
}
function BO(r, e, t) {
  let n = "";
  e.concat(t).forEach((a) => {
    let i = a.texData != null && a.texData.slice != null && a.texData.slice.flatOffset > 0;
    if (r.enableShapeUniforms && !a.isUniform) {
      let l = a.texData.texShape, { useSqueezeShape: u, uniformShape: c, keptDims: p } = uy(r.packedInputs, a.shape, l), m = "", f = "", d = "";
      if (c.length === 1 && r.packedInputs) {
        let C = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)];
        m = `${C[0] > 1}_${C[1] > 1}`;
      } else if (c.length === 2 && !r.packedInputs)
        f = `${c[0] > 1}_${c[1] > 1}`;
      else if (c.length > 2 && !r.packedInputs) {
        let C = b.computeStrides(c);
        d = `${C[0] === l[1]}_${C[C.length - 1] === l[1]}`;
      }
      let h = a.shape.length, g = c.length === 2 && b.arraysEqual(a.shape, l), y = b.sizeFromShape(a.shape) === 1, w = S.getBroadcastDims(a.shape, t.shape), x = !r.packedInputs && h === t.shape.length && b.arraysEqual(l, t.texData.texShape), k = r.packedInputs || c.length > 2 ? "" : `${l[0] > 1}_${l[1] > 1}`;
      n += `${h}_${x}_${u ? p : ""}_${c.length}_${y}_${w}_${g}_${m}_${f}_${d}_${k}_${i}`;
    } else {
      let l = a.isUniform ? "uniform" : a.texData.texShape;
      n += `${a.shape}_${l}_${i}`;
    }
  });
  let o = r.userCode, s = r.constructor.name;
  return s += "_" + n + "_" + o + `${j().getNumber("WEBGL_VERSION")}`, s;
}
function jt(r) {
  return j().getBool("WEBGL_USE_SHAPES_UNIFORMS") && r <= 4;
}
var cC = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outPackingScheme = El.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let t = zt();
    this.outputShape = e, this.enableShapeUniforms = jt(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? ju(["r", "c", "d"], e) : Rs(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `;
  }
};
var pC = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outPackingScheme = El.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let t = zt();
    this.outputShape = e, this.enableShapeUniforms = jt(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? ju(["r", "c", "d"], e) : Rs(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `;
  }
};
var mC = class {
  constructor(e) {
    this.variableNames = ["A"], this.outTexUsage = zr.DOWNLOAD;
    let t = zt();
    this.outputShape = e, this.userCode = `
      ${ly}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `;
  }
};
var fC = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outTexUsage = zr.DOWNLOAD;
    let t = zt();
    this.outputShape = e, this.userCode = `
      ${ly}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `;
  }
};
var dC = class {
  constructor(e, t = false) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let n = zt();
    this.outputShape = e, this.enableShapeUniforms = jt(this.outputShape.length);
    let o = "result";
    t && (o = "floor(result * 255. + 0.5)"), this.userCode = `
      ${this.enableShapeUniforms ? lm() : am(e)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${n.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${n.output} = vec4(${o}, 0., 0., 0.);
      }
    `;
  }
};
var hC = class {
  constructor(e, t = false) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let n = zt();
    this.outputShape = e, this.enableShapeUniforms = jt(this.outputShape.length);
    let o = "", s = "result";
    t && (s = "floor(result * 255. + 0.5)");
    for (let a = 0; a <= 1; a++)
      for (let i = 0; i <= 1; i++) {
        let l = a * 2 + i;
        o += `
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms ? "outShape[2]" : `${e[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${a} < ${this.enableShapeUniforms ? "outShape[1]" : `${e[1]}`}) {
            localCoords[1] += ${a};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${n.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? lm() : am(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${o}

          ${n.output} = ${s};
        }
    `;
  }
};
var VO = {};
He(VO, { bindVertexProgramAttributeStreams: () => CC, createBufferFromOutputTexture: () => NC, createFloat16MatrixTexture: () => wC, createFloat16PackedMatrixTexture: () => vC, createFloat32MatrixTexture: () => bC, createIndexBuffer: () => yC, createPackedMatrixTexture: () => _C, createUnsignedBytesMatrixTexture: () => kC, createVertexBuffer: () => xC, createVertexShader: () => gC, downloadByteEncodedFloatMatrixFromOutputTexture: () => EC, downloadFloat32MatrixFromBuffer: () => TC, downloadMatrixFromPackedOutputTexture: () => $C, downloadPackedMatrixFromBuffer: () => AC, getInternalFormatForFloat16MatrixTexture: () => py, getInternalFormatForFloat16PackedMatrixTexture: () => dy, getInternalFormatForFloat32MatrixTexture: () => cy, getInternalFormatForPackedMatrixTexture: () => fy, getInternalFormatForUnsignedBytesMatrixTexture: () => my, uploadDenseMatrixToTexture: () => SC, uploadPixelDataToTexture: () => IC });
function gC(r) {
  let e = zt(), t = `${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return G0(r, t);
}
function xC(r) {
  let e = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return K0(r, e);
}
function yC(r) {
  let e = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return X0(r, e);
}
function fh(r, e, t, n, o, s) {
  Z0(e, t);
  let a = Y0(r), i = r.TEXTURE_2D;
  return ke(r, () => r.bindTexture(i, a)), ke(r, () => r.texParameteri(i, r.TEXTURE_WRAP_S, r.CLAMP_TO_EDGE)), ke(r, () => r.texParameteri(i, r.TEXTURE_WRAP_T, r.CLAMP_TO_EDGE)), ke(r, () => r.texParameteri(i, r.TEXTURE_MIN_FILTER, r.NEAREST)), ke(r, () => r.texParameteri(i, r.TEXTURE_MAG_FILTER, r.NEAREST)), ke(r, () => r.texImage2D(i, 0, n, e, t, 0, o, s, null)), ke(r, () => r.bindTexture(r.TEXTURE_2D, null)), a;
}
function cy(r) {
  return r.internalFormatFloat;
}
function bC(r, e, t, n) {
  let [o, s] = Wu(e, t);
  return fh(r, o, s, cy(n), n.textureFormatFloat, r.FLOAT);
}
function py(r) {
  return r.internalFormatHalfFloat;
}
function wC(r, e, t, n) {
  let [o, s] = Wu(e, t);
  return fh(r, o, s, py(n), n.textureFormatFloat, n.textureTypeHalfFloat);
}
function my(r) {
  return r.downloadTextureFormat;
}
function kC(r, e, t, n) {
  let [o, s] = Wu(e, t);
  return fh(r, o, s, my(n), r.RGBA, r.UNSIGNED_BYTE);
}
function fy(r) {
  return r.internalFormatPackedFloat;
}
function _C(r, e, t, n) {
  let [o, s] = bi(e, t);
  return fh(r, o, s, fy(n), r.RGBA, r.FLOAT);
}
function dy(r) {
  return r.internalFormatPackedHalfFloat;
}
function vC(r, e, t, n) {
  let [o, s] = bi(e, t);
  return fh(r, o, s, dy(n), r.RGBA, n.textureTypeHalfFloat);
}
function CC(r, e, t) {
  let n = 0, o = 3 * 4, s = 3 * 4 + 2 * 4;
  return ke(r, () => r.bindBuffer(r.ARRAY_BUFFER, t)), ry(r, e, "clipSpacePos", t, 3, s, n) && ry(r, e, "uv", t, 2, s, o);
}
function SC(r, e, t, n, o, s) {
  ke(r, () => r.bindTexture(r.TEXTURE_2D, e));
  let a, i, l;
  o instanceof Uint8Array ? (a = new Uint8Array(t * n * 4), i = r.UNSIGNED_BYTE, l = r.RGBA) : (a = new Float32Array(t * n * 4), i = r.FLOAT, l = s.internalFormatPackedFloat), a.set(o), ke(r, () => r.texImage2D(r.TEXTURE_2D, 0, l, t, n, 0, r.RGBA, i, a)), ke(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function IC(r, e, t) {
  ke(r, () => r.bindTexture(r.TEXTURE_2D, e)), t.data instanceof Uint8Array ? ke(r, () => r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, t.width, t.height, 0, r.RGBA, r.UNSIGNED_BYTE, t.data)) : ke(r, () => r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, r.RGBA, r.UNSIGNED_BYTE, t)), ke(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function NC(r, e, t, n) {
  let o = r.createBuffer();
  ke(r, () => r.bindBuffer(r.PIXEL_PACK_BUFFER, o));
  let i = 4 * 4 * e * t;
  return ke(r, () => r.bufferData(r.PIXEL_PACK_BUFFER, i, r.STREAM_READ)), ke(r, () => r.readPixels(0, 0, t, e, r.RGBA, r.FLOAT, 0)), ke(r, () => r.bindBuffer(r.PIXEL_PACK_BUFFER, null)), o;
}
function TC(r, e, t) {
  let n = r, o = new Float32Array(t);
  return n.bindBuffer(n.PIXEL_PACK_BUFFER, e), n.getBufferSubData(n.PIXEL_PACK_BUFFER, 0, o), n.bindBuffer(n.PIXEL_PACK_BUFFER, null), o;
}
function EC(r, e, t, n) {
  let [o, s] = Wu(e, t), a = 4, i = new Uint8Array(SO(e * t, a));
  return ke(r, () => r.readPixels(0, 0, o, s, n.downloadTextureFormat, r.UNSIGNED_BYTE, i)), new Float32Array(i.buffer);
}
function AC(r, e, t, n, o, s, a, i) {
  let l = r, u = new Float32Array(IO(s, a));
  return l.bindBuffer(l.PIXEL_PACK_BUFFER, e), l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, u), l.bindBuffer(l.PIXEL_PACK_BUFFER, null), u;
}
function $C(r, e, t) {
  let n = new Float32Array(e * t * 4);
  return ke(r, () => r.readPixels(0, 0, t, e, r.RGBA, r.FLOAT, n)), n;
}
var hy = class {
  constructor(e) {
    this.outputTexture = null, this.program = null, this.disposed = false, this.vertexAttrsAreBound = false, this.itemsToPoll = [];
    let t = j().getNumber("WEBGL_VERSION");
    e != null ? (this.gl = e, W0(t, e)) : this.gl = Yn(t);
    let n = "WEBGL_color_buffer_float", o = "EXT_color_buffer_half_float";
    if (j().getNumber("WEBGL_VERSION") === 1) {
      let s = "OES_texture_float", a = "OES_texture_half_float";
      if (this.textureFloatExtension = sm(this.gl, s), Mn(this.gl, a))
        this.textureHalfFloatExtension = sm(this.gl, a);
      else if (j().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(n), Mn(this.gl, o))
        this.colorBufferHalfFloatExtension = sm(this.gl, o);
      else if (j().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (n = "EXT_color_buffer_float", Mn(this.gl, n))
      this.colorBufferFloatExtension = this.gl.getExtension(n);
    else if (Mn(this.gl, o))
      this.colorBufferHalfFloatExtension = this.gl.getExtension(o);
    else
      throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = xC(this.gl), this.indexBuffer = yC(this.gl), this.framebuffer = J0(this.gl), this.textureConfig = uh(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return j().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    let e = this.gl;
    ke(e, () => e.finish()), ke(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)), ke(e, () => e.deleteFramebuffer(this.framebuffer)), ke(e, () => e.bindBuffer(e.ARRAY_BUFFER, null)), ke(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null)), ke(e, () => e.deleteBuffer(this.indexBuffer)), this.disposed = true;
  }
  createFloat32MatrixTexture(e, t) {
    return this.throwIfDisposed(), bC(this.gl, e, t, this.textureConfig);
  }
  createFloat16MatrixTexture(e, t) {
    return this.throwIfDisposed(), wC(this.gl, e, t, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(e, t) {
    return this.throwIfDisposed(), kC(this.gl, e, t, this.textureConfig);
  }
  uploadPixelDataToTexture(e, t) {
    this.throwIfDisposed(), IC(this.gl, e, t);
  }
  uploadDenseMatrixToTexture(e, t, n, o) {
    this.throwIfDisposed(), SC(this.gl, e, t, n, o, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(e, t) {
    return this.throwIfDisposed(), vC(this.gl, e, t, this.textureConfig);
  }
  createPackedMatrixTexture(e, t) {
    return this.throwIfDisposed(), _C(this.gl, e, t, this.textureConfig);
  }
  deleteMatrixTexture(e) {
    this.throwIfDisposed(), this.outputTexture === e && (ny(this.gl, this.framebuffer), this.outputTexture = null), ke(this.gl, () => this.gl.deleteTexture(e));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(e, t, n) {
    return this.downloadMatrixDriver(e, () => EC(this.gl, t, n, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(e, t, n, o, s, a) {
    return AC(this.gl, e, t, n, o, s, a, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(e, t) {
    return TC(this.gl, e, t);
  }
  createBufferFromTexture(e, t, n) {
    this.bindTextureToFrameBuffer(e);
    let o = NC(this.gl, t, n, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), o;
  }
  createAndWaitForFence() {
    let e = this.createFence(this.gl);
    return this.pollFence(e);
  }
  createFence(e) {
    let t, n;
    if (j().getBool("WEBGL_FENCE_API_ENABLED")) {
      let o = e, s = o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE, 0);
      e.flush(), n = () => {
        let a = o.clientWaitSync(s, 0, 0);
        return a === o.ALREADY_SIGNALED || a === o.CONDITION_SATISFIED;
      }, t = s;
    } else
      j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (t = this.beginQuery(), this.endQuery(), n = () => this.isQueryAvailable(t, j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : n = () => true;
    return { query: t, isFencePassed: n };
  }
  downloadMatrixFromPackedTexture(e, t, n) {
    return this.downloadMatrixDriver(e, () => $C(this.gl, t, n));
  }
  createProgram(e) {
    this.throwIfDisposed();
    let t = this.gl, n = U0(t, e);
    this.vertexShader == null && (this.vertexShader = gC(t));
    let o = H0(t);
    return ke(t, () => t.attachShader(o, this.vertexShader)), ke(t, () => t.attachShader(o, n)), q0(t, o), this.debug && ch(t, o), this.vertexAttrsAreBound || (this.setProgram(o), this.vertexAttrsAreBound = CC(t, this.program, this.vertexBuffer)), o;
  }
  deleteProgram(e) {
    this.throwIfDisposed(), e === this.program && (this.program = null), e != null && ke(this.gl, () => this.gl.deleteProgram(e));
  }
  setProgram(e) {
    this.throwIfDisposed(), this.program = e, this.program != null && this.debug && ch(this.gl, this.program), ke(this.gl, () => this.gl.useProgram(e));
  }
  getUniformLocation(e, t, n = true) {
    return this.throwIfDisposed(), n ? Q0(this.gl, e, t) : eC(this.gl, e, t);
  }
  getAttributeLocation(e, t) {
    return this.throwIfDisposed(), ke(this.gl, () => this.gl.getAttribLocation(e, t));
  }
  getUniformLocationNoThrow(e, t) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(e, t);
  }
  setInputMatrixTexture(e, t, n) {
    this.throwIfDisposed(), this.throwIfNoProgram(), tC(this.gl, e, t, n);
  }
  setOutputMatrixTexture(e, t, n) {
    this.setOutputMatrixTextureDriver(e, n, t);
  }
  setOutputPackedMatrixTexture(e, t, n) {
    this.throwIfDisposed();
    let [o, s] = bi(t, n);
    this.setOutputMatrixTextureDriver(e, o, s);
  }
  setOutputMatrixWriteRegion(e, t, n, o) {
    this.setOutputMatrixWriteRegionDriver(n, e, o, t);
  }
  setOutputPackedMatrixWriteRegion(e, t, n, o) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && ch(this.gl, this.program), im(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    let e = this.gl;
    this.debug && this.debugValidate(), ke(e, () => e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), ke(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = sm(this.gl, j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      let n = this.gl, o = this.getQueryTimerExtensionWebGL2(), s = n.createQuery();
      return n.beginQuery(o.TIME_ELAPSED_EXT, s), s;
    }
    let e = this.getQueryTimerExtensionWebGL1(), t = e.createQueryEXT();
    return e.beginQueryEXT(e.TIME_ELAPSED_EXT, t), t;
  }
  endQuery() {
    if (j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      let t = this.gl, n = this.getQueryTimerExtensionWebGL2();
      t.endQuery(n.TIME_ELAPSED_EXT);
      return;
    }
    let e = this.getQueryTimerExtensionWebGL1();
    e.endQueryEXT(e.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(e) {
    return await b.repeatedTry(() => this.disposed || this.isQueryAvailable(e, j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(e, j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(e, t) {
    if (t === 0)
      return null;
    if (t === 2) {
      let n = this.gl;
      return n.getQueryParameter(e, n.QUERY_RESULT) / 1e6;
    } else {
      let n = this.getQueryTimerExtensionWebGL1();
      return n.getQueryObjectEXT(e, n.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(e, t) {
    if (t === 0)
      return true;
    if (t === 2) {
      let n = this.gl, o = this.getQueryTimerExtensionWebGL2(), s = n.getQueryParameter(e, n.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(o.GPU_DISJOINT_EXT)), s && !this.disjoint;
    } else {
      let n = this.getQueryTimerExtensionWebGL1(), o = n.getQueryObjectEXT(e, n.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)), o && !this.disjoint;
    }
  }
  pollFence(e) {
    return new Promise((t) => {
      this.addItemToPoll(() => e.isFencePassed(), () => t());
    });
  }
  pollItems() {
    let e = bJ(this.itemsToPoll.map((t) => t.isDoneFn));
    for (let t = 0; t <= e; ++t) {
      let { resolveFn: n } = this.itemsToPoll[t];
      n();
    }
    this.itemsToPoll = this.itemsToPoll.slice(e + 1);
  }
  addItemToPoll(e, t) {
    this.itemsToPoll.push({ isDoneFn: e, resolveFn: t }), !(this.itemsToPoll.length > 1) && b.repeatedTry(() => (this.pollItems(), this.itemsToPoll.length === 0));
  }
  bindTextureToFrameBuffer(e) {
    this.throwIfDisposed(), ph(this.gl, e, this.framebuffer), this.debug && im(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (ph(this.gl, this.outputTexture, this.framebuffer), this.debug && im(this.gl)) : ny(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(e, t) {
    this.bindTextureToFrameBuffer(e);
    let n = t();
    return this.unbindTextureToFrameBuffer(), n;
  }
  setOutputMatrixTextureDriver(e, t, n) {
    this.throwIfDisposed();
    let o = this.gl;
    ph(o, e, this.framebuffer), this.debug && im(o), this.outputTexture = e, ke(o, () => o.viewport(0, 0, t, n)), ke(o, () => o.scissor(0, 0, t, n));
  }
  setOutputMatrixWriteRegionDriver(e, t, n, o) {
    this.throwIfDisposed(), ke(this.gl, () => this.gl.scissor(e, t, n, o));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
};
function bJ(r) {
  let e = 0;
  for (; e < r.length && r[e](); ++e)
    ;
  return e - 1;
}
var { addImpl: WO, bincountImpl: gy, bincountReduceImpl: jO, ceilImpl: GO, concatImpl: UO, equalImpl: HO, expImpl: qO, expm1Impl: KO, floorImpl: XO, gatherNdImpl: YO, gatherV2Impl: ZO, greaterImpl: JO, greaterEqualImpl: QO, lessImpl: eP, lessEqualImpl: tP, linSpaceImpl: rP, logImpl: nP, maxImpl: oP, maximumImpl: sP, minimumImpl: iP, multiplyImpl: aP, negImpl: lP, notEqualImpl: uP, prodImpl: cP, rangeImpl: pP, rsqrtImpl: mP, sigmoidImpl: fP, simpleAbsImpl: xy, sliceImpl: dP, sparseFillEmptyRowsImpl: hP, sparseReshapeImpl: gP, sparseSegmentReductionImpl: yy, sqrtImpl: xP, stridedSliceImpl: yP, stringNGramsImpl: bP, stringSplitImpl: wP, stringToHashBucketFastImpl: kP, subImpl: _P, tileImpl: vP, topKImpl: CP, transposeImpl: Uu, uniqueImpl: SP } = Yx;
function DC(r, e) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, e).map((t) => `${r}.${t}`);
}
function Xt(r, e) {
  return e === 1 ? [r] : DC(r, e);
}
function IP(r, e) {
  if (r === 1)
    return "rc";
  let t = "";
  for (let n = 0; n < r; n++)
    t += e[n], n < r - 1 && (t += ",");
  return t;
}
var RC = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outputShape = e;
    let t = e.length;
    if (t === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      let n = Xt("rc", t), o = ze(t), s = kJ(t, e, n), a = _J(t, e[e.length - 1], e[e.length - 2], n), i = vJ(e, n);
      this.userCode = `
        void main() {
          ${o} rc = getOutputCoords();

          if(${s}) {
            setOutput(vec4(0));
          } else {
            ${a}

            setOutput(vec4(${i}));
          }
        }
      `;
    }
  }
};
function wJ(r, e) {
  let t = [];
  for (let n = 0; n <= 1; n++)
    for (let o = 0; o <= 1; o++) {
      let s = `${n === 0 ? "r" : "rp1"}, ${o === 0 ? "c" : "cp1"}`;
      for (let a = 2; a < r; a++)
        s = `${e[e.length - 1 - a]},` + s;
      t.push(s);
    }
  return t;
}
function kJ(r, e, t) {
  if (r === 1)
    return `rc > ${e[0]}`;
  let n = "";
  for (let o = r - 2; o < r; o++)
    n += `${t[o]} >= ${e[o]}`, o < r - 1 && (n += "||");
  return n;
}
function _J(r, e, t, n) {
  if (r === 1)
    return "";
  let o = n.slice(-2);
  return `
    int r = ${o[0]};
    int c = ${o[1]};
    int rp1 = r + 1;
    int cp1 = c + 1;

    bool cEdge = cp1 >= ${e};
    bool rEdge = rp1 >= ${t};
  `;
}
function vJ(r, e) {
  let t = r.length, n = wJ(t, e);
  return t === 1 ? `getA(rc),
            rc + 1 >= ${r[0]} ? 0. : getA(rc + 1),
            0, 0` : `getA(${n[0]}),
          cEdge ? 0. : getA(${n[1]}),
          rEdge ? 0. : getA(${n[2]}),
          rEdge || cEdge ? 0. : getA(${n[3]})`;
}
var dh = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = e, this.enableShapeUniforms = jt(this.outputShape.length);
    let n = "";
    for (let o = 0; o < 4; o++) {
      let s = "thisRC = rc;";
      o % 2 == 1 && (s += "thisRC.z += 1;"), o > 1 && (s += "thisRC.y += 1;"), n += `
        ${s}
        ${o > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${o}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${o > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${CJ(t, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? lm() : am(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : e[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : e[2]};

        ${n}

        setOutput(result);
      }
    `;
  }
};
function CJ(r, e) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e ? DO(["r", "c", "d"], "inputShape") : Rs(["r", "c", "d"], r)}
      return ivec3(r, c, d);
    }
  `;
}
var FC = class {
  constructor(e) {
    this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.logEnabled = false, this.usedTextures = {};
  }
  acquireTexture(e, t, n) {
    let o = TP(t, n), s = EP(e, o, n);
    s in this.freeTextures || (this.freeTextures[s] = []), s in this.usedTextures || (this.usedTextures[s] = []);
    let a = NP(e, o, this.gpgpu.gl, this.gpgpu.textureConfig, n);
    if (this.freeTextures[s].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= a, this.log();
      let l = this.freeTextures[s].shift();
      return this.usedTextures[s].push(l), l;
    }
    let i;
    return o === Tr.PACKED_2X2_FLOAT32 ? i = this.gpgpu.createPackedMatrixTexture(e[0], e[1]) : o === Tr.PACKED_2X2_FLOAT16 ? i = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]) : o === Tr.UNPACKED_FLOAT32 ? i = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : o === Tr.UNPACKED_FLOAT16 ? i = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : o === Tr.PACKED_4X1_UNSIGNED_BYTE && (i = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[s].push(i), this.numUsedTextures++, this._numBytesAllocated += a, this.log(), i;
  }
  releaseTexture(e, t, n, o) {
    if (this.freeTextures == null)
      return;
    let s = TP(n, o), a = EP(t, s, o);
    a in this.freeTextures || (this.freeTextures[a] = []);
    let i = NP(t, s, this.gpgpu.gl, this.gpgpu.textureConfig, o), l = j().get("WEBGL_DELETE_TEXTURE_THRESHOLD");
    l !== -1 && this._numBytesAllocated > l ? (this.gpgpu.deleteMatrixTexture(e), this._numBytesAllocated -= i) : (this.freeTextures[a].push(e), this.numFreeTextures++, this._numBytesFree += i), this.numUsedTextures--;
    let u = this.usedTextures[a], c = u.indexOf(e);
    if (c < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    u.splice(c, 1), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    let e = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${e})`);
    let t = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * t)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (let e in this.freeTextures)
        this.freeTextures[e].forEach((t) => {
          this.gpgpu.deleteMatrixTexture(t);
        });
      for (let e in this.usedTextures)
        this.usedTextures[e].forEach((t) => {
          this.gpgpu.deleteMatrixTexture(t);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
};
function SJ(r, e) {
  let t = r;
  if (e === t.R32F)
    return 4;
  if (e === t.R16F)
    return 2;
  if (e === t.RGBA32F)
    return 16;
  if (e === r.RGBA)
    return 16;
  if (e === t.RGBA16F)
    return 8;
  throw new Error(`Unknown internal format ${e}`);
}
function NP(r, e, t, n, o) {
  let s = IJ(e, n), a;
  if (o) {
    let [l, u] = bi(r[0], r[1]);
    a = l * u;
  } else {
    let [l, u] = Wu(r[0], r[1]);
    a = l * u;
  }
  let i = SJ(t, s);
  return a * i;
}
function IJ(r, e) {
  switch (r) {
    case Tr.PACKED_2X2_FLOAT32:
      return fy(e);
    case Tr.PACKED_2X2_FLOAT16:
      return dy(e);
    case Tr.UNPACKED_FLOAT32:
      return cy(e);
    case Tr.UNPACKED_FLOAT16:
      return py(e);
    case Tr.PACKED_4X1_UNSIGNED_BYTE:
      return my(e);
    default:
      throw new Error(`Unknown physical texture type ${r}`);
  }
}
function NJ(r) {
  return j().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? r ? Tr.PACKED_2X2_FLOAT32 : Tr.UNPACKED_FLOAT32 : r ? Tr.PACKED_2X2_FLOAT16 : Tr.UNPACKED_FLOAT16;
}
function TP(r, e) {
  if (r === zr.UPLOAD)
    return Tr.PACKED_2X2_FLOAT32;
  if (r === zr.RENDER || r == null)
    return NJ(e);
  if (r === zr.DOWNLOAD || r === zr.PIXELS)
    return Tr.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${r}`);
}
function EP(r, e, t) {
  return `${r[0]}_${r[1]}_${e}_${t}`;
}
var Cn = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.outputShape = e, this.enableShapeUniforms = jt(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
var br = "if (isnan(x)) return x;";
var AP = "return x;";
var OC = "return abs(x);";
var $P = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var DP = br + `
  return (x < 0.0) ? 0.0 : x;
`;
var RP = br + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
var hh = "return x;";
var FP = "return 1.0 / (1.0 + exp(-1.0 * x));";
var OP = "return x;";
var PP = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
var MP = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var LP = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var zP = "return 1.0 / (1.0 + exp(-1.0 * x));";
var Fs = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.enableShapeUniforms = jt(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
var PC = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outputShape = e;
    let t = e.length, n = Xt("rc", t), o = ze(t), s = IP(t, n), a = n.slice(-2), i = t <= 1 ? "rc" : `vec2(${a.join(",")})`;
    this.userCode = `
      void main() {
        ${o} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${i}));
      }
    `;
  }
};
var TJ = Mr.whereImpl;
var EJ = 1e-7;
var AJ = 1e-4;
var by = {};
function $J(r) {
  return r in by || (by[r] = {}), by[r];
}
var DJ = j().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");
var RJ = 600;
function FJ() {
  return j().global.screen == null ? 1024 : j().global.screen.height * j().global.screen.width * window.devicePixelRatio * RJ / 1024 / 1024;
}
var Hu = class extends Ls {
  constructor(e) {
    super();
    if (this.pendingRead = new WeakMap(), this.pendingDisposal = new WeakSet(), this.dataRefCount = new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = false, this.pendingDeletes = 0, this.disposed = false, !j().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    if (e == null) {
      let t = Yn(j().getNumber("WEBGL_VERSION"));
      this.binaryCache = $J(j().getNumber("WEBGL_VERSION")), this.gpgpu = new hy(t), this.canvas = t.canvas, this.gpgpuCreatedLocally = true;
    } else
      this.gpgpu = e, this.binaryCache = {}, this.gpgpuCreatedLocally = false, this.canvas = e.gl.canvas;
    this.textureManager = new FC(this.gpgpu), this.numMBBeforeWarning = FJ(), this.texData = new Ka(this, ks());
  }
  nextDataId() {
    return Hu.nextDataId++;
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  write(e, t, n) {
    if ((j().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || j().getBool("DEBUG")) && this.checkNumericalProblems(e), n === "complex64" && e != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    let o = { id: this.nextDataId() };
    return this.texData.set(o, { shape: t, dtype: n, values: e, usage: zr.UPLOAD, refCount: 1 }), o;
  }
  refCount(e) {
    return this.texData.has(e) ? this.texData.get(e).refCount : 0;
  }
  incRef(e) {
    let t = this.texData.get(e);
    t.refCount++;
  }
  decRef(e) {
    if (this.texData.has(e)) {
      let t = this.texData.get(e);
      t.refCount--;
    }
  }
  move(e, t, n, o, s) {
    if (j().getBool("DEBUG") && this.checkNumericalProblems(t), o === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(e, { shape: n, dtype: o, values: t, usage: zr.UPLOAD, refCount: s });
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  readSync(e) {
    let t = this.texData.get(e), { values: n, dtype: o, complexTensorInfos: s, slice: a, shape: i, isPacked: l } = t;
    if (a != null) {
      let m;
      l ? m = new Fs(i, hh) : m = new Cn(i, hh);
      let f = this.runWebGLProgram(m, [{ dataId: e, shape: i, dtype: o }], o), d = this.readSync(f.dataId);
      return this.disposeIntermediateTensorInfo(f), d;
    }
    if (n != null)
      return this.convertAndCacheOnCPU(e);
    if (o === "string")
      return n;
    let u = this.activeTimers != null, c;
    u && (c = b.now());
    let p;
    if (o === "complex64") {
      let m = this.readSync(s.real.dataId), f = this.readSync(s.imag.dataId);
      p = S.mergeRealAndImagArrays(m, f);
    } else
      p = this.getValuesFromTexture(e);
    return u && (this.downloadWaitMs += b.now() - c), this.convertAndCacheOnCPU(e, p);
  }
  async read(e) {
    if (this.pendingRead.has(e)) {
      let d = this.pendingRead.get(e);
      return new Promise((h) => d.push(h));
    }
    let t = this.texData.get(e), { values: n, shape: o, slice: s, dtype: a, complexTensorInfos: i, isPacked: l } = t;
    if (s != null) {
      let d;
      l ? d = new Fs(o, hh) : d = new Cn(o, hh);
      let h = this.runWebGLProgram(d, [{ dataId: e, shape: o, dtype: a }], a), g = this.read(h.dataId);
      return this.disposeIntermediateTensorInfo(h), g;
    }
    if (n != null)
      return this.convertAndCacheOnCPU(e);
    if (!j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && j().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let u = null, c;
    if (a !== "complex64" && j().get("WEBGL_BUFFER_SUPPORTED")) {
      c = this.decode(e);
      let d = this.texData.get(c.dataId);
      u = this.gpgpu.createBufferFromTexture(d.texture, ...lh(o));
    }
    this.pendingRead.set(e, []), a !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let p;
    if (a === "complex64") {
      let d = await Promise.all([this.read(i.real.dataId), this.read(i.imag.dataId)]), h = d[0], g = d[1];
      p = S.mergeRealAndImagArrays(h, g);
    } else if (u == null)
      p = this.getValuesFromTexture(e);
    else {
      let d = b.sizeFromShape(o);
      p = this.gpgpu.downloadFloat32MatrixFromBuffer(u, d);
    }
    if (c != null && this.disposeIntermediateTensorInfo(c), u != null) {
      let d = this.gpgpu.gl;
      ke(d, () => d.deleteBuffer(u));
    }
    let m = this.convertAndCacheOnCPU(e, p), f = this.pendingRead.get(e);
    return this.pendingRead.delete(e), f.forEach((d) => d(m)), this.pendingDisposal.has(e) && (this.pendingDisposal.delete(e), this.disposeData(e) && ks().removeDataId(e, this), this.pendingDeletes--), m;
  }
  bufferSync(e) {
    let t = this.readSync(e.dataId), n = t;
    if (e.dtype === "string")
      try {
        n = t.map((o) => b.decodeString(o));
      } catch (o) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return Se(e.shape, e.dtype, n);
  }
  checkNumericalProblems(e) {
    if (e != null)
      for (let t = 0; t < e.length; t++) {
        let n = e[t];
        if (!j0(n))
          throw j().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${n} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(e) {
    let { shape: t, dtype: n, isPacked: o } = this.texData.get(e), s = b.sizeFromShape(t);
    if (j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      let m = this.decode(e), f = this.texData.get(m.dataId), d = this.gpgpu.downloadMatrixFromPackedTexture(f.texture, ...lh(t)).subarray(0, s);
      return this.disposeIntermediateTensorInfo(m), d;
    }
    let a = j().getBool("WEBGL_PACK") && o === true, i = a ? mh(t) : t, l = a ? new fC(i) : new mC(i), u = this.runWebGLProgram(l, [{ shape: i, dtype: n, dataId: e }], "float32"), c = this.texData.get(u.dataId), p = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture, c.texShape[0], c.texShape[1]).subarray(0, s);
    return this.disposeIntermediateTensorInfo(u), p;
  }
  timerAvailable() {
    return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  async time(e) {
    let t = this.activeTimers, n = [], o = false;
    this.programTimersStack == null ? (this.programTimersStack = n, o = true) : this.activeTimers.push(n), this.activeTimers = n, e();
    let s = b.flatten(this.activeTimers.map((l) => l.query)).filter((l) => l != null), a = b.flatten(this.activeTimers.map((l) => l.name)).filter((l) => l != null);
    this.activeTimers = t, o && (this.programTimersStack = null);
    let i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null };
    if (j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
      let l = await Promise.all(s);
      i.kernelMs = b.sum(l), i.getExtraProfileInfo = () => l.map((u, c) => ({ name: a[c], ms: u })).map((u) => `${u.name}: ${u.ms}`).join(", ");
    } else
      i.kernelMs = { error: "WebGL query timers are not supported in this environment." };
    return this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
  }
  memory() {
    return { unreliable: false, numBytesInGPU: this.numBytesInGPU, numBytesInGPUAllocated: this.textureManager.numBytesAllocated, numBytesInGPUFree: this.textureManager.numBytesFree };
  }
  startTimer() {
    return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: b.now(), endMs: null };
  }
  endTimer(e) {
    return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = b.now(), e);
  }
  async getQueryTime(e) {
    if (j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(e);
    let t = e;
    return t.endMs - t.startMs;
  }
  disposeData(e, t = false) {
    if (this.pendingDisposal.has(e))
      return false;
    if (!this.texData.has(e))
      return true;
    if (t ? this.texData.get(e).refCount = 0 : this.texData.get(e).refCount--, !t && this.texData.get(e).refCount > 0)
      return false;
    if (this.pendingRead.has(e))
      return this.pendingDisposal.add(e), this.pendingDeletes++, false;
    this.releaseGPUData(e);
    let { complexTensorInfos: n } = this.texData.get(e);
    return n != null && (this.disposeData(n.real.dataId, t), this.disposeData(n.imag.dataId, t)), this.texData.delete(e), true;
  }
  releaseGPUData(e) {
    let { texture: t, dtype: n, texShape: o, usage: s, isPacked: a, slice: i } = this.texData.get(e), l = i && i.origDataId || e, u = this.dataRefCount.get(l);
    u > 1 ? this.dataRefCount.set(l, u - 1) : (this.dataRefCount.delete(l), t != null && (this.numBytesInGPU -= this.computeBytes(o, n), this.textureManager.releaseTexture(t, o, s, a)));
    let c = this.texData.get(e);
    c.texture = null, c.texShape = null, c.isPacked = false, c.slice = null;
  }
  getTexture(e) {
    return this.uploadToGPU(e), this.texData.get(e).texture;
  }
  getDataInfo(e) {
    return this.texData.get(e);
  }
  shouldExecuteOnCPU(e, t = DJ) {
    return j().getBool("WEBGL_CPU_FORWARD") && e.every((n) => this.texData.get(n.dataId).texture == null && b.sizeFromShape(n.shape) < t);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(e) {
    S.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    let t = e.dataSync();
    return TJ(e.shape, t);
  }
  packedUnaryOp(e, t, n) {
    let o = new Fs(e.shape, t), s = this.compileAndRun(o, [e], n);
    return ks().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
  abs(e) {
    if (this.shouldExecuteOnCPU([e]) && e.dtype !== "complex64") {
      let o = xy(this.texData.get(e.dataId).values);
      return this.makeOutput(e.shape, e.dtype, o);
    }
    if (j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(e, OC, e.dtype);
    let t = new Cn(e.shape, OC), n = this.compileAndRun(t, [e]);
    return ks().makeTensorFromDataId(n.dataId, n.shape, n.dtype);
  }
  makeTensorInfo(e, t, n) {
    let o;
    if (t === "string" && n != null && n.length > 0 && b.isString(n[0])) {
      let s = n.map((a) => b.encodeString(a));
      o = this.write(s, e, t);
    } else
      o = this.write(n, e, t);
    return this.texData.get(o).usage = null, { dataId: o, shape: e, dtype: t };
  }
  makeOutput(e, t, n) {
    let { dataId: o } = this.makeTensorInfo(e, t, n);
    return ks().makeTensorFromDataId(o, e, t, this);
  }
  unpackTensor(e) {
    let t = new PC(e.shape);
    return this.runWebGLProgram(t, [e], e.dtype);
  }
  packTensor(e) {
    let t = new RC(e.shape), n = true;
    return this.runWebGLProgram(t, [e], e.dtype, null, n);
  }
  packedReshape(e, t) {
    let n = [Ma(e.shape), ...La(e.shape)], o = { dtype: e.dtype, shape: n, dataId: e.dataId }, s = [Ma(t), ...La(t)], a = new dh(s, n), i = true, l = [n], u = this.runWebGLProgram(a, [o], e.dtype, l, i);
    return { dataId: u.dataId, shape: t, dtype: u.dtype };
  }
  decode(e) {
    let t = this.texData.get(e), { isPacked: n, shape: o, dtype: s } = t, a = mh(o), i, l = lh(a);
    n ? i = new pC(a) : i = new cC(a);
    let u = true, c = [l], p = this.runWebGLProgram(i, [{ shape: a, dtype: s, dataId: e }], s, c, u);
    return { dtype: s, shape: o, dataId: p.dataId };
  }
  runWebGLProgram(e, t, n, o, s = false) {
    let a = this.makeTensorInfo(e.outputShape, n), i = this.texData.get(a.dataId);
    if (e.packedOutput && (i.isPacked = true), e.outPackingScheme === El.DENSE) {
      let g = lh(e.outputShape);
      i.texShape = g.map((y) => y * 2);
    }
    if (e.outTexUsage != null && (i.usage = e.outTexUsage), b.sizeFromShape(a.shape) === 0)
      return i.values = b.getTypedArrayFromDType(a.dtype, 0), a;
    let l = [], u = t.map((g) => {
      if (g.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let y = this.texData.get(g.dataId);
      if (y.texture == null) {
        if (!e.packedInputs && b.sizeFromShape(g.shape) <= j().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return { shape: g.shape, texData: null, isUniform: true, uniformValues: y.values };
        e.packedInputs && (y.isPacked = true, y.shape = g.shape);
      } else if (!!y.isPacked != !!e.packedInputs)
        g = y.isPacked ? this.unpackTensor(g) : this.packTensor(g), l.push(g), y = this.texData.get(g.dataId);
      else if (y.isPacked && !Al(y.shape, g.shape)) {
        let w = g, x = g.shape;
        g.shape = y.shape, g = this.packedReshape(g, x), l.push(g), y = this.texData.get(g.dataId), w.shape = x;
      }
      return this.uploadToGPU(g.dataId), { shape: g.shape, texData: y, isUniform: false };
    });
    this.uploadToGPU(a.dataId);
    let c = { shape: a.shape, texData: i, isUniform: false }, p = BO(e, u, c), m = this.getAndSaveBinary(p, () => MO(this.gpgpu, e, u, c)), f = this.activeTimers != null, d;
    f && (d = this.startTimer()), zO(this.gpgpu, m, u, c, o), l.forEach((g) => this.disposeIntermediateTensorInfo(g)), f && (d = this.endTimer(d), this.activeTimers.push({ name: e.constructor.name, query: this.getQueryTime(d) }));
    let h = j().get("WEBGL_FLUSH_THRESHOLD");
    if (h > 0) {
      let g = b.now();
      g - this.lastGlFlushTime > h && (this.gpgpu.gl.flush(), this.lastGlFlushTime = g);
    }
    if (!j().getBool("WEBGL_LAZILY_UNPACK") && i.isPacked && s === false) {
      let g = this.unpackTensor(a);
      return this.disposeIntermediateTensorInfo(a), g;
    }
    return a;
  }
  compileAndRun(e, t, n, o, s = false) {
    return n = n || t[0].dtype, this.runWebGLProgram(e, t, n, o, s);
  }
  getAndSaveBinary(e, t) {
    return e in this.binaryCache || (this.binaryCache[e] = t()), this.binaryCache[e];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (j().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((t) => {
      this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram), delete this.binaryCache[t];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement != "undefined" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = true);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = z(() => {
      if (!j().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        let e = j().getBool("DEBUG");
        j().set("DEBUG", false);
        let t = this.abs(ce(1e-8)).dataSync()[0];
        if (j().set("DEBUG", e), t > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  epsilon() {
    return this.floatPrecision() === 32 ? EJ : AJ;
  }
  uploadToGPU(e) {
    let t = this.texData.get(e), { shape: n, dtype: o, values: s, texture: a, usage: i, isPacked: l } = t;
    if (a != null)
      return;
    let u = this.activeTimers != null, c;
    u && (c = b.now());
    let p = t.texShape;
    if (p == null && (p = rC(n, l), t.texShape = p), s != null) {
      let m = mh(n), f, d = p[1], h = p[0], g = s instanceof Uint8Array;
      l ? ([d, h] = bi(p[0], p[1]), f = new hC(m, g)) : f = new dC(m, g);
      let y = this.makeTensorInfo([h, d], o);
      g ? this.texData.get(y.dataId).usage = zr.PIXELS : this.texData.get(y.dataId).usage = zr.UPLOAD, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(y.dataId), d, h, s);
      let w = [[h, d]], x = true, k = this.runWebGLProgram(f, [y], o, w, x), C = this.texData.get(k.dataId);
      t.texture = C.texture, t.texShape = C.texShape, t.isPacked = C.isPacked, t.usage = C.usage, this.disposeIntermediateTensorInfo(y), this.texData.delete(k.dataId), t.values = null, u && (this.uploadWaitMs += b.now() - c);
    } else {
      let m = this.acquireTexture(p, i, o, l);
      t.texture = m;
    }
  }
  convertAndCacheOnCPU(e, t) {
    let n = this.texData.get(e), { dtype: o } = n;
    return this.releaseGPUData(e), t != null && (n.values = OJ(t, o)), n.values;
  }
  acquireTexture(e, t, n, o) {
    if (this.numBytesInGPU += this.computeBytes(e, n), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      let s = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true, console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(e, t, o);
  }
  computeBytes(e, t) {
    return e[0] * e[1] * b.bytesPerElement(t);
  }
};
Hu.nextDataId = 0;
function OJ(r, e) {
  if (e === "float32" || e === "complex64")
    return r;
  if (e === "int32" || e === "bool") {
    let t = e === "int32" ? new Int32Array(r.length) : new Uint8Array(r.length);
    for (let n = 0; n < t.length; ++n)
      t[n] = Math.round(r[n]);
    return t;
  } else
    throw new Error(`Unknown dtype ${e}`);
}
var PJ = "3.9.0";
function BP() {
  j().set("WEBGL_FORCE_F16_TEXTURES", true);
}
Ql.isBrowser() && ap("webgl", () => new Hu(), 2);
var Cwt = { forceHalfFloat: BP };
var wy = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
var _o = class {
  constructor(e, t, n) {
    this.variableNames = ["A", "B"], this.outputShape = S.assertAndGetBroadcastShape(t, n), this.enableShapeUniforms = jt(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
};
var $l = `
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;
var Os = class {
  constructor(e, t, n, o = false) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = true, this.packedInputs = true, this.packedOutput = true, this.outputShape = S.assertAndGetBroadcastShape(t, n);
    let s = this.outputShape.length;
    this.enableShapeUniforms = jt(s);
    let a = "";
    if (o)
      if (s === 0 || b.sizeFromShape(this.outputShape) === 1)
        a = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (a = `
          ${ze(s)} coords = getOutputCoords();
        `, s === 1)
        this.enableShapeUniforms ? a += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : a += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        let l = Xt("coords", s);
        this.enableShapeUniforms ? a += `
            bool nextRowOutOfBounds =
              (${l[s - 2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${l[s - 1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : a += `
            bool nextRowOutOfBounds =
              (${l[s - 2]} + 1) >= ${this.outputShape[s - 2]};
            bool nextColOutOfBounds =
              (${l[s - 1]} + 1) >= ${this.outputShape[s - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${a}

        setOutput(result);
      }
    `;
  }
};
function Yt(r) {
  let { inputs: e, backend: t } = r, { x: n } = e;
  return t.incRef(n.dataId), { dataId: n.dataId, shape: n.shape, dtype: n.dtype };
}
var VP = { kernelName: to, backendName: "webgl", kernelFunc: Yt };
function Sn(r) {
  let { inputs: e, backend: t } = r, { real: n, imag: o } = e, s = t.makeTensorInfo(n.shape, "complex64"), a = t.texData.get(s.dataId), i = Yt({ inputs: { x: n }, backend: t }), l = Yt({ inputs: { x: o }, backend: t });
  return a.complexTensorInfos = { real: i, imag: l }, s;
}
var WP = { kernelName: bc, backendName: "webgl", kernelFunc: Sn };
var MC = "return (a < 0.) ? b * a : a;";
var LC = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function MJ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { alpha: s } = n, a = t.makeTensorInfo([], "float32", b.createScalarValue(s, "float32")), i = j().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Os(LC, o.shape, a.shape) : new _o(MC, o.shape, a.shape), l = t.runWebGLProgram(i, [o, a], o.dtype);
  return t.disposeIntermediateTensorInfo(a), l;
}
var jP = { kernelName: jo, backendName: "webgl", kernelFunc: MJ };
var zC = "return (a < 0.) ? b * a : a;";
var BC = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function LJ(r) {
  let { inputs: e, backend: t } = r, { x: n, alpha: o } = e, s = j().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Os(BC, n.shape, o.shape) : new _o(zC, n.shape, o.shape);
  return t.runWebGLProgram(s, [n, o], n.dtype);
}
var GP = { kernelName: rs, backendName: "webgl", kernelFunc: LJ };
var ky = "if (isnan(x)) return x;";
var UP = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
var HP = `
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;
function _e({ opSnippet: r, packedOpSnippet: e, cpuKernelImpl: t, dtype: n }) {
  return ({ inputs: o, backend: s }) => {
    let { x: a } = o, i = s, l = n || a.dtype;
    if (i.shouldExecuteOnCPU([a]) && t != null) {
      let p = i.texData.get(a.dataId), m = t(p.values, l);
      return i.makeTensorInfo(a.shape, l, m);
    }
    let u = j().getBool("WEBGL_PACK_UNARY_OPERATIONS") && e != null, c;
    return u ? c = new Fs(a.shape, e) : c = new Cn(a.shape, r), i.runWebGLProgram(c, [a], l);
  };
}
function st({ opSnippet: r, packedOpSnippet: e, checkOutOfBounds: t = false, supportsComplex: n = false, cpuKernelImpl: o, dtype: s }) {
  return ({ inputs: a, backend: i }) => {
    let { a: l, b: u } = a, c = i;
    if (n && l.dtype === "complex64") {
      let d = c.texData.get(l.dataId), h = c.texData.get(u.dataId), [g, y] = [[d.complexTensorInfos.real, h.complexTensorInfos.real], [d.complexTensorInfos.imag, h.complexTensorInfos.imag]].map((x) => {
        let [k, C] = x, A = { dataId: k.dataId, dtype: k.dtype, shape: l.shape }, $ = { dataId: C.dataId, dtype: C.dtype, shape: u.shape }, R = new _o(r, l.shape, u.shape);
        return c.runWebGLProgram(R, [A, $], pr(k.dtype, C.dtype));
      }), w = Sn({ inputs: { real: g, imag: y }, backend: c });
      return c.disposeIntermediateTensorInfo(g), c.disposeIntermediateTensorInfo(y), w;
    }
    let p = s || pr(l.dtype, u.dtype);
    if ((l.dtype === "string" || u.dtype === "string" || c.shouldExecuteOnCPU([l, u])) && o != null) {
      let d = c.texData.get(l.dataId).values, h = c.texData.get(u.dataId).values, g = l.dtype === "string" ? S.fromUint8ToStringArray(d) : d, y = l.dtype === "string" ? S.fromUint8ToStringArray(h) : h, [w, x] = o(l.shape, u.shape, g, y, p), k = c.makeTensorInfo(x, p), C = c.texData.get(k.dataId);
      return C.values = w, k;
    }
    let m = j().getBool("WEBGL_PACK_BINARY_OPERATIONS") && e != null, f;
    return m ? f = new Os(e, l.shape, u.shape, t) : f = new _o(r, l.shape, u.shape), c.runWebGLProgram(f, [l, u], p);
  };
}
function Dl(r, e = false) {
  if (r === "linear")
    return e ? OP : AP;
  if (r === "relu")
    return e ? MP : DP;
  if (r === "elu")
    return e ? PP : $P;
  if (r === "relu6")
    return e ? LP : RP;
  if (r === "prelu")
    return e ? BC : zC;
  if (r === "leakyrelu")
    return e ? LC : MC;
  if (r === "sigmoid")
    return e ? zP : FP;
  throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`);
}
var gh = class {
  constructor(e, t, n, o = false, s = false, a = false, i = null, l = false, u = false) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = true, this.packedOutput = true, this.outputShape = n, this.enableShapeUniforms = jt(this.outputShape.length);
    let c = o ? e[1] : e[2], p = Math.ceil(c / 2), m = o ? "i * 2, rc.y" : "rc.y, i * 2", f = s ? "rc.z, i * 2" : "i * 2, rc.z", d = o ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], h = s ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"], g = "", y = "";
    i && (l ? g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }` : u ? g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }` : g = `vec4 activation(vec4 x) {
          ${i}
        }`, y = "result = activation(result);");
    let w = a ? "result += getBiasAtOutCoords();" : "";
    a && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), u && this.variableNames.push("leakyreluAlpha");
    let x = "rc.x", k = "rc.x";
    e[0] < t[0] ? x = `int(min(float(rc.x), ${e[0] - 1}.))` : t[0] < e[0] && (k = `int(min(float(rc.x), ${t[0] - 1}.))`), this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${p}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${p}; i++) {
          int batchA = ${x};
          int batchB = ${k};
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${f});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${d[0]} * ${h[0]});
          result += (${d[1]} * ${h[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${w}

        ${y}

        setOutput(result);
      }
    `;
  }
};
var VC = { REAL: "return areal * breal - aimag * bimag;", IMAG: "return areal * bimag + aimag * breal;" };
var _y = class {
  constructor(e, t, n) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = S.assertAndGetBroadcastShape(t, n), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
};
var qP = "return a * b;";
function xh(r) {
  let { inputs: e, backend: t } = r, { a: n, b: o } = e, s = S.upcastType(n.dtype, o.dtype);
  if (n.dtype === "complex64") {
    let i = t.texData.get(n.dataId), l = t.texData.get(o.dataId), u = new _y(VC.REAL, n.shape, o.shape), c = new _y(VC.IMAG, n.shape, o.shape), p = [{ dataId: i.complexTensorInfos.real.dataId, dtype: i.complexTensorInfos.real.dtype, shape: n.shape }, { dataId: i.complexTensorInfos.imag.dataId, dtype: i.complexTensorInfos.imag.dtype, shape: n.shape }, { dataId: l.complexTensorInfos.real.dataId, dtype: l.complexTensorInfos.real.dtype, shape: o.shape }, { dataId: l.complexTensorInfos.imag.dataId, dtype: l.complexTensorInfos.imag.dtype, shape: o.shape }], m = t.runWebGLProgram(u, p, "float32"), f = t.runWebGLProgram(c, p, "float32"), d = Sn({ inputs: { real: m, imag: f }, backend: t });
    return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(f), d;
  }
  if (t.shouldExecuteOnCPU([n, o])) {
    let i = t.texData.get(n.dataId), l = t.texData.get(o.dataId), [u, c] = aP(n.shape, o.shape, i.values, l.values, s), p = t.makeTensorInfo(c, s), m = t.texData.get(p.dataId);
    return m.values = u, p;
  }
  let a;
  return j().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? a = new Os(qP, n.shape, o.shape) : a = new _o(qP, n.shape, o.shape), t.runWebGLProgram(a, [n, o], s);
}
var KP = { kernelName: Jo, backendName: "webgl", kernelFunc: xh };
function XP(r, e, t) {
  let n = [Ma(r.shape), ...La(r.shape)], o = { dtype: r.dtype, shape: n, dataId: r.dataId }, s = [Ma(e), ...La(e)], a = new dh(s, n), i = true, l = [n], u = t.runWebGLProgram(a, [o], r.dtype, l, i);
  return { dataId: u.dataId, shape: e, dtype: u.dtype };
}
function ae(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { shape: s } = n, a = t, i = b.sizeFromShape(o.shape), l = b.inferFromImplicitShape(s, i), u = b.sizeFromShape(l);
  b.assert(i === u, () => `The new shape (${l}) has ${u} elements and the old shape (${o.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);
  let c = a.texData.get(o.dataId);
  return c.isPacked && !Al(o.shape, l) && !(c.texture !== null && Al(c.shape, l)) ? XP(o, l, a) : (a.incRef(o.dataId), { dataId: o.dataId, shape: l, dtype: o.dtype });
}
var YP = { kernelName: Xs, backendName: "webgl", kernelFunc: ae };
var vy = class {
  constructor(e, t) {
    this.variableNames = ["x"];
    let { windowSize: n, batchSize: o, inSize: s, outSize: a } = e;
    this.outputShape = [o, a];
    let i = Math.floor(n / 4) * 4, l = n % 4, u = "sumValue += dot(values, ones);";
    if (t != null) {
      let p = 1 / t;
      u = `sumValue += dot(values * ${b.isInt(p) ? p.toPrecision(2) : p}, ones);`;
    }
    let c = "";
    s % n > 0 && (c = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${i};
        if (${l === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `;
  }
};
var WC = class {
  constructor(e, t) {
    this.variableNames = ["x"];
    let { windowSize: n, batchSize: o, inSize: s, outSize: a } = e;
    this.outputShape = [o, a];
    let i = "0.0", l = "";
    t === "prod" ? i = "1.0" : t === "min" ? (i = "1.0 / 1e-20", l = "min") : t === "max" && (i = "-1.0 / 1e-20", l = "max");
    let u = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "sum" ? u = "sumValue" : t === "prod" ? u = "prodValue" : t === "all" ? u = "allValue" : t === "any" && (u = "anyValue");
    let c = Math.floor(n / 4) * 4, p = n % 4, m = `
      if (${t === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${t === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${t === "min"} || ${t === "max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, f = "vec4";
    t === "all" ? (i = "1.0", m = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, f = "bvec4") : t === "any" && (i = "0.0", m = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, f = "bvec4");
    let d = "";
    s % n > 0 && (d = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${d}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p === 1}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p === 2}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p === 3}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `;
  }
};
function zJ(r) {
  let e = [];
  for (; e.length === 0 || e[e.length - 1].outSize !== 1; ) {
    let t = e.length ? e[e.length - 1].outSize : r[1], n = S.computeOptimalWindowSize(t);
    e.push({ inSize: t, windowSize: n, outSize: Math.ceil(t / n) });
  }
  return e;
}
function Ln(r, e, t, n) {
  let o = zJ(r.shape), s = r;
  for (let a = 0; a < o.length; a++) {
    let { inSize: i, windowSize: l, outSize: u } = o[a], c, p;
    t === "mean" ? c = a === 0 ? new vy({ windowSize: l, inSize: i, batchSize: r.shape[0], outSize: u }, i) : new vy({ windowSize: l, inSize: i, batchSize: r.shape[0], outSize: u }) : c = new WC({ windowSize: l, inSize: i, batchSize: r.shape[0], outSize: u }, t), p = s, s = n.runWebGLProgram(c, [s], e), p.dataId !== r.dataId && n.disposeIntermediateTensorInfo(p);
  }
  return s;
}
var jC = class {
  constructor(e, t) {
    this.variableNames = ["A"];
    let n = new Array(e.length);
    for (let a = 0; a < n.length; a++)
      n[a] = e[t[a]];
    this.outputShape = n, this.rank = n.length;
    let o = ze(this.rank), s = BJ(t);
    this.userCode = `
    void main() {
      ${o} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `;
  }
};
function BJ(r) {
  let e = r.length;
  if (e > 6)
    throw Error(`Transpose for rank ${e} is not yet supported`);
  let t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], n = new Array(e);
  for (let o = 0; o < r.length; o++)
    n[r[o]] = t[o];
  return n.join();
}
var GC = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true;
    let n = new Array(e.length);
    for (let c = 0; c < n.length; c++)
      n[c] = e[t[c]];
    if (this.outputShape = n, this.rank = n.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    let o = ze(this.rank), s = DC("rc", this.rank), a = new Array(this.rank);
    for (let c = 0; c < t.length; c++)
      a[t[c]] = s[c];
    let i = `vec2(${a.slice(-2).join()})`, l = `++${s[this.rank - 1]} < ${n[this.rank - 1]}`, u = `getChannel(getA(${a.join()}), ${i})`;
    this.userCode = `
    void main() {
      ${o} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${l}) {
        result[1] = ${u};
      }
      --${s[this.rank - 1]};
      if(++${s[this.rank - 2]} < ${n[this.rank - 2]}) {
        result[2] = ${u};
        if(${l}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `;
  }
};
function Rl(r, e, t) {
  let n = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new GC(r.shape, e) : new jC(r.shape, e);
  return t.runWebGLProgram(n, [r], r.dtype);
}
function ZP(r, e, t, n) {
  let o = e, s = r.shape.length, a = b.parseAxisParam(o, r.shape), i = a, l = S.getAxesPermutation(i, s), u = l != null, c = r;
  u && (c = Rl(r, l, n), i = S.getInnerMostAxes(i.length, s)), S.assertAxesAreInnerMostDims("sum", i, s);
  let [p, m] = S.computeOutAndReduceShapes(c.shape, i), f = p;
  t && (f = S.expandShapeToKeepDim(p, a));
  let d = b.sizeFromShape(m), g = b.sizeFromShape(r.shape) / d, y = ae({ inputs: { x: c }, attrs: { shape: [g, d] }, backend: n }), w = Zl(r.dtype), x = Ln(y, w, "sum", n), k = ae({ inputs: { x }, attrs: { shape: f }, backend: n });
  return n.disposeIntermediateTensorInfo(y), n.disposeIntermediateTensorInfo(x), u && n.disposeIntermediateTensorInfo(c), k;
}
function qu(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n;
  return ZP(o, s, a, t);
}
var JP = { kernelName: ms, backendName: "webgl", kernelFunc: qu };
function Ft(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { perm: s } = n, a = t, i = o.shape.length, l = new Array(i);
  for (let c = 0; c < l.length; c++)
    l[c] = o.shape[s[c]];
  let u;
  if (a.shouldExecuteOnCPU([o])) {
    let p = a.texData.get(o.dataId).values, m = Uu(p, o.shape, o.dtype, s, l);
    u = a.makeTensorInfo(l, o.dtype);
    let f = a.texData.get(u.dataId);
    f.values = m;
  } else
    u = Rl(o, s, a);
  return u;
}
var QP = { kernelName: ys, backendName: "webgl", kernelFunc: Ft };
var UC = 1e3;
function Ku({ a: r, b: e, transposeA: t, transposeB: n, backend: o, bias: s = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: l = null }) {
  let u = r.shape.length, c = e.shape.length, p = t ? r.shape[u - 2] : r.shape[u - 1], m = n ? e.shape[c - 1] : e.shape[c - 2], f = t ? r.shape[u - 1] : r.shape[u - 2], d = n ? e.shape[c - 2] : e.shape[c - 1], h = r.shape.slice(0, -2), g = e.shape.slice(0, -2), y = b.sizeFromShape(h), w = b.sizeFromShape(g), x = y === w || y === 1 || w === 1;
  b.assert(u >= 2 && c >= 2 && x, () => `Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${h}) and (${g}).`);
  let C = (y > w ? r.shape.slice(0, -2) : e.shape.slice(0, -2)).concat([f, d]);
  b.assert(p === m, () => `Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${e.shape} and transposeA=${t} and transposeB=${n} must match.`);
  let A = t ? [y, p, f] : [y, f, p], $ = n ? [w, d, m] : [w, m, d], R = ae({ inputs: { x: r }, backend: o, attrs: { shape: A } }), P = ae({ inputs: { x: e }, backend: o, attrs: { shape: $ } }), M = [R, P], V = Math.max(y, w), W = t ? R.shape[1] : R.shape[2], G = s != null, U = a != null, H = l === "leakyrelu", K = l != null ? Dl(l, true) : null, re = G || U || H || K != null, X;
  if ((f === 1 || d === 1) && W > UC && re === false) {
    let Q = R, se = P;
    t && (Q = Ft({ inputs: { x: R }, backend: o, attrs: { perm: [0, 2, 1] } }), M.push(Q)), n && (se = Ft({ inputs: { x: P }, backend: o, attrs: { perm: [0, 2, 1] } }), M.push(se));
    let pe = d !== 1, ie = d === 1, fe = Q;
    pe && (fe = ae({ inputs: { x: Q }, backend: o, attrs: { shape: [V, W, 1] } }), M.push(fe));
    let de = d === 1 ? 2 : 1, ge = se;
    ie && (ge = ae({ inputs: { x: se }, backend: o, attrs: { shape: [V, 1, W] } }), M.push(ge));
    let we = xh({ inputs: { a: fe, b: ge }, backend: o });
    X = qu({ inputs: { x: we }, backend: o, attrs: { axis: de, keepDims: true } }), M.push(we);
  } else {
    let Q = pr(r.dtype, e.dtype), se = new gh(A, $, [V, f, d], t, n, G, K, U, H), pe = [R, P];
    if (s != null && pe.push(s), U && pe.push(a), H) {
      let ie = o.makeTensorInfo([], "float32", b.createScalarValue(i, "float32"));
      pe.push(ie), M.push(ie);
    }
    X = o.runWebGLProgram(se, pe, Q);
  }
  let ne = ae({ inputs: { x: X }, backend: o, attrs: { shape: C } });
  M.push(X);
  for (let Q of M)
    o.disposeIntermediateTensorInfo(Q);
  return ne;
}
function VJ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { a: o, b: s, bias: a, preluActivationWeights: i } = e, { transposeA: l, transposeB: u, activation: c, leakyreluAlpha: p } = n;
  return Ku({ a: o, b: s, transposeA: l, transposeB: u, backend: t, bias: a, preluActivationWeights: i, leakyreluAlpha: p, activation: c });
}
var eM = { kernelName: ri, backendName: "webgl", kernelFunc: VJ };
var tM = "return abs(x);";
function WJ(r) {
  let { inputs: e, backend: t } = r, { x: n } = e;
  if (t.shouldExecuteOnCPU([n]) && n.dtype !== "complex64") {
    let s = t.texData.get(n.dataId), a = xy(s.values);
    return t.makeTensorInfo(n.shape, n.dtype, a);
  }
  let o;
  return j().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? o = new Fs(n.shape, tM) : o = new Cn(n.shape, tM), t.runWebGLProgram(o, [n], n.dtype);
}
var rM = { kernelName: Vs, backendName: "webgl", kernelFunc: WJ };
var jJ = br + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`;
var GJ = _e({ opSnippet: jJ });
var nM = { kernelName: Ni, backendName: "webgl", kernelFunc: GJ };
var UJ = br + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`;
var HJ = _e({ opSnippet: UJ });
var oM = { kernelName: Ti, backendName: "webgl", kernelFunc: HJ };
var sM = "return a + b;";
var qJ = st({ opSnippet: sM, packedOpSnippet: sM, supportsComplex: true, cpuKernelImpl: WO });
var iM = { kernelName: Wn, backendName: "webgl", kernelFunc: qJ };
var HC = class {
  constructor(e, t) {
    this.outputShape = [], this.outputShape = e, this.variableNames = t.map((s, a) => `T${a}`);
    let n = [];
    this.variableNames.forEach((s) => {
      n.push(`float v${s} = get${s}AtOutCoords();`);
    });
    let o = this.variableNames.map((s) => `v${s}`).join(" + ");
    this.userCode = `
      void main() {
        ${n.join(`
        `)}

        float result = ${o};
        setOutput(result);
      }
    `;
  }
};
var qC = class {
  constructor(e, t) {
    this.outputShape = [], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.variableNames = t.map((s, a) => `T${a}`);
    let n = [];
    this.variableNames.forEach((s) => {
      n.push(`vec4 v${s} = get${s}AtOutCoords();`);
    });
    let o = this.variableNames.map((s) => `v${s}`).join(" + ");
    this.userCode = `
      void main() {
        ${n.join(`
        `)}

        vec4 result = ${o};
        setOutput(result);
      }
    `;
  }
};
function Cy(r) {
  let { inputs: e, backend: t } = r, n = e;
  if (n.length === 1)
    return Yt({ inputs: { x: n[0] }, backend: t });
  if (n.length > j().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    let l = Math.floor(n.length / 2), u = Cy({ inputs: n.slice(0, l), backend: t }), c = Cy({ inputs: n.slice(l), backend: t });
    return Cy({ inputs: [u, c], backend: t });
  }
  let o = n.map((l) => l.dtype).reduce((l, u) => pr(l, u)), s = n.map((l) => l.shape), i = j().getBool("WEBGL_PACK") ? new qC(n[0].shape, s) : new HC(n[0].shape, s);
  return t.runWebGLProgram(i, n, o);
}
var aM = { kernelName: So, backendName: "webgl", kernelFunc: Cy };
function KJ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n, i = o.shape.length, l = b.parseAxisParam(s, o.shape), u = l, c = S.getAxesPermutation(u, i), p = o;
  c != null && (p = Ft({ inputs: { x: o }, backend: t, attrs: { perm: c } }), u = S.getInnerMostAxes(u.length, i)), S.assertAxesAreInnerMostDims("all", u, i);
  let [m, f] = S.computeOutAndReduceShapes(p.shape, u), d = b.sizeFromShape(f), h = ae({ inputs: { x: p }, backend: t, attrs: { shape: [-1, d] } }), g = Ln(h, h.dtype, "all", t), y;
  if (a) {
    let w = S.expandShapeToKeepDim(m, l);
    y = ae({ inputs: { x: g }, backend: t, attrs: { shape: w } });
  } else
    y = ae({ inputs: { x: g }, backend: t, attrs: { shape: m } });
  return t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(g), c != null && t.disposeIntermediateTensorInfo(p), y;
}
var lM = { kernelName: Ei, backendName: "webgl", kernelFunc: KJ };
function XJ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n, i = o.shape.length, l = b.parseAxisParam(s, o.shape), u = l, c = S.getAxesPermutation(u, i), p = o;
  c != null && (p = Ft({ inputs: { x: o }, backend: t, attrs: { perm: c } }), u = S.getInnerMostAxes(u.length, i)), S.assertAxesAreInnerMostDims("any", u, i);
  let [m, f] = S.computeOutAndReduceShapes(p.shape, u), d = b.sizeFromShape(f), h = ae({ inputs: { x: p }, backend: t, attrs: { shape: [-1, d] } }), g = Ln(h, h.dtype, "any", t), y;
  if (a) {
    let w = S.expandShapeToKeepDim(m, l);
    y = ae({ inputs: { x: g }, backend: t, attrs: { shape: w } });
  } else
    y = ae({ inputs: { x: g }, backend: t, attrs: { shape: m } });
  return t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(g), c != null && t.disposeIntermediateTensorInfo(p), y;
}
var uM = { kernelName: Ai, backendName: "webgl", kernelFunc: XJ };
var KC = class {
  constructor(e, t, n) {
    this.variableNames = ["A"];
    let { windowSize: o, batchSize: s, outSize: a } = e;
    n || this.variableNames.push("bestIndicesA"), this.outputShape = [s, a];
    let i = t === "max" ? ">" : "<", l = n ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${o}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
};
var XC = class {
  constructor(e, t, n, o) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, b.assert(e.length > 2, () => `Packed arg${n.charAt(0).toUpperCase() + n.slice(1)} supports only inputs with rank above 2.`);
    let s = e[e.length - 1], a = Math.ceil(s / t);
    this.outputShape = e.slice(0, -1), a > 1 && this.outputShape.push(a), o || this.variableNames.push("bestIndicesA");
    let i = this.outputShape, l = i.length, u = ze(l), c = Xt("coords", l), p, m;
    if (a === 1) {
      m = l + 1;
      let R = ze(m);
      p = `
        ${R} sourceLocR = ${R}(${c.join()}, 0);
        ++${c[l - 1]};
        ${R} sourceLocG = ${R}(${c.join()}, 0);
        ++${c[l - 2]};
        ${R} sourceLocA = ${R}(${c.join()}, 0);
        --${c[l - 1]};
        ${R} sourceLocB = ${R}(${c.join()}, 0);
        --${c[l - 2]};`;
    } else
      m = l, p = `
        ${u} sourceLocR = coords;
        ++${c[l - 1]};
        ${u} sourceLocG = coords;
        ++${c[l - 2]};
        ${u} sourceLocA = coords;
        --${c[l - 1]};
        ${u} sourceLocB = coords;
        --${c[l - 2]};`;
    let f = ["x", "y", "z", "w", "u", "v"].slice(0, m), d = "." + f[m - 1], h = f.map((R) => "int " + R), g = Xt("sourceLocR", m - 1).concat("inIdx.r"), y = Xt("sourceLocG", m - 1).concat("inIdx.g"), w = Xt("sourceLocB", m - 1).concat("inIdx.b"), x = Xt("sourceLocA", m - 1).concat("inIdx.a"), k = n === "max" ? "greaterThan" : "lessThan", C = o ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${w.join()}),
                             getBestIndicesAChannel(${x.join()})));`, A = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${y.join()}) : 0.,
            hasNextRow ? getAChannel(${w.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`, $ = o ? "" : `
      float getBestIndicesAChannel(${h.join()}) {
        return getChannel(getBestIndicesA(${f.join()}),
                                          vec2(${f.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${h.join()}) {
        return getChannel(getA(${f.join()}),
                               vec2(${f.slice(-2).join()}));
      }
      ${$}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[l - 1]} < ${i[l - 1] - 1};
        bool hasNextRow = ${c[l - 2]} < ${i[l - 2] - 1};
        ${p}
        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},
          sourceLocB${d}, sourceLocA${d}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${A};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${C}
          vec4 candidate = ${A};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${k}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
};
function cM(r, e, t, n = null) {
  let o = e.shape[0], s = e.shape[1];
  n != null && (o = n.shape[0], s = n.shape[1]);
  let a = S.computeOptimalWindowSize(s), i = { windowSize: a, inSize: s, batchSize: o, outSize: Math.ceil(s / a) }, l = new KC(i, t, n == null), u = [e];
  n != null && u.push(n);
  let c = r.runWebGLProgram(l, u, "int32");
  if (c.shape[1] === 1)
    return c;
  let p = cM(r, e, t, c);
  return r.disposeIntermediateTensorInfo(c), p;
}
function pM(r, e, t, n = null) {
  let o = n != null ? n.shape : e.shape, s = o[o.length - 1], a = S.computeOptimalWindowSize(s), i = new XC(o, a, t, n == null), l = n == null ? [e] : [e, n], u = r.runWebGLProgram(i, l, "int32");
  if (u.shape.length === e.shape.length) {
    let c = pM(r, e, t, u);
    return r.disposeIntermediateTensorInfo(u), c;
  }
  return u;
}
function Sy(r, e, t, n) {
  let o = [t];
  if (S.assertAxesAreInnerMostDims("arg" + n.charAt(0).toUpperCase() + n.slice(1), o, e.shape.length), !j().getBool("WEBGL_PACK_REDUCE") || e.shape.length <= 2) {
    let s = [], a = r.texData.get(e.dataId), i = a !== null && a.isPacked, l = e;
    i && (l = r.unpackTensor(e), s.push(l));
    let [u, c] = S.computeOutAndReduceShapes(l.shape, o), p = b.sizeFromShape(c), m = ae({ inputs: { x: l }, backend: r, attrs: { shape: [-1, p] } });
    s.push(m);
    let f = cM(r, m, n);
    s.push(f);
    let d = ae({ inputs: { x: f }, backend: r, attrs: { shape: u } });
    return s.forEach((h) => r.disposeIntermediateTensorInfo(h)), d;
  }
  return pM(r, e, n);
}
function YJ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s } = n, a = b.parseAxisParam(s, o.shape), i = S.getAxesPermutation(a, o.shape.length), l = o, u = [];
  i != null && (l = Ft({ inputs: { x: o }, backend: t, attrs: { perm: i } }), u.push(l), a = S.getInnerMostAxes(a.length, l.shape.length)), S.assertAxesAreInnerMostDims("argMax", [a[0]], l.shape.length);
  let c = Sy(t, l, a[0], "max");
  return u.forEach((p) => t.disposeIntermediateTensorInfo(p)), c;
}
var mM = { kernelName: Io, backendName: "webgl", kernelFunc: YJ };
function ZJ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s } = n, a = b.parseAxisParam(s, o.shape), i = S.getAxesPermutation(a, o.shape.length), l = o, u = [];
  i != null && (l = Ft({ inputs: { x: o }, backend: t, attrs: { perm: i } }), u.push(l), a = S.getInnerMostAxes(a.length, l.shape.length)), S.assertAxesAreInnerMostDims("argMin", [a[0]], l.shape.length);
  let c = Sy(t, l, a[0], "min");
  return u.forEach((p) => t.disposeIntermediateTensorInfo(p)), c;
}
var fM = { kernelName: Xa, backendName: "webgl", kernelFunc: ZJ };
var JJ = br + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`;
var QJ = _e({ opSnippet: JJ });
var dM = { kernelName: $i, backendName: "webgl", kernelFunc: QJ };
var eQ = br + "return log(x + sqrt(x * x + 1.0));";
var tQ = _e({ opSnippet: eQ });
var hM = { kernelName: Di, backendName: "webgl", kernelFunc: tQ };
var rQ = br + `
  return atan(x);
`;
var nQ = _e({ opSnippet: rQ });
var gM = { kernelName: Ri, backendName: "webgl", kernelFunc: nQ };
var oQ = UP + `
  return atan(a, b);
`;
var sQ = `
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + HP + `
  return result;
`;
var iQ = st({ opSnippet: oQ, packedOpSnippet: sQ });
var xM = { kernelName: Oi, backendName: "webgl", kernelFunc: iQ };
var aQ = br + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;
var lQ = _e({ opSnippet: aQ });
var yM = { kernelName: Fi, backendName: "webgl", kernelFunc: lQ };
var wi = class {
  constructor(e, t, n, o = false, s = false) {
    if (this.variableNames = ["x"], t === "avg" && n)
      throw new Error("Cannot compute positions for average pool.");
    let a = e.filterWidth, i = e.strideHeight, l = e.strideWidth, u = e.dilationHeight, c = e.dilationWidth, p = e.effectiveFilterHeight, m = e.effectiveFilterWidth, f = e.padInfo.top, d = e.padInfo.left;
    this.outputShape = e.outShape;
    let h = t === "avg", g = `((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`, y = `(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`, w = "0.0";
    if (h || (w = "-1.0 / 1e-20"), n) {
      let R = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${i}, ${l});
        const ivec2 pads = ivec2(${f}, ${d});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${R} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${o ? s ? g : y : `wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    let x = "max", k = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (k = "avgValue / count");
    let C = Math.floor(a / 4) * 4, A = a % 4, $ = `
      if (${h}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${x}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${i}, ${l});
      const ivec2 pads = ivec2(${f}, ${d});
      const float initializationValue = ${w};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${w});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${C}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${$}
          }

          int xC = xCCorner + ${C};
          if (${A === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${$}
          } else if (${A === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${$}
          } else if (${A === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${$}
          }
        }
        setOutput(${k});
      }
    `;
  }
};
var Xu = class {
  constructor(e, t, n, o = false, s = false) {
    if (this.variableNames = ["x"], t === "avg" && n)
      throw new Error("Cannot compute positions for average pool.");
    let a = e.filterWidth, i = e.strideDepth, l = e.strideHeight, u = e.strideWidth, c = e.dilationDepth, p = e.dilationHeight, m = e.dilationWidth, f = e.effectiveFilterDepth, d = e.effectiveFilterHeight, h = e.effectiveFilterWidth, g = e.padInfo.front, y = e.padInfo.top, w = e.padInfo.left;
    this.outputShape = e.outShape;
    let x = t === "avg", k = "0.0";
    if (x || (k = "-1.0 / 1e-20"), n) {
      let M = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${i}, ${l}, ${u});
        const ivec3 pads = ivec3(${g}, ${y}, ${w});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${f};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${d};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${h};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${M} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${o ? s ? `(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `wD * ${d} * ${h} +
                      wR * ${h} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    let C = "max", A = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (A = "avgValue / count");
    let $ = Math.floor(a / 4) * 4, R = a % 4, P = `
      if (${x}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${C}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${i}, ${l}, ${u});
      const ivec3 pads = ivec3(${g}, ${y}, ${w});
      const float initializationValue = ${k};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${k});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${f};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${$}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${P}
            }

            int xC = xCCorner + ${$};
            if (${R === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${P}
            } else if (${R === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${P}
            } else if (${R === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${P}
            }
          }
          setOutput(${A});
        }
      }
    `;
  }
};
function uQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e;
  Ds(o, "avgPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: l } = n, u = 1;
  b.assert(S.eitherStridesOrDilationsAreOne(a, u), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = S.computePool2DInfo(o.shape, s, a, u, i, l);
  if (c.filterWidth === 1 && c.filterHeight === 1 && b.arraysEqual(c.inShape, c.outShape))
    return Yt({ inputs: { x: o }, backend: t });
  let p = new wi(c, "avg", false);
  return t.runWebGLProgram(p, [o], "float32");
}
var bM = { kernelName: No, backendName: "webgl", kernelFunc: uQ };
function cQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { filterSize: s, strides: a, pad: i, dimRoundingMode: l, dataFormat: u } = n, c = [1, 1, 1], p = S.computePool3DInfo(o.shape, s, a, c, i, l, u), m = new Xu(p, "avg", false);
  return t.runWebGLProgram(m, [o], "float32");
}
var wM = { kernelName: Ya, backendName: "webgl", kernelFunc: cQ };
var YC = class {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    let t = e.filterHeight, n = e.filterWidth, o = e.strideHeight, s = e.strideWidth, a = e.dilationHeight, i = e.dilationWidth, l = e.effectiveFilterHeight, u = e.effectiveFilterWidth, c = l - 1 - e.padInfo.top, p = u - 1 - e.padInfo.left, m = 1 / (t * n);
    this.userCode = `
      const ivec2 pads = ivec2(${c}, ${p});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var ZC = class {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    let t = e.filterDepth, n = e.filterHeight, o = e.filterWidth, s = e.strideDepth, a = e.strideHeight, i = e.strideWidth, l = e.dilationDepth, u = e.dilationHeight, c = e.dilationWidth, p = e.effectiveFilterDepth, m = e.effectiveFilterHeight, f = e.effectiveFilterWidth, d = p - 1 - e.padInfo.front, h = m - 1 - e.padInfo.top, g = f - 1 - e.padInfo.left, y = 1 / (t * n * o);
    this.userCode = `
      const ivec3 pads = ivec3(${d}, ${h}, ${g});
      const float avgMultiplier = float(${y});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${f};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function pQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, input: s } = e, a = s, { filterSize: i, strides: l, pad: u, dimRoundingMode: c } = n, p = [1, 1, 1], m = S.computePool3DInfo(a.shape, i, l, p, u, c), f = new ZC(m);
  return t.runWebGLProgram(f, [o], a.dtype);
}
var kM = { kernelName: xc, backendName: "webgl", kernelFunc: pQ };
function mQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, input: s } = e, a = s;
  Ds([o, s], "avgPoolGrad");
  let { filterSize: i, strides: l, pad: u } = n, c = S.computePool2DInfo(a.shape, i, l, 1, u), p = new YC(c);
  return t.runWebGLProgram(p, [o], a.dtype);
}
var _M = { kernelName: gc, backendName: "webgl", kernelFunc: mQ };
function fQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { a: o, b: s } = e, { transposeA: a, transposeB: i } = n;
  return Ku({ a: o, b: s, transposeA: a, transposeB: i, backend: t });
}
var vM = { kernelName: To, backendName: "webgl", kernelFunc: fQ };
var JC = class {
  constructor(e, t, n, o, s, a) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], S.assertAndGetBroadcastShape(e, t), S.assertAndGetBroadcastShape(e, n);
    let i = "0.0";
    o != null && (S.assertAndGetBroadcastShape(e, o), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let l = "1.0";
    s != null && (S.assertAndGetBroadcastShape(e, s), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${a}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
};
var QC = class {
  constructor(e, t, n, o, s, a) {
    this.packedInputs = true, this.packedOutput = true, this.variableNames = ["x", "mean", "variance"], S.assertAndGetBroadcastShape(e, t), S.assertAndGetBroadcastShape(e, n);
    let i = "vec4(0.0)";
    o != null && (S.assertAndGetBroadcastShape(e, o), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let l = "vec4(1.0)";
    s != null && (S.assertAndGetBroadcastShape(e, s), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${a}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
};
var dQ = ({ inputs: r, backend: e, attrs: t }) => {
  let { x: n, mean: o, variance: s, offset: a, scale: i } = r;
  b.assert(o.shape.length === s.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), b.assert(a == null || o.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), b.assert(i == null || o.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: l } = t;
  l == null && (l = 1e-3);
  let u = [n, o, s], c = null;
  a != null && (c = a.shape, u.push(a));
  let p = null;
  i != null && (p = i.shape, u.push(i));
  let m = j().getBool("WEBGL_PACK_NORMALIZATION") ? new QC(n.shape, o.shape, s.shape, c, p, l) : new JC(n.shape, o.shape, s.shape, c, p, l);
  return e.runWebGLProgram(m, u, u[0].dtype);
};
var CM = { kernelName: Vo, backendName: "webgl", kernelFunc: dQ };
var eS = class {
  constructor(e) {
    this.variableNames = ["source"], this.outputShape = e, this.rank = e.length;
    let t = ze(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    let n = hQ(this.rank), o, s = e.map((a, i) => `sourceLoc.${tS[i]} = start[${i}] + coords.${tS[i]};`);
    o = `
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${s.join(`
`)}
      `, this.userCode = `
      void main() {
        ${o}
        setOutput(getSource(${n}));
      }
    `;
  }
};
var tS = ["x", "y", "z", "w", "u", "v"];
function hQ(r) {
  if (r === 1)
    return "sourceLoc";
  if (r <= 6)
    return tS.slice(0, r).map((e) => "sourceLoc." + e).join(",");
  throw Error(`Slicing for rank ${r} is not yet supported`);
}
var rS = class {
  constructor(e) {
    this.variableNames = ["source"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.rank = e.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    let t = ze(this.rank), n = Xt("coords", this.rank), o = Xt("sourceLoc", this.rank), s = this.rank === 1 ? "sourceLoc" : `vec2(${o.slice(-2).join()})`, a = `getChannel(getSource(${o.join()}), ${s})`, i = `
      result.x = ${a};
      if (++${n[this.rank - 1]} < ${e[this.rank - 1]}) {
        ++${o[this.rank - 1]};
        result.y = ${a};
        --${o[this.rank - 1]};
      }
    `, l = this.rank === 1 ? "" : `
      --${n[this.rank - 1]};
      if (++${n[this.rank - 2]} < ${e[this.rank - 2]}) {
        ++${o[this.rank - 2]};
        result.z = ${a};
        if (++${n[this.rank - 1]} < ${e[this.rank - 1]}) {
          ++${o[this.rank - 1]};
          result.w = ${a};
        }
      }
    `, u = this.rank <= 4 ? `sourceLoc = coords +
            ${t}(${e.map((c, p) => `start[${p}]`).join()});` : e.map((c, p) => `${o[p]} = ${n[p]} + start[${p}];`).join(`
`);
    this.userCode = `
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${i}
        ${l}
        setOutput(result);
      }
    `;
  }
};
function gQ(r, e, t, n) {
  let o = n.texData.get(r.dataId), s = n.makeTensorInfo(t, r.dtype), a = n.texData.get(s.dataId);
  Object.assign(a, o), a.refCount = 1, a.shape = t, a.dtype = r.dtype;
  let i = ar.computeFlatOffset(e, b.computeStrides(r.shape));
  o.slice && (i += o.slice.flatOffset), a.slice = { flatOffset: i, origDataId: o.slice && o.slice.origDataId || r.dataId };
  let l = n.dataRefCount.get(a.slice.origDataId) || 1;
  return n.dataRefCount.set(a.slice.origDataId, l + 1), s;
}
function Ps(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { begin: s, size: a } = n, [i, l] = ar.parseSliceParams(o, s, a);
  if (ar.assertParamsValid(o, i, l), b.sizeFromShape(l) === 0)
    return t.makeTensorInfo(l, o.dtype, []);
  if (t.shouldExecuteOnCPU([o]) || o.dtype === "string") {
    let p = t.texData.get(o.dataId), m = dP(p.values, i, l, o.shape, o.dtype);
    return t.makeTensorInfo(l, o.dtype, m);
  }
  let { isPacked: u } = t.texData.get(o.dataId), c = ar.isSliceContinous(o.shape, i, l);
  if (u || !c) {
    let p = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new rS(l) : new eS(l), m = [i];
    return t.runWebGLProgram(p, [o], o.dtype, m);
  }
  return t.uploadToGPU(o.dataId), gQ(o, i, l, t);
}
var SM = { kernelName: Zs, backendName: "webgl", kernelFunc: Ps };
var xQ = (r) => {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { blockShape: s, crops: a } = n;
  b.assert(o.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  let i = s.reduce((w, x) => w * x), l = S.getReshaped(o.shape, s, i), u = S.getPermuted(l.length, s.length), c = S.getReshapedPermuted(o.shape, s, i), p = S.getSliceBeginCoords(a, s.length), m = S.getSliceSize(c, a, s.length), f = [], d = ae({ inputs: { x: o }, backend: t, attrs: { shape: l } }), h = Ft({ inputs: { x: d }, backend: t, attrs: { perm: u } }), g = ae({ inputs: { x: h }, backend: t, attrs: { shape: c } }), y = Ps({ inputs: { x: g }, backend: t, attrs: { begin: p, size: m } });
  return f.push(d), f.push(h), f.push(g), f.forEach((w) => t.disposeIntermediateTensorInfo(w)), y;
};
var IM = { kernelName: Ws, backendName: "webgl", kernelFunc: xQ };
function yQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, weights: s } = e, { size: a } = n, i = t.readSync(o.dataId), l = t.readSync(s.dataId), u = gy(i, l, s.dtype, s.shape, a);
  return t.makeTensorInfo([a], s.dtype, u);
}
var NM = { kernelName: yc, backendName: "webgl", kernelFunc: yQ };
var bQ = "return float(a != b);";
var nS = st({ opSnippet: bQ, cpuKernelImpl: uP, dtype: "bool" });
var TM = { kernelName: Ji, backendName: "webgl", kernelFunc: nS };
function za(r) {
  let { inputs: e, backend: t } = r, { input: n } = e, o = t.texData.get(n.dataId);
  return Yt({ inputs: { x: o.complexTensorInfos.real }, backend: t });
}
var EM = { kernelName: Lc, backendName: "webgl", kernelFunc: za };
var wQ = "return float(int(x));";
function AM(r, e) {
  let t = new Cn(r.shape, wQ), n = e.runWebGLProgram(t, [r], "int32");
  return { dataId: n.dataId, shape: n.shape, dtype: n.dtype };
}
function oS(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { dtype: s } = n;
  if (s === "complex64") {
    if (o.dtype === "complex64")
      return Yt({ inputs: { x: o }, backend: t });
    let a = ht(o.shape), i = oS({ inputs: { x: o }, backend: t, attrs: { dtype: "float32" } }), l = Sn({ inputs: { real: i, imag: a }, backend: t });
    return a.dispose(), t.disposeIntermediateTensorInfo(i), l;
  }
  if (o.dtype === "complex64") {
    let a = za({ inputs: { input: o }, backend: t }), i = oS({ inputs: { x: a }, backend: t, attrs: { dtype: s } });
    return t.disposeIntermediateTensorInfo(a), i;
  }
  if (!b.hasEncodingLoss(o.dtype, s)) {
    let a = Yt({ inputs: { x: o }, backend: t });
    return { dataId: a.dataId, shape: a.shape, dtype: s };
  }
  if (s === "int32")
    return AM(o, t);
  if (s === "bool") {
    let a = t.makeTensorInfo([], "bool", b.getTypedArrayFromDType("bool", 1)), l = nS({ inputs: { a: o, b: a }, backend: t });
    return t.disposeIntermediateTensorInfo(a), l;
  }
  throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${s}`);
}
var $M = { kernelName: Qn, backendName: "webgl", kernelFunc: oS };
var DM = "return ceil(x);";
var kQ = _e({ opSnippet: DM, packedOpSnippet: DM, cpuKernelImpl: GO });
var RM = { kernelName: Eo, backendName: "webgl", kernelFunc: kQ };
var sS = class {
  constructor(e) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
};
var iS = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
};
function _Q(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { clipValueMin: s, clipValueMax: a } = n, i;
  j().getBool("WEBGL_PACK_CLIP") ? i = new iS(o.shape) : i = new sS(o.shape);
  let l = [[s], [a]];
  return t.runWebGLProgram(i, [o], o.dtype, l);
}
var FM = { kernelName: eo, backendName: "webgl", kernelFunc: _Q };
var aS = class {
  constructor(e) {
    this.variableNames = ["real", "imag"], this.outputShape = e, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
};
function OM(r, e) {
  return { dataId: e.dataId, dtype: e.dtype, shape: r.shape };
}
function vQ(r) {
  let { inputs: e, backend: t } = r, { x: n } = e, o = t.texData.get(n.dataId), s = new aS(n.shape), a = [OM(n, o.complexTensorInfos.real), OM(n, o.complexTensorInfos.imag)];
  return t.runWebGLProgram(s, a, a[0].dtype);
}
var PM = { kernelName: Za, backendName: "webgl", kernelFunc: vQ };
var lS = class {
  constructor(e) {
    this.outputShape = [], this.outputShape = S.computeOutShape(e, 1), this.variableNames = e.map((a, i) => `T${i}`);
    let t = new Array(e.length - 1);
    t[0] = e[0][1];
    for (let a = 1; a < t.length; a++)
      t[a] = t[a - 1] + e[a][1];
    let n = [`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];
    for (let a = 1; a < t.length; a++) {
      let i = t[a - 1];
      n.push(`else if (yC < ${t[a]}) setOutput(getT${a}(yR, yC-${i}));`);
    }
    let o = t.length, s = t[t.length - 1];
    n.push(`else setOutput(getT${o}(yR, yC-${s}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${n.join(`
        `)}
      }
    `;
  }
};
var uS = class {
  constructor(e, t) {
    this.packedInputs = true, this.packedOutput = true, this.outputShape = [], this.outputShape = S.computeOutShape(e, t);
    let n = this.outputShape, o = n.length, s = ze(o), a = Xt("coords", o), i = ["x", "y", "z", "w", "u", "v"].slice(0, o);
    this.variableNames = e.map((h, g) => `T${g}`);
    let l = new Array(e.length - 1);
    l[0] = e[0][t];
    for (let h = 1; h < l.length; h++)
      l[h] = l[h - 1] + e[h][t];
    let u = i[t], c = i.slice(-2), p = i.join(), m = `if (${u} < ${l[0]}) {
        return getChannel(
            getT0(${p}), vec2(${c.join()}));
        }`;
    for (let h = 1; h < l.length; h++) {
      let g = l[h - 1];
      m += `
        if (${u} < ${l[h]}  && ${u} >= ${l[h - 1]}) {
          return getChannel(
            getT${h}(${Iy(i, u, g)}),
            vec2(${Iy(c, u, g)}));
        }`;
    }
    let f = l.length, d = l[l.length - 1];
    m += `
        return getChannel(
          getT${f}(${Iy(i, u, d)}),
          vec2(${Iy(c, u, d)}));`, this.userCode = `
      float getValue(${i.map((h) => "int " + h)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${a}), 0., 0., 0.);

        ${a[o - 1]} = ${a[o - 1]} + 1;
        if (${a[o - 1]} < ${n[o - 1]}) {
          result.g = getValue(${a});
        }

        ${a[o - 2]} = ${a[o - 2]} + 1;
        if (${a[o - 2]} < ${n[o - 2]}) {
          result.a = getValue(${a});
        }

        ${a[o - 1]} = ${a[o - 1]} - 1;
        if (${a[o - 2]} < ${n[o - 2]} &&
            ${a[o - 1]} < ${n[o - 1]}) {
          result.b = getValue(${a});
        }
        setOutput(result);
      }
    `;
  }
};
function Iy(r, e, t) {
  let n = r.indexOf(e);
  return r.map((s, a) => a === n ? `${s} - ${t}` : s).join();
}
function Yu(r) {
  let { inputs: e, backend: t } = r, { input: n } = e, o = t.texData.get(n.dataId);
  return Yt({ inputs: { x: o.complexTensorInfos.imag }, backend: t });
}
var MM = { kernelName: $c, backendName: "webgl", kernelFunc: Yu };
function Zu(r, e, t) {
  let n = r[0].dtype;
  if (n === "complex64") {
    let c = r.map((h) => za({ inputs: { input: h }, backend: t })), p = r.map((h) => Yu({ inputs: { input: h }, backend: t })), m = Zu(c, e, t), f = Zu(p, e, t), d = Sn({ inputs: { real: m, imag: f }, backend: t });
    return c.forEach((h) => t.disposeIntermediateTensorInfo(h)), p.forEach((h) => t.disposeIntermediateTensorInfo(h)), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(f), d;
  }
  let o = t.shouldExecuteOnCPU(r);
  if (n === "string" && (o = true), o) {
    let c = r.map((y) => {
      let w = b.sizeFromShape(y.shape.slice(e));
      return ae({ inputs: { x: y }, backend: t, attrs: { shape: [-1, w] } });
    }), p = c.map((y) => ({ vals: t.readSync(y.dataId), shape: y.shape })), m = S.computeOutShape(c.map((y) => y.shape), 1), f = c[0].shape[0] === 1, d = UO(p, m, n, f), h = S.computeOutShape(r.map((y) => y.shape), e), g = t.makeTensorInfo(h, n, d);
    return c.forEach((y) => t.disposeIntermediateTensorInfo(y)), g;
  }
  if (r.length > j().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    let c = Math.floor(r.length / 2), p = Zu(r.slice(0, c), e, t), m = Zu(r.slice(c), e, t), f = Zu([p, m], e, t);
    return t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(m), f;
  }
  if (j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && r[0].shape.length > 1) {
    let c = new uS(r.map((p) => p.shape), e);
    return t.runWebGLProgram(c, r, n);
  }
  let { tensors2D: s, outShape: a } = CQ(r, e, t), i = new lS(s.map((c) => c.shape)), l = t.runWebGLProgram(i, s, n);
  s.forEach((c) => t.disposeIntermediateTensorInfo(c));
  let u = ae({ inputs: { x: l }, attrs: { shape: a }, backend: t });
  return t.disposeIntermediateTensorInfo(l), u;
}
function CQ(r, e, t) {
  let n = S.computeOutShape(r.map((s) => s.shape), e);
  return { tensors2D: r.map((s) => ae({ inputs: { x: s }, attrs: { shape: [-1, b.sizeFromShape(s.shape.slice(e))] }, backend: t })), outShape: n };
}
function cS(r) {
  let { inputs: e, backend: t, attrs: n } = r, { axis: o } = n, s = b.parseAxisParam(o, e[0].shape)[0], a = S.computeOutShape(e.map((u) => u.shape), s);
  if (b.sizeFromShape(a) === 0)
    return t.makeTensorInfo(a, e[0].dtype, []);
  let i = e.filter((u) => b.sizeFromShape(u.shape) > 0);
  if (i.length === 1)
    return Yt({ inputs: { x: i[0] }, backend: t });
  let l = i.map((u) => u.shape);
  return S.assertParamsConsistent(l, s), Zu(i, s, t);
}
var LM = { kernelName: js, backendName: "webgl", kernelFunc: cS };
var yh = class {
  constructor(e, t = false, n = null, o = false, s = false) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    let a = e.padInfo.top, i = e.padInfo.left, l = e.strideHeight, u = e.strideWidth, c = e.dilationHeight, p = e.dilationWidth, m = e.filterHeight, f = e.filterWidth, d = Math.floor(e.inChannels / 4) * 4, h = e.inChannels % 4, g = e.dataFormat === "channelsLast", y = g ? 1 : 2, w = g ? 2 : 3, x = g ? 3 : 1, k = "", C = "";
    n && (o ? k = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : s ? k = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : k = `
          float activation(float x) {
            ${n}
          }
        `, C = "result = activation(result);");
    let A = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${k}

      const ivec2 strides = ivec2(${l}, ${u});
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${x}];

        ivec2 xRCCorner =
            ivec2(coords[${y}], coords[${w}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${f}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${d}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${h === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${d}) *
                    getW(wR, wC, ${d}, d2);
              } else {
                dotProd +=
                    getX(batch, ${d}, xR, xC) *
                    getW(wR, wC, ${d}, d2);
              }

            } else if (${h === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${d}, d2),
                getW(wR, wC, ${d} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${d}),
                  getX(batch, xR, xC, ${d} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${d}, xR, xC),
                  getX(batch, ${d} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${h === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${d}, d2),
                getW(wR, wC, ${d} + 1, d2),
                getW(wR, wC, ${d} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${d}),
                  getX(batch, xR, xC, ${d} + 1),
                  getX(batch, xR, xC, ${d} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${d}, xR, xC),
                  getX(batch, ${d} + 1, xR, xC),
                  getX(batch, ${d} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${A}
        ${C}
        setOutput(result);
      }
    `;
  }
};
var pS = class {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    let t = e.padInfo.front, n = e.padInfo.top, o = e.padInfo.left, s = e.strideDepth, a = e.strideHeight, i = e.strideWidth, l = e.dilationDepth, u = e.dilationHeight, c = e.dilationWidth, p = e.filterDepth, m = e.filterHeight, f = e.filterWidth, d = Math.floor(e.inChannels / 4) * 4, h = e.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${s}, ${a}, ${i});
      const ivec3 pads = ivec3(${t}, ${n}, ${o});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${f}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${d}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${h === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${d}) *
                  getW(wF, wR, wC, ${d}, d2);
              } else if (${h === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${d}),
                  getX(batch, xF, xR, xC, ${d} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${d}, d2),
                  getW(wF, wR, wC, ${d} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${h === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${d}),
                  getX(batch, xF, xR, xC, ${d} + 1),
                  getX(batch, xF, xR, xC, ${d} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${d}, d2),
                  getW(wF, wR, wC, ${d} + 1, d2),
                  getW(wF, wR, wC, ${d} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var mS = class {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec3" }, { name: "pad", type: "ivec2" }, { name: "stride", type: "ivec2" }, { name: "dilation", type: "ivec2" }, { name: "inChannels", type: "int" }, { name: "itemsPerBlockRow", type: "int" }, { name: "outWidth", type: "int" }], this.outputShape = e, this.enableShapeUniforms = jt(this.outputShape.length);
    let { dataFormat: n } = t, o = zt(), s = n === "channelsLast", a = s ? 0 : 1, i = s ? 1 : 2, l = this.enableShapeUniforms ? "if(blockIndex < outShape[1] && pos < outShape[0]) {" : `if(blockIndex < ${e[1]} && pos < ${e[0]}) {`, u = "";
    for (let c = 0; c <= 1; c++)
      for (let p = 0; p <= 1; p++)
        u += `
          blockIndex = rc.y + ${p};
          pos = rc.x + ${c};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${a}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c * 2 + p}] = getChannel(
                    getA(d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c * 2 + p}] = getChannel(
                    getA(ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec2 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${o.output} = result;
      }
    `;
  }
};
function Ny({ x: r, filter: e, convInfo: t, backend: n, bias: o = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let l = r.shape, u = n.texData.get(r.dataId), c = t.inChannels, p = l[0] * l[1] * l[2], m = t.outChannels, f = t.dataFormat === "channelsLast", d = false, h = false, g, y = [];
  if (!((p === 1 || m === 1) && c > UC) && u.isPacked && f && u.texture != null && l[2] % 2 != 0 && b.arraysEqual(u.shape.slice(-3), l.slice(-3))) {
    let k = l[0] * l[1] * (l[2] + 1), C = { dataId: r.dataId, shape: [1, k, t.inChannels], dtype: r.dtype }, A = u.shape;
    u.shape = u.shape.slice(), u.shape[u.shape.length - 2]++, b.assert(Al(u.shape, C.shape), () => `packed reshape ${u.shape} to ${C.shape} isn't free`);
    let $ = ae({ inputs: { x: e }, backend: n, attrs: { shape: [1, t.inChannels, t.outChannels] } });
    y.push($);
    let R = Ku({ a: C, b: $, backend: n, transposeA: d, transposeB: h, bias: o, activation: i, preluActivationWeights: s, leakyreluAlpha: a }), P = n.texData.get(R.dataId);
    b.assert(P.isPacked, () => "batchMatMul result is expected to be packed"), u.shape = A, P.shape = t.outShape, g = Yt({ inputs: { x: R }, backend: n }), g.shape = t.outShape, y.push(R);
  } else {
    let k = f ? l[0] * l[1] * l[2] : l[0] * l[2] * l[3], C = ae({ inputs: { x: r }, backend: n, attrs: { shape: [1, k, t.inChannels] } }), A = ae({ inputs: { x: e }, backend: n, attrs: { shape: [1, t.inChannels, t.outChannels] } }), $ = Ku({ a: C, b: A, transposeA: d, transposeB: h, backend: n, bias: o, activation: i, preluActivationWeights: s, leakyreluAlpha: a });
    g = ae({ inputs: { x: $ }, backend: n, attrs: { shape: t.outShape } }), y.push(C), y.push(A), y.push($);
  }
  for (let k of y)
    n.disposeIntermediateTensorInfo(k);
  return g;
}
function Ty({ x: r, filter: e, convInfo: t, backend: n, bias: o = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let { filterWidth: l, filterHeight: u, inChannels: c, outWidth: p, outHeight: m, dataFormat: f } = t, d = f === "channelsLast", h = l * u * c, g = m * p, y = [h, g], w = true, x = false, k = [], C = ae({ inputs: { x: r }, backend: n, attrs: { shape: r.shape.slice(1) } }), A = ae({ inputs: { x: e }, backend: n, attrs: { shape: [1, h, b.sizeFromShape(e.shape) / h] } });
  k.push(C), k.push(A);
  let $ = new mS(y, t), R = [C.shape, [t.padInfo.top, t.padInfo.left], [t.strideHeight, t.strideWidth], [t.dilationHeight, t.dilationWidth], [t.inChannels], [t.filterWidth * t.inChannels], [t.outWidth]], P = n.runWebGLProgram($, [C], "float32", R), M = ae({ inputs: { x: P }, backend: n, attrs: { shape: [1, y[0], y[1]] } });
  k.push(P), k.push(M);
  let V = o != null, W = s != null, G = i === "leakyrelu", U = i ? Dl(i, true) : null, H = new gh(M.shape, A.shape, [1, g, t.outChannels], w, x, V, U, W, G), K = [M, A];
  if (o && K.push(o), W && K.push(s), G) {
    let Q = n.makeTensorInfo([], "float32", b.createScalarValue(a, "float32"));
    K.push(Q), k.push(Q);
  }
  let re = n.runWebGLProgram(H, K, "float32"), X = d ? [1, m, p, t.outChannels] : [1, t.outChannels, m, p], ne = ae({ inputs: { x: re }, backend: n, attrs: { shape: X } });
  k.push(re);
  for (let Q of k)
    n.disposeIntermediateTensorInfo(Q);
  return ne;
}
function SQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s } = e, { strides: a, pad: i, dataFormat: l, dilations: u, dimRoundingMode: c } = n, p = S.convertConv2DDataFormat(l), m = S.computeConv2DInfo(o.shape, s.shape, a, u, i, c, false, p), f;
  if (m.filterHeight === 1 && m.filterWidth === 1 && m.dilationHeight === 1 && m.dilationWidth === 1 && m.strideHeight === 1 && m.strideWidth === 1 && (m.padInfo.type === "SAME" || m.padInfo.type === "VALID"))
    f = Ny({ x: o, filter: s, convInfo: m, backend: t });
  else if (j().getBool("WEBGL_CONV_IM2COL") && o.shape[0] === 1)
    f = Ty({ x: o, filter: s, convInfo: m, backend: t });
  else {
    let h = new yh(m);
    f = t.runWebGLProgram(h, [o, s], "float32");
  }
  let d = ae({ inputs: { x: f }, backend: t, attrs: { shape: m.outShape } });
  return t.disposeIntermediateTensorInfo(f), d;
}
var zM = { kernelName: Ao, backendName: "webgl", kernelFunc: SQ };
var fS = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    let t = e.strideHeight, n = e.strideWidth, o = e.padInfo.top, s = e.padInfo.left, a = e.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${o};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${s};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${a}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var dS = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    let t = e.filterHeight, n = e.filterWidth, o = e.strideHeight, s = e.strideWidth, a = e.dataFormat === "channelsLast", i = t - 1 - e.padInfo.top, l = n - 1 - e.padInfo.left, u = a ? 1 : 2, c = a ? 2 : 3, p = a ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${p}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${a}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var hS = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    let t = e.strideDepth, n = e.strideHeight, o = e.strideWidth, s = e.padInfo.front, a = e.padInfo.top, i = e.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${s};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${n} - ${a};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${o} - ${i};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var gS = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    let t = e.filterDepth, n = e.filterHeight, o = e.filterWidth, s = e.strideDepth, a = e.strideHeight, i = e.strideWidth, l = t - 1 - e.padInfo.front, u = n - 1 - e.padInfo.top, c = o - 1 - e.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${l}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${n}; wR++) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${n} - 1 - wR;

            for (int wC = 0; wC < ${o}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${o} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function IQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, dy: s } = e, { strides: a, pad: i, dataFormat: l, dimRoundingMode: u, filterShape: c } = n, p = S.convertConv2DDataFormat(l), m = S.computeConv2DInfo(o.shape, c, a, 1, i, u, false, p), f = new fS(m);
  return t.runWebGLProgram(f, [o, s], "float32");
}
var BM = { kernelName: wc, backendName: "webgl", kernelFunc: IQ };
function NQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, filter: s } = e, { inputShape: a, strides: i, pad: l, dataFormat: u, dimRoundingMode: c } = n, p = S.convertConv2DDataFormat(u), m = S.computeConv2DInfo(a, s.shape, i, 1, l, c, false, p), f = new dS(m);
  return t.runWebGLProgram(f, [o, s], "float32");
}
var VM = { kernelName: $o, backendName: "webgl", kernelFunc: NQ };
function TQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s } = e, { strides: a, pad: i, dilations: l } = n, u = S.computeConv3DInfo(o.shape, s.shape, a, l, i), c = new pS(u);
  return t.runWebGLProgram(c, [o, s], "float32");
}
var WM = { kernelName: Ja, backendName: "webgl", kernelFunc: TQ };
function EQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, dy: s } = e, { strides: a, pad: i, filterShape: l } = n, u = S.computeConv3DInfo(o.shape, l, a, 1, i), c = new hS(u);
  return t.runWebGLProgram(c, [o, s], "float32");
}
var jM = { kernelName: kc, backendName: "webgl", kernelFunc: EQ };
function AQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, filter: s } = e, { pad: a, strides: i, inputShape: l } = n, u = S.computeConv3DInfo(l, s.shape, i, 1, a), c = new gS(u);
  return t.runWebGLProgram(c, [o, s], "float32");
}
var GM = { kernelName: _c, backendName: "webgl", kernelFunc: AQ };
var $Q = ky + `
  return cos(x);
`;
var DQ = _e({ opSnippet: $Q });
var UM = { kernelName: Do, backendName: "webgl", kernelFunc: DQ };
var RQ = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`;
var FQ = _e({ opSnippet: RQ });
var HM = { kernelName: Ro, backendName: "webgl", kernelFunc: FQ };
var xS = class {
  constructor(e, t, n, o, s) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    let [a, i, l, u] = e, [c] = t, [p, m] = n;
    this.outputShape = [c, p, m, u];
    let f = o === "bilinear" ? 1 : 0, [d, h] = [`${i - 1}.0`, `${l - 1}.0`], [g, y, w] = p > 1 ? [`${(i - 1) / (p - 1)}`, "(y2-y1) * height_ratio", `y1*${d} + float(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${d}`], [x, k, C] = m > 1 ? [`${(l - 1) / (m - 1)}`, "(x2-x1) * width_ratio", `x1*${h} + float(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${h}`];
    this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${x});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${a}) {
          return;
        }

        float height_scale = ${y};
        float width_scale = ${k};

        float in_y = ${w};
        if( in_y < 0.0 || in_y > ${d} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${C};
        if( in_x < 0.0 || in_x > ${h} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${f} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
};
var OQ = (r) => {
  let { inputs: e, backend: t, attrs: n } = r, { image: o, boxes: s, boxInd: a } = e, { cropSize: i, method: l, extrapolationValue: u } = n, c = new xS(o.shape, s.shape, i, l, u);
  return t.runWebGLProgram(c, [o, s, a], "float32");
};
var qM = { kernelName: Pi, backendName: "webgl", kernelFunc: OQ };
var Ey = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }], this.outputShape = e;
    let o = e.length, s = t ? "0.0" : `getX(${KM(o, "coords")})`, a = e[e.length - 1], i = "", l = "";
    t ? (i = n ? `end != ${a - 1}` : "end != 0", l = n ? "end + 1" : "end - 1") : (i = n ? `end + pow2 < ${a}` : "end >= pow2", l = n ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${ze(o)} coords = getOutputCoords();
        int end = ${XM(o, "coords")};
        float val = ${s};
        int pow2 = int(pow(2.0, index));
        if (${i}) {
          int idx = ${l};
          ${XM(o, "coords")} = idx;
          val += getX(${KM(o, "coords")});
        }
        setOutput(val);
      }
    `;
  }
};
function KM(r, e) {
  if (r === 1)
    return `${e}`;
  if (r === 2)
    return `${e}.x, ${e}.y`;
  if (r === 3)
    return `${e}.x, ${e}.y, ${e}.z`;
  if (r === 4)
    return `${e}.x, ${e}.y, ${e}.z, ${e}.w`;
  throw Error(`Cumulative sum for rank ${r} is not yet supported`);
}
function XM(r, e) {
  if (r === 1)
    return `${e}`;
  if (r === 2)
    return `${e}.y`;
  if (r === 3)
    return `${e}.z`;
  if (r === 4)
    return `${e}.w`;
  throw Error(`Cumulative sum for rank ${r} is not yet supported`);
}
function PQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, exclusive: a, reverse: i } = n, l = o.shape.length, u = S.getAxesPermutation([s], l), c = o;
  u != null && (c = Ft({ inputs: { x: o }, backend: t, attrs: { perm: u } }));
  let p = S.getInnerMostAxes(1, l)[0];
  if (p !== l - 1)
    throw new Error(`WebGL cumsum shader expects an inner-most axis=${o.shape.length - 1} but got axis=${s}`);
  let m = c.shape[p], f = Yt({ inputs: { x: c }, backend: t });
  for (let d = 0; d <= Math.ceil(Math.log2(m)) - 1; d++) {
    let h = new Ey(c.shape, false, i), g = [[d]], y = f;
    f = t.runWebGLProgram(h, [f], f.dtype, g), t.disposeIntermediateTensorInfo(y);
  }
  if (a) {
    let d = new Ey(c.shape, a, i), h = f;
    f = t.runWebGLProgram(d, [f], f.dtype), t.disposeIntermediateTensorInfo(h);
  }
  if (u != null) {
    let d = S.getUndoAxesPermutation(u), h = Ft({ inputs: { x: f }, backend: t, attrs: { perm: d } });
    return t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(c), h;
  }
  return f;
}
var YM = { kernelName: Fo, backendName: "webgl", kernelFunc: PQ };
function MQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, weights: s } = e, { size: a, binaryOutput: i } = n;
  if (o.shape.length === 1) {
    let l = t.readSync(o.dataId), u = t.readSync(s.dataId), c = gy(l, u, s.dtype, s.shape, a);
    return t.makeTensorInfo([a], s.dtype, c);
  } else if (o.shape.length === 2) {
    let l = t.bufferSync(o), u = t.bufferSync(s), c = jO(l, u, a, i);
    return t.makeTensorInfo(c.shape, s.dtype, c.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`);
}
var ZM = { kernelName: vc, backendName: "webgl", kernelFunc: MQ };
var yS = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = e, this.blockSize = t, this.dataFormat = n, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
};
function LQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { blockSize: s, dataFormat: a } = n;
  b.assert(s > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${s}`);
  let i = o.shape[0], l = a === "NHWC" ? o.shape[1] : o.shape[2], u = a === "NHWC" ? o.shape[2] : o.shape[3], c = a === "NHWC" ? o.shape[3] : o.shape[1], p = l * s, m = u * s, f = c / (s * s), d = a === "NHWC" ? [i, p, m, f] : [i, f, p, m], h = new yS(d, s, a);
  return t.runWebGLProgram(h, [o], o.dtype);
}
var JM = { kernelName: Mi, backendName: "webgl", kernelFunc: LQ };
var bh = class {
  constructor(e, t = false, n = null, o = false, s = false) {
    this.variableNames = ["x", "W"], this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = jt(this.outputShape.length);
    let a = e.filterHeight, i = e.filterWidth, l = e.outChannels / e.inChannels, u = "", c = "";
    n && (o ? u = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : s ? u = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : u = `
          float activation(float x) {
            ${n}
          }
        `, c = "result = activation(result);");
    let p = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${a}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${p}
        ${c}
        setOutput(result);
      }
    `;
  }
};
var wh = class {
  constructor(e, t = false, n = null, o = false, s = false) {
    this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = jt(this.outputShape.length);
    let a = e.outChannels / e.inChannels, i = e.padInfo.left, l = e.strideWidth, u = e.dilationWidth, c = e.filterHeight, p = e.filterWidth, m = p, f = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let y = 0; y < p; y++)
      f += `
          vec4 xTexelC${y * 2};
          int xTexelC${y * 2}Ready;
          vec4 xTexelC${y * 2 + 1};
          int xTexelC${y * 2 + 1}Ready;
          vec4 xC${y};`;
    for (let y = 0; y < c; y++) {
      for (let w = 0; w < p; w++)
        f += `
          xTexelC${w * 2} = vec4(0.0);
          xTexelC${w * 2}Ready = 0;
          xTexelC${w * 2 + 1} = vec4(0.0);
          xTexelC${w * 2 + 1}Ready = 0;
          xC${w} = vec4(0.0);`;
      f += `
        xR = xRCorner + ${y} * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
      for (let w = 0; w < (m + 1) / 2; w++) {
        let x = w * 2;
        if (f += `
          xC = xCCorner + ${x * u};
          `, l === 1) {
          if (x < p && (i % 2 == 1 ? (f += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }
              `, u === 1 && x > 0 ? f += `
                xC${x} = vec4(xTexelC${x - 2}.zw, xTexelC${x}.xy);
                ` : f += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                  } else {
                    xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                  }
                  `) : f += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                xC${x} = xTexelC${x};
                `, x + 1 < p)) {
            let k = i % 2 == 0 ? b.nearestLargerEven(u) : u;
            u % 2 == 0 && i % 2 == 1 || u % 2 != 0 && i % 2 != 1 ? (f += `
                  xCOffset = xC + imod(pads[1], 2) + ${k};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                    xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${x + 1}.zw = vec2(0.0);
                    }
                    xTexelC${x + 1}Ready = 1;
                  }
                  `, u > 1 && (f += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                      xTexelC${x} = getX(batch, xR, xCOffset, d1);
                      xTexelC${x}Ready = 1;
                    }
                    `), f += `
                  xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.xy);
                  `) : k === 1 ? f += `
                    xC${x + 1} = xTexelC${x};
                    ` : f += `
                    xCOffset = xC + ${k};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                      xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${x + 1}.zw = vec2(0.0);
                      }
                      xTexelC${x + 1}Ready = 1;
                    }

                    xC${x + 1} = xTexelC${x + 1};
                    `;
          }
        } else
          x < p && (i % 2 == 1 ? (f += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x + 1}Ready == 0) {
                  xTexelC${x + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${x + 1}.zw = vec2(0.0);
                  }
                  xTexelC${x + 1}Ready = 1;
                }

                xC${x} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
              `, x + 1 < p && (f += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${x + 1} = vec4(xTexelC${x + 1}.xy, final.xy);
                `)) : (f += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                  xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x + 1}.zw = vec2(0.);
                  }
                  xTexelC${x + 1}Ready = 1;
                }

                xC${x} = vec4(
                  xTexelC${x}.xy, xTexelC${x + 1}.xy);
              `, x + 1 < p && (f += `
                  xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
                `)));
        x < p && (f += `
            wTexel = getW(${y}, ${x}, d1, q);
            dotProd += xC${x} * vec4(wTexel.xz, wTexel.xz);
          `, x + 1 < p && (f += `
              wTexel = getW(${y}, ${x + 1}, d1, q);
              dotProd += xC${x + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
      }
      f += `
        }
      `;
    }
    let d = "", h = "";
    n && (o ? d = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }` : s ? d = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }` : d = `vec4 activation(vec4 x) {
          ${n}
        }`, h = "result = activation(result);");
    let g = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${d}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${a};
        int q = d2 - d1 * ${a};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${f}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${h}
        setOutput(result);
      }
    `;
  }
};
function zQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s } = e, { strides: a, pad: i, dilations: l, dimRoundingMode: u } = n, c = l;
  c == null && (c = [1, 1]), b.assert(S.eitherStridesOrDilationsAreOne(a, c), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);
  let p = S.computeConv2DInfo(o.shape, s.shape, a, c, i, u, true), m;
  j().getBool("WEBGL_PACK_DEPTHWISECONV") && p.strideWidth <= 2 && p.outChannels / p.inChannels == 1 ? m = new wh(p) : m = new bh(p);
  let f = [[p.padInfo.top, p.padInfo.left], [p.strideHeight, p.strideWidth], [p.dilationHeight, p.dilationWidth], [p.inHeight, p.inWidth]];
  return t.runWebGLProgram(m, [o, s], "float32", f);
}
var QM = { kernelName: Oo, backendName: "webgl", kernelFunc: zQ };
var bS = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    let t = e.strideHeight, n = e.strideWidth, o = e.padInfo.top, s = e.padInfo.left, a = e.outChannels / e.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${a} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${o};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${s};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var wS = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    let t = e.filterHeight, n = e.filterWidth, o = e.strideHeight, s = e.strideWidth, a = t - 1 - e.padInfo.top, i = n - 1 - e.padInfo.left, l = e.outChannels / e.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function BQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, dy: s } = e, { strides: a, dilations: i, pad: l, dimRoundingMode: u, filterShape: c } = n, p = S.computeConv2DInfo(o.shape, c, a, i, l, u, true), m = new bS(p);
  return t.runWebGLProgram(m, [o, s], "float32");
}
var eL = { kernelName: Cc, backendName: "webgl", kernelFunc: BQ };
function VQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, filter: s } = e, { strides: a, dilations: i, pad: l, dimRoundingMode: u, inputShape: c } = n, p = S.computeConv2DInfo(c, s.shape, a, i, l, u, true), m = new wS(p);
  return t.runWebGLProgram(m, [o, s], "float32");
}
var tL = { kernelName: Sc, backendName: "webgl", kernelFunc: VQ };
var kS = class {
  constructor(e) {
    this.variableNames = ["X"], this.outputShape = [e, e], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
};
function WQ(r) {
  let { inputs: e, backend: t } = r, { x: n } = e, o = [...n.shape, ...n.shape], s = b.sizeFromShape(n.shape), a = ae({ inputs: { x: n }, backend: t, attrs: { shape: [s] } }), i = new kS(s), l = t.runWebGLProgram(i, [a], a.dtype), u = ae({ inputs: { x: l }, backend: t, attrs: { shape: o } });
  return t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(l), u;
}
var rL = { kernelName: Ic, backendName: "webgl", kernelFunc: WQ };
var _S = class {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    let { inHeight: t, inWidth: n, padInfo: o, strideHeight: s, strideWidth: a, filterHeight: i, filterWidth: l, dilationHeight: u, dilationWidth: c } = e, { top: p, left: m } = o;
    this.userCode = `
      const ivec2 strides = ivec2(${s}, ${a});
      const ivec2 pads = ivec2(${p}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${n}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
};
function jQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s } = e, { strides: a, pad: i, dilations: l } = n, u = S.computeDilation2DInfo(o.shape, s.shape, a, i, "NHWC", l), c, p = new _S(u);
  c = t.runWebGLProgram(p, [o, s], "float32");
  let m = ae({ inputs: { x: c }, backend: t, attrs: { shape: u.outShape } });
  return t.disposeIntermediateTensorInfo(c), m;
}
var nL = { kernelName: Qa, backendName: "webgl", kernelFunc: jQ };
function GQ(r) {
  let { inputs: e, backend: t, attrs: n } = r, { equation: o } = n, s = e, { allDims: a, summedDims: i, idDims: l } = S.decodeEinsumEquation(o, s.length);
  S.checkEinsumDimSizes(a.length, l, s);
  let { path: u, steps: c } = S.getEinsumComputePath(i, l), p = c.length, m = null, f = a.length, d = [];
  for (let h = 0; h < p; ++h) {
    for (let g of c[h]) {
      let { permutationIndices: y, expandDims: w } = S.getEinsumPermutation(f, l[g]), x;
      S.isIdentityPermutation(y) ? x = s[g] : (x = Ft({ inputs: { x: s[g] }, backend: t, attrs: { perm: y } }), d.push(x));
      let k = x.shape.slice();
      for (let C = 0; C < w.length; ++C)
        k.splice(w[C], 0, 1);
      b.arraysEqual(x.shape, k) || (x = ae({ inputs: { x }, backend: t, attrs: { shape: k } }), d.push(x)), m === null ? m = x : (m = xh({ inputs: { a: x, b: m }, backend: t }), d.push(m));
    }
    h < p - 1 && (u[h] >= 0 && (m = qu({ inputs: { x: m }, backend: t, attrs: { axis: u[h] - (a.length - f), keepDims: false } }), d.push(m)), f--);
  }
  for (let h of d)
    h !== m && t.disposeIntermediateTensorInfo(h);
  return m;
}
var oL = { kernelName: Nc, backendName: "webgl", kernelFunc: GQ };
var UQ = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var HQ = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
var qQ = _e({ opSnippet: UQ, packedOpSnippet: HQ });
var sL = { kernelName: Mo, backendName: "webgl", kernelFunc: qQ };
var KQ = "return (b >= 1.0) ? a : a * (b + 1.0);";
var XQ = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
var YQ = (r) => {
  let { inputs: e, backend: t } = r, { dy: n, y: o } = e, s = j().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Os(XQ, n.shape, o.shape) : new _o(KQ, n.shape, o.shape);
  return t.runWebGLProgram(s, [n, o], n.dtype);
};
var iL = { kernelName: Tc, backendName: "webgl", kernelFunc: YQ };
var ZQ = `
  return vec4(equal(a, b));
`;
var JQ = "return float(a == b);";
var QQ = st({ opSnippet: JQ, packedOpSnippet: ZQ, dtype: "bool", cpuKernelImpl: HO });
var aL = { kernelName: zi, backendName: "webgl", kernelFunc: QQ };
var eee = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${S.ERF_P};
  float a1 = ${S.ERF_A1};
  float a2 = ${S.ERF_A2};
  float a3 = ${S.ERF_A3};
  float a4 = ${S.ERF_A4};
  float a5 = ${S.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`;
var tee = _e({ opSnippet: eee });
var lL = { kernelName: Li, backendName: "webgl", kernelFunc: tee };
var uL = "return exp(x);";
var vS = _e({ opSnippet: uL, packedOpSnippet: uL, cpuKernelImpl: qO });
var cL = { kernelName: Lo, backendName: "webgl", kernelFunc: vS };
function Ay(r) {
  let { inputs: e, attrs: t, backend: n } = r, { dim: o } = t, { input: s } = e, a = s.shape.length, i = s.shape.slice(), l = o;
  return o < 0 && (b.assert(-(a + 1) <= o, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), l = a + o + 1), i.splice(l, 0, 1), ae({ inputs: { x: s }, backend: n, attrs: { shape: i } });
}
var pL = { kernelName: Gs, backendName: "webgl", kernelFunc: Ay };
var mL = "return exp(x) - 1.0;";
var ree = _e({ opSnippet: mL, packedOpSnippet: mL, cpuKernelImpl: KO });
var fL = { kernelName: Bi, backendName: "webgl", kernelFunc: ree };
var $y = class {
  constructor(e, t, n) {
    this.variableNames = ["real", "imag"];
    let o = t[1];
    this.outputShape = t;
    let s = n ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, a = n ? `${o}.0` : "1.0", i;
    if (e === "real")
      i = "return real * expR - imag * expI;";
    else if (e === "imag")
      i = "return real * expI + imag * expR;";
    else
      throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);
    this.userCode = `
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${o});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${o}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${a};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
};
function Dy(r, e, t) {
  let n = t.texData.get(r.dataId), o = b.sizeFromShape(r.shape), s = r.shape[r.shape.length - 1], a = o / s, i = ae({ inputs: { x: r }, backend: t, attrs: { shape: [a, s] } }), l = i.shape, u = new $y("real", l, e), c = new $y("imag", l, e), p = [{ dataId: n.complexTensorInfos.real.dataId, dtype: n.complexTensorInfos.real.dtype, shape: l }, { dataId: n.complexTensorInfos.imag.dataId, dtype: n.complexTensorInfos.imag.dtype, shape: l }], m = t.runWebGLProgram(u, p, "float32"), f = t.runWebGLProgram(c, p, "float32"), d = Sn({ inputs: { real: m, imag: f }, backend: t });
  t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(f);
  let h = ae({ inputs: { x: d }, backend: t, attrs: { shape: r.shape } });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(d), h;
}
function nee(r) {
  let { inputs: e, backend: t } = r, { input: n } = e;
  return Dy(n, false, t);
}
var dL = { kernelName: Ec, backendName: "webgl", kernelFunc: nee };
var CS = class {
  constructor(e, t) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = e, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
};
function Ba(r) {
  let { backend: e, attrs: t } = r, { shape: n, value: o } = t, { dtype: s } = t;
  if (s = s || b.inferDtype(o), s === "string") {
    let a = b.getArrayFromDType(s, b.sizeFromShape(n));
    return a.fill(o), e.makeTensorInfo(n, s, a);
  } else {
    let a = new CS(n, o), i = [[o]];
    return e.runWebGLProgram(a, [], s, i);
  }
}
var hL = { kernelName: el, backendName: "webgl", kernelFunc: Ba };
var SS = class {
  constructor(e) {
    this.variableNames = ["Image"], this.outputShape = [];
    let t = e[2];
    this.outputShape = e, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
var gL = { kernelName: Vi, backendName: "webgl", kernelFunc: ({ inputs: r, backend: e }) => {
  let { image: t } = r, n = e, o = new SS(t.shape);
  return n.runWebGLProgram(o, [t], t.dtype);
} };
var xL = "return floor(x);";
var oee = _e({ opSnippet: xL, packedOpSnippet: xL, cpuKernelImpl: XO });
var yL = { kernelName: zo, backendName: "webgl", kernelFunc: oee };
var see = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`;
var iee = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`;
var aee = st({ opSnippet: see, packedOpSnippet: iee, dtype: "int32" });
var bL = { kernelName: Bo, backendName: "webgl", kernelFunc: aee };
var IS = class {
  constructor(e) {
    this.variableNames = ["A"];
    let t = zt(), [n, o] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}.0, ${n}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
};
var NS = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true;
    let t = zt(), [n, o] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${o}.0, ${n}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `;
  }
};
var wL = { kernelName: Rm, backendName: "webgl", kernelFunc: lee };
var fm;
function lee(r) {
  let { inputs: e, backend: t, attrs: n } = r, { pixels: o } = e, { numChannels: s } = n, a = typeof HTMLVideoElement != "undefined" && o instanceof HTMLVideoElement, i = typeof HTMLImageElement != "undefined" && o instanceof HTMLImageElement, [l, u] = a ? [o.videoWidth, o.videoHeight] : [o.width, o.height], c = [u, l], p = [u, l, s];
  (i || a) && (fm == null && (fm = document.createElement("canvas").getContext("2d")), fm.canvas.width = l, fm.canvas.height = u, fm.drawImage(o, 0, 0, l, u), o = fm.canvas);
  let m = t.makeTensorInfo(c, "int32");
  t.texData.get(m.dataId).usage = zr.PIXELS, t.gpgpu.uploadPixelDataToTexture(t.getTexture(m.dataId), o);
  let f = j().getBool("WEBGL_PACK") ? new NS(p) : new IS(p), d = t.runWebGLProgram(f, [m], "int32");
  return t.disposeData(m.dataId), d;
}
function uee(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s, bias: a, preluActivationWeights: i } = e, { strides: l, pad: u, dataFormat: c, dilations: p, dimRoundingMode: m, activation: f, leakyreluAlpha: d } = n, h = S.convertConv2DDataFormat(c), g = S.computeConv2DInfo(o.shape, s.shape, l, p, u, m, false, h), y, w = [];
  if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID"))
    y = Ny({ x: o, filter: s, convInfo: g, backend: t, bias: a, activation: f, preluActivationWeights: i, leakyreluAlpha: d });
  else if (j().getBool("WEBGL_CONV_IM2COL") && o.shape[0] === 1)
    y = Ty({ x: o, filter: s, convInfo: g, backend: t, bias: a, activation: f, preluActivationWeights: i, leakyreluAlpha: d });
  else {
    let k = a != null, C = i != null, A = f === "leakyrelu", $ = f ? Dl(f, false) : null, R = new yh(g, k, $, C, A), P = [o, s];
    if (a && P.push(a), i && P.push(i), A) {
      let M = t.makeTensorInfo([], "float32", b.createScalarValue(d, "float32"));
      P.push(M), w.push(M);
    }
    y = t.runWebGLProgram(R, P, "float32");
  }
  let x = ae({ inputs: { x: y }, backend: t, attrs: { shape: g.outShape } });
  return w.push(y), w.forEach((k) => t.disposeIntermediateTensorInfo(k)), x;
}
var kL = { kernelName: ni, backendName: "webgl", kernelFunc: uee };
function cee(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, filter: s, bias: a, preluActivationWeights: i } = e, { strides: l, pad: u, dilations: c, dimRoundingMode: p, activation: m, leakyreluAlpha: f } = n, d = [], h = c;
  h == null && (h = [1, 1]), b.assert(S.eitherStridesOrDilationsAreOne(l, h), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${h}'`);
  let g = S.computeConv2DInfo(o.shape, s.shape, l, h, u, p, true), y = j().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels == 1, w = m ? Dl(m, y) : null, x = [o, s], k = a != null, C = i != null, A = m === "leakyrelu";
  if (k && x.push(a), C && x.push(i), A) {
    let M = t.makeTensorInfo([], "float32", b.createScalarValue(f, "float32"));
    x.push(M), d.push(M);
  }
  let $;
  y ? $ = new wh(g, k, w, C, A) : $ = new bh(g, k, w, C, A);
  let R = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], P = t.runWebGLProgram($, x, "float32", R);
  return d.forEach((M) => t.disposeIntermediateTensorInfo(M)), P;
}
var _L = { kernelName: oi, backendName: "webgl", kernelFunc: cee };
var TS = class {
  constructor(e, t, n) {
    this.sliceDim = e, this.strides = t, this.variableNames = ["x", "indices"], this.outputShape = n;
    let o = ze(t.length), s = ze(n.length), a = this.sliceDim > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${o} strides = ${o}(${this.strides});
         void main() {
          ${s} coords = getOutputCoords();
          int flattenIndex = 0;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            flattenIndex += index * ${a};
          }
          setOutput(getX(flattenIndex, coords[1]));
        }
      `;
  }
};
function pee(r) {
  let { inputs: e, backend: t } = r, { params: n, indices: o } = e, s = o.shape, a = s[s.length - 1], i = b.sizeFromShape(n.shape), [l, u, c, p] = S.prepareAndValidate(n, o), m = ae({ inputs: { x: o }, backend: t, attrs: { shape: [u, a] } }), f = ae({ inputs: { x: n }, backend: t, attrs: { shape: [b.sizeFromShape(n.shape) / c, c] } });
  if (t.shouldExecuteOnCPU([n, o]) || n.dtype === "string") {
    let y = t.readSync(o.dataId), w = t.bufferSync(n), x = YO(y, w, n.dtype, u, a, c, p, n.shape, i);
    return t.makeTensorInfo(l, n.dtype, x.values);
  }
  let d = new TS(a, p, [u, c]), h = t.runWebGLProgram(d, [f, m], f.dtype), g = ae({ inputs: { x: h }, backend: t, attrs: { shape: l } });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(h), g;
}
var vL = { kernelName: Wi, backendName: "webgl", kernelFunc: pee };
var ES = class {
  constructor(e, t) {
    this.variableNames = ["A", "indices"], this.outputShape = t, this.rank = t.length;
    let n = ze(this.rank), o = mee(e, 2);
    this.userCode = `
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${o}));
      }
    `;
  }
};
function mee(r, e) {
  let t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], n = [];
  for (let o = 0; o < r.length; o++)
    o === 2 ? n.push("int(getIndices(resRC.x, resRC.z))") : n.push(`${t[o]}`);
  return n.join();
}
function AS(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, indices: s } = e, { axis: a, batchDims: i } = n, l = b.parseAxisParam(a, o.shape)[0], u = S.segment_util.collectGatherOpShapeInfo(o, s, l, i), c = b.sizeFromShape(s.shape), p = [], m = ae({ inputs: { x: o }, backend: t, attrs: { shape: [u.batchSize, u.outerSize, u.dimSize, u.sliceSize] } }), f = ae({ inputs: { x: s }, backend: t, attrs: { shape: [u.batchSize, c / u.batchSize] } });
  p.push(m), p.push(f);
  let d = [u.batchSize, u.outerSize, c / u.batchSize, u.sliceSize];
  if (t.shouldExecuteOnCPU([o, s]) || o.dtype === "string") {
    let w = t.bufferSync(f), x = t.bufferSync(m), k = ZO(x, w, d);
    return p.forEach((C) => t.disposeIntermediateTensorInfo(C)), t.makeTensorInfo(u.outputShape, k.dtype, k.values);
  }
  let h = new ES(m.shape, d), g = t.runWebGLProgram(h, [m, f], m.dtype);
  p.push(g);
  let y = ae({ inputs: { x: g }, backend: t, attrs: { shape: u.outputShape } });
  return p.forEach((w) => t.disposeIntermediateTensorInfo(w)), y;
}
var CL = { kernelName: Us, backendName: "webgl", kernelFunc: AS };
var fee = "return float(a > b);";
var dee = `
  return vec4(greaterThan(a, b));
`;
var hee = st({ opSnippet: fee, packedOpSnippet: dee, cpuKernelImpl: JO, dtype: "bool" });
var SL = { kernelName: ji, backendName: "webgl", kernelFunc: hee };
var gee = "return float(a >= b);";
var xee = `
  return vec4(greaterThanEqual(a, b));
`;
var yee = st({ opSnippet: gee, packedOpSnippet: xee, dtype: "bool", cpuKernelImpl: QO });
var IL = { kernelName: Wo, backendName: "webgl", kernelFunc: yee };
function bee(r) {
  let { inputs: e, backend: t } = r, { input: n } = e;
  return Dy(n, true, t);
}
var NL = { kernelName: Ac, backendName: "webgl", kernelFunc: bee };
var wee = "return float(!isnan(x) && !isinf(x));";
var kee = _e({ opSnippet: wee, dtype: "bool" });
var TL = { kernelName: Gi, backendName: "webgl", kernelFunc: kee };
var _ee = "return float(isinf(x));";
var vee = _e({ opSnippet: _ee, dtype: "bool" });
var EL = { kernelName: Ui, backendName: "webgl", kernelFunc: vee };
var Cee = "return float(isnan(x));";
var See = _e({ opSnippet: Cee, dtype: "bool" });
var AL = { kernelName: Hi, backendName: "webgl", kernelFunc: See };
var Iee = "return float(a < b);";
var Nee = `
  return vec4(lessThan(a, b));
`;
var Tee = st({ opSnippet: Iee, packedOpSnippet: Nee, cpuKernelImpl: eP, dtype: "bool" });
var $L = { kernelName: qi, backendName: "webgl", kernelFunc: Tee };
var Eee = "return float(a <= b);";
var Aee = `
  return vec4(lessThanEqual(a, b));
`;
var $ee = st({ opSnippet: Eee, packedOpSnippet: Aee, cpuKernelImpl: tP, dtype: "bool" });
var DL = { kernelName: Ki, backendName: "webgl", kernelFunc: $ee };
function Dee(r) {
  let { backend: e, attrs: t } = r, { start: n, stop: o, num: s } = t, a = rP(n, o, s);
  return e.makeTensorInfo([a.length], "float32", a);
}
var RL = { kernelName: Dc, backendName: "webgl", kernelFunc: Dee };
var Ree = `if (x < 0.0) return NAN;
  return log(x);`;
var Fee = `
  vec4 result = log(x);
  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));
  result.r = isNaN.r == 1.0 ? NAN : result.r;
  result.g = isNaN.g == 1.0 ? NAN : result.g;
  result.b = isNaN.b == 1.0 ? NAN : result.b;
  result.a = isNaN.a == 1.0 ? NAN : result.a;

  return result;
`;
var Oee = _e({ opSnippet: Ree, packedOpSnippet: Fee, cpuKernelImpl: nP });
var FL = { kernelName: Go, backendName: "webgl", kernelFunc: Oee };
var Pee = "return log(1.0 + x);";
var Mee = _e({ opSnippet: Pee });
var OL = { kernelName: Xi, backendName: "webgl", kernelFunc: Mee };
var Lee = "return float(a >= 1.0 && b >= 1.0);";
var zee = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`;
var Bee = st({ opSnippet: Lee, packedOpSnippet: zee, dtype: "bool" });
var PL = { kernelName: Yi, backendName: "webgl", kernelFunc: Bee };
var Vee = "return float(!(x >= 1.0));";
var Wee = _e({ opSnippet: Vee });
var ML = { kernelName: jl, backendName: "webgl", kernelFunc: Wee };
var jee = "return float(a >= 1.0 || b >= 1.0);";
var Gee = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`;
var Uee = st({ opSnippet: jee, packedOpSnippet: Gee, dtype: "bool" });
var LL = { kernelName: Gl, backendName: "webgl", kernelFunc: Uee };
var $S = class {
  constructor(e, t, n, o, s) {
    this.variableNames = ["x"], this.outputShape = [];
    let a = t, i = e[3] - 1;
    this.outputShape = e;
    let l, u = `float(${n}) + float(${o}) * sum`;
    s === 0.5 ? l = `inversesqrt(${u})` : s === 1 ? l = `1.0/(${u})` : l = `exp(log(${u}) * float(-${s}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${a}; j <= ${a}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `;
  }
};
var DS = class {
  constructor(e, t, n, o, s) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = true, this.packedOutput = true;
    let a = t, i = e[3] - 1;
    this.outputShape = e;
    let l, u = `float(${n}) + float(${o}) * sum`;
    s === 0.5 ? l = `inversesqrt(${u})` : s === 1 ? l = `1.0/(${u})` : l = `exp(log(${u}) * float(-${s}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${a};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${a}; j <= ${a}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `;
  }
};
var Hee = (r) => {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { depthRadius: s, bias: a, alpha: i, beta: l } = n, u = j().getBool("WEBGL_PACK_NORMALIZATION") ? new DS(o.shape, s, a, i, l) : new $S(o.shape, s, a, i, l);
  return t.runWebGLProgram(u, [o], o.dtype);
};
var zL = { kernelName: tl, backendName: "webgl", kernelFunc: Hee };
var RS = class {
  constructor(e, t, n, o, s) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = e, this.depth = e[3], this.depthRadius = t, this.bias = n, this.alpha = o, this.beta = s, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${o}) * norm + float(${n});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${o})
                * float(${s})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
};
var qee = (r) => {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, y: s, dy: a } = e, { depthRadius: i, bias: l, alpha: u, beta: c } = n, p = new RS(o.shape, i, l, u, c);
  return t.runWebGLProgram(p, [o, s, a], o.dtype);
};
var BL = { kernelName: Rc, backendName: "webgl", kernelFunc: qee };
function VL(r, e, t, n) {
  let o = b.sizeFromShape(e), a = b.sizeFromShape(r.shape) / o, i = ae({ inputs: { x: r }, attrs: { shape: [a, o] }, backend: n }), l = Ln(i, r.dtype, "max", n), u = ae({ inputs: { x: l }, attrs: { shape: t }, backend: n });
  return n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(l), u;
}
function FS(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { reductionIndices: s, keepDims: a } = n, i = o.shape.length, l = b.parseAxisParam(s, o.shape), u = l, c = S.getAxesPermutation(u, i), p = c != null, m = t.shouldExecuteOnCPU([o]), f = o;
  if (p) {
    if (m) {
      let x = t.texData.get(f.dataId).values, k = new Array(i);
      for (let $ = 0; $ < k.length; $++)
        k[$] = o.shape[c[$]];
      let C = Uu(x, o.shape, o.dtype, c, k);
      f = t.makeTensorInfo(k, o.dtype);
      let A = t.texData.get(f.dataId);
      A.values = C;
    } else
      f = Rl(o, c, t);
    u = S.getInnerMostAxes(u.length, i);
  }
  S.assertAxesAreInnerMostDims("max", u, i);
  let [d, h] = S.computeOutAndReduceShapes(f.shape, u), g = d;
  a && (g = S.expandShapeToKeepDim(d, l));
  let y;
  if (m) {
    let x = t.texData.get(f.dataId).values, k = oP(x, b.sizeFromShape(h), g, o.dtype);
    y = t.makeTensorInfo(g, o.dtype);
    let C = t.texData.get(y.dataId);
    C.values = k;
  } else
    y = VL(f, h, g, t);
  return p && t.disposeIntermediateTensorInfo(f), y;
}
var WL = { kernelName: Uo, backendName: "webgl", kernelFunc: FS };
var Kee = wy + `
  return max(a, b);
`;
var Xee = `
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + $l + `
  return result;
`;
var Yee = st({ opSnippet: Kee, packedOpSnippet: Xee, cpuKernelImpl: sP });
var jL = { kernelName: Ho, backendName: "webgl", kernelFunc: Yee };
function Zee(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e;
  Ds(o, "maxPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: l } = n, u = 1;
  b.assert(S.eitherStridesOrDilationsAreOne(a, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = S.computePool2DInfo(o.shape, s, a, u, i, l);
  if (c.filterWidth === 1 && c.filterHeight === 1 && b.arraysEqual(c.inShape, c.outShape))
    return Yt({ inputs: { x: o }, backend: t });
  let p = new wi(c, "max", false);
  return t.runWebGLProgram(p, [o], o.dtype);
}
var GL = { kernelName: qo, backendName: "webgl", kernelFunc: Zee };
function Jee(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { filterSize: s, strides: a, pad: i, dataFormat: l, dimRoundingMode: u } = n, c = [1, 1, 1], p = S.computePool3DInfo(o.shape, s, a, c, i, u, l), m = new Xu(p, "max", false);
  return t.runWebGLProgram(m, [o], o.dtype);
}
var UL = { kernelName: rl, backendName: "webgl", kernelFunc: Jee };
var OS = class {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    let t = e.strideHeight, n = e.strideWidth, o = e.dilationHeight, s = e.effectiveFilterHeight, a = e.effectiveFilterWidth, i = s - 1 - e.padInfo.top, l = a - 1 - e.padInfo.left, u = s * a - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${o}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${a}; wC++) {
            float dyC = float(dyCCorner + wC) / ${n}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${a} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var PS = class {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    let t = e.strideDepth, n = e.strideHeight, o = e.strideWidth, s = e.dilationDepth, a = e.dilationHeight, i = e.dilationWidth, l = e.effectiveFilterDepth, u = e.effectiveFilterHeight, c = e.effectiveFilterWidth, p = l - 1 - e.padInfo.front, m = u - 1 - e.padInfo.top, f = c - 1 - e.padInfo.left, d = l * u * c - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${p}, ${m}, ${f});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${a}) {
            float dyR = float(dyRCorner + wR) / ${n}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${o}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${d} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function Qee(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, input: s } = e, a = s, { filterSize: i, strides: l, pad: u, dimRoundingMode: c } = n, p = [1, 1, 1], m = S.computePool3DInfo(a.shape, i, l, p, u, c), f = new Xu(m, "max", true), d = t.runWebGLProgram(f, [a], a.dtype), h = new PS(m), g = t.runWebGLProgram(h, [o, d], a.dtype);
  return t.disposeIntermediateTensorInfo(d), g;
}
var HL = { kernelName: Oc, backendName: "webgl", kernelFunc: Qee };
function ete(r) {
  let { inputs: e, backend: t, attrs: n } = r, { dy: o, input: s, output: a } = e, i = s;
  Ds([s, a], "maxPoolGrad");
  let { filterSize: l, strides: u, pad: c, dimRoundingMode: p } = n, m = S.computePool2DInfo(i.shape, l, u, 1, c, p), f = true, d = new wi(m, "max", f), h = t.runWebGLProgram(d, [i], i.dtype), g = new OS(m), y = t.runWebGLProgram(g, [o, h], i.dtype);
  return t.disposeIntermediateTensorInfo(h), y;
}
var qL = { kernelName: Fc, backendName: "webgl", kernelFunc: ete };
function KL(r, e, t, n) {
  let o = new wi(t, "max", false), s = n.runWebGLProgram(o, [r], "float32");
  o = new wi(t, "max", true, true, e);
  let a = n.runWebGLProgram(o, [r], "float32");
  return [s, a];
}
var XL = { kernelName: Pc, backendName: "webgl", kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
  let { x: n } = r, { filterSize: o, strides: s, pad: a, includeBatchInIndex: i } = e, l = t;
  b.assert(n.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${n.shape.length}.`);
  let u = [1, 1];
  b.assert(S.eitherStridesOrDilationsAreOne(s, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);
  let c = S.computePool2DInfo(n.shape, o, s, u, a), [p, m] = KL(n, i, c, l);
  return [p, m];
} };
function YL(r, e, t, n) {
  let o = b.sizeFromShape(e), a = b.sizeFromShape(r.shape) / o, i = ae({ inputs: { x: r }, attrs: { shape: [a, o] }, backend: n }), l = Ln(i, "float32", "mean", n), u = ae({ inputs: { x: l }, attrs: { shape: t }, backend: n });
  return n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(l), u;
}
var ZL = { kernelName: Ko, backendName: "webgl", kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
  let { x: n } = r, { keepDims: o, axis: s } = e, a = t, i = n.shape.length, l = b.parseAxisParam(s, n.shape), u = l, c = S.getAxesPermutation(u, i), p = c != null, m = a.shouldExecuteOnCPU([n]), f = [], d = n;
  if (p) {
    if (m) {
      let k = a.texData.get(d.dataId).values, C = new Array(i);
      for (let R = 0; R < C.length; R++)
        C[R] = n.shape[c[R]];
      let A = Uu(k, n.shape, n.dtype, c, C);
      d = a.makeTensorInfo(C, n.dtype);
      let $ = a.texData.get(d.dataId);
      $.values = A;
    } else
      d = Rl(n, c, a);
    f.push(d), u = S.getInnerMostAxes(u.length, i);
  }
  S.assertAxesAreInnerMostDims("sum", u, i);
  let [h, g] = S.computeOutAndReduceShapes(d.shape, u), y = h;
  o && (y = S.expandShapeToKeepDim(h, l));
  let w = YL(d, g, y, a);
  for (let x of f)
    a.disposeIntermediateTensorInfo(x);
  return w;
} };
function tte(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n, i = o.shape.length, l = b.parseAxisParam(s, o.shape), u = l, c = S.getAxesPermutation(u, i), p = o;
  c != null && (p = Ft({ inputs: { x: o }, backend: t, attrs: { perm: c } }), u = S.getInnerMostAxes(u.length, o.shape.length)), S.assertAxesAreInnerMostDims("min", u, i);
  let [m, f] = S.computeOutAndReduceShapes(p.shape, u), d = b.sizeFromShape(f), h = ae({ inputs: { x: p }, backend: t, attrs: { shape: [-1, d] } }), g = Ln(h, h.dtype, "min", t), y;
  if (a) {
    let w = S.expandShapeToKeepDim(m, l);
    y = ae({ inputs: { x: g }, backend: t, attrs: { shape: w } });
  } else
    y = ae({ inputs: { x: g }, backend: t, attrs: { shape: m } });
  return t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(g), c != null && t.disposeIntermediateTensorInfo(p), y;
}
var JL = { kernelName: Xo, backendName: "webgl", kernelFunc: tte };
var rte = wy + `
  return min(a, b);
`;
var nte = `
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + $l + `
  return result;
`;
var ote = st({ opSnippet: rte, packedOpSnippet: nte, cpuKernelImpl: iP });
var QL = { kernelName: Yo, backendName: "webgl", kernelFunc: ote };
var MS = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.outputShape = t.map((c, p) => c[0] + e[p] + c[1]);
    let o = e.length, s = ze(o), a = t.map((c) => c[0]).join(","), i = t.map((c, p) => c[0] + e[p]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, o), u = n === "reflect" ? 0 : 1;
    if (o === 1) {
      this.userCode = `
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${s} start = ${s}(${a});
      ${s} end = ${s}(${i});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${o}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${l}));
      }
    `;
  }
};
var LS = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t.map((d, h) => d[0] + e[h] + d[1]);
    let o = e.length, s = ze(o), a = t.map((d) => d[0]).join(","), i = t.map((d, h) => d[0] + e[h]).join(","), l = Xt("rc", o), u = Xt("source", o), c = `${l[o - 1]} < ${this.outputShape[o - 1]}`, p = o === 1 ? "source" : `vec2(${u.slice(-2).join()})`, m = n === "reflect" ? 0 : 1, f = "";
    if (o === 1) {
      let d = `
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;
      f = `
        ${s} rc = outputLoc;
        ${d}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[o - 1]} += 1;
        if(${c}) {
          ${d}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
      `;
    } else {
      let d = `
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;
      f = `
        ${s} rc = outputLoc;
        ${d}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[o - 1]} += 1;
        if(${c}) {
          ${d}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
        rc = outputLoc;
        ${l[o - 2]} += 1;
        if(${l[o - 2]} < ${this.outputShape[o - 2]}) {
          ${d}
          result[2] = getChannel(getX(${u.join()}), ${p});
          ${l[o - 1]} += 1;
          if(${c}) {
            ${d}
            result[3] = getChannel(getX(${u.join()}), ${p});
          }
        }
      `;
    }
    this.userCode = `
      const ${s} start = ${s}(${a});
      const ${s} end = ${s}(${i});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `;
  }
};
var ste = ({ inputs: r, backend: e, attrs: t }) => {
  let { x: n } = r, { paddings: o, mode: s } = t, a = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new LS(n.shape, o, s) : new MS(n.shape, o, s);
  return e.runWebGLProgram(a, [n], n.dtype);
};
var ez = { kernelName: Zo, backendName: "webgl", kernelFunc: ste };
var ite = `if (b == 0.0) return NAN;
  return mod(a, b);`;
var ate = `
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  ` + $l + `
  return result;
`;
var lte = st({ opSnippet: ite, packedOpSnippet: ate });
var tz = { kernelName: Zi, backendName: "webgl", kernelFunc: lte };
var zS = class {
  constructor(e, t, n) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [e, n], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t - 1}));
      }
    `;
  }
};
var ute = `
if (a == b) {
  return 1.0;
};
return a / b;`;
var cte = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`;
var BS = st({ opSnippet: ute, packedOpSnippet: cte, checkOutOfBounds: true });
var rz = { kernelName: Po, backendName: "webgl", kernelFunc: BS };
var nz = "return a - b;";
var VS = st({ opSnippet: nz, packedOpSnippet: nz, supportsComplex: true, cpuKernelImpl: _P });
var oz = { kernelName: hs, backendName: "webgl", kernelFunc: VS };
function WS(r) {
  let { inputs: e, backend: t, attrs: n } = r, { logits: o } = e, { dim: s } = n, a = b.parseAxisParam([s], o.shape), i = FS({ inputs: { x: o }, backend: t, attrs: { reductionIndices: a, keepDims: false } }), l = S.expandShapeToKeepDim(i.shape, a), u = ae({ inputs: { x: i }, backend: t, attrs: { shape: l } }), c = VS({ inputs: { a: o, b: u }, backend: t }), p = vS({ inputs: { x: c }, backend: t }), m = qu({ inputs: { x: p }, backend: t, attrs: { axis: a, keepDims: false } }), f = ae({ inputs: { x: m }, backend: t, attrs: { shape: l } }), d = BS({ inputs: { a: p, b: f }, backend: t });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(f), d;
}
var sz = { kernelName: fs, backendName: "webgl", kernelFunc: WS };
function pte(r) {
  let { inputs: e, backend: t, attrs: n } = r, { logits: o } = e, { numSamples: s, seed: a, normalized: i } = n, l = i ? o : WS({ inputs: { logits: o }, backend: t, attrs: { dim: o.shape.length - 1 } }), u = l.shape[0], c = l.shape[1], p = new zS(u, c, s), m = [[a]], f = t.runWebGLProgram(p, [l], "int32", m);
  return i || t.disposeIntermediateTensorInfo(l), f;
}
var iz = { kernelName: Mc, backendName: "webgl", kernelFunc: pte };
var az = "return -x;";
function mte(r) {
  let { inputs: e, backend: t } = r, { x: n } = e;
  if (t.shouldExecuteOnCPU([n])) {
    let s = t.texData.get(n.dataId), [a, i] = lP(s.values, n.shape, n.dtype);
    return t.makeTensorInfo(i, n.dtype, a);
  }
  let o;
  return j().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? o = new Fs(n.shape, az) : o = new Cn(n.shape, az), t.runWebGLProgram(o, [n], n.dtype);
}
var lz = { kernelName: Hs, backendName: "webgl", kernelFunc: mte };
var fte = Mr.nonMaxSuppressionV3Impl;
function dte(r) {
  S.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: e, backend: t, attrs: n } = r, { boxes: o, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l } = n, u = t.readSync(o.dataId), c = t.readSync(s.dataId), { selectedIndices: p } = fte(u, c, a, i, l);
  return t.makeTensorInfo([p.length], "int32", new Int32Array(p));
}
var uz = { kernelName: Qi, backendName: "webgl", kernelFunc: dte };
var hte = Mr.nonMaxSuppressionV4Impl;
function gte(r) {
  S.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: e, backend: t, attrs: n } = r, { boxes: o, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l, padToMaxOutputSize: u } = n, c = t.readSync(o.dataId), p = t.readSync(s.dataId), { selectedIndices: m, validOutputs: f } = hte(c, p, a, i, l, u);
  return [t.makeTensorInfo([m.length], "int32", new Int32Array(m)), t.makeTensorInfo([], "int32", new Int32Array([f]))];
}
var cz = { kernelName: ea, backendName: "webgl", kernelFunc: gte };
var xte = Mr.nonMaxSuppressionV5Impl;
function yte(r) {
  S.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: e, backend: t, attrs: n } = r, { boxes: o, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l, softNmsSigma: u } = n, c = t.readSync(o.dataId), p = t.readSync(s.dataId), m = a, f = i, d = l, h = u, { selectedIndices: g, selectedScores: y } = xte(c, p, m, f, d, h);
  return [t.makeTensorInfo([g.length], "int32", new Int32Array(g)), t.makeTensorInfo([y.length], "float32", new Float32Array(y))];
}
var pz = { kernelName: ta, backendName: "webgl", kernelFunc: yte };
var jS = class {
  constructor(e, t, n, o) {
    this.variableNames = ["indices"], this.outputShape = [e, t], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${o}), float(${n}),
                      float(index == coords.y)));
      }
    `;
  }
};
var bte = (r) => {
  let { inputs: e, backend: t, attrs: n } = r, { indices: o } = e, { depth: s, onValue: a, offValue: i } = n, l = b.sizeFromShape(o.shape), u = new jS(l, s, a, i), c = ae({ inputs: { x: o }, backend: t, attrs: { shape: [l] } }), p = t.runWebGLProgram(u, [c], o.dtype);
  t.disposeIntermediateTensorInfo(c);
  let m = [...o.shape, s], f = ae({ inputs: { x: p }, backend: t, attrs: { shape: m } });
  return t.disposeIntermediateTensorInfo(p), f;
};
var mz = { kernelName: Qo, backendName: "webgl", kernelFunc: bte };
function kh(r) {
  let { inputs: e, backend: t } = r, { x: n } = e;
  if (n.dtype === "complex64") {
    let o = za({ inputs: { input: n }, backend: t }), s = kh({ inputs: { x: o }, backend: t }), a = Yu({ inputs: { input: n }, backend: t }), i = kh({ inputs: { x: a }, backend: t }), l = Sn({ inputs: { real: s, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(s), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(i), l;
  } else
    return Ba({ attrs: { shape: n.shape, dtype: n.dtype, value: n.dtype === "string" ? "" : 0 }, backend: t });
}
var fz = { kernelName: ti, backendName: "webgl", kernelFunc: kh };
function dz(r) {
  let { inputs: e, backend: t } = r, { x: n } = e;
  if (n.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (n.dtype === "complex64") {
    let o = za({ inputs: { input: n }, backend: t }), s = dz({ inputs: { x: o }, backend: t }), a = Yu({ inputs: { input: n }, backend: t }), i = kh({ inputs: { x: a }, backend: t }), l = Sn({ inputs: { real: s, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(s), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(i), l;
  } else
    return Ba({ attrs: { shape: n.shape, dtype: n.dtype, value: 1 }, backend: t });
}
var hz = { kernelName: qs, backendName: "webgl", kernelFunc: dz };
function wte(r) {
  let { inputs: e, backend: t, attrs: n } = r, { axis: o } = n;
  if (e.length === 1)
    return Ay({ inputs: { input: e[0] }, backend: t, attrs: { dim: o } });
  let s = e[0].shape, a = e[0].dtype;
  e.forEach((c) => {
    b.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), b.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], l = e.map((c) => {
    let p = Ay({ inputs: { input: c }, backend: t, attrs: { dim: o } });
    return i.push(p), p;
  }), u = cS({ inputs: l, backend: t, attrs: { axis: o } });
  return i.forEach((c) => t.disposeIntermediateTensorInfo(c)), u;
}
var gz = { kernelName: Ks, backendName: "webgl", kernelFunc: wte };
var GS = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map((u, c) => u[0] + e[c] + u[1]);
    let o = e.length, s = ze(o), a = t.map((u) => u[0]).join(","), i = t.map((u, c) => u[0] + e[c]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, o);
    if (o === 1) {
      this.userCode = `
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${s} start = ${s}(${a});
      ${s} end = ${s}(${i});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `;
  }
};
var US = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map((h, g) => h[0] + e[g] + h[1]);
    let o = e.length, s = ze(o), a = t.map((h) => h[0]).join(","), i = t.map((h, g) => h[0] + e[g]).join(","), l = Xt("rc", o), u = Xt("source", o), c = `${l[o - 1]} < ${this.outputShape[o - 1]}`, p = o === 1 ? "source" : `vec2(${u.slice(-2).join()})`, m = [`${s} rc = outputLoc;`, `${l[o - 1]} += 1;
       if(${c}) {
      `, o === 1 ? "" : `}
       rc = outputLoc;
       ${l[o - 2]} += 1;
       if(${l[o - 2]} < ${this.outputShape[o - 2]}) {`, o === 1 ? "" : `  ${l[o - 1]} += 1;
         if(${c}) {`], f = o === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", d = "";
    for (let h = 0, g = o === 1 ? 2 : 4; h < g; h++)
      d += `
        ${m[h]}
        if (${f}) {
          result[${h}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${h}] = getChannel(getX(${u.join()}), ${p});
        }
      `;
    d += o === 1 ? "} " : "}}", this.userCode = `
      const ${s} start = ${s}(${a});
      const ${s} end = ${s}(${i});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `;
  }
};
var HS = (r) => {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { paddings: s, constantValue: a } = n;
  if (b.sizeFromShape(o.shape) === 0) {
    let u = s.map((c, p) => c[0] + o.shape[p] + c[1]);
    return Ba({ backend: t, attrs: { shape: u, value: a, dtype: o.dtype } });
  }
  let i = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new US(o.shape, s, a) : new GS(o.shape, s, a), l = [[a]];
  return t.runWebGLProgram(i, [o], o.dtype, l);
};
var xz = { kernelName: es, backendName: "webgl", kernelFunc: HS };
var kte = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`;
var _te = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  ` + $l + `
  return result;
`;
var vte = st({ opSnippet: kte, packedOpSnippet: _te });
var yz = { kernelName: ts, backendName: "webgl", kernelFunc: vte };
function Cte(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, keepDims: a } = n, i = o.shape.length, l = [], u = b.parseAxisParam(s, o.shape), c = u, p = S.getAxesPermutation(c, i), m = o;
  p != null && (m = Ft({ inputs: { x: o }, backend: t, attrs: { perm: p } }), c = S.getInnerMostAxes(c.length, i), l.push(m)), S.assertAxesAreInnerMostDims("prod", c, i);
  let f;
  if (t.shouldExecuteOnCPU([m])) {
    let d = t.texData.get(m.dataId).values, { outVals: h, outShape: g, outDtype: y } = cP(m.shape, m.dtype, d, c);
    f = t.makeTensorInfo(g, y, h);
  } else {
    let [d, h] = S.computeOutAndReduceShapes(m.shape, c), g = b.sizeFromShape(h), y = ae({ inputs: { x: m }, backend: t, attrs: { shape: [-1, g] } }), w = Zl(o.dtype), x = Ln(y, w, "prod", t);
    f = ae({ inputs: { x }, backend: t, attrs: { shape: d } }), l.push(y), l.push(x);
  }
  if (a) {
    l.push(f);
    let d = S.expandShapeToKeepDim(f.shape, u);
    f = ae({ inputs: { x: f }, backend: t, attrs: { shape: d } });
  }
  return l.forEach((d) => t.disposeIntermediateTensorInfo(d)), f;
}
var bz = { kernelName: ra, backendName: "webgl", kernelFunc: Cte };
var qS = (r) => {
  let { backend: e, attrs: t } = r, { start: n, stop: o, step: s, dtype: a } = t, i = pP(n, o, s, a);
  return e.makeTensorInfo([i.length], a, i);
};
var wz = { kernelName: nl, backendName: "webgl", kernelFunc: qS };
var Ste = "return 1.0 / x;";
var Ite = _e({ opSnippet: Ste });
var kz = { kernelName: na, backendName: "webgl", kernelFunc: Ite };
var Nte = br + `
  return (x < 0.0) ? 0.0 : x;
`;
var Tte = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var Ete = _e({ opSnippet: Nte, packedOpSnippet: Tte });
var _z = { kernelName: ns, backendName: "webgl", kernelFunc: Ete };
var Ate = br + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
var $te = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var Dte = _e({ opSnippet: Ate, packedOpSnippet: $te });
var vz = { kernelName: ss, backendName: "webgl", kernelFunc: Dte };
var KS = class {
  constructor(e, t, n, o, s) {
    this.variableNames = ["A"], this.outputShape = [];
    let [a, i, l, u] = e;
    this.outputShape = [a, t, n, u];
    let c = [o && t > 1 ? i - 1 : i, o && n > 1 ? l - 1 : l], p = [o && t > 1 ? t - 1 : t, o && n > 1 ? n - 1 : n], m;
    s ? m = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : m = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0] / p[0]},
          ${c[1] / p[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
};
var XS = class {
  constructor(e, t, n, o, s) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    let [a, i, l, u] = e;
    this.outputShape = [a, t, n, u];
    let c = [o && t > 1 ? i - 1 : i, o && n > 1 ? l - 1 : l], p = [o && t > 1 ? t - 1 : t, o && n > 1 ? n - 1 : n], m;
    s ? m = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : m = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0] / p[0]},
          ${c[1] / p[1]},
          ${c[1] / p[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u - 1};
        bool hasNextRow = coords.z < ${n - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
};
function Rte(r) {
  let { inputs: e, backend: t, attrs: n } = r, { images: o } = e, { alignCorners: s, halfPixelCenters: a, size: i } = n, [l, u] = i, c = j().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new XS(o.shape, l, u, s, a) : new KS(o.shape, l, u, s, a);
  return t.runWebGLProgram(c, [o], "float32");
}
var Cz = { kernelName: os, backendName: "webgl", kernelFunc: Rte };
var YS = class {
  constructor(e, t, n) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    let [, o, s] = t, [, a, i] = e, l = [n && a > 1 ? o - 1 : o, n && i > 1 ? s - 1 : s], u = [n && a > 1 ? a - 1 : a, n && i > 1 ? i - 1 : i], c = l[0] / u[0], p = l[1] / u[1], m = 1 / c, f = 1 / p, d = Math.ceil(m) * 2 + 2, h = Math.ceil(f) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${d});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${o - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
function Fte(r) {
  let { inputs: e, backend: t, attrs: n } = r, { images: o, dy: s } = e, { alignCorners: a } = n, i = new YS(s.shape, o.shape, a);
  return t.runWebGLProgram(i, [s], s.dtype);
}
var Sz = { kernelName: Bc, backendName: "webgl", kernelFunc: Fte };
var ZS = class {
  constructor(e, t, n, o, s) {
    this.variableNames = ["A"], this.outputShape = [];
    let [a, i, l, u] = e;
    this.outputShape = [a, t, n, u];
    let c = [o && t > 1 ? i - 1 : i, o && n > 1 ? l - 1 : l], p = [o && t > 1 ? t - 1 : t, o && n > 1 ? n - 1 : n], m = o ? "0.5" : "0.0", f;
    s ? f = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : f = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0] / p[0]},
          ${c[1] / p[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
};
var JS = class {
  constructor(e, t, n, o, s) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    let [a, i, l, u] = e;
    this.outputShape = [a, t, n, u];
    let c = [o && t > 1 ? i - 1 : i, o && n > 1 ? l - 1 : l], p = [o && t > 1 ? t - 1 : t, o && n > 1 ? n - 1 : n], m = o ? "0.5" : "0.0", f;
    s ? f = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : f = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0] / p[0]},
          ${c[1] / p[1]},
          ${c[1] / p[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u - 1};
        bool hasNextRow = coords.z < ${n - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
};
function Ote(r) {
  let { inputs: e, backend: t, attrs: n } = r, { images: o } = e, { alignCorners: s, halfPixelCenters: a, size: i } = n, [l, u] = i, c = j().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new JS(o.shape, l, u, s, a) : new ZS(o.shape, l, u, s, a);
  return t.runWebGLProgram(c, [o], o.dtype);
}
var Iz = { kernelName: ol, backendName: "webgl", kernelFunc: Ote };
var QS = class {
  constructor(e, t, n) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    let [, o, s] = t, [, a, i] = e, l = [n && a > 1 ? o - 1 : o, n && i > 1 ? s - 1 : s], u = [n && a > 1 ? a - 1 : a, n && i > 1 ? i - 1 : i], c = l[0] / u[0], p = l[1] / u[1], m = 1 / c, f = 1 / p, d = Math.ceil(m) * 2 + 2, h = Math.ceil(f) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${d});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${o}) - 1),
                ${n} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${n} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
function Pte(r) {
  let { inputs: e, backend: t, attrs: n } = r, { images: o, dy: s } = e, { alignCorners: a } = n, i = new QS(s.shape, o.shape, a);
  return t.runWebGLProgram(i, [s], s.dtype);
}
var Nz = { kernelName: zc, backendName: "webgl", kernelFunc: Pte };
var eI = class {
  constructor(e, t) {
    this.variableNames = ["x"];
    let n = e.length;
    if (n > 4)
      throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);
    if (this.outputShape = e, n === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;
      return;
    }
    let o = (i) => t.indexOf(i) !== -1 && e[i] !== 1 ? `${e[i]} - coords[${i}] - 1` : `coords[${i}]`, s = e.map((i, l) => o(l)).join(","), a = ze(n);
    this.userCode = `
      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `;
  }
};
var tI = class {
  constructor(e, t) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true;
    let n = e.length;
    if (n > 4)
      throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);
    this.outputShape = e;
    let o = Xt("rc", n), s = `${o[n - 1]} + 1 < ${this.outputShape[n - 1]}`, a = `${o[n - 2]} + 1 < ${this.outputShape[n - 2]}`, i = ze(n);
    n === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(o.slice())};
          if(${s}){
            result.g = ${u(o.slice())};
          }
          if(${a}) {
            result.b = ${c(o.slice())};
            if(${s}) {
              result.a = ${p(o.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function l(d) {
      return m(d);
    }
    function u(d) {
      return d[n - 1] = "(" + d[n - 1] + " + 1)", m(d);
    }
    function c(d) {
      return d[n - 2] = "(" + d[n - 2] + " + 1)", m(d);
    }
    function p(d) {
      return d[n - 1] = "(" + d[n - 1] + " + 1)", d[n - 2] = "(" + d[n - 2] + " + 1)", m(d);
    }
    function m(d) {
      let h = e.map((w, x) => f(x, d)), g = h.join(","), y = h.slice(-2).join(",");
      return `getChannel(getX(${g}), vec2(${y}))`;
    }
    function f(d, h) {
      return t.indexOf(d) !== -1 && e[d] !== 1 ? `${e[d]} - ${h[d]} - 1` : `${h[d]}`;
    }
  }
};
function Mte(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { dims: s } = n, a = o.shape.length, i = b.parseAxisParam(s, o.shape);
  if (a === 0)
    return Yt({ inputs: { x: o }, backend: t });
  let l = j().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new tI(o.shape, i) : new eI(o.shape, i);
  return t.runWebGLProgram(l, [o], o.dtype);
}
var Tz = { kernelName: is, backendName: "webgl", kernelFunc: Mte };
var rI = class {
  constructor(e, t) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    let n = e[1], o = e[2];
    this.outputShape = e;
    let s = "";
    typeof t == "number" ? s = `float outputValue = ${t.toFixed(2)};` : s = `
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${o} && coordY >= 0 && coordY < ${n}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
var Ez = { kernelName: ma, backendName: "webgl", kernelFunc: ({ inputs: r, attrs: e, backend: t }) => {
  let { image: n } = r, { radians: o, fillValue: s, center: a } = e, i = t, l = new rI(n.shape, s), [u, c] = S.getImageCenter(a, n.shape[1], n.shape[2]), p = [[u, c, Math.sin(o), Math.cos(o)]];
  return i.runWebGLProgram(l, [n], n.dtype, p);
} };
var Lte = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`;
var zte = _e({ opSnippet: Lte });
var Az = { kernelName: as, backendName: "webgl", kernelFunc: zte };
var Bte = "return inversesqrt(x);";
var Vte = _e({ opSnippet: Bte, cpuKernelImpl: mP });
var $z = { kernelName: ls, backendName: "webgl", kernelFunc: Vte };
var _h = class {
  constructor(e, t, n, o, s, a, i = true) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = a;
    let l = ze(s.length), u = ze(a.length), c = "";
    n === 1 ? c = "i" : n === 2 && (c = "i, j");
    let p = `getIndices(${c})`, m = "";
    o === 1 ? m = "i" : o === 2 && (m = "i, coords[1]");
    let f = `getUpdates(${m})`, d = t > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${l} strides = ${l}(${s});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${p});
              flattenedIndex += index * ${d};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
  }
};
function Wte(r) {
  let { inputs: e, backend: t, attrs: n } = r, { indices: o, updates: s } = e, { shape: a } = n, { sliceRank: i, numUpdates: l, sliceSize: u, strides: c, outputSize: p } = S.calculateShapes(s, o, a), m = [p / u, u];
  if (p === 0)
    return t.makeTensorInfo(a, o.dtype);
  let f = ae({ inputs: { x: o }, backend: t, attrs: { shape: [l, i] } }), d = ae({ inputs: { x: s }, backend: t, attrs: { shape: [l, u] } }), h = t.makeTensorInfo([], "float32", new Float32Array([0])), g = new _h(l, i, f.shape.length, d.shape.length, c, m), y = t.runWebGLProgram(g, [d, f, h], d.dtype), w = ae({ inputs: { x: y }, backend: t, attrs: { shape: a } });
  return t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(h), w;
}
var Dz = { kernelName: oa, backendName: "webgl", kernelFunc: Wte };
var nI = class {
  constructor(e, t, n) {
    this.variableNames = ["c", "a", "b"], this.outputShape = t;
    let o, s;
    if (n > 4)
      throw Error(`Where for rank ${n} is not yet supported`);
    if (n === 1)
      s = "resRC", o = "resRC";
    else {
      let i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], l = [], u = [];
      for (let c = 0; c < t.length; c++)
        u.push(`${i[c]}`), c < e && l.push(`${i[c]}`);
      o = l.join(), s = u.join();
    }
    let a = ze(n);
    this.userCode = `
      void main() {
        ${a} resRC = getOutputCoords();
        float cVal = getC(${o});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `;
  }
};
function jte(r) {
  let { inputs: e, backend: t } = r, { condition: n, t: o, e: s } = e, a = new nI(n.shape.length, o.shape, o.shape.length);
  return t.runWebGLProgram(a, [n, o, s], pr(o.dtype, s.dtype));
}
var Rz = { kernelName: Ys, backendName: "webgl", kernelFunc: jte };
var Gte = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${S.SELU_SCALEALPHA};
  float scale = ${S.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`;
var Ute = _e({ opSnippet: Gte });
var Fz = { kernelName: sa, backendName: "webgl", kernelFunc: Ute };
var Oz = "return 1.0 / (1.0 + exp(-1.0 * x));";
var Hte = _e({ opSnippet: Oz, packedOpSnippet: Oz, cpuKernelImpl: fP });
var Pz = { kernelName: cs, backendName: "webgl", kernelFunc: Hte };
var qte = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`;
var Kte = _e({ opSnippet: qte });
var Mz = { kernelName: aa, backendName: "webgl", kernelFunc: Kte };
var Xte = ky + `
  return sin(x);
`;
var Yte = _e({ opSnippet: Xte });
var Lz = { kernelName: us, backendName: "webgl", kernelFunc: Yte };
var Zte = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`;
var Jte = _e({ opSnippet: Zte });
var zz = { kernelName: ia, backendName: "webgl", kernelFunc: Jte };
var Qte = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`;
var ere = _e({ opSnippet: Qte });
var Bz = { kernelName: la, backendName: "webgl", kernelFunc: ere };
var tre = (r) => {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { blockShape: s, paddings: a } = n;
  b.assert(o.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  let i = s.reduce((y, w) => y * w), l = [[0, 0]];
  l.push(...a);
  for (let y = 1 + s.length; y < o.shape.length; ++y)
    l.push([0, 0]);
  let u = [], c = HS({ inputs: { x: o }, backend: t, attrs: { paddings: l, constantValue: 0 } }), p = S.getReshaped(c.shape, s, i, false), m = S.getPermuted(p.length, s.length, false), f = S.getReshapedPermuted(c.shape, s, i, false), d = ae({ inputs: { x: c }, backend: t, attrs: { shape: p } }), h = Ft({ inputs: { x: d }, backend: t, attrs: { perm: m } }), g = ae({ inputs: { x: h }, backend: t, attrs: { shape: f } });
  return u.push(c), u.push(d), u.push(h), u.forEach((y) => t.disposeIntermediateTensorInfo(y)), g;
};
var Vz = { kernelName: Js, backendName: "webgl", kernelFunc: tre };
function rre(r) {
  let { inputs: e, backend: t } = r, { indices: n, values: o, denseShape: s, defaultValue: a } = e;
  if (s.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);
  if (n.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${n.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${o.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);
  let i = t.readSync(n.dataId), l = t.readSync(o.dataId), u = t.readSync(s.dataId), c = t.readSync(a.dataId)[0], [p, m, f, d, h] = hP(i, n.shape, n.dtype, l, o.dtype, u, c);
  return [t.makeTensorInfo(m, n.dtype, p), t.makeTensorInfo([m[0]], o.dtype, f), t.makeTensorInfo([d.length], "bool", new Uint8Array(d.map((g) => Number(g)))), t.makeTensorInfo([h.length], n.dtype, new Int32Array(h))];
}
var Wz = { kernelName: Vc, backendName: "webgl", kernelFunc: rre };
function nre(r) {
  let { inputs: e, backend: t } = r, { inputIndices: n, inputShape: o, newShape: s } = e;
  if (n.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${n.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${o.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let a = Array.from(t.readSync(o.dataId)), i = t.readSync(n.dataId), l = Array.from(t.readSync(s.dataId)), [u, c, p] = gP(i, n.shape, n.dtype, a, l);
  return [t.makeTensorInfo(c, n.dtype, u), t.makeTensorInfo([p.length], s.dtype, new Int32Array(p))];
}
var jz = { kernelName: Wc, backendName: "webgl", kernelFunc: nre };
function ore(r) {
  let { inputs: e, backend: t } = r, { data: n, indices: o, segmentIds: s } = e;
  if (n.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${o.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);
  let a = t.readSync(n.dataId), i = t.readSync(o.dataId), l = t.readSync(s.dataId), [u, c] = yy(a, n.shape, n.dtype, i, l, true);
  return t.makeTensorInfo(c, n.dtype, u);
}
var Gz = { kernelName: jc, backendName: "webgl", kernelFunc: ore };
function sre(r) {
  let { inputs: e, backend: t } = r, { data: n, indices: o, segmentIds: s } = e;
  if (n.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${o.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);
  let a = t.readSync(n.dataId), i = t.readSync(o.dataId), l = t.readSync(s.dataId), [u, c] = yy(a, n.shape, n.dtype, i, l);
  return t.makeTensorInfo(c, n.dtype, u);
}
var Uz = { kernelName: Gc, backendName: "webgl", kernelFunc: sre };
function ire(r) {
  let { inputs: e, backend: t, attrs: n } = r, { sparseIndices: o, sparseValues: s, defaultValue: a } = e, { outputShape: i } = n, { sliceRank: l, numUpdates: u, strides: c, outputSize: p } = S.calculateShapes(s, o, i), m = false, f = new _h(u, l, o.shape.length, s.shape.length, c, [p, 1], m), d = t.runWebGLProgram(f, [s, o, a], s.dtype), h = ae({ inputs: { x: d }, backend: t, attrs: { shape: i } });
  return t.disposeIntermediateTensorInfo(d), h;
}
var Hz = { kernelName: Uc, backendName: "webgl", kernelFunc: ire };
function are(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { numOrSizeSplits: s, axis: a } = n, i = b.parseAxisParam(a, o.shape)[0], l = S.prepareSplitSize(o, s, i), u = o.shape.length, c = new Array(u).fill(0), p = o.shape.slice();
  return l.map((m) => {
    let f = [...p];
    f[i] = m;
    let d = Ps({ inputs: { x: o }, backend: t, attrs: { begin: c, size: f } });
    return c[i] += m, d;
  });
}
var qz = { kernelName: Qs, backendName: "webgl", kernelFunc: are };
var Kz = "return sqrt(x);";
var lre = _e({ opSnippet: Kz, packedOpSnippet: Kz, cpuKernelImpl: xP });
var Xz = { kernelName: ps, backendName: "webgl", kernelFunc: lre };
var ure = "return x * x;";
var cre = _e({ opSnippet: ure });
var Yz = { kernelName: sl, backendName: "webgl", kernelFunc: cre };
var Zz = "return (a - b) * (a - b);";
var pre = st({ opSnippet: Zz, packedOpSnippet: Zz });
var Jz = { kernelName: ds, backendName: "webgl", kernelFunc: pre };
function mre({ inputs: r, attrs: e, backend: t }) {
  let { x: n } = r, o = br + `
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `, s = new Cn(n.shape, o);
  return t.runWebGLProgram(s, [n], n.dtype);
}
var Qz = { kernelName: ro, backendName: "webgl", kernelFunc: mre };
var oI = class {
  constructor(e, t, n) {
    this.variableNames = ["x"], this.outputShape = n;
    let o = n.length, s = ze(n.length), a = ze(n.length), i = "";
    if (o === 1)
      i = "coords * strides + begin";
    else {
      let l = 0;
      i = n.map((u, c) => (l++, n.length === 1 ? `coords * strides[${c}] + begin[${c}]` : `coords[${l - 1}] * strides[${c}] + begin[${c}]`)).join(",");
    }
    this.userCode = `
      ${s} begin = ${s}(${e});
      ${s} strides = ${s}(${t});

      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `;
  }
};
function fre(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { begin: s, end: a, strides: i, beginMask: l, endMask: u, ellipsisMask: c, newAxisMask: p, shrinkAxisMask: m } = n, { nonStrided: f, $begin: d, $strides: h, size: g, newShape: y, outShape: w } = ar.sliceInfo(o.shape, s, a, i, l, u, c, p, m), x = ae({ inputs: { x: o }, backend: t, attrs: { shape: y } }), k;
  if (f) {
    let A = Ps({ inputs: { x }, backend: t, attrs: { begin: d, size: g } });
    k = ae({ inputs: { x: A }, backend: t, attrs: { shape: w } }), t.disposeIntermediateTensorInfo(A);
  } else if (w.some((A) => A === 0))
    k = t.makeTensorInfo(w, o.dtype, []);
  else if (t.shouldExecuteOnCPU([x])) {
    let R = t.texData.get(x.dataId).values, P = Se(x.shape, x.dtype, R), M = yP(w, P, h, d);
    k = t.makeTensorInfo(w, x.dtype, M.values);
  } else {
    let $ = new oI(d, h, w);
    k = t.runWebGLProgram($, [x], x.dtype);
  }
  let C = ae({ inputs: { x: k }, backend: t, attrs: { shape: w } });
  return t.disposeIntermediateTensorInfo(x), t.disposeIntermediateTensorInfo(k), C;
}
var e3 = { kernelName: ua, backendName: "webgl", kernelFunc: fre };
function dre(r) {
  let { inputs: e, backend: t, attrs: n } = r, { separator: o, nGramWidths: s, leftPad: a, rightPad: i, padWidth: l, preserveShortSequences: u } = n, { data: c, dataSplits: p } = e, m = t.readSync(c.dataId), f = t.readSync(p.dataId), [d, h] = bP(m, f, o, s, a, i, l, u);
  return [t.makeTensorInfo([d.length], "string", d), t.makeTensorInfo(p.shape, "int32", h)];
}
var t3 = { kernelName: Hc, backendName: "webgl", kernelFunc: dre };
function hre(r) {
  let { inputs: e, backend: t, attrs: n } = r, { skipEmpty: o } = n, { input: s, delimiter: a } = e;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (s.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${s.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);
  let i = t.readSync(s.dataId), l = t.readSync(a.dataId)[0], [u, c, p] = wP(i, l, o), m = c.length;
  return [t.makeTensorInfo([m, 2], "int32", u), t.makeTensorInfo([m], "string", c), t.makeTensorInfo([2], "int32", new Int32Array(p))];
}
var r3 = { kernelName: qc, backendName: "webgl", kernelFunc: hre };
function gre(r) {
  let { inputs: e, backend: t, attrs: n } = r, { numBuckets: o } = n, { input: s } = e;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o <= 0)
    throw new Error("Number of buckets must be at least 1");
  let a = t.readSync(s.dataId), i = kP(a, o);
  return t.makeTensorInfo(s.shape, "int32", i);
}
var n3 = { kernelName: Kc, backendName: "webgl", kernelFunc: gre };
var xre = "return tan(x);";
var yre = _e({ opSnippet: xre });
var o3 = { kernelName: gs, backendName: "webgl", kernelFunc: yre };
var bre = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`;
var wre = _e({ opSnippet: bre });
var s3 = { kernelName: xs, backendName: "webgl", kernelFunc: wre };
var sI = class {
  constructor(e, t) {
    this.variableNames = ["A"];
    let n = new Array(e.length);
    for (let a = 0; a < n.length; a++)
      n[a] = e[a] * t[a];
    this.outputShape = n, this.rank = n.length;
    let o = ze(this.rank), s = kre(e);
    this.userCode = `
      void main() {
        ${o} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `;
  }
};
function kre(r) {
  let e = r.length;
  if (e > 5)
    throw Error(`Tile for rank ${e} is not yet supported`);
  if (e === 1)
    return `imod(resRC, ${r[0]})`;
  let t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], n = [];
  for (let o = 0; o < r.length; o++)
    n.push(`imod(${t[o]}, ${r[o]})`);
  return n.join();
}
function iI(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { reps: s } = n;
  if (o.dtype === "string" || o.shape.length > 5) {
    let l = t.readSync(o.dataId), u = o.dtype === "string" ? l.map((m) => b.decodeString(m)) : l, c = Se(o.shape, o.dtype, u), p = vP(c, s);
    return t.makeTensorInfo(p.shape, p.dtype, p.values);
  }
  let a = new sI(o.shape, s);
  return t.runWebGLProgram(a, [o], o.dtype);
}
var i3 = { kernelName: jn, backendName: "webgl", kernelFunc: iI };
var aI = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "negativeInf", type: "float" }, { name: "dir", type: "int" }, { name: "inc", type: "int" }], this.outputShape = e, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
};
var lI = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "k", type: "int" }], this.outputShape = e, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
};
function Ju(r, e) {
  e !== null && r.disposeIntermediateTensorInfo(e);
}
function a3(r) {
  let e = 1;
  for (; e < r; )
    e *= 2;
  return e;
}
function _re(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { k: s, sorted: a } = n, i = j().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), l = j().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), u = o.shape, c = u[u.length - 1];
  if (t.shouldExecuteOnCPU([o]) || c < i || s > l) {
    let M = t.readSync(o.dataId), [V, W] = CP(M, u, o.dtype, s, a);
    return [t.makeTensorInfo(V.shape, V.dtype, V.values), t.makeTensorInfo(W.shape, W.dtype, W.values)];
  }
  if (s === 0)
    return u[u.length - 1] = 0, [t.makeTensorInfo(u, o.dtype, []), t.makeTensorInfo(u, "int32", [])];
  if (c === 1)
    return [o, Ba({ attrs: { shape: u, dtype: "int32", value: 0 }, backend: t })];
  let p = t.texData.get(o.dataId), m = p !== null && p.isPacked, f = m ? t.unpackTensor(o) : o, h = b.sizeFromShape(u) / c, g = ae({ inputs: { x: f }, attrs: { shape: [h, c] }, backend: t });
  m && Ju(t, f);
  let y = a3(s), w = a3(c), x = null, k = () => x === null ? [g, g] : [g, x], C = (M, V, W) => {
    let G = k(), U = new aI(W), K = [[c], [x === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [M], [V]], re = x;
    x = t.runWebGLProgram(U, G, "int32", K), Ju(t, re);
  };
  for (let M = 1; M < y; M *= 2) {
    let V = M * 2;
    for (let W = M; W >= 1; W /= 2)
      C(V, W, [h, w]);
  }
  for (let M = w; M > y; M /= 2) {
    let V = k(), W = new lI([h, M / 2]), U = [[c], [x === null ? 1 : 0], [y]], H = x;
    x = t.runWebGLProgram(W, V, "int32", U), Ju(t, H);
    let K = y / 2, re = K * 2;
    for (let X = K; X >= 1; X /= 2)
      C(re, X, x.shape);
  }
  let A = x;
  x = Ps({ inputs: { x }, backend: t, attrs: { begin: 0, size: [h, s] } }), Ju(t, A);
  let $ = AS({ inputs: { x: g, indices: x }, backend: t, attrs: { axis: 1, batchDims: 1 } });
  Ju(t, g);
  let R = u.slice(0, -1);
  R.push(s), A = x, x = ae({ inputs: { x }, attrs: { shape: R }, backend: t }), Ju(t, A);
  let P = $;
  return $ = ae({ inputs: { x: $ }, attrs: { shape: R }, backend: t }), Ju(t, P), [$, x];
}
var l3 = { kernelName: ca, backendName: "webgl", kernelFunc: _re };
var uI = class {
  constructor(e, t, n, o, s, a) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = a;
    let i = n === "nearest" ? 1 : 2, l;
    switch (o) {
      case "constant":
        l = 1;
        break;
      case "reflect":
        l = 2;
        break;
      case "wrap":
        l = 3;
        break;
      case "nearest":
        l = 4;
        break;
      default:
        l = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
};
function vre(r) {
  let { inputs: e, backend: t, attrs: n } = r, { image: o, transforms: s } = e, { interpolation: a, fillMode: i, fillValue: l, outputShape: u } = n, [c, p, m, f] = o.shape, [d, h] = u != null ? u : [p, m], g = [c, d, h, f], y = new uI(p, m, a, i, l, g);
  return t.runWebGLProgram(y, [o, s], "float32");
}
var u3 = { kernelName: pa, backendName: "webgl", kernelFunc: vre };
function Cre(r) {
  let { inputs: e, attrs: t, backend: n } = r, { axis: o } = t, { x: s } = e;
  Ds(s, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  let a = n.readSync(s.dataId), { outputValues: i, outputShape: l, indices: u } = SP(a, o, s.shape, s.dtype);
  return [n.makeTensorInfo(l, s.dtype, i), n.makeTensorInfo([u.length], "int32", u)];
}
var c3 = { kernelName: Xc, backendName: "webgl", kernelFunc: Cre };
function Sre(r) {
  let { inputs: e, backend: t, attrs: n } = r, { value: o } = e, { axis: s } = n;
  s < 0 && (s += o.shape.length);
  let a = o, i = a.shape.length, l = o.shape[s], u = new Array(i - 1), c = 0;
  for (let h = 0; h < i; h++)
    h !== s && (u[c++] = a.shape[h]);
  let p = [], m = new Array(i).fill(0), f = a.shape.slice();
  f[s] = 1;
  let d = new Array(l);
  for (let h = 0; h < d.length; h++) {
    m[s] = h;
    let g = Ps({ inputs: { x: a }, backend: t, attrs: { begin: m, size: f } }), y = ae({ inputs: { x: g }, backend: t, attrs: { shape: u } });
    d[h] = y, p.push(g);
  }
  return p.forEach((h) => t.disposeIntermediateTensorInfo(h)), d;
}
var p3 = { kernelName: ei, backendName: "webgl", kernelFunc: Sre };
var cI = class {
  constructor(e, t) {
    this.variableNames = ["x", "segmentIds"];
    let n = e.windowSize, o = e.batchSize, s = e.inSize, a = e.numSegments, i = a * Math.ceil(s / n);
    this.outputShape = [o, i];
    let l = "0.0", u = "sumValue", c = Math.floor(n / 4) * 4, p = n % 4, m = `
        sumValue += dot(values, segFilter);
    `, f = "";
    s % n > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);
    let d = "";
    s % n > 0 && (d = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${d}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${a})) * float(${n}));
        int currentSeg = int(mod(float(outIdx), float(${a})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${p === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${p === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `;
  }
};
function Ire(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o, segmentIds: s } = e, { numSegments: a } = n, i = o.shape.length, l = [], u = 0, c = S.getAxesPermutation([u], i), p = o;
  c != null && (p = Ft({ inputs: { x: o }, backend: t, attrs: { perm: c } }), l.push(p), u = S.getInnerMostAxes(1, i)[0]);
  let m = S.segment_util.computeOutShape(p.shape, u, a), f = b.sizeFromShape([p.shape[u]]), d = ae({ inputs: { x: p }, backend: t, attrs: { shape: [-1, f] } });
  l.push(d);
  let h = Zl(o.dtype), g = (k, C, A, $, R) => {
    let P = k.shape[0], M = k.shape[1], V = S.segment_util.segOpComputeOptimalWindowSize(M, R), W = { windowSize: V, inSize: M, batchSize: P, numSegments: R }, G = new cI(W, C), U = t.compileAndRun(G, [k, A], $);
    if (l.push(U), U.shape[1] === R)
      return U;
    let H = qS({ backend: t, attrs: { start: 0, stop: R, step: 1, dtype: "float32" } }), K = iI({ inputs: { x: H }, backend: t, attrs: { reps: [M / V] } });
    return l.push(H), l.push(K), g(U, C, K, $, R);
  }, y = g(d, "unsortedSegmentSum", s, h, a), w = ae({ inputs: { x: y }, backend: t, attrs: { shape: m } }), x = w;
  if (c != null) {
    l.push(w);
    let k = S.getUndoAxesPermutation(c);
    x = Ft({ inputs: { x }, backend: t, attrs: { perm: k } });
  }
  return l.forEach((k) => t.disposeIntermediateTensorInfo(k)), x;
}
var m3 = { kernelName: il, backendName: "webgl", kernelFunc: Ire };
var Nre = [zL, BL, eM, rM, nM, oM, iM, aM, lM, uM, mM, fM, dM, hM, xM, gM, yM, wM, bM, kM, _M, vM, CM, IM, NM, $M, RM, FM, PM, WP, LM, BM, VM, zM, jM, GM, WM, UM, HM, qM, YM, ZM, JM, eL, tL, QM, rL, nL, oL, sL, iL, aL, lL, cL, pL, fL, dL, hL, gL, yL, bL, wL, kL, _L, vL, CL, SL, IL, VP, NL, MM, TL, EL, AL, jP, $L, DL, RL, OL, FL, PL, ML, LL, WL, UL, GL, HL, qL, XL, jL, ZL, JL, QL, ez, tz, iz, KP, lz, uz, cz, pz, TM, mz, hz, gz, xz, yz, GP, bz, wz, EM, rz, kz, vz, _z, YP, Cz, Sz, Iz, Nz, Tz, Ez, Az, $z, Dz, Rz, Fz, Pz, Mz, Lz, zz, SM, sz, Bz, Vz, Wz, jz, Gz, Uz, Hz, qz, Xz, Yz, Jz, Qz, e3, t3, r3, n3, oz, JP, o3, s3, i3, l3, u3, QP, c3, p3, m3, fz];
for (let r of Nre)
  Ul(r);
var Ot;
(function(r) {
  r[r.float32 = 0] = "float32", r[r.int32 = 1] = "int32", r[r.bool = 2] = "bool", r[r.string = 3] = "string", r[r.complex64 = 4] = "complex64";
})(Ot || (Ot = {}));
var Fl;
(function(r) {
  r[r.linear = 0] = "linear", r[r.relu = 1] = "relu", r[r.relu6 = 2] = "relu6", r[r.prelu = 3] = "prelu", r[r.leakyrelu = 4] = "leakyrelu", r[r.sigmoid = 5] = "sigmoid", r[r.elu = 6] = "elu";
})(Fl || (Fl = {}));
var f3;
function Tre(r) {
  f3 = r.wasm.cwrap(ri, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Ere(r) {
  let { inputs: e, backend: t, attrs: n } = r, { a: o, b: s, bias: a, preluActivationWeights: i } = e;
  if (o.dtype !== "float32" || s.dtype !== "float32")
    throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");
  let { transposeA: l, transposeB: u, activation: c, leakyreluAlpha: p } = n, m = t.dataIdMap.get(o.dataId).id, f = t.dataIdMap.get(s.dataId).id, d = 0;
  if (a != null) {
    let R = t.dataIdMap.get(a.dataId);
    if (R.shape.length !== 1)
      throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${R.shape.length}.`);
    d = R.id;
  }
  let h = i == null ? 0 : t.dataIdMap.get(i.dataId).id, g = Fl[c];
  if (g == null)
    throw new Error(`${c} activation not yet supported for FusedConv2D in the wasm backend.`);
  let y = l ? o.shape[2] : o.shape[1], w = u ? s.shape[1] : s.shape[2], x = o.shape[0], k = t.makeOutput([x, y, w], o.dtype), C = t.dataIdMap.get(k.dataId).id, A = new Uint8Array(new Int32Array(o.shape).buffer), $ = new Uint8Array(new Int32Array(s.shape).buffer);
  return f3(m, A, o.shape.length, f, $, s.shape.length, l, u, g, d, h, p || 0, C), k;
}
var d3 = { kernelName: ri, backendName: "wasm", setupFunc: Tre, kernelFunc: Ere };
function it(r) {
  let e;
  function t(o) {
    e = o.wasm.cwrap(r, null, ["number", "number"]);
  }
  function n(o) {
    let { backend: s, inputs: { x: a } } = o, i = s.dataIdMap.get(a.dataId).id, l = s.makeOutput(a.shape, a.dtype), u = s.dataIdMap.get(l.dataId).id;
    return b.sizeFromShape(l.shape) === 0 || e(i, u), l;
  }
  return { kernelName: r, backendName: "wasm", setupFunc: t, kernelFunc: n };
}
var h3 = it(Vs);
function yt(r, e, t) {
  let n;
  function o(a) {
    n = a.wasm.cwrap(r, null, ["number", "array", "number", "number", "array", "number", "number", "number"]);
  }
  function s(a) {
    let { backend: i, inputs: l } = a, { a: u, b: c } = l, p = i.dataIdMap.get(u.dataId).id, m = i.dataIdMap.get(c.dataId).id, f = t != null ? t : u.dtype, d = S.assertAndGetBroadcastShape(u.shape, c.shape), h = i.makeOutput(d, f);
    if (b.sizeFromShape(d) === 0)
      return h;
    let g = new Uint8Array(new Int32Array(u.shape).buffer), y = new Uint8Array(new Int32Array(c.shape).buffer), w = i.dataIdMap.get(h.dataId).id, x = () => n(p, g, u.shape.length, m, y, c.shape.length, Ot[u.dtype], w);
    if (e && u.dtype === "float32")
      return x(), h;
    let k = S.getBroadcastDims(u.shape, d), C = S.getBroadcastDims(c.shape, d), A = k.every((R, P) => R === P), $ = C.every((R, P) => R === P);
    if (A && $)
      return x(), h;
    throw new Error(`Broadcasting along outer dims is not yet supported for ${u.dtype} ${r}.`);
  }
  return { kernelName: r, backendName: "wasm", setupFunc: o, kernelFunc: s };
}
var Are = true;
var g3 = yt(Wn, Are);
var x3;
function $re(r) {
  x3 = r.wasm.cwrap(So, null, ["array", "number", "number", "number"]);
}
function Dre(r) {
  let { inputs: e, backend: t } = r, n = t.makeOutput(e[0].shape, e[0].dtype);
  if (b.sizeFromShape(n.shape) === 0)
    return n;
  let o = e.map((i) => t.dataIdMap.get(i.dataId).id), s = new Uint8Array(new Int32Array(o).buffer), a = t.dataIdMap.get(n.dataId).id;
  return x3(s, o.length, Ot[n.dtype], a), n;
}
var y3 = { kernelName: So, backendName: "wasm", setupFunc: $re, kernelFunc: Dre };
function Qu(r) {
  let { inputs: { x: e }, backend: t } = r, n = t.makeOutput(e.shape, e.dtype), o = t.typedArrayFromHeap(e);
  return t.typedArrayFromHeap(n).set(o), n;
}
var b3 = { kernelName: to, backendName: "wasm", kernelFunc: Qu };
var w3;
function Rre(r) {
  w3 = r.wasm.cwrap(ys, null, ["number", "array", "number", "number", "number", "array", "number"]);
}
function ki(r) {
  let { inputs: e, backend: t, attrs: n } = r, [o, s] = Ore(e.x.shape, n.perm), a = true;
  for (let d = 0; d < s.length; d++)
    s[d] !== d && (a = false);
  let i = Fre(e.x.shape, n.perm), l = { dataId: e.x.dataId, shape: o, dtype: e.x.dtype };
  if (a) {
    let d = Qu({ inputs: e, backend: t });
    return d.shape = i, d;
  }
  let u = t.makeOutput(i, l.dtype), c = t.dataIdMap.get(l.dataId).id, p = t.dataIdMap.get(u.dataId).id, m = new Uint8Array(new Int32Array(s).buffer), f = new Uint8Array(new Int32Array(l.shape).buffer);
  return w3(c, f, l.shape.length, Ot[l.dtype], p, m, s.length), u;
}
function Fre(r, e) {
  let t = new Array(r.length);
  for (let n = 0; n < t.length; n++)
    t[n] = r[e[n]];
  return t;
}
function Ore(r, e) {
  let t = [], n = [];
  for (let o = 0; o < r.length; ++o)
    r[o] !== 1 && t.push(r[o]), r[e[o]] !== 1 && n.push(e[o]);
  for (let o = 0; o < n.length; ++o) {
    let s = -1;
    for (let a = 0; a < n.length; ++a)
      n[a] >= o && (s === -1 || n[s] > n[a]) && (s = a);
    n[s] = o;
  }
  return [t, n];
}
var k3 = { kernelName: ys, backendName: "wasm", kernelFunc: ki, setupFunc: Rre };
function cn(r, e, t) {
  let n = r.shape, o = r.shape.length, s = b.parseAxisParam(e, n), a = s, i = S.getAxesPermutation(a, o), l = null, u = false;
  if (i != null) {
    let c = new Array(o);
    for (let f = 0; f < c.length; f++)
      c[f] = n[i[f]];
    a = S.getInnerMostAxes(a.length, o), l = ki({ inputs: { x: r }, attrs: { perm: i }, backend: t });
    let p = t.dataIdMap.get(r.dataId).id;
    t.dataIdMap.get(l.dataId).id !== p && (u = true);
  }
  return { transposed: l, originalAxes: s, axes: a, inputWasTransposed: u };
}
var _3;
function Pre(r) {
  _3 = r.wasm.cwrap(Ei, null, ["number, number, number"]);
}
function Mre(r) {
  let { backend: e, inputs: t, attrs: n } = r, { axis: o, keepDims: s } = n, { x: a } = t, l = e.dataIdMap.get(a.dataId).id, u = a, { transposed: c, axes: p, originalAxes: m, inputWasTransposed: f } = cn(a, o, e);
  if (f) {
    let x = e.dataIdMap.get(c.dataId).id;
    u = c, l = x;
  }
  let d = u.shape.length;
  S.assertAxesAreInnerMostDims("all", p, d);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, p), y = b.sizeFromShape(g), w = e.makeOutput(h, a.dtype);
  if (b.sizeFromShape(u.shape) !== 0) {
    let x = e.dataIdMap.get(w.dataId).id;
    _3(l, y, x);
  }
  if (f && e.disposeData(c.dataId), s) {
    let x = S.expandShapeToKeepDim(w.shape, m);
    w.shape = x;
  }
  return w;
}
var v3 = { kernelName: Ei, backendName: "wasm", setupFunc: Pre, kernelFunc: Mre };
var C3;
function Lre(r) {
  C3 = r.wasm.cwrap(Ai, null, ["number, number, number"]);
}
function zre(r) {
  let { backend: e, inputs: t, attrs: n } = r, { axis: o, keepDims: s } = n, { x: a } = t, l = e.dataIdMap.get(a.dataId).id, u = a, { transposed: c, axes: p, originalAxes: m, inputWasTransposed: f } = cn(a, o, e);
  if (f) {
    let x = e.dataIdMap.get(c.dataId).id;
    u = c, l = x;
  }
  let d = u.shape.length;
  S.assertAxesAreInnerMostDims("any", p, d);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, p), y = b.sizeFromShape(g), w = e.makeOutput(h, a.dtype);
  if (b.sizeFromShape(u.shape) !== 0) {
    let x = e.dataIdMap.get(w.dataId).id;
    C3(l, y, x);
  }
  if (f && e.disposeData(c.dataId), s) {
    let x = S.expandShapeToKeepDim(w.shape, m);
    w.shape = x;
  }
  return w;
}
var S3 = { kernelName: Ai, backendName: "wasm", setupFunc: Lre, kernelFunc: zre };
var I3;
function Bre(r) {
  I3 = r.wasm.cwrap(Io, null, ["number", "number", "number", "number", "number"]);
}
function Vre(r) {
  let { backend: e, inputs: t, attrs: n } = r, { axis: o } = n, { x: s } = t, a = e.dataIdMap.get(s.dataId).id, i = a, l = s, { transposed: u, axes: c, inputWasTransposed: p } = cn(s, o, e);
  if (p) {
    let y = e.dataIdMap.get(u.dataId).id;
    y !== a && (l = u, i = y);
  }
  let m = l.shape.slice(0, -1), f = e.makeOutput(m, "int32"), d = e.dataIdMap.get(f.dataId).id, h = b.sizeFromShape(f.shape), g = l.shape[c[0]];
  return I3(i, Ot[l.dtype], h, g, d), p && e.disposeData(u.dataId), f;
}
var N3 = { kernelName: Io, backendName: "wasm", kernelFunc: Vre, setupFunc: Bre };
var T3;
function Wre(r) {
  T3 = r.wasm.cwrap(No, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function jre(r) {
  let { inputs: e, attrs: t, backend: n } = r, o = e.x, s = n.dataIdMap.get(o.dataId).id, { filterSize: a, strides: i, pad: l, dimRoundingMode: u } = t, c = S.computePool2DInfo(o.shape, a, i, 1, l, u), p = c.filterHeight, m = c.filterWidth, f = c.padInfo.top, d = c.padInfo.right, h = c.padInfo.bottom, g = c.padInfo.left, y = c.strideHeight, w = c.strideWidth, x = c.inChannels;
  if (c.dataFormat !== "channelsLast")
    throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);
  if (c.dilationWidth !== 1 || c.dilationHeight !== 1)
    throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${c.dilationHeight}, ${c.dilationWidth}].`);
  let k = n.makeOutput(c.outShape, "float32"), C = n.dataIdMap.get(k.dataId).id;
  return T3(s, o.shape[0], o.shape[1], o.shape[2], p, m, f, d, h, g, y, w, x, C), k;
}
var E3 = { kernelName: No, backendName: "wasm", setupFunc: Wre, kernelFunc: jre };
function sr(r) {
  let { inputs: e, attrs: t } = r, { x: n } = e, { shape: o } = t, s = b.sizeFromShape(n.shape), a = b.inferFromImplicitShape(o, s);
  return b.assert(s === b.sizeFromShape(a), () => `new shape: ${a}, old shape: ${n.shape}. New shape and old shape must have the same number of elements.`), r.backend.incRef(n.dataId), { dataId: n.dataId, shape: a, dtype: n.dtype };
}
var A3 = { kernelName: Xs, backendName: "wasm", kernelFunc: sr };
var $3;
function Gre(r) {
  $3 = r.wasm.cwrap(To, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number"]);
}
function Ure(r) {
  let { inputs: e, backend: t, attrs: n } = r, { a: o, b: s } = e, { transposeA: a, transposeB: i } = n;
  if (o.dtype !== "float32" || s.dtype !== "float32")
    throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");
  let l = o.shape.length, u = s.shape.length, c = a ? o.shape[l - 2] : o.shape[l - 1], p = i ? s.shape[u - 1] : s.shape[u - 2], m = a ? o.shape[l - 1] : o.shape[l - 2], f = i ? s.shape[u - 2] : s.shape[u - 1], d = o.shape.slice(0, -2), h = s.shape.slice(0, -2), g = b.sizeFromShape(d), y = b.sizeFromShape(h), w = g === y || g === 1 || y === 1;
  b.assert(l >= 2 && u >= 2 && w, () => `Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${d}) and (${h}).`);
  let k = (g > y ? o.shape.slice(0, -2) : s.shape.slice(0, -2)).concat([m, f]);
  b.assert(c === p, () => `Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${o.shape} and ${s.shape} and transposeA=${a} and transposeB=${i} must match.`);
  let C = a ? [g, c, m] : [g, m, c], A = i ? [y, f, p] : [y, p, f], $ = sr({ inputs: { x: o }, backend: t, attrs: { shape: C } }), R = sr({ inputs: { x: s }, backend: t, attrs: { shape: A } }), P = t.dataIdMap.get($.dataId).id, M = t.dataIdMap.get(R.dataId).id, V = a ? $.shape[2] : $.shape[1], W = i ? R.shape[1] : R.shape[2], G = Math.max(g, y), U = t.makeOutput([G, V, W], $.dtype), H = t.dataIdMap.get(U.dataId).id, K = new Uint8Array(new Int32Array($.shape).buffer), re = new Uint8Array(new Int32Array(R.shape).buffer);
  return $3(P, K, $.shape.length, M, re, R.shape.length, a, i, H), t.disposeData($.dataId), t.disposeData(R.dataId), U.shape = k, U;
}
var D3 = { kernelName: To, backendName: "wasm", setupFunc: Gre, kernelFunc: Ure };
function Va(r) {
  let { inputs: { x: e }, attrs: { begin: t, size: n }, backend: o } = r, [s, a] = ar.parseSliceParams(e, t, n), i = ar.isSliceContinous(e.shape, s, a), l = o.readSync(e.dataId), u = o.makeOutput(a, e.dtype), c = b.computeStrides(e.shape), p = o.dataIdMap.get(u.dataId);
  if (i) {
    let d = ar.computeFlatOffset(s, c);
    return e.dtype === "string" ? p.stringBytes = l.slice(d, d + b.sizeFromShape(a)) : o.typedArrayFromHeap(u).set(l.subarray(d, d + b.sizeFromShape(a))), u;
  }
  if (e.dtype === "string") {
    let d = Bu(l, s, a, e.shape, e.dtype);
    return p.stringBytes = d, u;
  }
  let m = o.typedArrayFromHeap(u), f = e.shape.length;
  if (f === 2)
    Hre(l, c[0], m, s, a);
  else if (f === 3)
    qre(l, c[0], c[1], m, s, a);
  else if (f === 4)
    Kre(l, c[0], c[1], c[2], m, s, a);
  else {
    let d = Bu(l, s, a, e.shape, e.dtype);
    m.set(d);
  }
  return u;
}
function Hre(r, e, t, n, o) {
  let s = 0, a = n[0], i = n[1], l = a + o[0];
  for (let u = a; u < l; u++) {
    let c = u * e + i;
    t.set(r.subarray(c, c + o[1]), s), s += o[1];
  }
}
function qre(r, e, t, n, o, s) {
  let a = 0, i = o[0], l = o[1], u = o[2], c = i + s[0], p = l + s[1];
  for (let m = i; m < c; m++)
    for (let f = l; f < p; f++) {
      let d = m * e + f * t + u;
      n.set(r.subarray(d, d + s[2]), a), a += s[2];
    }
}
function Kre(r, e, t, n, o, s, a) {
  let i = 0, l = s[0], u = s[1], c = s[2], p = l + a[0], m = u + a[1], f = c + a[2], d = s[3];
  for (let h = l; h < p; h++)
    for (let g = u; g < m; g++)
      for (let y = c; y < f; y++) {
        let w = h * e + g * t + y * n + d;
        o.set(r.subarray(w, w + a[3]), i), i += a[3];
      }
}
var R3 = { kernelName: Zs, backendName: "wasm", kernelFunc: Va };
function Xre(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { blockShape: s, crops: a } = n, i = s.reduce((y, w) => y * w), l = S.getReshaped(o.shape, s, i), u = S.getPermuted(l.length, s.length), c = S.getReshapedPermuted(o.shape, s, i), p = S.getSliceBeginCoords(a, s.length), m = S.getSliceSize(c, a, s.length), f = sr({ inputs: { x: o }, backend: t, attrs: { shape: l } }), d = ki({ inputs: { x: f }, backend: t, attrs: { perm: u } }), h = sr({ inputs: { x: d }, backend: t, attrs: { shape: c } }), g = Va({ inputs: { x: h }, backend: t, attrs: { begin: p, size: m } });
  return t.disposeData(f.dataId), t.disposeData(d.dataId), t.disposeData(f.dataId), g;
}
var F3 = { kernelName: Ws, backendName: "wasm", kernelFunc: Xre };
function ec(r) {
  let { inputs: { x: e }, attrs: { dtype: t }, backend: n } = r, o = n.makeOutput(e.shape, t), s = n.typedArrayFromHeap(e);
  return n.typedArrayFromHeap(o).set(s), o;
}
var O3 = { kernelName: Qn, backendName: "wasm", kernelFunc: ec };
var P3 = it(Eo);
var M3;
function Yre(r) {
  M3 = r.wasm.cwrap(eo, null, ["number", "number", "number", "number"]);
}
function Zre(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { clipValueMin: s, clipValueMax: a } = n, i = t.dataIdMap.get(o.dataId).id, l = t.makeOutput(o.shape, o.dtype), u = t.dataIdMap.get(l.dataId).id;
  return M3(i, s, a, u), l;
}
var L3 = { kernelName: eo, backendName: "wasm", setupFunc: Yre, kernelFunc: Zre };
function pI(r) {
  let { inputs: e, backend: t } = r, n = b.parseAxisParam(r.attrs.axis, e[0].shape)[0], o = S.computeOutShape(e.map((f) => f.shape), n), s = e.filter((f) => b.sizeFromShape(f.shape) > 0);
  if (s.length === 1)
    return Qu({ inputs: { x: s[0] }, backend: t });
  let a = t.makeOutput(o, e[0].dtype);
  if (b.sizeFromShape(o) === 0)
    return a;
  let i = s.map((f) => f.shape);
  if (S.assertParamsConsistent(i, n), s[0].dtype === "string") {
    let f = s.map((x) => {
      let k = b.sizeFromShape(x.shape.slice(n));
      return sr({ inputs: { x }, backend: t, attrs: { shape: [-1, k] } });
    }), d = f.map((x) => ({ vals: t.readSync(x.dataId), shape: x.shape }));
    o = S.computeOutShape(f.map((x) => x.shape), 1);
    let h = f[0].shape[0] === 1, g = Mu(d, o, e[0].dtype, h), y = S.computeOutShape(s.map((x) => x.shape), n);
    a.shape = y;
    let w = t.dataIdMap.get(a.dataId);
    return w.stringBytes = S.fromStringArrayToUint8(g), f.forEach((x) => t.disposeData(x.dataId)), a;
  }
  let l = b.sizeFromShape(s[0].shape.slice(0, n)), u = 0, c = s.map((f) => {
    let d = b.sizeFromShape(f.shape.slice(n));
    return u += d, d;
  }), p = s.map((f) => t.typedArrayFromHeap(f)), m = t.typedArrayFromHeap(a);
  for (let f = 0; f < l; f++) {
    let d = f * u;
    for (let h = 0; h < p.length; h++) {
      let g = c[h], y = f * g, w = p[h].subarray(y, y + g);
      m.set(w, d), d += g;
    }
  }
  return a;
}
var z3 = { kernelName: js, backendName: "wasm", kernelFunc: pI };
var B3;
function Jre(r) {
  B3 = r.wasm.cwrap(Ao, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Qre(r) {
  let { inputs: e, attrs: t, backend: n } = r, { x: o, filter: s } = e, a = n.dataIdMap.get(o.dataId).id, i = n.dataIdMap.get(s.dataId).id, { strides: l, dilations: u, pad: c, dimRoundingMode: p, dataFormat: m } = t, f = S.convertConv2DDataFormat(m), d = S.computeConv2DInfo(o.shape, s.shape, l, u, c, p, false, f), h = d.filterHeight, g = d.filterWidth, y = d.padInfo.top, w = d.padInfo.right, x = d.padInfo.bottom, k = d.padInfo.left, C = d.dilationHeight, A = d.dilationWidth, $ = d.strideHeight, R = d.strideWidth, P = d.inChannels, M = d.outChannels, V = d.padInfo.type === "SAME" ? 1 : 0;
  if (d.dataFormat !== "channelsLast")
    throw new Error(`wasm backend Conv2D does not support dataFormat:'${d.dataFormat}'. Please use 'channelsLast'.`);
  let W = n.makeOutput(d.outShape, "float32"), G = n.dataIdMap.get(W.dataId).id;
  return B3(a, o.shape[0], o.shape[1], o.shape[2], i, h, g, y, w, x, k, V, C, A, $, R, P, M, G), W;
}
var V3 = { kernelName: Ao, backendName: "wasm", setupFunc: Jre, kernelFunc: Qre };
var W3;
function ene(r) {
  W3 = r.wasm.cwrap($o, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function tne(r) {
  let { backend: e, inputs: t, attrs: n } = r, { dy: o, filter: s } = t, { strides: a, pad: i, dataFormat: l, dimRoundingMode: u, inputShape: c } = n, p = 1, m = S.convertConv2DDataFormat(l), f = S.computeConv2DInfo(c, s.shape, a, p, i, u, false, m), { batchSize: d, filterHeight: h, filterWidth: g, inChannels: y, inHeight: w, inWidth: x, outChannels: k, outHeight: C, outWidth: A, strideHeight: $, strideWidth: R } = f, P = h - 1 - f.padInfo.top, M = g - 1 - f.padInfo.left, V = f.dataFormat === "channelsLast", W = b.computeStrides(f.inShape), G = b.computeStrides(o.shape), [U, H, K] = b.computeStrides(s.shape), re = W[0], X = V ? W[1] : W[2], ne = V ? W[2] : 1, Q = V ? 1 : W[1], se = G[0], pe = V ? G[1] : G[2], ie = V ? G[2] : 1, fe = V ? 1 : G[1], de = e.makeOutput(f.inShape, "float32"), ge = e.dataIdMap.get(de.dataId).id, we = e.dataIdMap.get(o.dataId).id, $e = e.dataIdMap.get(s.dataId).id;
  return W3(we, $e, d, h, g, w, x, y, C, A, k, $, R, P, M, U, H, K, re, X, ne, Q, se, pe, ie, fe, ge), de;
}
var j3 = { kernelName: $o, backendName: "wasm", setupFunc: ene, kernelFunc: tne };
var G3 = it(Do);
var U3 = it(Ro);
var mI;
(function(r) {
  r[r.bilinear = 0] = "bilinear", r[r.nearest = 1] = "nearest";
})(mI || (mI = {}));
var H3;
function rne(r) {
  H3 = r.wasm.cwrap(Pi, null, ["number", "number", "number", "number", "array", "number", "number", "number", "number", "number"]);
}
function nne(r) {
  let { backend: e, inputs: t, attrs: n } = r, { method: o, extrapolationValue: s, cropSize: a } = n, { image: i, boxes: l, boxInd: u } = t, c = l.shape[0], [p, m] = a, f = [c, p, m, i.shape[3]], d = e.dataIdMap.get(i.dataId), h;
  i.dtype !== "float32" && (h = ec({ backend: e, inputs: { x: i }, attrs: { dtype: "float32" } }), d = e.dataIdMap.get(h.dataId));
  let g = d.id, y = e.dataIdMap.get(l.dataId).id, w = e.dataIdMap.get(u.dataId).id, x = e.makeOutput(f, "float32"), k = e.dataIdMap.get(x.dataId).id, C = new Uint8Array(new Int32Array(i.shape).buffer);
  return H3(g, y, w, c, C, p, m, mI[o], s, k), h != null && e.disposeData(h.dataId), x;
}
var q3 = { kernelName: Pi, backendName: "wasm", setupFunc: rne, kernelFunc: nne };
var K3;
function one(r) {
  K3 = r.wasm.cwrap(Fo, null, ["number", "number", "number", "number", "number", "number"]);
}
function sne(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { axis: s, exclusive: a, reverse: i } = n, l = o.shape.length;
  b.assert(o.dtype === "float32" || o.dtype === "int32", () => `cumsum does not support ${o.dtype} tensors in the WASM backend`);
  let u = S.getAxesPermutation([s], l), c = o;
  u !== null && (c = ki({ inputs: { x: o }, attrs: { perm: u }, backend: t }));
  let p = S.getInnerMostAxes(1, l)[0];
  S.assertAxesAreInnerMostDims("cumsum", [p], l);
  let m = t.makeOutput(c.shape, c.dtype), f = c.shape[p], d = t.dataIdMap.get(c.dataId).id, h = t.dataIdMap.get(m.dataId).id;
  K3(d, a ? 1 : 0, i ? 1 : 0, f, h, Ot[o.dtype]);
  let g = m;
  if (u !== null) {
    let y = S.getUndoAxesPermutation(u);
    g = ki({ inputs: { x: m }, attrs: { perm: y }, backend: t }), t.disposeData(c.dataId), t.disposeData(m.dataId);
  }
  return g;
}
var X3 = { kernelName: Fo, backendName: "wasm", setupFunc: one, kernelFunc: sne };
var Y3;
function ine(r) {
  Y3 = r.wasm.cwrap(Mi, null, ["number", "number", "number", "array", "number", "array", "array", "number", "number"]);
}
function ane(r) {
  let { backend: e, inputs: t, attrs: n } = r, { x: o } = t, { blockSize: s, dataFormat: a } = n;
  b.assert(s > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${s}`);
  let i = o.shape[0], l = a === "NHWC" ? o.shape[1] : o.shape[2], u = a === "NHWC" ? o.shape[2] : o.shape[3], c = a === "NHWC" ? o.shape[3] : o.shape[1], p = l * s, m = u * s, f = c / (s * s), d = a === "NHWC" ? [i, p, m, f] : [i, f, p, m], h = e.makeOutput(d, "float32"), y = e.dataIdMap.get(o.dataId).id, w = new Uint8Array(new Int32Array(b.computeStrides(o.shape)).buffer), x = new Uint8Array(new Int32Array(d).buffer), k = new Uint8Array(new Int32Array(b.computeStrides(d)).buffer), C = e.dataIdMap.get(h.dataId).id;
  return Y3(y, s, a === "NHWC" ? 1 : 0, w, o.shape.length - 1, x, k, d.length, C), h;
}
var Z3 = { kernelName: Mi, backendName: "wasm", setupFunc: ine, kernelFunc: ane };
var J3;
function lne(r) {
  J3 = r.wasm.cwrap(Oo, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function une(r) {
  let { inputs: e, attrs: t, backend: n } = r, { x: o, filter: s } = e, a = n.dataIdMap.get(o.dataId).id, i = n.dataIdMap.get(s.dataId).id, { strides: l, dilations: u, pad: c, dimRoundingMode: p } = t, m = u == null ? [1, 1] : u, f = S.computeConv2DInfo(o.shape, s.shape, l, m, c, p, true), d = f.filterHeight, h = f.filterWidth, g = f.padInfo.top, y = f.padInfo.right, w = f.padInfo.bottom, x = f.padInfo.left, k = f.dilationHeight, C = f.dilationWidth, A = f.strideHeight, $ = f.strideWidth, R = f.inChannels, P = f.outChannels, M = f.padInfo.type === "SAME" ? 1 : 0;
  if (f.dataFormat !== "channelsLast")
    throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${f.dataFormat}'. Please use 'channelsLast'.`);
  let V = n.makeOutput(f.outShape, "float32"), W = n.dataIdMap.get(V.dataId).id;
  return J3(a, o.shape[0], o.shape[1], o.shape[2], i, d, h, g, y, w, x, M, k, C, A, $, R, P, W), V;
}
var Q3 = { kernelName: Oo, backendName: "wasm", setupFunc: lne, kernelFunc: une };
var eB = it(Mo);
var cne = false;
var tB = yt(zi, cne, "bool");
var rB = it(Lo);
function Ry(r) {
  let { inputs: e, attrs: t, backend: n } = r, { input: o } = e, { dim: s } = t, a = o.shape.length, i = o.shape.slice(), l = s;
  return s < 0 && (b.assert(-(a + 1) <= s, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), l = a + s + 1), i.splice(l, 0, 1), sr({ inputs: { x: o }, backend: n, attrs: { shape: i } });
}
var nB = { kernelName: Gs, backendName: "wasm", kernelFunc: Ry };
function fI(r) {
  let { attrs: { shape: e, value: t, dtype: n }, backend: o } = r, s = o.makeOutput(e, n);
  return o.typedArrayFromHeap(s).fill(t), s;
}
var oB = { kernelName: el, backendName: "wasm", kernelFunc: fI };
var sB;
function pne(r) {
  sB = r.wasm.cwrap(Vi, null, ["number", "number", "number", "number", "number", "number"]);
}
function mne(r) {
  let { inputs: e, backend: t } = r, { image: n } = e, o = t.makeOutput(n.shape, n.dtype), s = t.dataIdMap.get(n.dataId).id, a = t.dataIdMap.get(o.dataId).id, [i, l, u, c] = n.shape;
  return sB(s, i, l, u, c, a), o;
}
var iB = { kernelName: Vi, backendName: "wasm", kernelFunc: mne, setupFunc: pne };
var aB = it(zo);
var fne = false;
var lB = yt(Bo, fne);
var uB;
function dne(r) {
  uB = r.wasm.cwrap(Vo, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function hne(r) {
  let { backend: e, inputs: t, attrs: n } = r, { varianceEpsilon: o } = n, { x: s, mean: a, variance: i, offset: l, scale: u } = t, c = e.dataIdMap.get(s.dataId).id, p = e.dataIdMap.get(a.dataId).id, m = e.dataIdMap.get(i.dataId).id, f = l != null ? e.dataIdMap.get(l.dataId).id : 0, d = u != null ? e.dataIdMap.get(u.dataId).id : 0, h = e.makeOutput(s.shape, s.dtype);
  if (b.sizeFromShape(s.shape) === 0)
    return h;
  let g = e.dataIdMap.get(h.dataId).id;
  return uB(c, p, m, f, d, o, g), h;
}
var cB = { kernelName: Vo, backendName: "wasm", setupFunc: dne, kernelFunc: hne };
var pB;
function gne(r) {
  pB = r.wasm.cwrap(ni, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function xne(r) {
  let { inputs: e, attrs: t, backend: n } = r, { x: o, filter: s, bias: a, preluActivationWeights: i } = e, { strides: l, pad: u, dilations: c, dataFormat: p, dimRoundingMode: m, activation: f, leakyreluAlpha: d } = t, h = S.computeConv2DInfo(o.shape, s.shape, l, c, u, m), g = Fl[f];
  if (g == null)
    throw new Error(`${f} activation not yet supported for FusedConv2D in the wasm backend.`);
  let y = n.dataIdMap.get(o.dataId).id, w = n.dataIdMap.get(s.dataId).id, x = h.outChannels, k = 0;
  if (a != null) {
    let ie = n.dataIdMap.get(a.dataId);
    if (ie.shape.length !== 1)
      throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${ie.shape.length}.`);
    if (ie.shape[0] !== x)
      throw new Error(`FusedConv2D bias shape (${ie.shape}) does not match the number of output channels (${x})`);
    k = ie.id;
  }
  let C = h.filterHeight, A = h.filterWidth, $ = h.padInfo.top, R = h.padInfo.right, P = h.padInfo.bottom, M = h.padInfo.left, V = h.dilationHeight, W = h.dilationWidth, G = h.strideHeight, U = h.strideWidth, H = h.inChannels, K = h.padInfo.type === "SAME" ? 1 : 0, re = h.batchSize, X = h.inHeight, ne = h.inWidth;
  if (p !== "NHWC")
    throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${p}'. Please use 'NHWC'.`);
  let Q = n.makeOutput(h.outShape, "float32"), se = n.dataIdMap.get(Q.dataId).id, pe = i == null ? 0 : n.dataIdMap.get(i.dataId).id;
  return pB(y, re, X, ne, w, C, A, k, $, R, P, M, K, V, W, G, U, H, x, g, pe, d || 0, se), Q;
}
var mB = { kernelName: ni, backendName: "wasm", setupFunc: gne, kernelFunc: xne };
var fB;
function yne(r) {
  fB = r.wasm.cwrap(oi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function bne(r) {
  let { inputs: e, attrs: t, backend: n } = r, { x: o, filter: s, bias: a, preluActivationWeights: i } = e, { strides: l, pad: u, dilations: c, dataFormat: p, dimRoundingMode: m, activation: f, leakyreluAlpha: d } = t, h = S.computeConv2DInfo(o.shape, s.shape, l, c, u, m, true), g = Fl[f];
  if (g == null)
    throw new Error(`${f} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);
  let y = n.dataIdMap.get(o.dataId).id, w = n.dataIdMap.get(s.dataId).id, x = h.outChannels, k = 0;
  if (a != null) {
    let ie = n.dataIdMap.get(a.dataId);
    if (ie.shape.length !== 1)
      throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${ie.shape.length}.`);
    if (ie.shape[0] !== x)
      throw new Error(`FusedDepthwiseConv2D bias shape (${ie.shape}) does not match the number of output channels (${x})`);
    k = ie.id;
  }
  let C = h.filterHeight, A = h.filterWidth, $ = h.padInfo.top, R = h.padInfo.right, P = h.padInfo.bottom, M = h.padInfo.left, V = h.dilationHeight, W = h.dilationWidth, G = h.strideHeight, U = h.strideWidth, H = h.inChannels, K = h.padInfo.type === "SAME" ? 1 : 0, re = h.batchSize, X = h.inHeight, ne = h.inWidth;
  if (p !== "NHWC")
    throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${p}'. Please use 'NHWC'.`);
  let Q = n.makeOutput(h.outShape, "float32"), se = n.dataIdMap.get(Q.dataId).id, pe = i == null ? 0 : n.dataIdMap.get(i.dataId).id;
  return fB(y, re, X, ne, w, C, A, k, $, R, P, M, K, V, W, G, U, H, x, g, pe, d || 0, se), Q;
}
var dB = { kernelName: oi, backendName: "wasm", setupFunc: yne, kernelFunc: bne };
var hB;
function wne(r) {
  hB = r.wasm.cwrap(Wi, null, ["number", "number", "number", "number", "number", "number", "array", "number"]);
}
function kne(r) {
  let { backend: e, inputs: t } = r, { params: n, indices: o } = t, [s, a, i, l] = pg.prepareAndValidate(n, o), u = e.makeOutput(s, n.dtype);
  if (a === 0)
    return u;
  let c = o.shape, p = c[c.length - 1], f = e.dataIdMap.get(n.dataId).id, h = e.dataIdMap.get(o.dataId).id, g = new Uint8Array(new Int32Array(l).buffer), y = e.dataIdMap.get(u.dataId).id;
  return hB(f, Ot[n.dtype], h, a, p, i, g, y), u;
}
var gB = { kernelName: Wi, backendName: "wasm", setupFunc: wne, kernelFunc: kne };
var xB;
function _ne(r) {
  xB = r.wasm.cwrap("Gather", null, ["number", "number", "array", "number", "number", "number", "array", "number"]);
}
function vne(r) {
  let { backend: e, inputs: t, attrs: n } = r, { x: o, indices: s } = t, { axis: a, batchDims: i } = n, l = b.parseAxisParam(a, o.shape)[0], u = S.segment_util.collectGatherOpShapeInfo(o, s, l, i), c = sr({ inputs: { x: o }, attrs: { shape: [u.batchSize, u.outerSize, u.dimSize, u.sliceSize] }, backend: e }), p = b.sizeFromShape(s.shape), m = sr({ inputs: { x: s }, attrs: { shape: [u.batchSize, p / u.batchSize] }, backend: e }), f = [u.batchSize, u.outerSize, p / u.batchSize, u.sliceSize], d = e.makeOutput(f, o.dtype);
  if (b.sizeFromShape(o.shape) === 0)
    return d;
  let h = c.shape.length - 1, y = e.dataIdMap.get(c.dataId).id, x = e.dataIdMap.get(m.dataId).id, k = e.dataIdMap.get(d.dataId).id, C = new Uint8Array(new Int32Array(b.computeStrides(c.shape)).buffer), A = new Uint8Array(new Int32Array(b.computeStrides(f)).buffer);
  return xB(y, Ot[o.dtype], C, h, x, u.batchSize, A, k), e.disposeData(c.dataId), e.disposeData(m.dataId), d.shape = u.outputShape, d;
}
var yB = { kernelName: Us, backendName: "wasm", setupFunc: _ne, kernelFunc: vne };
var Cne = false;
var bB = yt(ji, Cne, "bool");
var Sne = false;
var wB = yt(Wo, Sne, "bool");
var kB;
function Ine(r) {
  kB = r.wasm.cwrap(jo, null, ["number", "number", "number"]);
}
function Nne(r) {
  let { inputs: { x: e }, attrs: { alpha: t }, backend: n } = r, o = n.dataIdMap.get(e.dataId).id, s = n.makeOutput(e.shape, e.dtype);
  if (b.sizeFromShape(e.shape) !== 0) {
    let a = n.dataIdMap.get(s.dataId).id;
    kB(o, t, a);
  }
  return s;
}
var _B = { kernelName: jo, backendName: "wasm", setupFunc: Ine, kernelFunc: Nne };
var Tne = false;
var vB = yt(qi, Tne, "bool");
var Ene = false;
var CB = yt(Ki, Ene, "bool");
var SB = it(Go);
var Ane = false;
var IB = yt(Yi, Ane, "bool");
var NB;
function $ne(r) {
  NB = r.wasm.cwrap(Uo, null, ["number, number, number"]);
}
function Dne(r) {
  let { backend: e, inputs: t, attrs: n } = r, { reductionIndices: o, keepDims: s } = n, { x: a } = t, l = e.dataIdMap.get(a.dataId).id, u = a, { transposed: c, axes: p, originalAxes: m, inputWasTransposed: f } = cn(a, o, e);
  if (f) {
    let x = e.dataIdMap.get(c.dataId).id;
    u = c, l = x;
  }
  let d = u.shape.length;
  S.assertAxesAreInnerMostDims("max", p, d);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, p), y = b.sizeFromShape(g), w = e.makeOutput(h, a.dtype);
  if (b.sizeFromShape(u.shape) !== 0) {
    let x = e.dataIdMap.get(w.dataId).id;
    NB(l, y, x);
  }
  if (f && e.disposeData(c.dataId), s) {
    let x = S.expandShapeToKeepDim(w.shape, m);
    w.shape = x;
  }
  return w;
}
var TB = { kernelName: Uo, backendName: "wasm", setupFunc: $ne, kernelFunc: Dne };
var Rne = false;
var EB = yt(Ho, Rne);
var AB;
function Fne(r) {
  AB = r.wasm.cwrap(qo, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function One(r) {
  let { inputs: e, attrs: t, backend: n } = r, o = e.x, s = n.dataIdMap.get(o.dataId).id, { filterSize: a, strides: i, pad: l, dimRoundingMode: u } = t, c = S.computePool2DInfo(o.shape, a, i, 1, l, u), p = c.filterHeight, m = c.filterWidth, f = c.padInfo.top, d = c.padInfo.right, h = c.padInfo.bottom, g = c.padInfo.left, y = c.dilationHeight, w = c.dilationWidth, x = c.strideHeight, k = c.strideWidth, C = c.inChannels, A = c.outChannels;
  if (c.dataFormat !== "channelsLast")
    throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);
  let $ = n.makeOutput(c.outShape, "float32"), R = n.dataIdMap.get($.dataId).id;
  return AB(s, o.shape[0], o.shape[1], o.shape[2], p, m, f, d, h, g, y, w, x, k, C, A, R), $;
}
var $B = { kernelName: qo, backendName: "wasm", setupFunc: Fne, kernelFunc: One };
var DB;
function Pne(r) {
  DB = r.wasm.cwrap(Ko, null, ["number, number, number"]);
}
function Mne(r) {
  let { backend: e, inputs: t, attrs: n } = r, { axis: o, keepDims: s } = n, { x: a } = t, i = e.dataIdMap.get(a.dataId).id, l = i, u = a, { transposed: c, axes: p, originalAxes: m, inputWasTransposed: f } = cn(a, o, e), d = p;
  if (f) {
    let k = e.dataIdMap.get(c.dataId).id;
    k !== i && (u = c, l = k, d = S.getInnerMostAxes(d.length, u.shape.length));
  }
  S.assertAxesAreInnerMostDims("mean", d, u.shape.length);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, d), y = b.sizeFromShape(g), w = u;
  u.dtype !== "float32" && (w = ec({ backend: e, inputs: { x: u }, attrs: { dtype: "float32" } }), l = e.dataIdMap.get(w.dataId).id);
  let x = e.makeOutput(h, "float32");
  if (b.sizeFromShape(u.shape) !== 0) {
    let k = e.dataIdMap.get(x.dataId).id;
    DB(l, y, k);
  }
  if (f && e.disposeData(c.dataId), s) {
    let k = S.expandShapeToKeepDim(x.shape, m);
    x.shape = k;
  }
  return u.dtype !== "float32" && e.disposeData(w.dataId), x;
}
var RB = { kernelName: Ko, backendName: "wasm", setupFunc: Pne, kernelFunc: Mne };
var FB;
function Lne(r) {
  FB = r.wasm.cwrap(Xo, null, ["number, number, number"]);
}
function zne(r) {
  let { backend: e, inputs: t, attrs: n } = r, { axis: o, keepDims: s } = n, { x: a } = t, i = e.dataIdMap.get(a.dataId).id, l = i, u = a, { transposed: c, axes: p, originalAxes: m, inputWasTransposed: f } = cn(a, o, e);
  if (f) {
    let x = e.dataIdMap.get(c.dataId).id;
    x !== i && (u = c, l = x);
  }
  let d = u.shape.length;
  S.assertAxesAreInnerMostDims("min", p, d);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, p), y = b.sizeFromShape(g), w = e.makeOutput(h, u.dtype);
  if (b.sizeFromShape(u.shape) !== 0) {
    let x = e.dataIdMap.get(w.dataId).id;
    FB(l, y, x);
  }
  if (f && e.disposeData(c.dataId), s) {
    let x = S.expandShapeToKeepDim(w.shape, m);
    w.shape = x;
  }
  return w;
}
var OB = { kernelName: Xo, backendName: "wasm", setupFunc: Lne, kernelFunc: zne };
var Bne = false;
var PB = yt(Yo, Bne);
var dI;
(function(r) {
  r[r.reflect = 0] = "reflect", r[r.symmetric = 1] = "symmetric";
})(dI || (dI = {}));
var MB;
function Vne(r) {
  MB = r.wasm.cwrap(Zo, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function Wne(r) {
  let { inputs: { x: e }, backend: t, attrs: { paddings: n, mode: o } } = r, s = n.map((d, h) => d[0] + e.shape[h] + d[1]), a = t.dataIdMap.get(e.dataId).id, i = t.makeOutput(s, e.dtype), l = t.dataIdMap.get(i.dataId).id, u = new Uint8Array(new Int32Array(e.shape).buffer), c = n.map((d) => d[0]), p = n.map((d) => d[1]), m = new Uint8Array(new Int32Array(c).buffer), f = new Uint8Array(new Int32Array(p).buffer);
  return MB(a, u, e.shape.length, Ot[e.dtype], m, f, dI[o], l), i;
}
var LB = { kernelName: Zo, backendName: "wasm", kernelFunc: Wne, setupFunc: Vne };
var jne = true;
var zB = yt(Jo, jne);
var BB = it(Hs);
function dm(r, e) {
  let t = new Int32Array(r.wasm.HEAPU8.buffer, e, 4), n = t[0], o = t[1], s = t[2], a = t[3];
  return r.wasm._free(e), { pSelectedIndices: n, selectedSize: o, pSelectedScores: s, pValidOutputs: a };
}
var VB;
function Gne(r) {
  VB = r.wasm.cwrap(Qi, "number", ["number", "number", "number", "number", "number"]);
}
function Une(r) {
  let { backend: e, inputs: t, attrs: n } = r, { iouThreshold: o, maxOutputSize: s, scoreThreshold: a } = n, { boxes: i, scores: l } = t, u = e.dataIdMap.get(i.dataId).id, c = e.dataIdMap.get(l.dataId).id, p = VB(u, c, s, o, a), { pSelectedIndices: m, selectedSize: f, pSelectedScores: d, pValidOutputs: h } = dm(e, p);
  return e.wasm._free(d), e.wasm._free(h), e.makeOutput([f], "int32", m);
}
var WB = { kernelName: Qi, backendName: "wasm", setupFunc: Gne, kernelFunc: Une };
var jB;
function Hne(r) {
  jB = r.wasm.cwrap(ea, "number", ["number", "number", "number", "number", "number", "bool"]);
}
function qne(r) {
  let { backend: e, inputs: t, attrs: n } = r, { iouThreshold: o, maxOutputSize: s, scoreThreshold: a, padToMaxOutputSize: i } = n, { boxes: l, scores: u } = t, c = e.dataIdMap.get(l.dataId).id, p = e.dataIdMap.get(u.dataId).id, m = jB(c, p, s, o, a, i), { pSelectedIndices: f, selectedSize: d, pSelectedScores: h, pValidOutputs: g } = dm(e, m);
  e.wasm._free(h);
  let y = e.makeOutput([d], "int32", f), w = e.makeOutput([], "int32", g);
  return [y, w];
}
var GB = { kernelName: ea, backendName: "wasm", setupFunc: Hne, kernelFunc: qne };
var UB;
function Kne(r) {
  UB = r.wasm.cwrap(ta, "number", ["number", "number", "number", "number", "number", "number"]);
}
function Xne(r) {
  let { backend: e, inputs: t, attrs: n } = r, { iouThreshold: o, maxOutputSize: s, scoreThreshold: a, softNmsSigma: i } = n, { boxes: l, scores: u } = t, c = e.dataIdMap.get(l.dataId).id, p = e.dataIdMap.get(u.dataId).id, m = UB(c, p, s, o, a, i), { pSelectedIndices: f, selectedSize: d, pSelectedScores: h, pValidOutputs: g } = dm(e, m);
  e.wasm._free(g);
  let y = e.makeOutput([d], "int32", f), w = e.makeOutput([d], "float32", h);
  return [y, w];
}
var HB = { kernelName: ta, backendName: "wasm", setupFunc: Kne, kernelFunc: Xne };
var Yne = false;
var qB = yt(Ji, Yne, "bool");
var KB;
function Zne(r) {
  KB = r.wasm.cwrap(Qo, null, ["number", "number", "number", "number", "number"]);
}
function Jne(r) {
  let { inputs: e, backend: t, attrs: n } = r, { indices: o } = e, { depth: s, onValue: a, offValue: i } = n, l = t.makeOutput([...o.shape, s], "int32"), u = t.dataIdMap.get(l.dataId).id, p = t.dataIdMap.get(o.dataId).id;
  return KB(p, s, a, i, u), l;
}
var XB = { kernelName: Qo, backendName: "wasm", setupFunc: Zne, kernelFunc: Jne };
function Qne(r) {
  let { inputs: { x: e }, backend: t } = r, n = t.makeOutput(e.shape, e.dtype);
  return t.typedArrayFromHeap(n).fill(1), n;
}
var YB = { kernelName: qs, backendName: "wasm", kernelFunc: Qne };
function eoe(r) {
  let { inputs: e, backend: t, attrs: n } = r, { axis: o } = n;
  if (e.length === 1)
    return Ry({ inputs: { input: e[0] }, backend: t, attrs: { dim: o } });
  let s = e[0].shape, a = e[0].dtype;
  e.forEach((c) => {
    b.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), b.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], l = e.map((c) => {
    let p = Ry({ inputs: { input: c }, backend: t, attrs: { dim: o } });
    return i.push(p), p;
  }), u = pI({ inputs: l, backend: t, attrs: { axis: o } });
  return i.forEach((c) => t.disposeData(c.dataId)), u;
}
var ZB = { kernelName: Ks, backendName: "wasm", kernelFunc: eoe };
var JB;
function toe(r) {
  JB = r.wasm.cwrap(es, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function roe(r) {
  let { inputs: { x: e }, backend: t, attrs: { paddings: n, constantValue: o } } = r, s = n.map((h, g) => h[0] + e.shape[g] + h[1]);
  if (b.sizeFromShape(e.shape) === 0)
    return fI({ backend: t, attrs: { shape: s, value: o, dtype: e.dtype } });
  let a = t.dataIdMap.get(e.dataId).id, i = t.makeOutput(s, e.dtype), u = t.dataIdMap.get(i.dataId).id, c = new Uint8Array(new Int32Array(e.shape).buffer), p = n.map((h) => h[0]), m = n.map((h) => h[1]), f = new Uint8Array(new Int32Array(p).buffer), d = new Uint8Array(new Int32Array(m).buffer);
  return JB(a, c, e.shape.length, Ot[e.dtype], f, d, o, u), i;
}
var Fy = { kernelName: es, backendName: "wasm", kernelFunc: roe, setupFunc: toe };
var noe = false;
var QB = yt(ts, noe);
var eV;
function ooe(r) {
  eV = r.wasm.cwrap(rs, null, ["number", "number", "number"]);
}
function soe(r) {
  let { inputs: e, backend: t } = r, { x: n, alpha: o } = e, s = t.dataIdMap.get(n.dataId).id, a = t.dataIdMap.get(o.dataId).id, i = t.makeOutput(n.shape, "float32"), l = t.dataIdMap.get(i.dataId).id;
  return eV(s, a, l), i;
}
var tV = { kernelName: rs, backendName: "wasm", setupFunc: ooe, kernelFunc: soe };
var rV;
function ioe(r) {
  rV = r.wasm.cwrap(ra, null, ["number", "number", "number", "number"]);
}
function aoe(r) {
  let { backend: e, inputs: t, attrs: n } = r, { axis: o, keepDims: s } = n, { x: a } = t, i = e.dataIdMap.get(a.dataId).id, l = i, u = a, { transposed: c, axes: p, originalAxes: m, inputWasTransposed: f } = cn(a, o, e), d = p;
  if (f) {
    let x = e.dataIdMap.get(c.dataId).id;
    x !== i && (u = c, l = x, d = S.getInnerMostAxes(d.length, u.shape.length));
  }
  S.assertAxesAreInnerMostDims("prod", d, u.shape.length);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, d), y = b.sizeFromShape(g), w = e.makeOutput(h, u.dtype);
  if (b.sizeFromShape(u.shape) !== 0) {
    let x = e.dataIdMap.get(w.dataId).id;
    rV(l, y, Ot[w.dtype], x);
  }
  if (f && e.disposeData(c.dataId), s) {
    let x = S.expandShapeToKeepDim(w.shape, m);
    w.shape = x;
  }
  return w;
}
var nV = { kernelName: ra, backendName: "wasm", setupFunc: ioe, kernelFunc: aoe };
var loe = (r) => {
  let { backend: e, attrs: t } = r, { start: n, stop: o, step: s, dtype: a } = t, i = zu(n, o, s, a), l = e.makeOutput([i.length], a);
  return e.typedArrayFromHeap(l).set(i), l;
};
var oV = { kernelName: nl, backendName: "wasm", kernelFunc: loe };
var uoe = true;
var sV = yt(Po, uoe);
var iV = it(ns);
var aV = it(ss);
var lV;
function coe(r) {
  lV = r.wasm.cwrap(os, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function poe(r) {
  let { backend: e, inputs: t, attrs: n } = r, { images: o } = t, { alignCorners: s, halfPixelCenters: a, size: i } = n, [l, u] = i, [c, p, m, f] = o.shape, d = [c, l, u, f], h = e.dataIdMap.get(o.dataId), g;
  h.dtype !== "float32" && (g = ec({ backend: e, inputs: { x: o }, attrs: { dtype: "float32" } }), h = e.dataIdMap.get(g.dataId));
  let y = h.id, w = e.makeOutput(d, "float32");
  if (b.sizeFromShape(o.shape) === 0)
    return w;
  let x = e.dataIdMap.get(w.dataId).id;
  return lV(y, c, p, m, f, l, u, s ? 1 : 0, a ? 1 : 0, x), g != null && e.disposeData(g.dataId), w;
}
var uV = { kernelName: os, backendName: "wasm", setupFunc: coe, kernelFunc: poe };
var cV;
function moe(r) {
  cV = r.wasm.cwrap(is, null, ["number", "array", "number", "array", "number", "number"]);
}
function foe(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { dims: s } = n, a = b.parseAxisParam(s, o.shape);
  if (o.shape.length === 0)
    return Qu({ inputs: { x: o }, backend: t });
  let i = t.makeOutput(o.shape, o.dtype), l = t.dataIdMap.get(o.dataId).id, u = t.dataIdMap.get(i.dataId).id, c = new Uint8Array(new Int32Array(a).buffer), p = new Uint8Array(new Int32Array(o.shape).buffer);
  cV(l, c, a.length, p, o.shape.length, u);
  let m = sr({ inputs: { x: i }, attrs: { shape: o.shape }, backend: t });
  return t.disposeData(i.dataId), m;
}
var pV = { kernelName: is, backendName: "wasm", kernelFunc: foe, setupFunc: moe };
var mV;
function doe(r) {
  mV = r.wasm.cwrap(ma, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function hoe(r) {
  let { inputs: e, backend: t, attrs: n } = r, { image: o } = e, { radians: s, fillValue: a, center: i } = n, l = t.makeOutput(o.shape, o.dtype), u = t.dataIdMap.get(o.dataId).id, c = t.dataIdMap.get(l.dataId).id, [p, m, f, d] = o.shape, [h, g] = S.getImageCenter(i, m, f), y = a === 0, w = 255, x = typeof a == "number" ? [a, a, a, y ? 0 : w] : [...a, w], k = new Uint8Array(new Int32Array(x).buffer);
  return mV(u, p, m, f, d, s, h, g, k, x.length, c), l;
}
var fV = { kernelName: ma, backendName: "wasm", kernelFunc: hoe, setupFunc: doe };
var dV = it(as);
var hV = it(ls);
var gV;
function goe(r) {
  gV = r.wasm.cwrap(oa, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function xoe(r) {
  let { backend: e, inputs: t, attrs: n } = r, { indices: o, updates: s } = t, { shape: a } = n, i = e.makeOutput(a, s.dtype);
  if (b.sizeFromShape(a) === 0)
    return i;
  let { sliceRank: l, numUpdates: u, sliceSize: c, strides: p, outputSize: m } = fg.calculateShapes(s, o, a), d = e.dataIdMap.get(o.dataId).id, g = e.dataIdMap.get(s.dataId).id, y = new Uint8Array(new Int32Array(p).buffer), w = e.dataIdMap.get(i.dataId).id;
  return gV(d, g, Ot[s.dtype], l, u, c, y, m, w), i;
}
var xV = { kernelName: oa, backendName: "wasm", setupFunc: goe, kernelFunc: xoe };
var yV;
function yoe(r) {
  yV = r.wasm.cwrap("SelectV2", null, ["number", "number", "number", "number", "number"]);
}
function boe(r) {
  let { inputs: e, backend: t } = r, { condition: n, t: o, e: s } = e, a = t.dataIdMap.get(n.dataId).id, i = t.dataIdMap.get(o.dataId).id, l = t.dataIdMap.get(s.dataId).id, u = t.makeOutput(o.shape, o.dtype), c = t.dataIdMap.get(u.dataId).id, p = n.shape.length, m = o.shape.length, f = p === 0 || p > 1 || m === 1 ? 1 : b.sizeFromShape(o.shape.slice(1));
  return yV(a, i, l, f, c), u;
}
var bV = { kernelName: Ys, backendName: "wasm", kernelFunc: boe, setupFunc: yoe };
var wV;
function woe(r) {
  wV = r.wasm.cwrap(cs, null, ["number", "number"]);
}
function koe(r) {
  let { backend: e, inputs: { x: t } } = r, n = e.dataIdMap.get(t.dataId).id, o = e.makeOutput(t.shape, t.dtype), s = e.dataIdMap.get(o.dataId).id;
  return b.sizeFromShape(o.shape) === 0 || wV(n, s), o;
}
var kV = { kernelName: "Sigmoid", backendName: "wasm", setupFunc: woe, kernelFunc: koe };
var _V = it(us);
var vV;
function _oe(r) {
  vV = r.wasm.cwrap(fs, null, ["number", "number", "number", "number"]);
}
function voe(r) {
  let { backend: e, inputs: { logits: t }, attrs: { dim: n } } = r, o = e.dataIdMap.get(t.dataId).id, s = e.makeOutput(t.shape, t.dtype), a = e.dataIdMap.get(s.dataId).id, i = t.shape[n], l = b.sizeFromShape(t.shape) / i;
  return b.sizeFromShape(s.shape) === 0 || vV(o, a, i, l), s;
}
var CV = { kernelName: fs, backendName: "wasm", setupFunc: _oe, kernelFunc: voe };
function Coe(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, { blockShape: s, paddings: a } = n, i = b.sizeFromShape(s), l = [[0, 0]];
  l.push(...a);
  for (let A = 1 + s.length; A < o.shape.length; ++A)
    l.push([0, 0]);
  let u = Fy.kernelFunc({ inputs: { x: o }, backend: t, attrs: { paddings: l, constantValue: 0 } }), c = S.getReshaped(u.shape, s, i, false), p = S.getPermuted(c.length, s.length, false), m = S.getReshapedPermuted(u.shape, s, i, false), h = sr({ inputs: { x: u }, backend: t, attrs: { shape: c } }), w = ki({ inputs: { x: h }, backend: t, attrs: { perm: p } }), C = sr({ inputs: { x: w }, backend: t, attrs: { shape: m } });
  return t.disposeData(u.dataId), t.disposeData(h.dataId), t.disposeData(w.dataId), C;
}
var SV = { kernelName: Js, backendName: "wasm", kernelFunc: Coe };
function Soe(r) {
  let { inputs: e, attrs: t, backend: n } = r, { x: o } = e, { numOrSizeSplits: s, axis: a } = t, i = b.parseAxisParam(a, o.shape)[0], l = S.prepareSplitSize(o, s, i), u = new Array(o.shape.length).fill(0), c = o.shape.slice();
  return l.map((p) => {
    let m = [...c];
    m[i] = p;
    let f = Va({ inputs: { x: o }, attrs: { begin: u, size: m }, backend: n });
    return u[i] += p, f;
  });
}
var IV = { kernelName: Qs, backendName: "wasm", kernelFunc: Soe };
var NV = it(ps);
var TV = it(sl);
var Ioe = true;
var EV = yt(ds, Ioe);
var AV;
function Noe(r) {
  AV = r.wasm.cwrap(ro, null, ["number", "number", "number"]);
}
function Toe(r) {
  let { backend: e, inputs: t, attrs: n } = r, { alpha: o } = n, { x: s } = t, a = e.dataIdMap.get(s.dataId).id, i = e.makeOutput(s.shape, s.dtype), l = e.dataIdMap.get(i.dataId).id;
  return AV(a, o, l), i;
}
var $V = { kernelName: ro, backendName: "wasm", setupFunc: Noe, kernelFunc: Toe };
var DV;
function Eoe(r) {
  DV = r.wasm.cwrap(ua, null, ["number", "array", "number", "array", "array", "array", "array", "array", "number", "number"]);
}
function Aoe(r) {
  let { backend: e, inputs: t, attrs: n } = r, { x: o } = t, { begin: s, end: a, strides: i } = n;
  i == null && (i = new Array(s.length));
  let { beginMask: l, endMask: u, ellipsisMask: c, newAxisMask: p, shrinkAxisMask: m } = n, f = S.slice_util.maskToAxes(c);
  if (f.length > 1)
    throw new Error("Multiple ellipses in slice is not allowed.");
  if (c !== 0 && p !== 0)
    throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");
  if (c !== 0 && m !== 0)
    throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");
  let d = o.shape.length - s.length, h = S.slice_util.maskToAxes(p), g = o.shape.slice();
  h.forEach((V) => {
    s[V] = 0, a[V] = 1, g.splice(V, 0, 1);
  });
  let y = sr({ inputs: { x: o }, attrs: { shape: g }, backend: e }), { begin: w, end: x, strides: k } = S.slice_util.getNormalizedAxes(y.shape, f, d, s, a, i, l, u, c);
  s = w, a = x, i = k;
  let C = S.slice_util.maskToAxes(m);
  C.forEach((V) => {
    a[V] = s[V] + 1, i[V] = 1;
  });
  let A = S.slice_util.computeOutShape(s, a, i), $ = A.filter((V, W) => C.indexOf(W) === -1);
  if (i.every((V) => V === 1)) {
    let V = Va({ inputs: { x: y }, attrs: { begin: s, size: A }, backend: e });
    e.disposeData(y.dataId);
    let W = sr({ inputs: { x: V }, attrs: { shape: $ }, backend: e });
    return e.disposeData(V.dataId), W;
  }
  let P = e.makeOutput($, "float32");
  if (!$.some((V) => V === 0)) {
    let V = e.dataIdMap.get(y.dataId).id, W = new Uint8Array(new Int32Array(b.computeStrides(y.shape)).buffer), G = new Uint8Array(new Int32Array(s).buffer), U = new Uint8Array(new Int32Array(a).buffer), H = new Uint8Array(new Int32Array(i).buffer), K = new Uint8Array(new Int32Array($).buffer), re = new Uint8Array(new Int32Array(b.computeStrides($)).buffer), X = e.dataIdMap.get(P.dataId).id;
    DV(V, W, y.shape.length, G, U, H, K, re, $.length, X);
  }
  e.disposeData(y.dataId);
  let M = sr({ inputs: { x: P }, attrs: { shape: $ }, backend: e });
  return e.disposeData(P.dataId), M;
}
var RV = { kernelName: ua, backendName: "wasm", setupFunc: Eoe, kernelFunc: Aoe };
var $oe = true;
var FV = yt(hs, $oe);
var OV;
function Doe(r) {
  OV = r.wasm.cwrap(ms, null, ["number, number, number"]);
}
function Roe(r) {
  let { backend: e, inputs: t, attrs: n } = r, { axis: o, keepDims: s } = n, { x: a } = t, i = e.dataIdMap.get(a.dataId).id, l = i, u = a, { transposed: c, axes: p, originalAxes: m, inputWasTransposed: f } = cn(a, o, e), d = p;
  if (f) {
    let x = e.dataIdMap.get(c.dataId).id;
    x !== i && (u = c, l = x, d = S.getInnerMostAxes(d.length, u.shape.length));
  }
  S.assertAxesAreInnerMostDims("sum", d, u.shape.length);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, d), y = b.sizeFromShape(g), w = e.makeOutput(h, u.dtype);
  if (b.sizeFromShape(u.shape) !== 0) {
    let x = e.dataIdMap.get(w.dataId).id;
    OV(l, y, x);
  }
  if (f && e.disposeData(c.dataId), s) {
    let x = S.expandShapeToKeepDim(w.shape, m);
    w.shape = x;
  }
  return w;
}
var PV = { kernelName: ms, backendName: "wasm", setupFunc: Doe, kernelFunc: Roe };
var MV = it(gs);
var LV = it(xs);
var zV;
function Foe(r) {
  zV = r.wasm.cwrap(jn, null, ["number", "array", "number", "array", "number", "number"]);
}
function Ooe(r) {
  let { inputs: e, backend: t, attrs: n } = r, { x: o } = e, s = t.dataIdMap.get(o.dataId).id, { reps: a } = n, i = new Array(o.shape.length);
  for (let m = 0; m < i.length; m++)
    i[m] = o.shape[m] * a[m];
  let l = new Uint8Array(new Int32Array(o.shape).buffer), u = new Uint8Array(new Int32Array(i).buffer), c = t.makeOutput(i, o.dtype), p = t.dataIdMap.get(c.dataId).id;
  return zV(s, l, o.shape.length, u, i.length, Ot[c.dtype], p), c;
}
var BV = { kernelName: jn, backendName: "wasm", setupFunc: Foe, kernelFunc: Ooe };
var VV;
function Poe(r) {
  VV = r.wasm.cwrap(ca, null, ["number", "array", "number", "number", "number", "bool", "number", "number"]);
}
var Moe = ({ inputs: r, backend: e, attrs: t }) => {
  let { x: n } = r, { k: o, sorted: s } = t, a = e.dataIdMap.get(n.dataId).id, i = new Uint8Array(new Int32Array(n.shape).buffer), l = n.shape.slice();
  l[l.length - 1] = o;
  let u = e.makeOutput(l, n.dtype), c = e.dataIdMap.get(u.dataId).id, p = e.makeOutput(l, "int32"), m = e.dataIdMap.get(p.dataId).id;
  return VV(a, i, n.shape.length, Ot[n.dtype], o, s, c, m), [u, p];
};
var WV = { kernelName: ca, backendName: "wasm", setupFunc: Poe, kernelFunc: Moe };
var jV;
function Loe(r) {
  jV = r.wasm.cwrap(pa, null, ["number", "number", "bool", "number", "number", "number", "number", "number", "number", "array", "number", "number", "number", "number", "number"]);
}
function zoe(r) {
  let { backend: e, inputs: t, attrs: n } = r, { image: o, transforms: s } = t, { interpolation: a, fillMode: i, fillValue: l, outputShape: u } = n, [c, p, m, f] = o.shape, [d, h] = u != null ? u : [p, m], g = [c, d, h, f], y = new Uint8Array(new Int32Array(b.computeStrides(o.shape)).buffer), w = e.makeOutput(g, o.dtype), x = e.dataIdMap.get(w.dataId).id, C = e.dataIdMap.get(o.dataId).id, $ = e.dataIdMap.get(s.dataId).id, R = a === "nearest" ? 1 : 2, P;
  switch (i) {
    case "constant":
      P = 1;
      break;
    case "reflect":
      P = 2;
      break;
    case "wrap":
      P = 3;
      break;
    case "nearest":
      P = 4;
      break;
    default:
      P = 1;
      break;
  }
  return jV(C, $, s.shape[0] > 1, c, d, h, f, m, p, y, o.shape.length - 1, R, P, l, x), w;
}
var GV = { kernelName: pa, backendName: "wasm", setupFunc: Loe, kernelFunc: zoe };
function Boe(r) {
  let { inputs: e, backend: t, attrs: n } = r, { value: o } = e, { axis: s } = n;
  s < 0 && (s += o.shape.length);
  let a = o.shape[s], i = o.shape.length, l = new Array(i - 1), u = 0;
  for (let f = 0; f < i; f++)
    f !== s && (l[u++] = o.shape[f]);
  let c = new Array(a), p = new Array(i).fill(0), m = o.shape.slice();
  m[s] = 1;
  for (let f = 0; f < c.length; f++)
    p[s] = f, c[f] = Va({ inputs: { x: o }, attrs: { begin: p, size: m }, backend: t });
  return c.map(({ dataId: f, dtype: d }) => ({ dataId: f, dtype: d, shape: l }));
}
var UV = { kernelName: ei, backendName: "wasm", kernelFunc: Boe };
function Voe(r) {
  let { inputs: { x: e }, backend: t } = r, n = t.makeOutput(e.shape, e.dtype);
  return t.typedArrayFromHeap(n).fill(0), n;
}
var HV = { kernelName: ti, backendName: "wasm", kernelFunc: Voe };
var Woe = [h3, g3, y3, v3, S3, N3, E3, D3, F3, O3, P3, L3, z3, V3, j3, G3, U3, q3, X3, Z3, Q3, eB, tB, rB, nB, oB, iB, aB, lB, d3, cB, mB, dB, gB, yB, bB, wB, b3, _B, vB, CB, SB, IB, TB, EB, $B, RB, OB, PB, LB, zB, BB, WB, GB, HB, qB, XB, YB, ZB, Fy, QB, tV, nV, oV, sV, iV, aV, A3, uV, pV, fV, hV, dV, xV, bV, kV, _V, R3, CV, SV, IV, NV, TV, EV, $V, RV, FV, PV, MV, LV, BV, WV, GV, k3, UV, HV];
for (let r of Woe)
  Ul(r);
var hI = j();
hI.registerFlag("WASM_HAS_SIMD_SUPPORT", async () => WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11])));
hI.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT", async () => {
  if (hI.get("IS_NODE"))
    return false;
  try {
    return new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11]));
  } catch (r) {
    return false;
  }
});
var wI = Bl(XV());
var YV = 'var Module={};function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;this.alert=threadAlert;Module["instantiateWasm"]=function(info,receiveInstance){var instance=new WebAssembly.Instance(Module["wasmModule"],info);Module["wasmModule"]=null;receiveInstance(instance);return instance.exports};function moduleLoaded(){}this.onmessage=function(e){try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob==="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module).then(function(instance){Module=instance;moduleLoaded()})}else if(e.data.cmd==="objectTransfer"){Module["PThread"].receiveObjectTransfer(e.data)}else if(e.data.cmd==="run"){Module["__performance_now_clock_drift"]=performance.now()-e.data.time;Module["__emscripten_thread_init"](e.data.threadInfoStruct,0,0);var max=e.data.stackBase;var top=e.data.stackBase+e.data.stackSize;Module["establishStackSpace"](top,max);Module["_emscripten_tls_init"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].setThreadStatus(Module["_pthread_self"](),1);try{var result=Module["invokeEntryPoint"](e.data.start_routine,e.data.arg);if(!Module["getNoExitRuntime"]())Module["PThread"].threadExit(result)}catch(ex){if(ex==="Canceled!"){Module["PThread"].threadCancel()}else if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["getNoExitRuntime"]()){}else{Module["PThread"].threadExit(ex.status)}}else{Module["PThread"].threadExit(-2);throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["PThread"].threadCancel()}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processThreadQueue"){if(Module["_pthread_self"]()){Module["_emscripten_current_thread_process_queued_calls"]()}}else{err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){err("worker.js onmessage() captured an uncaught exception: "+ex);if(ex&&ex.stack)err(ex.stack);throw ex}};if(typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string"){self={location:{href:__filename}};var onmessage=this.onmessage;var nodeWorkerThreads=require("worker_threads");global.Worker=nodeWorkerThreads.Worker;var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",function(data){onmessage({data:data})});var nodeFS=require("fs");var nodeRead=function(filename){return nodeFS.readFileSync(filename,"utf8")};function globalEval(x){global.require=require;global.Module=Module;eval.call(null,x)}importScripts=function(f){globalEval(nodeRead(f))};postMessage=function(msg){parentPort.postMessage(msg)};if(typeof performance==="undefined"){performance={now:function(){return Date.now()}}}}';
var JV = Bl(ZV());
var My = class extends Ls {
  constructor(e) {
    super();
    this.wasm = e, this.dataIdNextNumber = 1, this.wasm.tfjs.init(), this.dataIdMap = new Ka(this, ks());
  }
  write(e, t, n) {
    let o = { id: this.dataIdNextNumber++ };
    return this.move(o, e, t, n, 1), o;
  }
  numDataIds() {
    return this.dataIdMap.numDataIds();
  }
  async time(e) {
    let t = b.now();
    return e(), { kernelMs: b.now() - t };
  }
  move(e, t, n, o, s) {
    let a = this.dataIdNextNumber++;
    if (o === "string") {
      let c = t;
      this.dataIdMap.set(e, { id: a, stringBytes: c, shape: n, dtype: o, memoryOffset: null, refCount: s });
      return;
    }
    let i = b.sizeFromShape(n), l = i * b.bytesPerElement(o), u = this.wasm._malloc(l);
    this.dataIdMap.set(e, { id: a, memoryOffset: u, shape: n, dtype: o, refCount: s }), this.wasm.tfjs.registerTensor(a, i, u), t != null && this.wasm.HEAPU8.set(new Uint8Array(t.buffer, t.byteOffset, l), u);
  }
  async read(e) {
    return this.readSync(e);
  }
  readSync(e) {
    let { memoryOffset: t, dtype: n, shape: o, stringBytes: s } = this.dataIdMap.get(e);
    if (n === "string")
      return s;
    let a = this.wasm.HEAPU8.slice(t, t + b.sizeFromShape(o) * b.bytesPerElement(n));
    return Goe(a.buffer, n);
  }
  disposeData(e, t = false) {
    if (this.dataIdMap.has(e)) {
      let n = this.dataIdMap.get(e);
      if (n.refCount--, !t && n.refCount > 0)
        return false;
      this.wasm._free(n.memoryOffset), this.wasm.tfjs.disposeData(n.id), this.dataIdMap.delete(e);
    }
    return true;
  }
  refCount(e) {
    return this.dataIdMap.has(e) ? this.dataIdMap.get(e).refCount : 0;
  }
  incRef(e) {
    let t = this.dataIdMap.get(e);
    t != null && t.refCount++;
  }
  floatPrecision() {
    return 32;
  }
  getMemoryOffset(e) {
    return this.dataIdMap.get(e).memoryOffset;
  }
  dispose() {
    this.wasm.tfjs.dispose(), "PThread" in this.wasm && this.wasm.PThread.terminateAllThreads(), this.wasm = null;
  }
  memory() {
    return { unreliable: false };
  }
  makeOutput(e, t, n) {
    let o;
    if (n == null)
      o = this.write(null, e, t);
    else {
      let s = this.dataIdNextNumber++;
      o = { id: s }, this.dataIdMap.set(o, { id: s, memoryOffset: n, shape: e, dtype: t, refCount: 1 });
      let a = b.sizeFromShape(e);
      this.wasm.tfjs.registerTensor(s, a, n);
    }
    return { dataId: o, shape: e, dtype: t };
  }
  typedArrayFromHeap({ shape: e, dtype: t, dataId: n }) {
    let o = this.wasm.HEAPU8.buffer, { memoryOffset: s } = this.dataIdMap.get(n), a = b.sizeFromShape(e);
    switch (t) {
      case "float32":
        return new Float32Array(o, s, a);
      case "int32":
        return new Int32Array(o, s, a);
      case "bool":
        return new Uint8Array(o, s, a);
      default:
        throw new Error(`Unknown dtype ${t}`);
    }
  }
};
function joe(r) {
  return (e, t) => (b.fetch(r, { credentials: "same-origin" }).then((n) => {
    n.ok || e.env.a(`failed to load wasm binary file at '${r}'`), n.arrayBuffer().then((o) => {
      WebAssembly.instantiate(o, e).then((s) => {
        t(s.instance, s.module);
      });
    });
  }), {});
}
function QV(r, e, t) {
  if (Ly != null)
    return Ly;
  let n = "tfjs-backend-wasm.wasm";
  return r && e ? n = "tfjs-backend-wasm-threaded-simd.wasm" : r && (n = "tfjs-backend-wasm-simd.wasm"), Ch != null && Ch[n] != null ? Ch[n] : t + n;
}
async function eW() {
  let [r, e] = await Promise.all([j().getAsync("WASM_HAS_SIMD_SUPPORT"), j().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);
  return new Promise((t, n) => {
    let o = {};
    o.locateFile = (i, l) => {
      if (i.endsWith(".worker.js")) {
        let u = YV, c = new Blob([u], { type: "application/javascript" });
        return URL.createObjectURL(c);
      }
      return i.endsWith(".wasm") ? QV(r, e, vh != null ? vh : l) : l + i;
    }, kI && (o.instantiateWasm = joe(QV(r, e, vh != null ? vh : "")));
    let s = false;
    o.onAbort = () => {
      if (s || Sh)
        return;
      Sh = true, n({ message: "Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers" });
    };
    let a;
    e && r && Ly == null ? (o.mainScriptUrlOrBlob = new Blob(["var WasmBackendModuleThreadedSimd = " + wI.default.toString()], { type: "text/javascript" }), a = (0, wI.default)(o)) : a = (0, JV.default)(o), a.then((i) => {
      s = true, Sh = false;
      let l = null;
      i.tfjs = { init: i.cwrap("init", null, []), registerTensor: i.cwrap("register_tensor", null, ["number", "number", "number"]), disposeData: i.cwrap("dispose_data", l, ["number"]), dispose: i.cwrap("dispose", l, []) }, t({ wasm: i });
    });
  });
}
function Goe(r, e) {
  switch (e) {
    case "float32":
      return new Float32Array(r);
    case "int32":
      return new Int32Array(r);
    case "bool":
      return new Uint8Array(r);
    default:
      throw new Error(`Unknown dtype ${e}`);
  }
}
var Uoe = ["tfjs-backend-wasm.wasm", "tfjs-backend-wasm-simd.wasm", "tfjs-backend-wasm-threaded-simd.wasm"];
var Ly = null;
var vh = null;
var Ch = {};
var Sh = false;
var kI = false;
function Hoe(r, e = false) {
  if (ek("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release."), Sh)
    throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");
  Ly = r, kI = e;
}
function qoe(r, e = false) {
  if (Sh)
    throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");
  if (typeof r == "string")
    vh = r;
  else {
    Ch = r;
    let t = Uoe.filter((n) => Ch[n] == null);
    if (t.length > 0)
      throw new Error(`There were no entries found for the following binaries: ${t.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`);
  }
  kI = e;
}
var Koe = "3.9.0";
var Xoe = 2;
ap("wasm", async () => {
  let { wasm: r } = await eW();
  return new My(r);
}, Xoe);
var FWt = { tfjs: OI, "tfjs-core": PI, "tfjs-data": MI, "tfjs-layers": LI, "tfjs-converter": zI, "tfjs-backend-cpu": BI, "tfjs-backend-webgl": VI, "tfjs-backend-wasm": WI };

// src/tfjs/backend.ts
var config2 = {
  name: "humangl",
  priority: 99,
  canvas: null,
  gl: null,
  width: 1024,
  height: 1024,
  extensions: [],
  webGLattr: {
    alpha: false,
    antialias: false,
    premultipliedAlpha: false,
    preserveDrawingBuffer: false,
    depth: false,
    stencil: false,
    failIfMajorPerformanceCaveat: false,
    desynchronized: true
  }
};
function extensions() {
  const gl2 = config2.gl;
  if (!gl2)
    return;
  config2.extensions = gl2.getSupportedExtensions();
}
function register() {
  if (!cue(config2.name)) {
    try {
      config2.canvas = typeof OffscreenCanvas !== "undefined" ? new OffscreenCanvas(config2.width, config2.height) : document.createElement("canvas");
    } catch (err) {
      log("error: cannot create canvas:", err);
      return;
    }
    try {
      config2.gl = config2.canvas.getContext("webgl2", config2.webGLattr);
    } catch (err) {
      log("error: cannot get WebGL2 context:", err);
      return;
    }
    try {
      W0(2, config2.gl);
    } catch (err) {
      log("error: cannot set WebGL2 context:", err);
      return;
    }
    try {
      const ctx = new hy(config2.gl);
      ap(config2.name, () => new Hu(ctx), config2.priority);
    } catch (err) {
      log("error: cannot register WebGL backend:", err);
      return;
    }
    try {
      const kernels = Jh("webgl");
      kernels.forEach((kernelConfig) => {
        const newKernelConfig = { ...kernelConfig, backendName: config2.name };
        Ul(newKernelConfig);
      });
    } catch (err) {
      log("error: cannot update WebGL backend registration:", err);
      return;
    }
    try {
      gw.set("WEBGL_VERSION", 2);
    } catch (err) {
      log("error: cannot set WebGL backend flags:", err);
      return;
    }
    extensions();
    log("backend registered:", config2.name);
  }
}

// src/blazeface/box.ts
function scaleBoxCoordinates(box6, factor) {
  const startPoint = [box6.startPoint[0] * factor[0], box6.startPoint[1] * factor[1]];
  const endPoint = [box6.endPoint[0] * factor[0], box6.endPoint[1] * factor[1]];
  return { startPoint, endPoint };
}
function getBoxSize(box6) {
  return [
    Math.abs(box6.endPoint[0] - box6.startPoint[0]),
    Math.abs(box6.endPoint[1] - box6.startPoint[1])
  ];
}
function getBoxCenter(box6) {
  return [
    box6.startPoint[0] + (box6.endPoint[0] - box6.startPoint[0]) / 2,
    box6.startPoint[1] + (box6.endPoint[1] - box6.startPoint[1]) / 2
  ];
}
function cutBoxFromImageAndResize(box6, image3, cropSize) {
  const h = image3.shape[1];
  const w = image3.shape[2];
  const boxes = [[
    box6.startPoint[1] / h,
    box6.startPoint[0] / w,
    box6.endPoint[1] / h,
    box6.endPoint[0] / w
  ]];
  return bn.cropAndResize(image3, boxes, [0], cropSize);
}
function enlargeBox(box6, factor = 1.5) {
  const center = getBoxCenter(box6);
  const size = getBoxSize(box6);
  const newHalfSize = [factor * size[0] / 2, factor * size[1] / 2];
  const startPoint = [center[0] - newHalfSize[0], center[1] - newHalfSize[1]];
  const endPoint = [center[0] + newHalfSize[0], center[1] + newHalfSize[1]];
  return { startPoint, endPoint, landmarks: box6.landmarks };
}
function squarifyBox(box6) {
  const centers = getBoxCenter(box6);
  const size = getBoxSize(box6);
  const maxEdge = Math.max(...size);
  const halfSize = maxEdge / 2;
  const startPoint = [Math.round(centers[0] - halfSize), Math.round(centers[1] - halfSize)];
  const endPoint = [Math.round(centers[0] + halfSize), Math.round(centers[1] + halfSize)];
  return { startPoint, endPoint, landmarks: box6.landmarks };
}
function calculateLandmarksBoundingBox(landmarks) {
  const xs2 = landmarks.map((d) => d[0]);
  const ys2 = landmarks.map((d) => d[1]);
  const startPoint = [Math.min(...xs2), Math.min(...ys2)];
  const endPoint = [Math.max(...xs2), Math.max(...ys2)];
  return { startPoint, endPoint, landmarks };
}
var createBox = (startEndTensor) => ({
  startPoint: Oe(startEndTensor, [0, 0], [-1, 2]),
  endPoint: Oe(startEndTensor, [0, 2], [-1, 2])
});

// src/blazeface/util.ts
var IDENTITY_MATRIX = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
function normalizeRadians(angle) {
  return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));
}
function computeRotation(point1, point2) {
  const radians = Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]);
  return normalizeRadians(radians);
}
function buildTranslationMatrix(x, y) {
  return [[1, 0, x], [0, 1, y], [0, 0, 1]];
}
function dot(v12, v22) {
  let product = 0;
  for (let i = 0; i < v12.length; i++) {
    product += v12[i] * v22[i];
  }
  return product;
}
function getColumnFrom2DArr(arr, columnIndex) {
  const column = [];
  for (let i = 0; i < arr.length; i++) {
    column.push(arr[i][columnIndex]);
  }
  return column;
}
function multiplyTransformMatrices(mat1, mat2) {
  const product = [];
  const size = mat1.length;
  for (let row = 0; row < size; row++) {
    product.push([]);
    for (let col = 0; col < size; col++) {
      product[row].push(dot(mat1[row], getColumnFrom2DArr(mat2, col)));
    }
  }
  return product;
}
function buildRotationMatrix(rotation, center) {
  const cosA = Math.cos(rotation);
  const sinA = Math.sin(rotation);
  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];
  const translationMatrix = buildTranslationMatrix(center[0], center[1]);
  const translationTimesRotation = multiplyTransformMatrices(translationMatrix, rotationMatrix);
  const negativeTranslationMatrix = buildTranslationMatrix(-center[0], -center[1]);
  return multiplyTransformMatrices(translationTimesRotation, negativeTranslationMatrix);
}
function invertTransformMatrix(matrix) {
  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];
  const translationComponent = [matrix[0][2], matrix[1][2]];
  const invertedTranslation = [
    -dot(rotationComponent[0], translationComponent),
    -dot(rotationComponent[1], translationComponent)
  ];
  return [
    rotationComponent[0].concat(invertedTranslation[0]),
    rotationComponent[1].concat(invertedTranslation[1]),
    [0, 0, 1]
  ];
}
function rotatePoint(homogeneousCoordinate, rotationMatrix) {
  return [
    dot(homogeneousCoordinate, rotationMatrix[0]),
    dot(homogeneousCoordinate, rotationMatrix[1])
  ];
}
function generateAnchors(inputSize) {
  const spec = { strides: [inputSize / 16, inputSize / 8], anchors: [2, 6] };
  const anchors3 = [];
  for (let i = 0; i < spec.strides.length; i++) {
    const stride = spec.strides[i];
    const gridRows = Math.floor((inputSize + stride - 1) / stride);
    const gridCols = Math.floor((inputSize + stride - 1) / stride);
    const anchorsNum = spec.anchors[i];
    for (let gridY = 0; gridY < gridRows; gridY++) {
      const anchorY = stride * (gridY + 0.5);
      for (let gridX = 0; gridX < gridCols; gridX++) {
        const anchorX = stride * (gridX + 0.5);
        for (let n = 0; n < anchorsNum; n++) {
          anchors3.push([anchorX, anchorY]);
        }
      }
    }
  }
  return anchors3;
}

// src/blazeface/blazeface.ts
var keypointsCount = 6;
function decodeBounds(boxOutputs, anchors3, inputSize) {
  const boxStarts = Oe(boxOutputs, [0, 1], [-1, 2]);
  const centers = Y(boxStarts, anchors3);
  const boxSizes = Oe(boxOutputs, [0, 3], [-1, 2]);
  const boxSizesNormalized = ue(boxSizes, inputSize);
  const centersNormalized = ue(centers, inputSize);
  const halfBoxSize = ue(boxSizesNormalized, 2);
  const starts = le(centersNormalized, halfBoxSize);
  const ends = Y(centersNormalized, halfBoxSize);
  const startNormalized = F(starts, inputSize);
  const endNormalized = F(ends, inputSize);
  const concatAxis = 1;
  return bk([startNormalized, endNormalized], concatAxis);
}
var BlazeFaceModel = class {
  constructor(model10, config3) {
    this.model = model10;
    this.anchorsData = generateAnchors(model10.inputs[0].shape[1]);
    this.anchors = pi(this.anchorsData);
    this.inputSize = model10.inputs[0].shape[2];
    this.config = config3;
  }
  async getBoundingBoxes(inputImage, userConfig) {
    if (!inputImage || inputImage["isDisposedInternal"] || inputImage.shape.length !== 4 || inputImage.shape[1] < 1 || inputImage.shape[2] < 1)
      return null;
    const [batch, boxes, scores] = z(() => {
      const resizedImage = bn.resizeBilinear(inputImage, [this.inputSize, this.inputSize]);
      const normalizedImage = le(ue(resizedImage, 127.5), 0.5);
      const res = this.model.execute(normalizedImage);
      let batchOut;
      if (Array.isArray(res)) {
        const sorted = res.sort((a, b7) => a.size - b7.size);
        const concat384 = tt([sorted[0], sorted[2]], 2);
        const concat512 = tt([sorted[1], sorted[3]], 2);
        const concat = tt([concat512, concat384], 1);
        batchOut = en(concat, 0);
      } else {
        batchOut = en(res);
      }
      const boxesOut = decodeBounds(batchOut, this.anchors, [this.inputSize, this.inputSize]);
      const logits = Oe(batchOut, [0, 0], [-1, 1]);
      const scoresOut = en(Jr(logits));
      return [batchOut, boxesOut, scoresOut];
    });
    this.config = mergeDeep(this.config, userConfig);
    const nmsTensor = await bn.nonMaxSuppressionAsync(boxes, scores, this.config.face.detector.maxDetected, this.config.face.detector.iouThreshold, this.config.face.detector.minConfidence);
    const nms = await nmsTensor.array();
    Ae(nmsTensor);
    const annotatedBoxes = [];
    const scoresData = await scores.data();
    for (let i = 0; i < nms.length; i++) {
      const confidence = scoresData[nms[i]];
      if (confidence > this.config.face.detector.minConfidence) {
        const boundingBox = Oe(boxes, [nms[i], 0], [1, -1]);
        const localBox = createBox(boundingBox);
        Ae(boundingBox);
        const anchor = this.anchorsData[nms[i]];
        const landmarks = z(() => O(en(Oe(batch, [nms[i], keypointsCount - 1], [1, -1])), [keypointsCount, -1]));
        annotatedBoxes.push({ box: localBox, landmarks, anchor, confidence });
      }
    }
    Ae(batch);
    Ae(boxes);
    Ae(scores);
    return {
      boxes: annotatedBoxes,
      scaleFactor: [inputImage.shape[2] / this.inputSize, inputImage.shape[1] / this.inputSize]
    };
  }
};
async function load(config3) {
  const model10 = await m7(join(config3.modelBasePath, config3.face.detector.modelPath), { fromTFHub: config3.face.detector.modelPath.includes("tfhub.dev") });
  const blazeFace = new BlazeFaceModel(model10, config3);
  if (!model10 || !model10.modelUrl)
    log("load model failed:", config3.face.detector.modelPath);
  else if (config3.debug)
    log("load model:", model10.modelUrl);
  return blazeFace;
}

// src/blazeface/coords.ts
var MESH_ANNOTATIONS = {
  silhouette: [
    10,
    338,
    297,
    332,
    284,
    251,
    389,
    356,
    454,
    323,
    361,
    288,
    397,
    365,
    379,
    378,
    400,
    377,
    152,
    148,
    176,
    149,
    150,
    136,
    172,
    58,
    132,
    93,
    234,
    127,
    162,
    21,
    54,
    103,
    67,
    109
  ],
  lipsUpperOuter: [61, 185, 40, 39, 37, 0, 267, 269, 270, 409, 291],
  lipsLowerOuter: [146, 91, 181, 84, 17, 314, 405, 321, 375, 291],
  lipsUpperInner: [78, 191, 80, 81, 82, 13, 312, 311, 310, 415, 308],
  lipsLowerInner: [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308],
  rightEyeUpper0: [246, 161, 160, 159, 158, 157, 173],
  rightEyeLower0: [33, 7, 163, 144, 145, 153, 154, 155, 133],
  rightEyeUpper1: [247, 30, 29, 27, 28, 56, 190],
  rightEyeLower1: [130, 25, 110, 24, 23, 22, 26, 112, 243],
  rightEyeUpper2: [113, 225, 224, 223, 222, 221, 189],
  rightEyeLower2: [226, 31, 228, 229, 230, 231, 232, 233, 244],
  rightEyeLower3: [143, 111, 117, 118, 119, 120, 121, 128, 245],
  rightEyebrowUpper: [156, 70, 63, 105, 66, 107, 55, 193],
  rightEyebrowLower: [35, 124, 46, 53, 52, 65],
  rightEyeIris: [473, 474, 475, 476, 477],
  leftEyeUpper0: [466, 388, 387, 386, 385, 384, 398],
  leftEyeLower0: [263, 249, 390, 373, 374, 380, 381, 382, 362],
  leftEyeUpper1: [467, 260, 259, 257, 258, 286, 414],
  leftEyeLower1: [359, 255, 339, 254, 253, 252, 256, 341, 463],
  leftEyeUpper2: [342, 445, 444, 443, 442, 441, 413],
  leftEyeLower2: [446, 261, 448, 449, 450, 451, 452, 453, 464],
  leftEyeLower3: [372, 340, 346, 347, 348, 349, 350, 357, 465],
  leftEyebrowUpper: [383, 300, 293, 334, 296, 336, 285, 417],
  leftEyebrowLower: [265, 353, 276, 283, 282, 295],
  leftEyeIris: [468, 469, 470, 471, 472],
  midwayBetweenEyes: [168],
  noseTip: [1],
  noseBottom: [2],
  noseRightCorner: [98],
  noseLeftCorner: [327],
  rightCheek: [205],
  leftCheek: [425]
};
var MESH_TO_IRIS_INDICES_MAP = [
  { key: "EyeUpper0", indices: [9, 10, 11, 12, 13, 14, 15] },
  { key: "EyeUpper1", indices: [25, 26, 27, 28, 29, 30, 31] },
  { key: "EyeUpper2", indices: [41, 42, 43, 44, 45, 46, 47] },
  { key: "EyeLower0", indices: [0, 1, 2, 3, 4, 5, 6, 7, 8] },
  { key: "EyeLower1", indices: [16, 17, 18, 19, 20, 21, 22, 23, 24] },
  { key: "EyeLower2", indices: [32, 33, 34, 35, 36, 37, 38, 39, 40] },
  { key: "EyeLower3", indices: [54, 55, 56, 57, 58, 59, 60, 61, 62] }
];
var UV468 = [
  [0.499976992607117, 0.652534008026123],
  [0.500025987625122, 0.547487020492554],
  [0.499974012374878, 0.602371990680695],
  [0.482113003730774, 0.471979022026062],
  [0.500150978565216, 0.527155995368958],
  [0.499909996986389, 0.498252987861633],
  [0.499523013830185, 0.40106201171875],
  [0.289712011814117, 0.380764007568359],
  [0.499954998493195, 0.312398016452789],
  [0.499987006187439, 0.269918978214264],
  [0.500023007392883, 0.107050001621246],
  [0.500023007392883, 0.666234016418457],
  [0.5000159740448, 0.679224014282227],
  [0.500023007392883, 0.692348003387451],
  [0.499976992607117, 0.695277988910675],
  [0.499976992607117, 0.70593398809433],
  [0.499976992607117, 0.719385027885437],
  [0.499976992607117, 0.737019002437592],
  [0.499967992305756, 0.781370997428894],
  [0.499816000461578, 0.562981009483337],
  [0.473773002624512, 0.573909997940063],
  [0.104906998574734, 0.254140973091125],
  [0.365929991006851, 0.409575998783112],
  [0.338757991790771, 0.41302502155304],
  [0.311120003461838, 0.409460008144379],
  [0.274657994508743, 0.389131009578705],
  [0.393361985683441, 0.403706014156342],
  [0.345234006643295, 0.344011008739471],
  [0.370094001293182, 0.346076011657715],
  [0.319321990013123, 0.347265005111694],
  [0.297903001308441, 0.353591024875641],
  [0.24779200553894, 0.410809993743896],
  [0.396889001131058, 0.842755019664764],
  [0.280097991228104, 0.375599980354309],
  [0.106310002505779, 0.399955987930298],
  [0.2099249958992, 0.391353011131287],
  [0.355807989835739, 0.534406006336212],
  [0.471751004457474, 0.65040397644043],
  [0.474155008792877, 0.680191993713379],
  [0.439785003662109, 0.657229006290436],
  [0.414617002010345, 0.66654098033905],
  [0.450374007225037, 0.680860996246338],
  [0.428770989179611, 0.682690978050232],
  [0.374971002340317, 0.727805018424988],
  [0.486716985702515, 0.547628998756409],
  [0.485300987958908, 0.527395009994507],
  [0.257764995098114, 0.314490020275116],
  [0.401223003864288, 0.455172002315521],
  [0.429818987846375, 0.548614978790283],
  [0.421351999044418, 0.533740997314453],
  [0.276895999908447, 0.532056987285614],
  [0.483370006084442, 0.499586999416351],
  [0.33721199631691, 0.282882988452911],
  [0.296391993761063, 0.293242990970612],
  [0.169294998049736, 0.193813979625702],
  [0.447580009698868, 0.302609980106354],
  [0.392390012741089, 0.353887975215912],
  [0.354490011930466, 0.696784019470215],
  [0.067304998636246, 0.730105042457581],
  [0.442739009857178, 0.572826027870178],
  [0.457098007202148, 0.584792017936707],
  [0.381974011659622, 0.694710969924927],
  [0.392388999462128, 0.694203019142151],
  [0.277076005935669, 0.271932005882263],
  [0.422551989555359, 0.563233017921448],
  [0.385919004678726, 0.281364023685455],
  [0.383103013038635, 0.255840003490448],
  [0.331431001424789, 0.119714021682739],
  [0.229923993349075, 0.232002973556519],
  [0.364500999450684, 0.189113974571228],
  [0.229622006416321, 0.299540996551514],
  [0.173287004232407, 0.278747975826263],
  [0.472878992557526, 0.666198015213013],
  [0.446828007698059, 0.668527007102966],
  [0.422762006521225, 0.673889994621277],
  [0.445307999849319, 0.580065965652466],
  [0.388103008270264, 0.693961024284363],
  [0.403039008378983, 0.706539988517761],
  [0.403629004955292, 0.693953037261963],
  [0.460041999816895, 0.557139039039612],
  [0.431158006191254, 0.692366003990173],
  [0.452181994915009, 0.692366003990173],
  [0.475387006998062, 0.692366003990173],
  [0.465828001499176, 0.779190003871918],
  [0.472328990697861, 0.736225962638855],
  [0.473087012767792, 0.717857003211975],
  [0.473122000694275, 0.704625964164734],
  [0.473033010959625, 0.695277988910675],
  [0.427942007780075, 0.695277988910675],
  [0.426479011774063, 0.703539967536926],
  [0.423162013292313, 0.711845993995667],
  [0.4183090031147, 0.720062971115112],
  [0.390094995498657, 0.639572978019714],
  [0.013953999616206, 0.560034036636353],
  [0.499913990497589, 0.58014702796936],
  [0.413199990987778, 0.69539999961853],
  [0.409626007080078, 0.701822996139526],
  [0.468080013990402, 0.601534962654114],
  [0.422728985548019, 0.585985004901886],
  [0.463079988956451, 0.593783974647522],
  [0.37211999297142, 0.47341400384903],
  [0.334562003612518, 0.496073007583618],
  [0.411671012639999, 0.546965003013611],
  [0.242175996303558, 0.14767599105835],
  [0.290776997804642, 0.201445996761322],
  [0.327338010072708, 0.256527006626129],
  [0.399509996175766, 0.748921036720276],
  [0.441727995872498, 0.261676013469696],
  [0.429764986038208, 0.187834024429321],
  [0.412198007106781, 0.108901023864746],
  [0.288955003023148, 0.398952007293701],
  [0.218936994671822, 0.435410976409912],
  [0.41278201341629, 0.398970007896423],
  [0.257135003805161, 0.355440020561218],
  [0.427684992551804, 0.437960982322693],
  [0.448339998722076, 0.536936044692993],
  [0.178560003638268, 0.45755398273468],
  [0.247308000922203, 0.457193970680237],
  [0.286267012357712, 0.467674970626831],
  [0.332827985286713, 0.460712015628815],
  [0.368755996227264, 0.447206974029541],
  [0.398963987827301, 0.432654976844788],
  [0.476410001516342, 0.405806005001068],
  [0.189241006970406, 0.523923993110657],
  [0.228962004184723, 0.348950982093811],
  [0.490725994110107, 0.562400996685028],
  [0.404670000076294, 0.485132992267609],
  [0.019469000399113, 0.401564002037048],
  [0.426243007183075, 0.420431017875671],
  [0.396993011236191, 0.548797011375427],
  [0.266469985246658, 0.376977026462555],
  [0.439121007919312, 0.51895797252655],
  [0.032313998788595, 0.644356966018677],
  [0.419054001569748, 0.387154996395111],
  [0.462783008813858, 0.505746960639954],
  [0.238978996872902, 0.779744982719421],
  [0.198220998048782, 0.831938028335571],
  [0.107550002634525, 0.540755033493042],
  [0.183610007166862, 0.740257024765015],
  [0.134409993886948, 0.333683013916016],
  [0.385764002799988, 0.883153975009918],
  [0.490967005491257, 0.579378008842468],
  [0.382384985685349, 0.508572995662689],
  [0.174399003386497, 0.397670984268188],
  [0.318785011768341, 0.39623498916626],
  [0.343364000320435, 0.400596976280212],
  [0.396100014448166, 0.710216999053955],
  [0.187885001301765, 0.588537991046906],
  [0.430987000465393, 0.944064974784851],
  [0.318993002176285, 0.898285031318665],
  [0.266247987747192, 0.869701027870178],
  [0.500023007392883, 0.190576016902924],
  [0.499976992607117, 0.954452991485596],
  [0.366169989109039, 0.398822009563446],
  [0.393207013607025, 0.39553701877594],
  [0.410373002290726, 0.391080021858215],
  [0.194993004202843, 0.342101991176605],
  [0.388664990663528, 0.362284004688263],
  [0.365961998701096, 0.355970978736877],
  [0.343364000320435, 0.355356991291046],
  [0.318785011768341, 0.35834002494812],
  [0.301414996385574, 0.363156020641327],
  [0.058132998645306, 0.319076001644135],
  [0.301414996385574, 0.387449026107788],
  [0.499987989664078, 0.618434011936188],
  [0.415838003158569, 0.624195992946625],
  [0.445681989192963, 0.566076993942261],
  [0.465844005346298, 0.620640993118286],
  [0.49992299079895, 0.351523995399475],
  [0.288718998432159, 0.819945991039276],
  [0.335278987884521, 0.852819979190826],
  [0.440512001514435, 0.902418971061707],
  [0.128294005990028, 0.791940987110138],
  [0.408771991729736, 0.373893976211548],
  [0.455606997013092, 0.451801002025604],
  [0.499877005815506, 0.908990025520325],
  [0.375436991453171, 0.924192011356354],
  [0.11421000212431, 0.615022003650665],
  [0.448662012815475, 0.695277988910675],
  [0.4480200111866, 0.704632043838501],
  [0.447111994028091, 0.715808033943176],
  [0.444831997156143, 0.730794012546539],
  [0.430011987686157, 0.766808986663818],
  [0.406787008047104, 0.685672998428345],
  [0.400738000869751, 0.681069016456604],
  [0.392399996519089, 0.677703022956848],
  [0.367855995893478, 0.663918972015381],
  [0.247923001646996, 0.601333022117615],
  [0.452769994735718, 0.420849978923798],
  [0.43639200925827, 0.359887003898621],
  [0.416164010763168, 0.368713974952698],
  [0.413385987281799, 0.692366003990173],
  [0.228018000721931, 0.683571994304657],
  [0.468268007040024, 0.352671027183533],
  [0.411361992359161, 0.804327011108398],
  [0.499989002943039, 0.469825029373169],
  [0.479153990745544, 0.442654013633728],
  [0.499974012374878, 0.439637005329132],
  [0.432112008333206, 0.493588984012604],
  [0.499886006116867, 0.866917014122009],
  [0.49991300702095, 0.821729004383087],
  [0.456548988819122, 0.819200992584229],
  [0.344549000263214, 0.745438992977142],
  [0.37890899181366, 0.574010014533997],
  [0.374292999505997, 0.780184984207153],
  [0.319687992334366, 0.570737957954407],
  [0.357154995203018, 0.604269981384277],
  [0.295284003019333, 0.621580958366394],
  [0.447750002145767, 0.862477004528046],
  [0.410986006259918, 0.508723020553589],
  [0.31395098567009, 0.775308012962341],
  [0.354128003120422, 0.812552988529205],
  [0.324548006057739, 0.703992962837219],
  [0.189096003770828, 0.646299958229065],
  [0.279776990413666, 0.71465802192688],
  [0.1338230073452, 0.682700991630554],
  [0.336768001317978, 0.644733011722565],
  [0.429883986711502, 0.466521978378296],
  [0.455527991056442, 0.548622965812683],
  [0.437114000320435, 0.558896005153656],
  [0.467287987470627, 0.529924988746643],
  [0.414712011814117, 0.335219979286194],
  [0.37704598903656, 0.322777986526489],
  [0.344107985496521, 0.320150971412659],
  [0.312875986099243, 0.32233202457428],
  [0.283526003360748, 0.333190023899078],
  [0.241245999932289, 0.382785975933075],
  [0.102986000478268, 0.468762993812561],
  [0.267612010240555, 0.424560010433197],
  [0.297879010438919, 0.433175981044769],
  [0.333433985710144, 0.433878004550934],
  [0.366427004337311, 0.426115989685059],
  [0.396012008190155, 0.416696012020111],
  [0.420121014118195, 0.41022801399231],
  [0.007561000064015, 0.480777025222778],
  [0.432949006557465, 0.569517970085144],
  [0.458638995885849, 0.479089021682739],
  [0.473466008901596, 0.545744001865387],
  [0.476087987422943, 0.563830018043518],
  [0.468472003936768, 0.555056989192963],
  [0.433990985155106, 0.582361996173859],
  [0.483518004417419, 0.562983989715576],
  [0.482482999563217, 0.57784903049469],
  [0.42645001411438, 0.389798998832703],
  [0.438998997211456, 0.39649498462677],
  [0.450067013502121, 0.400434017181396],
  [0.289712011814117, 0.368252992630005],
  [0.276670008897781, 0.363372981548309],
  [0.517862021923065, 0.471948027610779],
  [0.710287988185883, 0.380764007568359],
  [0.526226997375488, 0.573909997940063],
  [0.895093023777008, 0.254140973091125],
  [0.634069979190826, 0.409575998783112],
  [0.661242008209229, 0.41302502155304],
  [0.688880026340485, 0.409460008144379],
  [0.725341975688934, 0.389131009578705],
  [0.606630027294159, 0.40370500087738],
  [0.654766023159027, 0.344011008739471],
  [0.629905998706818, 0.346076011657715],
  [0.680678009986877, 0.347265005111694],
  [0.702096998691559, 0.353591024875641],
  [0.75221198797226, 0.410804986953735],
  [0.602918028831482, 0.842862963676453],
  [0.719901978969574, 0.375599980354309],
  [0.893692970275879, 0.399959981441498],
  [0.790081977844238, 0.391354024410248],
  [0.643998026847839, 0.534487962722778],
  [0.528249025344849, 0.65040397644043],
  [0.525849997997284, 0.680191040039062],
  [0.560214996337891, 0.657229006290436],
  [0.585384011268616, 0.66654098033905],
  [0.549625992774963, 0.680860996246338],
  [0.57122802734375, 0.682691991329193],
  [0.624852001667023, 0.72809898853302],
  [0.513050019741058, 0.547281980514526],
  [0.51509702205658, 0.527251958847046],
  [0.742246985435486, 0.314507007598877],
  [0.598631024360657, 0.454979002475739],
  [0.570338010787964, 0.548575043678284],
  [0.578631997108459, 0.533622980117798],
  [0.723087012767792, 0.532054007053375],
  [0.516445994377136, 0.499638974666595],
  [0.662801027297974, 0.282917976379395],
  [0.70362401008606, 0.293271005153656],
  [0.830704987049103, 0.193813979625702],
  [0.552385985851288, 0.302568018436432],
  [0.607609987258911, 0.353887975215912],
  [0.645429015159607, 0.696707010269165],
  [0.932694971561432, 0.730105042457581],
  [0.557260990142822, 0.572826027870178],
  [0.542901992797852, 0.584792017936707],
  [0.6180260181427, 0.694710969924927],
  [0.607590973377228, 0.694203019142151],
  [0.722943007946014, 0.271963000297546],
  [0.577413976192474, 0.563166975975037],
  [0.614082992076874, 0.281386971473694],
  [0.616907000541687, 0.255886018276215],
  [0.668509006500244, 0.119913995265961],
  [0.770092010498047, 0.232020974159241],
  [0.635536015033722, 0.189248979091644],
  [0.77039098739624, 0.299556016921997],
  [0.826722025871277, 0.278755009174347],
  [0.527121007442474, 0.666198015213013],
  [0.553171992301941, 0.668527007102966],
  [0.577238023281097, 0.673889994621277],
  [0.554691970348358, 0.580065965652466],
  [0.611896991729736, 0.693961024284363],
  [0.59696102142334, 0.706539988517761],
  [0.596370995044708, 0.693953037261963],
  [0.539958000183105, 0.557139039039612],
  [0.568841993808746, 0.692366003990173],
  [0.547818005084991, 0.692366003990173],
  [0.52461302280426, 0.692366003990173],
  [0.534089982509613, 0.779141008853912],
  [0.527670979499817, 0.736225962638855],
  [0.526912987232208, 0.717857003211975],
  [0.526877999305725, 0.704625964164734],
  [0.526966989040375, 0.695277988910675],
  [0.572058022022247, 0.695277988910675],
  [0.573521018028259, 0.703539967536926],
  [0.57683801651001, 0.711845993995667],
  [0.581691026687622, 0.720062971115112],
  [0.609944999217987, 0.639909982681274],
  [0.986046016216278, 0.560034036636353],
  [0.5867999792099, 0.69539999961853],
  [0.590372025966644, 0.701822996139526],
  [0.531915009021759, 0.601536989212036],
  [0.577268004417419, 0.585934996604919],
  [0.536915004253387, 0.593786001205444],
  [0.627542972564697, 0.473352015018463],
  [0.665585994720459, 0.495950996875763],
  [0.588353991508484, 0.546862006187439],
  [0.757824003696442, 0.14767599105835],
  [0.709249973297119, 0.201507985591888],
  [0.672684013843536, 0.256581008434296],
  [0.600408971309662, 0.74900496006012],
  [0.55826598405838, 0.261672019958496],
  [0.570303976535797, 0.187870979309082],
  [0.588165998458862, 0.109044015407562],
  [0.711045026779175, 0.398952007293701],
  [0.781069993972778, 0.435405015945435],
  [0.587247014045715, 0.398931980133057],
  [0.742869973182678, 0.355445981025696],
  [0.572156012058258, 0.437651991844177],
  [0.55186802148819, 0.536570012569427],
  [0.821442008018494, 0.457556009292603],
  [0.752701997756958, 0.457181990146637],
  [0.71375697851181, 0.467626988887787],
  [0.66711300611496, 0.460672974586487],
  [0.631101012229919, 0.447153985500336],
  [0.6008620262146, 0.432473003864288],
  [0.523481011390686, 0.405627012252808],
  [0.810747981071472, 0.523926019668579],
  [0.771045982837677, 0.348959028720856],
  [0.509127020835876, 0.562718033790588],
  [0.595292985439301, 0.485023975372314],
  [0.980530977249146, 0.401564002037048],
  [0.573499977588654, 0.420000016689301],
  [0.602994978427887, 0.548687994480133],
  [0.733529984951019, 0.376977026462555],
  [0.560611009597778, 0.519016981124878],
  [0.967685997486115, 0.644356966018677],
  [0.580985009670258, 0.387160003185272],
  [0.537728011608124, 0.505385041236877],
  [0.760966002941132, 0.779752969741821],
  [0.801778972148895, 0.831938028335571],
  [0.892440974712372, 0.54076099395752],
  [0.816350996494293, 0.740260004997253],
  [0.865594983100891, 0.333687007427216],
  [0.614073991775513, 0.883246004581451],
  [0.508952975273132, 0.579437971115112],
  [0.617941975593567, 0.508316040039062],
  [0.825608015060425, 0.397674977779388],
  [0.681214988231659, 0.39623498916626],
  [0.656635999679565, 0.400596976280212],
  [0.603900015354156, 0.710216999053955],
  [0.81208598613739, 0.588539004325867],
  [0.56801301240921, 0.944564998149872],
  [0.681007981300354, 0.898285031318665],
  [0.733752012252808, 0.869701027870178],
  [0.633830010890961, 0.398822009563446],
  [0.606792986392975, 0.39553701877594],
  [0.589659988880157, 0.391062021255493],
  [0.805015981197357, 0.342108011245728],
  [0.611334979534149, 0.362284004688263],
  [0.634037971496582, 0.355970978736877],
  [0.656635999679565, 0.355356991291046],
  [0.681214988231659, 0.35834002494812],
  [0.698584973812103, 0.363156020641327],
  [0.941866993904114, 0.319076001644135],
  [0.698584973812103, 0.387449026107788],
  [0.584177017211914, 0.624107003211975],
  [0.554318010807037, 0.566076993942261],
  [0.534153997898102, 0.62064003944397],
  [0.711217999458313, 0.819975018501282],
  [0.664629995822906, 0.852871000766754],
  [0.559099972248077, 0.902631998062134],
  [0.871706008911133, 0.791940987110138],
  [0.591234028339386, 0.373893976211548],
  [0.544341027736664, 0.451583981513977],
  [0.624562978744507, 0.924192011356354],
  [0.88577002286911, 0.615028977394104],
  [0.551338016986847, 0.695277988910675],
  [0.551980018615723, 0.704632043838501],
  [0.552887976169586, 0.715808033943176],
  [0.555167973041534, 0.730794012546539],
  [0.569944024085999, 0.767035007476807],
  [0.593203008174896, 0.685675978660583],
  [0.599261999130249, 0.681069016456604],
  [0.607599973678589, 0.677703022956848],
  [0.631937980651855, 0.663500010967255],
  [0.752032995223999, 0.601315021514893],
  [0.547226011753082, 0.420395016670227],
  [0.563543975353241, 0.359827995300293],
  [0.583841025829315, 0.368713974952698],
  [0.586614012718201, 0.692366003990173],
  [0.771915018558502, 0.683578014373779],
  [0.531597018241882, 0.352482974529266],
  [0.588370978832245, 0.804440975189209],
  [0.52079701423645, 0.442565023899078],
  [0.567984998226166, 0.493479013442993],
  [0.543282985687256, 0.819254994392395],
  [0.655317008495331, 0.745514988899231],
  [0.621008992195129, 0.574018001556396],
  [0.625559985637665, 0.78031200170517],
  [0.680198013782501, 0.570719003677368],
  [0.64276397228241, 0.604337990283966],
  [0.704662978649139, 0.621529996395111],
  [0.552012026309967, 0.862591981887817],
  [0.589071989059448, 0.508637011051178],
  [0.685944974422455, 0.775357007980347],
  [0.645735025405884, 0.812640011310577],
  [0.675342977046967, 0.703978002071381],
  [0.810858011245728, 0.646304965019226],
  [0.72012197971344, 0.714666962623596],
  [0.866151988506317, 0.682704985141754],
  [0.663187026977539, 0.644596993923187],
  [0.570082008838654, 0.466325998306274],
  [0.544561982154846, 0.548375964164734],
  [0.562758982181549, 0.558784961700439],
  [0.531987011432648, 0.530140042304993],
  [0.585271000862122, 0.335177004337311],
  [0.622952997684479, 0.32277899980545],
  [0.655896008014679, 0.320163011550903],
  [0.687132000923157, 0.322345972061157],
  [0.716481983661652, 0.333200991153717],
  [0.758756995201111, 0.382786989212036],
  [0.897013008594513, 0.468769013881683],
  [0.732392013072968, 0.424547016620636],
  [0.70211398601532, 0.433162987232208],
  [0.66652500629425, 0.433866024017334],
  [0.633504986763, 0.426087975502014],
  [0.603875994682312, 0.416586995124817],
  [0.579657971858978, 0.409945011138916],
  [0.992439985275269, 0.480777025222778],
  [0.567192018032074, 0.569419980049133],
  [0.54136598110199, 0.478899002075195],
  [0.526564002037048, 0.546118021011353],
  [0.523913025856018, 0.563830018043518],
  [0.531529009342194, 0.555056989192963],
  [0.566035985946655, 0.582329034805298],
  [0.51631098985672, 0.563053965568542],
  [0.5174720287323, 0.577877044677734],
  [0.573594987392426, 0.389806985855103],
  [0.560697972774506, 0.395331978797913],
  [0.549755990505219, 0.399751007556915],
  [0.710287988185883, 0.368252992630005],
  [0.723330020904541, 0.363372981548309]
];
var TRI468 = [
  127,
  34,
  139,
  11,
  0,
  37,
  232,
  231,
  120,
  72,
  37,
  39,
  128,
  121,
  47,
  232,
  121,
  128,
  104,
  69,
  67,
  175,
  171,
  148,
  157,
  154,
  155,
  118,
  50,
  101,
  73,
  39,
  40,
  9,
  151,
  108,
  48,
  115,
  131,
  194,
  204,
  211,
  74,
  40,
  185,
  80,
  42,
  183,
  40,
  92,
  186,
  230,
  229,
  118,
  202,
  212,
  214,
  83,
  18,
  17,
  76,
  61,
  146,
  160,
  29,
  30,
  56,
  157,
  173,
  106,
  204,
  194,
  135,
  214,
  192,
  203,
  165,
  98,
  21,
  71,
  68,
  51,
  45,
  4,
  144,
  24,
  23,
  77,
  146,
  91,
  205,
  50,
  187,
  201,
  200,
  18,
  91,
  106,
  182,
  90,
  91,
  181,
  85,
  84,
  17,
  206,
  203,
  36,
  148,
  171,
  140,
  92,
  40,
  39,
  193,
  189,
  244,
  159,
  158,
  28,
  247,
  246,
  161,
  236,
  3,
  196,
  54,
  68,
  104,
  193,
  168,
  8,
  117,
  228,
  31,
  189,
  193,
  55,
  98,
  97,
  99,
  126,
  47,
  100,
  166,
  79,
  218,
  155,
  154,
  26,
  209,
  49,
  131,
  135,
  136,
  150,
  47,
  126,
  217,
  223,
  52,
  53,
  45,
  51,
  134,
  211,
  170,
  140,
  67,
  69,
  108,
  43,
  106,
  91,
  230,
  119,
  120,
  226,
  130,
  247,
  63,
  53,
  52,
  238,
  20,
  242,
  46,
  70,
  156,
  78,
  62,
  96,
  46,
  53,
  63,
  143,
  34,
  227,
  173,
  155,
  133,
  123,
  117,
  111,
  44,
  125,
  19,
  236,
  134,
  51,
  216,
  206,
  205,
  154,
  153,
  22,
  39,
  37,
  167,
  200,
  201,
  208,
  36,
  142,
  100,
  57,
  212,
  202,
  20,
  60,
  99,
  28,
  158,
  157,
  35,
  226,
  113,
  160,
  159,
  27,
  204,
  202,
  210,
  113,
  225,
  46,
  43,
  202,
  204,
  62,
  76,
  77,
  137,
  123,
  116,
  41,
  38,
  72,
  203,
  129,
  142,
  64,
  98,
  240,
  49,
  102,
  64,
  41,
  73,
  74,
  212,
  216,
  207,
  42,
  74,
  184,
  169,
  170,
  211,
  170,
  149,
  176,
  105,
  66,
  69,
  122,
  6,
  168,
  123,
  147,
  187,
  96,
  77,
  90,
  65,
  55,
  107,
  89,
  90,
  180,
  101,
  100,
  120,
  63,
  105,
  104,
  93,
  137,
  227,
  15,
  86,
  85,
  129,
  102,
  49,
  14,
  87,
  86,
  55,
  8,
  9,
  100,
  47,
  121,
  145,
  23,
  22,
  88,
  89,
  179,
  6,
  122,
  196,
  88,
  95,
  96,
  138,
  172,
  136,
  215,
  58,
  172,
  115,
  48,
  219,
  42,
  80,
  81,
  195,
  3,
  51,
  43,
  146,
  61,
  171,
  175,
  199,
  81,
  82,
  38,
  53,
  46,
  225,
  144,
  163,
  110,
  246,
  33,
  7,
  52,
  65,
  66,
  229,
  228,
  117,
  34,
  127,
  234,
  107,
  108,
  69,
  109,
  108,
  151,
  48,
  64,
  235,
  62,
  78,
  191,
  129,
  209,
  126,
  111,
  35,
  143,
  163,
  161,
  246,
  117,
  123,
  50,
  222,
  65,
  52,
  19,
  125,
  141,
  221,
  55,
  65,
  3,
  195,
  197,
  25,
  7,
  33,
  220,
  237,
  44,
  70,
  71,
  139,
  122,
  193,
  245,
  247,
  130,
  33,
  71,
  21,
  162,
  153,
  158,
  159,
  170,
  169,
  150,
  188,
  174,
  196,
  216,
  186,
  92,
  144,
  160,
  161,
  2,
  97,
  167,
  141,
  125,
  241,
  164,
  167,
  37,
  72,
  38,
  12,
  145,
  159,
  160,
  38,
  82,
  13,
  63,
  68,
  71,
  226,
  35,
  111,
  158,
  153,
  154,
  101,
  50,
  205,
  206,
  92,
  165,
  209,
  198,
  217,
  165,
  167,
  97,
  220,
  115,
  218,
  133,
  112,
  243,
  239,
  238,
  241,
  214,
  135,
  169,
  190,
  173,
  133,
  171,
  208,
  32,
  125,
  44,
  237,
  86,
  87,
  178,
  85,
  86,
  179,
  84,
  85,
  180,
  83,
  84,
  181,
  201,
  83,
  182,
  137,
  93,
  132,
  76,
  62,
  183,
  61,
  76,
  184,
  57,
  61,
  185,
  212,
  57,
  186,
  214,
  207,
  187,
  34,
  143,
  156,
  79,
  239,
  237,
  123,
  137,
  177,
  44,
  1,
  4,
  201,
  194,
  32,
  64,
  102,
  129,
  213,
  215,
  138,
  59,
  166,
  219,
  242,
  99,
  97,
  2,
  94,
  141,
  75,
  59,
  235,
  24,
  110,
  228,
  25,
  130,
  226,
  23,
  24,
  229,
  22,
  23,
  230,
  26,
  22,
  231,
  112,
  26,
  232,
  189,
  190,
  243,
  221,
  56,
  190,
  28,
  56,
  221,
  27,
  28,
  222,
  29,
  27,
  223,
  30,
  29,
  224,
  247,
  30,
  225,
  238,
  79,
  20,
  166,
  59,
  75,
  60,
  75,
  240,
  147,
  177,
  215,
  20,
  79,
  166,
  187,
  147,
  213,
  112,
  233,
  244,
  233,
  128,
  245,
  128,
  114,
  188,
  114,
  217,
  174,
  131,
  115,
  220,
  217,
  198,
  236,
  198,
  131,
  134,
  177,
  132,
  58,
  143,
  35,
  124,
  110,
  163,
  7,
  228,
  110,
  25,
  356,
  389,
  368,
  11,
  302,
  267,
  452,
  350,
  349,
  302,
  303,
  269,
  357,
  343,
  277,
  452,
  453,
  357,
  333,
  332,
  297,
  175,
  152,
  377,
  384,
  398,
  382,
  347,
  348,
  330,
  303,
  304,
  270,
  9,
  336,
  337,
  278,
  279,
  360,
  418,
  262,
  431,
  304,
  408,
  409,
  310,
  415,
  407,
  270,
  409,
  410,
  450,
  348,
  347,
  422,
  430,
  434,
  313,
  314,
  17,
  306,
  307,
  375,
  387,
  388,
  260,
  286,
  414,
  398,
  335,
  406,
  418,
  364,
  367,
  416,
  423,
  358,
  327,
  251,
  284,
  298,
  281,
  5,
  4,
  373,
  374,
  253,
  307,
  320,
  321,
  425,
  427,
  411,
  421,
  313,
  18,
  321,
  405,
  406,
  320,
  404,
  405,
  315,
  16,
  17,
  426,
  425,
  266,
  377,
  400,
  369,
  322,
  391,
  269,
  417,
  465,
  464,
  386,
  257,
  258,
  466,
  260,
  388,
  456,
  399,
  419,
  284,
  332,
  333,
  417,
  285,
  8,
  346,
  340,
  261,
  413,
  441,
  285,
  327,
  460,
  328,
  355,
  371,
  329,
  392,
  439,
  438,
  382,
  341,
  256,
  429,
  420,
  360,
  364,
  394,
  379,
  277,
  343,
  437,
  443,
  444,
  283,
  275,
  440,
  363,
  431,
  262,
  369,
  297,
  338,
  337,
  273,
  375,
  321,
  450,
  451,
  349,
  446,
  342,
  467,
  293,
  334,
  282,
  458,
  461,
  462,
  276,
  353,
  383,
  308,
  324,
  325,
  276,
  300,
  293,
  372,
  345,
  447,
  382,
  398,
  362,
  352,
  345,
  340,
  274,
  1,
  19,
  456,
  248,
  281,
  436,
  427,
  425,
  381,
  256,
  252,
  269,
  391,
  393,
  200,
  199,
  428,
  266,
  330,
  329,
  287,
  273,
  422,
  250,
  462,
  328,
  258,
  286,
  384,
  265,
  353,
  342,
  387,
  259,
  257,
  424,
  431,
  430,
  342,
  353,
  276,
  273,
  335,
  424,
  292,
  325,
  307,
  366,
  447,
  345,
  271,
  303,
  302,
  423,
  266,
  371,
  294,
  455,
  460,
  279,
  278,
  294,
  271,
  272,
  304,
  432,
  434,
  427,
  272,
  407,
  408,
  394,
  430,
  431,
  395,
  369,
  400,
  334,
  333,
  299,
  351,
  417,
  168,
  352,
  280,
  411,
  325,
  319,
  320,
  295,
  296,
  336,
  319,
  403,
  404,
  330,
  348,
  349,
  293,
  298,
  333,
  323,
  454,
  447,
  15,
  16,
  315,
  358,
  429,
  279,
  14,
  15,
  316,
  285,
  336,
  9,
  329,
  349,
  350,
  374,
  380,
  252,
  318,
  402,
  403,
  6,
  197,
  419,
  318,
  319,
  325,
  367,
  364,
  365,
  435,
  367,
  397,
  344,
  438,
  439,
  272,
  271,
  311,
  195,
  5,
  281,
  273,
  287,
  291,
  396,
  428,
  199,
  311,
  271,
  268,
  283,
  444,
  445,
  373,
  254,
  339,
  263,
  466,
  249,
  282,
  334,
  296,
  449,
  347,
  346,
  264,
  447,
  454,
  336,
  296,
  299,
  338,
  10,
  151,
  278,
  439,
  455,
  292,
  407,
  415,
  358,
  371,
  355,
  340,
  345,
  372,
  390,
  249,
  466,
  346,
  347,
  280,
  442,
  443,
  282,
  19,
  94,
  370,
  441,
  442,
  295,
  248,
  419,
  197,
  263,
  255,
  359,
  440,
  275,
  274,
  300,
  383,
  368,
  351,
  412,
  465,
  263,
  467,
  466,
  301,
  368,
  389,
  380,
  374,
  386,
  395,
  378,
  379,
  412,
  351,
  419,
  436,
  426,
  322,
  373,
  390,
  388,
  2,
  164,
  393,
  370,
  462,
  461,
  164,
  0,
  267,
  302,
  11,
  12,
  374,
  373,
  387,
  268,
  12,
  13,
  293,
  300,
  301,
  446,
  261,
  340,
  385,
  384,
  381,
  330,
  266,
  425,
  426,
  423,
  391,
  429,
  355,
  437,
  391,
  327,
  326,
  440,
  457,
  438,
  341,
  382,
  362,
  459,
  457,
  461,
  434,
  430,
  394,
  414,
  463,
  362,
  396,
  369,
  262,
  354,
  461,
  457,
  316,
  403,
  402,
  315,
  404,
  403,
  314,
  405,
  404,
  313,
  406,
  405,
  421,
  418,
  406,
  366,
  401,
  361,
  306,
  408,
  407,
  291,
  409,
  408,
  287,
  410,
  409,
  432,
  436,
  410,
  434,
  416,
  411,
  264,
  368,
  383,
  309,
  438,
  457,
  352,
  376,
  401,
  274,
  275,
  4,
  421,
  428,
  262,
  294,
  327,
  358,
  433,
  416,
  367,
  289,
  455,
  439,
  462,
  370,
  326,
  2,
  326,
  370,
  305,
  460,
  455,
  254,
  449,
  448,
  255,
  261,
  446,
  253,
  450,
  449,
  252,
  451,
  450,
  256,
  452,
  451,
  341,
  453,
  452,
  413,
  464,
  463,
  441,
  413,
  414,
  258,
  442,
  441,
  257,
  443,
  442,
  259,
  444,
  443,
  260,
  445,
  444,
  467,
  342,
  445,
  459,
  458,
  250,
  289,
  392,
  290,
  290,
  328,
  460,
  376,
  433,
  435,
  250,
  290,
  392,
  411,
  416,
  433,
  341,
  463,
  464,
  453,
  464,
  465,
  357,
  465,
  412,
  343,
  412,
  399,
  360,
  363,
  440,
  437,
  399,
  456,
  420,
  456,
  363,
  401,
  435,
  288,
  372,
  383,
  353,
  339,
  255,
  249,
  448,
  261,
  255,
  133,
  243,
  190,
  133,
  155,
  112,
  33,
  246,
  247,
  33,
  130,
  25,
  398,
  384,
  286,
  362,
  398,
  414,
  362,
  463,
  341,
  263,
  359,
  467,
  263,
  249,
  255,
  466,
  467,
  260,
  75,
  60,
  166,
  238,
  239,
  79,
  162,
  127,
  139,
  72,
  11,
  37,
  121,
  232,
  120,
  73,
  72,
  39,
  114,
  128,
  47,
  233,
  232,
  128,
  103,
  104,
  67,
  152,
  175,
  148,
  173,
  157,
  155,
  119,
  118,
  101,
  74,
  73,
  40,
  107,
  9,
  108,
  49,
  48,
  131,
  32,
  194,
  211,
  184,
  74,
  185,
  191,
  80,
  183,
  185,
  40,
  186,
  119,
  230,
  118,
  210,
  202,
  214,
  84,
  83,
  17,
  77,
  76,
  146,
  161,
  160,
  30,
  190,
  56,
  173,
  182,
  106,
  194,
  138,
  135,
  192,
  129,
  203,
  98,
  54,
  21,
  68,
  5,
  51,
  4,
  145,
  144,
  23,
  90,
  77,
  91,
  207,
  205,
  187,
  83,
  201,
  18,
  181,
  91,
  182,
  180,
  90,
  181,
  16,
  85,
  17,
  205,
  206,
  36,
  176,
  148,
  140,
  165,
  92,
  39,
  245,
  193,
  244,
  27,
  159,
  28,
  30,
  247,
  161,
  174,
  236,
  196,
  103,
  54,
  104,
  55,
  193,
  8,
  111,
  117,
  31,
  221,
  189,
  55,
  240,
  98,
  99,
  142,
  126,
  100,
  219,
  166,
  218,
  112,
  155,
  26,
  198,
  209,
  131,
  169,
  135,
  150,
  114,
  47,
  217,
  224,
  223,
  53,
  220,
  45,
  134,
  32,
  211,
  140,
  109,
  67,
  108,
  146,
  43,
  91,
  231,
  230,
  120,
  113,
  226,
  247,
  105,
  63,
  52,
  241,
  238,
  242,
  124,
  46,
  156,
  95,
  78,
  96,
  70,
  46,
  63,
  116,
  143,
  227,
  116,
  123,
  111,
  1,
  44,
  19,
  3,
  236,
  51,
  207,
  216,
  205,
  26,
  154,
  22,
  165,
  39,
  167,
  199,
  200,
  208,
  101,
  36,
  100,
  43,
  57,
  202,
  242,
  20,
  99,
  56,
  28,
  157,
  124,
  35,
  113,
  29,
  160,
  27,
  211,
  204,
  210,
  124,
  113,
  46,
  106,
  43,
  204,
  96,
  62,
  77,
  227,
  137,
  116,
  73,
  41,
  72,
  36,
  203,
  142,
  235,
  64,
  240,
  48,
  49,
  64,
  42,
  41,
  74,
  214,
  212,
  207,
  183,
  42,
  184,
  210,
  169,
  211,
  140,
  170,
  176,
  104,
  105,
  69,
  193,
  122,
  168,
  50,
  123,
  187,
  89,
  96,
  90,
  66,
  65,
  107,
  179,
  89,
  180,
  119,
  101,
  120,
  68,
  63,
  104,
  234,
  93,
  227,
  16,
  15,
  85,
  209,
  129,
  49,
  15,
  14,
  86,
  107,
  55,
  9,
  120,
  100,
  121,
  153,
  145,
  22,
  178,
  88,
  179,
  197,
  6,
  196,
  89,
  88,
  96,
  135,
  138,
  136,
  138,
  215,
  172,
  218,
  115,
  219,
  41,
  42,
  81,
  5,
  195,
  51,
  57,
  43,
  61,
  208,
  171,
  199,
  41,
  81,
  38,
  224,
  53,
  225,
  24,
  144,
  110,
  105,
  52,
  66,
  118,
  229,
  117,
  227,
  34,
  234,
  66,
  107,
  69,
  10,
  109,
  151,
  219,
  48,
  235,
  183,
  62,
  191,
  142,
  129,
  126,
  116,
  111,
  143,
  7,
  163,
  246,
  118,
  117,
  50,
  223,
  222,
  52,
  94,
  19,
  141,
  222,
  221,
  65,
  196,
  3,
  197,
  45,
  220,
  44,
  156,
  70,
  139,
  188,
  122,
  245,
  139,
  71,
  162,
  145,
  153,
  159,
  149,
  170,
  150,
  122,
  188,
  196,
  206,
  216,
  92,
  163,
  144,
  161,
  164,
  2,
  167,
  242,
  141,
  241,
  0,
  164,
  37,
  11,
  72,
  12,
  144,
  145,
  160,
  12,
  38,
  13,
  70,
  63,
  71,
  31,
  226,
  111,
  157,
  158,
  154,
  36,
  101,
  205,
  203,
  206,
  165,
  126,
  209,
  217,
  98,
  165,
  97,
  237,
  220,
  218,
  237,
  239,
  241,
  210,
  214,
  169,
  140,
  171,
  32,
  241,
  125,
  237,
  179,
  86,
  178,
  180,
  85,
  179,
  181,
  84,
  180,
  182,
  83,
  181,
  194,
  201,
  182,
  177,
  137,
  132,
  184,
  76,
  183,
  185,
  61,
  184,
  186,
  57,
  185,
  216,
  212,
  186,
  192,
  214,
  187,
  139,
  34,
  156,
  218,
  79,
  237,
  147,
  123,
  177,
  45,
  44,
  4,
  208,
  201,
  32,
  98,
  64,
  129,
  192,
  213,
  138,
  235,
  59,
  219,
  141,
  242,
  97,
  97,
  2,
  141,
  240,
  75,
  235,
  229,
  24,
  228,
  31,
  25,
  226,
  230,
  23,
  229,
  231,
  22,
  230,
  232,
  26,
  231,
  233,
  112,
  232,
  244,
  189,
  243,
  189,
  221,
  190,
  222,
  28,
  221,
  223,
  27,
  222,
  224,
  29,
  223,
  225,
  30,
  224,
  113,
  247,
  225,
  99,
  60,
  240,
  213,
  147,
  215,
  60,
  20,
  166,
  192,
  187,
  213,
  243,
  112,
  244,
  244,
  233,
  245,
  245,
  128,
  188,
  188,
  114,
  174,
  134,
  131,
  220,
  174,
  217,
  236,
  236,
  198,
  134,
  215,
  177,
  58,
  156,
  143,
  124,
  25,
  110,
  7,
  31,
  228,
  25,
  264,
  356,
  368,
  0,
  11,
  267,
  451,
  452,
  349,
  267,
  302,
  269,
  350,
  357,
  277,
  350,
  452,
  357,
  299,
  333,
  297,
  396,
  175,
  377,
  381,
  384,
  382,
  280,
  347,
  330,
  269,
  303,
  270,
  151,
  9,
  337,
  344,
  278,
  360,
  424,
  418,
  431,
  270,
  304,
  409,
  272,
  310,
  407,
  322,
  270,
  410,
  449,
  450,
  347,
  432,
  422,
  434,
  18,
  313,
  17,
  291,
  306,
  375,
  259,
  387,
  260,
  424,
  335,
  418,
  434,
  364,
  416,
  391,
  423,
  327,
  301,
  251,
  298,
  275,
  281,
  4,
  254,
  373,
  253,
  375,
  307,
  321,
  280,
  425,
  411,
  200,
  421,
  18,
  335,
  321,
  406,
  321,
  320,
  405,
  314,
  315,
  17,
  423,
  426,
  266,
  396,
  377,
  369,
  270,
  322,
  269,
  413,
  417,
  464,
  385,
  386,
  258,
  248,
  456,
  419,
  298,
  284,
  333,
  168,
  417,
  8,
  448,
  346,
  261,
  417,
  413,
  285,
  326,
  327,
  328,
  277,
  355,
  329,
  309,
  392,
  438,
  381,
  382,
  256,
  279,
  429,
  360,
  365,
  364,
  379,
  355,
  277,
  437,
  282,
  443,
  283,
  281,
  275,
  363,
  395,
  431,
  369,
  299,
  297,
  337,
  335,
  273,
  321,
  348,
  450,
  349,
  359,
  446,
  467,
  283,
  293,
  282,
  250,
  458,
  462,
  300,
  276,
  383,
  292,
  308,
  325,
  283,
  276,
  293,
  264,
  372,
  447,
  346,
  352,
  340,
  354,
  274,
  19,
  363,
  456,
  281,
  426,
  436,
  425,
  380,
  381,
  252,
  267,
  269,
  393,
  421,
  200,
  428,
  371,
  266,
  329,
  432,
  287,
  422,
  290,
  250,
  328,
  385,
  258,
  384,
  446,
  265,
  342,
  386,
  387,
  257,
  422,
  424,
  430,
  445,
  342,
  276,
  422,
  273,
  424,
  306,
  292,
  307,
  352,
  366,
  345,
  268,
  271,
  302,
  358,
  423,
  371,
  327,
  294,
  460,
  331,
  279,
  294,
  303,
  271,
  304,
  436,
  432,
  427,
  304,
  272,
  408,
  395,
  394,
  431,
  378,
  395,
  400,
  296,
  334,
  299,
  6,
  351,
  168,
  376,
  352,
  411,
  307,
  325,
  320,
  285,
  295,
  336,
  320,
  319,
  404,
  329,
  330,
  349,
  334,
  293,
  333,
  366,
  323,
  447,
  316,
  15,
  315,
  331,
  358,
  279,
  317,
  14,
  316,
  8,
  285,
  9,
  277,
  329,
  350,
  253,
  374,
  252,
  319,
  318,
  403,
  351,
  6,
  419,
  324,
  318,
  325,
  397,
  367,
  365,
  288,
  435,
  397,
  278,
  344,
  439,
  310,
  272,
  311,
  248,
  195,
  281,
  375,
  273,
  291,
  175,
  396,
  199,
  312,
  311,
  268,
  276,
  283,
  445,
  390,
  373,
  339,
  295,
  282,
  296,
  448,
  449,
  346,
  356,
  264,
  454,
  337,
  336,
  299,
  337,
  338,
  151,
  294,
  278,
  455,
  308,
  292,
  415,
  429,
  358,
  355,
  265,
  340,
  372,
  388,
  390,
  466,
  352,
  346,
  280,
  295,
  442,
  282,
  354,
  19,
  370,
  285,
  441,
  295,
  195,
  248,
  197,
  457,
  440,
  274,
  301,
  300,
  368,
  417,
  351,
  465,
  251,
  301,
  389,
  385,
  380,
  386,
  394,
  395,
  379,
  399,
  412,
  419,
  410,
  436,
  322,
  387,
  373,
  388,
  326,
  2,
  393,
  354,
  370,
  461,
  393,
  164,
  267,
  268,
  302,
  12,
  386,
  374,
  387,
  312,
  268,
  13,
  298,
  293,
  301,
  265,
  446,
  340,
  380,
  385,
  381,
  280,
  330,
  425,
  322,
  426,
  391,
  420,
  429,
  437,
  393,
  391,
  326,
  344,
  440,
  438,
  458,
  459,
  461,
  364,
  434,
  394,
  428,
  396,
  262,
  274,
  354,
  457,
  317,
  316,
  402,
  316,
  315,
  403,
  315,
  314,
  404,
  314,
  313,
  405,
  313,
  421,
  406,
  323,
  366,
  361,
  292,
  306,
  407,
  306,
  291,
  408,
  291,
  287,
  409,
  287,
  432,
  410,
  427,
  434,
  411,
  372,
  264,
  383,
  459,
  309,
  457,
  366,
  352,
  401,
  1,
  274,
  4,
  418,
  421,
  262,
  331,
  294,
  358,
  435,
  433,
  367,
  392,
  289,
  439,
  328,
  462,
  326,
  94,
  2,
  370,
  289,
  305,
  455,
  339,
  254,
  448,
  359,
  255,
  446,
  254,
  253,
  449,
  253,
  252,
  450,
  252,
  256,
  451,
  256,
  341,
  452,
  414,
  413,
  463,
  286,
  441,
  414,
  286,
  258,
  441,
  258,
  257,
  442,
  257,
  259,
  443,
  259,
  260,
  444,
  260,
  467,
  445,
  309,
  459,
  250,
  305,
  289,
  290,
  305,
  290,
  460,
  401,
  376,
  435,
  309,
  250,
  392,
  376,
  411,
  433,
  453,
  341,
  464,
  357,
  453,
  465,
  343,
  357,
  412,
  437,
  343,
  399,
  344,
  360,
  440,
  420,
  437,
  456,
  360,
  420,
  363,
  361,
  401,
  288,
  265,
  372,
  353,
  390,
  339,
  249,
  339,
  448,
  255
];
var VTX68 = [
  127,
  234,
  132,
  58,
  172,
  150,
  149,
  148,
  152,
  377,
  378,
  379,
  397,
  288,
  361,
  454,
  356,
  70,
  63,
  105,
  66,
  107,
  336,
  296,
  334,
  293,
  300,
  168,
  6,
  195,
  4,
  98,
  97,
  2,
  326,
  327,
  33,
  160,
  158,
  133,
  153,
  144,
  362,
  385,
  387,
  263,
  373,
  380,
  57,
  40,
  37,
  0,
  267,
  270,
  287,
  321,
  314,
  17,
  84,
  91,
  78,
  81,
  13,
  311,
  308,
  402,
  14,
  178
];
var VTX33 = [33, 133, 362, 263, 1, 62, 308, 159, 145, 386, 374, 6, 102, 331, 2, 13, 14, 70, 105, 107, 336, 334, 300, 54, 10, 284, 50, 280, 234, 454, 58, 288, 152];
var VTX7 = [33, 133, 362, 263, 1, 78, 308];
var UV68 = VTX68.map((x) => UV468[x]);
var UV33 = VTX33.map((x) => UV468[x]);
var UV7 = VTX7.map((x) => UV468[x]);

// src/blazeface/facepipeline.ts
var leftOutline = MESH_ANNOTATIONS["leftEyeLower0"];
var rightOutline = MESH_ANNOTATIONS["rightEyeLower0"];
var eyeLandmarks = {
  leftBounds: [leftOutline[0], leftOutline[leftOutline.length - 1]],
  rightBounds: [rightOutline[0], rightOutline[rightOutline.length - 1]]
};
var meshLandmarks = {
  count: 468,
  mouth: 13,
  symmetryLine: [13, MESH_ANNOTATIONS["midwayBetweenEyes"][0]]
};
var blazeFaceLandmarks = {
  leftEye: 0,
  rightEye: 1,
  nose: 2,
  mouth: 3,
  leftEar: 4,
  rightEar: 5,
  symmetryLine: [3, 2]
};
var irisLandmarks = {
  upperCenter: 3,
  lowerCenter: 4,
  index: 71,
  numCoordinates: 76
};
function replaceRawCoordinates(rawCoords, newCoords, prefix, keys) {
  for (let i = 0; i < MESH_TO_IRIS_INDICES_MAP.length; i++) {
    const { key, indices } = MESH_TO_IRIS_INDICES_MAP[i];
    const originalIndices = MESH_ANNOTATIONS[`${prefix}${key}`];
    if (!keys || keys.includes(key)) {
      for (let j10 = 0; j10 < indices.length; j10++) {
        const index = indices[j10];
        rawCoords[originalIndices[j10]] = [
          newCoords[index][0],
          newCoords[index][1],
          (newCoords[index][2] + rawCoords[originalIndices[j10]][2]) / 2
        ];
      }
    }
  }
}
var Pipeline = class {
  constructor(boundingBoxDetector, meshDetector, irisModel) {
    var _a2, _b;
    this.storedBoxes = [];
    this.boundingBoxDetector = boundingBoxDetector;
    this.meshDetector = meshDetector;
    this.irisModel = irisModel;
    this.boxSize = ((_a2 = boundingBoxDetector == null ? void 0 : boundingBoxDetector.model) == null ? void 0 : _a2.inputs[0].shape[2]) || 0;
    this.meshSize = (meshDetector == null ? void 0 : meshDetector.inputs[0].shape[2]) || ((_b = boundingBoxDetector == null ? void 0 : boundingBoxDetector.model) == null ? void 0 : _b.inputs[0].shape[2]);
    this.irisSize = (irisModel == null ? void 0 : irisModel.inputs[0].shape[1]) || 0;
    this.irisEnlarge = 2.3;
    this.skipped = 0;
    this.detectedFaces = 0;
  }
  transformRawCoords(rawCoords, box6, angle, rotationMatrix) {
    const boxSize = getBoxSize({ startPoint: box6.startPoint, endPoint: box6.endPoint });
    const coordsScaled = rawCoords.map((coord) => [
      boxSize[0] / this.meshSize * (coord[0] - this.meshSize / 2),
      boxSize[1] / this.meshSize * (coord[1] - this.meshSize / 2),
      coord[2]
    ]);
    const coordsRotationMatrix = angle !== 0 ? buildRotationMatrix(angle, [0, 0]) : IDENTITY_MATRIX;
    const coordsRotated = angle !== 0 ? coordsScaled.map((coord) => [...rotatePoint(coord, coordsRotationMatrix), coord[2]]) : coordsScaled;
    const inverseRotationMatrix = angle !== 0 ? invertTransformMatrix(rotationMatrix) : IDENTITY_MATRIX;
    const boxCenter = [...getBoxCenter({ startPoint: box6.startPoint, endPoint: box6.endPoint }), 1];
    return coordsRotated.map((coord) => [
      Math.round(coord[0] + dot(boxCenter, inverseRotationMatrix[0])),
      Math.round(coord[1] + dot(boxCenter, inverseRotationMatrix[1])),
      Math.round(coord[2])
    ]);
  }
  getLeftToRightEyeDepthDifference(rawCoords) {
    const leftEyeZ = rawCoords[eyeLandmarks.leftBounds[0]][2];
    const rightEyeZ = rawCoords[eyeLandmarks.rightBounds[0]][2];
    return leftEyeZ - rightEyeZ;
  }
  getEyeBox(rawCoords, face5, eyeInnerCornerIndex, eyeOuterCornerIndex, flip = false) {
    const box6 = squarifyBox(enlargeBox(calculateLandmarksBoundingBox([rawCoords[eyeInnerCornerIndex], rawCoords[eyeOuterCornerIndex]]), this.irisEnlarge));
    const boxSize = getBoxSize(box6);
    let crop = bn.cropAndResize(face5, [[
      box6.startPoint[1] / this.meshSize,
      box6.startPoint[0] / this.meshSize,
      box6.endPoint[1] / this.meshSize,
      box6.endPoint[0] / this.meshSize
    ]], [0], [this.irisSize, this.irisSize]);
    if (flip && gw.flags.IS_BROWSER) {
      const flipped = bn.flipLeftRight(crop);
      Ae(crop);
      crop = flipped;
    }
    return { box: box6, boxSize, crop };
  }
  getEyeCoords(eyeData, eyeBox, eyeBoxSize, flip = false) {
    const eyeRawCoords = [];
    for (let i = 0; i < irisLandmarks.numCoordinates; i++) {
      const x = eyeData[i * 3];
      const y = eyeData[i * 3 + 1];
      const z10 = eyeData[i * 3 + 2];
      eyeRawCoords.push([
        (flip ? 1 - x / this.irisSize : x / this.irisSize) * eyeBoxSize[0] + eyeBox.startPoint[0],
        y / this.irisSize * eyeBoxSize[1] + eyeBox.startPoint[1],
        z10
      ]);
    }
    return { rawCoords: eyeRawCoords, iris: eyeRawCoords.slice(irisLandmarks.index) };
  }
  getAdjustedIrisCoords(rawCoords, irisCoords, direction) {
    const upperCenterZ = rawCoords[MESH_ANNOTATIONS[`${direction}EyeUpper0`][irisLandmarks.upperCenter]][2];
    const lowerCenterZ = rawCoords[MESH_ANNOTATIONS[`${direction}EyeLower0`][irisLandmarks.lowerCenter]][2];
    const averageZ = (upperCenterZ + lowerCenterZ) / 2;
    return irisCoords.map((coord, i) => {
      let z10 = averageZ;
      if (i === 2) {
        z10 = upperCenterZ;
      } else if (i === 4) {
        z10 = lowerCenterZ;
      }
      return [coord[0], coord[1], z10];
    });
  }
  correctFaceRotation(config3, box6, input) {
    const [indexOfMouth, indexOfForehead] = box6.landmarks.length >= meshLandmarks.count ? meshLandmarks.symmetryLine : blazeFaceLandmarks.symmetryLine;
    const angle = computeRotation(box6.landmarks[indexOfMouth], box6.landmarks[indexOfForehead]);
    const faceCenter = getBoxCenter({ startPoint: box6.startPoint, endPoint: box6.endPoint });
    const faceCenterNormalized = [faceCenter[0] / input.shape[2], faceCenter[1] / input.shape[1]];
    const rotatedImage = bn.rotateWithOffset(input, angle, 0, faceCenterNormalized);
    const rotationMatrix = buildRotationMatrix(-angle, faceCenter);
    const cut = config3.face.mesh.enabled ? cutBoxFromImageAndResize({ startPoint: box6.startPoint, endPoint: box6.endPoint }, rotatedImage, [this.meshSize, this.meshSize]) : cutBoxFromImageAndResize({ startPoint: box6.startPoint, endPoint: box6.endPoint }, rotatedImage, [this.boxSize, this.boxSize]);
    const face5 = ue(cut, 255);
    Ae(cut);
    Ae(rotatedImage);
    return [angle, rotationMatrix, face5];
  }
  async augmentIris(rawCoords, face5) {
    const { box: leftEyeBox, boxSize: leftEyeBoxSize, crop: leftEyeCrop } = this.getEyeBox(rawCoords, face5, eyeLandmarks.leftBounds[0], eyeLandmarks.leftBounds[1], true);
    const { box: rightEyeBox, boxSize: rightEyeBoxSize, crop: rightEyeCrop } = this.getEyeBox(rawCoords, face5, eyeLandmarks.rightBounds[0], eyeLandmarks.rightBounds[1]);
    const combined = tt([leftEyeCrop, rightEyeCrop]);
    Ae(leftEyeCrop);
    Ae(rightEyeCrop);
    const eyePredictions = this.irisModel.predict(combined);
    Ae(combined);
    const eyePredictionsData = await eyePredictions.data();
    Ae(eyePredictions);
    const leftEyeData = eyePredictionsData.slice(0, irisLandmarks.numCoordinates * 3);
    const { rawCoords: leftEyeRawCoords, iris: leftIrisRawCoords } = this.getEyeCoords(leftEyeData, leftEyeBox, leftEyeBoxSize, true);
    const rightEyeData = eyePredictionsData.slice(irisLandmarks.numCoordinates * 3);
    const { rawCoords: rightEyeRawCoords, iris: rightIrisRawCoords } = this.getEyeCoords(rightEyeData, rightEyeBox, rightEyeBoxSize);
    const leftToRightEyeDepthDifference = this.getLeftToRightEyeDepthDifference(rawCoords);
    if (Math.abs(leftToRightEyeDepthDifference) < 30) {
      replaceRawCoordinates(rawCoords, leftEyeRawCoords, "left", null);
      replaceRawCoordinates(rawCoords, rightEyeRawCoords, "right", null);
    } else if (leftToRightEyeDepthDifference < 1) {
      replaceRawCoordinates(rawCoords, leftEyeRawCoords, "left", ["EyeUpper0", "EyeLower0"]);
    } else {
      replaceRawCoordinates(rawCoords, rightEyeRawCoords, "right", ["EyeUpper0", "EyeLower0"]);
    }
    const adjustedLeftIrisCoords = this.getAdjustedIrisCoords(rawCoords, leftIrisRawCoords, "left");
    const adjustedRightIrisCoords = this.getAdjustedIrisCoords(rawCoords, rightIrisRawCoords, "right");
    const newCoords = rawCoords.concat(adjustedLeftIrisCoords).concat(adjustedRightIrisCoords);
    return newCoords;
  }
  async predict(input, config3) {
    let useFreshBox = false;
    let detector;
    if (this.skipped === 0 || this.skipped > config3.face.detector.skipFrames || !config3.face.mesh.enabled || !config3.skipFrame) {
      detector = await this.boundingBoxDetector.getBoundingBoxes(input, config3);
      this.skipped = 0;
    }
    if (config3.skipFrame)
      this.skipped++;
    if (!config3.skipFrame || detector && detector.boxes && (!config3.face.mesh.enabled || detector.boxes.length !== this.detectedFaces && this.detectedFaces !== config3.face.detector.maxDetected)) {
      this.storedBoxes = [];
      this.detectedFaces = 0;
      for (const possible of detector.boxes) {
        const startPoint = await possible.box.startPoint.data();
        const endPoint = await possible.box.endPoint.data();
        const landmarks = await possible.landmarks.array();
        this.storedBoxes.push({ startPoint, endPoint, landmarks, confidence: possible.confidence });
      }
      if (this.storedBoxes.length > 0)
        useFreshBox = true;
    }
    if (useFreshBox) {
      if (!detector || !detector.boxes || detector.boxes.length === 0) {
        this.storedBoxes = [];
        this.detectedFaces = 0;
        return null;
      }
      for (let i = 0; i < this.storedBoxes.length; i++) {
        const scaledBox = scaleBoxCoordinates({ startPoint: this.storedBoxes[i].startPoint, endPoint: this.storedBoxes[i].endPoint }, detector.scaleFactor);
        const enlargedBox = enlargeBox(scaledBox);
        const squarifiedBox = squarifyBox(enlargedBox);
        const landmarks = this.storedBoxes[i].landmarks;
        const confidence = this.storedBoxes[i].confidence;
        this.storedBoxes[i] = { ...squarifiedBox, confidence, landmarks };
      }
    }
    if (detector && detector.boxes) {
      detector.boxes.forEach((prediction) => {
        Ae(prediction.box.startPoint);
        Ae(prediction.box.endPoint);
        Ae(prediction.landmarks);
      });
    }
    const results = [];
    const newBoxes = [];
    for (let box6 of this.storedBoxes) {
      let face5;
      let angle = 0;
      let rotationMatrix;
      if (config3.face.detector.rotation && config3.face.mesh.enabled && gw.flags.IS_BROWSER) {
        [angle, rotationMatrix, face5] = this.correctFaceRotation(config3, box6, input);
      } else {
        rotationMatrix = IDENTITY_MATRIX;
        const clonedImage = input.clone();
        const cut = config3.face.mesh.enabled ? cutBoxFromImageAndResize({ startPoint: box6.startPoint, endPoint: box6.endPoint }, clonedImage, [this.meshSize, this.meshSize]) : cutBoxFromImageAndResize({ startPoint: box6.startPoint, endPoint: box6.endPoint }, clonedImage, [this.boxSize, this.boxSize]);
        face5 = ue(cut, 255);
        Ae(cut);
        Ae(clonedImage);
      }
      if (!config3.face.mesh.enabled) {
        results.push({
          mesh: [],
          box: box6,
          faceConfidence: null,
          boxConfidence: box6.confidence,
          confidence: box6.confidence,
          image: face5
        });
      } else {
        const [contours, confidence, contourCoords] = this.meshDetector.execute(face5);
        Ae(contours);
        const faceConfidence = (await confidence.data())[0];
        Ae(confidence);
        const coordsReshaped = O(contourCoords, [-1, 3]);
        let rawCoords = await coordsReshaped.array();
        Ae(contourCoords);
        Ae(coordsReshaped);
        if (faceConfidence < config3.face.detector.minConfidence) {
          box6.confidence = faceConfidence;
          Ae(face5);
        } else {
          if (config3.face.iris.enabled)
            rawCoords = await this.augmentIris(rawCoords, face5);
          const mesh = this.transformRawCoords(rawCoords, box6, angle, rotationMatrix);
          box6 = { ...enlargeBox(calculateLandmarksBoundingBox(mesh), 1.5), confidence: box6.confidence };
          if (config3.face.detector.rotation && config3.face.mesh.enabled && config3.face.description.enabled && gw.flags.IS_BROWSER) {
            [angle, rotationMatrix, face5] = this.correctFaceRotation(config3, box6, input);
          }
          results.push({
            mesh,
            box: box6,
            faceConfidence,
            boxConfidence: box6.confidence,
            confidence: faceConfidence,
            image: face5
          });
          box6 = { ...squarifyBox(box6), confidence: box6.confidence, faceConfidence };
        }
      }
      newBoxes.push(box6);
    }
    if (config3.face.mesh.enabled)
      this.storedBoxes = newBoxes.filter((a) => a.confidence > config3.face.detector.minConfidence);
    this.detectedFaces = results.length;
    return results;
  }
};

// src/blazeface/facemesh.ts
var faceModels = [null, null, null];
var facePipeline;
async function predict(input, config3) {
  const predictions = await facePipeline.predict(input, config3);
  const results = [];
  let id2 = 0;
  for (const prediction of predictions || []) {
    if (!prediction || prediction.isDisposedInternal)
      continue;
    const meshRaw = prediction.mesh.map((pt) => [
      pt[0] / (input.shape[2] || 0),
      pt[1] / (input.shape[1] || 0),
      pt[2] / facePipeline.meshSize
    ]);
    const annotations3 = {};
    if (prediction.mesh && prediction.mesh.length > 0) {
      for (const key of Object.keys(MESH_ANNOTATIONS))
        annotations3[key] = MESH_ANNOTATIONS[key].map((index) => prediction.mesh[index]);
    }
    const clampedBox = prediction.box ? [
      Math.trunc(Math.max(0, prediction.box.startPoint[0])),
      Math.trunc(Math.max(0, prediction.box.startPoint[1])),
      Math.trunc(Math.min(input.shape[2] || 0, prediction.box.endPoint[0]) - Math.max(0, prediction.box.startPoint[0])),
      Math.trunc(Math.min(input.shape[1] || 0, prediction.box.endPoint[1]) - Math.max(0, prediction.box.startPoint[1]))
    ] : [0, 0, 0, 0];
    const boxRaw3 = prediction.box ? [
      prediction.box.startPoint[0] / (input.shape[2] || 0),
      prediction.box.startPoint[1] / (input.shape[1] || 0),
      (prediction.box.endPoint[0] - prediction.box.startPoint[0]) / (input.shape[2] || 0),
      (prediction.box.endPoint[1] - prediction.box.startPoint[1]) / (input.shape[1] || 0)
    ] : [0, 0, 0, 0];
    results.push({
      id: id2++,
      score: Math.round(100 * prediction.faceConfidence || 100 * prediction.boxConfidence || 0) / 100,
      boxScore: Math.round(100 * prediction.boxConfidence) / 100,
      faceScore: Math.round(100 * prediction.faceConfidence) / 100,
      box: clampedBox,
      boxRaw: boxRaw3,
      mesh: prediction.mesh,
      meshRaw,
      annotations: annotations3,
      tensor: prediction.image
    });
    if (prediction.coords)
      Ae(prediction.coords);
  }
  return results;
}
async function load2(config3) {
  if (!faceModels[0] && config3.face.enabled || !faceModels[1] && config3.face.mesh.enabled || !faceModels[2] && config3.face.iris.enabled) {
    faceModels = await Promise.all([
      !faceModels[0] && config3.face.enabled ? load(config3) : null,
      !faceModels[1] && config3.face.mesh.enabled ? m7(join(config3.modelBasePath, config3.face.mesh.modelPath), { fromTFHub: config3.face.mesh.modelPath.includes("tfhub.dev") }) : null,
      !faceModels[2] && config3.face.iris.enabled ? m7(join(config3.modelBasePath, config3.face.iris.modelPath), { fromTFHub: config3.face.iris.modelPath.includes("tfhub.dev") }) : null
    ]);
    if (config3.face.mesh.enabled) {
      if (!faceModels[1] || !faceModels[1]["modelUrl"])
        log("load model failed:", config3.face.mesh.modelPath);
      else if (config3.debug)
        log("load model:", faceModels[1]["modelUrl"]);
    }
    if (config3.face.iris.enabled) {
      if (!faceModels[2] || !faceModels[2]["modelUrl"])
        log("load model failed:", config3.face.iris.modelPath);
      else if (config3.debug)
        log("load model:", faceModels[2]["modelUrl"]);
    }
  } else if (config3.debug) {
    if (faceModels[0])
      log("cached model:", faceModels[0].model["modelUrl"]);
    if (faceModels[1])
      log("cached model:", faceModels[1]["modelUrl"]);
    if (faceModels[2])
      log("cached model:", faceModels[2]["modelUrl"]);
  }
  facePipeline = new Pipeline(faceModels[0], faceModels[1], faceModels[2]);
  return faceModels;
}
var triangulation = TRI468;
var uvmap = UV468;

// src/faceres/faceres.ts
var model;
var last = [];
var lastCount = 0;
var skipped = Number.MAX_SAFE_INTEGER;
async function load3(config3) {
  const modelUrl = join(config3.modelBasePath, config3.face.description.modelPath);
  if (!model) {
    model = await m7(modelUrl);
    if (!model)
      log("load model failed:", config3.face.description.modelPath);
    else if (config3.debug)
      log("load model:", modelUrl);
  } else if (config3.debug)
    log("cached model:", modelUrl);
  return model;
}
function similarity(embedding1, embedding2, order = 2) {
  if (!embedding1 || !embedding2)
    return 0;
  if ((embedding1 == null ? void 0 : embedding1.length) === 0 || (embedding2 == null ? void 0 : embedding2.length) === 0)
    return 0;
  if ((embedding1 == null ? void 0 : embedding1.length) !== (embedding2 == null ? void 0 : embedding2.length))
    return 0;
  const distance = 5 * embedding1.map((_val, i) => Math.abs(embedding1[i] - embedding2[i]) ** order).reduce((sum, now2) => sum + now2, 0) ** (1 / order);
  const res = Math.max(0, 100 - distance) / 100;
  return res;
}
function match(embedding, db, threshold = 0) {
  let best = { similarity: 0, name: "", source: "", embedding: [] };
  if (!embedding || !db || !Array.isArray(embedding) || !Array.isArray(db))
    return best;
  for (const f of db) {
    if (f.embedding && f.name) {
      const perc = similarity(embedding, f.embedding);
      if (perc > threshold && perc > best.similarity)
        best = { ...f, similarity: perc };
    }
  }
  return best;
}
function enhance(input) {
  const image3 = z(() => {
    const tensor = input.image || input.tensor || input;
    if (!(tensor instanceof je))
      return null;
    const box6 = [[0.05, 0.15, 0.85, 0.85]];
    if (!model.inputs[0].shape)
      return null;
    const crop = tensor.shape.length === 3 ? bn.cropAndResize(gr(tensor, 0), box6, [0], [model.inputs[0].shape[2], model.inputs[0].shape[1]]) : bn.cropAndResize(tensor, box6, [0], [model.inputs[0].shape[2], model.inputs[0].shape[1]]);
    const norm = F(crop, 255);
    return norm;
  });
  return image3;
}
async function predict2(image3, config3, idx, count2) {
  var _a2, _b;
  if (!model)
    return null;
  if (skipped < config3.face.description.skipFrames && config3.skipFrame && lastCount === count2 && ((_a2 = last[idx]) == null ? void 0 : _a2.age) && ((_b = last[idx]) == null ? void 0 : _b.age) > 0) {
    skipped++;
    return last[idx];
  }
  skipped = 0;
  return new Promise(async (resolve) => {
    const enhanced = enhance(image3);
    let resT;
    const obj = {
      age: 0,
      gender: "unknown",
      genderScore: 0,
      descriptor: []
    };
    if (config3.face.description.enabled)
      resT = await model.predict(enhanced);
    Ae(enhanced);
    if (resT) {
      const gender = await resT.find((t) => t.shape[1] === 1).data();
      const confidence = Math.trunc(200 * Math.abs(gender[0] - 0.5)) / 100;
      if (confidence > config3.face.description.minConfidence) {
        obj.gender = gender[0] <= 0.5 ? "female" : "male";
        obj.genderScore = Math.min(0.99, confidence);
      }
      const argmax = ba(resT.find((t) => t.shape[1] === 100), 1);
      const age = (await argmax.data())[0];
      const all2 = await resT.find((t) => t.shape[1] === 100).data();
      obj.age = Math.round(all2[age - 1] > all2[age + 1] ? 10 * age - 100 * all2[age - 1] : 10 * age + 100 * all2[age + 1]) / 10;
      const desc = resT.find((t) => t.shape[1] === 1024);
      const descriptor = await desc.data();
      obj.descriptor = [...descriptor];
      resT.forEach((t) => Ae(t));
    }
    last[idx] = obj;
    lastCount = count2;
    resolve(obj);
  });
}

// src/emotion/emotion.ts
var annotations = ["angry", "disgust", "fear", "happy", "sad", "surprise", "neutral"];
var model2;
var last2 = [];
var lastCount2 = 0;
var skipped2 = Number.MAX_SAFE_INTEGER;
var rgb = [0.2989, 0.587, 0.114];
async function load4(config3) {
  if (!model2) {
    model2 = await m7(join(config3.modelBasePath, config3.face.emotion.modelPath));
    if (!model2 || !model2.modelUrl)
      log("load model failed:", config3.face.emotion.modelPath);
    else if (config3.debug)
      log("load model:", model2.modelUrl);
  } else if (config3.debug)
    log("cached model:", model2.modelUrl);
  return model2;
}
async function predict3(image3, config3, idx, count2) {
  if (!model2)
    return null;
  if (skipped2 < config3.face.emotion.skipFrames && config3.skipFrame && lastCount2 === count2 && last2[idx] && last2[idx].length > 0) {
    skipped2++;
    return last2[idx];
  }
  skipped2 = 0;
  return new Promise(async (resolve) => {
    const resize = bn.resizeBilinear(image3, [model2.inputs[0].shape[2], model2.inputs[0].shape[1]], false);
    const [red, green, blue] = mr(resize, 3, 3);
    Ae(resize);
    const redNorm = F(red, rgb[0]);
    const greenNorm = F(green, rgb[1]);
    const blueNorm = F(blue, rgb[2]);
    Ae(red);
    Ae(green);
    Ae(blue);
    const grayscale = nk([redNorm, greenNorm, blueNorm]);
    Ae(redNorm);
    Ae(greenNorm);
    Ae(blueNorm);
    const normalize = z(() => F(le(grayscale, 0.5), 2));
    Ae(grayscale);
    const obj = [];
    if (config3.face.emotion.enabled) {
      const emotionT = await model2.predict(normalize);
      const data = await emotionT.data();
      Ae(emotionT);
      for (let i = 0; i < data.length; i++) {
        if (data[i] > config3.face.emotion.minConfidence)
          obj.push({ score: Math.min(0.99, Math.trunc(100 * data[i]) / 100), emotion: annotations[i] });
      }
      obj.sort((a, b7) => b7.score - a.score);
    }
    Ae(normalize);
    last2[idx] = obj;
    lastCount2 = count2;
    resolve(obj);
  });
}

// src/posenet/keypoints.ts
var partNames = [
  "nose",
  "leftEye",
  "rightEye",
  "leftEar",
  "rightEar",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "leftWrist",
  "rightWrist",
  "leftHip",
  "rightHip",
  "leftKnee",
  "rightKnee",
  "leftAnkle",
  "rightAnkle"
];
var count = partNames.length;
var partIds = partNames.reduce((result, jointName, i) => {
  result[jointName] = i;
  return result;
}, {});
var connectedPartNames = [
  ["leftHip", "leftShoulder"],
  ["leftElbow", "leftShoulder"],
  ["leftElbow", "leftWrist"],
  ["leftHip", "leftKnee"],
  ["leftKnee", "leftAnkle"],
  ["rightHip", "rightShoulder"],
  ["rightElbow", "rightShoulder"],
  ["rightElbow", "rightWrist"],
  ["rightHip", "rightKnee"],
  ["rightKnee", "rightAnkle"],
  ["leftShoulder", "rightShoulder"],
  ["leftHip", "rightHip"]
];
var connectedPartIndices = connectedPartNames.map(([jointNameA, jointNameB]) => [partIds[jointNameA], partIds[jointNameB]]);
var poseChain = [
  ["nose", "leftEye"],
  ["leftEye", "leftEar"],
  ["nose", "rightEye"],
  ["rightEye", "rightEar"],
  ["nose", "leftShoulder"],
  ["leftShoulder", "leftElbow"],
  ["leftElbow", "leftWrist"],
  ["leftShoulder", "leftHip"],
  ["leftHip", "leftKnee"],
  ["leftKnee", "leftAnkle"],
  ["nose", "rightShoulder"],
  ["rightShoulder", "rightElbow"],
  ["rightElbow", "rightWrist"],
  ["rightShoulder", "rightHip"],
  ["rightHip", "rightKnee"],
  ["rightKnee", "rightAnkle"]
];

// src/posenet/utils.ts
function getBoundingBox(keypoints3) {
  const coord = keypoints3.reduce(({ maxX, maxY, minX, minY }, { position: { x, y } }) => ({
    maxX: Math.max(maxX, x),
    maxY: Math.max(maxY, y),
    minX: Math.min(minX, x),
    minY: Math.min(minY, y)
  }), {
    maxX: Number.NEGATIVE_INFINITY,
    maxY: Number.NEGATIVE_INFINITY,
    minX: Number.POSITIVE_INFINITY,
    minY: Number.POSITIVE_INFINITY
  });
  return [coord.minX, coord.minY, coord.maxX - coord.minX, coord.maxY - coord.minY];
}
function scalePoses(poses2, [height, width], [inputResolutionHeight, inputResolutionWidth]) {
  const scaleY = height / inputResolutionHeight;
  const scaleX = width / inputResolutionWidth;
  const scalePose = (pose, i) => ({
    id: i,
    score: pose.score,
    boxRaw: [pose.box[0] / inputResolutionWidth, pose.box[1] / inputResolutionHeight, pose.box[2] / inputResolutionWidth, pose.box[3] / inputResolutionHeight],
    box: [Math.trunc(pose.box[0] * scaleX), Math.trunc(pose.box[1] * scaleY), Math.trunc(pose.box[2] * scaleX), Math.trunc(pose.box[3] * scaleY)],
    keypoints: pose.keypoints.map(({ score: score3, part, position }) => ({
      score: score3,
      part,
      position: [Math.trunc(position.x * scaleX), Math.trunc(position.y * scaleY)],
      positionRaw: [position.x / inputResolutionHeight, position.y / inputResolutionHeight]
    }))
  });
  const scaledPoses = poses2.map((pose, i) => scalePose(pose, i));
  return scaledPoses;
}
var MaxHeap = class {
  constructor(maxSize2, getElementValue) {
    this.priorityQueue = new Array(maxSize2);
    this.numberOfElements = -1;
    this.getElementValue = getElementValue;
  }
  enqueue(x) {
    this.priorityQueue[++this.numberOfElements] = x;
    this.swim(this.numberOfElements);
  }
  dequeue() {
    const max = this.priorityQueue[0];
    this.exchange(0, this.numberOfElements--);
    this.sink(0);
    this.priorityQueue[this.numberOfElements + 1] = null;
    return max;
  }
  empty() {
    return this.numberOfElements === -1;
  }
  size() {
    return this.numberOfElements + 1;
  }
  all() {
    return this.priorityQueue.slice(0, this.numberOfElements + 1);
  }
  max() {
    return this.priorityQueue[0];
  }
  swim(k) {
    while (k > 0 && this.less(Math.floor(k / 2), k)) {
      this.exchange(k, Math.floor(k / 2));
      k = Math.floor(k / 2);
    }
  }
  sink(k) {
    while (2 * k <= this.numberOfElements) {
      let j10 = 2 * k;
      if (j10 < this.numberOfElements && this.less(j10, j10 + 1))
        j10++;
      if (!this.less(k, j10))
        break;
      this.exchange(k, j10);
      k = j10;
    }
  }
  getValueAt(i) {
    return this.getElementValue(this.priorityQueue[i]);
  }
  less(i, j10) {
    return this.getValueAt(i) < this.getValueAt(j10);
  }
  exchange(i, j10) {
    const t = this.priorityQueue[i];
    this.priorityQueue[i] = this.priorityQueue[j10];
    this.priorityQueue[j10] = t;
  }
};
function getOffsetPoint(y, x, keypoint, offsets) {
  return {
    y: offsets.get(y, x, keypoint),
    x: offsets.get(y, x, keypoint + count)
  };
}
function getImageCoords(part, outputStride2, offsets) {
  const { heatmapY, heatmapX, id: keypoint } = part;
  const { y, x } = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);
  return {
    x: part.heatmapX * outputStride2 + x,
    y: part.heatmapY * outputStride2 + y
  };
}
function clamp(a, min, max) {
  if (a < min)
    return min;
  if (a > max)
    return max;
  return a;
}
function squaredDistance(y12, x12, y22, x22) {
  const dy2 = y22 - y12;
  const dx2 = x22 - x12;
  return dy2 * dy2 + dx2 * dx2;
}
function addVectors(a, b7) {
  return { x: a.x + b7.x, y: a.y + b7.y };
}

// src/posenet/poses.ts
var localMaximumRadius = 1;
var outputStride = 16;
var squaredNmsRadius = 50 ** 2;
function traverse(edgeId, sourceKeypoint, targetId, scores, offsets, displacements, offsetRefineStep = 2) {
  const getDisplacement = (point2) => ({
    y: displacements.get(point2.y, point2.x, edgeId),
    x: displacements.get(point2.y, point2.x, displacements.shape[2] / 2 + edgeId)
  });
  const getStridedIndexNearPoint = (point2, height2, width2) => ({
    y: clamp(Math.round(point2.y / outputStride), 0, height2 - 1),
    x: clamp(Math.round(point2.x / outputStride), 0, width2 - 1)
  });
  const [height, width] = scores.shape;
  const sourceKeypointIndices = getStridedIndexNearPoint(sourceKeypoint.position, height, width);
  const displacement = getDisplacement(sourceKeypointIndices);
  const displacedPoint = addVectors(sourceKeypoint.position, displacement);
  let targetKeypoint = displacedPoint;
  for (let i = 0; i < offsetRefineStep; i++) {
    const targetKeypointIndices = getStridedIndexNearPoint(targetKeypoint, height, width);
    const offsetPoint = getOffsetPoint(targetKeypointIndices.y, targetKeypointIndices.x, targetId, offsets);
    targetKeypoint = addVectors({ x: targetKeypointIndices.x * outputStride, y: targetKeypointIndices.y * outputStride }, { x: offsetPoint.x, y: offsetPoint.y });
  }
  const targetKeyPointIndices = getStridedIndexNearPoint(targetKeypoint, height, width);
  const score3 = scores.get(targetKeyPointIndices.y, targetKeyPointIndices.x, targetId);
  return { position: targetKeypoint, part: partNames[targetId], score: score3 };
}
function decodePose(root, scores, offsets, displacementsFwd, displacementsBwd) {
  const tuples = poseChain.map(([parentJoinName, childJoinName]) => [partIds[parentJoinName], partIds[childJoinName]]);
  const edgesFwd = tuples.map(([, childJointId]) => childJointId);
  const edgesBwd = tuples.map(([parentJointId]) => parentJointId);
  const numParts = scores.shape[2];
  const numEdges = edgesFwd.length;
  const keypoints3 = new Array(numParts);
  const rootPoint = getImageCoords(root.part, outputStride, offsets);
  keypoints3[root.part.id] = {
    score: root.score,
    part: partNames[root.part.id],
    position: rootPoint
  };
  for (let edge = numEdges - 1; edge >= 0; --edge) {
    const sourceId = edgesFwd[edge];
    const targetId = edgesBwd[edge];
    if (keypoints3[sourceId] && !keypoints3[targetId]) {
      keypoints3[targetId] = traverse(edge, keypoints3[sourceId], targetId, scores, offsets, displacementsBwd);
    }
  }
  for (let edge = 0; edge < numEdges; ++edge) {
    const sourceId = edgesBwd[edge];
    const targetId = edgesFwd[edge];
    if (keypoints3[sourceId] && !keypoints3[targetId]) {
      keypoints3[targetId] = traverse(edge, keypoints3[sourceId], targetId, scores, offsets, displacementsFwd);
    }
  }
  return keypoints3;
}
function scoreIsMaximumInLocalWindow(keypointId, score3, heatmapY, heatmapX, scores) {
  const [height, width] = scores.shape;
  let localMaximum = true;
  const yStart = Math.max(heatmapY - localMaximumRadius, 0);
  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);
  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {
    const xStart = Math.max(heatmapX - localMaximumRadius, 0);
    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);
    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {
      if (scores.get(yCurrent, xCurrent, keypointId) > score3) {
        localMaximum = false;
        break;
      }
    }
    if (!localMaximum)
      break;
  }
  return localMaximum;
}
function buildPartWithScoreQueue(minConfidence2, scores) {
  const [height, width, numKeypoints] = scores.shape;
  const queue = new MaxHeap(height * width * numKeypoints, ({ score: score3 }) => score3);
  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {
    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {
      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {
        const score3 = scores.get(heatmapY, heatmapX, keypointId);
        if (score3 < minConfidence2)
          continue;
        if (scoreIsMaximumInLocalWindow(keypointId, score3, heatmapY, heatmapX, scores))
          queue.enqueue({ score: score3, part: { heatmapY, heatmapX, id: keypointId } });
      }
    }
  }
  return queue;
}
function withinRadius(poses2, { x, y }, keypointId) {
  return poses2.some(({ keypoints: keypoints3 }) => {
    var _a2;
    const correspondingKeypoint = (_a2 = keypoints3[keypointId]) == null ? void 0 : _a2.position;
    if (!correspondingKeypoint)
      return false;
    return squaredDistance(y, x, correspondingKeypoint.y, correspondingKeypoint.x) <= squaredNmsRadius;
  });
}
function getInstanceScore(existingPoses, keypoints3) {
  const notOverlappedKeypointScores = keypoints3.reduce((result, { position, score: score3 }, keypointId) => {
    if (!withinRadius(existingPoses, position, keypointId))
      result += score3;
    return result;
  }, 0);
  return notOverlappedKeypointScores / keypoints3.length;
}
function decode(offsets, scores, displacementsFwd, displacementsBwd, maxDetected, minConfidence2) {
  const poses2 = [];
  const queue = buildPartWithScoreQueue(minConfidence2, scores);
  while (poses2.length < maxDetected && !queue.empty()) {
    const root = queue.dequeue();
    const rootImageCoords = getImageCoords(root.part, outputStride, offsets);
    if (withinRadius(poses2, rootImageCoords, root.part.id))
      continue;
    let keypoints3 = decodePose(root, scores, offsets, displacementsFwd, displacementsBwd);
    keypoints3 = keypoints3.filter((a) => a.score > minConfidence2);
    const score3 = getInstanceScore(poses2, keypoints3);
    const box6 = getBoundingBox(keypoints3);
    if (score3 > minConfidence2)
      poses2.push({ keypoints: keypoints3, box: box6, score: Math.round(100 * score3) / 100 });
  }
  return poses2;
}

// src/posenet/posenet.ts
var model3;
var poseNetOutputs = ["MobilenetV1/offset_2/BiasAdd", "MobilenetV1/heatmap_2/BiasAdd", "MobilenetV1/displacement_fwd_2/BiasAdd", "MobilenetV1/displacement_bwd_2/BiasAdd"];
async function predict4(input, config3) {
  const res = z(() => {
    if (!model3.inputs[0].shape)
      return [];
    const resized = bn.resizeBilinear(input, [model3.inputs[0].shape[2], model3.inputs[0].shape[1]]);
    const normalized = le(ue(J(resized, "float32"), 127.5), 1);
    const results = model3.execute(normalized, poseNetOutputs);
    const results3d = results.map((y) => en(y, [0]));
    results3d[1] = results3d[1].sigmoid();
    return results3d;
  });
  const buffers = await Promise.all(res.map((tensor) => tensor.buffer()));
  for (const t of res)
    Ae(t);
  const decoded = await decode(buffers[0], buffers[1], buffers[2], buffers[3], config3.body.maxDetected, config3.body.minConfidence);
  if (!model3.inputs[0].shape)
    return [];
  const scaled = scalePoses(decoded, [input.shape[1], input.shape[2]], [model3.inputs[0].shape[2], model3.inputs[0].shape[1]]);
  return scaled;
}
async function load5(config3) {
  if (!model3) {
    model3 = await m7(join(config3.modelBasePath, config3.body.modelPath));
    if (!model3 || !model3["modelUrl"])
      log("load model failed:", config3.body.modelPath);
    else if (config3.debug)
      log("load model:", model3["modelUrl"]);
  } else if (config3.debug)
    log("cached model:", model3["modelUrl"]);
  return model3;
}

// src/handpose/box.ts
function getBoxSize2(box6) {
  return [
    Math.abs(box6.endPoint[0] - box6.startPoint[0]),
    Math.abs(box6.endPoint[1] - box6.startPoint[1])
  ];
}
function getBoxCenter2(box6) {
  return [
    box6.startPoint[0] + (box6.endPoint[0] - box6.startPoint[0]) / 2,
    box6.startPoint[1] + (box6.endPoint[1] - box6.startPoint[1]) / 2
  ];
}
function cutBoxFromImageAndResize2(box6, image3, cropSize) {
  const h = image3.shape[1];
  const w = image3.shape[2];
  const boxes = [[
    box6.startPoint[1] / h,
    box6.startPoint[0] / w,
    box6.endPoint[1] / h,
    box6.endPoint[0] / w
  ]];
  return bn.cropAndResize(image3, boxes, [0], cropSize);
}
function scaleBoxCoordinates2(box6, factor) {
  const startPoint = [box6.startPoint[0] * factor[0], box6.startPoint[1] * factor[1]];
  const endPoint = [box6.endPoint[0] * factor[0], box6.endPoint[1] * factor[1]];
  const palmLandmarks = box6.palmLandmarks.map((coord) => {
    const scaledCoord = [coord[0] * factor[0], coord[1] * factor[1]];
    return scaledCoord;
  });
  return { startPoint, endPoint, palmLandmarks, confidence: box6.confidence };
}
function enlargeBox2(box6, factor = 1.5) {
  const center = getBoxCenter2(box6);
  const size = getBoxSize2(box6);
  const newHalfSize = [factor * size[0] / 2, factor * size[1] / 2];
  const startPoint = [center[0] - newHalfSize[0], center[1] - newHalfSize[1]];
  const endPoint = [center[0] + newHalfSize[0], center[1] + newHalfSize[1]];
  return { startPoint, endPoint, palmLandmarks: box6.palmLandmarks };
}
function squarifyBox2(box6) {
  const centers = getBoxCenter2(box6);
  const size = getBoxSize2(box6);
  const maxEdge = Math.max(...size);
  const halfSize = maxEdge / 2;
  const startPoint = [centers[0] - halfSize, centers[1] - halfSize];
  const endPoint = [centers[0] + halfSize, centers[1] + halfSize];
  return { startPoint, endPoint, palmLandmarks: box6.palmLandmarks };
}

// src/handpose/anchors.ts
var anchors = [
  { x: 0.015625, y: 0.015625 },
  { x: 0.015625, y: 0.015625 },
  { x: 0.046875, y: 0.015625 },
  { x: 0.046875, y: 0.015625 },
  { x: 0.078125, y: 0.015625 },
  { x: 0.078125, y: 0.015625 },
  { x: 0.109375, y: 0.015625 },
  { x: 0.109375, y: 0.015625 },
  { x: 0.140625, y: 0.015625 },
  { x: 0.140625, y: 0.015625 },
  { x: 0.171875, y: 0.015625 },
  { x: 0.171875, y: 0.015625 },
  { x: 0.203125, y: 0.015625 },
  { x: 0.203125, y: 0.015625 },
  { x: 0.234375, y: 0.015625 },
  { x: 0.234375, y: 0.015625 },
  { x: 0.265625, y: 0.015625 },
  { x: 0.265625, y: 0.015625 },
  { x: 0.296875, y: 0.015625 },
  { x: 0.296875, y: 0.015625 },
  { x: 0.328125, y: 0.015625 },
  { x: 0.328125, y: 0.015625 },
  { x: 0.359375, y: 0.015625 },
  { x: 0.359375, y: 0.015625 },
  { x: 0.390625, y: 0.015625 },
  { x: 0.390625, y: 0.015625 },
  { x: 0.421875, y: 0.015625 },
  { x: 0.421875, y: 0.015625 },
  { x: 0.453125, y: 0.015625 },
  { x: 0.453125, y: 0.015625 },
  { x: 0.484375, y: 0.015625 },
  { x: 0.484375, y: 0.015625 },
  { x: 0.515625, y: 0.015625 },
  { x: 0.515625, y: 0.015625 },
  { x: 0.546875, y: 0.015625 },
  { x: 0.546875, y: 0.015625 },
  { x: 0.578125, y: 0.015625 },
  { x: 0.578125, y: 0.015625 },
  { x: 0.609375, y: 0.015625 },
  { x: 0.609375, y: 0.015625 },
  { x: 0.640625, y: 0.015625 },
  { x: 0.640625, y: 0.015625 },
  { x: 0.671875, y: 0.015625 },
  { x: 0.671875, y: 0.015625 },
  { x: 0.703125, y: 0.015625 },
  { x: 0.703125, y: 0.015625 },
  { x: 0.734375, y: 0.015625 },
  { x: 0.734375, y: 0.015625 },
  { x: 0.765625, y: 0.015625 },
  { x: 0.765625, y: 0.015625 },
  { x: 0.796875, y: 0.015625 },
  { x: 0.796875, y: 0.015625 },
  { x: 0.828125, y: 0.015625 },
  { x: 0.828125, y: 0.015625 },
  { x: 0.859375, y: 0.015625 },
  { x: 0.859375, y: 0.015625 },
  { x: 0.890625, y: 0.015625 },
  { x: 0.890625, y: 0.015625 },
  { x: 0.921875, y: 0.015625 },
  { x: 0.921875, y: 0.015625 },
  { x: 0.953125, y: 0.015625 },
  { x: 0.953125, y: 0.015625 },
  { x: 0.984375, y: 0.015625 },
  { x: 0.984375, y: 0.015625 },
  { x: 0.015625, y: 0.046875 },
  { x: 0.015625, y: 0.046875 },
  { x: 0.046875, y: 0.046875 },
  { x: 0.046875, y: 0.046875 },
  { x: 0.078125, y: 0.046875 },
  { x: 0.078125, y: 0.046875 },
  { x: 0.109375, y: 0.046875 },
  { x: 0.109375, y: 0.046875 },
  { x: 0.140625, y: 0.046875 },
  { x: 0.140625, y: 0.046875 },
  { x: 0.171875, y: 0.046875 },
  { x: 0.171875, y: 0.046875 },
  { x: 0.203125, y: 0.046875 },
  { x: 0.203125, y: 0.046875 },
  { x: 0.234375, y: 0.046875 },
  { x: 0.234375, y: 0.046875 },
  { x: 0.265625, y: 0.046875 },
  { x: 0.265625, y: 0.046875 },
  { x: 0.296875, y: 0.046875 },
  { x: 0.296875, y: 0.046875 },
  { x: 0.328125, y: 0.046875 },
  { x: 0.328125, y: 0.046875 },
  { x: 0.359375, y: 0.046875 },
  { x: 0.359375, y: 0.046875 },
  { x: 0.390625, y: 0.046875 },
  { x: 0.390625, y: 0.046875 },
  { x: 0.421875, y: 0.046875 },
  { x: 0.421875, y: 0.046875 },
  { x: 0.453125, y: 0.046875 },
  { x: 0.453125, y: 0.046875 },
  { x: 0.484375, y: 0.046875 },
  { x: 0.484375, y: 0.046875 },
  { x: 0.515625, y: 0.046875 },
  { x: 0.515625, y: 0.046875 },
  { x: 0.546875, y: 0.046875 },
  { x: 0.546875, y: 0.046875 },
  { x: 0.578125, y: 0.046875 },
  { x: 0.578125, y: 0.046875 },
  { x: 0.609375, y: 0.046875 },
  { x: 0.609375, y: 0.046875 },
  { x: 0.640625, y: 0.046875 },
  { x: 0.640625, y: 0.046875 },
  { x: 0.671875, y: 0.046875 },
  { x: 0.671875, y: 0.046875 },
  { x: 0.703125, y: 0.046875 },
  { x: 0.703125, y: 0.046875 },
  { x: 0.734375, y: 0.046875 },
  { x: 0.734375, y: 0.046875 },
  { x: 0.765625, y: 0.046875 },
  { x: 0.765625, y: 0.046875 },
  { x: 0.796875, y: 0.046875 },
  { x: 0.796875, y: 0.046875 },
  { x: 0.828125, y: 0.046875 },
  { x: 0.828125, y: 0.046875 },
  { x: 0.859375, y: 0.046875 },
  { x: 0.859375, y: 0.046875 },
  { x: 0.890625, y: 0.046875 },
  { x: 0.890625, y: 0.046875 },
  { x: 0.921875, y: 0.046875 },
  { x: 0.921875, y: 0.046875 },
  { x: 0.953125, y: 0.046875 },
  { x: 0.953125, y: 0.046875 },
  { x: 0.984375, y: 0.046875 },
  { x: 0.984375, y: 0.046875 },
  { x: 0.015625, y: 0.078125 },
  { x: 0.015625, y: 0.078125 },
  { x: 0.046875, y: 0.078125 },
  { x: 0.046875, y: 0.078125 },
  { x: 0.078125, y: 0.078125 },
  { x: 0.078125, y: 0.078125 },
  { x: 0.109375, y: 0.078125 },
  { x: 0.109375, y: 0.078125 },
  { x: 0.140625, y: 0.078125 },
  { x: 0.140625, y: 0.078125 },
  { x: 0.171875, y: 0.078125 },
  { x: 0.171875, y: 0.078125 },
  { x: 0.203125, y: 0.078125 },
  { x: 0.203125, y: 0.078125 },
  { x: 0.234375, y: 0.078125 },
  { x: 0.234375, y: 0.078125 },
  { x: 0.265625, y: 0.078125 },
  { x: 0.265625, y: 0.078125 },
  { x: 0.296875, y: 0.078125 },
  { x: 0.296875, y: 0.078125 },
  { x: 0.328125, y: 0.078125 },
  { x: 0.328125, y: 0.078125 },
  { x: 0.359375, y: 0.078125 },
  { x: 0.359375, y: 0.078125 },
  { x: 0.390625, y: 0.078125 },
  { x: 0.390625, y: 0.078125 },
  { x: 0.421875, y: 0.078125 },
  { x: 0.421875, y: 0.078125 },
  { x: 0.453125, y: 0.078125 },
  { x: 0.453125, y: 0.078125 },
  { x: 0.484375, y: 0.078125 },
  { x: 0.484375, y: 0.078125 },
  { x: 0.515625, y: 0.078125 },
  { x: 0.515625, y: 0.078125 },
  { x: 0.546875, y: 0.078125 },
  { x: 0.546875, y: 0.078125 },
  { x: 0.578125, y: 0.078125 },
  { x: 0.578125, y: 0.078125 },
  { x: 0.609375, y: 0.078125 },
  { x: 0.609375, y: 0.078125 },
  { x: 0.640625, y: 0.078125 },
  { x: 0.640625, y: 0.078125 },
  { x: 0.671875, y: 0.078125 },
  { x: 0.671875, y: 0.078125 },
  { x: 0.703125, y: 0.078125 },
  { x: 0.703125, y: 0.078125 },
  { x: 0.734375, y: 0.078125 },
  { x: 0.734375, y: 0.078125 },
  { x: 0.765625, y: 0.078125 },
  { x: 0.765625, y: 0.078125 },
  { x: 0.796875, y: 0.078125 },
  { x: 0.796875, y: 0.078125 },
  { x: 0.828125, y: 0.078125 },
  { x: 0.828125, y: 0.078125 },
  { x: 0.859375, y: 0.078125 },
  { x: 0.859375, y: 0.078125 },
  { x: 0.890625, y: 0.078125 },
  { x: 0.890625, y: 0.078125 },
  { x: 0.921875, y: 0.078125 },
  { x: 0.921875, y: 0.078125 },
  { x: 0.953125, y: 0.078125 },
  { x: 0.953125, y: 0.078125 },
  { x: 0.984375, y: 0.078125 },
  { x: 0.984375, y: 0.078125 },
  { x: 0.015625, y: 0.109375 },
  { x: 0.015625, y: 0.109375 },
  { x: 0.046875, y: 0.109375 },
  { x: 0.046875, y: 0.109375 },
  { x: 0.078125, y: 0.109375 },
  { x: 0.078125, y: 0.109375 },
  { x: 0.109375, y: 0.109375 },
  { x: 0.109375, y: 0.109375 },
  { x: 0.140625, y: 0.109375 },
  { x: 0.140625, y: 0.109375 },
  { x: 0.171875, y: 0.109375 },
  { x: 0.171875, y: 0.109375 },
  { x: 0.203125, y: 0.109375 },
  { x: 0.203125, y: 0.109375 },
  { x: 0.234375, y: 0.109375 },
  { x: 0.234375, y: 0.109375 },
  { x: 0.265625, y: 0.109375 },
  { x: 0.265625, y: 0.109375 },
  { x: 0.296875, y: 0.109375 },
  { x: 0.296875, y: 0.109375 },
  { x: 0.328125, y: 0.109375 },
  { x: 0.328125, y: 0.109375 },
  { x: 0.359375, y: 0.109375 },
  { x: 0.359375, y: 0.109375 },
  { x: 0.390625, y: 0.109375 },
  { x: 0.390625, y: 0.109375 },
  { x: 0.421875, y: 0.109375 },
  { x: 0.421875, y: 0.109375 },
  { x: 0.453125, y: 0.109375 },
  { x: 0.453125, y: 0.109375 },
  { x: 0.484375, y: 0.109375 },
  { x: 0.484375, y: 0.109375 },
  { x: 0.515625, y: 0.109375 },
  { x: 0.515625, y: 0.109375 },
  { x: 0.546875, y: 0.109375 },
  { x: 0.546875, y: 0.109375 },
  { x: 0.578125, y: 0.109375 },
  { x: 0.578125, y: 0.109375 },
  { x: 0.609375, y: 0.109375 },
  { x: 0.609375, y: 0.109375 },
  { x: 0.640625, y: 0.109375 },
  { x: 0.640625, y: 0.109375 },
  { x: 0.671875, y: 0.109375 },
  { x: 0.671875, y: 0.109375 },
  { x: 0.703125, y: 0.109375 },
  { x: 0.703125, y: 0.109375 },
  { x: 0.734375, y: 0.109375 },
  { x: 0.734375, y: 0.109375 },
  { x: 0.765625, y: 0.109375 },
  { x: 0.765625, y: 0.109375 },
  { x: 0.796875, y: 0.109375 },
  { x: 0.796875, y: 0.109375 },
  { x: 0.828125, y: 0.109375 },
  { x: 0.828125, y: 0.109375 },
  { x: 0.859375, y: 0.109375 },
  { x: 0.859375, y: 0.109375 },
  { x: 0.890625, y: 0.109375 },
  { x: 0.890625, y: 0.109375 },
  { x: 0.921875, y: 0.109375 },
  { x: 0.921875, y: 0.109375 },
  { x: 0.953125, y: 0.109375 },
  { x: 0.953125, y: 0.109375 },
  { x: 0.984375, y: 0.109375 },
  { x: 0.984375, y: 0.109375 },
  { x: 0.015625, y: 0.140625 },
  { x: 0.015625, y: 0.140625 },
  { x: 0.046875, y: 0.140625 },
  { x: 0.046875, y: 0.140625 },
  { x: 0.078125, y: 0.140625 },
  { x: 0.078125, y: 0.140625 },
  { x: 0.109375, y: 0.140625 },
  { x: 0.109375, y: 0.140625 },
  { x: 0.140625, y: 0.140625 },
  { x: 0.140625, y: 0.140625 },
  { x: 0.171875, y: 0.140625 },
  { x: 0.171875, y: 0.140625 },
  { x: 0.203125, y: 0.140625 },
  { x: 0.203125, y: 0.140625 },
  { x: 0.234375, y: 0.140625 },
  { x: 0.234375, y: 0.140625 },
  { x: 0.265625, y: 0.140625 },
  { x: 0.265625, y: 0.140625 },
  { x: 0.296875, y: 0.140625 },
  { x: 0.296875, y: 0.140625 },
  { x: 0.328125, y: 0.140625 },
  { x: 0.328125, y: 0.140625 },
  { x: 0.359375, y: 0.140625 },
  { x: 0.359375, y: 0.140625 },
  { x: 0.390625, y: 0.140625 },
  { x: 0.390625, y: 0.140625 },
  { x: 0.421875, y: 0.140625 },
  { x: 0.421875, y: 0.140625 },
  { x: 0.453125, y: 0.140625 },
  { x: 0.453125, y: 0.140625 },
  { x: 0.484375, y: 0.140625 },
  { x: 0.484375, y: 0.140625 },
  { x: 0.515625, y: 0.140625 },
  { x: 0.515625, y: 0.140625 },
  { x: 0.546875, y: 0.140625 },
  { x: 0.546875, y: 0.140625 },
  { x: 0.578125, y: 0.140625 },
  { x: 0.578125, y: 0.140625 },
  { x: 0.609375, y: 0.140625 },
  { x: 0.609375, y: 0.140625 },
  { x: 0.640625, y: 0.140625 },
  { x: 0.640625, y: 0.140625 },
  { x: 0.671875, y: 0.140625 },
  { x: 0.671875, y: 0.140625 },
  { x: 0.703125, y: 0.140625 },
  { x: 0.703125, y: 0.140625 },
  { x: 0.734375, y: 0.140625 },
  { x: 0.734375, y: 0.140625 },
  { x: 0.765625, y: 0.140625 },
  { x: 0.765625, y: 0.140625 },
  { x: 0.796875, y: 0.140625 },
  { x: 0.796875, y: 0.140625 },
  { x: 0.828125, y: 0.140625 },
  { x: 0.828125, y: 0.140625 },
  { x: 0.859375, y: 0.140625 },
  { x: 0.859375, y: 0.140625 },
  { x: 0.890625, y: 0.140625 },
  { x: 0.890625, y: 0.140625 },
  { x: 0.921875, y: 0.140625 },
  { x: 0.921875, y: 0.140625 },
  { x: 0.953125, y: 0.140625 },
  { x: 0.953125, y: 0.140625 },
  { x: 0.984375, y: 0.140625 },
  { x: 0.984375, y: 0.140625 },
  { x: 0.015625, y: 0.171875 },
  { x: 0.015625, y: 0.171875 },
  { x: 0.046875, y: 0.171875 },
  { x: 0.046875, y: 0.171875 },
  { x: 0.078125, y: 0.171875 },
  { x: 0.078125, y: 0.171875 },
  { x: 0.109375, y: 0.171875 },
  { x: 0.109375, y: 0.171875 },
  { x: 0.140625, y: 0.171875 },
  { x: 0.140625, y: 0.171875 },
  { x: 0.171875, y: 0.171875 },
  { x: 0.171875, y: 0.171875 },
  { x: 0.203125, y: 0.171875 },
  { x: 0.203125, y: 0.171875 },
  { x: 0.234375, y: 0.171875 },
  { x: 0.234375, y: 0.171875 },
  { x: 0.265625, y: 0.171875 },
  { x: 0.265625, y: 0.171875 },
  { x: 0.296875, y: 0.171875 },
  { x: 0.296875, y: 0.171875 },
  { x: 0.328125, y: 0.171875 },
  { x: 0.328125, y: 0.171875 },
  { x: 0.359375, y: 0.171875 },
  { x: 0.359375, y: 0.171875 },
  { x: 0.390625, y: 0.171875 },
  { x: 0.390625, y: 0.171875 },
  { x: 0.421875, y: 0.171875 },
  { x: 0.421875, y: 0.171875 },
  { x: 0.453125, y: 0.171875 },
  { x: 0.453125, y: 0.171875 },
  { x: 0.484375, y: 0.171875 },
  { x: 0.484375, y: 0.171875 },
  { x: 0.515625, y: 0.171875 },
  { x: 0.515625, y: 0.171875 },
  { x: 0.546875, y: 0.171875 },
  { x: 0.546875, y: 0.171875 },
  { x: 0.578125, y: 0.171875 },
  { x: 0.578125, y: 0.171875 },
  { x: 0.609375, y: 0.171875 },
  { x: 0.609375, y: 0.171875 },
  { x: 0.640625, y: 0.171875 },
  { x: 0.640625, y: 0.171875 },
  { x: 0.671875, y: 0.171875 },
  { x: 0.671875, y: 0.171875 },
  { x: 0.703125, y: 0.171875 },
  { x: 0.703125, y: 0.171875 },
  { x: 0.734375, y: 0.171875 },
  { x: 0.734375, y: 0.171875 },
  { x: 0.765625, y: 0.171875 },
  { x: 0.765625, y: 0.171875 },
  { x: 0.796875, y: 0.171875 },
  { x: 0.796875, y: 0.171875 },
  { x: 0.828125, y: 0.171875 },
  { x: 0.828125, y: 0.171875 },
  { x: 0.859375, y: 0.171875 },
  { x: 0.859375, y: 0.171875 },
  { x: 0.890625, y: 0.171875 },
  { x: 0.890625, y: 0.171875 },
  { x: 0.921875, y: 0.171875 },
  { x: 0.921875, y: 0.171875 },
  { x: 0.953125, y: 0.171875 },
  { x: 0.953125, y: 0.171875 },
  { x: 0.984375, y: 0.171875 },
  { x: 0.984375, y: 0.171875 },
  { x: 0.015625, y: 0.203125 },
  { x: 0.015625, y: 0.203125 },
  { x: 0.046875, y: 0.203125 },
  { x: 0.046875, y: 0.203125 },
  { x: 0.078125, y: 0.203125 },
  { x: 0.078125, y: 0.203125 },
  { x: 0.109375, y: 0.203125 },
  { x: 0.109375, y: 0.203125 },
  { x: 0.140625, y: 0.203125 },
  { x: 0.140625, y: 0.203125 },
  { x: 0.171875, y: 0.203125 },
  { x: 0.171875, y: 0.203125 },
  { x: 0.203125, y: 0.203125 },
  { x: 0.203125, y: 0.203125 },
  { x: 0.234375, y: 0.203125 },
  { x: 0.234375, y: 0.203125 },
  { x: 0.265625, y: 0.203125 },
  { x: 0.265625, y: 0.203125 },
  { x: 0.296875, y: 0.203125 },
  { x: 0.296875, y: 0.203125 },
  { x: 0.328125, y: 0.203125 },
  { x: 0.328125, y: 0.203125 },
  { x: 0.359375, y: 0.203125 },
  { x: 0.359375, y: 0.203125 },
  { x: 0.390625, y: 0.203125 },
  { x: 0.390625, y: 0.203125 },
  { x: 0.421875, y: 0.203125 },
  { x: 0.421875, y: 0.203125 },
  { x: 0.453125, y: 0.203125 },
  { x: 0.453125, y: 0.203125 },
  { x: 0.484375, y: 0.203125 },
  { x: 0.484375, y: 0.203125 },
  { x: 0.515625, y: 0.203125 },
  { x: 0.515625, y: 0.203125 },
  { x: 0.546875, y: 0.203125 },
  { x: 0.546875, y: 0.203125 },
  { x: 0.578125, y: 0.203125 },
  { x: 0.578125, y: 0.203125 },
  { x: 0.609375, y: 0.203125 },
  { x: 0.609375, y: 0.203125 },
  { x: 0.640625, y: 0.203125 },
  { x: 0.640625, y: 0.203125 },
  { x: 0.671875, y: 0.203125 },
  { x: 0.671875, y: 0.203125 },
  { x: 0.703125, y: 0.203125 },
  { x: 0.703125, y: 0.203125 },
  { x: 0.734375, y: 0.203125 },
  { x: 0.734375, y: 0.203125 },
  { x: 0.765625, y: 0.203125 },
  { x: 0.765625, y: 0.203125 },
  { x: 0.796875, y: 0.203125 },
  { x: 0.796875, y: 0.203125 },
  { x: 0.828125, y: 0.203125 },
  { x: 0.828125, y: 0.203125 },
  { x: 0.859375, y: 0.203125 },
  { x: 0.859375, y: 0.203125 },
  { x: 0.890625, y: 0.203125 },
  { x: 0.890625, y: 0.203125 },
  { x: 0.921875, y: 0.203125 },
  { x: 0.921875, y: 0.203125 },
  { x: 0.953125, y: 0.203125 },
  { x: 0.953125, y: 0.203125 },
  { x: 0.984375, y: 0.203125 },
  { x: 0.984375, y: 0.203125 },
  { x: 0.015625, y: 0.234375 },
  { x: 0.015625, y: 0.234375 },
  { x: 0.046875, y: 0.234375 },
  { x: 0.046875, y: 0.234375 },
  { x: 0.078125, y: 0.234375 },
  { x: 0.078125, y: 0.234375 },
  { x: 0.109375, y: 0.234375 },
  { x: 0.109375, y: 0.234375 },
  { x: 0.140625, y: 0.234375 },
  { x: 0.140625, y: 0.234375 },
  { x: 0.171875, y: 0.234375 },
  { x: 0.171875, y: 0.234375 },
  { x: 0.203125, y: 0.234375 },
  { x: 0.203125, y: 0.234375 },
  { x: 0.234375, y: 0.234375 },
  { x: 0.234375, y: 0.234375 },
  { x: 0.265625, y: 0.234375 },
  { x: 0.265625, y: 0.234375 },
  { x: 0.296875, y: 0.234375 },
  { x: 0.296875, y: 0.234375 },
  { x: 0.328125, y: 0.234375 },
  { x: 0.328125, y: 0.234375 },
  { x: 0.359375, y: 0.234375 },
  { x: 0.359375, y: 0.234375 },
  { x: 0.390625, y: 0.234375 },
  { x: 0.390625, y: 0.234375 },
  { x: 0.421875, y: 0.234375 },
  { x: 0.421875, y: 0.234375 },
  { x: 0.453125, y: 0.234375 },
  { x: 0.453125, y: 0.234375 },
  { x: 0.484375, y: 0.234375 },
  { x: 0.484375, y: 0.234375 },
  { x: 0.515625, y: 0.234375 },
  { x: 0.515625, y: 0.234375 },
  { x: 0.546875, y: 0.234375 },
  { x: 0.546875, y: 0.234375 },
  { x: 0.578125, y: 0.234375 },
  { x: 0.578125, y: 0.234375 },
  { x: 0.609375, y: 0.234375 },
  { x: 0.609375, y: 0.234375 },
  { x: 0.640625, y: 0.234375 },
  { x: 0.640625, y: 0.234375 },
  { x: 0.671875, y: 0.234375 },
  { x: 0.671875, y: 0.234375 },
  { x: 0.703125, y: 0.234375 },
  { x: 0.703125, y: 0.234375 },
  { x: 0.734375, y: 0.234375 },
  { x: 0.734375, y: 0.234375 },
  { x: 0.765625, y: 0.234375 },
  { x: 0.765625, y: 0.234375 },
  { x: 0.796875, y: 0.234375 },
  { x: 0.796875, y: 0.234375 },
  { x: 0.828125, y: 0.234375 },
  { x: 0.828125, y: 0.234375 },
  { x: 0.859375, y: 0.234375 },
  { x: 0.859375, y: 0.234375 },
  { x: 0.890625, y: 0.234375 },
  { x: 0.890625, y: 0.234375 },
  { x: 0.921875, y: 0.234375 },
  { x: 0.921875, y: 0.234375 },
  { x: 0.953125, y: 0.234375 },
  { x: 0.953125, y: 0.234375 },
  { x: 0.984375, y: 0.234375 },
  { x: 0.984375, y: 0.234375 },
  { x: 0.015625, y: 0.265625 },
  { x: 0.015625, y: 0.265625 },
  { x: 0.046875, y: 0.265625 },
  { x: 0.046875, y: 0.265625 },
  { x: 0.078125, y: 0.265625 },
  { x: 0.078125, y: 0.265625 },
  { x: 0.109375, y: 0.265625 },
  { x: 0.109375, y: 0.265625 },
  { x: 0.140625, y: 0.265625 },
  { x: 0.140625, y: 0.265625 },
  { x: 0.171875, y: 0.265625 },
  { x: 0.171875, y: 0.265625 },
  { x: 0.203125, y: 0.265625 },
  { x: 0.203125, y: 0.265625 },
  { x: 0.234375, y: 0.265625 },
  { x: 0.234375, y: 0.265625 },
  { x: 0.265625, y: 0.265625 },
  { x: 0.265625, y: 0.265625 },
  { x: 0.296875, y: 0.265625 },
  { x: 0.296875, y: 0.265625 },
  { x: 0.328125, y: 0.265625 },
  { x: 0.328125, y: 0.265625 },
  { x: 0.359375, y: 0.265625 },
  { x: 0.359375, y: 0.265625 },
  { x: 0.390625, y: 0.265625 },
  { x: 0.390625, y: 0.265625 },
  { x: 0.421875, y: 0.265625 },
  { x: 0.421875, y: 0.265625 },
  { x: 0.453125, y: 0.265625 },
  { x: 0.453125, y: 0.265625 },
  { x: 0.484375, y: 0.265625 },
  { x: 0.484375, y: 0.265625 },
  { x: 0.515625, y: 0.265625 },
  { x: 0.515625, y: 0.265625 },
  { x: 0.546875, y: 0.265625 },
  { x: 0.546875, y: 0.265625 },
  { x: 0.578125, y: 0.265625 },
  { x: 0.578125, y: 0.265625 },
  { x: 0.609375, y: 0.265625 },
  { x: 0.609375, y: 0.265625 },
  { x: 0.640625, y: 0.265625 },
  { x: 0.640625, y: 0.265625 },
  { x: 0.671875, y: 0.265625 },
  { x: 0.671875, y: 0.265625 },
  { x: 0.703125, y: 0.265625 },
  { x: 0.703125, y: 0.265625 },
  { x: 0.734375, y: 0.265625 },
  { x: 0.734375, y: 0.265625 },
  { x: 0.765625, y: 0.265625 },
  { x: 0.765625, y: 0.265625 },
  { x: 0.796875, y: 0.265625 },
  { x: 0.796875, y: 0.265625 },
  { x: 0.828125, y: 0.265625 },
  { x: 0.828125, y: 0.265625 },
  { x: 0.859375, y: 0.265625 },
  { x: 0.859375, y: 0.265625 },
  { x: 0.890625, y: 0.265625 },
  { x: 0.890625, y: 0.265625 },
  { x: 0.921875, y: 0.265625 },
  { x: 0.921875, y: 0.265625 },
  { x: 0.953125, y: 0.265625 },
  { x: 0.953125, y: 0.265625 },
  { x: 0.984375, y: 0.265625 },
  { x: 0.984375, y: 0.265625 },
  { x: 0.015625, y: 0.296875 },
  { x: 0.015625, y: 0.296875 },
  { x: 0.046875, y: 0.296875 },
  { x: 0.046875, y: 0.296875 },
  { x: 0.078125, y: 0.296875 },
  { x: 0.078125, y: 0.296875 },
  { x: 0.109375, y: 0.296875 },
  { x: 0.109375, y: 0.296875 },
  { x: 0.140625, y: 0.296875 },
  { x: 0.140625, y: 0.296875 },
  { x: 0.171875, y: 0.296875 },
  { x: 0.171875, y: 0.296875 },
  { x: 0.203125, y: 0.296875 },
  { x: 0.203125, y: 0.296875 },
  { x: 0.234375, y: 0.296875 },
  { x: 0.234375, y: 0.296875 },
  { x: 0.265625, y: 0.296875 },
  { x: 0.265625, y: 0.296875 },
  { x: 0.296875, y: 0.296875 },
  { x: 0.296875, y: 0.296875 },
  { x: 0.328125, y: 0.296875 },
  { x: 0.328125, y: 0.296875 },
  { x: 0.359375, y: 0.296875 },
  { x: 0.359375, y: 0.296875 },
  { x: 0.390625, y: 0.296875 },
  { x: 0.390625, y: 0.296875 },
  { x: 0.421875, y: 0.296875 },
  { x: 0.421875, y: 0.296875 },
  { x: 0.453125, y: 0.296875 },
  { x: 0.453125, y: 0.296875 },
  { x: 0.484375, y: 0.296875 },
  { x: 0.484375, y: 0.296875 },
  { x: 0.515625, y: 0.296875 },
  { x: 0.515625, y: 0.296875 },
  { x: 0.546875, y: 0.296875 },
  { x: 0.546875, y: 0.296875 },
  { x: 0.578125, y: 0.296875 },
  { x: 0.578125, y: 0.296875 },
  { x: 0.609375, y: 0.296875 },
  { x: 0.609375, y: 0.296875 },
  { x: 0.640625, y: 0.296875 },
  { x: 0.640625, y: 0.296875 },
  { x: 0.671875, y: 0.296875 },
  { x: 0.671875, y: 0.296875 },
  { x: 0.703125, y: 0.296875 },
  { x: 0.703125, y: 0.296875 },
  { x: 0.734375, y: 0.296875 },
  { x: 0.734375, y: 0.296875 },
  { x: 0.765625, y: 0.296875 },
  { x: 0.765625, y: 0.296875 },
  { x: 0.796875, y: 0.296875 },
  { x: 0.796875, y: 0.296875 },
  { x: 0.828125, y: 0.296875 },
  { x: 0.828125, y: 0.296875 },
  { x: 0.859375, y: 0.296875 },
  { x: 0.859375, y: 0.296875 },
  { x: 0.890625, y: 0.296875 },
  { x: 0.890625, y: 0.296875 },
  { x: 0.921875, y: 0.296875 },
  { x: 0.921875, y: 0.296875 },
  { x: 0.953125, y: 0.296875 },
  { x: 0.953125, y: 0.296875 },
  { x: 0.984375, y: 0.296875 },
  { x: 0.984375, y: 0.296875 },
  { x: 0.015625, y: 0.328125 },
  { x: 0.015625, y: 0.328125 },
  { x: 0.046875, y: 0.328125 },
  { x: 0.046875, y: 0.328125 },
  { x: 0.078125, y: 0.328125 },
  { x: 0.078125, y: 0.328125 },
  { x: 0.109375, y: 0.328125 },
  { x: 0.109375, y: 0.328125 },
  { x: 0.140625, y: 0.328125 },
  { x: 0.140625, y: 0.328125 },
  { x: 0.171875, y: 0.328125 },
  { x: 0.171875, y: 0.328125 },
  { x: 0.203125, y: 0.328125 },
  { x: 0.203125, y: 0.328125 },
  { x: 0.234375, y: 0.328125 },
  { x: 0.234375, y: 0.328125 },
  { x: 0.265625, y: 0.328125 },
  { x: 0.265625, y: 0.328125 },
  { x: 0.296875, y: 0.328125 },
  { x: 0.296875, y: 0.328125 },
  { x: 0.328125, y: 0.328125 },
  { x: 0.328125, y: 0.328125 },
  { x: 0.359375, y: 0.328125 },
  { x: 0.359375, y: 0.328125 },
  { x: 0.390625, y: 0.328125 },
  { x: 0.390625, y: 0.328125 },
  { x: 0.421875, y: 0.328125 },
  { x: 0.421875, y: 0.328125 },
  { x: 0.453125, y: 0.328125 },
  { x: 0.453125, y: 0.328125 },
  { x: 0.484375, y: 0.328125 },
  { x: 0.484375, y: 0.328125 },
  { x: 0.515625, y: 0.328125 },
  { x: 0.515625, y: 0.328125 },
  { x: 0.546875, y: 0.328125 },
  { x: 0.546875, y: 0.328125 },
  { x: 0.578125, y: 0.328125 },
  { x: 0.578125, y: 0.328125 },
  { x: 0.609375, y: 0.328125 },
  { x: 0.609375, y: 0.328125 },
  { x: 0.640625, y: 0.328125 },
  { x: 0.640625, y: 0.328125 },
  { x: 0.671875, y: 0.328125 },
  { x: 0.671875, y: 0.328125 },
  { x: 0.703125, y: 0.328125 },
  { x: 0.703125, y: 0.328125 },
  { x: 0.734375, y: 0.328125 },
  { x: 0.734375, y: 0.328125 },
  { x: 0.765625, y: 0.328125 },
  { x: 0.765625, y: 0.328125 },
  { x: 0.796875, y: 0.328125 },
  { x: 0.796875, y: 0.328125 },
  { x: 0.828125, y: 0.328125 },
  { x: 0.828125, y: 0.328125 },
  { x: 0.859375, y: 0.328125 },
  { x: 0.859375, y: 0.328125 },
  { x: 0.890625, y: 0.328125 },
  { x: 0.890625, y: 0.328125 },
  { x: 0.921875, y: 0.328125 },
  { x: 0.921875, y: 0.328125 },
  { x: 0.953125, y: 0.328125 },
  { x: 0.953125, y: 0.328125 },
  { x: 0.984375, y: 0.328125 },
  { x: 0.984375, y: 0.328125 },
  { x: 0.015625, y: 0.359375 },
  { x: 0.015625, y: 0.359375 },
  { x: 0.046875, y: 0.359375 },
  { x: 0.046875, y: 0.359375 },
  { x: 0.078125, y: 0.359375 },
  { x: 0.078125, y: 0.359375 },
  { x: 0.109375, y: 0.359375 },
  { x: 0.109375, y: 0.359375 },
  { x: 0.140625, y: 0.359375 },
  { x: 0.140625, y: 0.359375 },
  { x: 0.171875, y: 0.359375 },
  { x: 0.171875, y: 0.359375 },
  { x: 0.203125, y: 0.359375 },
  { x: 0.203125, y: 0.359375 },
  { x: 0.234375, y: 0.359375 },
  { x: 0.234375, y: 0.359375 },
  { x: 0.265625, y: 0.359375 },
  { x: 0.265625, y: 0.359375 },
  { x: 0.296875, y: 0.359375 },
  { x: 0.296875, y: 0.359375 },
  { x: 0.328125, y: 0.359375 },
  { x: 0.328125, y: 0.359375 },
  { x: 0.359375, y: 0.359375 },
  { x: 0.359375, y: 0.359375 },
  { x: 0.390625, y: 0.359375 },
  { x: 0.390625, y: 0.359375 },
  { x: 0.421875, y: 0.359375 },
  { x: 0.421875, y: 0.359375 },
  { x: 0.453125, y: 0.359375 },
  { x: 0.453125, y: 0.359375 },
  { x: 0.484375, y: 0.359375 },
  { x: 0.484375, y: 0.359375 },
  { x: 0.515625, y: 0.359375 },
  { x: 0.515625, y: 0.359375 },
  { x: 0.546875, y: 0.359375 },
  { x: 0.546875, y: 0.359375 },
  { x: 0.578125, y: 0.359375 },
  { x: 0.578125, y: 0.359375 },
  { x: 0.609375, y: 0.359375 },
  { x: 0.609375, y: 0.359375 },
  { x: 0.640625, y: 0.359375 },
  { x: 0.640625, y: 0.359375 },
  { x: 0.671875, y: 0.359375 },
  { x: 0.671875, y: 0.359375 },
  { x: 0.703125, y: 0.359375 },
  { x: 0.703125, y: 0.359375 },
  { x: 0.734375, y: 0.359375 },
  { x: 0.734375, y: 0.359375 },
  { x: 0.765625, y: 0.359375 },
  { x: 0.765625, y: 0.359375 },
  { x: 0.796875, y: 0.359375 },
  { x: 0.796875, y: 0.359375 },
  { x: 0.828125, y: 0.359375 },
  { x: 0.828125, y: 0.359375 },
  { x: 0.859375, y: 0.359375 },
  { x: 0.859375, y: 0.359375 },
  { x: 0.890625, y: 0.359375 },
  { x: 0.890625, y: 0.359375 },
  { x: 0.921875, y: 0.359375 },
  { x: 0.921875, y: 0.359375 },
  { x: 0.953125, y: 0.359375 },
  { x: 0.953125, y: 0.359375 },
  { x: 0.984375, y: 0.359375 },
  { x: 0.984375, y: 0.359375 },
  { x: 0.015625, y: 0.390625 },
  { x: 0.015625, y: 0.390625 },
  { x: 0.046875, y: 0.390625 },
  { x: 0.046875, y: 0.390625 },
  { x: 0.078125, y: 0.390625 },
  { x: 0.078125, y: 0.390625 },
  { x: 0.109375, y: 0.390625 },
  { x: 0.109375, y: 0.390625 },
  { x: 0.140625, y: 0.390625 },
  { x: 0.140625, y: 0.390625 },
  { x: 0.171875, y: 0.390625 },
  { x: 0.171875, y: 0.390625 },
  { x: 0.203125, y: 0.390625 },
  { x: 0.203125, y: 0.390625 },
  { x: 0.234375, y: 0.390625 },
  { x: 0.234375, y: 0.390625 },
  { x: 0.265625, y: 0.390625 },
  { x: 0.265625, y: 0.390625 },
  { x: 0.296875, y: 0.390625 },
  { x: 0.296875, y: 0.390625 },
  { x: 0.328125, y: 0.390625 },
  { x: 0.328125, y: 0.390625 },
  { x: 0.359375, y: 0.390625 },
  { x: 0.359375, y: 0.390625 },
  { x: 0.390625, y: 0.390625 },
  { x: 0.390625, y: 0.390625 },
  { x: 0.421875, y: 0.390625 },
  { x: 0.421875, y: 0.390625 },
  { x: 0.453125, y: 0.390625 },
  { x: 0.453125, y: 0.390625 },
  { x: 0.484375, y: 0.390625 },
  { x: 0.484375, y: 0.390625 },
  { x: 0.515625, y: 0.390625 },
  { x: 0.515625, y: 0.390625 },
  { x: 0.546875, y: 0.390625 },
  { x: 0.546875, y: 0.390625 },
  { x: 0.578125, y: 0.390625 },
  { x: 0.578125, y: 0.390625 },
  { x: 0.609375, y: 0.390625 },
  { x: 0.609375, y: 0.390625 },
  { x: 0.640625, y: 0.390625 },
  { x: 0.640625, y: 0.390625 },
  { x: 0.671875, y: 0.390625 },
  { x: 0.671875, y: 0.390625 },
  { x: 0.703125, y: 0.390625 },
  { x: 0.703125, y: 0.390625 },
  { x: 0.734375, y: 0.390625 },
  { x: 0.734375, y: 0.390625 },
  { x: 0.765625, y: 0.390625 },
  { x: 0.765625, y: 0.390625 },
  { x: 0.796875, y: 0.390625 },
  { x: 0.796875, y: 0.390625 },
  { x: 0.828125, y: 0.390625 },
  { x: 0.828125, y: 0.390625 },
  { x: 0.859375, y: 0.390625 },
  { x: 0.859375, y: 0.390625 },
  { x: 0.890625, y: 0.390625 },
  { x: 0.890625, y: 0.390625 },
  { x: 0.921875, y: 0.390625 },
  { x: 0.921875, y: 0.390625 },
  { x: 0.953125, y: 0.390625 },
  { x: 0.953125, y: 0.390625 },
  { x: 0.984375, y: 0.390625 },
  { x: 0.984375, y: 0.390625 },
  { x: 0.015625, y: 0.421875 },
  { x: 0.015625, y: 0.421875 },
  { x: 0.046875, y: 0.421875 },
  { x: 0.046875, y: 0.421875 },
  { x: 0.078125, y: 0.421875 },
  { x: 0.078125, y: 0.421875 },
  { x: 0.109375, y: 0.421875 },
  { x: 0.109375, y: 0.421875 },
  { x: 0.140625, y: 0.421875 },
  { x: 0.140625, y: 0.421875 },
  { x: 0.171875, y: 0.421875 },
  { x: 0.171875, y: 0.421875 },
  { x: 0.203125, y: 0.421875 },
  { x: 0.203125, y: 0.421875 },
  { x: 0.234375, y: 0.421875 },
  { x: 0.234375, y: 0.421875 },
  { x: 0.265625, y: 0.421875 },
  { x: 0.265625, y: 0.421875 },
  { x: 0.296875, y: 0.421875 },
  { x: 0.296875, y: 0.421875 },
  { x: 0.328125, y: 0.421875 },
  { x: 0.328125, y: 0.421875 },
  { x: 0.359375, y: 0.421875 },
  { x: 0.359375, y: 0.421875 },
  { x: 0.390625, y: 0.421875 },
  { x: 0.390625, y: 0.421875 },
  { x: 0.421875, y: 0.421875 },
  { x: 0.421875, y: 0.421875 },
  { x: 0.453125, y: 0.421875 },
  { x: 0.453125, y: 0.421875 },
  { x: 0.484375, y: 0.421875 },
  { x: 0.484375, y: 0.421875 },
  { x: 0.515625, y: 0.421875 },
  { x: 0.515625, y: 0.421875 },
  { x: 0.546875, y: 0.421875 },
  { x: 0.546875, y: 0.421875 },
  { x: 0.578125, y: 0.421875 },
  { x: 0.578125, y: 0.421875 },
  { x: 0.609375, y: 0.421875 },
  { x: 0.609375, y: 0.421875 },
  { x: 0.640625, y: 0.421875 },
  { x: 0.640625, y: 0.421875 },
  { x: 0.671875, y: 0.421875 },
  { x: 0.671875, y: 0.421875 },
  { x: 0.703125, y: 0.421875 },
  { x: 0.703125, y: 0.421875 },
  { x: 0.734375, y: 0.421875 },
  { x: 0.734375, y: 0.421875 },
  { x: 0.765625, y: 0.421875 },
  { x: 0.765625, y: 0.421875 },
  { x: 0.796875, y: 0.421875 },
  { x: 0.796875, y: 0.421875 },
  { x: 0.828125, y: 0.421875 },
  { x: 0.828125, y: 0.421875 },
  { x: 0.859375, y: 0.421875 },
  { x: 0.859375, y: 0.421875 },
  { x: 0.890625, y: 0.421875 },
  { x: 0.890625, y: 0.421875 },
  { x: 0.921875, y: 0.421875 },
  { x: 0.921875, y: 0.421875 },
  { x: 0.953125, y: 0.421875 },
  { x: 0.953125, y: 0.421875 },
  { x: 0.984375, y: 0.421875 },
  { x: 0.984375, y: 0.421875 },
  { x: 0.015625, y: 0.453125 },
  { x: 0.015625, y: 0.453125 },
  { x: 0.046875, y: 0.453125 },
  { x: 0.046875, y: 0.453125 },
  { x: 0.078125, y: 0.453125 },
  { x: 0.078125, y: 0.453125 },
  { x: 0.109375, y: 0.453125 },
  { x: 0.109375, y: 0.453125 },
  { x: 0.140625, y: 0.453125 },
  { x: 0.140625, y: 0.453125 },
  { x: 0.171875, y: 0.453125 },
  { x: 0.171875, y: 0.453125 },
  { x: 0.203125, y: 0.453125 },
  { x: 0.203125, y: 0.453125 },
  { x: 0.234375, y: 0.453125 },
  { x: 0.234375, y: 0.453125 },
  { x: 0.265625, y: 0.453125 },
  { x: 0.265625, y: 0.453125 },
  { x: 0.296875, y: 0.453125 },
  { x: 0.296875, y: 0.453125 },
  { x: 0.328125, y: 0.453125 },
  { x: 0.328125, y: 0.453125 },
  { x: 0.359375, y: 0.453125 },
  { x: 0.359375, y: 0.453125 },
  { x: 0.390625, y: 0.453125 },
  { x: 0.390625, y: 0.453125 },
  { x: 0.421875, y: 0.453125 },
  { x: 0.421875, y: 0.453125 },
  { x: 0.453125, y: 0.453125 },
  { x: 0.453125, y: 0.453125 },
  { x: 0.484375, y: 0.453125 },
  { x: 0.484375, y: 0.453125 },
  { x: 0.515625, y: 0.453125 },
  { x: 0.515625, y: 0.453125 },
  { x: 0.546875, y: 0.453125 },
  { x: 0.546875, y: 0.453125 },
  { x: 0.578125, y: 0.453125 },
  { x: 0.578125, y: 0.453125 },
  { x: 0.609375, y: 0.453125 },
  { x: 0.609375, y: 0.453125 },
  { x: 0.640625, y: 0.453125 },
  { x: 0.640625, y: 0.453125 },
  { x: 0.671875, y: 0.453125 },
  { x: 0.671875, y: 0.453125 },
  { x: 0.703125, y: 0.453125 },
  { x: 0.703125, y: 0.453125 },
  { x: 0.734375, y: 0.453125 },
  { x: 0.734375, y: 0.453125 },
  { x: 0.765625, y: 0.453125 },
  { x: 0.765625, y: 0.453125 },
  { x: 0.796875, y: 0.453125 },
  { x: 0.796875, y: 0.453125 },
  { x: 0.828125, y: 0.453125 },
  { x: 0.828125, y: 0.453125 },
  { x: 0.859375, y: 0.453125 },
  { x: 0.859375, y: 0.453125 },
  { x: 0.890625, y: 0.453125 },
  { x: 0.890625, y: 0.453125 },
  { x: 0.921875, y: 0.453125 },
  { x: 0.921875, y: 0.453125 },
  { x: 0.953125, y: 0.453125 },
  { x: 0.953125, y: 0.453125 },
  { x: 0.984375, y: 0.453125 },
  { x: 0.984375, y: 0.453125 },
  { x: 0.015625, y: 0.484375 },
  { x: 0.015625, y: 0.484375 },
  { x: 0.046875, y: 0.484375 },
  { x: 0.046875, y: 0.484375 },
  { x: 0.078125, y: 0.484375 },
  { x: 0.078125, y: 0.484375 },
  { x: 0.109375, y: 0.484375 },
  { x: 0.109375, y: 0.484375 },
  { x: 0.140625, y: 0.484375 },
  { x: 0.140625, y: 0.484375 },
  { x: 0.171875, y: 0.484375 },
  { x: 0.171875, y: 0.484375 },
  { x: 0.203125, y: 0.484375 },
  { x: 0.203125, y: 0.484375 },
  { x: 0.234375, y: 0.484375 },
  { x: 0.234375, y: 0.484375 },
  { x: 0.265625, y: 0.484375 },
  { x: 0.265625, y: 0.484375 },
  { x: 0.296875, y: 0.484375 },
  { x: 0.296875, y: 0.484375 },
  { x: 0.328125, y: 0.484375 },
  { x: 0.328125, y: 0.484375 },
  { x: 0.359375, y: 0.484375 },
  { x: 0.359375, y: 0.484375 },
  { x: 0.390625, y: 0.484375 },
  { x: 0.390625, y: 0.484375 },
  { x: 0.421875, y: 0.484375 },
  { x: 0.421875, y: 0.484375 },
  { x: 0.453125, y: 0.484375 },
  { x: 0.453125, y: 0.484375 },
  { x: 0.484375, y: 0.484375 },
  { x: 0.484375, y: 0.484375 },
  { x: 0.515625, y: 0.484375 },
  { x: 0.515625, y: 0.484375 },
  { x: 0.546875, y: 0.484375 },
  { x: 0.546875, y: 0.484375 },
  { x: 0.578125, y: 0.484375 },
  { x: 0.578125, y: 0.484375 },
  { x: 0.609375, y: 0.484375 },
  { x: 0.609375, y: 0.484375 },
  { x: 0.640625, y: 0.484375 },
  { x: 0.640625, y: 0.484375 },
  { x: 0.671875, y: 0.484375 },
  { x: 0.671875, y: 0.484375 },
  { x: 0.703125, y: 0.484375 },
  { x: 0.703125, y: 0.484375 },
  { x: 0.734375, y: 0.484375 },
  { x: 0.734375, y: 0.484375 },
  { x: 0.765625, y: 0.484375 },
  { x: 0.765625, y: 0.484375 },
  { x: 0.796875, y: 0.484375 },
  { x: 0.796875, y: 0.484375 },
  { x: 0.828125, y: 0.484375 },
  { x: 0.828125, y: 0.484375 },
  { x: 0.859375, y: 0.484375 },
  { x: 0.859375, y: 0.484375 },
  { x: 0.890625, y: 0.484375 },
  { x: 0.890625, y: 0.484375 },
  { x: 0.921875, y: 0.484375 },
  { x: 0.921875, y: 0.484375 },
  { x: 0.953125, y: 0.484375 },
  { x: 0.953125, y: 0.484375 },
  { x: 0.984375, y: 0.484375 },
  { x: 0.984375, y: 0.484375 },
  { x: 0.015625, y: 0.515625 },
  { x: 0.015625, y: 0.515625 },
  { x: 0.046875, y: 0.515625 },
  { x: 0.046875, y: 0.515625 },
  { x: 0.078125, y: 0.515625 },
  { x: 0.078125, y: 0.515625 },
  { x: 0.109375, y: 0.515625 },
  { x: 0.109375, y: 0.515625 },
  { x: 0.140625, y: 0.515625 },
  { x: 0.140625, y: 0.515625 },
  { x: 0.171875, y: 0.515625 },
  { x: 0.171875, y: 0.515625 },
  { x: 0.203125, y: 0.515625 },
  { x: 0.203125, y: 0.515625 },
  { x: 0.234375, y: 0.515625 },
  { x: 0.234375, y: 0.515625 },
  { x: 0.265625, y: 0.515625 },
  { x: 0.265625, y: 0.515625 },
  { x: 0.296875, y: 0.515625 },
  { x: 0.296875, y: 0.515625 },
  { x: 0.328125, y: 0.515625 },
  { x: 0.328125, y: 0.515625 },
  { x: 0.359375, y: 0.515625 },
  { x: 0.359375, y: 0.515625 },
  { x: 0.390625, y: 0.515625 },
  { x: 0.390625, y: 0.515625 },
  { x: 0.421875, y: 0.515625 },
  { x: 0.421875, y: 0.515625 },
  { x: 0.453125, y: 0.515625 },
  { x: 0.453125, y: 0.515625 },
  { x: 0.484375, y: 0.515625 },
  { x: 0.484375, y: 0.515625 },
  { x: 0.515625, y: 0.515625 },
  { x: 0.515625, y: 0.515625 },
  { x: 0.546875, y: 0.515625 },
  { x: 0.546875, y: 0.515625 },
  { x: 0.578125, y: 0.515625 },
  { x: 0.578125, y: 0.515625 },
  { x: 0.609375, y: 0.515625 },
  { x: 0.609375, y: 0.515625 },
  { x: 0.640625, y: 0.515625 },
  { x: 0.640625, y: 0.515625 },
  { x: 0.671875, y: 0.515625 },
  { x: 0.671875, y: 0.515625 },
  { x: 0.703125, y: 0.515625 },
  { x: 0.703125, y: 0.515625 },
  { x: 0.734375, y: 0.515625 },
  { x: 0.734375, y: 0.515625 },
  { x: 0.765625, y: 0.515625 },
  { x: 0.765625, y: 0.515625 },
  { x: 0.796875, y: 0.515625 },
  { x: 0.796875, y: 0.515625 },
  { x: 0.828125, y: 0.515625 },
  { x: 0.828125, y: 0.515625 },
  { x: 0.859375, y: 0.515625 },
  { x: 0.859375, y: 0.515625 },
  { x: 0.890625, y: 0.515625 },
  { x: 0.890625, y: 0.515625 },
  { x: 0.921875, y: 0.515625 },
  { x: 0.921875, y: 0.515625 },
  { x: 0.953125, y: 0.515625 },
  { x: 0.953125, y: 0.515625 },
  { x: 0.984375, y: 0.515625 },
  { x: 0.984375, y: 0.515625 },
  { x: 0.015625, y: 0.546875 },
  { x: 0.015625, y: 0.546875 },
  { x: 0.046875, y: 0.546875 },
  { x: 0.046875, y: 0.546875 },
  { x: 0.078125, y: 0.546875 },
  { x: 0.078125, y: 0.546875 },
  { x: 0.109375, y: 0.546875 },
  { x: 0.109375, y: 0.546875 },
  { x: 0.140625, y: 0.546875 },
  { x: 0.140625, y: 0.546875 },
  { x: 0.171875, y: 0.546875 },
  { x: 0.171875, y: 0.546875 },
  { x: 0.203125, y: 0.546875 },
  { x: 0.203125, y: 0.546875 },
  { x: 0.234375, y: 0.546875 },
  { x: 0.234375, y: 0.546875 },
  { x: 0.265625, y: 0.546875 },
  { x: 0.265625, y: 0.546875 },
  { x: 0.296875, y: 0.546875 },
  { x: 0.296875, y: 0.546875 },
  { x: 0.328125, y: 0.546875 },
  { x: 0.328125, y: 0.546875 },
  { x: 0.359375, y: 0.546875 },
  { x: 0.359375, y: 0.546875 },
  { x: 0.390625, y: 0.546875 },
  { x: 0.390625, y: 0.546875 },
  { x: 0.421875, y: 0.546875 },
  { x: 0.421875, y: 0.546875 },
  { x: 0.453125, y: 0.546875 },
  { x: 0.453125, y: 0.546875 },
  { x: 0.484375, y: 0.546875 },
  { x: 0.484375, y: 0.546875 },
  { x: 0.515625, y: 0.546875 },
  { x: 0.515625, y: 0.546875 },
  { x: 0.546875, y: 0.546875 },
  { x: 0.546875, y: 0.546875 },
  { x: 0.578125, y: 0.546875 },
  { x: 0.578125, y: 0.546875 },
  { x: 0.609375, y: 0.546875 },
  { x: 0.609375, y: 0.546875 },
  { x: 0.640625, y: 0.546875 },
  { x: 0.640625, y: 0.546875 },
  { x: 0.671875, y: 0.546875 },
  { x: 0.671875, y: 0.546875 },
  { x: 0.703125, y: 0.546875 },
  { x: 0.703125, y: 0.546875 },
  { x: 0.734375, y: 0.546875 },
  { x: 0.734375, y: 0.546875 },
  { x: 0.765625, y: 0.546875 },
  { x: 0.765625, y: 0.546875 },
  { x: 0.796875, y: 0.546875 },
  { x: 0.796875, y: 0.546875 },
  { x: 0.828125, y: 0.546875 },
  { x: 0.828125, y: 0.546875 },
  { x: 0.859375, y: 0.546875 },
  { x: 0.859375, y: 0.546875 },
  { x: 0.890625, y: 0.546875 },
  { x: 0.890625, y: 0.546875 },
  { x: 0.921875, y: 0.546875 },
  { x: 0.921875, y: 0.546875 },
  { x: 0.953125, y: 0.546875 },
  { x: 0.953125, y: 0.546875 },
  { x: 0.984375, y: 0.546875 },
  { x: 0.984375, y: 0.546875 },
  { x: 0.015625, y: 0.578125 },
  { x: 0.015625, y: 0.578125 },
  { x: 0.046875, y: 0.578125 },
  { x: 0.046875, y: 0.578125 },
  { x: 0.078125, y: 0.578125 },
  { x: 0.078125, y: 0.578125 },
  { x: 0.109375, y: 0.578125 },
  { x: 0.109375, y: 0.578125 },
  { x: 0.140625, y: 0.578125 },
  { x: 0.140625, y: 0.578125 },
  { x: 0.171875, y: 0.578125 },
  { x: 0.171875, y: 0.578125 },
  { x: 0.203125, y: 0.578125 },
  { x: 0.203125, y: 0.578125 },
  { x: 0.234375, y: 0.578125 },
  { x: 0.234375, y: 0.578125 },
  { x: 0.265625, y: 0.578125 },
  { x: 0.265625, y: 0.578125 },
  { x: 0.296875, y: 0.578125 },
  { x: 0.296875, y: 0.578125 },
  { x: 0.328125, y: 0.578125 },
  { x: 0.328125, y: 0.578125 },
  { x: 0.359375, y: 0.578125 },
  { x: 0.359375, y: 0.578125 },
  { x: 0.390625, y: 0.578125 },
  { x: 0.390625, y: 0.578125 },
  { x: 0.421875, y: 0.578125 },
  { x: 0.421875, y: 0.578125 },
  { x: 0.453125, y: 0.578125 },
  { x: 0.453125, y: 0.578125 },
  { x: 0.484375, y: 0.578125 },
  { x: 0.484375, y: 0.578125 },
  { x: 0.515625, y: 0.578125 },
  { x: 0.515625, y: 0.578125 },
  { x: 0.546875, y: 0.578125 },
  { x: 0.546875, y: 0.578125 },
  { x: 0.578125, y: 0.578125 },
  { x: 0.578125, y: 0.578125 },
  { x: 0.609375, y: 0.578125 },
  { x: 0.609375, y: 0.578125 },
  { x: 0.640625, y: 0.578125 },
  { x: 0.640625, y: 0.578125 },
  { x: 0.671875, y: 0.578125 },
  { x: 0.671875, y: 0.578125 },
  { x: 0.703125, y: 0.578125 },
  { x: 0.703125, y: 0.578125 },
  { x: 0.734375, y: 0.578125 },
  { x: 0.734375, y: 0.578125 },
  { x: 0.765625, y: 0.578125 },
  { x: 0.765625, y: 0.578125 },
  { x: 0.796875, y: 0.578125 },
  { x: 0.796875, y: 0.578125 },
  { x: 0.828125, y: 0.578125 },
  { x: 0.828125, y: 0.578125 },
  { x: 0.859375, y: 0.578125 },
  { x: 0.859375, y: 0.578125 },
  { x: 0.890625, y: 0.578125 },
  { x: 0.890625, y: 0.578125 },
  { x: 0.921875, y: 0.578125 },
  { x: 0.921875, y: 0.578125 },
  { x: 0.953125, y: 0.578125 },
  { x: 0.953125, y: 0.578125 },
  { x: 0.984375, y: 0.578125 },
  { x: 0.984375, y: 0.578125 },
  { x: 0.015625, y: 0.609375 },
  { x: 0.015625, y: 0.609375 },
  { x: 0.046875, y: 0.609375 },
  { x: 0.046875, y: 0.609375 },
  { x: 0.078125, y: 0.609375 },
  { x: 0.078125, y: 0.609375 },
  { x: 0.109375, y: 0.609375 },
  { x: 0.109375, y: 0.609375 },
  { x: 0.140625, y: 0.609375 },
  { x: 0.140625, y: 0.609375 },
  { x: 0.171875, y: 0.609375 },
  { x: 0.171875, y: 0.609375 },
  { x: 0.203125, y: 0.609375 },
  { x: 0.203125, y: 0.609375 },
  { x: 0.234375, y: 0.609375 },
  { x: 0.234375, y: 0.609375 },
  { x: 0.265625, y: 0.609375 },
  { x: 0.265625, y: 0.609375 },
  { x: 0.296875, y: 0.609375 },
  { x: 0.296875, y: 0.609375 },
  { x: 0.328125, y: 0.609375 },
  { x: 0.328125, y: 0.609375 },
  { x: 0.359375, y: 0.609375 },
  { x: 0.359375, y: 0.609375 },
  { x: 0.390625, y: 0.609375 },
  { x: 0.390625, y: 0.609375 },
  { x: 0.421875, y: 0.609375 },
  { x: 0.421875, y: 0.609375 },
  { x: 0.453125, y: 0.609375 },
  { x: 0.453125, y: 0.609375 },
  { x: 0.484375, y: 0.609375 },
  { x: 0.484375, y: 0.609375 },
  { x: 0.515625, y: 0.609375 },
  { x: 0.515625, y: 0.609375 },
  { x: 0.546875, y: 0.609375 },
  { x: 0.546875, y: 0.609375 },
  { x: 0.578125, y: 0.609375 },
  { x: 0.578125, y: 0.609375 },
  { x: 0.609375, y: 0.609375 },
  { x: 0.609375, y: 0.609375 },
  { x: 0.640625, y: 0.609375 },
  { x: 0.640625, y: 0.609375 },
  { x: 0.671875, y: 0.609375 },
  { x: 0.671875, y: 0.609375 },
  { x: 0.703125, y: 0.609375 },
  { x: 0.703125, y: 0.609375 },
  { x: 0.734375, y: 0.609375 },
  { x: 0.734375, y: 0.609375 },
  { x: 0.765625, y: 0.609375 },
  { x: 0.765625, y: 0.609375 },
  { x: 0.796875, y: 0.609375 },
  { x: 0.796875, y: 0.609375 },
  { x: 0.828125, y: 0.609375 },
  { x: 0.828125, y: 0.609375 },
  { x: 0.859375, y: 0.609375 },
  { x: 0.859375, y: 0.609375 },
  { x: 0.890625, y: 0.609375 },
  { x: 0.890625, y: 0.609375 },
  { x: 0.921875, y: 0.609375 },
  { x: 0.921875, y: 0.609375 },
  { x: 0.953125, y: 0.609375 },
  { x: 0.953125, y: 0.609375 },
  { x: 0.984375, y: 0.609375 },
  { x: 0.984375, y: 0.609375 },
  { x: 0.015625, y: 0.640625 },
  { x: 0.015625, y: 0.640625 },
  { x: 0.046875, y: 0.640625 },
  { x: 0.046875, y: 0.640625 },
  { x: 0.078125, y: 0.640625 },
  { x: 0.078125, y: 0.640625 },
  { x: 0.109375, y: 0.640625 },
  { x: 0.109375, y: 0.640625 },
  { x: 0.140625, y: 0.640625 },
  { x: 0.140625, y: 0.640625 },
  { x: 0.171875, y: 0.640625 },
  { x: 0.171875, y: 0.640625 },
  { x: 0.203125, y: 0.640625 },
  { x: 0.203125, y: 0.640625 },
  { x: 0.234375, y: 0.640625 },
  { x: 0.234375, y: 0.640625 },
  { x: 0.265625, y: 0.640625 },
  { x: 0.265625, y: 0.640625 },
  { x: 0.296875, y: 0.640625 },
  { x: 0.296875, y: 0.640625 },
  { x: 0.328125, y: 0.640625 },
  { x: 0.328125, y: 0.640625 },
  { x: 0.359375, y: 0.640625 },
  { x: 0.359375, y: 0.640625 },
  { x: 0.390625, y: 0.640625 },
  { x: 0.390625, y: 0.640625 },
  { x: 0.421875, y: 0.640625 },
  { x: 0.421875, y: 0.640625 },
  { x: 0.453125, y: 0.640625 },
  { x: 0.453125, y: 0.640625 },
  { x: 0.484375, y: 0.640625 },
  { x: 0.484375, y: 0.640625 },
  { x: 0.515625, y: 0.640625 },
  { x: 0.515625, y: 0.640625 },
  { x: 0.546875, y: 0.640625 },
  { x: 0.546875, y: 0.640625 },
  { x: 0.578125, y: 0.640625 },
  { x: 0.578125, y: 0.640625 },
  { x: 0.609375, y: 0.640625 },
  { x: 0.609375, y: 0.640625 },
  { x: 0.640625, y: 0.640625 },
  { x: 0.640625, y: 0.640625 },
  { x: 0.671875, y: 0.640625 },
  { x: 0.671875, y: 0.640625 },
  { x: 0.703125, y: 0.640625 },
  { x: 0.703125, y: 0.640625 },
  { x: 0.734375, y: 0.640625 },
  { x: 0.734375, y: 0.640625 },
  { x: 0.765625, y: 0.640625 },
  { x: 0.765625, y: 0.640625 },
  { x: 0.796875, y: 0.640625 },
  { x: 0.796875, y: 0.640625 },
  { x: 0.828125, y: 0.640625 },
  { x: 0.828125, y: 0.640625 },
  { x: 0.859375, y: 0.640625 },
  { x: 0.859375, y: 0.640625 },
  { x: 0.890625, y: 0.640625 },
  { x: 0.890625, y: 0.640625 },
  { x: 0.921875, y: 0.640625 },
  { x: 0.921875, y: 0.640625 },
  { x: 0.953125, y: 0.640625 },
  { x: 0.953125, y: 0.640625 },
  { x: 0.984375, y: 0.640625 },
  { x: 0.984375, y: 0.640625 },
  { x: 0.015625, y: 0.671875 },
  { x: 0.015625, y: 0.671875 },
  { x: 0.046875, y: 0.671875 },
  { x: 0.046875, y: 0.671875 },
  { x: 0.078125, y: 0.671875 },
  { x: 0.078125, y: 0.671875 },
  { x: 0.109375, y: 0.671875 },
  { x: 0.109375, y: 0.671875 },
  { x: 0.140625, y: 0.671875 },
  { x: 0.140625, y: 0.671875 },
  { x: 0.171875, y: 0.671875 },
  { x: 0.171875, y: 0.671875 },
  { x: 0.203125, y: 0.671875 },
  { x: 0.203125, y: 0.671875 },
  { x: 0.234375, y: 0.671875 },
  { x: 0.234375, y: 0.671875 },
  { x: 0.265625, y: 0.671875 },
  { x: 0.265625, y: 0.671875 },
  { x: 0.296875, y: 0.671875 },
  { x: 0.296875, y: 0.671875 },
  { x: 0.328125, y: 0.671875 },
  { x: 0.328125, y: 0.671875 },
  { x: 0.359375, y: 0.671875 },
  { x: 0.359375, y: 0.671875 },
  { x: 0.390625, y: 0.671875 },
  { x: 0.390625, y: 0.671875 },
  { x: 0.421875, y: 0.671875 },
  { x: 0.421875, y: 0.671875 },
  { x: 0.453125, y: 0.671875 },
  { x: 0.453125, y: 0.671875 },
  { x: 0.484375, y: 0.671875 },
  { x: 0.484375, y: 0.671875 },
  { x: 0.515625, y: 0.671875 },
  { x: 0.515625, y: 0.671875 },
  { x: 0.546875, y: 0.671875 },
  { x: 0.546875, y: 0.671875 },
  { x: 0.578125, y: 0.671875 },
  { x: 0.578125, y: 0.671875 },
  { x: 0.609375, y: 0.671875 },
  { x: 0.609375, y: 0.671875 },
  { x: 0.640625, y: 0.671875 },
  { x: 0.640625, y: 0.671875 },
  { x: 0.671875, y: 0.671875 },
  { x: 0.671875, y: 0.671875 },
  { x: 0.703125, y: 0.671875 },
  { x: 0.703125, y: 0.671875 },
  { x: 0.734375, y: 0.671875 },
  { x: 0.734375, y: 0.671875 },
  { x: 0.765625, y: 0.671875 },
  { x: 0.765625, y: 0.671875 },
  { x: 0.796875, y: 0.671875 },
  { x: 0.796875, y: 0.671875 },
  { x: 0.828125, y: 0.671875 },
  { x: 0.828125, y: 0.671875 },
  { x: 0.859375, y: 0.671875 },
  { x: 0.859375, y: 0.671875 },
  { x: 0.890625, y: 0.671875 },
  { x: 0.890625, y: 0.671875 },
  { x: 0.921875, y: 0.671875 },
  { x: 0.921875, y: 0.671875 },
  { x: 0.953125, y: 0.671875 },
  { x: 0.953125, y: 0.671875 },
  { x: 0.984375, y: 0.671875 },
  { x: 0.984375, y: 0.671875 },
  { x: 0.015625, y: 0.703125 },
  { x: 0.015625, y: 0.703125 },
  { x: 0.046875, y: 0.703125 },
  { x: 0.046875, y: 0.703125 },
  { x: 0.078125, y: 0.703125 },
  { x: 0.078125, y: 0.703125 },
  { x: 0.109375, y: 0.703125 },
  { x: 0.109375, y: 0.703125 },
  { x: 0.140625, y: 0.703125 },
  { x: 0.140625, y: 0.703125 },
  { x: 0.171875, y: 0.703125 },
  { x: 0.171875, y: 0.703125 },
  { x: 0.203125, y: 0.703125 },
  { x: 0.203125, y: 0.703125 },
  { x: 0.234375, y: 0.703125 },
  { x: 0.234375, y: 0.703125 },
  { x: 0.265625, y: 0.703125 },
  { x: 0.265625, y: 0.703125 },
  { x: 0.296875, y: 0.703125 },
  { x: 0.296875, y: 0.703125 },
  { x: 0.328125, y: 0.703125 },
  { x: 0.328125, y: 0.703125 },
  { x: 0.359375, y: 0.703125 },
  { x: 0.359375, y: 0.703125 },
  { x: 0.390625, y: 0.703125 },
  { x: 0.390625, y: 0.703125 },
  { x: 0.421875, y: 0.703125 },
  { x: 0.421875, y: 0.703125 },
  { x: 0.453125, y: 0.703125 },
  { x: 0.453125, y: 0.703125 },
  { x: 0.484375, y: 0.703125 },
  { x: 0.484375, y: 0.703125 },
  { x: 0.515625, y: 0.703125 },
  { x: 0.515625, y: 0.703125 },
  { x: 0.546875, y: 0.703125 },
  { x: 0.546875, y: 0.703125 },
  { x: 0.578125, y: 0.703125 },
  { x: 0.578125, y: 0.703125 },
  { x: 0.609375, y: 0.703125 },
  { x: 0.609375, y: 0.703125 },
  { x: 0.640625, y: 0.703125 },
  { x: 0.640625, y: 0.703125 },
  { x: 0.671875, y: 0.703125 },
  { x: 0.671875, y: 0.703125 },
  { x: 0.703125, y: 0.703125 },
  { x: 0.703125, y: 0.703125 },
  { x: 0.734375, y: 0.703125 },
  { x: 0.734375, y: 0.703125 },
  { x: 0.765625, y: 0.703125 },
  { x: 0.765625, y: 0.703125 },
  { x: 0.796875, y: 0.703125 },
  { x: 0.796875, y: 0.703125 },
  { x: 0.828125, y: 0.703125 },
  { x: 0.828125, y: 0.703125 },
  { x: 0.859375, y: 0.703125 },
  { x: 0.859375, y: 0.703125 },
  { x: 0.890625, y: 0.703125 },
  { x: 0.890625, y: 0.703125 },
  { x: 0.921875, y: 0.703125 },
  { x: 0.921875, y: 0.703125 },
  { x: 0.953125, y: 0.703125 },
  { x: 0.953125, y: 0.703125 },
  { x: 0.984375, y: 0.703125 },
  { x: 0.984375, y: 0.703125 },
  { x: 0.015625, y: 0.734375 },
  { x: 0.015625, y: 0.734375 },
  { x: 0.046875, y: 0.734375 },
  { x: 0.046875, y: 0.734375 },
  { x: 0.078125, y: 0.734375 },
  { x: 0.078125, y: 0.734375 },
  { x: 0.109375, y: 0.734375 },
  { x: 0.109375, y: 0.734375 },
  { x: 0.140625, y: 0.734375 },
  { x: 0.140625, y: 0.734375 },
  { x: 0.171875, y: 0.734375 },
  { x: 0.171875, y: 0.734375 },
  { x: 0.203125, y: 0.734375 },
  { x: 0.203125, y: 0.734375 },
  { x: 0.234375, y: 0.734375 },
  { x: 0.234375, y: 0.734375 },
  { x: 0.265625, y: 0.734375 },
  { x: 0.265625, y: 0.734375 },
  { x: 0.296875, y: 0.734375 },
  { x: 0.296875, y: 0.734375 },
  { x: 0.328125, y: 0.734375 },
  { x: 0.328125, y: 0.734375 },
  { x: 0.359375, y: 0.734375 },
  { x: 0.359375, y: 0.734375 },
  { x: 0.390625, y: 0.734375 },
  { x: 0.390625, y: 0.734375 },
  { x: 0.421875, y: 0.734375 },
  { x: 0.421875, y: 0.734375 },
  { x: 0.453125, y: 0.734375 },
  { x: 0.453125, y: 0.734375 },
  { x: 0.484375, y: 0.734375 },
  { x: 0.484375, y: 0.734375 },
  { x: 0.515625, y: 0.734375 },
  { x: 0.515625, y: 0.734375 },
  { x: 0.546875, y: 0.734375 },
  { x: 0.546875, y: 0.734375 },
  { x: 0.578125, y: 0.734375 },
  { x: 0.578125, y: 0.734375 },
  { x: 0.609375, y: 0.734375 },
  { x: 0.609375, y: 0.734375 },
  { x: 0.640625, y: 0.734375 },
  { x: 0.640625, y: 0.734375 },
  { x: 0.671875, y: 0.734375 },
  { x: 0.671875, y: 0.734375 },
  { x: 0.703125, y: 0.734375 },
  { x: 0.703125, y: 0.734375 },
  { x: 0.734375, y: 0.734375 },
  { x: 0.734375, y: 0.734375 },
  { x: 0.765625, y: 0.734375 },
  { x: 0.765625, y: 0.734375 },
  { x: 0.796875, y: 0.734375 },
  { x: 0.796875, y: 0.734375 },
  { x: 0.828125, y: 0.734375 },
  { x: 0.828125, y: 0.734375 },
  { x: 0.859375, y: 0.734375 },
  { x: 0.859375, y: 0.734375 },
  { x: 0.890625, y: 0.734375 },
  { x: 0.890625, y: 0.734375 },
  { x: 0.921875, y: 0.734375 },
  { x: 0.921875, y: 0.734375 },
  { x: 0.953125, y: 0.734375 },
  { x: 0.953125, y: 0.734375 },
  { x: 0.984375, y: 0.734375 },
  { x: 0.984375, y: 0.734375 },
  { x: 0.015625, y: 0.765625 },
  { x: 0.015625, y: 0.765625 },
  { x: 0.046875, y: 0.765625 },
  { x: 0.046875, y: 0.765625 },
  { x: 0.078125, y: 0.765625 },
  { x: 0.078125, y: 0.765625 },
  { x: 0.109375, y: 0.765625 },
  { x: 0.109375, y: 0.765625 },
  { x: 0.140625, y: 0.765625 },
  { x: 0.140625, y: 0.765625 },
  { x: 0.171875, y: 0.765625 },
  { x: 0.171875, y: 0.765625 },
  { x: 0.203125, y: 0.765625 },
  { x: 0.203125, y: 0.765625 },
  { x: 0.234375, y: 0.765625 },
  { x: 0.234375, y: 0.765625 },
  { x: 0.265625, y: 0.765625 },
  { x: 0.265625, y: 0.765625 },
  { x: 0.296875, y: 0.765625 },
  { x: 0.296875, y: 0.765625 },
  { x: 0.328125, y: 0.765625 },
  { x: 0.328125, y: 0.765625 },
  { x: 0.359375, y: 0.765625 },
  { x: 0.359375, y: 0.765625 },
  { x: 0.390625, y: 0.765625 },
  { x: 0.390625, y: 0.765625 },
  { x: 0.421875, y: 0.765625 },
  { x: 0.421875, y: 0.765625 },
  { x: 0.453125, y: 0.765625 },
  { x: 0.453125, y: 0.765625 },
  { x: 0.484375, y: 0.765625 },
  { x: 0.484375, y: 0.765625 },
  { x: 0.515625, y: 0.765625 },
  { x: 0.515625, y: 0.765625 },
  { x: 0.546875, y: 0.765625 },
  { x: 0.546875, y: 0.765625 },
  { x: 0.578125, y: 0.765625 },
  { x: 0.578125, y: 0.765625 },
  { x: 0.609375, y: 0.765625 },
  { x: 0.609375, y: 0.765625 },
  { x: 0.640625, y: 0.765625 },
  { x: 0.640625, y: 0.765625 },
  { x: 0.671875, y: 0.765625 },
  { x: 0.671875, y: 0.765625 },
  { x: 0.703125, y: 0.765625 },
  { x: 0.703125, y: 0.765625 },
  { x: 0.734375, y: 0.765625 },
  { x: 0.734375, y: 0.765625 },
  { x: 0.765625, y: 0.765625 },
  { x: 0.765625, y: 0.765625 },
  { x: 0.796875, y: 0.765625 },
  { x: 0.796875, y: 0.765625 },
  { x: 0.828125, y: 0.765625 },
  { x: 0.828125, y: 0.765625 },
  { x: 0.859375, y: 0.765625 },
  { x: 0.859375, y: 0.765625 },
  { x: 0.890625, y: 0.765625 },
  { x: 0.890625, y: 0.765625 },
  { x: 0.921875, y: 0.765625 },
  { x: 0.921875, y: 0.765625 },
  { x: 0.953125, y: 0.765625 },
  { x: 0.953125, y: 0.765625 },
  { x: 0.984375, y: 0.765625 },
  { x: 0.984375, y: 0.765625 },
  { x: 0.015625, y: 0.796875 },
  { x: 0.015625, y: 0.796875 },
  { x: 0.046875, y: 0.796875 },
  { x: 0.046875, y: 0.796875 },
  { x: 0.078125, y: 0.796875 },
  { x: 0.078125, y: 0.796875 },
  { x: 0.109375, y: 0.796875 },
  { x: 0.109375, y: 0.796875 },
  { x: 0.140625, y: 0.796875 },
  { x: 0.140625, y: 0.796875 },
  { x: 0.171875, y: 0.796875 },
  { x: 0.171875, y: 0.796875 },
  { x: 0.203125, y: 0.796875 },
  { x: 0.203125, y: 0.796875 },
  { x: 0.234375, y: 0.796875 },
  { x: 0.234375, y: 0.796875 },
  { x: 0.265625, y: 0.796875 },
  { x: 0.265625, y: 0.796875 },
  { x: 0.296875, y: 0.796875 },
  { x: 0.296875, y: 0.796875 },
  { x: 0.328125, y: 0.796875 },
  { x: 0.328125, y: 0.796875 },
  { x: 0.359375, y: 0.796875 },
  { x: 0.359375, y: 0.796875 },
  { x: 0.390625, y: 0.796875 },
  { x: 0.390625, y: 0.796875 },
  { x: 0.421875, y: 0.796875 },
  { x: 0.421875, y: 0.796875 },
  { x: 0.453125, y: 0.796875 },
  { x: 0.453125, y: 0.796875 },
  { x: 0.484375, y: 0.796875 },
  { x: 0.484375, y: 0.796875 },
  { x: 0.515625, y: 0.796875 },
  { x: 0.515625, y: 0.796875 },
  { x: 0.546875, y: 0.796875 },
  { x: 0.546875, y: 0.796875 },
  { x: 0.578125, y: 0.796875 },
  { x: 0.578125, y: 0.796875 },
  { x: 0.609375, y: 0.796875 },
  { x: 0.609375, y: 0.796875 },
  { x: 0.640625, y: 0.796875 },
  { x: 0.640625, y: 0.796875 },
  { x: 0.671875, y: 0.796875 },
  { x: 0.671875, y: 0.796875 },
  { x: 0.703125, y: 0.796875 },
  { x: 0.703125, y: 0.796875 },
  { x: 0.734375, y: 0.796875 },
  { x: 0.734375, y: 0.796875 },
  { x: 0.765625, y: 0.796875 },
  { x: 0.765625, y: 0.796875 },
  { x: 0.796875, y: 0.796875 },
  { x: 0.796875, y: 0.796875 },
  { x: 0.828125, y: 0.796875 },
  { x: 0.828125, y: 0.796875 },
  { x: 0.859375, y: 0.796875 },
  { x: 0.859375, y: 0.796875 },
  { x: 0.890625, y: 0.796875 },
  { x: 0.890625, y: 0.796875 },
  { x: 0.921875, y: 0.796875 },
  { x: 0.921875, y: 0.796875 },
  { x: 0.953125, y: 0.796875 },
  { x: 0.953125, y: 0.796875 },
  { x: 0.984375, y: 0.796875 },
  { x: 0.984375, y: 0.796875 },
  { x: 0.015625, y: 0.828125 },
  { x: 0.015625, y: 0.828125 },
  { x: 0.046875, y: 0.828125 },
  { x: 0.046875, y: 0.828125 },
  { x: 0.078125, y: 0.828125 },
  { x: 0.078125, y: 0.828125 },
  { x: 0.109375, y: 0.828125 },
  { x: 0.109375, y: 0.828125 },
  { x: 0.140625, y: 0.828125 },
  { x: 0.140625, y: 0.828125 },
  { x: 0.171875, y: 0.828125 },
  { x: 0.171875, y: 0.828125 },
  { x: 0.203125, y: 0.828125 },
  { x: 0.203125, y: 0.828125 },
  { x: 0.234375, y: 0.828125 },
  { x: 0.234375, y: 0.828125 },
  { x: 0.265625, y: 0.828125 },
  { x: 0.265625, y: 0.828125 },
  { x: 0.296875, y: 0.828125 },
  { x: 0.296875, y: 0.828125 },
  { x: 0.328125, y: 0.828125 },
  { x: 0.328125, y: 0.828125 },
  { x: 0.359375, y: 0.828125 },
  { x: 0.359375, y: 0.828125 },
  { x: 0.390625, y: 0.828125 },
  { x: 0.390625, y: 0.828125 },
  { x: 0.421875, y: 0.828125 },
  { x: 0.421875, y: 0.828125 },
  { x: 0.453125, y: 0.828125 },
  { x: 0.453125, y: 0.828125 },
  { x: 0.484375, y: 0.828125 },
  { x: 0.484375, y: 0.828125 },
  { x: 0.515625, y: 0.828125 },
  { x: 0.515625, y: 0.828125 },
  { x: 0.546875, y: 0.828125 },
  { x: 0.546875, y: 0.828125 },
  { x: 0.578125, y: 0.828125 },
  { x: 0.578125, y: 0.828125 },
  { x: 0.609375, y: 0.828125 },
  { x: 0.609375, y: 0.828125 },
  { x: 0.640625, y: 0.828125 },
  { x: 0.640625, y: 0.828125 },
  { x: 0.671875, y: 0.828125 },
  { x: 0.671875, y: 0.828125 },
  { x: 0.703125, y: 0.828125 },
  { x: 0.703125, y: 0.828125 },
  { x: 0.734375, y: 0.828125 },
  { x: 0.734375, y: 0.828125 },
  { x: 0.765625, y: 0.828125 },
  { x: 0.765625, y: 0.828125 },
  { x: 0.796875, y: 0.828125 },
  { x: 0.796875, y: 0.828125 },
  { x: 0.828125, y: 0.828125 },
  { x: 0.828125, y: 0.828125 },
  { x: 0.859375, y: 0.828125 },
  { x: 0.859375, y: 0.828125 },
  { x: 0.890625, y: 0.828125 },
  { x: 0.890625, y: 0.828125 },
  { x: 0.921875, y: 0.828125 },
  { x: 0.921875, y: 0.828125 },
  { x: 0.953125, y: 0.828125 },
  { x: 0.953125, y: 0.828125 },
  { x: 0.984375, y: 0.828125 },
  { x: 0.984375, y: 0.828125 },
  { x: 0.015625, y: 0.859375 },
  { x: 0.015625, y: 0.859375 },
  { x: 0.046875, y: 0.859375 },
  { x: 0.046875, y: 0.859375 },
  { x: 0.078125, y: 0.859375 },
  { x: 0.078125, y: 0.859375 },
  { x: 0.109375, y: 0.859375 },
  { x: 0.109375, y: 0.859375 },
  { x: 0.140625, y: 0.859375 },
  { x: 0.140625, y: 0.859375 },
  { x: 0.171875, y: 0.859375 },
  { x: 0.171875, y: 0.859375 },
  { x: 0.203125, y: 0.859375 },
  { x: 0.203125, y: 0.859375 },
  { x: 0.234375, y: 0.859375 },
  { x: 0.234375, y: 0.859375 },
  { x: 0.265625, y: 0.859375 },
  { x: 0.265625, y: 0.859375 },
  { x: 0.296875, y: 0.859375 },
  { x: 0.296875, y: 0.859375 },
  { x: 0.328125, y: 0.859375 },
  { x: 0.328125, y: 0.859375 },
  { x: 0.359375, y: 0.859375 },
  { x: 0.359375, y: 0.859375 },
  { x: 0.390625, y: 0.859375 },
  { x: 0.390625, y: 0.859375 },
  { x: 0.421875, y: 0.859375 },
  { x: 0.421875, y: 0.859375 },
  { x: 0.453125, y: 0.859375 },
  { x: 0.453125, y: 0.859375 },
  { x: 0.484375, y: 0.859375 },
  { x: 0.484375, y: 0.859375 },
  { x: 0.515625, y: 0.859375 },
  { x: 0.515625, y: 0.859375 },
  { x: 0.546875, y: 0.859375 },
  { x: 0.546875, y: 0.859375 },
  { x: 0.578125, y: 0.859375 },
  { x: 0.578125, y: 0.859375 },
  { x: 0.609375, y: 0.859375 },
  { x: 0.609375, y: 0.859375 },
  { x: 0.640625, y: 0.859375 },
  { x: 0.640625, y: 0.859375 },
  { x: 0.671875, y: 0.859375 },
  { x: 0.671875, y: 0.859375 },
  { x: 0.703125, y: 0.859375 },
  { x: 0.703125, y: 0.859375 },
  { x: 0.734375, y: 0.859375 },
  { x: 0.734375, y: 0.859375 },
  { x: 0.765625, y: 0.859375 },
  { x: 0.765625, y: 0.859375 },
  { x: 0.796875, y: 0.859375 },
  { x: 0.796875, y: 0.859375 },
  { x: 0.828125, y: 0.859375 },
  { x: 0.828125, y: 0.859375 },
  { x: 0.859375, y: 0.859375 },
  { x: 0.859375, y: 0.859375 },
  { x: 0.890625, y: 0.859375 },
  { x: 0.890625, y: 0.859375 },
  { x: 0.921875, y: 0.859375 },
  { x: 0.921875, y: 0.859375 },
  { x: 0.953125, y: 0.859375 },
  { x: 0.953125, y: 0.859375 },
  { x: 0.984375, y: 0.859375 },
  { x: 0.984375, y: 0.859375 },
  { x: 0.015625, y: 0.890625 },
  { x: 0.015625, y: 0.890625 },
  { x: 0.046875, y: 0.890625 },
  { x: 0.046875, y: 0.890625 },
  { x: 0.078125, y: 0.890625 },
  { x: 0.078125, y: 0.890625 },
  { x: 0.109375, y: 0.890625 },
  { x: 0.109375, y: 0.890625 },
  { x: 0.140625, y: 0.890625 },
  { x: 0.140625, y: 0.890625 },
  { x: 0.171875, y: 0.890625 },
  { x: 0.171875, y: 0.890625 },
  { x: 0.203125, y: 0.890625 },
  { x: 0.203125, y: 0.890625 },
  { x: 0.234375, y: 0.890625 },
  { x: 0.234375, y: 0.890625 },
  { x: 0.265625, y: 0.890625 },
  { x: 0.265625, y: 0.890625 },
  { x: 0.296875, y: 0.890625 },
  { x: 0.296875, y: 0.890625 },
  { x: 0.328125, y: 0.890625 },
  { x: 0.328125, y: 0.890625 },
  { x: 0.359375, y: 0.890625 },
  { x: 0.359375, y: 0.890625 },
  { x: 0.390625, y: 0.890625 },
  { x: 0.390625, y: 0.890625 },
  { x: 0.421875, y: 0.890625 },
  { x: 0.421875, y: 0.890625 },
  { x: 0.453125, y: 0.890625 },
  { x: 0.453125, y: 0.890625 },
  { x: 0.484375, y: 0.890625 },
  { x: 0.484375, y: 0.890625 },
  { x: 0.515625, y: 0.890625 },
  { x: 0.515625, y: 0.890625 },
  { x: 0.546875, y: 0.890625 },
  { x: 0.546875, y: 0.890625 },
  { x: 0.578125, y: 0.890625 },
  { x: 0.578125, y: 0.890625 },
  { x: 0.609375, y: 0.890625 },
  { x: 0.609375, y: 0.890625 },
  { x: 0.640625, y: 0.890625 },
  { x: 0.640625, y: 0.890625 },
  { x: 0.671875, y: 0.890625 },
  { x: 0.671875, y: 0.890625 },
  { x: 0.703125, y: 0.890625 },
  { x: 0.703125, y: 0.890625 },
  { x: 0.734375, y: 0.890625 },
  { x: 0.734375, y: 0.890625 },
  { x: 0.765625, y: 0.890625 },
  { x: 0.765625, y: 0.890625 },
  { x: 0.796875, y: 0.890625 },
  { x: 0.796875, y: 0.890625 },
  { x: 0.828125, y: 0.890625 },
  { x: 0.828125, y: 0.890625 },
  { x: 0.859375, y: 0.890625 },
  { x: 0.859375, y: 0.890625 },
  { x: 0.890625, y: 0.890625 },
  { x: 0.890625, y: 0.890625 },
  { x: 0.921875, y: 0.890625 },
  { x: 0.921875, y: 0.890625 },
  { x: 0.953125, y: 0.890625 },
  { x: 0.953125, y: 0.890625 },
  { x: 0.984375, y: 0.890625 },
  { x: 0.984375, y: 0.890625 },
  { x: 0.015625, y: 0.921875 },
  { x: 0.015625, y: 0.921875 },
  { x: 0.046875, y: 0.921875 },
  { x: 0.046875, y: 0.921875 },
  { x: 0.078125, y: 0.921875 },
  { x: 0.078125, y: 0.921875 },
  { x: 0.109375, y: 0.921875 },
  { x: 0.109375, y: 0.921875 },
  { x: 0.140625, y: 0.921875 },
  { x: 0.140625, y: 0.921875 },
  { x: 0.171875, y: 0.921875 },
  { x: 0.171875, y: 0.921875 },
  { x: 0.203125, y: 0.921875 },
  { x: 0.203125, y: 0.921875 },
  { x: 0.234375, y: 0.921875 },
  { x: 0.234375, y: 0.921875 },
  { x: 0.265625, y: 0.921875 },
  { x: 0.265625, y: 0.921875 },
  { x: 0.296875, y: 0.921875 },
  { x: 0.296875, y: 0.921875 },
  { x: 0.328125, y: 0.921875 },
  { x: 0.328125, y: 0.921875 },
  { x: 0.359375, y: 0.921875 },
  { x: 0.359375, y: 0.921875 },
  { x: 0.390625, y: 0.921875 },
  { x: 0.390625, y: 0.921875 },
  { x: 0.421875, y: 0.921875 },
  { x: 0.421875, y: 0.921875 },
  { x: 0.453125, y: 0.921875 },
  { x: 0.453125, y: 0.921875 },
  { x: 0.484375, y: 0.921875 },
  { x: 0.484375, y: 0.921875 },
  { x: 0.515625, y: 0.921875 },
  { x: 0.515625, y: 0.921875 },
  { x: 0.546875, y: 0.921875 },
  { x: 0.546875, y: 0.921875 },
  { x: 0.578125, y: 0.921875 },
  { x: 0.578125, y: 0.921875 },
  { x: 0.609375, y: 0.921875 },
  { x: 0.609375, y: 0.921875 },
  { x: 0.640625, y: 0.921875 },
  { x: 0.640625, y: 0.921875 },
  { x: 0.671875, y: 0.921875 },
  { x: 0.671875, y: 0.921875 },
  { x: 0.703125, y: 0.921875 },
  { x: 0.703125, y: 0.921875 },
  { x: 0.734375, y: 0.921875 },
  { x: 0.734375, y: 0.921875 },
  { x: 0.765625, y: 0.921875 },
  { x: 0.765625, y: 0.921875 },
  { x: 0.796875, y: 0.921875 },
  { x: 0.796875, y: 0.921875 },
  { x: 0.828125, y: 0.921875 },
  { x: 0.828125, y: 0.921875 },
  { x: 0.859375, y: 0.921875 },
  { x: 0.859375, y: 0.921875 },
  { x: 0.890625, y: 0.921875 },
  { x: 0.890625, y: 0.921875 },
  { x: 0.921875, y: 0.921875 },
  { x: 0.921875, y: 0.921875 },
  { x: 0.953125, y: 0.921875 },
  { x: 0.953125, y: 0.921875 },
  { x: 0.984375, y: 0.921875 },
  { x: 0.984375, y: 0.921875 },
  { x: 0.015625, y: 0.953125 },
  { x: 0.015625, y: 0.953125 },
  { x: 0.046875, y: 0.953125 },
  { x: 0.046875, y: 0.953125 },
  { x: 0.078125, y: 0.953125 },
  { x: 0.078125, y: 0.953125 },
  { x: 0.109375, y: 0.953125 },
  { x: 0.109375, y: 0.953125 },
  { x: 0.140625, y: 0.953125 },
  { x: 0.140625, y: 0.953125 },
  { x: 0.171875, y: 0.953125 },
  { x: 0.171875, y: 0.953125 },
  { x: 0.203125, y: 0.953125 },
  { x: 0.203125, y: 0.953125 },
  { x: 0.234375, y: 0.953125 },
  { x: 0.234375, y: 0.953125 },
  { x: 0.265625, y: 0.953125 },
  { x: 0.265625, y: 0.953125 },
  { x: 0.296875, y: 0.953125 },
  { x: 0.296875, y: 0.953125 },
  { x: 0.328125, y: 0.953125 },
  { x: 0.328125, y: 0.953125 },
  { x: 0.359375, y: 0.953125 },
  { x: 0.359375, y: 0.953125 },
  { x: 0.390625, y: 0.953125 },
  { x: 0.390625, y: 0.953125 },
  { x: 0.421875, y: 0.953125 },
  { x: 0.421875, y: 0.953125 },
  { x: 0.453125, y: 0.953125 },
  { x: 0.453125, y: 0.953125 },
  { x: 0.484375, y: 0.953125 },
  { x: 0.484375, y: 0.953125 },
  { x: 0.515625, y: 0.953125 },
  { x: 0.515625, y: 0.953125 },
  { x: 0.546875, y: 0.953125 },
  { x: 0.546875, y: 0.953125 },
  { x: 0.578125, y: 0.953125 },
  { x: 0.578125, y: 0.953125 },
  { x: 0.609375, y: 0.953125 },
  { x: 0.609375, y: 0.953125 },
  { x: 0.640625, y: 0.953125 },
  { x: 0.640625, y: 0.953125 },
  { x: 0.671875, y: 0.953125 },
  { x: 0.671875, y: 0.953125 },
  { x: 0.703125, y: 0.953125 },
  { x: 0.703125, y: 0.953125 },
  { x: 0.734375, y: 0.953125 },
  { x: 0.734375, y: 0.953125 },
  { x: 0.765625, y: 0.953125 },
  { x: 0.765625, y: 0.953125 },
  { x: 0.796875, y: 0.953125 },
  { x: 0.796875, y: 0.953125 },
  { x: 0.828125, y: 0.953125 },
  { x: 0.828125, y: 0.953125 },
  { x: 0.859375, y: 0.953125 },
  { x: 0.859375, y: 0.953125 },
  { x: 0.890625, y: 0.953125 },
  { x: 0.890625, y: 0.953125 },
  { x: 0.921875, y: 0.953125 },
  { x: 0.921875, y: 0.953125 },
  { x: 0.953125, y: 0.953125 },
  { x: 0.953125, y: 0.953125 },
  { x: 0.984375, y: 0.953125 },
  { x: 0.984375, y: 0.953125 },
  { x: 0.015625, y: 0.984375 },
  { x: 0.015625, y: 0.984375 },
  { x: 0.046875, y: 0.984375 },
  { x: 0.046875, y: 0.984375 },
  { x: 0.078125, y: 0.984375 },
  { x: 0.078125, y: 0.984375 },
  { x: 0.109375, y: 0.984375 },
  { x: 0.109375, y: 0.984375 },
  { x: 0.140625, y: 0.984375 },
  { x: 0.140625, y: 0.984375 },
  { x: 0.171875, y: 0.984375 },
  { x: 0.171875, y: 0.984375 },
  { x: 0.203125, y: 0.984375 },
  { x: 0.203125, y: 0.984375 },
  { x: 0.234375, y: 0.984375 },
  { x: 0.234375, y: 0.984375 },
  { x: 0.265625, y: 0.984375 },
  { x: 0.265625, y: 0.984375 },
  { x: 0.296875, y: 0.984375 },
  { x: 0.296875, y: 0.984375 },
  { x: 0.328125, y: 0.984375 },
  { x: 0.328125, y: 0.984375 },
  { x: 0.359375, y: 0.984375 },
  { x: 0.359375, y: 0.984375 },
  { x: 0.390625, y: 0.984375 },
  { x: 0.390625, y: 0.984375 },
  { x: 0.421875, y: 0.984375 },
  { x: 0.421875, y: 0.984375 },
  { x: 0.453125, y: 0.984375 },
  { x: 0.453125, y: 0.984375 },
  { x: 0.484375, y: 0.984375 },
  { x: 0.484375, y: 0.984375 },
  { x: 0.515625, y: 0.984375 },
  { x: 0.515625, y: 0.984375 },
  { x: 0.546875, y: 0.984375 },
  { x: 0.546875, y: 0.984375 },
  { x: 0.578125, y: 0.984375 },
  { x: 0.578125, y: 0.984375 },
  { x: 0.609375, y: 0.984375 },
  { x: 0.609375, y: 0.984375 },
  { x: 0.640625, y: 0.984375 },
  { x: 0.640625, y: 0.984375 },
  { x: 0.671875, y: 0.984375 },
  { x: 0.671875, y: 0.984375 },
  { x: 0.703125, y: 0.984375 },
  { x: 0.703125, y: 0.984375 },
  { x: 0.734375, y: 0.984375 },
  { x: 0.734375, y: 0.984375 },
  { x: 0.765625, y: 0.984375 },
  { x: 0.765625, y: 0.984375 },
  { x: 0.796875, y: 0.984375 },
  { x: 0.796875, y: 0.984375 },
  { x: 0.828125, y: 0.984375 },
  { x: 0.828125, y: 0.984375 },
  { x: 0.859375, y: 0.984375 },
  { x: 0.859375, y: 0.984375 },
  { x: 0.890625, y: 0.984375 },
  { x: 0.890625, y: 0.984375 },
  { x: 0.921875, y: 0.984375 },
  { x: 0.921875, y: 0.984375 },
  { x: 0.953125, y: 0.984375 },
  { x: 0.953125, y: 0.984375 },
  { x: 0.984375, y: 0.984375 },
  { x: 0.984375, y: 0.984375 },
  { x: 0.03125, y: 0.03125 },
  { x: 0.03125, y: 0.03125 },
  { x: 0.09375, y: 0.03125 },
  { x: 0.09375, y: 0.03125 },
  { x: 0.15625, y: 0.03125 },
  { x: 0.15625, y: 0.03125 },
  { x: 0.21875, y: 0.03125 },
  { x: 0.21875, y: 0.03125 },
  { x: 0.28125, y: 0.03125 },
  { x: 0.28125, y: 0.03125 },
  { x: 0.34375, y: 0.03125 },
  { x: 0.34375, y: 0.03125 },
  { x: 0.40625, y: 0.03125 },
  { x: 0.40625, y: 0.03125 },
  { x: 0.46875, y: 0.03125 },
  { x: 0.46875, y: 0.03125 },
  { x: 0.53125, y: 0.03125 },
  { x: 0.53125, y: 0.03125 },
  { x: 0.59375, y: 0.03125 },
  { x: 0.59375, y: 0.03125 },
  { x: 0.65625, y: 0.03125 },
  { x: 0.65625, y: 0.03125 },
  { x: 0.71875, y: 0.03125 },
  { x: 0.71875, y: 0.03125 },
  { x: 0.78125, y: 0.03125 },
  { x: 0.78125, y: 0.03125 },
  { x: 0.84375, y: 0.03125 },
  { x: 0.84375, y: 0.03125 },
  { x: 0.90625, y: 0.03125 },
  { x: 0.90625, y: 0.03125 },
  { x: 0.96875, y: 0.03125 },
  { x: 0.96875, y: 0.03125 },
  { x: 0.03125, y: 0.09375 },
  { x: 0.03125, y: 0.09375 },
  { x: 0.09375, y: 0.09375 },
  { x: 0.09375, y: 0.09375 },
  { x: 0.15625, y: 0.09375 },
  { x: 0.15625, y: 0.09375 },
  { x: 0.21875, y: 0.09375 },
  { x: 0.21875, y: 0.09375 },
  { x: 0.28125, y: 0.09375 },
  { x: 0.28125, y: 0.09375 },
  { x: 0.34375, y: 0.09375 },
  { x: 0.34375, y: 0.09375 },
  { x: 0.40625, y: 0.09375 },
  { x: 0.40625, y: 0.09375 },
  { x: 0.46875, y: 0.09375 },
  { x: 0.46875, y: 0.09375 },
  { x: 0.53125, y: 0.09375 },
  { x: 0.53125, y: 0.09375 },
  { x: 0.59375, y: 0.09375 },
  { x: 0.59375, y: 0.09375 },
  { x: 0.65625, y: 0.09375 },
  { x: 0.65625, y: 0.09375 },
  { x: 0.71875, y: 0.09375 },
  { x: 0.71875, y: 0.09375 },
  { x: 0.78125, y: 0.09375 },
  { x: 0.78125, y: 0.09375 },
  { x: 0.84375, y: 0.09375 },
  { x: 0.84375, y: 0.09375 },
  { x: 0.90625, y: 0.09375 },
  { x: 0.90625, y: 0.09375 },
  { x: 0.96875, y: 0.09375 },
  { x: 0.96875, y: 0.09375 },
  { x: 0.03125, y: 0.15625 },
  { x: 0.03125, y: 0.15625 },
  { x: 0.09375, y: 0.15625 },
  { x: 0.09375, y: 0.15625 },
  { x: 0.15625, y: 0.15625 },
  { x: 0.15625, y: 0.15625 },
  { x: 0.21875, y: 0.15625 },
  { x: 0.21875, y: 0.15625 },
  { x: 0.28125, y: 0.15625 },
  { x: 0.28125, y: 0.15625 },
  { x: 0.34375, y: 0.15625 },
  { x: 0.34375, y: 0.15625 },
  { x: 0.40625, y: 0.15625 },
  { x: 0.40625, y: 0.15625 },
  { x: 0.46875, y: 0.15625 },
  { x: 0.46875, y: 0.15625 },
  { x: 0.53125, y: 0.15625 },
  { x: 0.53125, y: 0.15625 },
  { x: 0.59375, y: 0.15625 },
  { x: 0.59375, y: 0.15625 },
  { x: 0.65625, y: 0.15625 },
  { x: 0.65625, y: 0.15625 },
  { x: 0.71875, y: 0.15625 },
  { x: 0.71875, y: 0.15625 },
  { x: 0.78125, y: 0.15625 },
  { x: 0.78125, y: 0.15625 },
  { x: 0.84375, y: 0.15625 },
  { x: 0.84375, y: 0.15625 },
  { x: 0.90625, y: 0.15625 },
  { x: 0.90625, y: 0.15625 },
  { x: 0.96875, y: 0.15625 },
  { x: 0.96875, y: 0.15625 },
  { x: 0.03125, y: 0.21875 },
  { x: 0.03125, y: 0.21875 },
  { x: 0.09375, y: 0.21875 },
  { x: 0.09375, y: 0.21875 },
  { x: 0.15625, y: 0.21875 },
  { x: 0.15625, y: 0.21875 },
  { x: 0.21875, y: 0.21875 },
  { x: 0.21875, y: 0.21875 },
  { x: 0.28125, y: 0.21875 },
  { x: 0.28125, y: 0.21875 },
  { x: 0.34375, y: 0.21875 },
  { x: 0.34375, y: 0.21875 },
  { x: 0.40625, y: 0.21875 },
  { x: 0.40625, y: 0.21875 },
  { x: 0.46875, y: 0.21875 },
  { x: 0.46875, y: 0.21875 },
  { x: 0.53125, y: 0.21875 },
  { x: 0.53125, y: 0.21875 },
  { x: 0.59375, y: 0.21875 },
  { x: 0.59375, y: 0.21875 },
  { x: 0.65625, y: 0.21875 },
  { x: 0.65625, y: 0.21875 },
  { x: 0.71875, y: 0.21875 },
  { x: 0.71875, y: 0.21875 },
  { x: 0.78125, y: 0.21875 },
  { x: 0.78125, y: 0.21875 },
  { x: 0.84375, y: 0.21875 },
  { x: 0.84375, y: 0.21875 },
  { x: 0.90625, y: 0.21875 },
  { x: 0.90625, y: 0.21875 },
  { x: 0.96875, y: 0.21875 },
  { x: 0.96875, y: 0.21875 },
  { x: 0.03125, y: 0.28125 },
  { x: 0.03125, y: 0.28125 },
  { x: 0.09375, y: 0.28125 },
  { x: 0.09375, y: 0.28125 },
  { x: 0.15625, y: 0.28125 },
  { x: 0.15625, y: 0.28125 },
  { x: 0.21875, y: 0.28125 },
  { x: 0.21875, y: 0.28125 },
  { x: 0.28125, y: 0.28125 },
  { x: 0.28125, y: 0.28125 },
  { x: 0.34375, y: 0.28125 },
  { x: 0.34375, y: 0.28125 },
  { x: 0.40625, y: 0.28125 },
  { x: 0.40625, y: 0.28125 },
  { x: 0.46875, y: 0.28125 },
  { x: 0.46875, y: 0.28125 },
  { x: 0.53125, y: 0.28125 },
  { x: 0.53125, y: 0.28125 },
  { x: 0.59375, y: 0.28125 },
  { x: 0.59375, y: 0.28125 },
  { x: 0.65625, y: 0.28125 },
  { x: 0.65625, y: 0.28125 },
  { x: 0.71875, y: 0.28125 },
  { x: 0.71875, y: 0.28125 },
  { x: 0.78125, y: 0.28125 },
  { x: 0.78125, y: 0.28125 },
  { x: 0.84375, y: 0.28125 },
  { x: 0.84375, y: 0.28125 },
  { x: 0.90625, y: 0.28125 },
  { x: 0.90625, y: 0.28125 },
  { x: 0.96875, y: 0.28125 },
  { x: 0.96875, y: 0.28125 },
  { x: 0.03125, y: 0.34375 },
  { x: 0.03125, y: 0.34375 },
  { x: 0.09375, y: 0.34375 },
  { x: 0.09375, y: 0.34375 },
  { x: 0.15625, y: 0.34375 },
  { x: 0.15625, y: 0.34375 },
  { x: 0.21875, y: 0.34375 },
  { x: 0.21875, y: 0.34375 },
  { x: 0.28125, y: 0.34375 },
  { x: 0.28125, y: 0.34375 },
  { x: 0.34375, y: 0.34375 },
  { x: 0.34375, y: 0.34375 },
  { x: 0.40625, y: 0.34375 },
  { x: 0.40625, y: 0.34375 },
  { x: 0.46875, y: 0.34375 },
  { x: 0.46875, y: 0.34375 },
  { x: 0.53125, y: 0.34375 },
  { x: 0.53125, y: 0.34375 },
  { x: 0.59375, y: 0.34375 },
  { x: 0.59375, y: 0.34375 },
  { x: 0.65625, y: 0.34375 },
  { x: 0.65625, y: 0.34375 },
  { x: 0.71875, y: 0.34375 },
  { x: 0.71875, y: 0.34375 },
  { x: 0.78125, y: 0.34375 },
  { x: 0.78125, y: 0.34375 },
  { x: 0.84375, y: 0.34375 },
  { x: 0.84375, y: 0.34375 },
  { x: 0.90625, y: 0.34375 },
  { x: 0.90625, y: 0.34375 },
  { x: 0.96875, y: 0.34375 },
  { x: 0.96875, y: 0.34375 },
  { x: 0.03125, y: 0.40625 },
  { x: 0.03125, y: 0.40625 },
  { x: 0.09375, y: 0.40625 },
  { x: 0.09375, y: 0.40625 },
  { x: 0.15625, y: 0.40625 },
  { x: 0.15625, y: 0.40625 },
  { x: 0.21875, y: 0.40625 },
  { x: 0.21875, y: 0.40625 },
  { x: 0.28125, y: 0.40625 },
  { x: 0.28125, y: 0.40625 },
  { x: 0.34375, y: 0.40625 },
  { x: 0.34375, y: 0.40625 },
  { x: 0.40625, y: 0.40625 },
  { x: 0.40625, y: 0.40625 },
  { x: 0.46875, y: 0.40625 },
  { x: 0.46875, y: 0.40625 },
  { x: 0.53125, y: 0.40625 },
  { x: 0.53125, y: 0.40625 },
  { x: 0.59375, y: 0.40625 },
  { x: 0.59375, y: 0.40625 },
  { x: 0.65625, y: 0.40625 },
  { x: 0.65625, y: 0.40625 },
  { x: 0.71875, y: 0.40625 },
  { x: 0.71875, y: 0.40625 },
  { x: 0.78125, y: 0.40625 },
  { x: 0.78125, y: 0.40625 },
  { x: 0.84375, y: 0.40625 },
  { x: 0.84375, y: 0.40625 },
  { x: 0.90625, y: 0.40625 },
  { x: 0.90625, y: 0.40625 },
  { x: 0.96875, y: 0.40625 },
  { x: 0.96875, y: 0.40625 },
  { x: 0.03125, y: 0.46875 },
  { x: 0.03125, y: 0.46875 },
  { x: 0.09375, y: 0.46875 },
  { x: 0.09375, y: 0.46875 },
  { x: 0.15625, y: 0.46875 },
  { x: 0.15625, y: 0.46875 },
  { x: 0.21875, y: 0.46875 },
  { x: 0.21875, y: 0.46875 },
  { x: 0.28125, y: 0.46875 },
  { x: 0.28125, y: 0.46875 },
  { x: 0.34375, y: 0.46875 },
  { x: 0.34375, y: 0.46875 },
  { x: 0.40625, y: 0.46875 },
  { x: 0.40625, y: 0.46875 },
  { x: 0.46875, y: 0.46875 },
  { x: 0.46875, y: 0.46875 },
  { x: 0.53125, y: 0.46875 },
  { x: 0.53125, y: 0.46875 },
  { x: 0.59375, y: 0.46875 },
  { x: 0.59375, y: 0.46875 },
  { x: 0.65625, y: 0.46875 },
  { x: 0.65625, y: 0.46875 },
  { x: 0.71875, y: 0.46875 },
  { x: 0.71875, y: 0.46875 },
  { x: 0.78125, y: 0.46875 },
  { x: 0.78125, y: 0.46875 },
  { x: 0.84375, y: 0.46875 },
  { x: 0.84375, y: 0.46875 },
  { x: 0.90625, y: 0.46875 },
  { x: 0.90625, y: 0.46875 },
  { x: 0.96875, y: 0.46875 },
  { x: 0.96875, y: 0.46875 },
  { x: 0.03125, y: 0.53125 },
  { x: 0.03125, y: 0.53125 },
  { x: 0.09375, y: 0.53125 },
  { x: 0.09375, y: 0.53125 },
  { x: 0.15625, y: 0.53125 },
  { x: 0.15625, y: 0.53125 },
  { x: 0.21875, y: 0.53125 },
  { x: 0.21875, y: 0.53125 },
  { x: 0.28125, y: 0.53125 },
  { x: 0.28125, y: 0.53125 },
  { x: 0.34375, y: 0.53125 },
  { x: 0.34375, y: 0.53125 },
  { x: 0.40625, y: 0.53125 },
  { x: 0.40625, y: 0.53125 },
  { x: 0.46875, y: 0.53125 },
  { x: 0.46875, y: 0.53125 },
  { x: 0.53125, y: 0.53125 },
  { x: 0.53125, y: 0.53125 },
  { x: 0.59375, y: 0.53125 },
  { x: 0.59375, y: 0.53125 },
  { x: 0.65625, y: 0.53125 },
  { x: 0.65625, y: 0.53125 },
  { x: 0.71875, y: 0.53125 },
  { x: 0.71875, y: 0.53125 },
  { x: 0.78125, y: 0.53125 },
  { x: 0.78125, y: 0.53125 },
  { x: 0.84375, y: 0.53125 },
  { x: 0.84375, y: 0.53125 },
  { x: 0.90625, y: 0.53125 },
  { x: 0.90625, y: 0.53125 },
  { x: 0.96875, y: 0.53125 },
  { x: 0.96875, y: 0.53125 },
  { x: 0.03125, y: 0.59375 },
  { x: 0.03125, y: 0.59375 },
  { x: 0.09375, y: 0.59375 },
  { x: 0.09375, y: 0.59375 },
  { x: 0.15625, y: 0.59375 },
  { x: 0.15625, y: 0.59375 },
  { x: 0.21875, y: 0.59375 },
  { x: 0.21875, y: 0.59375 },
  { x: 0.28125, y: 0.59375 },
  { x: 0.28125, y: 0.59375 },
  { x: 0.34375, y: 0.59375 },
  { x: 0.34375, y: 0.59375 },
  { x: 0.40625, y: 0.59375 },
  { x: 0.40625, y: 0.59375 },
  { x: 0.46875, y: 0.59375 },
  { x: 0.46875, y: 0.59375 },
  { x: 0.53125, y: 0.59375 },
  { x: 0.53125, y: 0.59375 },
  { x: 0.59375, y: 0.59375 },
  { x: 0.59375, y: 0.59375 },
  { x: 0.65625, y: 0.59375 },
  { x: 0.65625, y: 0.59375 },
  { x: 0.71875, y: 0.59375 },
  { x: 0.71875, y: 0.59375 },
  { x: 0.78125, y: 0.59375 },
  { x: 0.78125, y: 0.59375 },
  { x: 0.84375, y: 0.59375 },
  { x: 0.84375, y: 0.59375 },
  { x: 0.90625, y: 0.59375 },
  { x: 0.90625, y: 0.59375 },
  { x: 0.96875, y: 0.59375 },
  { x: 0.96875, y: 0.59375 },
  { x: 0.03125, y: 0.65625 },
  { x: 0.03125, y: 0.65625 },
  { x: 0.09375, y: 0.65625 },
  { x: 0.09375, y: 0.65625 },
  { x: 0.15625, y: 0.65625 },
  { x: 0.15625, y: 0.65625 },
  { x: 0.21875, y: 0.65625 },
  { x: 0.21875, y: 0.65625 },
  { x: 0.28125, y: 0.65625 },
  { x: 0.28125, y: 0.65625 },
  { x: 0.34375, y: 0.65625 },
  { x: 0.34375, y: 0.65625 },
  { x: 0.40625, y: 0.65625 },
  { x: 0.40625, y: 0.65625 },
  { x: 0.46875, y: 0.65625 },
  { x: 0.46875, y: 0.65625 },
  { x: 0.53125, y: 0.65625 },
  { x: 0.53125, y: 0.65625 },
  { x: 0.59375, y: 0.65625 },
  { x: 0.59375, y: 0.65625 },
  { x: 0.65625, y: 0.65625 },
  { x: 0.65625, y: 0.65625 },
  { x: 0.71875, y: 0.65625 },
  { x: 0.71875, y: 0.65625 },
  { x: 0.78125, y: 0.65625 },
  { x: 0.78125, y: 0.65625 },
  { x: 0.84375, y: 0.65625 },
  { x: 0.84375, y: 0.65625 },
  { x: 0.90625, y: 0.65625 },
  { x: 0.90625, y: 0.65625 },
  { x: 0.96875, y: 0.65625 },
  { x: 0.96875, y: 0.65625 },
  { x: 0.03125, y: 0.71875 },
  { x: 0.03125, y: 0.71875 },
  { x: 0.09375, y: 0.71875 },
  { x: 0.09375, y: 0.71875 },
  { x: 0.15625, y: 0.71875 },
  { x: 0.15625, y: 0.71875 },
  { x: 0.21875, y: 0.71875 },
  { x: 0.21875, y: 0.71875 },
  { x: 0.28125, y: 0.71875 },
  { x: 0.28125, y: 0.71875 },
  { x: 0.34375, y: 0.71875 },
  { x: 0.34375, y: 0.71875 },
  { x: 0.40625, y: 0.71875 },
  { x: 0.40625, y: 0.71875 },
  { x: 0.46875, y: 0.71875 },
  { x: 0.46875, y: 0.71875 },
  { x: 0.53125, y: 0.71875 },
  { x: 0.53125, y: 0.71875 },
  { x: 0.59375, y: 0.71875 },
  { x: 0.59375, y: 0.71875 },
  { x: 0.65625, y: 0.71875 },
  { x: 0.65625, y: 0.71875 },
  { x: 0.71875, y: 0.71875 },
  { x: 0.71875, y: 0.71875 },
  { x: 0.78125, y: 0.71875 },
  { x: 0.78125, y: 0.71875 },
  { x: 0.84375, y: 0.71875 },
  { x: 0.84375, y: 0.71875 },
  { x: 0.90625, y: 0.71875 },
  { x: 0.90625, y: 0.71875 },
  { x: 0.96875, y: 0.71875 },
  { x: 0.96875, y: 0.71875 },
  { x: 0.03125, y: 0.78125 },
  { x: 0.03125, y: 0.78125 },
  { x: 0.09375, y: 0.78125 },
  { x: 0.09375, y: 0.78125 },
  { x: 0.15625, y: 0.78125 },
  { x: 0.15625, y: 0.78125 },
  { x: 0.21875, y: 0.78125 },
  { x: 0.21875, y: 0.78125 },
  { x: 0.28125, y: 0.78125 },
  { x: 0.28125, y: 0.78125 },
  { x: 0.34375, y: 0.78125 },
  { x: 0.34375, y: 0.78125 },
  { x: 0.40625, y: 0.78125 },
  { x: 0.40625, y: 0.78125 },
  { x: 0.46875, y: 0.78125 },
  { x: 0.46875, y: 0.78125 },
  { x: 0.53125, y: 0.78125 },
  { x: 0.53125, y: 0.78125 },
  { x: 0.59375, y: 0.78125 },
  { x: 0.59375, y: 0.78125 },
  { x: 0.65625, y: 0.78125 },
  { x: 0.65625, y: 0.78125 },
  { x: 0.71875, y: 0.78125 },
  { x: 0.71875, y: 0.78125 },
  { x: 0.78125, y: 0.78125 },
  { x: 0.78125, y: 0.78125 },
  { x: 0.84375, y: 0.78125 },
  { x: 0.84375, y: 0.78125 },
  { x: 0.90625, y: 0.78125 },
  { x: 0.90625, y: 0.78125 },
  { x: 0.96875, y: 0.78125 },
  { x: 0.96875, y: 0.78125 },
  { x: 0.03125, y: 0.84375 },
  { x: 0.03125, y: 0.84375 },
  { x: 0.09375, y: 0.84375 },
  { x: 0.09375, y: 0.84375 },
  { x: 0.15625, y: 0.84375 },
  { x: 0.15625, y: 0.84375 },
  { x: 0.21875, y: 0.84375 },
  { x: 0.21875, y: 0.84375 },
  { x: 0.28125, y: 0.84375 },
  { x: 0.28125, y: 0.84375 },
  { x: 0.34375, y: 0.84375 },
  { x: 0.34375, y: 0.84375 },
  { x: 0.40625, y: 0.84375 },
  { x: 0.40625, y: 0.84375 },
  { x: 0.46875, y: 0.84375 },
  { x: 0.46875, y: 0.84375 },
  { x: 0.53125, y: 0.84375 },
  { x: 0.53125, y: 0.84375 },
  { x: 0.59375, y: 0.84375 },
  { x: 0.59375, y: 0.84375 },
  { x: 0.65625, y: 0.84375 },
  { x: 0.65625, y: 0.84375 },
  { x: 0.71875, y: 0.84375 },
  { x: 0.71875, y: 0.84375 },
  { x: 0.78125, y: 0.84375 },
  { x: 0.78125, y: 0.84375 },
  { x: 0.84375, y: 0.84375 },
  { x: 0.84375, y: 0.84375 },
  { x: 0.90625, y: 0.84375 },
  { x: 0.90625, y: 0.84375 },
  { x: 0.96875, y: 0.84375 },
  { x: 0.96875, y: 0.84375 },
  { x: 0.03125, y: 0.90625 },
  { x: 0.03125, y: 0.90625 },
  { x: 0.09375, y: 0.90625 },
  { x: 0.09375, y: 0.90625 },
  { x: 0.15625, y: 0.90625 },
  { x: 0.15625, y: 0.90625 },
  { x: 0.21875, y: 0.90625 },
  { x: 0.21875, y: 0.90625 },
  { x: 0.28125, y: 0.90625 },
  { x: 0.28125, y: 0.90625 },
  { x: 0.34375, y: 0.90625 },
  { x: 0.34375, y: 0.90625 },
  { x: 0.40625, y: 0.90625 },
  { x: 0.40625, y: 0.90625 },
  { x: 0.46875, y: 0.90625 },
  { x: 0.46875, y: 0.90625 },
  { x: 0.53125, y: 0.90625 },
  { x: 0.53125, y: 0.90625 },
  { x: 0.59375, y: 0.90625 },
  { x: 0.59375, y: 0.90625 },
  { x: 0.65625, y: 0.90625 },
  { x: 0.65625, y: 0.90625 },
  { x: 0.71875, y: 0.90625 },
  { x: 0.71875, y: 0.90625 },
  { x: 0.78125, y: 0.90625 },
  { x: 0.78125, y: 0.90625 },
  { x: 0.84375, y: 0.90625 },
  { x: 0.84375, y: 0.90625 },
  { x: 0.90625, y: 0.90625 },
  { x: 0.90625, y: 0.90625 },
  { x: 0.96875, y: 0.90625 },
  { x: 0.96875, y: 0.90625 },
  { x: 0.03125, y: 0.96875 },
  { x: 0.03125, y: 0.96875 },
  { x: 0.09375, y: 0.96875 },
  { x: 0.09375, y: 0.96875 },
  { x: 0.15625, y: 0.96875 },
  { x: 0.15625, y: 0.96875 },
  { x: 0.21875, y: 0.96875 },
  { x: 0.21875, y: 0.96875 },
  { x: 0.28125, y: 0.96875 },
  { x: 0.28125, y: 0.96875 },
  { x: 0.34375, y: 0.96875 },
  { x: 0.34375, y: 0.96875 },
  { x: 0.40625, y: 0.96875 },
  { x: 0.40625, y: 0.96875 },
  { x: 0.46875, y: 0.96875 },
  { x: 0.46875, y: 0.96875 },
  { x: 0.53125, y: 0.96875 },
  { x: 0.53125, y: 0.96875 },
  { x: 0.59375, y: 0.96875 },
  { x: 0.59375, y: 0.96875 },
  { x: 0.65625, y: 0.96875 },
  { x: 0.65625, y: 0.96875 },
  { x: 0.71875, y: 0.96875 },
  { x: 0.71875, y: 0.96875 },
  { x: 0.78125, y: 0.96875 },
  { x: 0.78125, y: 0.96875 },
  { x: 0.84375, y: 0.96875 },
  { x: 0.84375, y: 0.96875 },
  { x: 0.90625, y: 0.96875 },
  { x: 0.90625, y: 0.96875 },
  { x: 0.96875, y: 0.96875 },
  { x: 0.96875, y: 0.96875 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 }
];

// src/handpose/handdetector.ts
var HandDetector = class {
  constructor(model10) {
    this.model = model10;
    this.anchors = anchors.map((anchor) => [anchor.x, anchor.y]);
    this.anchorsTensor = pi(this.anchors);
    this.inputSize = this.model && this.model.inputs && this.model.inputs[0].shape ? this.model.inputs[0].shape[2] : 0;
    this.inputSizeTensor = At([this.inputSize, this.inputSize]);
    this.doubleInputSizeTensor = At([this.inputSize * 2, this.inputSize * 2]);
  }
  normalizeBoxes(boxes) {
    return z(() => {
      const boxOffsets = Oe(boxes, [0, 0], [-1, 2]);
      const boxSizes = Oe(boxes, [0, 2], [-1, 2]);
      const boxCenterPoints = Y(ue(boxOffsets, this.inputSizeTensor), this.anchorsTensor);
      const halfBoxSizes = ue(boxSizes, this.doubleInputSizeTensor);
      const startPoints = F(le(boxCenterPoints, halfBoxSizes), this.inputSizeTensor);
      const endPoints = F(Y(boxCenterPoints, halfBoxSizes), this.inputSizeTensor);
      return bk([startPoints, endPoints], 1);
    });
  }
  normalizeLandmarks(rawPalmLandmarks, index) {
    return z(() => {
      const landmarks = Y(ue(O(rawPalmLandmarks, [-1, 7, 2]), this.inputSizeTensor), this.anchors[index]);
      return F(landmarks, this.inputSizeTensor);
    });
  }
  async getBoxes(input, config3) {
    const t = {};
    t.batched = this.model.predict(input);
    t.predictions = en(t.batched);
    t.scores = z(() => en(Jr(Oe(t.predictions, [0, 0], [-1, 1]))));
    const scores = await t.scores.data();
    t.boxes = Oe(t.predictions, [0, 1], [-1, 4]);
    t.norm = this.normalizeBoxes(t.boxes);
    t.nms = await bn.nonMaxSuppressionAsync(t.norm, t.scores, 10 * config3.hand.maxDetected, config3.hand.iouThreshold, config3.hand.minConfidence);
    const nms = await t.nms.array();
    const hands = [];
    for (const index of nms) {
      const palmBox = Oe(t.norm, [index, 0], [1, -1]);
      const palmLandmarks = z(() => O(this.normalizeLandmarks(Oe(t.predictions, [index, 5], [1, 14]), index), [-1, 2]));
      hands.push({ box: palmBox, palmLandmarks, confidence: scores[index] });
    }
    for (const tensor of Object.keys(t))
      Ae(t[tensor]);
    return hands;
  }
  async estimateHandBounds(input, config3) {
    const inputHeight = input.shape[1];
    const inputWidth = input.shape[2];
    const image3 = z(() => le(ue(bn.resizeBilinear(input, [this.inputSize, this.inputSize]), 127.5), 1));
    const predictions = await this.getBoxes(image3, config3);
    Ae(image3);
    const hands = [];
    if (!predictions || predictions.length === 0)
      return hands;
    for (const prediction of predictions) {
      const boxes = await prediction.box.data();
      const startPoint = boxes.slice(0, 2);
      const endPoint = boxes.slice(2, 4);
      const palmLandmarks = await prediction.palmLandmarks.array();
      Ae(prediction.box);
      Ae(prediction.palmLandmarks);
      hands.push(scaleBoxCoordinates2({ startPoint, endPoint, palmLandmarks, confidence: prediction.confidence }, [inputWidth / this.inputSize, inputHeight / this.inputSize]));
    }
    return hands;
  }
};

// src/handpose/util.ts
function normalizeRadians2(angle) {
  return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));
}
function computeRotation2(point1, point2) {
  const radians = Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]);
  return normalizeRadians2(radians);
}
var buildTranslationMatrix2 = (x, y) => [[1, 0, x], [0, 1, y], [0, 0, 1]];
function dot2(v12, v22) {
  let product = 0;
  for (let i = 0; i < v12.length; i++) {
    product += v12[i] * v22[i];
  }
  return product;
}
function getColumnFrom2DArr2(arr, columnIndex) {
  const column = [];
  for (let i = 0; i < arr.length; i++) {
    column.push(arr[i][columnIndex]);
  }
  return column;
}
function multiplyTransformMatrices2(mat1, mat2) {
  const product = [];
  const size = mat1.length;
  for (let row = 0; row < size; row++) {
    product.push([]);
    for (let col = 0; col < size; col++) {
      product[row].push(dot2(mat1[row], getColumnFrom2DArr2(mat2, col)));
    }
  }
  return product;
}
function buildRotationMatrix2(rotation, center) {
  const cosA = Math.cos(rotation);
  const sinA = Math.sin(rotation);
  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];
  const translationMatrix = buildTranslationMatrix2(center[0], center[1]);
  const translationTimesRotation = multiplyTransformMatrices2(translationMatrix, rotationMatrix);
  const negativeTranslationMatrix = buildTranslationMatrix2(-center[0], -center[1]);
  return multiplyTransformMatrices2(translationTimesRotation, negativeTranslationMatrix);
}
function invertTransformMatrix2(matrix) {
  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];
  const translationComponent = [matrix[0][2], matrix[1][2]];
  const invertedTranslation = [
    -dot2(rotationComponent[0], translationComponent),
    -dot2(rotationComponent[1], translationComponent)
  ];
  return [
    rotationComponent[0].concat(invertedTranslation[0]),
    rotationComponent[1].concat(invertedTranslation[1]),
    [0, 0, 1]
  ];
}
function rotatePoint2(homogeneousCoordinate, rotationMatrix) {
  return [
    dot2(homogeneousCoordinate, rotationMatrix[0]),
    dot2(homogeneousCoordinate, rotationMatrix[1])
  ];
}

// src/handpose/handpipeline.ts
var palmBoxEnlargeFactor = 5;
var handBoxEnlargeFactor = 1.65;
var palmLandmarkIds = [0, 5, 9, 13, 17, 1, 2];
var palmLandmarksPalmBase = 0;
var palmLandmarksMiddleFingerBase = 2;
var HandPipeline = class {
  constructor(handDetector, handPoseModel2) {
    var _a2;
    this.handDetector = handDetector;
    this.handPoseModel = handPoseModel2;
    this.inputSize = (_a2 = this.handPoseModel) == null ? void 0 : _a2.inputs[0].shape[2];
    this.storedBoxes = [];
    this.skipped = 0;
    this.detectedHands = 0;
  }
  calculateLandmarksBoundingBox(landmarks) {
    const xs2 = landmarks.map((d) => d[0]);
    const ys2 = landmarks.map((d) => d[1]);
    const startPoint = [Math.min(...xs2), Math.min(...ys2)];
    const endPoint = [Math.max(...xs2), Math.max(...ys2)];
    return { startPoint, endPoint };
  }
  getBoxForPalmLandmarks(palmLandmarks, rotationMatrix) {
    const rotatedPalmLandmarks = palmLandmarks.map((coord) => rotatePoint2([...coord, 1], rotationMatrix));
    const boxAroundPalm = this.calculateLandmarksBoundingBox(rotatedPalmLandmarks);
    return enlargeBox2(squarifyBox2(boxAroundPalm), palmBoxEnlargeFactor);
  }
  getBoxForHandLandmarks(landmarks) {
    const boundingBox = this.calculateLandmarksBoundingBox(landmarks);
    const boxAroundHand = enlargeBox2(squarifyBox2(boundingBox), handBoxEnlargeFactor);
    boxAroundHand.palmLandmarks = [];
    for (let i = 0; i < palmLandmarkIds.length; i++) {
      boxAroundHand.palmLandmarks.push(landmarks[palmLandmarkIds[i]].slice(0, 2));
    }
    return boxAroundHand;
  }
  transformRawCoords(rawCoords, box22, angle, rotationMatrix) {
    const boxSize = getBoxSize2(box22);
    const scaleFactor = [boxSize[0] / this.inputSize, boxSize[1] / this.inputSize, (boxSize[0] + boxSize[1]) / this.inputSize / 2];
    const coordsScaled = rawCoords.map((coord) => [
      scaleFactor[0] * (coord[0] - this.inputSize / 2),
      scaleFactor[1] * (coord[1] - this.inputSize / 2),
      scaleFactor[2] * coord[2]
    ]);
    const coordsRotationMatrix = buildRotationMatrix2(angle, [0, 0]);
    const coordsRotated = coordsScaled.map((coord) => {
      const rotated = rotatePoint2(coord, coordsRotationMatrix);
      return [...rotated, coord[2]];
    });
    const inverseRotationMatrix = invertTransformMatrix2(rotationMatrix);
    const boxCenter = [...getBoxCenter2(box22), 1];
    const originalBoxCenter = [
      dot2(boxCenter, inverseRotationMatrix[0]),
      dot2(boxCenter, inverseRotationMatrix[1])
    ];
    return coordsRotated.map((coord) => [
      Math.trunc(coord[0] + originalBoxCenter[0]),
      Math.trunc(coord[1] + originalBoxCenter[1]),
      Math.trunc(coord[2])
    ]);
  }
  async estimateHands(image3, config3) {
    let useFreshBox = false;
    let boxes;
    if (this.skipped === 0 || this.skipped > config3.hand.skipFrames || !config3.hand.landmarks || !config3.skipFrame) {
      boxes = await this.handDetector.estimateHandBounds(image3, config3);
      this.skipped = 0;
    }
    if (config3.skipFrame)
      this.skipped++;
    if (boxes && boxes.length > 0 && (boxes.length !== this.detectedHands && this.detectedHands !== config3.hand.maxDetected || !config3.hand.landmarks)) {
      this.detectedHands = 0;
      this.storedBoxes = [...boxes];
      if (this.storedBoxes.length > 0)
        useFreshBox = true;
    }
    const hands = [];
    for (let i = 0; i < this.storedBoxes.length; i++) {
      const currentBox = this.storedBoxes[i];
      if (!currentBox)
        continue;
      if (config3.hand.landmarks) {
        const angle = config3.hand.rotation ? computeRotation2(currentBox.palmLandmarks[palmLandmarksPalmBase], currentBox.palmLandmarks[palmLandmarksMiddleFingerBase]) : 0;
        const palmCenter = getBoxCenter2(currentBox);
        const palmCenterNormalized = [palmCenter[0] / image3.shape[2], palmCenter[1] / image3.shape[1]];
        const rotatedImage = config3.hand.rotation && gw.flags.IS_BROWSER ? bn.rotateWithOffset(image3, angle, 0, palmCenterNormalized) : image3.clone();
        const rotationMatrix = buildRotationMatrix2(-angle, palmCenter);
        const newBox = useFreshBox ? this.getBoxForPalmLandmarks(currentBox.palmLandmarks, rotationMatrix) : currentBox;
        const croppedInput = cutBoxFromImageAndResize2(newBox, rotatedImage, [this.inputSize, this.inputSize]);
        const handImage = ue(croppedInput, 255);
        Ae(croppedInput);
        Ae(rotatedImage);
        const [confidenceT, keypoints3] = await this.handPoseModel.predict(handImage);
        Ae(handImage);
        const confidence = (await confidenceT.data())[0];
        Ae(confidenceT);
        if (confidence >= config3.hand.minConfidence / 4) {
          const keypointsReshaped = O(keypoints3, [-1, 3]);
          const rawCoords = await keypointsReshaped.array();
          Ae(keypoints3);
          Ae(keypointsReshaped);
          const coords3 = this.transformRawCoords(rawCoords, newBox, angle, rotationMatrix);
          const nextBoundingBox = this.getBoxForHandLandmarks(coords3);
          this.storedBoxes[i] = { ...nextBoundingBox, confidence };
          const result = {
            landmarks: coords3,
            confidence,
            box: { topLeft: nextBoundingBox.startPoint, bottomRight: nextBoundingBox.endPoint }
          };
          hands.push(result);
        } else {
          this.storedBoxes[i] = null;
        }
        Ae(keypoints3);
      } else {
        const enlarged = enlargeBox2(squarifyBox2(currentBox), handBoxEnlargeFactor);
        const result = {
          confidence: currentBox.confidence,
          box: { topLeft: enlarged.startPoint, bottomRight: enlarged.endPoint }
        };
        hands.push(result);
      }
    }
    this.storedBoxes = this.storedBoxes.filter((a) => a !== null);
    this.detectedHands = hands.length;
    return hands;
  }
};

// src/fingerpose/description.ts
var Finger = {
  thumb: 0,
  index: 1,
  middle: 2,
  ring: 3,
  pinky: 4,
  all: [0, 1, 2, 3, 4],
  nameMapping: { 0: "thumb", 1: "index", 2: "middle", 3: "ring", 4: "pinky" },
  pointsMapping: {
    0: [[0, 1], [1, 2], [2, 3], [3, 4]],
    1: [[0, 5], [5, 6], [6, 7], [7, 8]],
    2: [[0, 9], [9, 10], [10, 11], [11, 12]],
    3: [[0, 13], [13, 14], [14, 15], [15, 16]],
    4: [[0, 17], [17, 18], [18, 19], [19, 20]]
  },
  getName: (value) => Finger.nameMapping[value],
  getPoints: (value) => Finger.pointsMapping[value]
};
var FingerCurl = {
  none: 0,
  half: 1,
  full: 2,
  nameMapping: { 0: "none", 1: "half", 2: "full" },
  getName: (value) => FingerCurl.nameMapping[value]
};
var FingerDirection = {
  verticalUp: 0,
  verticalDown: 1,
  horizontalLeft: 2,
  horizontalRight: 3,
  diagonalUpRight: 4,
  diagonalUpLeft: 5,
  diagonalDownRight: 6,
  diagonalDownLeft: 7,
  nameMapping: { 0: "verticalUp", 1: "verticalDown", 2: "horizontalLeft", 3: "horizontalRight", 4: "diagonalUpRight", 5: "diagonalUpLeft", 6: "diagonalDownRight", 7: "diagonalDownLeft" },
  getName: (value) => FingerDirection.nameMapping[value]
};

// src/fingerpose/estimator.ts
var options = {
  HALF_CURL_START_LIMIT: 60,
  NO_CURL_START_LIMIT: 130,
  DISTANCE_VOTE_POWER: 1.1,
  SINGLE_ANGLE_VOTE_POWER: 0.9,
  TOTAL_ANGLE_VOTE_POWER: 1.6
};
function calculateSlope(point1x, point1y, point2x, point2y) {
  const value = (point1y - point2y) / (point1x - point2x);
  let slope = Math.atan(value) * 180 / Math.PI;
  if (slope <= 0)
    slope = -slope;
  else if (slope > 0)
    slope = 180 - slope;
  return slope;
}
function getSlopes(point1, point2) {
  const slopeXY = calculateSlope(point1[0], point1[1], point2[0], point2[1]);
  if (point1.length === 2)
    return slopeXY;
  const slopeYZ = calculateSlope(point1[1], point1[2], point2[1], point2[2]);
  return [slopeXY, slopeYZ];
}
function angleOrientationAt(angle, weightageAt = 1) {
  let isVertical = 0;
  let isDiagonal = 0;
  let isHorizontal = 0;
  if (angle >= 75 && angle <= 105)
    isVertical = 1 * weightageAt;
  else if (angle >= 25 && angle <= 155)
    isDiagonal = 1 * weightageAt;
  else
    isHorizontal = 1 * weightageAt;
  return [isVertical, isDiagonal, isHorizontal];
}
function estimateFingerCurl(startPoint, midPoint, endPoint) {
  const start_mid_x_dist = startPoint[0] - midPoint[0];
  const start_end_x_dist = startPoint[0] - endPoint[0];
  const mid_end_x_dist = midPoint[0] - endPoint[0];
  const start_mid_y_dist = startPoint[1] - midPoint[1];
  const start_end_y_dist = startPoint[1] - endPoint[1];
  const mid_end_y_dist = midPoint[1] - endPoint[1];
  const start_mid_z_dist = startPoint[2] - midPoint[2];
  const start_end_z_dist = startPoint[2] - endPoint[2];
  const mid_end_z_dist = midPoint[2] - endPoint[2];
  const start_mid_dist = Math.sqrt(start_mid_x_dist * start_mid_x_dist + start_mid_y_dist * start_mid_y_dist + start_mid_z_dist * start_mid_z_dist);
  const start_end_dist = Math.sqrt(start_end_x_dist * start_end_x_dist + start_end_y_dist * start_end_y_dist + start_end_z_dist * start_end_z_dist);
  const mid_end_dist = Math.sqrt(mid_end_x_dist * mid_end_x_dist + mid_end_y_dist * mid_end_y_dist + mid_end_z_dist * mid_end_z_dist);
  let cos_in = (mid_end_dist * mid_end_dist + start_mid_dist * start_mid_dist - start_end_dist * start_end_dist) / (2 * mid_end_dist * start_mid_dist);
  if (cos_in > 1)
    cos_in = 1;
  else if (cos_in < -1)
    cos_in = -1;
  let angleOfCurve = Math.acos(cos_in);
  angleOfCurve = 57.2958 * angleOfCurve % 180;
  let fingerCurl;
  if (angleOfCurve > options.NO_CURL_START_LIMIT)
    fingerCurl = FingerCurl.none;
  else if (angleOfCurve > options.HALF_CURL_START_LIMIT)
    fingerCurl = FingerCurl.half;
  else
    fingerCurl = FingerCurl.full;
  return fingerCurl;
}
function estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x) {
  let estimatedDirection;
  if (max_dist_x === Math.abs(start_end_x_dist)) {
    if (start_end_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  } else if (max_dist_x === Math.abs(start_mid_x_dist)) {
    if (start_mid_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  } else {
    if (mid_end_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  }
  return estimatedDirection;
}
function estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y) {
  let estimatedDirection;
  if (max_dist_y === Math.abs(start_end_y_dist)) {
    if (start_end_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  } else if (max_dist_y === Math.abs(start_mid_y_dist)) {
    if (start_mid_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  } else {
    if (mid_end_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  }
  return estimatedDirection;
}
function estimateDiagonalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y, start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x) {
  let estimatedDirection;
  const reqd_vertical_direction = estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y);
  const reqd_horizontal_direction = estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  if (reqd_vertical_direction === FingerDirection.verticalUp) {
    if (reqd_horizontal_direction === FingerDirection.horizontalLeft)
      estimatedDirection = FingerDirection.diagonalUpLeft;
    else
      estimatedDirection = FingerDirection.diagonalUpRight;
  } else {
    if (reqd_horizontal_direction === FingerDirection.horizontalLeft)
      estimatedDirection = FingerDirection.diagonalDownLeft;
    else
      estimatedDirection = FingerDirection.diagonalDownRight;
  }
  return estimatedDirection;
}
function calculateFingerDirection(startPoint, midPoint, endPoint, fingerSlopes) {
  const start_mid_x_dist = startPoint[0] - midPoint[0];
  const start_end_x_dist = startPoint[0] - endPoint[0];
  const mid_end_x_dist = midPoint[0] - endPoint[0];
  const start_mid_y_dist = startPoint[1] - midPoint[1];
  const start_end_y_dist = startPoint[1] - endPoint[1];
  const mid_end_y_dist = midPoint[1] - endPoint[1];
  const max_dist_x = Math.max(Math.abs(start_mid_x_dist), Math.abs(start_end_x_dist), Math.abs(mid_end_x_dist));
  const max_dist_y = Math.max(Math.abs(start_mid_y_dist), Math.abs(start_end_y_dist), Math.abs(mid_end_y_dist));
  let voteVertical = 0;
  let voteDiagonal = 0;
  let voteHorizontal = 0;
  const start_end_x_y_dist_ratio = max_dist_y / (max_dist_x + 1e-5);
  if (start_end_x_y_dist_ratio > 1.5)
    voteVertical += options.DISTANCE_VOTE_POWER;
  else if (start_end_x_y_dist_ratio > 0.66)
    voteDiagonal += options.DISTANCE_VOTE_POWER;
  else
    voteHorizontal += options.DISTANCE_VOTE_POWER;
  const start_mid_dist = Math.sqrt(start_mid_x_dist * start_mid_x_dist + start_mid_y_dist * start_mid_y_dist);
  const start_end_dist = Math.sqrt(start_end_x_dist * start_end_x_dist + start_end_y_dist * start_end_y_dist);
  const mid_end_dist = Math.sqrt(mid_end_x_dist * mid_end_x_dist + mid_end_y_dist * mid_end_y_dist);
  const max_dist = Math.max(start_mid_dist, start_end_dist, mid_end_dist);
  let calc_start_point_x = startPoint[0];
  let calc_start_point_y = startPoint[1];
  let calc_end_point_x = endPoint[0];
  let calc_end_point_y = endPoint[1];
  if (max_dist === start_mid_dist) {
    calc_end_point_x = endPoint[0];
    calc_end_point_y = endPoint[1];
  } else if (max_dist === mid_end_dist) {
    calc_start_point_x = midPoint[0];
    calc_start_point_y = midPoint[1];
  }
  const calcStartPoint = [calc_start_point_x, calc_start_point_y];
  const calcEndPoint = [calc_end_point_x, calc_end_point_y];
  const totalAngle = getSlopes(calcStartPoint, calcEndPoint);
  const votes = angleOrientationAt(totalAngle, options.TOTAL_ANGLE_VOTE_POWER);
  voteVertical += votes[0];
  voteDiagonal += votes[1];
  voteHorizontal += votes[2];
  for (const fingerSlope of fingerSlopes) {
    const fingerVotes = angleOrientationAt(fingerSlope, options.SINGLE_ANGLE_VOTE_POWER);
    voteVertical += fingerVotes[0];
    voteDiagonal += fingerVotes[1];
    voteHorizontal += fingerVotes[2];
  }
  let estimatedDirection;
  if (voteVertical === Math.max(voteVertical, voteDiagonal, voteHorizontal)) {
    estimatedDirection = estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y);
  } else if (voteHorizontal === Math.max(voteDiagonal, voteHorizontal)) {
    estimatedDirection = estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  } else {
    estimatedDirection = estimateDiagonalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y, start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  }
  return estimatedDirection;
}
function estimate(landmarks) {
  const slopesXY = [];
  const slopesYZ = [];
  const fingerCurls = [];
  const fingerDirections = [];
  if (!landmarks)
    return { curls: fingerCurls, directions: fingerDirections };
  for (const finger of Finger.all) {
    const points = Finger.getPoints(finger);
    const slopeAtXY = [];
    const slopeAtYZ = [];
    for (const point2 of points) {
      const point1 = landmarks[point2[0]];
      const point22 = landmarks[point2[1]];
      const slopes = getSlopes(point1, point22);
      const slopeXY = slopes[0];
      const slopeYZ = slopes[1];
      slopeAtXY.push(slopeXY);
      slopeAtYZ.push(slopeYZ);
    }
    slopesXY.push(slopeAtXY);
    slopesYZ.push(slopeAtYZ);
  }
  for (const finger of Finger.all) {
    const pointIndexAt = finger === Finger.thumb ? 1 : 0;
    const fingerPointsAt = Finger.getPoints(finger);
    const startPoint = landmarks[fingerPointsAt[pointIndexAt][0]];
    const midPoint = landmarks[fingerPointsAt[pointIndexAt + 1][1]];
    const endPoint = landmarks[fingerPointsAt[3][1]];
    const fingerCurled = estimateFingerCurl(startPoint, midPoint, endPoint);
    const fingerPosition = calculateFingerDirection(startPoint, midPoint, endPoint, slopesXY[finger].slice(pointIndexAt));
    fingerCurls[finger] = fingerCurled;
    fingerDirections[finger] = fingerPosition;
  }
  return { curls: fingerCurls, directions: fingerDirections };
}

// src/fingerpose/gesture.ts
var Gesture = class {
  constructor(name) {
    this.name = name;
    this.curls = {};
    this.directions = {};
    this.weights = [1, 1, 1, 1, 1];
    this.weightsRelative = [1, 1, 1, 1, 1];
  }
  addCurl(finger, curl, confidence) {
    if (typeof this.curls[finger] === "undefined")
      this.curls[finger] = [];
    this.curls[finger].push([curl, confidence]);
  }
  addDirection(finger, position, confidence) {
    if (!this.directions[finger])
      this.directions[finger] = [];
    this.directions[finger].push([position, confidence]);
  }
  setWeight(finger, weight) {
    this.weights[finger] = weight;
    const total = this.weights.reduce((a, b7) => a + b7, 0);
    this.weightsRelative = this.weights.map((el2) => el2 * 5 / total);
  }
  matchAgainst(detectedCurls, detectedDirections) {
    let confidence = 0;
    for (const fingerIdx in detectedCurls) {
      const detectedCurl = detectedCurls[fingerIdx];
      const expectedCurls = this.curls[fingerIdx];
      if (typeof expectedCurls === "undefined") {
        confidence += this.weightsRelative[fingerIdx];
        continue;
      }
      for (const [expectedCurl, score3] of expectedCurls) {
        if (detectedCurl === expectedCurl) {
          confidence += score3 * this.weightsRelative[fingerIdx];
          break;
        }
      }
    }
    for (const fingerIdx in detectedDirections) {
      const detectedDirection = detectedDirections[fingerIdx];
      const expectedDirections = this.directions[fingerIdx];
      if (typeof expectedDirections === "undefined") {
        confidence += this.weightsRelative[fingerIdx];
        continue;
      }
      for (const [expectedDirection, score3] of expectedDirections) {
        if (detectedDirection === expectedDirection) {
          confidence += score3 * this.weightsRelative[fingerIdx];
          break;
        }
      }
    }
    return confidence / 10;
  }
};

// src/fingerpose/gestures.ts
var ThumbsUp = new Gesture("thumbs up");
ThumbsUp.addCurl(Finger.thumb, FingerCurl.none, 1);
ThumbsUp.addDirection(Finger.thumb, FingerDirection.verticalUp, 1);
ThumbsUp.addDirection(Finger.thumb, FingerDirection.diagonalUpLeft, 0.25);
ThumbsUp.addDirection(Finger.thumb, FingerDirection.diagonalUpRight, 0.25);
for (const finger of [Finger.index, Finger.middle, Finger.ring, Finger.pinky]) {
  ThumbsUp.addCurl(finger, FingerCurl.full, 1);
  ThumbsUp.addDirection(finger, FingerDirection.horizontalLeft, 1);
  ThumbsUp.addDirection(finger, FingerDirection.horizontalRight, 1);
}
var Victory = new Gesture("victory");
Victory.addCurl(Finger.thumb, FingerCurl.half, 0.5);
Victory.addCurl(Finger.thumb, FingerCurl.none, 0.5);
Victory.addDirection(Finger.thumb, FingerDirection.verticalUp, 1);
Victory.addDirection(Finger.thumb, FingerDirection.diagonalUpLeft, 1);
Victory.addCurl(Finger.index, FingerCurl.none, 1);
Victory.addDirection(Finger.index, FingerDirection.verticalUp, 0.75);
Victory.addDirection(Finger.index, FingerDirection.diagonalUpLeft, 1);
Victory.addCurl(Finger.middle, FingerCurl.none, 1);
Victory.addDirection(Finger.middle, FingerDirection.verticalUp, 1);
Victory.addDirection(Finger.middle, FingerDirection.diagonalUpLeft, 0.75);
Victory.addCurl(Finger.ring, FingerCurl.full, 1);
Victory.addDirection(Finger.ring, FingerDirection.verticalUp, 0.2);
Victory.addDirection(Finger.ring, FingerDirection.diagonalUpLeft, 1);
Victory.addDirection(Finger.ring, FingerDirection.horizontalLeft, 0.2);
Victory.addCurl(Finger.pinky, FingerCurl.full, 1);
Victory.addDirection(Finger.pinky, FingerDirection.verticalUp, 0.2);
Victory.addDirection(Finger.pinky, FingerDirection.diagonalUpLeft, 1);
Victory.addDirection(Finger.pinky, FingerDirection.horizontalLeft, 0.2);
Victory.setWeight(Finger.index, 2);
Victory.setWeight(Finger.middle, 2);
var gestures_default = [ThumbsUp, Victory];

// src/fingerpose/fingerpose.ts
var minConfidence = 0.7;
function analyze(keypoints3) {
  const estimatorRes = estimate(keypoints3);
  const landmarks = {};
  for (const fingerIdx of Finger.all) {
    landmarks[Finger.getName(fingerIdx)] = {
      curl: FingerCurl.getName(estimatorRes.curls[fingerIdx]),
      direction: FingerDirection.getName(estimatorRes.directions[fingerIdx])
    };
  }
  return landmarks;
}
function match2(keypoints3) {
  const estimatorRes = estimate(keypoints3);
  const poses2 = [];
  for (const gesture3 of gestures_default) {
    const confidence = gesture3.matchAgainst(estimatorRes.curls, estimatorRes.directions);
    if (confidence >= minConfidence)
      poses2.push({ name: gesture3.name, confidence });
  }
  return poses2;
}

// src/handpose/handpose.ts
var meshAnnotations = {
  thumb: [1, 2, 3, 4],
  index: [5, 6, 7, 8],
  middle: [9, 10, 11, 12],
  ring: [13, 14, 15, 16],
  pinky: [17, 18, 19, 20],
  palm: [0]
};
var handDetectorModel;
var handPoseModel;
var handPipeline;
async function predict5(input, config3) {
  const predictions = await handPipeline.estimateHands(input, config3);
  if (!predictions)
    return [];
  const hands = [];
  for (let i = 0; i < predictions.length; i++) {
    const annotations3 = {};
    if (predictions[i].landmarks) {
      for (const key of Object.keys(meshAnnotations)) {
        annotations3[key] = meshAnnotations[key].map((index) => predictions[i].landmarks[index]);
      }
    }
    const keypoints3 = predictions[i].landmarks;
    let box6 = [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, 0, 0];
    let boxRaw3 = [0, 0, 0, 0];
    if (keypoints3 && keypoints3.length > 0) {
      for (const pt of keypoints3) {
        if (pt[0] < box6[0])
          box6[0] = pt[0];
        if (pt[1] < box6[1])
          box6[1] = pt[1];
        if (pt[0] > box6[2])
          box6[2] = pt[0];
        if (pt[1] > box6[3])
          box6[3] = pt[1];
      }
      box6[2] -= box6[0];
      box6[3] -= box6[1];
      boxRaw3 = [box6[0] / (input.shape[2] || 0), box6[1] / (input.shape[1] || 0), box6[2] / (input.shape[2] || 0), box6[3] / (input.shape[1] || 0)];
    } else {
      box6 = predictions[i].box ? [
        Math.trunc(Math.max(0, predictions[i].box.topLeft[0])),
        Math.trunc(Math.max(0, predictions[i].box.topLeft[1])),
        Math.trunc(Math.min(input.shape[2] || 0, predictions[i].box.bottomRight[0]) - Math.max(0, predictions[i].box.topLeft[0])),
        Math.trunc(Math.min(input.shape[1] || 0, predictions[i].box.bottomRight[1]) - Math.max(0, predictions[i].box.topLeft[1]))
      ] : [0, 0, 0, 0];
      boxRaw3 = [
        predictions[i].box.topLeft[0] / (input.shape[2] || 0),
        predictions[i].box.topLeft[1] / (input.shape[1] || 0),
        (predictions[i].box.bottomRight[0] - predictions[i].box.topLeft[0]) / (input.shape[2] || 0),
        (predictions[i].box.bottomRight[1] - predictions[i].box.topLeft[1]) / (input.shape[1] || 0)
      ];
    }
    const landmarks = analyze(keypoints3);
    hands.push({
      id: i,
      score: Math.round(100 * predictions[i].confidence) / 100,
      box: box6,
      boxRaw: boxRaw3,
      keypoints: keypoints3,
      annotations: annotations3,
      landmarks
    });
  }
  return hands;
}
async function load6(config3) {
  if (!handDetectorModel || !handPoseModel) {
    [handDetectorModel, handPoseModel] = await Promise.all([
      config3.hand.enabled ? m7(join(config3.modelBasePath, config3.hand.detector.modelPath), { fromTFHub: config3.hand.detector.modelPath.includes("tfhub.dev") }) : null,
      config3.hand.landmarks ? m7(join(config3.modelBasePath, config3.hand.skeleton.modelPath), { fromTFHub: config3.hand.skeleton.modelPath.includes("tfhub.dev") }) : null
    ]);
    if (config3.hand.enabled) {
      if (!handDetectorModel || !handDetectorModel["modelUrl"])
        log("load model failed:", config3.hand.detector.modelPath);
      else if (config3.debug)
        log("load model:", handDetectorModel["modelUrl"]);
      if (!handPoseModel || !handPoseModel["modelUrl"])
        log("load model failed:", config3.hand.skeleton.modelPath);
      else if (config3.debug)
        log("load model:", handPoseModel["modelUrl"]);
    }
  } else {
    if (config3.debug)
      log("cached model:", handDetectorModel["modelUrl"]);
    if (config3.debug)
      log("cached model:", handPoseModel["modelUrl"]);
  }
  const handDetector = new HandDetector(handDetectorModel);
  handPipeline = new HandPipeline(handDetector, handPoseModel);
  return [handDetectorModel, handPoseModel];
}

// src/blazepose/annotations.ts
var full = [
  "nose",
  "leftEyeInside",
  "leftEye",
  "leftEyeOutside",
  "rightEyeInside",
  "rightEye",
  "rightEyeOutside",
  "leftEar",
  "rightEar",
  "leftMouth",
  "rightMouth",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "leftWrist",
  "rightWrist",
  "leftPalm",
  "rightPalm",
  "leftIndex",
  "rightIndex",
  "leftPinky",
  "rightPinky",
  "leftHip",
  "rightHip",
  "leftKnee",
  "rightKnee",
  "leftAnkle",
  "rightAnkle",
  "leftHeel",
  "rightHeel",
  "leftFoot",
  "rightFoot",
  "midHip",
  "forehead",
  "leftThumb",
  "leftHand",
  "rightThumb",
  "rightHand"
];
var upper = [
  "nose",
  "leftEyeInside",
  "leftEye",
  "leftEyeOutside",
  "rightEyeInside",
  "rightEye",
  "rightEyeOutside",
  "leftEar",
  "rightEar",
  "leftMouth",
  "rightMouth",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "left:15",
  "right:16",
  "left:17",
  "right:18",
  "left:19",
  "right:20",
  "left:21",
  "right:22",
  "leftChest",
  "rightChest",
  "neck",
  "forehead",
  "left:27",
  "right:28",
  "left:29",
  "right:30"
];

// src/blazepose/blazepose.ts
var model4;
async function load7(config3) {
  if (!model4) {
    model4 = await m7(join(config3.modelBasePath, config3.body.modelPath));
    model4["width"] = parseInt(model4["signature"].inputs["input_1:0"].tensorShape.dim[2].size);
    model4["height"] = parseInt(model4["signature"].inputs["input_1:0"].tensorShape.dim[1].size);
    if (!model4 || !model4["modelUrl"])
      log("load model failed:", config3.body.modelPath);
    else if (config3.debug)
      log("load model:", model4["modelUrl"]);
  } else if (config3.debug)
    log("cached model:", model4["modelUrl"]);
  return model4;
}
async function predict6(image3, config3) {
  if (!model4)
    return [];
  if (!config3.body.enabled)
    return [];
  const imgSize = { width: image3.shape[2] || 0, height: image3.shape[1] || 0 };
  const resize = bn.resizeBilinear(image3, [model4["width"], model4["height"]], false);
  const normalize = ue(resize, [255]);
  Ae(resize);
  const resT = await model4.predict(normalize);
  const findT = resT.find((t) => t.size === 195 || t.size === 155);
  const points = await (findT == null ? void 0 : findT.data()) || [];
  resT.forEach((t) => Ae(t));
  Ae(normalize);
  const keypoints3 = [];
  const labels2 = (points == null ? void 0 : points.length) === 195 ? full : upper;
  const depth = 5;
  for (let i = 0; i < points.length / depth; i++) {
    keypoints3.push({
      id: i,
      part: labels2[i],
      position: [
        Math.trunc(imgSize.width * points[depth * i + 0] / 255),
        Math.trunc(imgSize.height * points[depth * i + 1] / 255),
        Math.trunc(points[depth * i + 2]) + 0
      ],
      positionRaw: [
        points[depth * i + 0] / 255,
        points[depth * i + 1] / 255,
        points[depth * i + 2] + 0
      ],
      score: (100 - Math.trunc(100 / (1 + Math.exp(points[depth * i + 3])))) / 100,
      presence: (100 - Math.trunc(100 / (1 + Math.exp(points[depth * i + 4])))) / 100
    });
  }
  const x = keypoints3.map((a) => a.position[0]);
  const y = keypoints3.map((a) => a.position[1]);
  const box6 = [
    Math.min(...x),
    Math.min(...y),
    Math.max(...x) - Math.min(...x),
    Math.max(...y) - Math.min(...x)
  ];
  const boxRaw3 = [0, 0, 0, 0];
  const score3 = keypoints3.reduce((prev, curr) => curr.score > prev ? curr.score : prev, 0);
  return [{ id: 0, score: score3, box: box6, boxRaw: boxRaw3, keypoints: keypoints3 }];
}

// src/efficientpose/efficientpose.ts
var model5;
var keypoints = [];
var box4 = [0, 0, 0, 0];
var boxRaw = [0, 0, 0, 0];
var score = 0;
var skipped3 = Number.MAX_SAFE_INTEGER;
var bodyParts = ["head", "neck", "rightShoulder", "rightElbow", "rightWrist", "chest", "leftShoulder", "leftElbow", "leftWrist", "pelvis", "rightHip", "rightKnee", "rightAnkle", "leftHip", "leftKnee", "leftAnkle"];
async function load8(config3) {
  if (!model5) {
    model5 = await m7(join(config3.modelBasePath, config3.body.modelPath));
    if (!model5 || !model5["modelUrl"])
      log("load model failed:", config3.body.modelPath);
    else if (config3.debug)
      log("load model:", model5["modelUrl"]);
  } else if (config3.debug)
    log("cached model:", model5["modelUrl"]);
  return model5;
}
function max2d(inputs, minScore) {
  const [width, height] = inputs.shape;
  return z(() => {
    const mod = (a, b7) => le(a, F(ue(a, ce(b7, "int32")), ce(b7, "int32")));
    const reshaped = O(inputs, [height * width]);
    const newScore = Vr(reshaped, 0).dataSync()[0];
    if (newScore > minScore) {
      const coords3 = ba(reshaped, 0);
      const x = mod(coords3, width).dataSync()[0];
      const y = ue(coords3, ce(width, "int32")).dataSync()[0];
      return [x, y, newScore];
    }
    return [0, 0, newScore];
  });
}
async function predict7(image3, config3) {
  if (skipped3 < config3.body.skipFrames && config3.skipFrame && Object.keys(keypoints).length > 0) {
    skipped3++;
    return [{ id: 0, score, box: box4, boxRaw, keypoints }];
  }
  skipped3 = 0;
  return new Promise(async (resolve) => {
    const tensor = z(() => {
      if (!model5.inputs[0].shape)
        return null;
      const resize = bn.resizeBilinear(image3, [model5.inputs[0].shape[2], model5.inputs[0].shape[1]], false);
      const enhance2 = F(resize, 2);
      const norm = enhance2.sub(1);
      return norm;
    });
    let resT;
    if (config3.body.enabled)
      resT = await model5.predict(tensor);
    Ae(tensor);
    if (resT) {
      keypoints.length = 0;
      const squeeze = resT.squeeze();
      Ae(resT);
      const stack = squeeze.unstack(2);
      Ae(squeeze);
      for (let id2 = 0; id2 < stack.length; id2++) {
        const [x7, y7, partScore] = max2d(stack[id2], config3.body.minConfidence);
        if (score > config3.body.minConfidence) {
          keypoints.push({
            score: Math.round(100 * partScore) / 100,
            part: bodyParts[id2],
            positionRaw: [
              x7 / model5.inputs[0].shape[2],
              y7 / model5.inputs[0].shape[1]
            ],
            position: [
              Math.round(image3.shape[2] * x7 / model5.inputs[0].shape[2]),
              Math.round(image3.shape[1] * y7 / model5.inputs[0].shape[1])
            ]
          });
        }
      }
      stack.forEach((s) => Ae(s));
    }
    score = keypoints.reduce((prev, curr) => curr.score > prev ? curr.score : prev, 0);
    const x = keypoints.map((a) => a.position[0]);
    const y = keypoints.map((a) => a.position[1]);
    box4 = [
      Math.min(...x),
      Math.min(...y),
      Math.max(...x) - Math.min(...x),
      Math.max(...y) - Math.min(...y)
    ];
    const xRaw = keypoints.map((a) => a.positionRaw[0]);
    const yRaw = keypoints.map((a) => a.positionRaw[1]);
    boxRaw = [
      Math.min(...xRaw),
      Math.min(...yRaw),
      Math.max(...xRaw) - Math.min(...xRaw),
      Math.max(...yRaw) - Math.min(...yRaw)
    ];
    resolve([{ id: 0, score, box: box4, boxRaw, keypoints }]);
  });
}

// src/movenet/movenet.ts
var model6;
var keypoints2 = [];
var box5 = [0, 0, 0, 0];
var boxRaw2 = [0, 0, 0, 0];
var score2 = 0;
var skipped4 = Number.MAX_SAFE_INTEGER;
var bodyParts2 = ["nose", "leftEye", "rightEye", "leftEar", "rightEar", "leftShoulder", "rightShoulder", "leftElbow", "rightElbow", "leftWrist", "rightWrist", "leftHip", "rightHip", "leftKnee", "rightKnee", "leftAnkle", "rightAnkle"];
async function load9(config3) {
  if (!model6) {
    model6 = await m7(join(config3.modelBasePath, config3.body.modelPath));
    if (!model6 || !model6["modelUrl"])
      log("load model failed:", config3.body.modelPath);
    else if (config3.debug)
      log("load model:", model6["modelUrl"]);
  } else if (config3.debug)
    log("cached model:", model6["modelUrl"]);
  return model6;
}
async function parseSinglePose(res, config3, image3) {
  keypoints2.length = 0;
  const kpt3 = res[0][0];
  for (let id2 = 0; id2 < kpt3.length; id2++) {
    score2 = kpt3[id2][2];
    if (score2 > config3.body.minConfidence) {
      keypoints2.push({
        score: Math.round(100 * score2) / 100,
        part: bodyParts2[id2],
        positionRaw: [
          kpt3[id2][1],
          kpt3[id2][0]
        ],
        position: [
          Math.round((image3.shape[2] || 0) * kpt3[id2][1]),
          Math.round((image3.shape[1] || 0) * kpt3[id2][0])
        ]
      });
    }
  }
  score2 = keypoints2.reduce((prev, curr) => curr.score > prev ? curr.score : prev, 0);
  const x = keypoints2.map((a) => a.position[0]);
  const y = keypoints2.map((a) => a.position[1]);
  box5 = [
    Math.min(...x),
    Math.min(...y),
    Math.max(...x) - Math.min(...x),
    Math.max(...y) - Math.min(...y)
  ];
  const xRaw = keypoints2.map((a) => a.positionRaw[0]);
  const yRaw = keypoints2.map((a) => a.positionRaw[1]);
  boxRaw2 = [
    Math.min(...xRaw),
    Math.min(...yRaw),
    Math.max(...xRaw) - Math.min(...xRaw),
    Math.max(...yRaw) - Math.min(...yRaw)
  ];
  const persons2 = [];
  persons2.push({ id: 0, score: score2, box: box5, boxRaw: boxRaw2, keypoints: keypoints2 });
  return persons2;
}
async function parseMultiPose(res, config3, image3) {
  const persons2 = [];
  for (let p = 0; p < res[0].length; p++) {
    const kpt3 = res[0][p];
    score2 = Math.round(100 * kpt3[51 + 4]) / 100;
    if (score2 < config3.body.minConfidence)
      continue;
    keypoints2.length = 0;
    for (let i = 0; i < 17; i++) {
      const partScore = Math.round(100 * kpt3[3 * i + 2]) / 100;
      if (partScore > config3.body.minConfidence) {
        keypoints2.push({
          part: bodyParts2[i],
          score: partScore,
          positionRaw: [
            kpt3[3 * i + 1],
            kpt3[3 * i + 0]
          ],
          position: [
            Math.trunc(kpt3[3 * i + 1] * (image3.shape[2] || 0)),
            Math.trunc(kpt3[3 * i + 0] * (image3.shape[1] || 0))
          ]
        });
      }
    }
    boxRaw2 = [kpt3[51 + 1], kpt3[51 + 0], kpt3[51 + 3] - kpt3[51 + 1], kpt3[51 + 2] - kpt3[51 + 0]];
    persons2.push({
      id: p,
      score: score2,
      boxRaw: boxRaw2,
      box: [
        Math.trunc(boxRaw2[0] * (image3.shape[2] || 0)),
        Math.trunc(boxRaw2[1] * (image3.shape[1] || 0)),
        Math.trunc(boxRaw2[2] * (image3.shape[2] || 0)),
        Math.trunc(boxRaw2[3] * (image3.shape[1] || 0))
      ],
      keypoints: keypoints2
    });
  }
  return persons2;
}
async function predict8(image3, config3) {
  if (skipped4 < config3.body.skipFrames && config3.skipFrame && Object.keys(keypoints2).length > 0) {
    skipped4++;
    return [{ id: 0, score: score2, box: box5, boxRaw: boxRaw2, keypoints: keypoints2 }];
  }
  skipped4 = 0;
  return new Promise(async (resolve) => {
    const tensor = z(() => {
      if (!model6.inputs[0].shape)
        return null;
      let inputSize = model6.inputs[0].shape[2];
      if (inputSize === -1)
        inputSize = 256;
      const resize = bn.resizeBilinear(image3, [inputSize, inputSize], false);
      const cast = J(resize, "int32");
      return cast;
    });
    let resT;
    if (config3.body.enabled)
      resT = await model6.predict(tensor);
    Ae(tensor);
    if (!resT)
      resolve([]);
    const res = await resT.array();
    let persons2;
    if (resT.shape[2] === 17)
      persons2 = await parseSinglePose(res, config3, image3);
    else if (resT.shape[2] === 56)
      persons2 = await parseMultiPose(res, config3, image3);
    Ae(resT);
    resolve(persons2);
  });
}

// src/object/labels.ts
var labels = [
  { class: 1, label: "person" },
  { class: 2, label: "bicycle" },
  { class: 3, label: "car" },
  { class: 4, label: "motorcycle" },
  { class: 5, label: "airplane" },
  { class: 6, label: "bus" },
  { class: 7, label: "train" },
  { class: 8, label: "truck" },
  { class: 9, label: "boat" },
  { class: 10, label: "traffic light" },
  { class: 11, label: "fire hydrant" },
  { class: 12, label: "stop sign" },
  { class: 13, label: "parking meter" },
  { class: 14, label: "bench" },
  { class: 15, label: "bird" },
  { class: 16, label: "cat" },
  { class: 17, label: "dog" },
  { class: 18, label: "horse" },
  { class: 19, label: "sheep" },
  { class: 20, label: "cow" },
  { class: 21, label: "elephant" },
  { class: 22, label: "bear" },
  { class: 23, label: "zebra" },
  { class: 24, label: "giraffe" },
  { class: 25, label: "backpack" },
  { class: 26, label: "umbrella" },
  { class: 27, label: "handbag" },
  { class: 28, label: "tie" },
  { class: 29, label: "suitcase" },
  { class: 30, label: "frisbee" },
  { class: 31, label: "skis" },
  { class: 32, label: "snowboard" },
  { class: 33, label: "sports ball" },
  { class: 34, label: "kite" },
  { class: 35, label: "baseball bat" },
  { class: 36, label: "baseball glove" },
  { class: 37, label: "skateboard" },
  { class: 38, label: "surfboard" },
  { class: 39, label: "tennis racket" },
  { class: 40, label: "bottle" },
  { class: 41, label: "wine glass" },
  { class: 42, label: "cup" },
  { class: 43, label: "fork" },
  { class: 44, label: "knife" },
  { class: 45, label: "spoon" },
  { class: 46, label: "bowl" },
  { class: 47, label: "banana" },
  { class: 48, label: "apple" },
  { class: 49, label: "sandwich" },
  { class: 50, label: "orange" },
  { class: 51, label: "broccoli" },
  { class: 52, label: "carrot" },
  { class: 53, label: "hot dog" },
  { class: 54, label: "pizza" },
  { class: 55, label: "donut" },
  { class: 56, label: "cake" },
  { class: 57, label: "chair" },
  { class: 58, label: "couch" },
  { class: 59, label: "potted plant" },
  { class: 60, label: "bed" },
  { class: 61, label: "dining table" },
  { class: 62, label: "toilet" },
  { class: 63, label: "tv" },
  { class: 64, label: "laptop" },
  { class: 65, label: "mouse" },
  { class: 66, label: "remote" },
  { class: 67, label: "keyboard" },
  { class: 68, label: "cell phone" },
  { class: 69, label: "microwave" },
  { class: 70, label: "oven" },
  { class: 71, label: "toaster" },
  { class: 72, label: "sink" },
  { class: 73, label: "refrigerator" },
  { class: 74, label: "book" },
  { class: 75, label: "clock" },
  { class: 76, label: "vase" },
  { class: 77, label: "scissors" },
  { class: 78, label: "teddy bear" },
  { class: 79, label: "hair drier" },
  { class: 80, label: "toothbrush" }
];

// src/object/nanodet.ts
var model7;
var last3 = [];
var skipped5 = Number.MAX_SAFE_INTEGER;
var scaleBox = 2.5;
async function load10(config3) {
  if (!model7) {
    model7 = await m7(join(config3.modelBasePath, config3.object.modelPath));
    const inputs = Object.values(model7.modelSignature["inputs"]);
    model7.inputSize = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : null;
    if (!model7.inputSize)
      throw new Error(`Human: Cannot determine model inputSize: ${config3.object.modelPath}`);
    if (!model7 || !model7.modelUrl)
      log("load model failed:", config3.object.modelPath);
    else if (config3.debug)
      log("load model:", model7.modelUrl);
  } else if (config3.debug)
    log("cached model:", model7.modelUrl);
  return model7;
}
async function process2(res, inputSize, outputShape, config3) {
  let id2 = 0;
  let results = [];
  for (const strideSize of [1, 2, 4]) {
    z(async () => {
      var _a2, _b;
      const baseSize = strideSize * 13;
      const scoresT = (_a2 = res.find((a) => a.shape[1] === baseSize ** 2 && a.shape[2] === labels.length)) == null ? void 0 : _a2.squeeze();
      const featuresT = (_b = res.find((a) => a.shape[1] === baseSize ** 2 && a.shape[2] < labels.length)) == null ? void 0 : _b.squeeze();
      const boxesMax = featuresT.reshape([-1, 4, featuresT.shape[1] / 4]);
      const boxIdx = await boxesMax.argMax(2).array();
      const scores = await scoresT.array();
      for (let i = 0; i < scoresT.shape[0]; i++) {
        for (let j10 = 0; j10 < scoresT.shape[1]; j10++) {
          const score3 = scores[i][j10];
          if (score3 > config3.object.minConfidence && j10 !== 61) {
            const cx2 = (0.5 + Math.trunc(i % baseSize)) / baseSize;
            const cy2 = (0.5 + Math.trunc(i / baseSize)) / baseSize;
            const boxOffset = boxIdx[i].map((a) => a * (baseSize / strideSize / inputSize));
            const [x, y] = [
              cx2 - scaleBox / strideSize * boxOffset[0],
              cy2 - scaleBox / strideSize * boxOffset[1]
            ];
            const [w, h] = [
              cx2 + scaleBox / strideSize * boxOffset[2] - x,
              cy2 + scaleBox / strideSize * boxOffset[3] - y
            ];
            let boxRaw3 = [x, y, w, h];
            boxRaw3 = boxRaw3.map((a) => Math.max(0, Math.min(a, 1)));
            const box6 = [
              boxRaw3[0] * outputShape[0],
              boxRaw3[1] * outputShape[1],
              boxRaw3[2] * outputShape[0],
              boxRaw3[3] * outputShape[1]
            ];
            const result = {
              id: id2++,
              score: Math.round(100 * score3) / 100,
              class: j10 + 1,
              label: labels[j10].label,
              box: box6.map((a) => Math.trunc(a)),
              boxRaw: boxRaw3
            };
            results.push(result);
          }
        }
      }
    });
  }
  res.forEach((t) => Ae(t));
  const nmsBoxes = results.map((a) => [a.boxRaw[1], a.boxRaw[0], a.boxRaw[3], a.boxRaw[2]]);
  const nmsScores = results.map((a) => a.score);
  let nmsIdx = [];
  if (nmsBoxes && nmsBoxes.length > 0) {
    const nms = await bn.nonMaxSuppressionAsync(nmsBoxes, nmsScores, config3.object.maxDetected, config3.object.iouThreshold, config3.object.minConfidence);
    nmsIdx = await nms.data();
    Ae(nms);
  }
  results = results.filter((_val, idx) => nmsIdx.includes(idx)).sort((a, b7) => b7.score - a.score);
  return results;
}
async function predict9(image3, config3) {
  if (skipped5 < config3.object.skipFrames && config3.skipFrame && last3.length > 0) {
    skipped5++;
    return last3;
  }
  skipped5 = 0;
  return new Promise(async (resolve) => {
    const outputSize = [image3.shape[2], image3.shape[1]];
    const resize = bn.resizeBilinear(image3, [model7.inputSize, model7.inputSize], false);
    const norm = ue(resize, 255);
    const transpose = norm.transpose([0, 3, 1, 2]);
    Ae(norm);
    Ae(resize);
    let objectT;
    if (config3.object.enabled)
      objectT = await model7.predict(transpose);
    Ae(transpose);
    const obj = await process2(objectT, model7.inputSize, outputSize, config3);
    last3 = obj;
    resolve(obj);
  });
}

// src/object/centernet.ts
var model8;
var last4 = [];
var skipped6 = Number.MAX_SAFE_INTEGER;
async function load11(config3) {
  if (!model8) {
    model8 = await m7(join(config3.modelBasePath, config3.object.modelPath));
    const inputs = Object.values(model8.modelSignature["inputs"]);
    model8.inputSize = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : null;
    if (!model8.inputSize)
      throw new Error(`Human: Cannot determine model inputSize: ${config3.object.modelPath}`);
    if (!model8 || !model8.modelUrl)
      log("load model failed:", config3.object.modelPath);
    else if (config3.debug)
      log("load model:", model8.modelUrl);
  } else if (config3.debug)
    log("cached model:", model8.modelUrl);
  return model8;
}
async function process3(res, inputSize, outputShape, config3) {
  if (!res)
    return [];
  const results = [];
  const detections = await res.array();
  const squeezeT = en(res);
  Ae(res);
  const arr = mr(squeezeT, 6, 1);
  Ae(squeezeT);
  const stackT = nr([arr[1], arr[0], arr[3], arr[2]], 1);
  const boxesT = en(stackT);
  const scoresT = en(arr[4]);
  const classesT = en(arr[5]);
  arr.forEach((t) => Ae(t));
  const nmsT = await bn.nonMaxSuppressionAsync(boxesT, scoresT, config3.object.maxDetected, config3.object.iouThreshold, config3.object.minConfidence);
  Ae(boxesT);
  Ae(scoresT);
  Ae(classesT);
  const nms = await nmsT.data();
  Ae(nmsT);
  let i = 0;
  for (const id2 of nms) {
    const score3 = Math.trunc(100 * detections[0][id2][4]) / 100;
    const classVal = detections[0][id2][5];
    const label = labels[classVal].label;
    const [x, y] = [
      detections[0][id2][0] / inputSize,
      detections[0][id2][1] / inputSize
    ];
    const boxRaw3 = [
      x,
      y,
      detections[0][id2][2] / inputSize - x,
      detections[0][id2][3] / inputSize - y
    ];
    const box6 = [
      Math.trunc(boxRaw3[0] * outputShape[0]),
      Math.trunc(boxRaw3[1] * outputShape[1]),
      Math.trunc(boxRaw3[2] * outputShape[0]),
      Math.trunc(boxRaw3[3] * outputShape[1])
    ];
    results.push({ id: i++, score: score3, class: classVal, label, box: box6, boxRaw: boxRaw3 });
  }
  return results;
}
async function predict10(input, config3) {
  if (skipped6 < config3.object.skipFrames && config3.skipFrame && last4.length > 0) {
    skipped6++;
    return last4;
  }
  skipped6 = 0;
  return new Promise(async (resolve) => {
    const outputSize = [input.shape[2], input.shape[1]];
    const resize = bn.resizeBilinear(input, [model8.inputSize, model8.inputSize]);
    const objectT = config3.object.enabled ? model8.execute(resize, ["tower_0/detections"]) : null;
    Ae(resize);
    const obj = await process3(objectT, model8.inputSize, outputSize, config3);
    last4 = obj;
    resolve(obj);
  });
}

// src/image/imagefx.ts
function GLProgram(gl2, vertexSource, fragmentSource) {
  const _collect = function(source, prefix, collection) {
    const r = new RegExp("\\b" + prefix + " \\w+ (\\w+)", "ig");
    source.replace(r, (match3, name) => {
      collection[name] = 0;
      return match3;
    });
  };
  const _compile = function(source, type) {
    const shader = gl2.createShader(type);
    gl2.shaderSource(shader, source);
    gl2.compileShader(shader);
    if (!gl2.getShaderParameter(shader, gl2.COMPILE_STATUS))
      throw new Error("Filter: GL compile failed", gl2.getShaderInfoLog(shader));
    return shader;
  };
  this.uniform = {};
  this.attribute = {};
  const _vsh = _compile(vertexSource, gl2.VERTEX_SHADER);
  const _fsh = _compile(fragmentSource, gl2.FRAGMENT_SHADER);
  this.id = gl2.createProgram();
  gl2.attachShader(this.id, _vsh);
  gl2.attachShader(this.id, _fsh);
  gl2.linkProgram(this.id);
  if (!gl2.getProgramParameter(this.id, gl2.LINK_STATUS))
    throw new Error("Filter: GL link failed", gl2.getProgramInfoLog(this.id));
  gl2.useProgram(this.id);
  _collect(vertexSource, "attribute", this.attribute);
  for (const a in this.attribute)
    this.attribute[a] = gl2.getAttribLocation(this.id, a);
  _collect(vertexSource, "uniform", this.uniform);
  _collect(fragmentSource, "uniform", this.uniform);
  for (const u in this.uniform)
    this.uniform[u] = gl2.getUniformLocation(this.id, u);
}
function GLImageFilter(params) {
  if (!params)
    params = {};
  let _drawCount = 0;
  let _sourceTexture = null;
  let _lastInChain = false;
  let _currentFramebufferIndex = -1;
  let _tempFramebuffers = [null, null];
  let _filterChain = [];
  let _width = -1;
  let _height = -1;
  let _vertexBuffer = null;
  let _currentProgram = null;
  const _filter = {};
  const _canvas = params.canvas || document.createElement("canvas");
  const _shaderProgramCache = {};
  const DRAW = { INTERMEDIATE: 1 };
  const gl2 = _canvas.getContext("webgl");
  if (!gl2)
    throw new Error("Filter: getContext() failed");
  this.addFilter = function(name) {
    const args = Array.prototype.slice.call(arguments, 1);
    const filter = _filter[name];
    _filterChain.push({ func: filter, args });
  };
  this.reset = function() {
    _filterChain = [];
  };
  const _resize = function(width, height) {
    if (width === _width && height === _height) {
      return;
    }
    _canvas.width = width;
    _width = width;
    _canvas.height = height;
    _height = height;
    if (!_vertexBuffer) {
      const vertices = new Float32Array([
        -1,
        -1,
        0,
        1,
        1,
        -1,
        1,
        1,
        -1,
        1,
        0,
        0,
        -1,
        1,
        0,
        0,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        0
      ]);
      _vertexBuffer = gl2.createBuffer(), gl2.bindBuffer(gl2.ARRAY_BUFFER, _vertexBuffer);
      gl2.bufferData(gl2.ARRAY_BUFFER, vertices, gl2.STATIC_DRAW);
      gl2.pixelStorei(gl2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
    }
    gl2.viewport(0, 0, _width, _height);
    _tempFramebuffers = [null, null];
  };
  const _createFramebufferTexture = function(width, height) {
    const fbo = gl2.createFramebuffer();
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, fbo);
    const renderbuffer = gl2.createRenderbuffer();
    gl2.bindRenderbuffer(gl2.RENDERBUFFER, renderbuffer);
    const texture = gl2.createTexture();
    gl2.bindTexture(gl2.TEXTURE_2D, texture);
    gl2.texImage2D(gl2.TEXTURE_2D, 0, gl2.RGBA, width, height, 0, gl2.RGBA, gl2.UNSIGNED_BYTE, null);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MAG_FILTER, gl2.LINEAR);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MIN_FILTER, gl2.LINEAR);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_S, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_T, gl2.CLAMP_TO_EDGE);
    gl2.framebufferTexture2D(gl2.FRAMEBUFFER, gl2.COLOR_ATTACHMENT0, gl2.TEXTURE_2D, texture, 0);
    gl2.bindTexture(gl2.TEXTURE_2D, null);
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, null);
    return { fbo, texture };
  };
  const _getTempFramebuffer = function(index) {
    _tempFramebuffers[index] = _tempFramebuffers[index] || _createFramebufferTexture(_width, _height);
    return _tempFramebuffers[index];
  };
  const _draw = function(flags = null) {
    var _a2, _b;
    let source = null;
    let target = null;
    let flipY = false;
    if (_drawCount === 0) {
      source = _sourceTexture;
    } else {
      source = (_a2 = _getTempFramebuffer(_currentFramebufferIndex)) == null ? void 0 : _a2.texture;
    }
    _drawCount++;
    if (_lastInChain && !(flags & DRAW.INTERMEDIATE)) {
      target = null;
      flipY = _drawCount % 2 === 0;
    } else {
      _currentFramebufferIndex = (_currentFramebufferIndex + 1) % 2;
      target = (_b = _getTempFramebuffer(_currentFramebufferIndex)) == null ? void 0 : _b.fbo;
    }
    gl2.bindTexture(gl2.TEXTURE_2D, source);
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, target);
    gl2.uniform1f(_currentProgram.uniform.flipY, flipY ? -1 : 1);
    gl2.drawArrays(gl2.TRIANGLES, 0, 6);
  };
  this.apply = function(image3) {
    _resize(image3.width, image3.height);
    _drawCount = 0;
    if (!_sourceTexture)
      _sourceTexture = gl2.createTexture();
    gl2.bindTexture(gl2.TEXTURE_2D, _sourceTexture);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_S, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_T, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MIN_FILTER, gl2.NEAREST);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MAG_FILTER, gl2.NEAREST);
    gl2.texImage2D(gl2.TEXTURE_2D, 0, gl2.RGBA, gl2.RGBA, gl2.UNSIGNED_BYTE, image3);
    if (_filterChain.length === 0) {
      _draw();
      return _canvas;
    }
    for (let i = 0; i < _filterChain.length; i++) {
      _lastInChain = i === _filterChain.length - 1;
      const f = _filterChain[i];
      f.func.apply(this, f.args || []);
    }
    return _canvas;
  };
  const _compileShader = function(fragmentSource) {
    if (_shaderProgramCache[fragmentSource]) {
      _currentProgram = _shaderProgramCache[fragmentSource];
      gl2.useProgram(_currentProgram.id);
      return _currentProgram;
    }
    const SHADER = {};
    SHADER.VERTEX_IDENTITY = [
      "precision highp float;",
      "attribute vec2 pos;",
      "attribute vec2 uv;",
      "varying vec2 vUv;",
      "uniform float flipY;",
      "void main(void) {",
      "vUv = uv;",
      "gl_Position = vec4(pos.x, pos.y*flipY, 0.0, 1.);",
      "}"
    ].join("\n");
    SHADER.FRAGMENT_IDENTITY = [
      "precision highp float;",
      "varying vec2 vUv;",
      "uniform sampler2D texture;",
      "void main(void) {",
      "gl_FragColor = texture2D(texture, vUv);",
      "}"
    ].join("\n");
    _currentProgram = new GLProgram(gl2, SHADER.VERTEX_IDENTITY, fragmentSource);
    const floatSize = Float32Array.BYTES_PER_ELEMENT;
    const vertSize = 4 * floatSize;
    gl2.enableVertexAttribArray(_currentProgram.attribute.pos);
    gl2.vertexAttribPointer(_currentProgram.attribute.pos, 2, gl2.FLOAT, false, vertSize, 0 * floatSize);
    gl2.enableVertexAttribArray(_currentProgram.attribute.uv);
    gl2.vertexAttribPointer(_currentProgram.attribute.uv, 2, gl2.FLOAT, false, vertSize, 2 * floatSize);
    _shaderProgramCache[fragmentSource] = _currentProgram;
    return _currentProgram;
  };
  _filter.colorMatrix = function(matrix) {
    const m = new Float32Array(matrix);
    m[4] /= 255;
    m[9] /= 255;
    m[14] /= 255;
    m[19] /= 255;
    const shader = m[18] === 1 && m[3] === 0 && m[8] === 0 && m[13] === 0 && m[15] === 0 && m[16] === 0 && m[17] === 0 && m[19] === 0 ? _filter.colorMatrix.SHADER.WITHOUT_ALPHA : _filter.colorMatrix.SHADER.WITH_ALPHA;
    const program = _compileShader(shader);
    gl2.uniform1fv(program.uniform.m, m);
    _draw();
  };
  _filter.colorMatrix.SHADER = {};
  _filter.colorMatrix.SHADER.WITH_ALPHA = [
    "precision highp float;",
    "varying vec2 vUv;",
    "uniform sampler2D texture;",
    "uniform float m[20];",
    "void main(void) {",
    "vec4 c = texture2D(texture, vUv);",
    "gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[3] * c.a + m[4];",
    "gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[8] * c.a + m[9];",
    "gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[13] * c.a + m[14];",
    "gl_FragColor.a = m[15] * c.r + m[16] * c.g + m[17] * c.b + m[18] * c.a + m[19];",
    "}"
  ].join("\n");
  _filter.colorMatrix.SHADER.WITHOUT_ALPHA = [
    "precision highp float;",
    "varying vec2 vUv;",
    "uniform sampler2D texture;",
    "uniform float m[20];",
    "void main(void) {",
    "vec4 c = texture2D(texture, vUv);",
    "gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[4];",
    "gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[9];",
    "gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[14];",
    "gl_FragColor.a = c.a;",
    "}"
  ].join("\n");
  _filter.brightness = function(brightness) {
    const b7 = (brightness || 0) + 1;
    _filter.colorMatrix([
      b7,
      0,
      0,
      0,
      0,
      0,
      b7,
      0,
      0,
      0,
      0,
      0,
      b7,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.saturation = function(amount) {
    const x = (amount || 0) * 2 / 3 + 1;
    const y = (x - 1) * -0.5;
    _filter.colorMatrix([
      x,
      y,
      y,
      0,
      0,
      y,
      x,
      y,
      0,
      0,
      y,
      y,
      x,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.desaturate = function() {
    _filter.saturation(-1);
  };
  _filter.contrast = function(amount) {
    const v10 = (amount || 0) + 1;
    const o = -128 * (v10 - 1);
    _filter.colorMatrix([
      v10,
      0,
      0,
      0,
      o,
      0,
      v10,
      0,
      0,
      o,
      0,
      0,
      v10,
      0,
      o,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.negative = function() {
    _filter.contrast(-2);
  };
  _filter.hue = function(rotation) {
    rotation = (rotation || 0) / 180 * Math.PI;
    const cos = Math.cos(rotation);
    const sin = Math.sin(rotation);
    const lumR = 0.213;
    const lumG = 0.715;
    const lumB = 0.072;
    _filter.colorMatrix([
      lumR + cos * (1 - lumR) + sin * -lumR,
      lumG + cos * -lumG + sin * -lumG,
      lumB + cos * -lumB + sin * (1 - lumB),
      0,
      0,
      lumR + cos * -lumR + sin * 0.143,
      lumG + cos * (1 - lumG) + sin * 0.14,
      lumB + cos * -lumB + sin * -0.283,
      0,
      0,
      lumR + cos * -lumR + sin * -(1 - lumR),
      lumG + cos * -lumG + sin * lumG,
      lumB + cos * (1 - lumB) + sin * lumB,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.desaturateLuminance = function() {
    _filter.colorMatrix([
      0.2764723,
      0.929708,
      0.0938197,
      0,
      -37.1,
      0.2764723,
      0.929708,
      0.0938197,
      0,
      -37.1,
      0.2764723,
      0.929708,
      0.0938197,
      0,
      -37.1,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.sepia = function() {
    _filter.colorMatrix([
      0.393,
      0.7689999,
      0.18899999,
      0,
      0,
      0.349,
      0.6859999,
      0.16799999,
      0,
      0,
      0.272,
      0.5339999,
      0.13099999,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.brownie = function() {
    _filter.colorMatrix([
      0.5997023498159715,
      0.34553243048391263,
      -0.2708298674538042,
      0,
      47.43192855600873,
      -0.037703249837783157,
      0.8609577587992641,
      0.15059552388459913,
      0,
      -36.96841498319127,
      0.24113635128153335,
      -0.07441037908422492,
      0.44972182064877153,
      0,
      -7.562075277591283,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.vintagePinhole = function() {
    _filter.colorMatrix([
      0.6279345635605994,
      0.3202183420819367,
      -0.03965408211312453,
      0,
      9.651285835294123,
      0.02578397704808868,
      0.6441188644374771,
      0.03259127616149294,
      0,
      7.462829176470591,
      0.0466055556782719,
      -0.0851232987247891,
      0.5241648018700465,
      0,
      5.159190588235296,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.kodachrome = function() {
    _filter.colorMatrix([
      1.1285582396593525,
      -0.3967382283601348,
      -0.03992559172921793,
      0,
      63.72958762196502,
      -0.16404339962244616,
      1.0835251566291304,
      -0.05498805115633132,
      0,
      24.732407896706203,
      -0.16786010706155763,
      -0.5603416277695248,
      1.6014850761964943,
      0,
      35.62982807460946,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.technicolor = function() {
    _filter.colorMatrix([
      1.9125277891456083,
      -0.8545344976951645,
      -0.09155508482755585,
      0,
      11.793603434377337,
      -0.3087833385928097,
      1.7658908555458428,
      -0.10601743074722245,
      0,
      -70.35205161461398,
      -0.231103377548616,
      -0.7501899197440212,
      1.847597816108189,
      0,
      30.950940869491138,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.polaroid = function() {
    _filter.colorMatrix([
      1.438,
      -0.062,
      -0.062,
      0,
      0,
      -0.122,
      1.378,
      -0.122,
      0,
      0,
      -0.016,
      -0.016,
      1.483,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.shiftToBGR = function() {
    _filter.colorMatrix([
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ]);
  };
  _filter.convolution = function(matrix) {
    const m = new Float32Array(matrix);
    const pixelSizeX = 1 / _width;
    const pixelSizeY = 1 / _height;
    const program = _compileShader(_filter.convolution.SHADER);
    gl2.uniform1fv(program.uniform.m, m);
    gl2.uniform2f(program.uniform.px, pixelSizeX, pixelSizeY);
    _draw();
  };
  _filter.convolution.SHADER = [
    "precision highp float;",
    "varying vec2 vUv;",
    "uniform sampler2D texture;",
    "uniform vec2 px;",
    "uniform float m[9];",
    "void main(void) {",
    "vec4 c11 = texture2D(texture, vUv - px);",
    "vec4 c12 = texture2D(texture, vec2(vUv.x, vUv.y - px.y));",
    "vec4 c13 = texture2D(texture, vec2(vUv.x + px.x, vUv.y - px.y));",
    "vec4 c21 = texture2D(texture, vec2(vUv.x - px.x, vUv.y) );",
    "vec4 c22 = texture2D(texture, vUv);",
    "vec4 c23 = texture2D(texture, vec2(vUv.x + px.x, vUv.y) );",
    "vec4 c31 = texture2D(texture, vec2(vUv.x - px.x, vUv.y + px.y) );",
    "vec4 c32 = texture2D(texture, vec2(vUv.x, vUv.y + px.y) );",
    "vec4 c33 = texture2D(texture, vUv + px );",
    "gl_FragColor = ",
    "c11 * m[0] + c12 * m[1] + c22 * m[2] +",
    "c21 * m[3] + c22 * m[4] + c23 * m[5] +",
    "c31 * m[6] + c32 * m[7] + c33 * m[8];",
    "gl_FragColor.a = c22.a;",
    "}"
  ].join("\n");
  _filter.detectEdges = function() {
    _filter.convolution.call(this, [
      0,
      1,
      0,
      1,
      -4,
      1,
      0,
      1,
      0
    ]);
  };
  _filter.sobelX = function() {
    _filter.convolution.call(this, [
      -1,
      0,
      1,
      -2,
      0,
      2,
      -1,
      0,
      1
    ]);
  };
  _filter.sobelY = function() {
    _filter.convolution.call(this, [
      -1,
      -2,
      -1,
      0,
      0,
      0,
      1,
      2,
      1
    ]);
  };
  _filter.sharpen = function(amount) {
    const a = amount || 1;
    _filter.convolution.call(this, [
      0,
      -1 * a,
      0,
      -1 * a,
      1 + 4 * a,
      -1 * a,
      0,
      -1 * a,
      0
    ]);
  };
  _filter.emboss = function(size) {
    const s = size || 1;
    _filter.convolution.call(this, [
      -2 * s,
      -1 * s,
      0,
      -1 * s,
      1,
      1 * s,
      0,
      1 * s,
      2 * s
    ]);
  };
  _filter.blur = function(size) {
    const blurSizeX = size / 7 / _width;
    const blurSizeY = size / 7 / _height;
    const program = _compileShader(_filter.blur.SHADER);
    gl2.uniform2f(program.uniform.px, 0, blurSizeY);
    _draw(DRAW.INTERMEDIATE);
    gl2.uniform2f(program.uniform.px, blurSizeX, 0);
    _draw();
  };
  _filter.blur.SHADER = [
    "precision highp float;",
    "varying vec2 vUv;",
    "uniform sampler2D texture;",
    "uniform vec2 px;",
    "void main(void) {",
    "gl_FragColor = vec4(0.0);",
    "gl_FragColor += texture2D(texture, vUv + vec2(-7.0*px.x, -7.0*px.y))*0.0044299121055113265;",
    "gl_FragColor += texture2D(texture, vUv + vec2(-6.0*px.x, -6.0*px.y))*0.00895781211794;",
    "gl_FragColor += texture2D(texture, vUv + vec2(-5.0*px.x, -5.0*px.y))*0.0215963866053;",
    "gl_FragColor += texture2D(texture, vUv + vec2(-4.0*px.x, -4.0*px.y))*0.0443683338718;",
    "gl_FragColor += texture2D(texture, vUv + vec2(-3.0*px.x, -3.0*px.y))*0.0776744219933;",
    "gl_FragColor += texture2D(texture, vUv + vec2(-2.0*px.x, -2.0*px.y))*0.115876621105;",
    "gl_FragColor += texture2D(texture, vUv + vec2(-1.0*px.x, -1.0*px.y))*0.147308056121;",
    "gl_FragColor += texture2D(texture, vUv                             )*0.159576912161;",
    "gl_FragColor += texture2D(texture, vUv + vec2( 1.0*px.x,  1.0*px.y))*0.147308056121;",
    "gl_FragColor += texture2D(texture, vUv + vec2( 2.0*px.x,  2.0*px.y))*0.115876621105;",
    "gl_FragColor += texture2D(texture, vUv + vec2( 3.0*px.x,  3.0*px.y))*0.0776744219933;",
    "gl_FragColor += texture2D(texture, vUv + vec2( 4.0*px.x,  4.0*px.y))*0.0443683338718;",
    "gl_FragColor += texture2D(texture, vUv + vec2( 5.0*px.x,  5.0*px.y))*0.0215963866053;",
    "gl_FragColor += texture2D(texture, vUv + vec2( 6.0*px.x,  6.0*px.y))*0.00895781211794;",
    "gl_FragColor += texture2D(texture, vUv + vec2( 7.0*px.x,  7.0*px.y))*0.0044299121055113265;",
    "}"
  ].join("\n");
  _filter.pixelate = function(size) {
    const blurSizeX = size / _width;
    const blurSizeY = size / _height;
    const program = _compileShader(_filter.pixelate.SHADER);
    gl2.uniform2f(program.uniform.size, blurSizeX, blurSizeY);
    _draw();
  };
  _filter.pixelate.SHADER = [
    "precision highp float;",
    "varying vec2 vUv;",
    "uniform vec2 size;",
    "uniform sampler2D texture;",
    "vec2 pixelate(vec2 coord, vec2 size) {",
    "return floor( coord / size ) * size;",
    "}",
    "void main(void) {",
    "gl_FragColor = vec4(0.0);",
    "vec2 coord = pixelate(vUv, size);",
    "gl_FragColor += texture2D(texture, coord);",
    "}"
  ].join("\n");
}

// src/image/image.ts
var maxSize = 2048;
var inCanvas;
var outCanvas;
var fx2;
function process4(input, config3) {
  let tensor;
  if (!input)
    throw new Error("Human: Input is missing");
  if (!(input instanceof je) && !(typeof Image !== "undefined" && input instanceof Image) && !(typeof ImageData !== "undefined" && input instanceof ImageData) && !(typeof ImageBitmap !== "undefined" && input instanceof ImageBitmap) && !(typeof HTMLImageElement !== "undefined" && input instanceof HTMLImageElement) && !(typeof HTMLMediaElement !== "undefined" && input instanceof HTMLMediaElement) && !(typeof HTMLVideoElement !== "undefined" && input instanceof HTMLVideoElement) && !(typeof HTMLCanvasElement !== "undefined" && input instanceof HTMLCanvasElement) && !(typeof OffscreenCanvas !== "undefined" && input instanceof OffscreenCanvas)) {
    throw new Error("Human: Input type is not recognized");
  }
  if (input instanceof je) {
    if (input.shape && input.shape.length === 4 && input.shape[0] === 1 && input.shape[3] === 3)
      tensor = hn(input);
    else
      throw new Error(`Human: Input tensor shape must be [1, height, width, 3] and instead was ${input.shape}`);
  } else {
    const originalWidth = input["naturalWidth"] || input["videoWidth"] || input["width"] || input["shape"] && input["shape"][1] > 0;
    const originalHeight = input["naturalHeight"] || input["videoHeight"] || input["height"] || input["shape"] && input["shape"][2] > 0;
    if (!originalWidth || !originalHeight)
      return { tensor: null, canvas: inCanvas };
    let targetWidth = originalWidth;
    let targetHeight = originalHeight;
    if (targetWidth > maxSize) {
      targetWidth = maxSize;
      targetHeight = targetWidth * originalHeight / originalWidth;
    }
    if (targetHeight > maxSize) {
      targetHeight = maxSize;
      targetWidth = targetHeight * originalWidth / originalHeight;
    }
    if (config3.filter.width > 0)
      targetWidth = config3.filter.width;
    else if (config3.filter.height > 0)
      targetWidth = originalWidth * (config3.filter.height / originalHeight);
    if (config3.filter.height > 0)
      targetHeight = config3.filter.height;
    else if (config3.filter.width > 0)
      targetHeight = originalHeight * (config3.filter.width / originalWidth);
    if (!targetWidth || !targetHeight)
      throw new Error("Human: Input cannot determine dimension");
    if (!inCanvas || (inCanvas == null ? void 0 : inCanvas.width) !== targetWidth || (inCanvas == null ? void 0 : inCanvas.height) !== targetHeight) {
      inCanvas = typeof OffscreenCanvas !== "undefined" ? new OffscreenCanvas(targetWidth, targetHeight) : document.createElement("canvas");
      if ((inCanvas == null ? void 0 : inCanvas.width) !== targetWidth)
        inCanvas.width = targetWidth;
      if ((inCanvas == null ? void 0 : inCanvas.height) !== targetHeight)
        inCanvas.height = targetHeight;
    }
    const ctx = inCanvas.getContext("2d");
    if (input instanceof ImageData) {
      ctx.putImageData(input, 0, 0);
    } else {
      if (config3.filter.flip && typeof ctx.translate !== "undefined") {
        ctx.translate(originalWidth, 0);
        ctx.scale(-1, 1);
        ctx.drawImage(input, 0, 0, originalWidth, originalHeight, 0, 0, inCanvas == null ? void 0 : inCanvas.width, inCanvas == null ? void 0 : inCanvas.height);
        ctx.setTransform(1, 0, 0, 1, 0, 0);
      } else {
        ctx.drawImage(input, 0, 0, originalWidth, originalHeight, 0, 0, inCanvas == null ? void 0 : inCanvas.width, inCanvas == null ? void 0 : inCanvas.height);
      }
    }
    if (config3.filter.enabled) {
      if (!fx2 || !outCanvas || inCanvas.width !== outCanvas.width || (inCanvas == null ? void 0 : inCanvas.height) !== (outCanvas == null ? void 0 : outCanvas.height)) {
        outCanvas = typeof OffscreenCanvas !== "undefined" ? new OffscreenCanvas(inCanvas == null ? void 0 : inCanvas.width, inCanvas == null ? void 0 : inCanvas.height) : document.createElement("canvas");
        if ((outCanvas == null ? void 0 : outCanvas.width) !== (inCanvas == null ? void 0 : inCanvas.width))
          outCanvas.width = inCanvas == null ? void 0 : inCanvas.width;
        if ((outCanvas == null ? void 0 : outCanvas.height) !== (inCanvas == null ? void 0 : inCanvas.height))
          outCanvas.height = inCanvas == null ? void 0 : inCanvas.height;
        fx2 = gw.flags.IS_BROWSER ? new GLImageFilter({ canvas: outCanvas }) : null;
      }
      if (!fx2)
        return { tensor: null, canvas: inCanvas };
      fx2.reset();
      fx2.addFilter("brightness", config3.filter.brightness);
      if (config3.filter.contrast !== 0)
        fx2.addFilter("contrast", config3.filter.contrast);
      if (config3.filter.sharpness !== 0)
        fx2.addFilter("sharpen", config3.filter.sharpness);
      if (config3.filter.blur !== 0)
        fx2.addFilter("blur", config3.filter.blur);
      if (config3.filter.saturation !== 0)
        fx2.addFilter("saturation", config3.filter.saturation);
      if (config3.filter.hue !== 0)
        fx2.addFilter("hue", config3.filter.hue);
      if (config3.filter.negative)
        fx2.addFilter("negative");
      if (config3.filter.sepia)
        fx2.addFilter("sepia");
      if (config3.filter.vintage)
        fx2.addFilter("brownie");
      if (config3.filter.sepia)
        fx2.addFilter("sepia");
      if (config3.filter.kodachrome)
        fx2.addFilter("kodachrome");
      if (config3.filter.technicolor)
        fx2.addFilter("technicolor");
      if (config3.filter.polaroid)
        fx2.addFilter("polaroid");
      if (config3.filter.pixelate !== 0)
        fx2.addFilter("pixelate", config3.filter.pixelate);
      fx2.apply(inCanvas);
    } else {
      outCanvas = inCanvas;
      if (fx2)
        fx2 = null;
    }
    if (!tensor) {
      let pixels;
      if (outCanvas.data) {
        const shape = [outCanvas.height, outCanvas.width, 3];
        pixels = Kw(outCanvas.data, shape, "int32");
      } else if (outCanvas instanceof ImageData) {
        pixels = cg ? cg.fromPixels(outCanvas) : null;
      } else if (config3.backend === "webgl" || config3.backend === "humangl") {
        const tempCanvas = typeof OffscreenCanvas !== "undefined" ? new OffscreenCanvas(targetWidth, targetHeight) : document.createElement("canvas");
        tempCanvas.width = targetWidth;
        tempCanvas.height = targetHeight;
        const tempCtx = tempCanvas.getContext("2d");
        tempCtx == null ? void 0 : tempCtx.drawImage(outCanvas, 0, 0);
        pixels = cg ? cg.fromPixels(tempCanvas) : null;
      } else {
        const tempCanvas = typeof OffscreenCanvas !== "undefined" ? new OffscreenCanvas(targetWidth, targetHeight) : document.createElement("canvas");
        tempCanvas.width = targetWidth;
        tempCanvas.height = targetHeight;
        const tempCtx = tempCanvas.getContext("2d");
        tempCtx == null ? void 0 : tempCtx.drawImage(outCanvas, 0, 0);
        const data = tempCtx == null ? void 0 : tempCtx.getImageData(0, 0, targetWidth, targetHeight);
        pixels = cg ? cg.fromPixels(data) : null;
      }
      if (pixels) {
        const casted = J(pixels, "float32");
        tensor = gr(casted, 0);
        Ae(pixels);
        Ae(casted);
      }
    }
  }
  const canvas2 = config3.filter.return ? outCanvas : null;
  return { tensor, canvas: canvas2 };
}

// src/segmentation/segmentation.ts
var model9;
var busy = false;
async function load12(config3) {
  if (!model9) {
    model9 = await m7(join(config3.modelBasePath, config3.segmentation.modelPath));
    if (!model9 || !model9["modelUrl"])
      log("load model failed:", config3.segmentation.modelPath);
    else if (config3.debug)
      log("load model:", model9["modelUrl"]);
  } else if (config3.debug)
    log("cached model:", model9["modelUrl"]);
  return model9;
}
async function predict11(input) {
  var _a2, _b;
  const width = ((_a2 = input.tensor) == null ? void 0 : _a2.shape[1]) || 0;
  const height = ((_b = input.tensor) == null ? void 0 : _b.shape[2]) || 0;
  if (!input.tensor)
    return null;
  if (!model9 || !model9.inputs[0].shape)
    return null;
  const resizeInput = bn.resizeBilinear(input.tensor, [model9.inputs[0].shape[1], model9.inputs[0].shape[2]], false);
  const norm = ue(resizeInput, 255);
  const res = model9.predict(norm);
  Ae(resizeInput);
  Ae(norm);
  const squeeze = en(res, 0);
  let resizeOutput;
  if (squeeze.shape[2] === 2) {
    const softmax = squeeze.softmax();
    const [bg2, fg2] = Nr(softmax, 2);
    const expand = gr(fg2, 2);
    const pad = gr(expand, 0);
    Ae(softmax);
    Ae(bg2);
    Ae(fg2);
    const crop = bn.cropAndResize(pad, [[0, 0, 0.5, 0.5]], [0], [width, height]);
    resizeOutput = en(crop, 0);
    Ae(crop);
    Ae(expand);
    Ae(pad);
  } else {
    resizeOutput = bn.resizeBilinear(squeeze, [width, height]);
  }
  if (typeof document === "undefined")
    return resizeOutput.data();
  const overlay = typeof OffscreenCanvas !== "undefined" ? new OffscreenCanvas(width, height) : document.createElement("canvas");
  overlay.width = width;
  overlay.height = height;
  if (cg)
    await cg.toPixels(resizeOutput, overlay);
  Ae(resizeOutput);
  Ae(squeeze);
  Ae(res);
  const alphaCanvas = typeof OffscreenCanvas !== "undefined" ? new OffscreenCanvas(width, height) : document.createElement("canvas");
  alphaCanvas.width = width;
  alphaCanvas.height = height;
  const ctxAlpha = alphaCanvas.getContext("2d");
  ctxAlpha.filter = "blur(8px";
  await ctxAlpha.drawImage(overlay, 0, 0);
  const alpha = ctxAlpha.getImageData(0, 0, width, height).data;
  const original = typeof OffscreenCanvas !== "undefined" ? new OffscreenCanvas(width, height) : document.createElement("canvas");
  original.width = width;
  original.height = height;
  const ctx = original.getContext("2d");
  if (input.canvas)
    await ctx.drawImage(input.canvas, 0, 0);
  ctx.globalCompositeOperation = "darken";
  ctx.filter = "blur(8px)";
  await ctx.drawImage(overlay, 0, 0);
  ctx.globalCompositeOperation = "source-over";
  ctx.filter = "none";
  input.canvas = original;
  return alpha;
}
async function process5(input, background, config3) {
  var _a2;
  if (busy)
    return null;
  busy = true;
  if (!model9)
    await load12(config3);
  const img = process4(input, config3);
  const alpha = await predict11(img);
  Ae(img.tensor);
  if (background && alpha) {
    const tmp = process4(background, config3);
    const bg2 = tmp.canvas;
    Ae(tmp.tensor);
    const fg2 = img.canvas;
    const fgData = (_a2 = fg2.getContext("2d")) == null ? void 0 : _a2.getImageData(0, 0, fg2.width, fg2.height).data;
    const c = typeof OffscreenCanvas !== "undefined" ? new OffscreenCanvas(fg2.width, fg2.height) : document.createElement("canvas");
    c.width = fg2.width;
    c.height = fg2.height;
    const ctx = c.getContext("2d");
    ctx.globalCompositeOperation = "copy";
    ctx.drawImage(bg2, 0, 0, c.width, c.height);
    const cData = ctx.getImageData(0, 0, c.width, c.height);
    for (let i = 0; i < c.width * c.height; i++) {
      cData.data[4 * i + 0] = (255 - alpha[4 * i + 0]) / 255 * cData.data[4 * i + 0] + alpha[4 * i + 0] / 255 * fgData[4 * i + 0];
      cData.data[4 * i + 1] = (255 - alpha[4 * i + 1]) / 255 * cData.data[4 * i + 1] + alpha[4 * i + 1] / 255 * fgData[4 * i + 1];
      cData.data[4 * i + 2] = (255 - alpha[4 * i + 2]) / 255 * cData.data[4 * i + 2] + alpha[4 * i + 2] / 255 * fgData[4 * i + 2];
      cData.data[4 * i + 3] = (255 - alpha[4 * i + 3]) / 255 * cData.data[4 * i + 3] + alpha[4 * i + 3] / 255 * fgData[4 * i + 3];
    }
    ctx.putImageData(cData, 0, 0);
    img.canvas = c;
  }
  busy = false;
  return img.canvas;
}

// src/models.ts
async function load13(instance) {
  if (instance.config.async) {
    [
      instance.models.face,
      instance.models.emotion,
      instance.models.handpose,
      instance.models.posenet,
      instance.models.blazepose,
      instance.models.efficientpose,
      instance.models.movenet,
      instance.models.nanodet,
      instance.models.centernet,
      instance.models.faceres,
      instance.models.segmentation
    ] = await Promise.all([
      instance.models.face || (instance.config.face.enabled ? load2(instance.config) : null),
      instance.models.emotion || (instance.config.face.enabled && instance.config.face.emotion.enabled ? load4(instance.config) : null),
      instance.models.handpose || (instance.config.hand.enabled ? load6(instance.config) : null),
      instance.models.posenet || (instance.config.body.enabled && instance.config.body.modelPath.includes("posenet") ? load5(instance.config) : null),
      instance.models.blazepose || (instance.config.body.enabled && instance.config.body.modelPath.includes("blazepose") ? load7(instance.config) : null),
      instance.models.efficientpose || (instance.config.body.enabled && instance.config.body.modelPath.includes("efficientpose") ? load8(instance.config) : null),
      instance.models.movenet || (instance.config.body.enabled && instance.config.body.modelPath.includes("movenet") ? load9(instance.config) : null),
      instance.models.nanodet || (instance.config.object.enabled && instance.config.object.modelPath.includes("nanodet") ? load10(instance.config) : null),
      instance.models.centernet || (instance.config.object.enabled && instance.config.object.modelPath.includes("centernet") ? load11(instance.config) : null),
      instance.models.faceres || (instance.config.face.enabled && instance.config.face.description.enabled ? load3(instance.config) : null),
      instance.models.segmentation || (instance.config.segmentation.enabled ? load12(instance.config) : null)
    ]);
  } else {
    if (instance.config.face.enabled && !instance.models.face)
      instance.models.face = await load2(instance.config);
    if (instance.config.face.enabled && instance.config.face.emotion.enabled && !instance.models.emotion)
      instance.models.emotion = await load4(instance.config);
    if (instance.config.hand.enabled && !instance.models.handpose)
      instance.models.handpose = await load6(instance.config);
    if (instance.config.body.enabled && !instance.models.posenet && instance.config.body.modelPath.includes("posenet"))
      instance.models.posenet = await load5(instance.config);
    if (instance.config.body.enabled && !instance.models.blazepose && instance.config.body.modelPath.includes("blazepose"))
      instance.models.blazepose = await load7(instance.config);
    if (instance.config.body.enabled && !instance.models.efficientpose && instance.config.body.modelPath.includes("efficientpose"))
      instance.models.efficientpose = await load7(instance.config);
    if (instance.config.body.enabled && !instance.models.movenet && instance.config.body.modelPath.includes("movenet"))
      instance.models.movenet = await load9(instance.config);
    if (instance.config.object.enabled && !instance.models.nanodet && instance.config.object.modelPath.includes("nanodet"))
      instance.models.nanodet = await load10(instance.config);
    if (instance.config.object.enabled && !instance.models.centernet && instance.config.object.modelPath.includes("centernet"))
      instance.models.centernet = await load11(instance.config);
    if (instance.config.face.enabled && instance.config.face.description.enabled && !instance.models.faceres)
      instance.models.faceres = await load3(instance.config);
    if (instance.config.segmentation.enabled && !instance.models.segmentation)
      instance.models.segmentation = await load12(instance.config);
  }
}

// src/face.ts
var calculateGaze = (face5) => {
  const radians = (pt1, pt2) => Math.atan2(pt1[1] - pt2[1], pt1[0] - pt2[0]);
  if (!face5.annotations["rightEyeIris"] || !face5.annotations["leftEyeIris"])
    return { bearing: 0, strength: 0 };
  const offsetIris = [0, -0.1];
  const eyeRatio = 1;
  const left = face5.mesh[33][2] > face5.mesh[263][2];
  const irisCenter = left ? face5.mesh[473] : face5.mesh[468];
  const eyeCenter = left ? [(face5.mesh[133][0] + face5.mesh[33][0]) / 2, (face5.mesh[133][1] + face5.mesh[33][1]) / 2] : [(face5.mesh[263][0] + face5.mesh[362][0]) / 2, (face5.mesh[263][1] + face5.mesh[362][1]) / 2];
  const eyeSize = left ? [face5.mesh[133][0] - face5.mesh[33][0], face5.mesh[23][1] - face5.mesh[27][1]] : [face5.mesh[263][0] - face5.mesh[362][0], face5.mesh[253][1] - face5.mesh[257][1]];
  const eyeDiff = [
    (eyeCenter[0] - irisCenter[0]) / eyeSize[0] - offsetIris[0],
    eyeRatio * (irisCenter[1] - eyeCenter[1]) / eyeSize[1] - offsetIris[1]
  ];
  let strength = Math.sqrt(eyeDiff[0] ** 2 + eyeDiff[1] ** 2);
  strength = Math.min(strength, face5.boxRaw[2] / 2, face5.boxRaw[3] / 2);
  const bearing = (radians([0, 0], eyeDiff) + Math.PI / 2) % Math.PI;
  return { bearing, strength };
};
var calculateFaceAngle = (face5, imageSize) => {
  const normalize = (v10) => {
    const length = Math.sqrt(v10[0] * v10[0] + v10[1] * v10[1] + v10[2] * v10[2]);
    v10[0] /= length;
    v10[1] /= length;
    v10[2] /= length;
    return v10;
  };
  const subVectors = (a, b7) => {
    const x = a[0] - b7[0];
    const y = a[1] - b7[1];
    const z10 = a[2] - b7[2];
    return [x, y, z10];
  };
  const crossVectors = (a, b7) => {
    const x = a[1] * b7[2] - a[2] * b7[1];
    const y = a[2] * b7[0] - a[0] * b7[2];
    const z10 = a[0] * b7[1] - a[1] * b7[0];
    return [x, y, z10];
  };
  const rotationMatrixToEulerAngle = (r) => {
    const [r00, r01, r02, r10, r11, r12, r20, r21, r22] = r;
    let thetaX;
    let thetaY;
    let thetaZ;
    if (r10 < 1) {
      if (r10 > -1) {
        thetaZ = Math.asin(r10);
        thetaY = Math.atan2(-r20, r00);
        thetaX = Math.atan2(-r12, r11);
      } else {
        thetaZ = -Math.PI / 2;
        thetaY = -Math.atan2(r21, r22);
        thetaX = 0;
      }
    } else {
      thetaZ = Math.PI / 2;
      thetaY = Math.atan2(r21, r22);
      thetaX = 0;
    }
    if (isNaN(thetaX))
      thetaX = 0;
    if (isNaN(thetaY))
      thetaY = 0;
    if (isNaN(thetaZ))
      thetaZ = 0;
    return { pitch: 2 * -thetaX, yaw: 2 * -thetaY, roll: 2 * -thetaZ };
  };
  const meshToEulerAngle = (mesh2) => {
    const radians = (a1, a22, b12, b22) => Math.atan2(b22 - a22, b12 - a1);
    const angle2 = {
      pitch: radians(mesh2[10][1], mesh2[10][2], mesh2[152][1], mesh2[152][2]),
      yaw: radians(mesh2[33][0], mesh2[33][2], mesh2[263][0], mesh2[263][2]),
      roll: radians(mesh2[33][0], mesh2[33][1], mesh2[263][0], mesh2[263][1])
    };
    return angle2;
  };
  const mesh = face5.meshRaw;
  if (!mesh || mesh.length < 300)
    return { angle: { pitch: 0, yaw: 0, roll: 0 }, matrix: [1, 0, 0, 0, 1, 0, 0, 0, 1], gaze: { bearing: 0, strength: 0 } };
  const size = Math.max(face5.boxRaw[2] * imageSize[0], face5.boxRaw[3] * imageSize[1]) / 1.5;
  const pts = [mesh[10], mesh[152], mesh[234], mesh[454]].map((pt) => [
    pt[0] * imageSize[0] / size,
    pt[1] * imageSize[1] / size,
    pt[2]
  ]);
  const y_axis = normalize(subVectors(pts[1], pts[0]));
  let x_axis = normalize(subVectors(pts[3], pts[2]));
  const z_axis = normalize(crossVectors(x_axis, y_axis));
  x_axis = crossVectors(y_axis, z_axis);
  const matrix = [
    x_axis[0],
    x_axis[1],
    x_axis[2],
    y_axis[0],
    y_axis[1],
    y_axis[2],
    z_axis[0],
    z_axis[1],
    z_axis[2]
  ];
  const angle = rotationMatrixToEulerAngle(matrix);
  const gaze = mesh.length === 478 ? calculateGaze(face5) : { bearing: 0, strength: 0 };
  return { angle, matrix, gaze };
};
var detectFace = async (parent, input) => {
  var _a2, _b, _c2, _d2, _e2, _f2;
  let timeStamp;
  let ageRes;
  let gearRes;
  let genderRes;
  let emotionRes;
  let embeddingRes;
  let descRes;
  const faceRes = [];
  parent.state = "run:face";
  timeStamp = now();
  const faces = await predict(input, parent.config);
  parent.performance.face = Math.trunc(now() - timeStamp);
  if (!input.shape || input.shape.length !== 4)
    return [];
  if (!faces)
    return [];
  for (let i = 0; i < faces.length; i++) {
    parent.analyze("Get Face");
    if (!faces[i].tensor || faces[i].tensor["isDisposedInternal"]) {
      log("Face object is disposed:", faces[i].tensor);
      continue;
    }
    const rotation = calculateFaceAngle(faces[i], [input.shape[2], input.shape[1]]);
    parent.analyze("Start Emotion:");
    if (parent.config.async) {
      emotionRes = parent.config.face.emotion.enabled ? predict3(faces[i].tensor || vr([]), parent.config, i, faces.length) : {};
    } else {
      parent.state = "run:emotion";
      timeStamp = now();
      emotionRes = parent.config.face.emotion.enabled ? await predict3(faces[i].tensor || vr([]), parent.config, i, faces.length) : {};
      parent.performance.emotion = Math.trunc(now() - timeStamp);
    }
    parent.analyze("End Emotion:");
    parent.analyze("Start Description:");
    if (parent.config.async) {
      descRes = parent.config.face.description.enabled ? predict2(faces[i].tensor || vr([]), parent.config, i, faces.length) : [];
    } else {
      parent.state = "run:description";
      timeStamp = now();
      descRes = parent.config.face.description.enabled ? await predict2(faces[i].tensor || vr([]), parent.config, i, faces.length) : [];
      parent.performance.embedding = Math.trunc(now() - timeStamp);
    }
    parent.analyze("End Description:");
    if (parent.config.async) {
      [ageRes, genderRes, emotionRes, embeddingRes, descRes, gearRes] = await Promise.all([ageRes, genderRes, emotionRes, embeddingRes, descRes, gearRes]);
    }
    parent.analyze("Finish Face:");
    if (!parent.config.face.iris.enabled && ((_b = (_a2 = faces[i]) == null ? void 0 : _a2.annotations) == null ? void 0 : _b.leftEyeIris) && ((_d2 = (_c2 = faces[i]) == null ? void 0 : _c2.annotations) == null ? void 0 : _d2.rightEyeIris)) {
      delete faces[i].annotations.leftEyeIris;
      delete faces[i].annotations.rightEyeIris;
    }
    const irisSize = ((_e2 = faces[i].annotations) == null ? void 0 : _e2.leftEyeIris) && ((_f2 = faces[i].annotations) == null ? void 0 : _f2.rightEyeIris) ? Math.max(Math.abs(faces[i].annotations.leftEyeIris[3][0] - faces[i].annotations.leftEyeIris[1][0]), Math.abs(faces[i].annotations.rightEyeIris[4][1] - faces[i].annotations.rightEyeIris[2][1])) / input.shape[2] : 0;
    const tensor = parent.config.face.detector.return ? en(faces[i].tensor) : null;
    Ae(faces[i].tensor);
    if (faces[i].tensor)
      delete faces[i].tensor;
    faceRes.push({
      ...faces[i],
      id: i,
      age: descRes.age,
      gender: descRes.gender,
      genderScore: descRes.genderScore,
      embedding: descRes.descriptor,
      emotion: emotionRes,
      iris: irisSize !== 0 ? Math.trunc(500 / irisSize / 11.7) / 100 : 0,
      rotation,
      tensor
    });
    parent.analyze("End Face");
  }
  parent.analyze("End FaceMesh:");
  if (parent.config.async) {
    if (parent.performance.face)
      delete parent.performance.face;
    if (parent.performance.age)
      delete parent.performance.age;
    if (parent.performance.gender)
      delete parent.performance.gender;
    if (parent.performance.emotion)
      delete parent.performance.emotion;
  }
  return faceRes;
};

// src/gesture/gesture.ts
var body = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    const leftWrist = res[i].keypoints.find((a) => a.part === "leftWrist");
    const rightWrist = res[i].keypoints.find((a) => a.part === "rightWrist");
    const nose = res[i].keypoints.find((a) => a.part === "nose");
    if (nose && leftWrist && rightWrist && leftWrist.position.y < nose.position.y && rightWrist.position.y < nose.position.y)
      gestures.push({ body: i, gesture: "i give up" });
    else if (nose && leftWrist && leftWrist.position.y < nose.position.y)
      gestures.push({ body: i, gesture: "raise left hand" });
    else if (nose && rightWrist && rightWrist.position.y < nose.position.y)
      gestures.push({ body: i, gesture: "raise right hand" });
    const leftShoulder = res[i].keypoints.find((a) => a.part === "leftShoulder");
    const rightShoulder = res[i].keypoints.find((a) => a.part === "rightShoulder");
    if (leftShoulder && rightShoulder)
      gestures.push({ body: i, gesture: `leaning ${leftShoulder.position.y > rightShoulder.position.y ? "left" : "right"}` });
  }
  return gestures;
};
var face = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    if (res[i].mesh && res[i].mesh.length > 0) {
      const eyeFacing = res[i].mesh[33][2] - res[i].mesh[263][2];
      if (Math.abs(eyeFacing) < 10)
        gestures.push({ face: i, gesture: "facing center" });
      else
        gestures.push({ face: i, gesture: `facing ${eyeFacing < 0 ? "left" : "right"}` });
      const openLeft = Math.abs(res[i].mesh[374][1] - res[i].mesh[386][1]) / Math.abs(res[i].mesh[443][1] - res[i].mesh[450][1]);
      if (openLeft < 0.2)
        gestures.push({ face: i, gesture: "blink left eye" });
      const openRight = Math.abs(res[i].mesh[145][1] - res[i].mesh[159][1]) / Math.abs(res[i].mesh[223][1] - res[i].mesh[230][1]);
      if (openRight < 0.2)
        gestures.push({ face: i, gesture: "blink right eye" });
      const mouthOpen = Math.min(100, 500 * Math.abs(res[i].mesh[13][1] - res[i].mesh[14][1]) / Math.abs(res[i].mesh[10][1] - res[i].mesh[152][1]));
      if (mouthOpen > 10)
        gestures.push({ face: i, gesture: `mouth ${Math.trunc(mouthOpen)}% open` });
      const chinDepth = res[i].mesh[152][2];
      if (Math.abs(chinDepth) > 10)
        gestures.push({ face: i, gesture: `head ${chinDepth < 0 ? "up" : "down"}` });
    }
  }
  return gestures;
};
var iris = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    if (!res[i].annotations || !res[i].annotations.leftEyeIris || !res[i].annotations.rightEyeIris)
      continue;
    const sizeXLeft = res[i].annotations.leftEyeIris[3][0] - res[i].annotations.leftEyeIris[1][0];
    const sizeYLeft = res[i].annotations.leftEyeIris[4][1] - res[i].annotations.leftEyeIris[2][1];
    const areaLeft = Math.abs(sizeXLeft * sizeYLeft);
    const sizeXRight = res[i].annotations.rightEyeIris[3][0] - res[i].annotations.rightEyeIris[1][0];
    const sizeYRight = res[i].annotations.rightEyeIris[4][1] - res[i].annotations.rightEyeIris[2][1];
    const areaRight = Math.abs(sizeXRight * sizeYRight);
    let center = false;
    const difference = Math.abs(areaLeft - areaRight) / Math.max(areaLeft, areaRight);
    if (difference < 0.25) {
      center = true;
      gestures.push({ iris: i, gesture: "facing center" });
    }
    const rightIrisCenterX = Math.abs(res[i].mesh[33][0] - res[i].annotations.rightEyeIris[0][0]) / res[i].box[2];
    const leftIrisCenterX = Math.abs(res[i].mesh[263][0] - res[i].annotations.leftEyeIris[0][0]) / res[i].box[2];
    if (leftIrisCenterX > 0.06 || rightIrisCenterX > 0.06)
      center = false;
    if (leftIrisCenterX > 0.06)
      gestures.push({ iris: i, gesture: "looking right" });
    if (rightIrisCenterX > 0.06)
      gestures.push({ iris: i, gesture: "looking left" });
    const rightIrisCenterY = Math.abs(res[i].mesh[145][1] - res[i].annotations.rightEyeIris[0][1]) / res[i].box[3];
    const leftIrisCenterY = Math.abs(res[i].mesh[374][1] - res[i].annotations.leftEyeIris[0][1]) / res[i].box[3];
    if (leftIrisCenterY < 0.01 || rightIrisCenterY < 0.01 || leftIrisCenterY > 0.022 || rightIrisCenterY > 0.022)
      center = false;
    if (leftIrisCenterY < 0.01 || rightIrisCenterY < 0.01)
      gestures.push({ iris: i, gesture: "looking down" });
    if (leftIrisCenterY > 0.022 || rightIrisCenterY > 0.022)
      gestures.push({ iris: i, gesture: "looking up" });
    if (center)
      gestures.push({ iris: i, gesture: "looking center" });
  }
  return gestures;
};
var hand = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    const fingers = [];
    for (const [finger, pos] of Object.entries(res[i]["annotations"])) {
      if (finger !== "palmBase" && Array.isArray(pos))
        fingers.push({ name: finger.toLowerCase(), position: pos[0] });
    }
    if (fingers && fingers.length > 0) {
      const closest = fingers.reduce((best, a) => best.position[2] < a.position[2] ? best : a);
      gestures.push({ hand: i, gesture: `${closest.name} forward` });
      const highest = fingers.reduce((best, a) => best.position[1] < a.position[1] ? best : a);
      gestures.push({ hand: i, gesture: `${highest.name} up` });
    }
    const poses2 = match2(res[i]["keypoints"]);
    for (const pose of poses2)
      gestures.push({ hand: i, gesture: pose.name });
  }
  return gestures;
};

// src/draw/draw.ts
var draw_exports = {};
__export(draw_exports, {
  all: () => all,
  body: () => body2,
  canvas: () => canvas,
  face: () => face2,
  gesture: () => gesture,
  hand: () => hand2,
  object: () => object,
  options: () => options2,
  person: () => person
});
var options2 = {
  color: "rgba(173, 216, 230, 0.6)",
  labelColor: "rgba(173, 216, 230, 1)",
  shadowColor: "black",
  font: 'small-caps 14px "Segoe UI"',
  lineHeight: 18,
  lineWidth: 4,
  pointSize: 2,
  roundRect: 8,
  drawPoints: false,
  drawLabels: true,
  drawBoxes: true,
  drawPolygons: true,
  drawGaze: true,
  fillPolygons: false,
  useDepth: true,
  useCurves: false,
  bufferedOutput: true
};
var getCanvasContext = (input) => {
  if (input && input.getContext)
    return input.getContext("2d");
  throw new Error("Human: Invalid Canvas");
};
var rad2deg = (theta) => Math.round(theta * 180 / Math.PI);
function point(ctx, x, y, z10 = 0, localOptions) {
  ctx.fillStyle = localOptions.useDepth && z10 ? `rgba(${127.5 + 2 * z10}, ${127.5 - 2 * z10}, 255, 0.3)` : localOptions.color;
  ctx.beginPath();
  ctx.arc(x, y, localOptions.pointSize, 0, 2 * Math.PI);
  ctx.fill();
}
function rect(ctx, x, y, width, height, localOptions) {
  ctx.beginPath();
  if (localOptions.useCurves) {
    const cx2 = (x + x + width) / 2;
    const cy2 = (y + y + height) / 2;
    ctx.ellipse(cx2, cy2, width / 2, height / 2, 0, 0, 2 * Math.PI);
  } else {
    ctx.lineWidth = localOptions.lineWidth;
    ctx.moveTo(x + localOptions.roundRect, y);
    ctx.lineTo(x + width - localOptions.roundRect, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + localOptions.roundRect);
    ctx.lineTo(x + width, y + height - localOptions.roundRect);
    ctx.quadraticCurveTo(x + width, y + height, x + width - localOptions.roundRect, y + height);
    ctx.lineTo(x + localOptions.roundRect, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - localOptions.roundRect);
    ctx.lineTo(x, y + localOptions.roundRect);
    ctx.quadraticCurveTo(x, y, x + localOptions.roundRect, y);
    ctx.closePath();
  }
  ctx.stroke();
}
function lines(ctx, points = [], localOptions) {
  if (points === void 0 || points.length === 0)
    return;
  ctx.beginPath();
  ctx.moveTo(points[0][0], points[0][1]);
  for (const pt of points) {
    const z10 = pt[2] || 0;
    ctx.strokeStyle = localOptions.useDepth && z10 ? `rgba(${127.5 + 2 * z10}, ${127.5 - 2 * z10}, 255, 0.3)` : localOptions.color;
    ctx.fillStyle = localOptions.useDepth && z10 ? `rgba(${127.5 + 2 * z10}, ${127.5 - 2 * z10}, 255, 0.3)` : localOptions.color;
    ctx.lineTo(pt[0], Math.round(pt[1]));
  }
  ctx.stroke();
  if (localOptions.fillPolygons) {
    ctx.closePath();
    ctx.fill();
  }
}
function curves(ctx, points = [], localOptions) {
  if (points === void 0 || points.length === 0)
    return;
  if (!localOptions.useCurves || points.length <= 2) {
    lines(ctx, points, localOptions);
    return;
  }
  ctx.moveTo(points[0][0], points[0][1]);
  for (let i = 0; i < points.length - 2; i++) {
    const xc2 = (points[i][0] + points[i + 1][0]) / 2;
    const yc2 = (points[i][1] + points[i + 1][1]) / 2;
    ctx.quadraticCurveTo(points[i][0], points[i][1], xc2, yc2);
  }
  ctx.quadraticCurveTo(points[points.length - 2][0], points[points.length - 2][1], points[points.length - 1][0], points[points.length - 1][1]);
  ctx.stroke();
  if (localOptions.fillPolygons) {
    ctx.closePath();
    ctx.fill();
  }
}
async function gesture(inCanvas2, result, drawOptions) {
  const localOptions = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  ctx.font = localOptions.font;
  ctx.fillStyle = localOptions.color;
  let i = 1;
  for (let j10 = 0; j10 < result.length; j10++) {
    let where = [];
    let what = [];
    [where, what] = Object.entries(result[j10]);
    if (what.length > 1 && what[1].length > 0) {
      const who = where[1] > 0 ? `#${where[1]}` : "";
      const label = `${where[0]} ${who}: ${what[1]}`;
      if (localOptions.shadowColor && localOptions.shadowColor !== "") {
        ctx.fillStyle = localOptions.shadowColor;
        ctx.fillText(label, 8, 2 + i * localOptions.lineHeight);
      }
      ctx.fillStyle = localOptions.labelColor;
      ctx.fillText(label, 6, 0 + i * localOptions.lineHeight);
      i += 1;
    }
  }
}
async function face2(inCanvas2, result, drawOptions) {
  var _a2, _b, _c2, _d2;
  const localOptions = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  for (const f of result) {
    ctx.font = localOptions.font;
    ctx.strokeStyle = localOptions.color;
    ctx.fillStyle = localOptions.color;
    if (localOptions.drawBoxes)
      rect(ctx, f.box[0], f.box[1], f.box[2], f.box[3], localOptions);
    const labels2 = [];
    labels2.push(`face: ${Math.trunc(100 * f.score)}%`);
    if (f.genderScore)
      labels2.push(`${f.gender || ""} ${Math.trunc(100 * f.genderScore)}%`);
    if (f.age)
      labels2.push(`age: ${f.age || ""}`);
    if (f.iris)
      labels2.push(`distance: ${f.iris}`);
    if (f.emotion && f.emotion.length > 0) {
      const emotion3 = f.emotion.map((a) => `${Math.trunc(100 * a.score)}% ${a.emotion}`);
      if (emotion3.length > 3)
        emotion3.length = 3;
      labels2.push(emotion3.join(" "));
    }
    if (f.rotation && f.rotation.angle && f.rotation.gaze) {
      if (f.rotation.angle.roll)
        labels2.push(`roll: ${rad2deg(f.rotation.angle.roll)}\xB0 yaw:${rad2deg(f.rotation.angle.yaw)}\xB0 pitch:${rad2deg(f.rotation.angle.pitch)}\xB0`);
      if (f.rotation.gaze.bearing)
        labels2.push(`gaze: ${rad2deg(f.rotation.gaze.bearing)}\xB0`);
    }
    if (labels2.length === 0)
      labels2.push("face");
    ctx.fillStyle = localOptions.color;
    for (let i = labels2.length - 1; i >= 0; i--) {
      const x = Math.max(f.box[0], 0);
      const y = i * localOptions.lineHeight + f.box[1];
      if (localOptions.shadowColor && localOptions.shadowColor !== "") {
        ctx.fillStyle = localOptions.shadowColor;
        ctx.fillText(labels2[i], x + 5, y + 16);
      }
      ctx.fillStyle = localOptions.labelColor;
      ctx.fillText(labels2[i], x + 4, y + 15);
    }
    ctx.lineWidth = 1;
    if (f.mesh && f.mesh.length > 0) {
      if (localOptions.drawPoints) {
        for (const pt of f.mesh)
          point(ctx, pt[0], pt[1], pt[2], localOptions);
      }
      if (localOptions.drawPolygons) {
        ctx.lineWidth = 1;
        for (let i = 0; i < TRI468.length / 3; i++) {
          const points = [
            TRI468[i * 3 + 0],
            TRI468[i * 3 + 1],
            TRI468[i * 3 + 2]
          ].map((index) => f.mesh[index]);
          lines(ctx, points, localOptions);
        }
        if (f.annotations && f.annotations["leftEyeIris"]) {
          ctx.strokeStyle = localOptions.useDepth ? "rgba(255, 200, 255, 0.3)" : localOptions.color;
          ctx.beginPath();
          const sizeX = Math.abs(f.annotations["leftEyeIris"][3][0] - f.annotations["leftEyeIris"][1][0]) / 2;
          const sizeY = Math.abs(f.annotations["leftEyeIris"][4][1] - f.annotations["leftEyeIris"][2][1]) / 2;
          ctx.ellipse(f.annotations["leftEyeIris"][0][0], f.annotations["leftEyeIris"][0][1], sizeX, sizeY, 0, 0, 2 * Math.PI);
          ctx.stroke();
          if (localOptions.fillPolygons) {
            ctx.fillStyle = localOptions.useDepth ? "rgba(255, 255, 200, 0.3)" : localOptions.color;
            ctx.fill();
          }
        }
        if (f.annotations && f.annotations["rightEyeIris"]) {
          ctx.strokeStyle = localOptions.useDepth ? "rgba(255, 200, 255, 0.3)" : localOptions.color;
          ctx.beginPath();
          const sizeX = Math.abs(f.annotations["rightEyeIris"][3][0] - f.annotations["rightEyeIris"][1][0]) / 2;
          const sizeY = Math.abs(f.annotations["rightEyeIris"][4][1] - f.annotations["rightEyeIris"][2][1]) / 2;
          ctx.ellipse(f.annotations["rightEyeIris"][0][0], f.annotations["rightEyeIris"][0][1], sizeX, sizeY, 0, 0, 2 * Math.PI);
          ctx.stroke();
          if (localOptions.fillPolygons) {
            ctx.fillStyle = localOptions.useDepth ? "rgba(255, 255, 200, 0.3)" : localOptions.color;
            ctx.fill();
          }
        }
        if (localOptions.drawGaze && ((_b = (_a2 = f.rotation) == null ? void 0 : _a2.gaze) == null ? void 0 : _b.strength) && ((_d2 = (_c2 = f.rotation) == null ? void 0 : _c2.gaze) == null ? void 0 : _d2.bearing) && f.annotations["leftEyeIris"] && f.annotations["rightEyeIris"] && f.annotations["leftEyeIris"][0] && f.annotations["rightEyeIris"][0]) {
          ctx.strokeStyle = "pink";
          ctx.beginPath();
          const leftGaze = [
            f.annotations["leftEyeIris"][0][0] + Math.sin(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[3],
            f.annotations["leftEyeIris"][0][1] + Math.cos(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[2]
          ];
          ctx.moveTo(f.annotations["leftEyeIris"][0][0], f.annotations["leftEyeIris"][0][1]);
          ctx.lineTo(leftGaze[0], leftGaze[1]);
          const rightGaze = [
            f.annotations["rightEyeIris"][0][0] + Math.sin(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[3],
            f.annotations["rightEyeIris"][0][1] + Math.cos(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[2]
          ];
          ctx.moveTo(f.annotations["rightEyeIris"][0][0], f.annotations["rightEyeIris"][0][1]);
          ctx.lineTo(rightGaze[0], rightGaze[1]);
          ctx.stroke();
        }
      }
    }
  }
}
async function body2(inCanvas2, result, drawOptions) {
  var _a2;
  const localOptions = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  ctx.lineJoin = "round";
  for (let i = 0; i < result.length; i++) {
    ctx.strokeStyle = localOptions.color;
    ctx.fillStyle = localOptions.color;
    ctx.lineWidth = localOptions.lineWidth;
    ctx.font = localOptions.font;
    if (localOptions.drawBoxes && result[i].box && ((_a2 = result[i].box) == null ? void 0 : _a2.length) === 4) {
      rect(ctx, result[i].box[0], result[i].box[1], result[i].box[2], result[i].box[3], localOptions);
      if (localOptions.drawLabels) {
        if (localOptions.shadowColor && localOptions.shadowColor !== "") {
          ctx.fillStyle = localOptions.shadowColor;
          ctx.fillText(`body ${100 * result[i].score}%`, result[i].box[0] + 3, 1 + result[i].box[1] + localOptions.lineHeight, result[i].box[2]);
        }
        ctx.fillStyle = localOptions.labelColor;
        ctx.fillText(`body ${100 * result[i].score}%`, result[i].box[0] + 2, 0 + result[i].box[1] + localOptions.lineHeight, result[i].box[2]);
      }
    }
    if (localOptions.drawPoints) {
      for (let pt = 0; pt < result[i].keypoints.length; pt++) {
        ctx.fillStyle = localOptions.useDepth && result[i].keypoints[pt].position[2] ? `rgba(${127.5 + 2 * (result[i].keypoints[pt].position[2] || 0)}, ${127.5 - 2 * (result[i].keypoints[pt].position[2] || 0)}, 255, 0.5)` : localOptions.color;
        point(ctx, result[i].keypoints[pt].position[0], result[i].keypoints[pt].position[1], 0, localOptions);
      }
    }
    if (localOptions.drawLabels) {
      ctx.font = localOptions.font;
      if (result[i].keypoints) {
        for (const pt of result[i].keypoints) {
          ctx.fillStyle = localOptions.useDepth && pt.position[2] ? `rgba(${127.5 + 2 * pt.position[2]}, ${127.5 - 2 * pt.position[2]}, 255, 0.5)` : localOptions.color;
          ctx.fillText(`${pt.part} ${Math.trunc(100 * pt.score)}%`, pt.position[0] + 4, pt.position[1] + 4);
        }
      }
    }
    if (localOptions.drawPolygons && result[i].keypoints) {
      let part;
      const points = [];
      points.length = 0;
      part = result[i].keypoints.find((a) => a.part === "leftShoulder");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "rightShoulder");
      if (part)
        points.push([part.position[0], part.position[1]]);
      curves(ctx, points, localOptions);
      points.length = 0;
      part = result[i].keypoints.find((a) => a.part === "rightShoulder");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "rightHip");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "leftHip");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "leftShoulder");
      if (part)
        points.push([part.position[0], part.position[1]]);
      if (points.length === 4)
        lines(ctx, points, localOptions);
      points.length = 0;
      part = result[i].keypoints.find((a) => a.part === "leftHip");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "leftKnee");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "leftAnkle");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "leftHeel");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "leftFoot");
      if (part)
        points.push([part.position[0], part.position[1]]);
      curves(ctx, points, localOptions);
      points.length = 0;
      part = result[i].keypoints.find((a) => a.part === "rightHip");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "rightKnee");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "rightAnkle");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "rightHeel");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "rightFoot");
      if (part)
        points.push([part.position[0], part.position[1]]);
      curves(ctx, points, localOptions);
      points.length = 0;
      part = result[i].keypoints.find((a) => a.part === "leftShoulder");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "leftElbow");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "leftWrist");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "leftPalm");
      if (part)
        points.push([part.position[0], part.position[1]]);
      curves(ctx, points, localOptions);
      points.length = 0;
      part = result[i].keypoints.find((a) => a.part === "rightShoulder");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "rightElbow");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "rightWrist");
      if (part)
        points.push([part.position[0], part.position[1]]);
      part = result[i].keypoints.find((a) => a.part === "rightPalm");
      if (part)
        points.push([part.position[0], part.position[1]]);
      curves(ctx, points, localOptions);
    }
  }
}
async function hand2(inCanvas2, result, drawOptions) {
  const localOptions = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  ctx.lineJoin = "round";
  ctx.font = localOptions.font;
  for (const h of result) {
    if (localOptions.drawBoxes) {
      ctx.strokeStyle = localOptions.color;
      ctx.fillStyle = localOptions.color;
      rect(ctx, h.box[0], h.box[1], h.box[2], h.box[3], localOptions);
      if (localOptions.drawLabels) {
        if (localOptions.shadowColor && localOptions.shadowColor !== "") {
          ctx.fillStyle = localOptions.shadowColor;
          ctx.fillText("hand", h.box[0] + 3, 1 + h.box[1] + localOptions.lineHeight, h.box[2]);
        }
        ctx.fillStyle = localOptions.labelColor;
        ctx.fillText("hand", h.box[0] + 2, 0 + h.box[1] + localOptions.lineHeight, h.box[2]);
      }
      ctx.stroke();
    }
    if (localOptions.drawPoints) {
      if (h.keypoints && h.keypoints.length > 0) {
        for (const pt of h.keypoints) {
          ctx.fillStyle = localOptions.useDepth ? `rgba(${127.5 + 2 * pt[2]}, ${127.5 - 2 * pt[2]}, 255, 0.5)` : localOptions.color;
          point(ctx, pt[0], pt[1], 0, localOptions);
        }
      }
    }
    if (localOptions.drawLabels) {
      const addHandLabel = (part, title) => {
        if (!part)
          return;
        ctx.fillStyle = localOptions.useDepth ? `rgba(${127.5 + 2 * part[part.length - 1][2]}, ${127.5 - 2 * part[part.length - 1][2]}, 255, 0.5)` : localOptions.color;
        ctx.fillText(title, part[part.length - 1][0] + 4, part[part.length - 1][1] + 4);
      };
      ctx.font = localOptions.font;
      addHandLabel(h.annotations["index"], "index");
      addHandLabel(h.annotations["middle"], "middle");
      addHandLabel(h.annotations["ring"], "ring");
      addHandLabel(h.annotations["pinky"], "pinky");
      addHandLabel(h.annotations["thumb"], "thumb");
      addHandLabel(h.annotations["palm"], "palm");
    }
    if (localOptions.drawPolygons) {
      const addHandLine = (part) => {
        if (!part)
          return;
        for (let i = 0; i < part.length; i++) {
          ctx.beginPath();
          ctx.strokeStyle = localOptions.useDepth ? `rgba(${127.5 + 2 * part[i][2]}, ${127.5 - 2 * part[i][2]}, 255, 0.5)` : localOptions.color;
          ctx.moveTo(part[i > 0 ? i - 1 : 0][0], part[i > 0 ? i - 1 : 0][1]);
          ctx.lineTo(part[i][0], part[i][1]);
          ctx.stroke();
        }
      };
      ctx.lineWidth = localOptions.lineWidth;
      addHandLine(h.annotations["index"]);
      addHandLine(h.annotations["middle"]);
      addHandLine(h.annotations["ring"]);
      addHandLine(h.annotations["pinky"]);
      addHandLine(h.annotations["thumb"]);
    }
  }
}
async function object(inCanvas2, result, drawOptions) {
  const localOptions = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  ctx.lineJoin = "round";
  ctx.font = localOptions.font;
  for (const h of result) {
    if (localOptions.drawBoxes) {
      ctx.strokeStyle = localOptions.color;
      ctx.fillStyle = localOptions.color;
      rect(ctx, h.box[0], h.box[1], h.box[2], h.box[3], localOptions);
      if (localOptions.drawLabels) {
        const label = `${h.label} ${Math.round(100 * h.score)}%`;
        if (localOptions.shadowColor && localOptions.shadowColor !== "") {
          ctx.fillStyle = localOptions.shadowColor;
          ctx.fillText(label, h.box[0] + 3, 1 + h.box[1] + localOptions.lineHeight, h.box[2]);
        }
        ctx.fillStyle = localOptions.labelColor;
        ctx.fillText(label, h.box[0] + 2, 0 + h.box[1] + localOptions.lineHeight, h.box[2]);
      }
      ctx.stroke();
    }
  }
}
async function person(inCanvas2, result, drawOptions) {
  const localOptions = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  ctx.lineJoin = "round";
  ctx.font = localOptions.font;
  for (let i = 0; i < result.length; i++) {
    if (localOptions.drawBoxes) {
      ctx.strokeStyle = localOptions.color;
      ctx.fillStyle = localOptions.color;
      rect(ctx, result[i].box[0], result[i].box[1], result[i].box[2], result[i].box[3], localOptions);
      if (localOptions.drawLabels) {
        const label = `person #${i}`;
        if (localOptions.shadowColor && localOptions.shadowColor !== "") {
          ctx.fillStyle = localOptions.shadowColor;
          ctx.fillText(label, result[i].box[0] + 3, 1 + result[i].box[1] + localOptions.lineHeight, result[i].box[2]);
        }
        ctx.fillStyle = localOptions.labelColor;
        ctx.fillText(label, result[i].box[0] + 2, 0 + result[i].box[1] + localOptions.lineHeight, result[i].box[2]);
      }
      ctx.stroke();
    }
  }
}
async function canvas(inCanvas2, outCanvas2) {
  if (!inCanvas2 || !outCanvas2)
    return;
  getCanvasContext(outCanvas2);
  const ctx = getCanvasContext(inCanvas2);
  ctx.drawImage(inCanvas2, 0, 0);
}
async function all(inCanvas2, result, drawOptions) {
  const timestamp = now();
  const localOptions = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return null;
  const promise = Promise.all([
    face2(inCanvas2, result.face, localOptions),
    body2(inCanvas2, result.body, localOptions),
    hand2(inCanvas2, result.hand, localOptions),
    object(inCanvas2, result.object, localOptions),
    gesture(inCanvas2, result.gesture, localOptions)
  ]);
  result.performance.draw = Math.trunc(now() - timestamp);
  return promise;
}

// src/persons.ts
function join2(faces, bodies, hands, gestures, shape) {
  var _a2, _b, _c2, _d2, _e2, _f2, _g2, _h2, _i, _j2, _k2, _l2, _m, _n2, _o2, _p2;
  let id2 = 0;
  const persons2 = [];
  for (const face5 of faces) {
    const person2 = { id: id2++, face: face5, body: null, hands: { left: null, right: null }, gestures: [], box: [0, 0, 0, 0] };
    for (const body4 of bodies) {
      if (face5.box[0] > body4.box[0] && face5.box[0] < body4.box[0] + body4.box[2] && face5.box[1] + face5.box[3] > body4.box[1] && face5.box[1] + face5.box[3] < body4.box[1] + body4.box[3]) {
        person2.body = body4;
      }
    }
    if (person2.body) {
      for (const hand3 of hands) {
        if (hand3.box[0] + hand3.box[2] > person2.body.box[0] && hand3.box[0] + hand3.box[2] < person2.body.box[0] + person2.body.box[2] && hand3.box[1] + hand3.box[3] > person2.body.box[1] && hand3.box[1] + hand3.box[3] < person2.body.box[1] + person2.body.box[3]) {
          if (person2.hands)
            person2.hands.left = hand3;
        }
        if (hand3.box[0] < person2.body.box[0] + person2.body.box[2] && hand3.box[0] > person2.body.box[0] && hand3.box[1] + hand3.box[3] > person2.body.box[1] && hand3.box[1] + hand3.box[3] < person2.body.box[1] + person2.body.box[3]) {
          if (person2.hands)
            person2.hands.right = hand3;
        }
      }
    }
    for (const gesture3 of gestures) {
      if (gesture3["face"] !== void 0 && gesture3["face"] === face5.id)
        (_a2 = person2.gestures) == null ? void 0 : _a2.push(gesture3);
      else if (gesture3["iris"] !== void 0 && gesture3["iris"] === face5.id)
        (_b = person2.gestures) == null ? void 0 : _b.push(gesture3);
      else if (gesture3["body"] !== void 0 && gesture3["body"] === ((_c2 = person2.body) == null ? void 0 : _c2.id))
        (_d2 = person2.gestures) == null ? void 0 : _d2.push(gesture3);
      else if (gesture3["hand"] !== void 0 && gesture3["hand"] === ((_f2 = (_e2 = person2.hands) == null ? void 0 : _e2.left) == null ? void 0 : _f2.id))
        (_g2 = person2.gestures) == null ? void 0 : _g2.push(gesture3);
      else if (gesture3["hand"] !== void 0 && gesture3["hand"] === ((_i = (_h2 = person2.hands) == null ? void 0 : _h2.right) == null ? void 0 : _i.id))
        (_j2 = person2.gestures) == null ? void 0 : _j2.push(gesture3);
    }
    const x = [];
    const y = [];
    const extractXY = (box6) => {
      if (box6 && box6.length === 4) {
        x.push(box6[0], box6[0] + box6[2]);
        y.push(box6[1], box6[1] + box6[3]);
      }
    };
    extractXY((_k2 = person2.face) == null ? void 0 : _k2.box);
    extractXY((_l2 = person2.body) == null ? void 0 : _l2.box);
    extractXY((_n2 = (_m = person2.hands) == null ? void 0 : _m.left) == null ? void 0 : _n2.box);
    extractXY((_p2 = (_o2 = person2.hands) == null ? void 0 : _o2.right) == null ? void 0 : _p2.box);
    const minX = Math.min(...x);
    const minY = Math.min(...y);
    person2.box = [minX, minY, Math.max(...x) - minX, Math.max(...y) - minY];
    if (shape && shape[1] && shape[2])
      person2.boxRaw = [person2.box[0] / shape[2], person2.box[1] / shape[1], person2.box[2] / shape[2], person2.box[3] / shape[1]];
    persons2.push(person2);
  }
  return persons2;
}

// src/interpolate.ts
var bufferedResult = { face: [], body: [], hand: [], gesture: [], object: [], persons: [], performance: {}, timestamp: 0 };
function calc(newResult) {
  var _a2, _b, _c2, _d2, _e2, _f2, _g2, _h2, _i, _j2, _k2, _l2, _m, _n2, _o2, _p2, _q2, _r2, _s2, _t2, _u2;
  if (!newResult)
    return { face: [], body: [], hand: [], gesture: [], object: [], persons: [], performance: {}, timestamp: 0 };
  const elapsed = Date.now() - newResult.timestamp;
  const bufferedFactor = elapsed < 1e3 ? 8 - Math.log(elapsed + 1) : 1;
  bufferedResult.canvas = newResult.canvas;
  if (!bufferedResult.body || newResult.body.length !== bufferedResult.body.length) {
    bufferedResult.body = JSON.parse(JSON.stringify(newResult.body));
  } else {
    for (let i = 0; i < newResult.body.length; i++) {
      const box6 = newResult.body[i].box.map((b7, j10) => ((bufferedFactor - 1) * bufferedResult.body[i].box[j10] + b7) / bufferedFactor);
      const boxRaw3 = newResult.body[i].boxRaw.map((b7, j10) => ((bufferedFactor - 1) * bufferedResult.body[i].boxRaw[j10] + b7) / bufferedFactor);
      const keypoints3 = newResult.body[i].keypoints.map((keypoint, j10) => ({
        score: keypoint.score,
        part: keypoint.part,
        position: [
          bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * bufferedResult.body[i].keypoints[j10].position[0] + keypoint.position[0]) / bufferedFactor : keypoint.position[0],
          bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * bufferedResult.body[i].keypoints[j10].position[1] + keypoint.position[1]) / bufferedFactor : keypoint.position[1]
        ],
        positionRaw: [
          bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * bufferedResult.body[i].keypoints[j10].positionRaw[0] + keypoint.positionRaw[0]) / bufferedFactor : keypoint.position[0],
          bufferedResult.body[i].keypoints[j10] ? ((bufferedFactor - 1) * bufferedResult.body[i].keypoints[j10].positionRaw[1] + keypoint.positionRaw[1]) / bufferedFactor : keypoint.position[1]
        ]
      }));
      bufferedResult.body[i] = { ...newResult.body[i], box: box6, boxRaw: boxRaw3, keypoints: keypoints3 };
    }
  }
  if (!bufferedResult.hand || newResult.hand.length !== bufferedResult.hand.length) {
    bufferedResult.hand = JSON.parse(JSON.stringify(newResult.hand));
  } else {
    for (let i = 0; i < newResult.hand.length; i++) {
      const box6 = newResult.hand[i].box.map((b7, j10) => ((bufferedFactor - 1) * bufferedResult.hand[i].box[j10] + b7) / bufferedFactor);
      const boxRaw3 = newResult.hand[i].boxRaw.map((b7, j10) => ((bufferedFactor - 1) * bufferedResult.hand[i].boxRaw[j10] + b7) / bufferedFactor);
      const keypoints3 = newResult.hand[i].keypoints ? newResult.hand[i].keypoints.map((landmark, j10) => landmark.map((coord, k) => ((bufferedFactor - 1) * bufferedResult.hand[i].keypoints[j10][k] + coord) / bufferedFactor)) : [];
      const keys = Object.keys(newResult.hand[i].annotations);
      const annotations3 = {};
      for (const key of keys) {
        annotations3[key] = newResult.hand[i].annotations[key].map((val, j10) => val.map((coord, k) => ((bufferedFactor - 1) * bufferedResult.hand[i].annotations[key][j10][k] + coord) / bufferedFactor));
      }
      bufferedResult.hand[i] = { ...newResult.hand[i], box: box6, boxRaw: boxRaw3, keypoints: keypoints3, annotations: annotations3 };
    }
  }
  if (!bufferedResult.face || newResult.face.length !== bufferedResult.face.length) {
    bufferedResult.face = JSON.parse(JSON.stringify(newResult.face));
  } else {
    for (let i = 0; i < newResult.face.length; i++) {
      const box6 = newResult.face[i].box.map((b7, j10) => ((bufferedFactor - 1) * bufferedResult.face[i].box[j10] + b7) / bufferedFactor);
      const boxRaw3 = newResult.face[i].boxRaw.map((b7, j10) => ((bufferedFactor - 1) * bufferedResult.face[i].boxRaw[j10] + b7) / bufferedFactor);
      const rotation = { matrix: [0, 0, 0, 0, 0, 0, 0, 0, 0], angle: { roll: 0, yaw: 0, pitch: 0 }, gaze: { bearing: 0, strength: 0 } };
      rotation.matrix = (_a2 = newResult.face[i].rotation) == null ? void 0 : _a2.matrix;
      rotation.angle = {
        roll: ((bufferedFactor - 1) * (((_c2 = (_b = bufferedResult.face[i].rotation) == null ? void 0 : _b.angle) == null ? void 0 : _c2.roll) || 0) + (((_e2 = (_d2 = newResult.face[i].rotation) == null ? void 0 : _d2.angle) == null ? void 0 : _e2.roll) || 0)) / bufferedFactor,
        yaw: ((bufferedFactor - 1) * (((_g2 = (_f2 = bufferedResult.face[i].rotation) == null ? void 0 : _f2.angle) == null ? void 0 : _g2.yaw) || 0) + (((_i = (_h2 = newResult.face[i].rotation) == null ? void 0 : _h2.angle) == null ? void 0 : _i.yaw) || 0)) / bufferedFactor,
        pitch: ((bufferedFactor - 1) * (((_k2 = (_j2 = bufferedResult.face[i].rotation) == null ? void 0 : _j2.angle) == null ? void 0 : _k2.pitch) || 0) + (((_m = (_l2 = newResult.face[i].rotation) == null ? void 0 : _l2.angle) == null ? void 0 : _m.pitch) || 0)) / bufferedFactor
      };
      rotation.gaze = {
        bearing: ((bufferedFactor - 1) * (((_o2 = (_n2 = bufferedResult.face[i].rotation) == null ? void 0 : _n2.gaze) == null ? void 0 : _o2.bearing) || 0) + (((_q2 = (_p2 = newResult.face[i].rotation) == null ? void 0 : _p2.gaze) == null ? void 0 : _q2.bearing) || 0)) / bufferedFactor,
        strength: ((bufferedFactor - 1) * (((_s2 = (_r2 = bufferedResult.face[i].rotation) == null ? void 0 : _r2.gaze) == null ? void 0 : _s2.strength) || 0) + (((_u2 = (_t2 = newResult.face[i].rotation) == null ? void 0 : _t2.gaze) == null ? void 0 : _u2.strength) || 0)) / bufferedFactor
      };
      bufferedResult.face[i] = { ...newResult.face[i], rotation, box: box6, boxRaw: boxRaw3 };
    }
  }
  if (!bufferedResult.object || newResult.object.length !== bufferedResult.object.length) {
    bufferedResult.object = JSON.parse(JSON.stringify(newResult.object));
  } else {
    for (let i = 0; i < newResult.object.length; i++) {
      const box6 = newResult.object[i].box.map((b7, j10) => ((bufferedFactor - 1) * bufferedResult.object[i].box[j10] + b7) / bufferedFactor);
      const boxRaw3 = newResult.object[i].boxRaw.map((b7, j10) => ((bufferedFactor - 1) * bufferedResult.object[i].boxRaw[j10] + b7) / bufferedFactor);
      bufferedResult.object[i] = { ...newResult.object[i], box: box6, boxRaw: boxRaw3 };
    }
  }
  if (newResult.persons) {
    const newPersons = newResult.persons;
    if (!bufferedResult.persons || newPersons.length !== bufferedResult.persons.length) {
      bufferedResult.persons = JSON.parse(JSON.stringify(newPersons));
    } else {
      for (let i = 0; i < newPersons.length; i++) {
        bufferedResult.persons[i].box = newPersons[i].box.map((box6, j10) => ((bufferedFactor - 1) * bufferedResult.persons[i].box[j10] + box6) / bufferedFactor);
      }
    }
  }
  if (newResult.gesture)
    bufferedResult.gesture = newResult.gesture;
  if (newResult.performance)
    bufferedResult.performance = newResult.performance;
  return bufferedResult;
}

// src/sample.ts
var face3 = `
/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUA
AAABAAAARgEoAAMAAAABAAIAAAExAAIAAAARAAAATgAAAAAAAABgAAAAAQAAAGAAAAABcGFpbnQu
bmV0IDQuMi4xMwAA/9sAQwAGBAUGBQQGBgUGBwcGCAoQCgoJCQoUDg8MEBcUGBgXFBYWGh0lHxob
IxwWFiAsICMmJykqKRkfLTAtKDAlKCko/9sAQwEHBwcKCAoTCgoTKBoWGigoKCgoKCgoKCgoKCgo
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo/8AAEQgBAAEAAwEhAAIRAQMRAf/E
AB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAE
EQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZH
SElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1
tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEB
AQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXET
IjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFla
Y2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
x8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A+qaKACigApGOKAML
Xp8xlF5A7V4X8RtYs7PzfNImnx8sa8Kp9z3q2tEgp6angWs62ZZ5CTGoJ6DArGNz5p+UrID6EUrF
PUlW1EuN0XNW7PQ2L5j3JnoKXN0KijqNP0eYoqXBdgPuuo+ZPeupisWn2Jd4+0r924XgsQOCff3/
AJ1FzRKxDqGii6m3siiQ8F1XGfXI6YNWLfRbiRQMkcZI9fpTDluT2/h6Qy8gDPbtmtG38JeY480Z
5zSLUTZg8M28YwYxjAArXtdPt402qgHbpSaLWhma3o0Uqk7Nx9DWLaaVblgPs6qRyds2M/gRSQp9
zZOni2iWS2hlQ+kjYz9OMGrdjq89vIPPVhj+8M/lQyDq9P1WOYBlMZz1AOD+VdDaTiReOKulK0jO
tHmi0WDTlr0TyxRVhT8tJjIX+9SUxHXUV553BRQAVBcPhSBTSuxPY86+IGti0s5I7dsORy9fM3i6
8e8mfDO5P90ZrWWiJicNPpZZtxV/xrW0jQt4DOv6Vk2dEEdTY6BHuB25rpbPSo0QARjP0qTRI17W
wA/hFaMWmoQMgflQXYsDS142rU9tpqqenfNA7GgtihxkdKuRW6qMY/GkDZY8sY4Ap4hXbyB+VArk
EtuH4wPyrk/EGkOm+a3jw3suRQLc5i38SX9hJ9nnY+XnBUdPyNdFY6pa3KkkAE9l6f8AfJ/pSJT6
GhDmI+Zb4ZRycdv6ium0nUhKFydrelTsNnS2829RnrVgV6NKXNG55lWPLIM81Op+WrZkRMfmNNzT
A7GivPO4KKAEY4XNYWt3vkwPg4OK0giJdjw/xrqhm87Zs8tc7pX5A+leSajf6aHYJ50kn4AZpTep
rBWRm2Vobm4BXfyehPFdnpmnBFUY5rI2SN63tlToK0YI+KZpFF+3QdavwoKTLtoW0Toaswpk5pCb
LCxipAhoIuP2dKevHXoaYDylRyxhlwRQI4nxVoCXWZI1GfpXGtbSWjYPGP73+NIGupt6TqMsLruZ
ih4xnP5V09mQ+JLd8gn0xSYJnVaVdkook69K34zuUGunDS3Rx4qOzHVIp4rrOMY3NJQI7GivPO8K
KAILt9kZrz3xlebYiu8KCCWb0XvW0NFch6ysfO3jLVjfXLIn+pQkKorl7WxNxIPl71g2dUUdpo+l
pBGvHPet23iC8ihFosrxirkHQUFo0IF4FXI1O726CpKLacCrMJoJLYHAPpTwucHpSRJJ5e4AZI9x
UqpxzVpCuOC8cUpQUMRnXttuB4rjNdsYyeVwfXpmpGmcvcQyafMCFJjPY10eg34BUg4DcZP8jUO4
HaRq3lLNF+IHet7R7jz7c56rwa2wz9+xhiVeFy/T1PFegeaNPWigDsc0ZrzzvDNIaAM7VpNqdegr
xL4l6kywyRhseZ19lrdfAZL4jxYg3Fw20d63tJsdrDI5rm3Z3R0R0Mce1eKnQYAplIkWrMJ45oZS
NO3PHbNXIyfpSGWowSOasxLUiZdjFSqtNEMkUemKlAGKsRJjAppFAiORMjmsTVrNZEO4cfSoZSOD
1eJ7WXBUzQZ+7nkfSo7e2Ei+ZaMzxntjBX2NSU1Y6/wxqojiEFzkA8KTXYaUoWRyv3W5rSjpNHPX
+BmpSg8V6J5gUUAdhRXnneFFAGHrTfu5PpXzj8S70/aZtxzztXFbv4DKHxHI+H4GZiz9zxXXW8G3
GBXMjvLRXAx0oPGPSmMVeOnWrMTYpFI0bcg1fh54xmgovRcD3qxETSIZcRvzp+/BpEkqsBUqsM9K
q4Em4Gkxk0yRGXrVW6i8yFhkg+tJjRxGsWrxllkUMh9eK5uMz6bcebbnfG33kPcVkay2OntPKuo0
nhXI67c8qa7Lw3c+adjcEDGK1paSRhVV4s6A0or0jyRRQ1AHX0V553hRQBz+vNtt5z3xXzX8Qbdm
uic5YnOMdK3l8JnTXvlbwpYl+WySOgrp5YfLOOB9O1c62O7qQkc+9RsKChFPWp4DluOlSykaNruH
ArUgHShFNF2NT1qxGO3NBmyxGcE1N2560CFzjrUysO9JAPDDjFOVuKoQuSRTWouBkazbCa3cd8cV
wF7IISQccHBzUSWpV9C3o1x5b5GAjdQD1rs9DjC3kckbEhqKfxIzn8LOupRXqnkPccBSkUAzraK8
87wooA5rxMSI3HqK8B8bQl9Q8sffY5b/AAraXwkUviNrw9pH2W1ViMMRTdRjw4HpWNtDti9TPc4P
FQs2M5qdyyMHLcfjV63HTAoBGtap0wK0YxigpsuRDtVhVYd6GQydVwwIqdRnqKCR23I5pCMUW6gD
YNKuetAEise9KTxQBWuFyhrznxNZkXjFeN3I+tTIZg2OqmzmxNF0PO3vXp/g2+hukVl4zyPanTXv
JmVR+60dpThXpnlPceopWFAbnV0V553hSGgRynjC5FujOey14Ssp1HxNmTnc+a3kvcIpv37HoEYQ
QmMdVHSsnVbYJF5jVk0dsNzlruVIsl2wKxbjWrVHILjg1CRbZJb+ILHPzyhfStODWLQgFJFYd+el
UJM27HUIXxhga1Y5lLVLKLkMnoauxnPPrSEx7ShF+Y/n2qrc6xBbhizDAqkK1zJuvG9nbg8ZA681
ly/Ei052RO3uKAsZlx8QGd8xxvt9Aa1NH8dK7AXMcip64zigdkdrZX8F7EJLdwwNXMkrz1qRMRly
CK4TxmpidWI49felPYSOMmi80NIoOV6qRzXYeA5SskYPfirpfEjGr8LPWVHyD6U4CvQPL3ZItOYc
UDOoNFeed4Uhpks4H4iE/Z5MeleMeGULeLgjds10S+BGdL+Jc9OSBU2Huc5Nc74yvUtrcDBrJnZF
63PJdXvLy/lKWw46bvQVz82jXhkLO5Y+9ZlsYthcRnbIjY9R3q3awTRkEM3WmJI6C0ea3dGRsr1x
XY6TqW9FLHnjrUs0izpLK5DDjofSta3ckH09KRUkZuuTvFGdvPauE1Y3U6Mqbssf/rUxHPTaJPK2
ZmJPbBqzY6DCZh5xJC9s9aBJHU6dpemJjfEmfetJtI0+VPkUr/unFOxdiextHs33W07YHQHk11mk
Xb3KbZ1xIvcd6LEyWho4Nct41sTPYb16ipexCPPZN+wYGCvH1rrPAEJmvkPoc1VL4kZVvgZ6yFwK
cBXoHkkqinFaVyzo80GuE7WJRQSziPiGdthK5HQV4x4J/wBI8WPIewNdEvgRNL42emO/yj1UHNef
eNpRczbC+I17DvWT2OqJxc0sMK4TCisy41q0hfEkqj8aixdwTXNOlwvmqD9anS9tXH7uVG+hosO4
/wC0oOhrR0+6G4YNIEzsNEuCxAPNdjZruA4xxUmjINSjURksOlcbqFykbnjFA1sYGoassaknCqO5
rl7rxhGm7yBnBxuJq0rkSlYpw+NLlsfd5P8AerVsvHEqSBHwPVgcgVpyMyVXU3rXxcHYETAk+hru
/DWti6ZSTyOKzZqndHaxvvUGq2rQ+dYyqR24qWI8dvbr7LqDxyDAzXpvw6FvIxePGSM06Xxoyr/A
zviKFHNegeX1J41zUhXioGbuaSuM6wpCaBHG/EcA6HN/exxXjXw2jL67cv8A3Qa6H8CFR+NnoWpO
I4XI44rxLxrqjQzSEsQM1gdSPM9U1uR1YbmWIdXHf2rmpIb67YS28UrRlsLI3c/jW0VZGUpO5pW1
jfLNOjahawzwReYI5cjzMkDavHJ5/SrVv9uhtPtVxCPLBwzxnlT9KGghLU3tKvvPjHzbl7EGuisJ
GRxWLOg7nRXJEbDjmvSNK+aFSfSoZr0KutRkphc4NcRrdkVjL9aVio7Hk3iqS8ubhrWzUlsZY9kG
cZNc5D4aee5MclzJIFTzHAO0MfatqSOWu7bFS1srDUZEis0vIZoUxPvfcC+4/dx2xjr712XiTwXb
WmlQ6hol3cRhoFd4rlg3zY5wR0GelavQwjq7GD4etdVvSnk2wAB+9v8A8mvcfA2kXiRo0/UdcDis
ZnTTulqeoWqbUAJqWUb42X1FZlnjfjSwlGrr5S/eNdD4RkvLAAQ4yRyaUZcruVKl7TQ9I0G+mnzH
ckFwM8VuIK7ac3KF2eXiKapz5UWYxipNtMyNejNch0jSar3cjR27uoyQCRVRWom9DxTx54gu5fMi
lbKdMVjfCZPNlv5v9rFbVHpYqjGzbOn8SzFI9o715L4u0r7arYzk+lYdTqSujy7U/C0u4vHk+WwO
xuh9q3J9dgvbdVukMV1EwbDDgn04rZMwlHoZ+orZ6hfQ3RWVnQYCgZAq+8U0ln5NtBsV2yxYcfgK
JtW0CnB31LlroVwJ1nQLGDjeP7w+lb0dsFxjrWB0tHS6NuWPJ6A16ToUm63T3Gallr4S7cxiTjrX
PaxaF7dlVeSMUhxZ5jd+H7qCa4eF3DSE5x3zXN3Wk6jbyeaiFWUY6ZyPStYS5SalPmVipFbX0E4c
W0alvmPHJrag0rVvEE6LdljGpG2NRtQD+tW5XMI0uU9M8NeFo9PiQhecDIIrtrOMIoG3H4VlJm9t
C6CB06VPGM1IHLeItGS6uw+ORT7e3jsbQvj7gzUNam0JaWE+HN7NqOqX80n3FO1RXo8YzXdS+BHk
4z+KyzGPapcU2YIv7qQtiuaxvcaWqG4O6FwfSrS1JbPnrxoxkv7qIfejcitj4V2f2exumI+8+aKn
xHTT+G5d8Txlm4rjLxMsQwzWT3OiK0Mm6sEkVsAcjFc1d+FEmlGwEDPQVopaEuOpr6f4ZWNAu3tW
vHpAj5ZQcUFIWaDjGMVUMQ3cVDBmvbhY7QAV2nh+T/R1yeKhlrY31+b61FcQK6nIoJMi401WblRi
qr6PCw5UYq9y+YgOgWzNkRrx3xWjp+nx2v3FQcelAbmko9anQ4GBUNisPHWr1qMrQhS2K11HvmYV
hamcxSRZ5xRIqluS/DKAQQXZxyXrvo2FdlL4EeZjH+/ZbjNSZpswLNBrE1Gt7VE4ODVIlnh/j61F
j4lmeTGyUbq6LwdEqWbeX0YbhSqfEddP4Bddj4JIrhL5d8h7VjI6oLQqKNzelWre3yc4/ClFjaL6
wqBxxUUxwCKu5BmXRA6c+9ZjP83FSBoQuPs4BrsNBlUW659KmRrDY6G1lyQtW3Hy0lqQ1qVJnAbm
oy3b9KYJCqRj3o4zRctIlhjLHmpSuOBRbQOpLGpPFaES7UqkZzKN1KsEc87/AHUUmvPLTVGv72aQ
k7WJwKmRrQ3ud74Ltilgz4++2a6iNDXdS0gjyMU71my7GpqTbxSbMki3SViajTTHqkSeR/GeyZmg
nQHkEE1S+F+oPPavBL96I4/Cia1udVF+4dVrkW+Fq8+v4tjMDWUkdVJ6WM0cNV+F+MVmjUcZgqnP
1qpNNnkcVRLiZtxIS1UzzIF7mghlxUZpVQdq6nTVdAoAOKzkbQWhvwM6gMM1twOJYx3NOJE11Kt1
H1/pVVlwBkk+9NocXoOQ45FPj+fkUJFF2NSB700v/hTEty5ZpkjvVyUgcCq6GM9zC14/8Se6GcZQ
1574Xs5WkI2HBPHFQ1dm1KSSZ7Rotn9l0+KPHIHNacae1dy0Vjxaj5ptlhVp+2s2CJ9ppCKzuWNx
zSFc1SYrHNeNdIGpaYw25ZeRXmvheyk0jVpEdcLJ0q3ZxNKTa0O3vQHg/DNcHrsJDmsmjspnNzNt
fFIJ24GazOhC+azDmgZIOOKBsp3J2qSaZodubq58yQ4QAnmhGT3NO18pb7BORmu205LfYpyKVkWp
Oxr5gKYWoIZWgfGfloFq1qTPLubnGO1RPtxg4P0oBAkY/hBz6VNDDkZ6AU0W2WSdqkdKr9ZOaGSj
VtcLHmnOcgmmYvcz7mBLy3MbdD1q9ouiRK6bUAVeelOC1InPlidSsWMDFOCEdq3uefykqrinYqGy
rFvApMVka2DAowKAsMkRXQqwyDXn/iWyitNQ3qPl6itIvRoF8RXinW4tQ6HI6GuW8SIVBPalc6qe
5x9x97r3qruwTjrWZ0ksZ9TUmcDNAmZ9/wAoao63rR0+w22MLPtAzt6mghmfofiB76LdJBJBIp5D
d/oa7bSdWLIPnpDi9TM8TeKdas51XTbIyxd3J/pXS+E/EFxqNoFu7do5OmD60maHWrnZyDRkn/69
MlEyOR0xntVoNx+FUgYjPxg4FLCuWDZyKQr2RoRnP0qO+nEFpJITgAUzLqZnhu6+0rknOTXpOmwJ
Fbrt5yMmnHYyr6Oxb2ijaKLnPYMClwKQWK3n0hn+lachHOJ9pNNN0apQFzsY10a4v4hXQh0xpieQ
MA1XLZNjhK80cT8OdV+3Wl3A7ZZJCw+hrR1qLcjZ/CsbnfHRnFXseHJArOYYbrUs1uPhYbuatqFP
ByfSkMq3UIINYkto+87Tx6GkSxfsDbflGD7CtTw/pk4nzITtPIFMFudsukh4Rxz71paTpKwP5jcn
0qTRy0NORMDgVCqewoJTJgAoxjntTiTu7fWmFxAcnn1q3EPl+X8KZMi4gKqB1Peob/Tv7Us5bfeU
yOoq4R5nYxqT5I8xieH9J1DTbvyJELRg8ODwa9Ms5mSFV9BWiptbnNVrKdmif7Q1KLg96XIZc5Is
pNL5pqeUrmMtZs0jzV08phchaY00zH1p2ZNxjS1g+LdJOt6U9ssmxjyGp2urDjLlaZzng/wUPDqz
TSTmWeTrjpVjVk3Rvjr2rnqQ5dDvo1XUd2cTqSNk9OKxXGCeKxZ1DAxHTr2q5C/y8GokUhsz54qu
uCxzSQjQ0+FZblR2ro4bZYiMVQ0dBb7Qi5x0qzuG5QOh71LYErDufpSeWrHnimIXbjkUjLkH1Hem
gGxryc+tXI19KYmWegq9YLiLJ7mtqS945cS7QsWehqxA9dEjz4krPSxyZqbFFhGxUm6smjRM55Lk
HvSvNxXTY57kLT+9MNwKdhXGm5FIbkU7Bca1wMEVhaiuQcVhXWiZ14R6tHGanGBI2OtYkqEHjgVy
s9ErEeo6UBsHipKEZs5qpPdRxcbhx70NCSuybTNWihc5brW9Fq6vjMnFSdEIdDRi8RRKygZbHFbu
m6nb3RA3gMegNJhOm0jbXGOoxTuCc1Rz3FyoGKawz9KaAVcZqeMgCmIkB4FaUTbYwB6V00Fuzixb
0SFMuDU8Mlbs4UPeXHeiOXkUrDuXYnyKk3cVk0ap6HMxxketSMhrcwRC0dMMZFMQ3yzSeVQAeUaz
9Vj8uPd271nVV4m+GdpnHX67pCeKyLtBtNcR6xlk9RVeWTb3qRnO6trgttyIfm71z7ai8j7/AJmN
DNqUVa5Yi1AnjynHuBV+11YJhWWXcP8AZNSzqgmaEerSsf3NtIQP4mGKtRavdRgMIpVI9KjU0a7n
R6T43uYQI7qN2Tpkqciu503VVuQGAYZHQjFVc4alPlZrpKGAznpTwxOc9+lWjIlUACnM4XApiLNk
nmvnsK0NvpXZRVonmYqV52GsmanhXitTmFkSiJTSAvwrxUxXIrJ7miOfjf1pzNWxkRlqYWpgJupu
6gQbuahvIxPA6eo4pNXVioS5WmefakGhndH4INZs5DJXA10PaTurmLO21uKpSZqGMoXGnRzBiyjd
9Kx5rcQS428fSkjanLoaOliHGZFB56VswW+mtPufcBsGOAfmxz+tFkd8HpoaUx09FAtFY8DO71qb
Sms/Nb7RbecG6AEjFLS5c78t+p0djpVs9wsyQiJAdyr1rW+zqjErzSe559Sbk9S3C+MA1bjbgE1S
MSXzMVG0vNUI2tPKrAuCMnrVzNd0PhR49W/O2xrHmp4TxVMzQshpIzzQBehqesnuaI5VGzT2bitz
FEbNTC1ADS1JupgG6l3UAc14s04yR/aYRll+8BXCtLncDXFWjys9TCz5oW7GddH5qqNzWDOgQnC8
VSuo1kHzAGkPYopEY2+RWxV23Vzj5G/Kg3jWaNazhZuqNXS6TaKhB2c0jR1nJWOlhOxRxU4YkCgx
Y0OQatQyDbyaaFYe8uF4NY3iC9ltbVGj43NTIL3h7WzMihjzXVQXYYDdW9Cf2WcOJpfaRZ3g9KsQ
mupnCLIabGeaAL0LcVY3cVmzRHIxtUhetzEjZqjLUAIWpN1ArhupwagAfDKQ3Q1594v0c2bm6tx+
5Y8j+6ayrR5onThp8s7dzkZjuqAAmuBnqC7c0iwgtzSA0rWzjfGRW3ZadDu4AoNYo2rfS4v7orSh
05UA2r0pDbsTm29KRottBNyJ0wpJ9KhD7f6U0ikNWffIFBz60zVUW52ow4UcUN6EPcx44WsbgOmd
ua7TT5Bd24KHnFKnLlZFSN4koluLdueRWvp14swweG9DXoxldHlTjYtzGoo25qzEvwtUxas2jRPQ
5CNqkLVsYoYzUzdQA3dSFqBBmnqaBhuqhriCXTpVIzxUz+Fl03aSPI9QTypW2/dz0qKNw3SvOPZR
Mqin8VLKRcs3O4Cuk0w/MDjt1NBtHY6O2IIHY1pxgFaETIRwMkjtVSUEk4570MlFW5bap6dKzWm8
1tqH8aY+hp2FvGoGayNevVt7/ap4xzUvYjqTLtvLPcvJxSaVcyWsxTnFZlnT2t15xHmCtOBYwQy4
B9q7cPO+jPPxFO2qLEj5HWo42+aus4HpoX4W4FTF+KlotbHII9SFuK0MUNZqiLUDE3UbqBBupwag
Bc1DefPbyD/ZND2KjujyPWlKzuPesRZjHJXms9lMuw3StjnmphKDSLTJ7OfE3JrpbO4GQc9qlnRA
3LO82k5NbFvdADkjBoCSHyXIIIzgVQvdRigT7wzjgUzO1jHknlvG7qnp61etYFQDIpCZoqVijzXn
3iC8EmsOuaCGb/heR/s0ijkVv6fbxy3QMg5xmsnuX0Ldzut3+UYTPWk+2GJSe+M1pFtamcldalmx
1eO4XaThhWnC+TXqR2PHqL3maUJ4qRjxSEjj42qXdxVmaGs1MJoATfSbqBAG5p6mgAzTJTmNvpQU
tzzHXY83D/U1zF5FhjgV5r3Pa6FMsV5HWnLe7RhqBRdmTwagN2d2K2rPU1C5LAnPrUs6Iysbdrq6
f3gK0BrUKj/WClY05iM6xLOcQAj3NT29uznfKSzHuadzNu7NSBFjHNSm5VO9IRnajqoWMhTzXFtA
bvUfMduSeg702Qz0rS7FbTToQFwzjJqaGTFyfK5PQViyzUuFmuIdgGABya5u/vTaN5cnUHFUmLoZ
zyskwlgJweSK6zQdUEwVJeGr0aUrxPLxEfe0OrhPAqVjxWhznGRtUwatDK4jNxURbmkAm6jNABup
6tQAFqhupNtu59qUnZFwV5JHnWsHdIx96w5lz15rzT2uhRmt85xWbcxMnUGmZlB0bdxmrNvFIcfM
350mWjbs7YkDJY/jW5ZWW4jikWkdNp9mqYJFaJdEHHakUULu/VB1rLn1Ld/FgetMGYd/qWSQmSa0
/AemS32pfa7piLeLkg9z6UmQtz0W7uQ2cZx0A9BVzR7cAea6j2rPqX0L99KRat5A6Dk1wOoKZ52a
YfMORTYRLujiGWEq6/NWza2yKQVHNdOHerRy4laJo6TTnbbtb8KuM3Fdh5z3OJjbmpt3FaMxAtUZ
agBN1GaQBzTwaAAms3VbjERUGsa07RsdeFpuUuY4jUjljWTKK4j02RE4IpJYFk6imQkVl0xWarsO
mAEcUi0bNnZBR0rWtoguMCkUi21wI161mXuocEKaYXMS4u+pY/hVCSWSY4HT0pEmlouiSahdpEBl
mOceleiwWcNjClvHgJH97Hc1EmVFFi3Czy7mwIl/WtJbjP7uLgd/apQ2VNVvtsBhiPzdK5S4nAuR
nqOCaTGi9pcytPlU+XpmumtWII44rah8ZjiNIXRuWeNvvViQ/LXpJWPJbu7nCRvVkNxVsxBmqJmo
EPiXca0YLMuOlJsuKuPlsSi5IrNuG8s4HWs5VEkbwoOTKsk+FJY4rC1K53k1xTk5O7PSpwVNWRzt
4cms+WpKICtSLTETQj5q0YeBSGiys23pUguGxQMq3E59ayrm4x3yaAKiRtO2WPHcmhruKFxFajzZ
ScA44qRHoXhuMaLpxaUg6hcDLMf4F9KlhuDeXGASIl+8azZslYma68y48m1+7nFW5rtbRNhb5z1p
iMKbUg0zuW4A4rPgb7VdKXOMmpA7HRbMS7nUYiUda0lkQOBngVrS+JGdbWLRt2bAx5BqeQ/LXpnj
PQ4GJ+ashuK0MhWaoWcA0AaOmASMK7jRNPWYBmHyiuepO2x10qfcv6vYxCzYqoGK4HVYVTJrmb5l
c6oaM5TUJ8EgGsG4kLNUHT0M64OaqMMikSRsuKbnFMRLG3zVehOaGNE445NNlnVFpDMu6uie9Vo1
8z5mOAOST2pDK91cNN+5tsrH3PrW54a06KxT7fdrlh/q1Pc+tJ6IUdZGvHPLezMcnBOWbsPap5r3
ylFtbdT1xUWNWzU0/Zbwlgfmx8zGsHWtRHmMqE59aAMyNifvHPc1f0gtPdqkY5JosJHeNci2tktY
euPnNY+oXWZEVJNrZ9aun8SIq/CzodHuriIokhDIR1ronbKZr0o6o8ipoz//2Q==`;
var body3 = `
/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAsICAoIBwsKCQoNDAsNERwSEQ8PESIZGhQcKSQrKigk
JyctMkA3LTA9MCcnOEw5PUNFSElIKzZPVU5GVEBHSEX/2wBDAQwNDREPESESEiFFLicuRUVFRUVF
RUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUX/wAARCASwBLADASIA
AhEBAxEB/8QAGwABAAIDAQEAAAAAAAAAAAAAAAEDAgQFBgf/xABDEAEAAgECBAMECQIDBgUFAQAA
AQIDBBEFEiExE0FRBiJhcRQjMkJSgZGhsWLBJDNyFSVTY3OSNEPR4fAHFjWCokT/xAAYAQEAAwEA
AAAAAAAAAAAAAAAAAQIDBP/EACARAQEBAQADAQEBAQEBAAAAAAABAhEDITFBEjJRIhP/2gAMAwEA
AhEDEQA/APqYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAKNTq8OkxzfNkisQC8eb1XtRNbzXT4q7eU2nu0MntRq/D8StMccvW29ZmdvgjsTyvZjxOLj
+s8WLxn8TFPXs6Oj9oct7c14rkxz22nrB2I49KOdTjelmszfmpMeUxv/AA28OqwZ4icWWtt/SUi4
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmdo3nsPNe0Pt
Fh09Z0+DNWL7+9O/7A3eJcZppsV5raI27esvH6jX5ddM25p79Ilo59VbUZOe2Tm/PeGvfPfT2iKR
PLv1+DO678XmW/a97U6TtOyzTbTF538/T9WjTNecm9a7126tqk3rSYxY5ta1plRZqZNXGjyZcPXl
mZmsx+qjBrsuO16xM7eXRt04JrdTltk5OWJnfaWf0a2lty5MdZnfzSn+WOHiOutFpjHa9e8bQ2fp
+alYy462pk7zXbuxjPesbRS0f6ZZV1ET1tErzXFLHo+A+1ddZf6NrI8PJHa1vN6iJi0bxMTHwfOa
zhzd61v1846utwniM6DUdb3nBaNrVmd9vjC/ZVePYirBqMWppz4rxaPgtEAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAItaK1m09ojcHnvarjM8P0vh49+a/eY8ng9D
h1fGM1rxjtGPfvbzdbjuTJxHX48cTPNltM/KsS9Dw7S49Jp6UpHaGe2vjz1y9J7LYK13vHWe7bj2
ex1tvM80ekuxW3RnW3Vm6P5jRx8H0+OYmMcb+bapo8GKPdpC6bQwtdHU8JpWkdJ/JweL6e23iU67
d4dubSqyVi9Zi0bwIs68XGp36TtEq7ZJmZmevzdbifCKWtbJinkt6eTgZPFw32t+sRurbWVzxs1y
Rv6T8V1NZNPtfq0seTm+Kevr+SZuxXjvaPiV8N4viycto9HseG6+uu08W6Rkj7UPmFck1tE1nlmP
Ld3eA8V8HVVi1pjq6Ma/pnqce/ERMTETHaUrKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAADW19+TQ5p/p2bLS4v04Zmt5VjeQeJ4bjnLqsupv+Ka1+ERLv4reTmcNxcuC
vy3l0qdI2hlr66sT02ot0ZV7qqrInruzrVZLGSZ37JjqgYTG0K5lbaFVhDT1Ub456RPweY4hixWi
eSdpjvD1eWejz3FNHWYtkpvFo9EIseb3tS3SerOms22rfpPqZKzvvHSYUz70TExG6Gdbs2rljeJ/
Mx5L0vEzPaelnOi98c9J2bFNTFpit47+a+PVUvx9T9nOIfT+GV5p3yY/ds67wvsXqpxau+G09Lx+
r3TqrEAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADV4ljnLw3U0jvO
O0fs2lWqyUw6XLkyfYrWZkHldBEV09eveG3Fq1mI3jd4vPrOIaid8G9MP3Y38k6fNrt/rMk9Ou8s
tfXXn49rGWInuy8SO/k5Gl1E3rG/fzbOe94wTy99mbRvTrMOOvNfJWsesywniukrG/jU6fF43WYN
TmtEeJtEQ06aSmK2+bNtEd+qfSO17unF9Hmvy1y13XWyVmN4tExLxVK8PmNq5NrT58zawam+m/yc
0Xj8NpRYSvQZ7xEOdqI3rPozxayNRXe0ct/ON03jmrKB5nV4q1yTO20Obmv4c+cx8HoeI6WZpNoj
q83niYmYscU0r8aJ6T1n49zeJ+Meqm1drb9J+Kd5p136StGVem9l9TbHxLDFp7W7+sS+q1nesT6w
+PcAzVjiGHftzQ+v4f8AJpv6On8jH9ZgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAABp8VrW/C9TW0ztOO3b5Nxp8VmI4bn37TWYB8f1HFtTfUfR9FWJmsdZ9I7MtJxDX5s
d8ta1y0xzteaR2277rcuhycP12SceLxMeWNpjttHwlu8I0mfQ1y+D7k5YmJmY36T36Ka43z/AF1t
cI1ds+qxVj7/AEej19PCw9HJ4NoK4OIU5Y35YmZdzVTGebVZabx5jJS+Tmns81rNLm1Wrzc9rVw4
Yibbem72mXTTS0w0M3BvEta1bWrM95ie5EanY87wXgNOL6XPfxraXLhra/W28bR/dzYzarBqJxRe
bzE7Rt5vWU9n8mPHOGmS0Ypnea1naJb+k9ncNLR7u2y/WcxXO4TOoyUrN6zD0FaW5Y3hu49FiwUi
KxCvLMR0hlW0jn6ukWw3iXjOJzbDlneOj3GaN6zDzfFOH+LE7SRGo83XNSZ2lbG2/WfdlvaT2cy6
rNFInlrv1mfJ37cK4PwTTxOoidRm2+/2/KFuyMp47XB4LivXiunrH2b2iH2qn2K/J8x4fGDNxTSZ
9Nh8OviRvTyfT6xtWI+DeXs9MNZubypASqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAOZx6/LoOWPvWiHTcf2hiZ0e8fc2mf1E5+vP/AEeuSd7RC2uKtI6QjHfeINTfwtPf
Jvty9WPfbt/lucP03gxfJf7d/wBoReYpm97zaNeLb4Ims9Nt94auDjem1Wo5PFi1onylS+1o7l8V
bxvtupjDMdNkYtXS1+Stt+m63xImEJ4xjHER2ZxMUjeUTO3VRmydBbjLJqPi08mbeVOXJPq1sl5Q
Vbkz9+rRy35rxHqzmZlVEe/Ez5LRlW5iyfR6zffaIjq1OSNZps2a21rZInafSPJhxGMl9LStLRWM
lorM/A4dkrWbYfLZC2W/7K6eubX6b4RzT+W76K8b7G6X62cu3Sten59nsm3j+OXz3/0ANGIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0OIYfpOHPijvNNo+fdvtXJO18k/
/OwPFYbz2ls3jx8VqW6xMdWPEdP9D4lkx/dt79flLLHbkxTPwY6nt2512ORTRzE2x4/dpE7cvkme
E4IrW3hRMxO8THRtU1FKWtvtvK2upx22rzRCtXkqzh2jtF7ZbT122b01ndnpuWuP3Z3+Ky20qDVv
fauzVy3mejZzNK8dVjqi87KLRLYtXruqvXzkQp7Qoid88R6rcl+WGlW0/Sa22mfhCZOq2x082ix6
jkm822pO8VrPdr4dNObVeDo8XW3uzMbzK+mvxT7szE27cvnu9j7PcNjSaXx8mOIzZevbrEeic5tN
+SZnpt8J4fHD9HXHO3PPW0x/DeBtJxx29vaAJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAKNRim9Z5e89Nl4DzXtVh5babURHrSf7f3ec1+qnDorWrvvt5Pccb0n0zhmWk
Rvevv1+cPE2rGTFNZU26PFfxwa5dVkjelI2772nZnX6bbrEUq3o0d678u8wmuDL2ittvVjXdneeK
cGv4jpJ6U56+kS7+j118+GLXpakzHaWlp9NNY3tv+bbiYiNoQy1y30uyZJlrWmZnuym6q1iIJnop
yW2Te8bdWnnypQqzZOadokiIpSZntWN5lrxki19vNRxrUeBwnNNd+fJEY6/OejXLn3Xe/wDp9wyn
E8uo4lqqxblv7lJ26T6vpD5X7G8QycKzeBMbzMRM1/FH/wA/h9QwZ6ajDXLitvWzRgsAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeL45w+dDrZvWv1OWd4+E+j2jX
12jx67TWw5Y6T2nzifU+rZ1y9eHwzDYxxEy18+DJodXfT5o96vafWPVbjyxDn1OOzHudbM0rt2UW
iI69mVtRXZq5tREb9VUoy2iIlRbJ0UX1VZ6btTLrI7V6yk62M2oisT1c7JmtkttVMUyZp6x0beDS
RWOvdKijDimvWd3G9pNRMfRcNfvZOb9Hpb0itJeP47k/3hgjaZnbaP1XxWW3T0movbNS0W645nbf
0nrMPpXs3xamoxdJiLbe/X1n8Uf3fKsOTw4jbaXo+EarJhtGTHMxeJ6xH7Sti9Zaj6x3HM4NxXFx
DS1mtoi8dJrv2l011QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AGjxLhODieOIye7kr9m8d4eM4to9RwjPXFa0ZIvG9bR0fQXmPbDFvTTZPOJmEWS/V8bs9R43NxLL
G8eFbePg1bajU5/s0l1ceKLx1hbjwRE9mOpx0y2uRTSZsm3PMw2aaKtIjo6kYo9EXpET0hVLXxYK
xC6MZvyx1lFs0RHfaPiCnU12pLyHGNDbUajBekWma2npWN3p8+opa20e9LSyZLxExTlpM+vdOdcZ
a9tPS8MyUvFrzWlI6727u1pYxYrbVmb7x+TQx6au3Nqcl7/0rcmW9axGnwZJj1novmxnZXV0fFp4
ZxLBPgTGK8xzXr5fOH0bFlpmxVyY7Rato3iYfNuG2x56Wrqa8s2jz+7Lu8O12bS6jkwzN6THNNI6
tvrN68Y4rxlx1vHa0bskAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAA4XtTTm0OKfTJ/aXdcL2pyRGjwU362yb7fkJz9eTxxyZJjyltRXzUZK7TFtl9Lbwy06YzrHwa+
fJFd/wCVt8m0bQ0eS2qzcm+1K/an+zNZFL5M1pjFXeI72ky48eGnPkvNp27+TPU6nHpMfLXaIjpE
erk5dRMxOfN1mPeisfshW1ne1a1577Y6x5R3U0zze31FOWI6ze0byU098kRlzbxM9qrMlPDpyRMR
Md5Vt/Ihp5898mWZm1pjftE91uCt7fCI7dWeHDEW3t723l6rslqxWZnasR+SYhFbzhnfxJ2jyeq9
lcGXWZcmW0zWKxHLaI7794eJx5fpfEKabT8t8l5isddo3l9S4VjrwrRUwzSJt3tav3pdOL6Y6dXD
j8HFWm+/KsU4NRXPvtWazHquWVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAa+fXYNP9u8b+kdZBsDkZOO135cWOZn4y5Wu4xqctbe9y19Kp4njt6vi+PDm8DFMWybbzPlV
5PiGtz67UxbNbeKTtWIjaIXYpnwuaftT5tXJT3vmi1pMsrU5qIrG1V1a+5DCa7b9GFbRr5J6Wnbt
Cu+Wmk0m8956z8ZWZNorbfzcbX5rZslazPux3hUt41NTntktObJ13+zX1bek01r4/HzVm0bxPXy/
+bNfDgjVa2uOY92kdfg6ufJOKvLXtttVVSqbcta2vM7zXtHpLQy5ZtMd+vWd+7Zy3mdJHXra3f0c
vUarw7zFY5rT2hH1Lavnrgx81p3U49Pk4nE5L35MO/StfNRXR5tXnrS8W67WvfyiPSPi7uLHFK1p
jrtSsbR5Lc4RzsXBaYreP4l45esRD2HD9fnw6evvWvO3Tfr0aGk0U55ra0TFInv6uzgrXFXlx0i0
77RPlC83Yj+JW7oddqr6vHzTTw9/f6dod+L1t9m0T8pcbFSmPHER3892W0zPuz+jSbVvidkcqmfP
Sel7bekrI4n4dZnPWIrHeYnZee2Wpy8dEaml4npNZblw5qzb8M9JbYgAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAABEzFYmZnaI7yCXL1XGa0jJXT0571nbee27DiXEprp8nhbxG20W8
5cbD0ikfnKO+urTPvjoZdXqctdsmTaPSvRpWmsdZ6yztfaGplvv3lWW1tyRlz1x0vkn7Vo5atTNe
Y0+1o79V2KsZsvX7Ne5mwxnyTNvsx2iGneM/rCdRSuOsTasTt5kRFtpjqmOH4t4nk7estiMNa97R
Hwhna0iuKTEdmGWa4672nZtRele1N59Zlq6vLOSsYorEc07qcW65euzRvtXvPZy52naZ7ujr6fXV
rWdukREK8+njHgmZmPc67bq6ivVWhxxgxZLztNrT1mZ/SP4VZs0zaOvfp84WUtNsXLvtv3699+rU
z7+Jtt5qURqMnPpctaR1rMSw4ZoK57eNk6xHaJRh97Ltt7lo5Z+L1HAPZvVauZ2nFTSzMTzeJEz8
to6xPfvsZntPZ9rXxabmxzefdrv0j1dXh/BcmstW1qxTHHasR3+b0GPhGl+kWmd64dNEVjf73T7X
y8vy+Ddx6O3iRakxTH5RXrMw1/lX+3Itw2MFIraN48qRHdZi0cUjmmPen9noox1iO0fNzdXEYrTt
stcmd9aX0bJ+HePmiKTitO8TMLZ1cVjrMfqpz6ys4pjfrPRWZ9rXXptUit6zO+23VyaRHEc05L1/
w9J9ys/en1ljqdVbwYw452tlnl3jyjzbmmiMeKtYjpEbLeTXPUU8ee/+qjJpsV5rbkrFqzE1tEbT
DpYNbW21Mnu29fKWna0KbqTdjXXjld0cvQ63ltGHNPSfs2n+HUbS9c2s2UASqAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAOVxPWe99HpP8ArmP4b+r1EabT3yT3iOkesvMVtN7za07zad5l
XV5GmM9vVfEstvDx0jtaVVMlq+UJ18b5cMRvPeSuK87bUt+i2Z3PtG7zXpjkzXt6R+TXyTMzvM7t
ydHqZ+zhv1+Cv/ZuqvPTHMfOYaTMil1a1K2vHSLTELq2v+KWzThGo84rH5rq8JzedqR+ZeI7WnOS
34pYTafWXR/2Pln/AMyrKOCWnvmiPyR6O1y9585lhWJvl557Q6eo4T4dYiMvW3b3UanhldHpJtGX
e09unmjsT7eb1l4trI2t0hsZfrdNO0bzy+nzU20/+NmkzO9esz+TZxWis9dttvPv+Tn21jjaW8zn
26bTG3mp1M/Wzv3t0jyWXiKZJmsTERaZhXXDbNl8WaztWenxZLstPp5pau8frDtVrNMM5cfTfpMf
3aunxxbes9d/R09Dp8ebJi09ptFr3jtt2WyrW9wy1Jx132mK+Xq9PotT0iIU19ntLtExa3T47T+q
6nBaYvsZstZ+cT/LeMnUi0TXffo1s2m8Ws2/OIMWk5Jib5L328rS2t94Sh5TV4ppklpW6PT6rh+P
NbebTHyas8E081mZy5P2W6OFhjxNTE/hr/LoRO0Kvo9dPqctKzMxEx1la5t3tdnjnMs4noievcrO
yZjeFF1OSnNV0OG62cn1GWffj7Mz5w05joovzY7xes7TE7w0xrjPeex6Ua+j1UarBFu1o6Wj0lsN
3JfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrU5o0+nvlt92P3BxuM6nxNRGCs+7Tv8
2hToxm1r3m9utrTvMsonqyt7XTmcja0u3O6FMfi5t/u0/lzdJM81p9O3zdvHTwsUR5+bfPqOfX1h
dqV+3O7bs1+T31oqmI3TEM4rvCdkDGIIhlFd2daboS0NXG2bD6bufxXU1vlmu/u4us/N0+L1tTSx
kr9qk7w89j1FNZMV3jxLzvaJ8mer+LSOZqK2xZotbvljfr/89U453rXt9lse081xZtNjx7TGKu0t
DHlrevSevaN5Y6+tJ8c7VRNMt63n3ub+6/R54rERMztDYy4a5omclYmfxKcenrjtHLvtPrCnVmdb
eFe3JXmjy6eS/DrMuLVYsta9Mdt++6qLxO+0dEc8UmInr18iUfReHcXrqccb9Z27Q61Lb13eJ9nc
1Z35rTvE9avY4bTkpG8xEfB05vYxqybc07R281naGMREdoT5JQqy9mply7Q3bV3iXG1eXw7TWSka
c258t7+tpT5/BjT7MfHqndz12Z+M4lMMKyziUJJiN1WSu9fku23RaOgKNJqbaTU1t9yelo+D0cTE
xEx1iXmM1Nt3W4PqvFweDaffx9vjDbGvxz+TP66QDRiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAOJxzU73rp6z296zsZMkYsdr2naKxvLyObNOfNfJbvad1dXkaeOdpvsc2yuZVzfbfqybutwu
s5s8R92J3dvJb3tnO4HSMegtmt3nfZvYp8SZl0z45NfSK7onH1bNcfRFqnUKJr0Y7dVtq7prjEsK
0XVpEM6028mW20IHK41aPo3J6zs4ODhdcvPnvExFevNXpMOrxi/PlrTee7PLX6Pwa09uaNlKtHg9
dM3z5d7ReOu02nu0JzZMfblrv5R5uvrcdImZ26T1mYhxs1Os7RH93PZ7axuafNfLitvbaYU3yZYt
PXs9NwHhui1HBa5LVicsb81onrEuVqNNSuS8Y67dZ6xPZa59Il9uX41vEitImZme3q2Kxbxora0T
Md/ROSa4Ztkj7c9OafL5LuGYubmyX3iu/TfbdSfVnpvZLT/XZK233+Mbbva1xRXyiPk8pwbH4N6T
adq5a71n0tD1WDL4tPe6Xr0tDpz8YVnJHWEXYxbqlBedoef4tW0XraO09HdyztSZcbUz43C+ee9b
SVMaeOfqq7+jGckQ1Yz7+7v2RN/WXPXZPjci2+2yyJaVMuy+uSJlA2d+pNoVRbeDcSxyTE+TDDlt
pdRXLTynrHrDOyiyZeVFnY9TjvXJjres71tG8MnJ4Nqt4tp7T1jrV1nRL1x2cvABKAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAHJ49qfD09cNZ97JPX5PPw2uI6j6Vrsl/ux7tfk1mWr7dOM8iLdm
vfebREefRsWldw7SxqNbWbR7lPesrn3Vteo7dYjDpMGCvfbeXQ0uLlxRLRxROfUc34p6fCHYrXlr
EejqrjY8uzCYW7MZjdVKqK9VlaxCYrsnYExBMRMJRPZA8/xPHtmpP9W2xx76vhWOInvt/C7ike7N
vwzE9kcapGfhlevTaFbFo8RqJ5vy8/RoW09ek0msxHfp3dzNoLzp4zUmZpMbT8HJyYJi20X2n0lh
ZY1li/RaidBF4w2mK3jrHaFGp1lN+tptPp5IjBkid5mIp16TKu0abBPv33vPlM7z+iPdFNcWXU5I
tkrNce/b1W5db1nTaf3ax9q0fxDW1ebNk2phty1mOu09VOm8W19orEz23j1TwfSeERFuEYMddptW
d43dvBn21eKJ75KbW+cf/JcTgMxXTb3nbljz+TpcPmc2uyZO1KRtVtGVdi0bx07qJnllsRO6rNTe
N4XVamsy8mnvPwc3R2jPwe8TPbdlxXNOPSZfhWWpwO85OFzv57qrODkzeHntSe8Sn6Rv0a3EZ218
8nXekfr1a0ZLVnqx19dWb6demXybOO7lYMvNMdW9S/VVLo0us7tPHdtUtEwJiZU3jq2Jhham8CVG
PNODNTJXvWd3qcWSubFXJWd4tG8PK3pPd1OB6veLaa89Y61/u2xfxh5c/rsgNHOAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAANLimq+i6O0xPv392rdeZ4rq/pOqnlnelOkIt5F8Z7Wj27I2I6sb25YY
V1ImY3dbQ08LRc23vZp2j5OJG+XJWle9p2h6HHtbJXFT7OOIpX+7TxT31j5rycdTh+Dpz+XaG/sw
w18PHWseULN2trBE9UcrJKBhFU7JAQi0dEomegNDUYovM7x3jb5tO1ZvpbaTLtzRExWfWPJ08kbT
Ex5NXWYYyV5omYtHWJieyeDzuizfRs19Jn6TM7Ru1uMcJxZqTkw+5f4ebqa7SV1MR4tdrx2vEfy1
axqsNOTLjnLXytVXi3Xj8+nmsxTLM16d5npPyUzpekTtSK+U7vS6vQ/SYmK1vWPS1HOn2dvvvvE/
tDO5XlcO+LbfHSd/W3o6/BdDOXPTnj3Kz38rS6Wm4FNrRyRzTH3p6RH/AKvR8L4dXSzE3jmtHn5I
mbfqLV+m4dbLSsZInHjr3iI6zLpYaxS01rHuxHRHiT9mv6s67Vj1aqL6326MrWiYa+/Q54BxPaGe
XRZpj8MquB4+Xg8zPnB7SX30to379GxpK1xcHiKz5IS8xr8PLPixH2bftLTy05o6dHYyVjLhy0t1
izjZa3pMVv3iO/qz1G2L+NbSajbNyW7xLsY8kTDz+fJXFqKZN4iZnafi6WHL0iYlStI7OO+7axW2
crFl7dW9jvE9ULN+J3ZbdFGOy+AYWpEqN7afNXLj+1Wd23KrJVMvCzseh0+auow1yU7WhY4fCdV4
OadPefcvPuz6S7jol649Tl4AJVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAV581NPhtkvO0R+4NPi2
r8DB4dJ9+/7Q83Po2NTqLanNbLfvPaPSFDHV66sZ5ET0hRknyW2lTtMyouz0c8usx2n7s7vScKwx
zc1vu/y85p+maJh6Th+SOWeveXR4/wDLm8v+nX5mUWa9bbrInolmu5jdTNkxYFk2Isr3TuCzeGMz
+THdEyDDJO9Ja823rt2XWnya946pGvktDXta0ztWu/ybvLE9dkcoOf4GbJPWK1j49VmLh9JtE33v
Mevb9G7WsW8l1ccREISophiJ2jpDYpijbaOjOuOJ8ujOdqxsgVcsUjaETYvbaFFrgu5lVsm0yUtu
ryg43H5m+GIj1XcJzePoL4pnrWGtxmfchr8JvfHS1622if3QljzTTLes+qrNjrkiYtCzPMxnm095
YZJ6boS5teB49Tqscza97VtvWvlv8V/FOF34RrIxTM2xXjelp/eHoeA6XnzReY3ivX/0dfivDcfE
9HbDbaLx1pb0lOs+jO7K8Lis3cN+0NKcd9PmthzV5clJ2mF9J9GHHVL108dm1SznYr/Ft0tuhLb8
mNohFbMhLWy0mJ3rPXvDvcO1karBG8/WV6Wj+7kWrvDDBlvpdRGSnbzj1hpjX4z8mOx6UYYstc2O
uSk71tG7Ns5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ2jeXneJ62dVl5KT9VTt8Z9W9xbWclPo+O
fft9qfSHEU1pv48ftYST23ZTDC/p0YtlVuvVjMbM5+LCZjYGWGdrTPxiHY4ffaf3cjTxz1v6xMS6
Olty2iXVj/Dk8n+ndrkhnGRo1v8AFdW3RCrZ5uiYsqrboncSu508yjmZRYQt50TfowYTbYGVrKrT
uTZjvukQnYhMIGVY2ZxPVWyrHVCWzXpVXkt3TE7Va+W4K7X3jv1auTNy3jdba0RZpamfroQN7Hk3
6wr1GTaN2OOJiu6Mu98NvgDi8Wy74d/yZ8PiPAiO2zU4nb6qIn1bugjfFE/ASp1ke9u15mbbRDZ1
Mb823kx0Ontn1OOkedoJCvT8I03gaKsz9q/WW+isRWsVjtHRKyrhe0XCfpWL6Vgr9fjjrEfeh5fF
feH0V5Dj3DPoOo+k4a/U5J6xH3ZZ7z3228evytOk7NvFbo0cdols47bSybt7HbddHVqUs2aW3Qnq
xVeu8LILR3SlZw3V/R8nhXn6u0/pLuPMXjeHT4Zruf6jLPvR9mZ8/g1xrvpz+TH7HUAaMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAABRq9VXSYJyW79qx6yvmdo3l5viGs+maqYrO+OnSvx+KLeLZz2te1rZL2v
ed7WneZYWnZl5K72YV1xEyxmeqJljzIEWlVkszvbZp5soN3h2SJz3pP3odCnuWmPRxuERfJrZmtZ
mtY96fR28kbX3dXj/wAuTyf6bmK+9YX1s0cNtm3Sd4LFY2K23W1s16StiUJW7bp22RW3RluBuruz
mWEgrmCGWyNkoExKE1QlPmsqRDKeyBjaejWy2W3ttDUyz1QKslvehVqKTNosyyTvELabXptIJpaP
B39Ia2mz+JGpr51jdZefDx2hzuHZObNq58poJaGtjxJ2+LoaKP8ADRPo5+T3skx5OhpOmC0fBNQ0
5yTbn+bt8A0u9raiY6RHLVwY62mI6zMvaaHBGn0mPHt1iN5+aYVsACBXqMFNTgviyxvW0bSsAeE1
mkvw7V2w5Ote9besJx2er4rw2nEdNNekZa9aW9JeQjnxZLYskTW9Z2mJY7zz26fHrrdpbZsY7NGt
mxjvso1b9NmUwpx33XRO4K7VUTE1nmrvEx1bVo2VWiJE/XY4frY1WPlt0y17x6/FuPM0m+HJGTHO
1qu9pNVXVYt46Xj7VfRtnXXL5MfzexsALsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHM4jxOMFJphmJv529Dq
ZLfjDjPEIx450+K3v2+1MeUOHSOWFc3nJkmZnf4yujpVlqunOeFpV2nctLCZUXRM7MJtsWlRkv3Q
ky5NmpWt9RnrixVm17TtEQnJabXisRMzPSIew9n+CRoccajURvqLx5/chfOest642OGcIpoOG2w7
ROW9d72+LQvXevyejcPUU5M+SvpLeOataraw2a0dLbLqTtK1G3Es4lVWWUSoldFtmcXUbpidgXzK
GEW3TuCUSncnsDFMMLSms9EC6J6FpVzbZE5ALy0809ZbFr9GtfrEoFMzuuwz0Ueey3HbaBLDXe7i
tMOfwWnP9I+NZbuttvhs1uBRtXPb4SDm3iIvf57N7Dbl0VrS5+XrltEd+Z1Jx7cNms9N4TURRw3T
+PrcO3WszEvZOD7P6aYiMlvu16S7y1QAIAABxOPcLnUY/pWCv1tI96I+9DtgmXl68Biy7/NtUu3+
O8HnFa2s0tfd75KR5fFyMWTdhrPHVnX9R0cd21S3Rzsdm1iuqs256wrmGcT0RYSx5d047X02SMmO
esd49YRE9WcdSXhZ2O1p89NRji9J+cei1xMc3wXi+KZj1j1dTTaqmor06WjvWW+ddcu8XK8BZmAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAMMmWmKu952UZ9XFZmuP3revlDTtzWnmvO8q3XGmfHb9ZanV3yxtWeWn7y4es
vPNtDqZJ6Ts5mppvdl/XXRMyfGvSNlu/RVvtOzLfoipLT1VTKbSpvfogRkvtDVyZOhkyvQcA4Dzz
XV6yvTvTHMfvK+c9U3rkW+zvA/D21urr789cdZ8vi9KDb45rejl8Rry6iJ/FV1HP4vXbBTJEfYt1
+UpiHM295bXsqrO9l8QkZ0lZEqqLeyBZHZLGvZkhIndADKJ3TMoqWQMZ6pjsxll2jsCLSrmU2lFY
36gieyu0LJk3jbsga0wdqzK20QpyztQGprL/AFMrOE05NLkt6qdVWZxNrSe5o9vWBLiUjnzXn0vL
q555dHt8HOwV928/1z/LpzXxbYccRvzTB+jucOwxh0dI22mY3ltIrHLWIjyjZKyoAAAAACJiJjaY
3iXleM8InR5J1GniZw2n3oj7s/8Ao9Wi9a3rNbRE1mNpifNFnVs65XhcWTdt47bnFuF24dm8TFEz
p7T0/pn0a+HJux1OOrOux08d1ndqY7tillVkzExLOk7yd4YxGwluViJhE45raL0na0dtlWO0+bZr
1TKi+2zptZGTamT3b/tLacvJjiY3XaTWdYxZZ6/dtPm1zrv1z78fPcbwC7EAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhkyV
xUm152iAZWtFazNp2iGhm1Vss8uP3aevnKrNntqLdelI7VRHRnrX/HRjx/tZREVjZXeybW6KbWZt
pCZ6S08tN7Nmbb7zCrJtyoS5145bSx5mWafelr3tsKmS/o08uXyhlly7RPV2+AcBnPNdZrK+53pS
fP4ytnPVda4y4BwHxOXV6uvu96Unz+MvVxG0bQRG0bR2G0nHLb2gCUDX12LxtFmpHeazt82wT1gH
mMN4tWs+rcr2aEV8DU5sM/cvO3yb+O0csLUTSdrLphRE8tlkZI7Atr2ZMazDJVKTYSCawi7Ksq7z
1QERvLK3ZGPrKbyCrbdnMcsbeaa18/RhvvM7oGEwTG0JmYYTIML22a2e28xELM19oURPNO4lOem+
n3ZY5+prVnMc2GYU4/L4A0a15cNf6rz/AC6fC6+NxCPOuOu/5tHJTbHj+F5/l1+BYumXJMd9o3/d
MRXYASgAAAAAAABhlxUz4rY8lYtS0bTEvH8R4ffhmo6bzhtPu29Pg9mq1Gnx6rDbFmrzVsizq2df
zXkMWTeIbNL7tbXaHLwzUctvexWn3bmPL8WFnHVL326VZ91MfFVjvvVlz79kLrcf2m7j7bNHH3bl
J2SirLQoy4t1++7G0dBC/RanxI8PJPv18/WG241+alovSdrV6w6mDNGfFF4/OPSW2b1zeTPL1aAs
zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAVZ9RXBTe3WZ7R6iZOpzZq4ac1p+UermZMl89+a/byj0Ra9815ted59PQ32hlrXXRjH
DpCLX6ML5NlNsm/ZRqstfdXzbsZt06sLZNvNB1Za8RDWyZdo7q8udq5Mu/mIMt4md2lmy7JzZuWJ
dHgfBL8RvGo1MTXTxPSPx/8AstJ1XWpIs4BwSdbeNVqq/URPu0n73/s9hEREbRG0QUpWlYrWIisR
tER5JbSccur2gCUAAAAPM8Sry8Uyz67fwuxbzVPGsE49XGbvF42V4M0TEL33ERnktsxpk3sumK2j
admFdPFZ33VS2Mdui2J3UU6LYlFSsN2O5NkCyJ6K7T1TEsbAsxdpReerKkTFGMxvYEz0rsqtbbpC
b2VT1QEzuwtbaGUxspuJU3neWdKoiu8rq12gCI92YatLcublnzbEz1aOptyZqTuDHLfxN6R0+t5X
qdJhjBp6UiPLeXl9NSMnEKxHa1+bb8nrlvxUAAAAAAAAAAABTqtNj1eC2LLXeto/R43VabJw/VTh
ydY+7b1h7ho8V4dXiGlmvbJXrS3xRZ1fGv5rzeHN02bEW3cys3xZJx5ImtqztMS3MeTeGFjqlb2O
8btql3NpbZtYsnSBLeiWfdTjtutid+ghherHS5p0+f3vsX6T8Fkw181d4lMvEWdnHaGnw/UeNh5L
T7+PpPxbjdyWcvAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAo1Oprgr63ntAmTqdRqK4K9etp7Q5d7Wy2m953lNrWyWm953mVd77R0
Za1104xxlN9lV8qnJl2a9s3xUXX2ybsJyRDWtl3YWydEC+2VRkzeW6q+T4tbJm+KRdfK1cmWZnlr
vNp7RC/R6HU8SycmCk7ed57Q9ZwvgOn4fEXtHi5/O9o7fJaZ6z1uRyOEezVstq6jiEbV71xevzer
rWtKxWsRFY6REeSRrJxz22gCUAAAAAANbX6aNVpL0npMRvWfSXlKamsRMVvXm+EvZXjmpaPWHzfL
oNRjzXicfWJ8phfPxFejx72x7xMzK+sXiNoiXlq+Pi6fWV/VfTNqfLJl/WTg9Pji8R70LqvMV1Gq
j/zcv6yz+lanzzZP1lWpelTET6S81Gp1P/Gyf90s412rjtnyfqql6asREdWM9+jz9eJ6yP8Az7uh
odZqMt458tpB1JvEViI3/RhzRt13/R1MNaziiZiJn5K9ZNceKZiIiQcu/WekT+iYrWI3lzdTrs+8
8uW0fJzcur1Np/zsn6g79phVaIeetqNR/wAXJ/3SwnUaj/i5P+6UD0ldonum161h5mNRqP8Ai5P1
lNtRqJjacuT9Qd22WN5aGeZyZd/KHJy59RHbLf8AVq31Gp/4uT9ZEvS8Lr/vSs2npzRtL1z53wK+
oza/HW2XJNd99pmX0Rb8VAAAAAAAAAAAAAAcHj/C5yV+l4I9+v24jzj1cLFk8nu5jeNpeW41wmdL
knU6ev1Vp96sfdn/ANFdTrXG+eq1q5F2LLtbZoY8m8d11bbSydErsYsm+zZrO/zcnBm226uhiyRK
EtrvCrJDOJTeu8A1MWX6Lqq5N/dnpb5O5ExMbx2cPNTeJb/DM/iYPDtPvY+nzhri/jDy5/W6AuwA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAa2p1UYo5adbz+xbxMlvqJ1OqjDHLXree0ejmzNrWm953tPmTPWbWneZ7yoy5YhjrXXTjH8s75N
mtkyxt0VZM2/m175N1V03yTKubMLXVXybeYLLX2VXy7eam+b0bOg4VquJW+rry4/O9uyZOq3UjVm
9r25axMzPaIdvhns1kzbZddM0p5Y47z8/R2+HcF03Doi1a8+Xzvbv+TotJnjDXkt+K8ODHp8cY8N
IpSO0RCwF2YAAAAAAAAACvUZYw6fJkntWN3k8dfHz2vLucdz8mkjFE9bz1+UOZosX1UzPm0nqI/W
MYo9FlcPNklfFGeH/NshLGun+Cz6PtHZtVZWlRLS+jxPkRpIn7rdoupHTdA5s6SI+7H6Mfo+32Y2
+To3neSIiZ7A0IjPXpXLePlMotGW3272t85datKzHZjbTVnsDj+FG/2Y/RlGP4R+jo20u7H6N1Ql
o+H8I/REY957R+jpfReiK6eOYHLtj2tttH6KrY/6Y/R2c+kjeJiFVtLG24hxpw7/AHY/RRkw9O37
O99Hrt1YX0tfOBLjcGp4XF8c+u8fs9c4dcVcGemSI61nd3IneN1orQAAAAAAAAAAAAABFqxes1tE
TE9JiUgPKcX4RbRXnNgiZwWnrH4XPi28PdXpW9JraImsxtMS8pxXhF9DecuGJtgmf+1TWW2N/la1
L7N7T5e3Vy6W3hsYcvLbqzbO9jvvCzvDR0+XeO7crO6FmGSvRThy/RtVXJ92elvk2rRvDUzU7pl4
izsd2J3jeBpcNz+Lg5LT7+Pp+Xk3W7js5eAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADs0NTrN96Yp6edkW8Wzm6+LNTq4pvTHO9vOfRoWtt
1mes95YWvs1s2fZldddOczLPLn2ju0MmebT3YZc2/mpm3qqllN1drsbZIhr3yzvtHf4AsvlYYseb
V5Yx4KTe0+UQ6nDvZ3UazbJqd8OKeu33peq0eh0+hxcmnxxWPOfOfm0mP+steT/ji8N9mKY9suum
L37+HHaPm9DSlaVitKxWsdohI0Y22gAgAAAAAAAAAABXnyRhw3yT92Nwef4xm8bVzET0rPJH5d12
CvLhho3rN9RWs9Z23n5y6O21YhrVYbdGOCfrrLPJRpv863zVS6FS09SvZj3lVZZRdPSqmnSWdrIE
ebOkK4ldTsgW1WKqd1oMZhEVZyRAImOjGI6rJ7IiATNd46qL02bHkiaxaoNGY2n4ImPgtyV2n0Vo
Gvlx7x2beiyTk08RPevSVUxux00+Fn2n7N+n5rRFb4AAAAAAAAAAAAAAACLVres1tETWekxKQHlu
L8InR2nPp43wz3j8P/s5dLveWrFqzW0bxPeJeV4xwmdFec+CJnDM9Y/CrY1xv8qvTZ+WYdbDk5oh
5zHk283U0eo3jaZZ2N5XYjrCnLSJhOK+8d1kxvCqzSwZvousrb7k9LfJ3nB1OLeJdLhufx9LEWn3
6e7LXN9Ofy5/W4AuxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAETaKxMzO0Qi9646Ta07RDmZ9VbPbaOlI7Qi3i+c3TPUaqcu9adKfy0722ZXvFa9
XO1OrjrESxt66ZJmcjPUanlidmhkzTZVfLN5VWvsC2b7R3U3yqrZZtO1esz2h2+F+zWTUcuXXTNM
feKR3n5+iZLVbqRzNJo9TxHLyaekz62ntD1fDOA6fQbZL7Zc/wCKY6R8odLBgxabFGPDSKUjyiFj
SZkYa3aALKAAAAAAAAAAAAAADQ4pl2pTFH3p3n5Q33E12Tn1eSfKscsLZ+orS00eJqbW+Lfnu1tF
XaJnZsz3WpCfsyp00fWSvmPdVYOmSUDd8kR3InoQosy7JmUX7MdwZ17ro7KKT1XRPRAsrO0rYndr
79V1ZBaQiJ6JgCSIJASwrO07MpV2nqBlrv1a1o2bf2qtfLXaQUTO0sb05o3jv3ZXhjS20xEphW5h
yeJjjf7UdJWNKLziyRePsz0lux1SgAQAAAAAAAAAAAAAADG9K5KTS8Rato2mJZAPIcU4ZbQZuekT
OC3afT4NXFkmlntc2GmoxWx5K71tG0vHa/RX0GpmlutJ61t6wrY2xr8dXS5uesN+tt4ef0eaa223
2dnHk3juyreM81OaFGiy/RtZET9jJ7s/2bdutd2jqKeic3iNTsd8a2h1H0jTVtP2o6W+bZbOO+gA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABje9cdJt
adohGTLXFTmvO0fy52bJfU23t0pHaqLeL5xdK9Rnvqb+cUjtCi94xxvK3JetKuHrdZvaa1ljb10y
cnIs1Wt3naJc++TmVWvMz1YWybfMGdsm3eWek0mo4jm8PT0mfW3lDf4V7P5tdMZdRviwfvZ6/TaX
DpMMYsFIpWPTzXmf+steT8jn8L4Dp+HxF77Zc/4pjpHydYGjC3oAAAAAAAAAAAAAAAAADG9opS1p
7RG7zszN6WtPe0zLua+3Joss/wBOzhzG2OsL5+IrY09dsSyYRijbHEMvOChb7KjF0yS2LQ169Mso
S24noyrPVXWejNVKbTuw3T3REdQWU6LYlVvsyiUDPfqupPRr79VuOQX1lZEqoZxIMksd0gT2VT0l
bPZVbuCaW8i8bwr32WxbcGnkjaZa9p2ndv5qbw5+aNugLItF6TEtvTX5sMb969HMpfazc0d9stqe
vVZDdAQAAAAAAAAAAAAAAAADV1+iprtPOO/2u9bektoB4TJTJpNRbHkja1Z6uto8viVht+0HDvpG
H6Tjj6zHHvbecONw7Ltfkmeqmo6Ma69DXbbZTkr1mGWO3RneOaGbZRoM30fVzSelMnT83aef1FZ7
x3h1tBqfpGnjmn369LNc3sc3kzy9bQCzIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAa+q1dNNXr7157VhGp1Xh70x+9f9ocy283m1p5rz3mVbrjXHjt91lz
5c9+fJ1nyjyhdM8lZlOOIiqrUXikd+kMreunnI5XEdX4dZiZcG+XmtNl/F83PeeWWHDOGanieSKY
q+5H2rz2hMzWd1Iqx1yajJXHhrNrW6REeb1nCPZumn2z62Ivl7xTyr/6uhwzhGn4Zj2xxzZJ+1kn
vLoNJnjHW7TbbsAszAAAAAAAAAAAAAAAAAAAAaPFrbaSK/itEOXt0rDf4xb/ACa/GZacRvaF58Q2
IjasQnzPIhCU92tMbZGzHmotG10C6nZkwpPRmipIllEbMIZIE7solgmJBnCyk9VMM6z1BtVllEqK
z0WRILYlluriWcSDJVbusV27gwInaSWM9ECyZ3hqamnSWxFmOSOaqRx725bNnSZNs9J+OynVY+WZ
YYr7TE+nVaIr0Ais81Yn1hKAAAAAAAAAAAAAAAAAABExvG09peU4nov9n66L0j6q/WPg9Y1OJaON
ZpL0+9HWs/EWzeVz9PbmrEtnyc3h9reHy26TWdnSr2YX6657ijLXpLX0+onSamL/AHJ6W+Tbv2aW
ekTv16JzeI1Ox6KJiYiY7Slz+E6jxdN4dp3vj6fl5Og2clnKACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ2jeQRMxEbzO0Q08uqtkma4ulfO3r8lefUePMxWf
cjy9WvlzVxV6T1Z61/x0Y8f7Wc7Ur1lqVy+LqOWJ2hp6rXddon5rOF1tfmz5OkT0qzb8dWbxjp1c
biuuilJ5Z6r+IcQrixzEy8zl1E6rNt1tMztFY81sztU1eRucN4ffi2p5esRM72n0h7rS6XFo8FcO
CkVpX082nwXh3+z9FWLxHi36328vg6TZyW9ABAAAAAAAAAAAAAAAAAAAAAADj8Unm1tK/hqppHvw
y1k8/EMk+m0GOPeafiFpCZYwolnXspvHvLa9mF46gmnZmwozRUiUCBKYYsoBLOFbKAX0llEqqyzi
QXRLOJVRLOOwLIljZMEgrlhKyYYTAK5nZPN0RZjugUanHzVlz6xtLq361c+9eXItPpXX0dubTU+E
bL2lw2++O1fSW6m/VYAISAAAAAAAAAAAAAAAAAp1GbwcfTreelYEydcuMcRrM/L9nnlsV6wqpi2r
tv133mfWVkRyRtEdGFva7MzkYZNoamWN4bV4mYa9qztKIujhVppxGI8r1mJegeZpknBqKZY+7L0t
LRekWrO8TG8Ns/HJ5ZypAWZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAADS12fp4VJ6z9qVuq1HgUiI+3bpDl589cOKZmevqprXPTbx477rDJlrhr1nq4+s182tMRP
RqaziXiZJrWekNG17ZbxWJ336M5LXRbI3dLTJrs07RMY6fan1dHLrowY+X7MVjt6N3R6Kul0EbWm
s7bz8Z+LnabQX43r7Y53php/mXj+Dnv0f1JO1x/8ZxbUzj02O15mfLtD13AvZqnDds+pmMmo26el
XX0Wh0/D8EYtNjilY7+s/NstpOOTW7QBKgAAAAAAAAAAAAAAAAAAAAAADG88tLW9I3BwJtz6nNf1
vK/DHVqYJ3pzT5y3MPZeojOWMQylEKpTVjZnDCwkqzYQyRRICATCITAJZQxhMAshnEq4ZQC2srKq
qrIBZCWNZZgwswmFloVyCu0dFcx1WyrtCBhv5NTPHXds2U5o3hIz4ffbPt+KHUcTSW5c9Jme0u2v
VYAKpAAAAAAAAAAAAAAAAYZctcVOa35R6tLrltN795/YvknNqrfhpPLH92V5isd9mWq6fHjk6rn0
ZxG8KK5Jm/wbVZiYZtqrmkqL023bkxvCiY3lJHNyRG81mHS4Rn5sNsNp64+3yaWaNrzOzHBl+i6q
mT7s9J+S+ay8mex6EIneN47SNXKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAImYiJme0JafEs3h6fkidrZOn5eaLeJk7eOdm1Hi2vmtPTry/CHmOJcUvmvOPF1n09Pm
6HF9ZGm01qxO3R5vSY7XwzmzTy47zzTEd7en5Mfvt2/PURWdo3tvPrPlKymbktFqTtMTvHzbOLDG
f63JXbFX7FdnoODcDprZpq9TjiMMTvSn4vj8l5fxnrk91saPSa7i2hpOfbTVt5x1m0fLydzR6PDo
dPGHBXasd585n1lsRERG0dIF5OOe6tAEqgAAAAAAAAAAAAAAAAAAAAAAADX11+TRZrf0y2Gjxe22
gtH4piP3TPpXKwxtjhuYo9xq442iIblI2pC1RET2ILd9kxCqRjZmwlCSEohIJAQAAJZISDKGUd2M
MoBnVbVVCyAWVWeSuqyOwIlXZZKue4MJV2WWYT2QKbKL9YlfdRdIo35b7/Hd3KTzUrPrDh27uxpb
c2mpPwX/ABX9XAKpAAAAAAAAAAAAAACekTIp1eTwtJmv+GkyJn1oafeazbfpMzLR4jq/o8b823zX
6XNF8ERCvTcNpxLV5LauvPhx9Irv3lhztdtv8TtaWLicXrt03jzjzb2k1nid56ty3s/w+a7Uwzjn
1raejlarhmbhl/FpbxMO/fzj5p/ixSeXOvTtRfeI280ZI26tfDm3pWe63LaZx7qtGvniJ6tPLvOK
fOa9WzbJvTbza02jl3n5SSljscK1MajSxWZ96nSW88xw/VfQ9XMT9nfa3yemid43jtLeXsce88qQ
EqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADia3UTm1l4j7OP3Y/u
7Vp2rM+kPJW1PhYcmS0+9MzKm/jbwz31weMzbV8UppazPL9q0/BF4rk1GLDSNqxPWPhCnHmnNrtT
qPKteWPm6U6OdHaZvO+SaRNvhv12Ub/q3FhtrNVj0uKOt56z6R5y9zix1w4qY6RtWsREOJ7L6OKa
S2rvX6zNM7T6Vh3mmZyOfya7eACzIAAAAAAAAAAAAAAAAAAAAAAAAAAczjVvqMVfW/8AZ03I41bf
Lp6/OVs/UVrY47NyOzUxd4bUJpEbb3Z7IiOrKIVSjZhMLJYyhKIgmGUQSDESIEbJEgQmCITEAmGU
IiGUAyhZVhDOoM4Wx2VQtqBKuyyWEgqlhKyyuyBVaGtkbNmvk7A15l1eH2300R6TMORPSXT4ZO+O
8fFefEX63gEAAAAAAAAAAAAAAAq1WPxdLlp+Kkx+y1Fvsz8gjhaDauGK8sx07y3OE3m1tT6RaP4c
vU6yMNKUx73zT0ilY3l2eF6a+m0kRl/zbzz3+Ez5M8z26fJruW6wzYq5sV8d43raNpZjRzPPaTmx
5b6bJ9rHO3zb2WJ8GWPEscY9bgzxH2t62n19GWW0eHOzHU5XbjXZ1x8WTnz2iZ7S2M1IjH2+LX0V
KTqs8zO9ot0j8nUthi1J3UaOFMTfLFo6xMbS9BwHWTqdHOO8+/hnln5eTjYMFo1WTH5VnePzXcIm
2k4zlpPSmXy/hfF5eMfJns69OA2cgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAADG/2LfJ874rW845mubliY7bPoto5qzHrDz0+yePNF41OotaJ7RWNtpV1OtfHqZ715fhu
j8adNpcVfeyzE2/vLuanhOu1nEctIxTTFa/+ZPbZ3eHcF0vDbTfFE2yzG03t32+DokynXl9+leDB
TTYKYccbUpWIhYCzEAAAAAAAAAAAAAAAAAAAAAAAAAAAAcXjE/4zDH9M/wAu04XF5/3jj/0f3Wz9
RUYmzDWxS2I7FSyjuzY1ZKpRKEygEwiWUIkGIk2QJNhKQhMIhkCYZQxhlAMoZwwZwgWQshVCyATL
CWc9ldpBhZXLOVdpQK7NfJPRdaWvknoDVvPvOnwuel4+TlXn3nS4VPvXj4QtEV0wAAAAAAAAAAAA
AAAAAVV02CmTxK4qRf8AFFeq0AAAanEsfPpZmO9Ji0NDLfkwdOsulrumiyzHlVzJrz4Ovoy26vB8
cTBa9NffLtMY77Rv8Yegx5ImkKdJoY1HC81Y+3OSbVn0mGGkmbY45u6tnrrTOu2xGO0RxCd+nNVj
qKxTV1vH2pjaGtnyzXXYdo96ZmGXEMk15b7/AGZiVerWPTYckZcNbx5wzc7hGbnxXxzPWk7x8pdF
0S9jh1OXgAlUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAcPjEf4/FP9H93ccXjMf4vDP9Mx+62fqKrx+S+GvibEFSsqyYwlVK
ZYsmIMoRKYJQIPIEiQ2ATCUQygCGUIhMAyhnDCGUIFkLIV1ZxIMpVWWSrsCuyqyyyq09ECq8tfJK
66jJ2Bp5J6upwn7dv9Lk5J951uE/av8AJaIrqAAAAAAAAAAAAAAAAAAAAAAq1Mc2myxPnWf4cmtu
XT9fR0tffk0WSe28bfq5Wbamm3326MtunwfK6PCv/AxPraZ/dz9PO97/AOqf5dHhdZrw7Dv3mOb9
XOxRFM+avpe38mvkPHf/AFWlrKba7Tzt99ZxKkfR7euyNXMTrtPHfa0z+zPiM/UR8Zj+Wbdu8HpN
M2bfzrV13M4dO2pyR61dNvj44/J/oAWZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADj8bj63BPzdhyeNx0wz8ZWz9RWri7Nmv
VrYu0NmqaRZHZlDGGSiwxZSgCEkCBCQSCQBMJRCYgEsoYx3Z17AlMIhlCBnDOGEM4AlhZZKq4KrK
7LLKrIFN2vdfZReAaObu6/CO9vk5OePR1uEd7fJeIrqAIAAAAAAAAAAAAAAAAAAAAGtxCk5NFliI
3mI32+XVyNTyZOHTee946PQKPoeDffw4777eW/yVs60xv+ZxOnr4Okx1t05KRv8Ao41Z5q3yed5m
XY1szXRZ5jvFJ/hxItP0aOSN9q7yrtr4f2tHFM5+KT16Yq/vK/iGSbXw4vO14UcPx5MGfNbPG18m
1oj4THRsTw7VanPXVYpi3gzMcnrvCnG11JOupwuN8+a3pEQ6jT4divjxWnJExa09pbjbM5HHu90A
JUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAHM41H1GOf6nTc/jEf4Ws+lls/UX45uGekNujTwdm5RNIthKIZKLDFlsiQIShIC
EgCUJ7AmGTGO7IDzZQhMSDJMMYZQgZwzhhDOATuqssmVdgVWVWWyqtCBTeVF19lF+wNLNG7q8I+9
8nLyupwnt+S8RXUAQAAAAAAAAAAAAAAAAAAAAAAItWL1mto3iY2lyrcLyUxzix2ia2nvPeK+jrCL
OrTVnxpanhuPPemSs8l6RtE7dJj0ldpNP9GwRSZ3neZmV4cR/Vs4AJQAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANHi1d9H
M+kt5ra+vPoskfDdOfqK4mn7Q3aNHBPZu0W0RdDOGFWcKLCJZeTGQQlCQSgASBsCYZQxhlAJTAmA
TsmAgGcM4YQyjsgRLC3VnaVcgwsrt3Z2V2QK7tbJ1bN5a9waeWO7p8Knt8nNyebpcK8vkvlFdQBA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK9RXmwZI+ErEWjesx6wQeZwejeo0cccuW8
elpblJaaRGxVnCuss4ZrMvJEgCAASISCQIBlCYYpieoM0wx8k7gzIRueYM4Z79FcSy3QEsLJmWFp
BjaVVpZWlXMoGNmvkXXlr3kGtknu6XCf7OXkl1OEdl8orqgIAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAHmskcmtzV/rls0U62OXiWX4zErcc9GmkRfWVkSqqziWayxCPIANwBIhIJSxS
CRG6dwZwlhEs4BluMdzfqgZxLLdXuy3AmVdpZTKuZBjaVVpWWV2QlhZRdfZRcGpl7urwfrzfJy8r
rcH61vPyWitdMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHA4nHLxKZ9awnH2ZcY
jbW459aq8fZpfiI2IZwrqzhmsz3Ebm4JN0AMhCQSIASndiAziWUSriWcAyRujc80DM3RCfIETLCW
UsZEsJYSslXZAwlTddPZTkBp5e7r8Gj6rJPxhx8k9Xa4PG2C8/FaK10QAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAcfjcbZMFvnDWx9m5x2PqcNvS+zSxT7sNPxH62YZQwqzhRZO6UCB
KUAJTux3SDIRuAncQAmJZRLBMSgZ7iIAZRKd2DICUSlAljLCYWMLIFVukNfI2bNbIDTyT7zu8Ijb
Sz/qcG/2nf4T/wCE/wD2WnxWt4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHL9oL
+Hw2cm28VvEuPptfgyVj6yIn0no7/FtJfW8NzYMe3PaPd39d3iMug1WktNc2C9dvPbeP1aZ9xF+v
T471tHu2iflK2HkqWmvaZj5Surqc9Ps5bx+alTHqYHm68S1Vf/NmfnC2vGNTXvyT84Ql6A3cSvHM
sfaxVn5Ssrxyv3sM/lKB1xza8bwT3pePyWV4tpZ+/MfOEjfGrXiGlt2zV/PotrqcN/s5aT/+wLRj
FontMSlAlKEgndO6IAZQljDIEgeQljLCzOVdkCu/SGrkbF56NPNeKxMzMRHxENe0+89DwuNtHHzl
5PJr8NcnLW3Pbf7r1nCZm2gpae8zMrz4i/W6AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAETETG0xukB4HVaeMHEtRi26RedvkyjBSfX9W77QYvC4xz7dMlYlrU7M929dWJLFc6aPK0q
7YLxPS0S22FlP6q38Zac0yR92s/KVc3tHfFf8tpbcsLRvB/dR/8ALLVnU0r9uL1+dZI1mnmdvGpv
6TOy6ym+Oto2tWJ+cJ/tW+KLK5KW+zes/KU7tG+h01p64qx8Y6NXNo6Y+uPJlp8rLf0rfG7MXtHa
0x8pZxqs9e2a8f8A7Oj7HaTHn0+f6RWM23LETfr6vRW4PoL99NT8ui7F4+vEdXXtnt+fVbXjGsr/
AOZE/OsPS29nuH27YrV+VpeV9pdPXhOtw49NG9Mld55+vXcTPd42I47qo7xSfyWV9oM8d8VJ/VxM
d8l46xWF9cV7en6o/qLfxp2I9ob+eCv/AHMo9op89P8A/wBORGmyT5R+qfo2X8P7n9Q/jTsx7RR5
6ef+4/8AuHftg/8A6cWcOSO9J/WEbWr3pY7Efzp2Lcfv5YK/9zWy8d1E/ZpSv5Oba1/+Hb9lc+LP
bFt87I7E/wAabWbiurvEx4nL/pjZzc2bJkn372t85ZXx55/BX85lucC0vPxnTxlnnjm32mOiZqUu
LJ2p4TwnVavNWaYbRTfre0bQ99pcH0bT0xb78vmtiIiNojaErMwAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAHnfarF7umzRHaZrLjYrdIen9ocPi8JyTt1xzF4eUw23rCm3R4r6bMy
wt6kdTaWLdjswmNoZontsCm0K5XWjopnuDC0dGpqG5bs08/daKV672MjbSaif6oh6Z5f2LtvptRX
0tEvUN3Jfo8f7cYve0eX4zV7B5z20xc/C8eSPuZIRficfXlcPaG7ino08HWIbePpLF2NuiyOyrHK
3fZFSwuovHVfaVF4QK5YWTM9UT0EKry6Ps1Tn4zjn8NZn9nOtLseydObiWW34cf918fWfk+PYANn
KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq1WKM+ly4p+/WYeBxTNd6zG0xO0
vobw3FcP0bi2em20Tbmj5Srr418V9sa2Z7qKyzi07MXUylhaU7yjqhLCeiq3ddaFNxFYW7NLNG8t
zya+WO6Va9J7FW66mvwidnrXiPY3Ny8RyUn71Jj9Ht3RPjk19HK9pMHj8D1ER3rHN+jqqtTjjNps
uOe16zAifXzfTz7kNyndpYazS9qT0mszDdoxrsi6m8LazMq6zDOsq1ZEyrt1WWlXaUCqyq0rbKbi
Fdp6PReyFd8uqv8ACsfy83aXrPZHHto89/xX2/SP/dpj6y8vx6EBq5gAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAB5n2q03LfDqqx39y39npmlxbS/TOG5se29tuavzgWzeV4mtui2
O3RRSY2hdVhqO2MvI36iu9lUsrSrvDHn6spnmSiq5jooyV6tq1VV69RC32byTh43h8otMx+r6I+Z
aK/g8TwX7bXh9Mid4iW+fjl8n1ICWb57xLBOm4zqse20Tbmj8+qKdnS9q8PhcTw5tumSm0/OHMxz
0Za+uzx3sX1t0Zxurr1ZxvspWiZYWZbsbT0QK7KLrZVZJFaqt5vbezNOTg9J/FaZeJns93wCvLwb
T/GJn92uGHldIBowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADuAPA67F9H4l
qMW20VvO3yRWW97T4fC4rXJHSMtI/WGhVlue3b473K2KzMML4+62tujG9pnozXaOSOVFMnVbmq1t
trJRW5E7wwvUxTvCyY6CHOt7moxz6Wh9PxTzYaT61h8x1MbZK/OH0zTf+Fxf6I/htj45vL9WgLMn
mvbPFvocGWO9L7fq85p5maw9d7VYvE4JkmPu2if3eW0+PasdFNOnxfF1Y2hlykRsmY+LJ0MZjZXa
eq2eyi8oQTO0KLdZWzPRjWu6VaqtHR73g0bcI0sf0Q8Nkq93wqNuFaWP+XDTDDytwBowAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAef9q8HNpcGaI60vtPyl56k9Iew49j8ThGe
PwxFv0l4zH2U26fDfTYiyJljvsjf4sm6vJ1hrXjq2MkqLdZEVbgbMx0auGdmzNt6iHN1Ub5af6of
TdPG2nxx6Vj+HzaaTm1+nx/iyVj930ysbViPRrj45vL9SAuyc7j1efguqj+jd4/T33rD3HEcPj8O
1GP8WOY/Z4TTT7sKadHhbcsZnaCJ3TPZk6VdrKbTutmP0U2nqgrGOsr8deiuI2X09EqKM1dt3uuG
f/jdN/06/wAPE546S9rwud+Gaaf+XH8NMMPK2wGjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAABrcRp4nDtRWPPHP8PCYusPoWSvNjtX1iYfPuWaXtX8MzCuvjfw32siu8ptXoxi
0wy5t4YulReqmazu2skbquURWFInddM7VYRGyL291KFnCcfj8e0le/Lbmn8n0N4b2Ur4nHLWmPsY
5e5a5+OXyXugBZmiY3iY9Xz7NjnTa3Ph/BeYj5PoTxftFg8Hjk2iOmWkW/Psrr418V5WrWd2faFc
V2jdnEMXWxntupmN7NiYU27iWML6dVMVnddjgVqMsdHr+CW5uE6f4Rt+7yuSsTDv+zWXn0WTHP3L
/tK+GHl+O0A1c4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Dn93W56/wDM
t/L3z59qp24jn+OS38lnpr4r7ZxHQ2TEstt3PXUrt27K57rr1VT0BjKnJPRbMqMs7QlV2fYvHvrd
VknyrEfu9m8f7FZI8fVU85iJewbT45NfQBKo817W4eulzxHaZrL0rje09ItwqbfhtBVs3leai8RD
KLw1sduesL606dWFdsZT1jdhNeq6K9DlhCVUU6s4jZnt1YzAhnM71dH2bycmszY/K1d/0c6OzY4R
fwuK4p8rTstn6z8k7HrwGzkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHz3
Vxvr80/8y38voTwGpj/F5/8AqT/JfjTx/WVeyY6FPspc9dZPVXaOq2WEwIUTVRmjo2rNfLHRI3vZ
DJycXtX8dZh7t879nsnhcbwz23tt+r6I2nxyb+gCVBzuPY/E4PqI9K7ui19fTxNBnp60n+Aj5/pJ
3jZu1aOnnltMNussdfXbm+l3ZM9URHREdZVXTuT1Nk7boQiOkJw28PU47/htEp5eivJPLMTCZ9Vv
x7mJ3iJ9UqNHk8XR4b+tIXuhxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD
weqjbWZ4/wCZP8vePCaz/wDIaiP+Zb+UX408f0r9lOxWOifJhXWjfyYWllPRXYQxnrCrJHRd3YZI
6A1NJecHEsN/S0T+76bE7xE+r5dk93LW3pL6ZpMni6PDf8VIn9m2fjm8s9rgFmQxvHNS0esbMiew
PnHLyai9fS0w2aNfUTtrs3+uf5bGPqy068fF227KtSsdFlKqNGMV6myyY6sbdIQI8tlOWOi6Jhhk
j3RD0vA8nicMx9etZmHRcT2Zyb6XNT8N9/2dt0T449T2AJVAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAHhdfG3E9TH9cvdPEcXjk4zqI/q3L8aeP6xr2TsxpLOekMK6mFo6qpXSrm
OqBixvHSVmzC4OfqK7S9/wAByeLwbTW9K7fo8Fqo6Paeyl+fglI/Da0NcMPK7QC7AAB8313TiOf/
AKk/y2MHWrX4jG3E9R/1Lfyv0/aFNOrHxuU7LI7MMayGTVlHWUXhNe6Z6wIUsb9d1m20q7dkDpez
N9tRqKT5xEvRvKez9+Xis1/FSYerb5+OTyf6AFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAB43j9eXjN/jWJ/Z7J5L2mry8Upb8VIF8f6aGOey2eynHvOy7bowrrYSxZSwQJ2YXZ
92N4BoanrEvVexmTm4blr+HJ/aHltRHSXofYm/1Wrp5RaJaYY+X49WA0c4AD51xONuKan/qW/lbp
+0MOLRtxbU/9SU4J7KadWPjep2WQrr2WRPRk1TvsndXMpiRCb9FNu0rbTuqvKBscCjfi9PhWZeue
V9n434rafTHL1TfPxy+T/QAszAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHmv
avHtfTZfnV6VxPajHzcNrf8ABeJFs/XnMcr4no18c+6vr2YadkY2YM57sEDLyY37Mo7MMnYGlqO0
vQ+xNfqNVb1tEfs87qZ2rL0/sVX/AHdnt65P7Q0wx8vx6UBo5wAHz/jUbcX1PT78qtO2vaCnJxjP
8Zif2amnnspp04+OjWejKJ6MKdmcMmyJn4m5ZHzEVPMwtJv0VZLbQDqezcb8RzT6Y/7vUPM+ytZt
n1OTyiIh6Ztn45N/6AFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABocbxeLw
nUR5xXm/Rvq8+OMuDJjntaswEeBxT0bNZ6NatZpNqz3rO0rqsdO3PxlaWEMpY+aqWXkryT0ZT2V3
7A0dVPuy9f7G124NM/iyT/Z4zWT7sw957MYfB4Fp4/FE2/WWmGHldcBowAAeM9qKcvFeb8VIly9P
0nq7ntbTbVYL+tJj93CwT76unR4/jo0nozhhTsy3Y1sWljM9Ce7HyQIm3RRlttVbaWrnt0Sh6n2U
x8vD8mSfv3/h3XN4Bi8Lg2nj8Uc36y6TeOPXugCUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAPD8RxeBxXUU26Tbmj8+quro+02Lw+I4ssdslNvzhzazvDPbq8d7GW7Dfqz2VzG
0s2qd+iu/Zn5Ksk9BVztX1mI8930zh2LwOHabH+HHWP2fNYp4+vwYvxXiP3fUqxtWIjyjZtj45/L
faQFmQADzftfj3w6fJ6WmHmsP23rvaqnNwqLfhvEvIYZ+sV038bo0noy36MK9oZQxrdMyrlnMbMZ
QKrS1M07zEestq/RRjr4utwY/wAV4j91p9V18fQdJj8LR4ccfdpEfsuREbREJbuMAAAAAAAAAAAA
BAJAAAAEAJEAJQAJQAJEAJQAJQAJEACUJAQlAJEAJQAJQJAAAEAJEAJBAAAJAABAJEJAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwvanDzaPFmjvjv8A
tLztJ3h7HjGHx+FainnFeaPnHV4vFbeIU038VbHeGF+kso7Mb9mTdhKnLK3dRm7SIrHhGPxeP6Sv
9cT/AHfSnz72Zx+J7Q45/BWZ/Z9BbZ+OXyfQBZQABzeP4/E4NqI9Ii36S8Ng/wAx9C4jTxOH6ivr
jn+Hz3B/mQi/GvjdCnWNlsdI2V07LIlg6USrt2ZzZXMoFV+zPhGLxeOaavpbm/RVltEN72Yx+Jxm
b7dKUmf7L5+s9/HtRA2cqRACRACRACRACUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQCQQCRACRACRCQBCQBCQB
ACRACRACRACRACL1i9LVntMbPATTwdRkxT3pea/u+gPE8Xx+DxrPHlaYt+qNfGvjvtXXsi0dOrKk
dEXjZg6VMtbP2bMtXUdpEV0/Y2nNxbNf8OP+727xvsXH+N1U/wBEfy9k3nxyb+gCVQAGOWvNivX1
rMPnGGOXNNfOJ2fSZ6w+dZKeHxDPX8N7R+6L8a+L63KdoZ7q6zvEMpnowdKJ6ywmWUyqvIKM0vQ+
x+D6rU55+9aKx+TzWa36vbezmDwODYenW+95/Nphj5L6dQBo5wAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAEiAAAEoA
AAAAAAAAAAAAAEAkEAkRuAkQbgkQAkQAkQAkQAl5T2nx8nEMOT8dNv0l6pwfarHvpcGWPu32/WCr
YvK4mOem6b9mGKd4Z3idmFdka0y1c892zfpMtLPaNpEV6D2Kj/Eauf6YeweQ9ieuTVz8K/3evbT4
5NfQBKoAA8FxCvJxrUx/XMvevD8Zry8fz/Haf2RfjTx/6RSOnRMyypHu9kXjowrqVSrvPRnZVl6V
kK0775MsUjvadn0nT4ow6bFijtSsVfPuFYvpPGtNTy54mfy6vorXDm8l9pEC7JIgBIgBIgBIgBIg
BIgBIhIAgBIhIAgBIgBIIBIAAhIAhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAA
AAAAAAAAABAJQkAEAAAAAAAAAAjc3BIjdG4Mkbo5kcwMjdhzHMDPc3V8xzAs3N1fMjmBZubq+Y5g
Wbm6vmOYFm5ur5jmBZubq+Y5gWbm6vmOYFm5ur5jmBZubq+Y5gWbm6vmTzAz3N2HMnmBlu5ftFTx
OEZJ/DMW/d0t2rxKni8N1FPWkiZ9eS08e7Cy8dGGn6UhZaJljXZGnmc3UT3dPP2cnUT78xCIV6j2
H/8A9c/6f7vXPI+w8bU1U+vL/d63du5NfUiDcVSIAS8b7RV5eOb/AIqRL2TyXtNX/e2KfXH/AHlF
+NPH/pr4+2xcxx0hFpY11K7R16KM32ZWz3UaidqSgrc9kcPicWyZJjfw6T+727y3sXh2xarN+K0V
h6lvPjj3e0ASqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJQAAAAAkQAkQAkAAAAAAAAAAAAAAA
EgAAAAAAAAAAAAAAAAAAAAAgAAABKDcAN0bgkY8xzAyRux5kcwM9zdXNkTcFm6OZXzMeYFvMibKu
ZHMC2bo51U2RuC2bom6rc3BZzom6sBZzI52ADPnOdggFnMc6skFnMc6rc3BbznOp3RzAv50c6nml
HMC/nOf4qOY5wX85zqOc5wbHOc7X5znBsc6edr85zg2ec52vzpi4NjmY5bROG+/bllVzsNTk5dLl
n0pP8BHmMHWNmzt0aum8obm08vVjfrtnxztR0mXHzTvaZdjVRMTLkZo6yiFen9iZ2pqY/wBP93rN
3kPY+/LfPX1rE/u9XzN3HfqzdO6vmTuIZ7m7Hc3Bnu8t7TR/vHBP9E/y9Pu837SV31umn+if5Rfi
/j/01MMb1hjkrtKzBG0bMsmOZY11tOYamr6Und0LUc7XT7u3rJPqL8er9lcPhcFpbzyWm39v7O00
+FYvA4Zpsc94xxu227jv1IAgAAAAAAAAABKAAAASgASgBIgBIgBIgBIhIAAAAAAAAAAAAAAAAAAC
UACUJAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAg3AEbomQZbo3YzLGbAz3RNlc3YzcFs2YzdVN2
M2Bdzom6nmNwW86JurTAMuY3REJ2BB1ZRVMVBhsbSsiqeUFXLucq3lTygp5TlXcpygp5TlXcpygp
5TlXcqOUFXKjlXcrGYBXysdlswiYBVMdUTCyY6sZBWxlnMMZgGLGZZSwkDdHMiWO4MuY5mEyjcFn
N1OdVzHMC3nTzqeY5gX85zqOZPMC+Lqdbk20eb/RKOZr8QybaK/XvtH7iZ9aGlp2luzT3fg19NHS
OjbmPcYX67XH1XSZ9XIzRvMuzrK7zLkZYmYnciunb9lZ5dTk+OP+71cXeP8AZnJ/ip2nf3J/l6iL
/Fu5L9bMWZczXi6YuIbEWTzKIuyiwLt3nuO25uI4a/hx7/rLuczg8TicvFLbfdpEK6+NPH/phhjo
stLGkctUWnoxrrU3j1cnWTzZq1jzl1clo5Zcu8c+txR63iP3Tn6pv4+g4o5cVI9IiGe7CJ2iE7t3
GyN2O6dwSINwSISAlAAlACRAAlAAlACRACRCQAAAAAAAAAASgASISAAAAAAAAAAAAACQAAAAAAAA
AAAAAASAAAAAAAAAAAAAAAAIAAAQCAJljuljsCJlhMs9mOwMJYys5TkBVsjZdyHICrZPKt5E8oK4
qmKrOVOwMIqyirPY2Bjyp2ZbAI2NmSARsbMgEbI2ZAMdjZICNkbMkSCNmOzJEgx2YyzljMAwlhKy
WEwCuWErJhhMArlhLOWEgxljMpljIImWMyTKJA3N0IBO5vux3NwZbnMx3NwZczT4jf3MdPW27a3a
fJOq1XNP2KdIRfi+J2trSYfcjeF+Wm1OicVeWIiN9kai8xjY12ORqultnI1Ecsujq79XP1FovWYI
rTgeq+j8QrWZ+3Mx+r2UXeC0WG2Ti2kiN5mL807eUREvbzbaejefHJv62Iv8WUXa0WTFhVtRdlF2
rz9WUXBtc7jR9dqc2T1ttHyhvZMvJitb0jdq6XHNcNenWVN3028U99WRj6Kb02be3Tq18/SN2Lpc
3UdN9nOmZrqKX/DaJ/d0svvTLRzV3jomK6+Pd1vvWJj0ZczT0mXxNJht60hfFnQ4qu3N1cWTEgs3
Tur5k7gz3N2O5uDM3Y7m4MtxBuCQASIASIASAAAAAAACRCQAAAAAAAAEoSAAAAAAAAAAAlAAlCQA
AAAAAAAAAAASAAAAAAAAAAAAIASgAAAEJAQJQCNkbMgGOyOVnsAw5TlZ7GwMOVPKy2NgY7GzIBGx
skA2AAAAAAAAAAQkBAEghEskAxYzDPZGwK5hjMLJhjMAqmGEwumrCagomFcw2JqqtUFEsLLrV82F
o7gqljKyYYTGwMZRKUSCAQAboJnaN5Bjkneu0d5W4ccViIiOzHFWbTzNumP1Zarr8eeRMbxDW1Mx
NO67NbkhzNVnmInqzaOZrL93JyZeV0M1++7S02jvxDWxhxx033tPpC8Z6rrezWjmZyazJG2/u03h
2vFibTHoqvamiwVwY+nLGzV0+SZ1Mx8G0/45tOhzJ5lXMc3UVXRdlF1HP+iYsDPLPPy49/tz1+Te
pSIr0ho6ak5Ms5J8o2q6NImOrHV7XX488ypzTtHXo0s9t6zG7c1G1qz6ubeZiZ3UatXJG3yauSO7
cvMTEx5tPLb3prPRMVr0HB8vicNxf0+7+kt+LOJwTJyY/Bnz3tH93X36N58cWvq6LSyiyndMSlC7
mZcymLJiwLosmJVRLKLAtiU7q4lMSCzc3YxJuDMRuAlKAEgAAAlAkAAAAAABKAEgAAAAAJAAAAAA
AAAAAAAEgAAAAAAAAAAAAAkAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAhIAAACAAAASgAAAAAAEAAAA
hGzJAImGMwzQDDZjNVuyNgUTVhNGxysZqDVmiu1G5NN2M4waM0+DCaN2cbGcQNGaMZq3JxMJxA1J
qx2bU4kU09slorWNwa20z02RXHbJbl26QvtFovbHWkxEdJt5y2MOHlr2U1W3jx+1hiw8vSO63lmI
XRTaEWmtY6snRHO1VpmJ+DjavpSZl2s8b7y4HFcnh0n0gha5ebJN55KRM2mdoiPN6fh+kpwXh0Wy
RHj5Otp/s5Ps1p62y31+em9aTMYt/OfVfxTiPjZ52naI7fBrI5t66xz5+a1rW7yx0eSL6iZjtEOX
qNbSletom3lENjh2fbHzbbWt3iVozruc+5ztWubf4M4ybpQ2Oboyrva0Vjza8WdDR4OkXt3n9ldX
kaePP9VtYqctYhdvt5oivTeCZ2YOxXk6ubqMfV0b9mrljfqlFcq88k7z2U5axeItDa1OPessuC8P
ya7XRWYnwqdbT/ZMilvIu4dpslNdixXja8Y5tt85djZdbDWnGOesRtXFtuw6T27No5Kx2OrKYQlC
ExKJgBnEpiyvdlEgsizKLKollFgWxLKJVRLKJBbEp3VxLKJBnuMWQJEbpBIAAAJAAAABIAAAAAAA
lAJAAAAAAAAAAAAAASAAAAAAAAAAAAAJAAAABAJABAlAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAA
AAABAJQAAAAgAABAAI2EoBGyJhkgGPKxmqxAKpownHC+YRMdN5BrTj67R3bOn01o7p01Iv71u89o
b9a7LfBTfS1vWI2jf12VfQPSW8KX2mas+NC2iv6xMNfJpMnLtEbuuxtMRCtzF55NR5rPps1N/ctP
y6uHreE6nXZ4pak48X3rT06fB7fNeI33cbX6mI32R/MWu7XF116aDSRhxbRERs8f499bkyZeeKae
kzE2mdon81/tfxDLGOunwbzlzbx08oaHBvZHJlx48mrvaa94pu04y617576rNGLRRM0397JEd/lu
9Dw/S3x4qxffo6mm4NjwUiKY4iI9Ib1dHFY6QIaNabbrYrLfrpJtaK1rMzPZb/s+05IpP59OyLeJ
k7eNfRaOc1ue32I7fGXYpi5Y77M8OGMeOKxHSFsU3Y29deZMzirl6dlVvhLatCjJHeYQv1rXnps1
8k9/VsW6qLVmZIi1rzitlvFKRvaZ2h6TSaenC9FFY+3brM+sqeG8Prp4+kZ+lvuxPkr1mqm95nfp
DXM459676a2q1dsV7XietvNno78+CJn1cjX6mOeIm0bR33dfRU5NJjidt9t5afjG/V6JZ7I2QMNh
nyo2BhsMuVG3wAhMSbbQRAMolnE+iuGUSCyJZRKuGUSCyJZK4llEgyZMYTuCUsYSCQASISAAAlCQ
AAAAAAEoASCASAAAAAAAAAAAAlACRACQAAAAAAAAAEgCEoASCAAAAAAAAAAAAAAAAAAAAAAABAAA
AAAAAAAISAIAAAAAAQAAACASgAAAQJAQAAhIDHZhln3do7z0WS18mWsajHjmes7pg3dNi5aRMNqO
yvDHTpPRaigHZhN4hHRlaVN59JY3zRENLUavaO+yq0iNVlitJ6vNcR1MVi0zO0era1/Ea0rPvbz5
PM5MWp45qvo2GZrhmfrsnpHpHzTCseEcM/2vrr8Q1Eb4qzy44nziPN63HpYiIiI7LNHoqabBTFii
IpSNohuVxrKtWMEejPwY9G1FFmHB4mWJn7MdfnIM9JpIx15to5pbUaas/a6rqViI7MxPxqX0UT1r
O3wVzpbR2hviP5i03Y5s6a879FNtHljydhExCv8AMTPJXBnRZbz0iG5ptFjwe/l96zctMVamTJtE
yTMibu1VrdTzRMR0j0ed4lr64MVpm0RERvMz5NvX62uOJ69XhOKX1HH9bHDtFvNYnfJeOy0Z2ojX
6jjnEq6fRUmccTvN/J9H0eKcOnx45neaxEbubwHgOHg+milI3vP2resu3Wu0JQmITsmISDHZHKz2
JgFc1RMLJhGwK9iIZ7MZgEdgmAEwyiWCdwWRLKJVxKYsC2JTuriWUSDNlEsIlMAySx3SCRCQSIAS
AAACRACQAAAAAAASIASAAAAAAAAAAAAAAACRACRACQASIAAAAAAAAAAAAAAAAAAAAAAAAQCUAAAA
AAAAAAIAAAAAAAAQAAAAAACBICBICAAEJAQJQCJcLjuS2ny6fPG/LWdpd1o8T0X07SXx/e7wCdJx
Wa0jmneHQpxPDMdZmJfNtZm49weZrh0/j4o7VtSZ2+Uw0/8A7o49k92vBLc/ntFohFW9PqGXimOI
6Tu1L8T3eCx6r2t1O3JwvHjifO99v7t/Bwf2l1PXU6rS6eJ8qUm8x+so5TsekzcSjbvs4mt4rzW5
K2mbT0itesy2cHsvbvqtbmyz5xERWP2jd1tJwrTaONsOKtZ8585+cnDrzmn4Rq+IZObUROHD32n7
Vv8A0ej0uhxaXFGPFSK1j0bkY4jyZRVZVXFGUVWbGwKsk8mObekNrSW3pWf1a2aYjHbm7bNnQ1id
PW0TvuDdhJEbQABMsLW2R0ZTMQrvfbz2YWzVhpanUxEd0dWkW5c8R5uXxDX1w4pnfr5Q19XxKuOJ
2neXltVqtVxbV/RdJ715+1bypANfiOu1HENV9C0MTfNeesx2rD1PAeBYuE6aKx72W3W9/WVnBuB4
eF4dqRzZbdb5J72l160WVK02ZxCYhOwI23TsnY2BGxsnYBjsiYZsZBjMMZZSgGEolMsQDdG6NwZ7
piVe6YkFsSziVMWZRILolMSriWUSCyJTuwhMSDMRCQSI3SAlACRCQAAEoAEoASAAAAAAAAACUACR
ACQAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAABAAAAAAAAAAAAACBKAAAAAAAQ
JQAAAhICEbJAYTWJ7wx8KvpC0BV4ceieWGewDHlNmWwCNjZICNhIDmcZredBecdpiY69FXCOLW+i
UiZidukulmxxlx2paN4mNng+K4+I8Hy2yaTfl37TXetoCPfRxfp1qi3F48ofKMvtvxak8s6LDv61
rZji9rPaLUf5PC+bfttS0q8q3p9W/wBrRMdpUZuKdN99nzvFqPbTVz7nD8OKs+do2/mW3h4D7Xaq
ZnPrtNpqz35aRaYOHY9Zk4pNt9rR+rl6zi+OnS+WN57Rv1lXp/YrNaYtruL6zNPnGO3hxP6O5w/2
f0HDuun09Yv55Le9afznqcOvO4tBreMTHu30unnva0bWt8on+70nDuE4OHYYx4Kbesz3tPrMuhGO
IjpDOKrK9YVpsyiGUQnYGOyUgI2SlAIEmwMWMs9kTAMJYzDOYRMArmGErZhhMArlHmzmGMwDE3Ts
bAbs4swj5pgFkSziVcM4BZEsolXDKAZwyhjCYBkACQhIAAAAAAAJAAAAAAAAAAAAAAAAAAAShIAA
AAAAAAJAAAAAAAAAAAAAABAJEAAAAAAAAAAAAAAAIEoBKAAAAAAAAAAAAAAABAlAAAAAAAIAAAAA
BAkBAkBAkBAlACEgMZjdjbFW8bWrEx8YWANb6Fp+bfwab+vLDKMFK9qxH5L0bAr8OPRPKz2AY7J2
SbAjYZAI2E7AIEgIEgIEgMdkSy2NgY7MdlmyNoBXsxmFuyNgVTVjNV3KjlBRNTlXTVHKCrlIqt5T
lBhEMohlFerLlBjEMohMVTEARDKCITsAk2AEgAAAkAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAD/
2Q==`;

// package.json
var version = "2.1.5";

// src/human.ts
var _numTensors, _analyzeMemoryLeaks, _checkSanity, _firstRun, _lastInputSum, _lastCacheDiff, _sanity, _checkBackend, _skipFrame, _warmupBitmap, _warmupCanvas, _warmupNode;
var Human = class {
  constructor(userConfig) {
    __privateAdd(this, _numTensors, void 0);
    __privateAdd(this, _analyzeMemoryLeaks, void 0);
    __privateAdd(this, _checkSanity, void 0);
    __privateAdd(this, _firstRun, void 0);
    __privateAdd(this, _lastInputSum, void 0);
    __privateAdd(this, _lastCacheDiff, void 0);
    this.analyze = (...msg) => {
      if (!__privateGet(this, _analyzeMemoryLeaks))
        return;
      const currentTensors = this.tf.engine().state.numTensors;
      const previousTensors = __privateGet(this, _numTensors);
      __privateSet(this, _numTensors, currentTensors);
      const leaked = currentTensors - previousTensors;
      if (leaked !== 0)
        log(...msg, leaked);
    };
    __privateAdd(this, _sanity, (input) => {
      if (!__privateGet(this, _checkSanity))
        return null;
      if (!input)
        return "input is not defined";
      if (this.tf.ENV.flags.IS_NODE && !(input instanceof je))
        return "input must be a tensor";
      try {
        this.tf.getBackend();
      } catch (e) {
        return "backend not loaded";
      }
      return null;
    });
    __privateAdd(this, _checkBackend, async (force = false) => {
      var _a2;
      if (this.config.backend && this.config.backend.length > 0 && force || this.tf.getBackend() !== this.config.backend) {
        const timeStamp = now();
        this.state = "backend";
        if (this.config.backend && this.config.backend.length > 0) {
          if (typeof window === "undefined" && typeof WorkerGlobalScope !== "undefined" && this.config.debug) {
            log("running inside web worker");
          }
          if (this.tf.ENV.flags.IS_BROWSER && this.config.backend === "tensorflow") {
            log("override: backend set to tensorflow while running in browser");
            this.config.backend = "humangl";
          }
          if (this.tf.ENV.flags.IS_NODE && (this.config.backend === "webgl" || this.config.backend === "humangl")) {
            log("override: backend set to webgl while running in nodejs");
            this.config.backend = "tensorflow";
          }
          if (this.tf.ENV.flags.IS_BROWSER && this.config.backend === "webgpu") {
            if (typeof navigator === "undefined" || typeof navigator["gpu"] === "undefined") {
              log("override: backend set to webgpu but browser does not support webgpu");
              this.config.backend = "humangl";
            } else {
              const adapter = await navigator["gpu"].requestAdapter();
              if (this.config.debug)
                log("enumerated webgpu adapter:", adapter);
            }
          }
          if (this.config.backend === "humangl")
            register();
          const available = Object.keys(this.tf.engine().registryFactory);
          if (this.config.debug)
            log("available backends:", available);
          if (!available.includes(this.config.backend)) {
            log(`error: backend ${this.config.backend} not found in registry`);
            this.config.backend = this.tf.ENV.flags.IS_NODE ? "tensorflow" : "humangl";
            log(`override: using backend ${this.config.backend} instead`);
          }
          if (this.config.debug)
            log("setting backend:", this.config.backend);
          if (this.config.backend === "wasm") {
            if (this.config.debug)
              log("wasm path:", this.config.wasmPath);
            if (typeof ((_a2 = this.tf) == null ? void 0 : _a2.setWasmPaths) !== "undefined")
              this.tf.setWasmPaths(this.config.wasmPath);
            else
              throw new Error("Human: WASM backend is not loaded");
            const simd = await this.tf.env().getAsync("WASM_HAS_SIMD_SUPPORT");
            const mt2 = await this.tf.env().getAsync("WASM_HAS_MULTITHREAD_SUPPORT");
            if (this.config.debug)
              log(`wasm execution: ${simd ? "SIMD" : "no SIMD"} ${mt2 ? "multithreaded" : "singlethreaded"}`);
            if (this.config.debug && !simd)
              log("warning: wasm simd support is not enabled");
          }
          try {
            await this.tf.setBackend(this.config.backend);
          } catch (err) {
            log("error: cannot set backend:", this.config.backend, err);
          }
        }
        if (this.tf.getBackend() === "humangl") {
          this.tf.ENV.set("CHECK_COMPUTATION_FOR_ERRORS", false);
          this.tf.ENV.set("WEBGL_CPU_FORWARD", true);
          this.tf.ENV.set("WEBGL_PACK_DEPTHWISECONV", false);
          this.tf.ENV.set("WEBGL_USE_SHAPES_UNIFORMS", true);
          if (typeof this.config["deallocate"] !== "undefined" && this.config["deallocate"]) {
            log("changing webgl: WEBGL_DELETE_TEXTURE_THRESHOLD:", true);
            this.tf.ENV.set("WEBGL_DELETE_TEXTURE_THRESHOLD", 0);
          }
          const gl2 = await this.tf.backend().getGPGPUContext().gl;
          if (this.config.debug)
            log(`gl version:${gl2.getParameter(gl2.VERSION)} renderer:${gl2.getParameter(gl2.RENDERER)}`);
        }
        this.tf.enableProdMode();
        await this.tf.ready();
        this.performance.backend = Math.trunc(now() - timeStamp);
      }
    });
    this.next = (result) => calc(result || this.result);
    __privateAdd(this, _skipFrame, async (input) => {
      if (this.config.cacheSensitivity === 0)
        return false;
      const resizeFact = 32;
      if (!input.shape[1] || !input.shape[2])
        return false;
      const reduced = bn.resizeBilinear(input, [Math.trunc(input.shape[1] / resizeFact), Math.trunc(input.shape[2] / resizeFact)]);
      const reducedData = await reduced.data();
      let sum = 0;
      for (let i = 0; i < reducedData.length / 3; i++)
        sum += reducedData[3 * i + 2];
      reduced.dispose();
      const diff = 100 * (Math.max(sum, __privateGet(this, _lastInputSum)) / Math.min(sum, __privateGet(this, _lastInputSum)) - 1);
      __privateSet(this, _lastInputSum, sum);
      const skipFrame = diff < Math.max(this.config.cacheSensitivity, __privateGet(this, _lastCacheDiff));
      __privateSet(this, _lastCacheDiff, diff > 10 * this.config.cacheSensitivity ? 0 : diff);
      return skipFrame;
    });
    __privateAdd(this, _warmupBitmap, async () => {
      const b64toBlob = (base64, type = "application/octet-stream") => fetch(`data:${type};base64,${base64}`).then((res2) => res2.blob());
      let blob;
      let res;
      switch (this.config.warmup) {
        case "face":
          blob = await b64toBlob(face3);
          break;
        case "full":
          blob = await b64toBlob(body3);
          break;
        default:
          blob = null;
      }
      if (blob) {
        const bitmap = await createImageBitmap(blob);
        res = await this.detect(bitmap, this.config);
        bitmap.close();
      }
      return res;
    });
    __privateAdd(this, _warmupCanvas, async () => new Promise((resolve) => {
      let src;
      let size = 0;
      switch (this.config.warmup) {
        case "face":
          size = 256;
          src = "data:image/jpeg;base64," + face3;
          break;
        case "full":
        case "body":
          size = 1200;
          src = "data:image/jpeg;base64," + body3;
          break;
        default:
          src = null;
      }
      const img = new Image();
      img.onload = async () => {
        const canvas2 = typeof OffscreenCanvas !== "undefined" ? new OffscreenCanvas(size, size) : document.createElement("canvas");
        canvas2.width = img.naturalWidth;
        canvas2.height = img.naturalHeight;
        const ctx = canvas2.getContext("2d");
        ctx == null ? void 0 : ctx.drawImage(img, 0, 0);
        const res = await this.detect(canvas2, this.config);
        resolve(res);
      };
      if (src)
        img.src = src;
      else
        resolve(null);
    }));
    __privateAdd(this, _warmupNode, async () => {
      const atob2 = (str) => Buffer.from(str, "base64");
      let img;
      if (this.config.warmup === "face")
        img = atob2(face3);
      if (this.config.warmup === "body" || this.config.warmup === "full")
        img = atob2(body3);
      if (!img)
        return null;
      let res;
      if (typeof void 0 !== "undefined") {
        const data = (void 0).decodeJpeg(img);
        const expanded = data.expandDims(0);
        this.tf.dispose(data);
        res = await this.detect(expanded, this.config);
        this.tf.dispose(expanded);
      } else {
        if (this.config.debug)
          log("Warmup tfjs-node not loaded");
      }
      return res;
    });
    this.version = version;
    Object.defineProperty(this, "version", { value: version });
    config.wasmPath = `https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@${BG}/dist/`;
    this.config = mergeDeep(config, userConfig || {});
    this.tf = tfjs_esm_exports;
    this.draw = draw_exports;
    this.state = "idle";
    __privateSet(this, _numTensors, 0);
    __privateSet(this, _analyzeMemoryLeaks, false);
    __privateSet(this, _checkSanity, false);
    __privateSet(this, _firstRun, true);
    __privateSet(this, _lastCacheDiff, 0);
    this.performance = { backend: 0, load: 0, image: 0, frames: 0, cached: 0, changed: 0, total: 0, draw: 0 };
    this.models = {
      face: null,
      posenet: null,
      blazepose: null,
      efficientpose: null,
      movenet: null,
      handpose: null,
      age: null,
      gender: null,
      emotion: null,
      embedding: null,
      nanodet: null,
      centernet: null,
      faceres: null,
      segmentation: null
    };
    this.result = { face: [], body: [], hand: [], gesture: [], object: [], performance: {}, timestamp: 0, persons: [] };
    this.image = (input) => process4(input, this.config);
    this.faceTriangulation = triangulation;
    this.faceUVMap = uvmap;
    this.sysinfo = info();
    __privateSet(this, _lastInputSum, 1);
  }
  similarity(embedding1, embedding2) {
    return similarity(embedding1, embedding2);
  }
  segmentation(input, background) {
    return process5(input, background, this.config);
  }
  enhance(input) {
    return enhance(input);
  }
  match(faceEmbedding, db, threshold = 0) {
    return match(faceEmbedding, db, threshold);
  }
  async load(userConfig) {
    this.state = "load";
    const timeStamp = now();
    if (userConfig)
      this.config = mergeDeep(this.config, userConfig);
    if (__privateGet(this, _firstRun)) {
      if (this.config.debug)
        log(`version: ${this.version}`);
      if (this.config.debug)
        log(`tfjs version: ${this.tf.version_core}`);
      if (this.config.debug)
        log("platform:", this.sysinfo.platform);
      if (this.config.debug)
        log("agent:", this.sysinfo.agent);
      await __privateGet(this, _checkBackend).call(this, true);
      if (this.tf.ENV.flags.IS_BROWSER) {
        if (this.config.debug)
          log("configuration:", this.config);
        if (this.config.debug)
          log("tf flags:", this.tf.ENV.flags);
      }
    }
    await load13(this);
    if (__privateGet(this, _firstRun)) {
      if (this.config.debug)
        log("tf engine state:", this.tf.engine().state.numBytes, "bytes", this.tf.engine().state.numTensors, "tensors");
      __privateSet(this, _firstRun, false);
    }
    const current = Math.trunc(now() - timeStamp);
    if (current > (this.performance.load || 0))
      this.performance.load = current;
  }
  async detect(input, userConfig) {
    return new Promise(async (resolve) => {
      this.state = "config";
      let timeStamp;
      let elapsedTime;
      this.config = mergeDeep(this.config, userConfig);
      this.state = "check";
      const error = __privateGet(this, _sanity).call(this, input);
      if (error) {
        log(error, input);
        resolve({ error });
      }
      const timeStart = now();
      await __privateGet(this, _checkBackend).call(this);
      await this.load();
      timeStamp = now();
      let process6 = process4(input, this.config);
      this.performance.image = Math.trunc(now() - timeStamp);
      this.analyze("Get Image:");
      if (this.config.segmentation.enabled && process6 && process6.tensor) {
        this.analyze("Start Segmentation:");
        this.state = "run:segmentation";
        timeStamp = now();
        await predict11(process6);
        elapsedTime = Math.trunc(now() - timeStamp);
        if (elapsedTime > 0)
          this.performance.segmentation = elapsedTime;
        if (process6.canvas) {
          Ae(process6.tensor);
          process6 = process4(process6.canvas, this.config);
        }
        this.analyze("End Segmentation:");
      }
      if (!process6 || !process6.tensor) {
        log("could not convert input to tensor");
        resolve({ error: "could not convert input to tensor" });
        return;
      }
      timeStamp = now();
      this.config.skipFrame = await __privateGet(this, _skipFrame).call(this, process6.tensor);
      if (!this.performance.frames)
        this.performance.frames = 0;
      if (!this.performance.cached)
        this.performance.cached = 0;
      this.performance.frames++;
      if (this.config.skipFrame)
        this.performance.cached++;
      this.performance.changed = Math.trunc(now() - timeStamp);
      this.analyze("Check Changed:");
      let faceRes = [];
      let bodyRes = [];
      let handRes = [];
      let objectRes = [];
      if (this.config.async) {
        faceRes = this.config.face.enabled ? detectFace(this, process6.tensor) : [];
        if (this.performance.face)
          delete this.performance.face;
      } else {
        this.state = "run:face";
        timeStamp = now();
        faceRes = this.config.face.enabled ? await detectFace(this, process6.tensor) : [];
        elapsedTime = Math.trunc(now() - timeStamp);
        if (elapsedTime > 0)
          this.performance.face = elapsedTime;
      }
      this.analyze("Start Body:");
      if (this.config.async) {
        if (this.config.body.modelPath.includes("posenet"))
          bodyRes = this.config.body.enabled ? predict4(process6.tensor, this.config) : [];
        else if (this.config.body.modelPath.includes("blazepose"))
          bodyRes = this.config.body.enabled ? predict6(process6.tensor, this.config) : [];
        else if (this.config.body.modelPath.includes("efficientpose"))
          bodyRes = this.config.body.enabled ? predict7(process6.tensor, this.config) : [];
        else if (this.config.body.modelPath.includes("movenet"))
          bodyRes = this.config.body.enabled ? predict8(process6.tensor, this.config) : [];
        if (this.performance.body)
          delete this.performance.body;
      } else {
        this.state = "run:body";
        timeStamp = now();
        if (this.config.body.modelPath.includes("posenet"))
          bodyRes = this.config.body.enabled ? await predict4(process6.tensor, this.config) : [];
        else if (this.config.body.modelPath.includes("blazepose"))
          bodyRes = this.config.body.enabled ? await predict6(process6.tensor, this.config) : [];
        else if (this.config.body.modelPath.includes("efficientpose"))
          bodyRes = this.config.body.enabled ? await predict7(process6.tensor, this.config) : [];
        else if (this.config.body.modelPath.includes("movenet"))
          bodyRes = this.config.body.enabled ? await predict8(process6.tensor, this.config) : [];
        elapsedTime = Math.trunc(now() - timeStamp);
        if (elapsedTime > 0)
          this.performance.body = elapsedTime;
      }
      this.analyze("End Body:");
      this.analyze("Start Hand:");
      if (this.config.async) {
        handRes = this.config.hand.enabled ? predict5(process6.tensor, this.config) : [];
        if (this.performance.hand)
          delete this.performance.hand;
      } else {
        this.state = "run:hand";
        timeStamp = now();
        handRes = this.config.hand.enabled ? await predict5(process6.tensor, this.config) : [];
        elapsedTime = Math.trunc(now() - timeStamp);
        if (elapsedTime > 0)
          this.performance.hand = elapsedTime;
      }
      this.analyze("End Hand:");
      this.analyze("Start Object:");
      if (this.config.async) {
        if (this.config.object.modelPath.includes("nanodet"))
          objectRes = this.config.object.enabled ? predict9(process6.tensor, this.config) : [];
        else if (this.config.object.modelPath.includes("centernet"))
          objectRes = this.config.object.enabled ? predict10(process6.tensor, this.config) : [];
        if (this.performance.object)
          delete this.performance.object;
      } else {
        this.state = "run:object";
        timeStamp = now();
        if (this.config.object.modelPath.includes("nanodet"))
          objectRes = this.config.object.enabled ? await predict9(process6.tensor, this.config) : [];
        else if (this.config.object.modelPath.includes("centernet"))
          objectRes = this.config.object.enabled ? await predict10(process6.tensor, this.config) : [];
        elapsedTime = Math.trunc(now() - timeStamp);
        if (elapsedTime > 0)
          this.performance.object = elapsedTime;
      }
      this.analyze("End Object:");
      if (this.config.async)
        [faceRes, bodyRes, handRes, objectRes] = await Promise.all([faceRes, bodyRes, handRes, objectRes]);
      let gestureRes = [];
      if (this.config.gesture.enabled) {
        timeStamp = now();
        gestureRes = [...face(faceRes), ...body(bodyRes), ...hand(handRes), ...iris(faceRes)];
        if (!this.config.async)
          this.performance.gesture = Math.trunc(now() - timeStamp);
        else if (this.performance.gesture)
          delete this.performance.gesture;
      }
      this.performance.total = Math.trunc(now() - timeStart);
      this.state = "idle";
      this.result = {
        face: faceRes,
        body: bodyRes,
        hand: handRes,
        gesture: gestureRes,
        object: objectRes,
        performance: this.performance,
        canvas: process6.canvas,
        timestamp: Date.now(),
        get persons() {
          var _a2;
          return join2(faceRes, bodyRes, handRes, gestureRes, (_a2 = process6 == null ? void 0 : process6.tensor) == null ? void 0 : _a2.shape);
        }
      };
      Ae(process6.tensor);
      resolve(this.result);
    });
  }
  async warmup(userConfig) {
    const t02 = now();
    if (userConfig)
      this.config = mergeDeep(this.config, userConfig);
    if (!this.config.warmup || this.config.warmup === "none")
      return { error: "null" };
    let res;
    if (typeof createImageBitmap === "function")
      res = await __privateGet(this, _warmupBitmap).call(this);
    else if (typeof Image !== "undefined")
      res = await __privateGet(this, _warmupCanvas).call(this);
    else
      res = await __privateGet(this, _warmupNode).call(this);
    const t1 = now();
    if (this.config.debug)
      log("Warmup", this.config.warmup, Math.round(t1 - t02), "ms", res);
    return res;
  }
};
_numTensors = new WeakMap();
_analyzeMemoryLeaks = new WeakMap();
_checkSanity = new WeakMap();
_firstRun = new WeakMap();
_lastInputSum = new WeakMap();
_lastCacheDiff = new WeakMap();
_sanity = new WeakMap();
_checkBackend = new WeakMap();
_skipFrame = new WeakMap();
_warmupBitmap = new WeakMap();
_warmupCanvas = new WeakMap();
_warmupNode = new WeakMap();
export {
  Human,
  Human as default
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
* @license
* Copyright 2018 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
/** @license See the LICENSE file. */
//# sourceMappingURL=human.esm.js.map
