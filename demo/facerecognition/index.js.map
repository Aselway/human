{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["/**\n * Human demo for browsers\n * @default Human Library\n * @summary <https://github.com/vladmandic/human>\n * @author <https://github.com/vladmandic>\n * @copyright <https://github.com/vladmandic>\n * @license MIT\n */\n\nimport { Human } from '../../dist/human.esm.js'; // equivalent of @vladmandic/Human\n\nconst humanConfig = { // user configuration for human, used to fine-tune behavior\n  modelBasePath: '../../models',\n  filter: { equalization: true }, // lets run with histogram equilizer\n  face: {\n    enabled: true,\n    detector: { rotation: true, return: true }, // return tensor is not really needed except to draw detected face\n    description: { enabled: true },\n    iris: { enabled: true }, // needed to determine gaze direction\n    emotion: { enabled: false }, // not needed\n    antispoof: { enabled: true }, // enable optional antispoof module\n    liveness: { enabled: true }, // enable optional liveness module\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: true },\n};\n\nconst options = {\n  faceDB: '../facematch/faces.json',\n  minConfidence: 0.6, // overal face confidence for box, face, gender, real\n  minSize: 224, // min input to face descriptor model before degradation\n  maxTime: 10000, // max time before giving up\n  blinkMin: 10, // minimum duration of a valid blink\n  blinkMax: 800, // maximum duration of a valid blink\n};\n\nconst ok = { // must meet all rules\n  faceCount: false,\n  faceConfidence: false,\n  facingCenter: false,\n  blinkDetected: false,\n  faceSize: false,\n  antispoofCheck: false,\n  livenessCheck: false,\n  elapsedMs: 0, // total time while waiting for valid face\n};\nconst allOk = () => ok.faceCount && ok.faceSize && ok.blinkDetected && ok.facingCenter && ok.faceConfidence && ok.antispoofCheck && ok.livenessCheck;\n\nconst blink = { // internal timers for blink start/end/duration\n  start: 0,\n  end: 0,\n  time: 0,\n};\n\nlet db: Array<{ name: string, source: string, embedding: number[] }> = []; // holds loaded face descriptor database\nconst human = new Human(humanConfig); // create instance of human with overrides from user configuration\n\nhuman.env['perfadd'] = false; // is performance data showing instant or total values\nhuman.draw.options.font = 'small-caps 18px \"Lato\"'; // set font used to draw labels when using draw methods\nhuman.draw.options.lineHeight = 20;\n\nconst dom = { // grab instances of dom objects so we dont have to look them up later\n  video: document.getElementById('video') as HTMLVideoElement,\n  canvas: document.getElementById('canvas') as HTMLCanvasElement,\n  log: document.getElementById('log') as HTMLPreElement,\n  fps: document.getElementById('fps') as HTMLPreElement,\n  status: document.getElementById('status') as HTMLPreElement,\n};\nconst timestamp = { detect: 0, draw: 0 }; // holds information used to calculate performance and possible memory leaks\nconst fps = { detect: 0, draw: 0 }; // holds calculated fps information for both detect and screen refresh\nlet startTime = 0;\n\nconst log = (...msg) => { // helper method to output messages\n  dom.log.innerText += msg.join(' ') + '\\n';\n  // eslint-disable-next-line no-console\n  console.log(...msg);\n};\nconst printFPS = (msg) => dom.fps.innerText = msg; // print status element\nconst printStatus = (msg) => dom.status.innerText = 'status: ' + JSON.stringify(msg).replace(/\"|{|}/g, '').replace(/,/g, ' | '); // print status element\n\nasync function webCam() { // initialize webcam\n  printFPS('starting webcam...');\n  // @ts-ignore resizeMode is not yet defined in tslib\n  const cameraOptions: MediaStreamConstraints = { audio: false, video: { facingMode: 'user', resizeMode: 'none', width: { ideal: document.body.clientWidth } } };\n  const stream: MediaStream = await navigator.mediaDevices.getUserMedia(cameraOptions);\n  const ready = new Promise((resolve) => { dom.video.onloadeddata = () => resolve(true); });\n  dom.video.srcObject = stream;\n  dom.video.play();\n  await ready;\n  dom.canvas.width = dom.video.videoWidth;\n  dom.canvas.height = dom.video.videoHeight;\n  log('video:', dom.video.videoWidth, dom.video.videoHeight, stream.getVideoTracks()[0].label);\n  dom.canvas.onclick = () => { // pause when clicked on screen and resume on next click\n    if (dom.video.paused) dom.video.play();\n    else dom.video.pause();\n  };\n}\n\nasync function detectionLoop() { // main detection loop\n  if (!dom.video.paused) {\n    await human.detect(dom.video); // actual detection; were not capturing output in a local variable as it can also be reached via human.result\n    const now = human.now();\n    fps.detect = 1000 / (now - timestamp.detect);\n    timestamp.detect = now;\n    requestAnimationFrame(detectionLoop); // start new frame immediately\n  }\n}\n\nasync function validationLoop(): Promise<typeof human.result.face> { // main screen refresh loop\n  const interpolated = await human.next(human.result); // smoothen result using last-known results\n  await human.draw.canvas(dom.video, dom.canvas); // draw canvas to screen\n  await human.draw.all(dom.canvas, interpolated); // draw labels, boxes, lines, etc.\n  const now = human.now();\n  fps.draw = 1000 / (now - timestamp.draw);\n  timestamp.draw = now;\n  printFPS(`fps: ${fps.detect.toFixed(1).padStart(5, ' ')} detect | ${fps.draw.toFixed(1).padStart(5, ' ')} draw`); // write status\n\n  ok.faceCount = human.result.face.length === 1; // must be exactly detected face\n  if (ok.faceCount) { // skip the rest if no face\n    const gestures: string[] = Object.values(human.result.gesture).map((gesture) => gesture.gesture); // flatten all gestures\n    if (gestures.includes('blink left eye') || gestures.includes('blink right eye')) blink.start = human.now(); // blink starts when eyes get closed\n    if (blink.start > 0 && !gestures.includes('blink left eye') && !gestures.includes('blink right eye')) blink.end = human.now(); // if blink started how long until eyes are back open\n    ok.blinkDetected = ok.blinkDetected || (blink.end - blink.start > options.blinkMin && blink.end - blink.start < options.blinkMax);\n    if (ok.blinkDetected && blink.time === 0) blink.time = Math.trunc(blink.end - blink.start);\n    ok.facingCenter = gestures.includes('facing center') && gestures.includes('looking center'); // must face camera and look at camera\n    ok.faceConfidence = (human.result.face[0].boxScore || 0) > options.minConfidence && (human.result.face[0].faceScore || 0) > options.minConfidence && (human.result.face[0].genderScore || 0) > options.minConfidence;\n    ok.antispoofCheck = (human.result.face[0].real || 0) > options.minConfidence;\n    ok.livenessCheck = (human.result.face[0].live || 0) > options.minConfidence;\n    ok.faceSize = human.result.face[0].box[2] >= options.minSize && human.result.face[0].box[3] >= options.minSize;\n  }\n\n  printStatus(ok);\n\n  if (allOk()) { // all criteria met\n    dom.video.pause();\n    return human.result.face;\n  } else {\n    human.tf.dispose(human.result.face[0].tensor); // results are not ok, so lets dispose tensor\n  }\n  if (ok.elapsedMs > options.maxTime) { // give up\n    dom.video.pause();\n    return human.result.face;\n  } else { // run again\n    ok.elapsedMs = Math.trunc(human.now() - startTime);\n    return new Promise((resolve) => {\n      setTimeout(async () => {\n        const res = await validationLoop(); // run validation loop until conditions are met\n        if (res) resolve(human.result.face); // recursive promise resolve\n      }, 30); // use to slow down refresh from max refresh rate to target of 30 fps\n    });\n  }\n}\n\nasync function detectFace(face) {\n  // draw face and dispose face tensor immediatey afterwards\n  dom.canvas.width = face.tensor.shape[2];\n  dom.canvas.height = face.tensor.shape[1];\n  dom.canvas.style.width = '';\n  human.tf.browser.toPixels(face.tensor, dom.canvas);\n  human.tf.dispose(face.tensor);\n\n  const arr = db.map((rec) => rec.embedding);\n  const res = await human.match(face.embedding, arr);\n  log(`found best match: ${db[res.index].name} similarity: ${Math.round(1000 * res.similarity) / 10}% source: ${db[res.index].source}`);\n}\n\nasync function loadFaceDB() {\n  const res = await fetch(options.faceDB);\n  db = (res && res.ok) ? await res.json() : [];\n  log('loaded face db:', options.faceDB, 'records:', db.length);\n}\n\nasync function main() { // main entry point\n  log('human version:', human.version, '| tfjs version:', human.tf.version_core);\n  printFPS('loading...');\n  await loadFaceDB();\n  await human.load(); // preload all models\n  printFPS('initializing...');\n  await human.warmup(); // warmup function to initialize backend for future faster detection\n  await webCam(); // start webcam\n  await detectionLoop(); // start detection loop\n  startTime = human.now();\n  const face = await validationLoop(); // start validation loop\n  if (!allOk()) log('did not find valid input', face);\n  else {\n    log('found valid face', face);\n    await detectFace(face[0]);\n  }\n  dom.fps.style.display = 'none';\n}\n\nwindow.onload = main;\n"],
  "mappings": "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",
  "names": []
}
